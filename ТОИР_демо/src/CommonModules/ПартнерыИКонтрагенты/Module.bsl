
#Область ПрограммныйИнтерфейс

// Получает контрагента по умолчанию
//
// Параметры:
//  Партнер	  - Справочник.Партнеры - партнер для которого необходимо получить контрагента.
//
// Возвращаемое значение:
//   Справочник.Контрагенты   - контрагент партнера по умолчанию.
//
Функция ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка КАК Контрагент
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Партнер = &Партнер";
		
	Иначе
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИерархияПартнеров.Родитель КАК Партнер,
		|	Контрагенты.Ссылка КАК Контрагент,
		|	ИерархияПартнеров.Уровень
		|ПОМЕСТИТЬ ДоступныеКонтрагентыПартнера
		|ИЗ
		|	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО ИерархияПартнеров.Родитель = Контрагенты.Партнер
		|ГДЕ
		|	ИерархияПартнеров.Партнер = &Партнер
		|	И (НЕ Контрагенты.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоступныеКонтрагентыПартнера.Уровень КАК Уровень,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) КАК КоличествоНаУровне
		|ПОМЕСТИТЬ БлижнийУровень
		|ИЗ
		|	ДоступныеКонтрагентыПартнера КАК ДоступныеКонтрагентыПартнера
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеКонтрагентыПартнера.Уровень
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) = 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уровень УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоступныеКонтрагентыПартнера.Уровень КАК Уровень,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) КАК КоличествоНаУровне
		|ПОМЕСТИТЬ УровеньСЧисломКонтрагентовБольшеОдного
		|ИЗ
		|	ДоступныеКонтрагентыПартнера КАК ДоступныеКонтрагентыПартнера
		|
		|СГРУППИРОВАТЬ ПО
		|	ДоступныеКонтрагентыПартнера.Уровень
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ДоступныеКонтрагентыПартнера.Контрагент) > 1
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уровень УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(БлижнийУровень.Уровень, 0) < ЕСТЬNULL(УровеньСЧисломКонтрагентовБольшеОдного.Уровень, 0)
		|			ТОГДА NULL
		|		ИНАЧЕ БлижнийУровень.Уровень
		|	КОНЕЦ КАК Уровень
		|ПОМЕСТИТЬ ИскомыйУровень
		|ИЗ
		|	БлижнийУровень КАК БлижнийУровень
		|		ПОЛНОЕ СОЕДИНЕНИЕ УровеньСЧисломКонтрагентовБольшеОдного КАК УровеньСЧисломКонтрагентовБольшеОдного
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоступныеКонтрагентыПартнера.Контрагент
		|ИЗ
		|	ДоступныеКонтрагентыПартнера КАК ДоступныеКонтрагентыПартнера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИскомыйУровень КАК ИскомыйУровень
		|		ПО ДоступныеКонтрагентыПартнера.Уровень = ИскомыйУровень.Уровень";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Результат = Выборка.Контрагент;
		
	Иначе
		
		Результат = Справочники.Контрагенты.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Заполняет контрагента по партнеру
//
// Параметры:
//   Партнер - СправочникСсылка.Партнеры - Партнер, контрагента которого нужно заполнить.
//   Контрагент - СправочникСсылка.Контрагенты -Контрагент которого нужно заполнить.
//
Процедура ЗаполнитьКонтрагентаПартнераПоУмолчанию(Знач Партнер, Контрагент) Экспорт
	
	Если ЗначениеЗаполнено(Партнер) И
		Не ЗначениеЗаполнено (Контрагент) Тогда
		
		КонтрагентПоУмолчанию = ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
		
		Если КонтрагентПоУмолчанию <> Неопределено Тогда
			Контрагент = КонтрагентПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контактное лицо по партнеру
//
// Параметры:
// 	Партнер - СправочникСсылка.Партнеры - Партнер, контктактное лицо которого нужно заполнить.
// 	КонтактноеЛицо - СправочникСсылка.КонтактныеЛицаПартнеров -КонтактноеЛицо которое нужно заполнить.
//
Процедура ЗаполнитьКонтактноеЛицоПартнераПоУмолчанию(Знач Партнер, КонтактноеЛицо) Экспорт
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонтактноеЛицо) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтактноеЛицо, "Владелец") <> Партнер Тогда
		КонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(КонтактноеЛицо) Тогда
		
		КонтактноеЛицоПоУмолчанию = ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Партнер);
		
		Если КонтактноеЛицоПоУмолчанию <> Неопределено Тогда
			КонтактноеЛицо = КонтактноеЛицоПоУмолчанию;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает контактное лицо партнера по умолчанию
//
// Параметры:
//  Партнер	  - Справочник.Партнеры - партнер для которого необходимо получить контактное лицо.
//
// Возвращаемое значение:
//   Справочник.КонтактныеЛицаПартнеров   - контактное лицо партнера по умолчанию.
//
Функция ПолучитьКонтактноеЛицоПартнераПоУмолчанию(Партнер) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапрос.Количество = 1
	               |			ТОГДА КонтактныеЛицаПартнеров.Ссылка
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КонтактныеЛицаПартнеров.ПустаяСсылка)
	               |	КОНЕЦ КАК КонтактноеЛицо
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактныеЛицаПартнеров.Ссылка) КАК Количество
	               |	ИЗ
	               |		Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |	ГДЕ
	               |		КонтактныеЛицаПартнеров.Владелец = &Партнер
	               |		И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления) КАК ВложенныйЗапрос,
	               |	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	               |ГДЕ
	               |	КонтактныеЛицаПартнеров.Владелец = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КонтактноеЛицо;
	
КонецФункции

// Определяет, есть ли в базе контрагент с таким же набором ИНН/КПП
// Параметры:
//		ИНН - Строка - ИНН.
//		КПП - Строка - КПП.
//		ИсключаяСсылку - СправочникСсылка.Контрагенты - ссылка.
//
// Возвращаемое значение:
// 	СправочникСсылка.Конрагенты, Неопределено - контрагент с таким же ИНН и КПП.
Функция ИННКППУжеИспользуетсяВИнформационнойБазе(ИНН,КПП,ИсключаяСсылку = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП
	|	И Контрагенты.Ссылка <> &Ссылка";
	
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	Запрос.УстановитьПараметр("Ссылка",ИсключаяСсылку);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Определяет доступен ли для пользователя упрощенный ввод партнеров и контрагентов.
//
// Возвращаемое значение:
//   Булево   - Истина, если упрощенный ввод доступен, и ложь в обратном случае.
//
Функция УпрощенныйВводДоступен() Экспорт
	
	Возврат ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры); 
	
КонецФункции

// Заполняет список партнера с родителями.
// Параметры:
//		Партнер - СправочникСсылка.Партнеры - партнер.
//		СписокПартнераСРодителями - СписокЗначений - заполняемый список.
Процедура ЗаполнитьСписокПартнераСРодителями(Партнер,СписокПартнераСРодителями) Экспорт
	
	СписокПартнераСРодителями.Очистить();
	
	Если Не ЗначениеЗаполнено(Партнер) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Получить родителей партнера
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка,
	|	Партнеры.Наименование
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ
	|");
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	ДеревоИерархии = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЗаполнитьСписокПартнеровИзДерева(ДеревоИерархии.Строки, СписокПартнераСРодителями,Партнер);
	
КонецПроцедуры

// Получает список всех родительских и дочерних элементов партнера в иерархии.
//
// Параметры:
//  Партнер  - Справочник.Партнеры - партнер, для которого формируется список.
//  СписокПартнераСРодителями - СписокЗначений - список значений, который включает самого 
//											партнера и все родителей и дочерние элементы в иерархии.
//
Процедура ЗаполнитьСписокПартнераСоВсехИерархией(Партнер, СписокПартнераСРодителями) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА ИерархияПартнеров.Партнер = &Партнер
	|			ТОГДА ИерархияПартнеров.Родитель
	|		ИНАЧЕ ИерархияПартнеров.Партнер
	|	КОНЕЦ КАК Партнер,
	|	ВЫБОР
	|		КОГДА ИерархияПартнеров.Партнер = &Партнер
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(ИерархияПартнеров.Родитель)
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ИерархияПартнеров.Партнер)
	|	КОНЕЦ КАК Представление
	|ИЗ
	|	РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|ГДЕ
	|	(ИерархияПартнеров.Партнер = &Партнер
	|			ИЛИ ИерархияПартнеров.Родитель = &Партнер)";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокПартнераСРодителями.Добавить(Выборка.Партнер, Выборка.Представление);
	КонецЦикла;
	
	Возврат;
	
КонецПроцедуры

// Процедура выполняет обновление индекса полнотекстового поиска в привилегированном режиме.
//
Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ПолнотекстовыйПоиск.ОбновитьИндекс();
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#Область ИерархияПартнеров

// Выполняет запись в РС "Иерархия партнеров" для массива переданных партнеров или для всего справочника,
// если массив не передан в процедуру.
//
// Параметры:
//  МассивПартнеров	- Массив - массив содержащих партнеров, для которых необходимо выполнить запись в РС "Иерархия партнеров".
//
Процедура ВыполнитьЗаписьИерархияПартнеров(МассивПартнеров = Неопределено) Экспорт
	
	Если МассивПартнеров = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Партнеры.Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры
		|ГДЕ
		|	Партнеры.Родитель = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ЗаписатьИерархиюПартнера(Выборка.Ссылка);
			
		КонецЦикла;
		
	Иначе
		
		Для каждого ЭлементМассива Из МассивПартнеров Цикл
			
			ЗаписатьИерархиюПартнера(ЭлементМассива);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Очищает РС "Иерархия партнеров"
Процедура ОчиститьРегистрСведенийИерархияПартнеров() Экспорт
	
	НаборЗаписей = РегистрыСведений.ИерархияПартнеров.СоздатьНаборЗаписей();
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет запись в РС "Иерархия партнеров" для переданного в процедуру партнера.
//
// Параметры:
//  Ссылка	- СправочникСсылка.Партнеры - ссылка на партнера для которого необходимо выполнить запись в РС "Иерархия партнеров".
//
Процедура ЗаписатьИерархиюПартнера(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Партнеры.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка В ИЕРАРХИИ(&Ссылка)
	|ИТОГИ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоИерархии = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	ЭлементТекущегоСправочника = ДеревоИерархии.Строки.Найти(Ссылка,"Ссылка",Истина);
	
	Если ЭлементТекущегоСправочника <> Неопределено Тогда
		ВыполнитьЗаписьВРегистрПоПартнеру(ЭлементТекущегоСправочника);
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаПартнеры

// Заполняет данные конрагента партнера.
// Параметры:
//		Форма - УправляемаяФорма - форма.
//		Партнер - СправочникСсылка.Партнеры - партнер.
Процедура ЗаполнитьДанныеКонтрагентаПартнера(Форма, Партнер) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Контрагенты.Ссылка КАК КонтрагентПартнера,
	|	Контрагенты.ЮридическоеФизическоеЛицо,
	|	Контрагенты.ИНН,
	|	Контрагенты.КПП
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер";
	
	Запрос.УстановитьПараметр("Партнер",Партнер);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
	
		ЗаполнитьЗначенияСвойств(Форма, Выборка);
	
	КонецЕсли;

КонецПроцедуры

// Устанавливает доступность и видимость юридическим рекизитам: ИНН, КПП, КодПоОКПО, ГоловнойКонтрагент
// в зависимости от вида контрагента.
//
// Параметры:
//  Форма - УправляемаяФорма - форма, для которой выполняются действия.
//  ЮрФизЛицо - Перечисление.ЮрФизЛицо - вид контрагента.
//  ОбособленноеПодразделение - Булево - признак обособленного контрагента.
//  ИНН - Строка - значение ИНН контрагента.
//
Процедура УправлениеЭлементамиЮридическихРеквизитов(Форма, Знач ЮрФизЛицо, Знач ОбособленноеПодразделение, Знач ИНН) Экспорт
	
	Элементы = Форма.Элементы;
	
	ЭтоЮрЛицо             = (ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	ЭтоФизЛицо            = (ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	
	МассивСтраниц = Новый Массив;
	МассивСтраниц.Добавить("СтраницаИННФизЛицо");
	МассивСтраниц.Добавить("СтраницаИННЮрЛицо");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивСтраниц, "Видимость", Ложь);
	
	Если ЭтоФизЛицо Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаИННФизЛицо", "Видимость", Истина);
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СтраницаИННЮрЛицо", "Видимость", Истина);
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ИНН");
	МассивЭлементов.Добавить("КПП");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность", ЭтоЮрЛицо);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаголовокИНН", "Доступность",
		ЭтоЮрЛицо Или ЭтоФизЛицо);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаполнитьКПП", "Доступность",
		ЭтоЮрЛицо И Не ПустаяСтрока(ИНН));
			
КонецПроцедуры

// Обработчик при создании на серверер формы элемента справочника.
// Параметры:
//		Форма - УправляемаяФорма - форма.
//		Отказ - Булево - отказ.
//		СтандартнаяОбработка - Булево - стандартная обработка.
Процедура ПартнерыФормаВыбораСпискаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если Не Найти(Форма.ИмяФормы, "Контрагенты") > 0 Тогда
		Форма.Список.ТекстЗапроса = ТекстЗапросаДинамическогоСпискаПартнеры();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
	                                                                   "ОтборПоПолнотекстовомуПоискуУстановлен",
	                                                                   Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Форма.Список,
	                                                                   "ОтборПоПолнотекстовомуПоиску",
	                                                                   Неопределено);
	//
	Форма.УпрощенныйВводДоступен               = УпрощенныйВводДоступен();
	Форма.ТекущийПользователь                  = Пользователи.АвторизованныйПользователь();
	Форма.ДоступноДобавлениеПартнеров          = ПравоДоступа("Добавление", Метаданные.Справочники.Партнеры);
	Форма.ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");

	ДоступностьПолнотекстовыйПоискСписокПартнеры(Форма);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "СоздатьНового", "Видимость", Форма.УпрощенныйВводДоступен);
	
	ЗаполнитьСписокВыбораТипФильтраСписокПартнеров(Форма, Форма.Элементы.ТипФильтра.СписокВыбора);
	Форма.ТипФильтра = Форма.Элементы.ТипФильтра.СписокВыбора[0].Значение;
	УстановитьОтборыДинамическийСписокПартнеры(Форма);
	СоздатьРеквизитыДляОтображенияКИ(Форма);
	
КонецПроцедуры

// Устанавливает условное оформление в форме списка партнеров.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для которой устанавливается условное оформление.
//
Процедура ПартнерыФормаВыбораСпискаУсловноеОформление(Форма) Экспорт

	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СтрокаПоиска.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РасширенныйПоиск");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СтрокаПоиска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FieldBackColor);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Менеджеры.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Свойства.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИспользоватьФильтр");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.FormBackColor);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет (160,160,164));

КонецПроцедуры

// Создаер реквизиты для отображения контактной информации.
// Параметры:
//		Форма - УправляемаяФорма - форма.
Процедура СоздатьРеквизитыДляОтображенияКИ(Форма) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ОписаниеТипаСтроки500 = Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500));
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка,
	|	ВидыКонтактнойИнформации.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеУпорядочивания
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
	|	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочивания";
	
	ТаблицаВидовКИ = Запрос.Выполнить().Выгрузить();
	
	МаксимальнаяДлинаВидаКИ = 0;
	Для каждого СтрокаКИ Из ТаблицаВидовКИ Цикл
		Если СтрДлина(СтрокаКИ.Наименование) > МаксимальнаяДлинаВидаКИ Тогда
			МаксимальнаяДлинаВидаКИ = СтрДлина(СтрокаКИ.Наименование + 3);
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеТипаСтрокиВидКИ = Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(МаксимальнаяДлинаВидаКИ + 3));
	Форма.Элементы.ГруппаВидыКИ.Ширина = МаксимальнаяДлинаВидаКИ + 3;
	Форма.КоличествоВидовКИ = ТаблицаВидовКИ.Количество();
	
	Для инд = 1 По Форма.КоличествоВидовКИ Цикл
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЗаголовокВидКИ_" + Строка(инд), ОписаниеТипаСтрокиВидКИ,));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВидКИ_" + Строка(инд), ОписаниеТипаСтроки500,));
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Для инд = 1 По Форма.КоличествоВидовКИ Цикл
		
		Элемент = Форма.Элементы.Добавить("ЗаголовокВидКИ_" + Строка(инд), Тип("ПолеФормы"), Форма.Элементы.ГруппаВидыКИ);
		Элемент.Вид                      = ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ВертикальноеПоложение    = ВертикальноеПоложениеЭлемента.Верх;
		Элемент.ПутьКДанным              = "ЗаголовокВидКИ_" + Строка(инд);
		Элемент.АвтоВысотаЯчейки         = Истина;
		Элемент.РастягиватьПоВертикали   = Ложь;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Форма["ЗаголовокВидКИ_" + Строка(инд)] = ТаблицаВидовКИ[инд - 1].Наименование + " :";
		
		Элемент = Форма.Элементы.Добавить("ВидКИ_" + Строка(инд), Тип("ПолеФормы"), Форма.Элементы.ГруппаЗначениеКИ);
		Элемент.Вид                      = ВидПоляФормы.ПолеНадписи;
		Элемент.ПоложениеЗаголовка       = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.ВертикальноеПоложение    = ВертикальноеПоложениеЭлемента.Верх;
		Элемент.ПутьКДанным              = "ВидКИ_" + Строка(инд);
		Элемент.ЦветТекста               = Новый Цвет(70,130,180);
		Элемент.АвтоВысотаЯчейки         = Истина;
		Элемент.РастягиватьПоВертикали   = Ложь;
		Элемент.РастягиватьПоГоризонтали = Истина;
		
	КонецЦикла;
	
	Для инд = 1 По Форма.КоличествоВидовКИ Цикл
		
		ЭлементУсловногоОформления = Форма.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ВидКИ_" + Строка(инд));
		ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = НСтр("ru = '<Не указан>'");
		ЭлементОтбораДанных.Использование  = Истина;
		
		ЭлементЦветаОформления               = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
		ЭлементЦветаОформления.Значение      = Новый Цвет(160,160,164);
		ЭлементЦветаОформления.Использование = Истина;
		
		НовыйЭлемент = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		НовыйЭлемент.Поле = Новый ПолеКомпоновкиДанных("ВидКИ_" + Строка(инд));
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет панель информации по данным партнера.
// Параметры:
//		Форма - УправляемаяФорма - форма.
//		Партнер - СправочникСсылка.Партнеры - партнер.
Процедура ЗаполнитьПанельИнформацииПоДаннымПартнера(Форма, Партнер) Экспорт

	Если НЕ Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(
			Форма.Элементы,
			"КонтрагентыПартнера",
			"Доступность",
			Партнер <> Неопределено);
	КонецЕсли;
	
	Если Партнер = Неопределено Тогда
		
		ДанныеПартнера = Неопределено;
		
		Если Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
			Форма.НаименованиеТекущегоПартнера                = НСтр("ru = 'Контрагент не выбран'");
		Иначе
			Форма.НаименованиеТекущегоПартнера                = НСтр("ru = 'Партнер не выбран'");
			Форма.КонтрагентыПартнера                         = НСтр("ru = 'Контрагенты'");
		КонецЕсли;
		
		Форма.ТекущийБизнесРегион 	 = "";
		Форма.КонтактныеЛицаПартнера = НСтр("ru = 'Контактные лица'");
		
	Иначе
		
		ДанныеПартнера = ДанныеПартнераДляПанелиИнформации(Партнер);
		
		Форма.НаименованиеТекущегоПартнера = ДанныеПартнера.Наименование;
		
		Если НЕ Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
			Форма.КонтрагентыПартнера = НСтр("ru = 'Контрагенты'") + " (" + Строка(ДанныеПартнера.КоличествоКонтрагентов) + ")";
		КонецЕсли;
		
		Форма.ТекущийБизнесРегион 	 = ?(Форма.ИспользоватьБизнесРегионы, ДанныеПартнера.БизнесРегион, " ");
		Форма.КонтактныеЛицаПартнера = НСтр("ru = 'Контактные лица'") + " (" + Строка(ДанныеПартнера.КоличествоКонтактныхЛиц) + ")";
		
	КонецЕсли;
	
	ЗаполнитьДанныеКИПартнера(ДанныеПартнера, Форма);
	
	Форма.ТекущийАктивныйПартнер = Партнер;

КонецПроцедуры

// Заполняет данные контактной информации.
// Параметры:
//		ДанныеПартнера - Структура - структура данных.
//		Форма - УправляемаяФорма - форма.
Процедура ЗаполнитьДанныеКИПартнера(ДанныеПартнера, Форма) Экспорт
	
	Если ДанныеПартнера = Неопределено Тогда
		
		Для инд = 1 По Форма.КоличествоВидовКИ Цикл
			
			Форма["ВидКИ_" + Строка(инд)] = НСтр("ru = '<Не указан>'");
			
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
	Если ДанныеПартнера.КонтактнаяИнформацияТаблица.Количество() > Форма.КоличествоВидовКИ Тогда
		Возврат;
	КонецЕсли;
	
	Для инд = 1 По Форма.КоличествоВидовКИ Цикл
		
		Если ПустаяСтрока(ДанныеПартнера.КонтактнаяИнформацияТаблица[инд - 1].ПредставлениеКИ) Тогда
			Форма["ВидКИ_" + Строка(инд)] = НСтр("ru = '<Не указан>'");
		Иначе
			Форма["ВидКИ_" + Строка(инд)] = ДанныеПартнера.КонтактнаяИнформацияТаблица[инд - 1].ПредставлениеКИ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Изменяет отбор списка.
// Параметры:
//		Форма - УправляемаяФорма - форма.
//		ПереформированиеПанелиНавигации - Булево - переформирование панели навигации.
//		ТребуетсяЗаполнениеСтраницыСвойств - Булево - требуется заполнение страницы свойств.
Процедура ИзменитьОтборСписок(Форма, ПереформированиеПанелиНавигации, ТребуетсяЗаполнениеСтраницыСвойств) Экспорт
	
	Если ТребуетсяЗаполнениеСтраницыСвойств Тогда
		
		Если Форма.ТипФильтра = "Категории" Тогда
			ЗаполнитьДеревоКатегорий(Форма);
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории;
			
			НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели","Категории"));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтрокиПанели = Форма.Категории.НайтиСтроки(Новый Структура("Значение", НайденныеСтроки[0].ТекущееЗначение));
				Если НайденныеСтрокиПанели.Количество() > 0 Тогда
					Форма.Элементы.Категории.ТекущаяСтрока = НайденныеСтрокиПанели[0].ПолучитьИдентификатор();
				КонецЕсли;
			КонецЕсли;
			
			Форма.НеОтрабатыватьАктивизациюПанелиНавигации = Истина;
			
		Иначе
			
			ЗаполнитьДеревоСвойств(Форма);
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства;
			
			НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели", Форма.ТипФильтра));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Форма.Элементы.Свойства.ТекущаяСтрока = НайтиСтрокуВДанныхФормыДерево(Форма.Свойства, НайденныеСтроки[0].ТекущееЗначение, "Значение", Истина)
			КонецЕсли;
			
			Форма.НеОтрабатыватьАктивизациюПанелиНавигации = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстанавливатьОтбор = Истина;
	Если НЕ Форма.ИспользоватьФильтр Тогда
		Форма.ТекущееЗначениеФильтра = Неопределено;
		УстанавливатьОтбор = Ложь;
	КонецЕсли;
	
	Если УстанавливатьОтбор ИЛИ Форма.ТолькоМои Тогда
		ГруппаОтбора = СоздатьГруппуОтбораПоФильтру(Форма);
	Иначе
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы, "ОтборПоФильтру");
		Если ГруппаОтбора <> Неопределено Тогда
			ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы.Удалить(ГруппаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства Тогда
		
		Форма.ТолькоЗначимые = Истина;
		Форма.Элементы.ТолькоЗначимые.Доступность = Ложь;
		ИмяРеквизитаОтбора = ?(Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнеры" 
		                      ИЛИ Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнерыБезПолнотекстовогоПоиска",
		                      "Партнер", "Ссылка");
		
	Иначе
		
		Форма.Элементы.ТолькоЗначимые.Доступность = Истина;
		
		Если ПереформированиеПанелиНавигации Тогда
			
			Если Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры Тогда
				НайденныеСтроки = Форма.НастройкиПанелейНавигации.НайтиСтроки(Новый Структура("ВидПанели", "Менеджер"));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Форма.Элементы.Менеджеры.ТекущаяСтрока = НайденныеСтроки[0].ТекущееЗначение;
				КонецЕсли;
				ИмяСписка = "Менеджеры";
			КонецЕсли;
			
			ОтборСпискаДляИзменения = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма[ИмяСписка]);
			СписокЗначимые = СписокЗначимыхЗначенийПанелиНавигации(ИмяСписка);
			
			Если ПереформированиеПанелиНавигации И НЕ Форма.ТолькоЗначимые Тогда
				ГруппаОтбораЗначимые = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(ОтборСпискаДляИзменения.Элементы, "ОтборПоЗначимым");
				Если ГруппаОтбораЗначимые <> Неопределено Тогда
					ОтборСпискаДляИзменения.Элементы.Удалить(ГруппаОтбораЗначимые);
				КонецЕсли;
			Иначе
				ГруппаОтбораЗначимые = СоздатьГруппуОтбораЗначимые(ОтборСпискаДляИзменения);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбораЗначимые,
				"Ссылка",
				ВидСравненияКомпоновкиДанных.ВСписке,
				СписокЗначимые);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры И ПозиционированиеКорректно("Менеджеры", Форма) Тогда
		
		Если УстанавливатьОтбор Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		                                                       "ОсновнойМенеджер",
		                                                       ВидСравненияКомпоновкиДанных.Равно,
		                                                       Форма.Элементы.Менеджеры.ТекущаяСтрока);
		КонецЕсли;
		
		Форма.ТекущееЗначениеФильтра = Форма.Элементы.Менеджеры.ТекущаяСтрока;
		
	ИначеЕсли Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства Тогда
		
		Если УстанавливатьОтбор Тогда
			
			Если Форма.Элементы.Свойства.ТекущаяСтрока <> Неопределено И ТипЗнч(Форма.Элементы.Свойства.ТекущаяСтрока) = Тип("Число") Тогда 
				ТекущиеДанные = Форма.Свойства.НайтиПоИдентификатору(Форма.Элементы.Свойства.ТекущаяСтрока);
				Если ТекущиеДанные <> Неопределено Тогда
					ЗначениеОтбора =  ТекущиеДанные.Значение;
				Иначе
					Возврат;
				КонецЕсли;
			Иначе
				Возврат
			КонецЕсли;
			
			Если ЗначениеОтбора = НСтр("ru = 'Не указан'") Тогда
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
				                                                       ИмяРеквизитаОтбора + ".[" + Форма.ТипФильтра.Наименование + "]",
				                                                       ВидСравненияКомпоновкиДанных.НеЗаполнено)
				
			ИначеЕсли ЗначениеОтбора = НСтр("ru = 'Все'") Тогда
				
				ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы.Удалить(ГруппаОтбора);
				Возврат;
				
			Иначе
				
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
				                                                       ИмяРеквизитаОтбора + ".[" + Форма.ТипФильтра.Наименование + "]",
				                                                       ВидСравненияКомпоновкиДанных.Равно,
				                                                       ЗначениеОтбора);
				
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекущееЗначениеФильтра = ЗначениеОтбора;
		
	КонецЕсли;

	
	Если Форма.ТолькоМои И НЕ Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
		                                                       "ОсновнойМенеджер",
		                                                       ВидСравненияКомпоновкиДанных.Равно,
		                                                       Форма.ТекущийПользователь);
	КонецЕсли;
	
КонецПроцедуры

// Находит первую строку в заданной колонке, с заданным значением в коллекции ДанныеФормыДерево.
// Параметры:
//		ГдеИскать - ДанныеФормыДерево - дереко, где искать.
//		Значение - Произвольный - значение поиска.
//		Колонка - Строка - имя колонки.
//		ИскатьВПодчиненных - Булево - искать в подчиненных.
//
// Возвращаемое значение:
//		Число - Идентификатор найденной строки или -1, если строка не найдена.
Функция НайтиСтрокуВДанныхФормыДерево(ГдеИскать, Значение, Колонка, ИскатьВПодчиненных) Экспорт
	
	ЭлементыДерева = ГдеИскать.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева[Колонка] = Значение Тогда
			Возврат ЭлементДерева.ПолучитьИдентификатор();
		ИначеЕсли  ИскатьВПодчиненных Тогда
			НайденныйИдентификаторСтроки =  НайтиСтрокуВДанныхФормыДерево(ЭлементДерева, Значение, Колонка, ИскатьВПодчиненных);
			Если НайденныйИдентификаторСтроки >=0 Тогда
				Возврат НайденныйИдентификаторСтроки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат -1;
	
КонецФункции

// Создает группу элементов отбора.
//	Параметры:
//		ОтборДляИзменения - ОтборКомпоновкиДанных - отбор для изменения.
// Возвращаемое значение:
//		ГруппаОтборов - добавленая группа элементов отбора.
Функция СоздатьГруппуОтбораЗначимые(ОтборДляИзменения) Экспорт

	Возврат ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ОтборДляИзменения.Элементы,"ОтборПоЗначимым",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

КонецФункции

// Создает группу элементов отбора.
//	Параметры:
//		Форма - УправляемаяФорма - форма.
// Возвращаемое значение:
//		ГруппаОтборов - добавленая группа элементов отбора.
Функция СоздатьГруппуОтбораПоФильтру(Форма) Экспорт

	Возврат ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы, "ОтборПоФильтру",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);

КонецФункции

// Позиционирование корректно.
// Параметры:
//		ИмяСписка - Строка - имя списка.
//		Форма - УправляемаяФорма - форма.
// Возвращаемое значение:
//		Булево - позиционирование корректно.
Функция ПозиционированиеКорректно(ИмяСписка,Форма) Экспорт

	ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		
	Если ТипЗнч(Форма.Элементы[ИмяСписка].ТекущаяСтрока) <> ТипГруппировка И ЗначениеЗаполнено(Форма.Элементы[ИмяСписка].ТекущаяСтрока) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

// Перед загрузкой данных из настроек на сервере.
//
// Параметры:
//		Форма - УправляемаяФорма - форма.
//		Настройки - Соответствие - настройки.
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Форма, Настройки) Экспорт
	
	ТипФильтраНастройки                  = Настройки.Получить("ТипФильтра");
	ТекущееЗначениеФильтраНастройки      = Настройки.Получить("ТекущееЗначениеФильтра");
	ИспользоватьФильтрНастройки          = Настройки.Получить("ИспользоватьФильтр");
	ИсторияВыбораСегментовНастройки      = Неопределено;
	ТолькоЗначимыеНастройки              = Настройки.Получить("ТолькоЗначимые");
	Сегмент                              = Неопределено;
	ТолькоМои                            = Настройки.Получить("ТолькоМои");
	
	Если ИсторияВыбораСегментовНастройки <> Неопределено Тогда
		Форма.Элементы.Сегмент.СписокВыбора.ЗагрузитьЗначения(ИсторияВыбораСегментовНастройки.ВыгрузитьЗначения());
	КонецЕсли;

	Если ТолькоМои <> Неопределено Тогда
		Форма.ТолькоМои = ТолькоМои;
		Настройки.Удалить("ТолькоМои");
		Если Форма.ИспользоватьФильтр И Форма.ТипФильтра = "Менеджер" Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТолькоМои","Доступность", Ложь);
			Форма.ТолькоМои = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если ТипФильтраНастройки = Неопределено  Тогда
		Возврат;
	ИначеЕсли Форма.Элементы.ТипФильтра.СписокВыбора.НайтиПоЗначению(ТипФильтраНастройки) <> Неопределено Тогда
		
		Форма.ТипФильтра = ТипФильтраНастройки;
		
		Если ТипЗнч(ТипФильтраНастройки) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения")Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаСвойства;
			ЗаполнитьДеревоСвойств(Форма);
			Форма.Элементы.Свойства.ТекущаяСтрока = НайтиСтрокуВДанныхФормыДерево(Форма.Свойства, ТекущееЗначениеФильтраНастройки, "Значение", Истина);
		ИначеЕсли Форма.ТипФильтра  = "Категории" Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаКатегории;
			ЗаполнитьДеревоКатегорий(Форма);
			НайденныеСтроки = Форма.Категории.НайтиСтроки(Новый Структура("Значение", ТекущееЗначениеФильтраНастройки));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Форма.Элементы.Категории.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		ИначеЕсли Форма.ТипФильтра  = "БизнесРегионы" Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаБизнесРегионы;
			Форма.Элементы.БизнесРегионы.ТекущаяСтрока = ТекущееЗначениеФильтраНастройки;
		ИначеЕсли Форма.ТипФильтра = "ГруппыДоступа" Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаГруппыДоступа;
			Форма.Элементы.ГруппыДоступаПартнеров.ТекущаяСтрока = ТекущееЗначениеФильтраНастройки;
		ИначеЕсли Форма.ТипФильтра = "Менеджер" Тогда
			Форма.Элементы.СтраницыТипФильтра.ТекущаяСтраница = Форма.Элементы.СтраницаМенеджеры;
			Форма.Элементы.Менеджеры.ТекущаяСтрока = ТекущееЗначениеФильтраНастройки;
		КонецЕсли;
		
		Если ИспользоватьФильтрНастройки <> Неопределено Тогда
			Настройки.Удалить("ИспользоватьФильтр");
			Если Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнеры" И Форма.ПоПартнеру Тогда
				Форма.ИспользоватьФильтр = Ложь;
			Иначе
				Форма.ИспользоватьФильтр =  ИспользоватьФильтрНастройки;
			КонецЕсли;
		КонецЕсли;
		
		Если ТолькоЗначимыеНастройки <> Неопределено Тогда
			Форма.ТолькоЗначимые = ТолькоЗначимыеНастройки;
		КонецЕсли;
		
		Форма.НеОтрабатыватьАктивизациюПанелиНавигации = Истина;
		ИзменитьОтборСписок(Форма,Истина,Ложь);
		
	КонецЕсли;
	
	Настройки.Удалить("ТипФильтра");
	Если ТекущееЗначениеФильтраНастройки <> Неопределено Тогда
		Настройки.Удалить("ТекущееЗначениеФильтра");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСФормами

// Устанавливает заголовоко элемента формы "Партнер" в зависимости от хозяйственной операции.
//
// Параметры:
//  Форма  - УправляемаяФорма - Форма, в которой находится элемент, для которого устанавливается заголовок.
//  ИмяЭлементаФормыПартнер  - Строка - Имя элемента формы, для которого устанавливается заголовок.
//  ХозяйственнаяОперация  - Перечисление.ХозяйственныеОперации - хозяйственная операция, в зависимости от которой 
//                 устанавливается заголовок.
//
Процедура ЗаголовокЭлементаПартнерВЗависимостиОтХозяйственнойОперации(Форма, ИмяЭлементаФормыПартнер, ХозяйственнаяОперация) Экспорт
	
	ЗаголовокПартнер = ЗаголовокРеквизитаПартнерВЗависимостиОтХозяйственнойОперации(ХозяйственнаяОперация);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлементаФормыПартнер, "Заголовок", ЗаголовокПартнер);
	
КонецПроцедуры

// Заголовок реквизита "Партнер" в зависимости от хоз. операции.
// Параметры:
//		ХозяйственнаяОперация - ПеречислениеСсылка.ТипыДоговоров - хозяйственная операция.
// Возвращаемое значение:
//		Строка - заголовок реквизита.
Функция ЗаголовокРеквизитаПартнерВЗависимостиОтХозяйственнойОперации(ХозяйственнаяОперация) Экспорт
	
	Если ХозяйственнаяОперация = Перечисления.ТипыДоговоров.СПокупателем Тогда
		ЗаголовокПартнер = НСтр("ru = 'Клиент'");

	ИначеЕсли ХозяйственнаяОперация = Перечисления.ТипыДоговоров.СПоставщиком Тогда
		ЗаголовокПартнер = НСтр("ru = 'Поставщик'");
	Иначе
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
			ЗаголовокПартнер = НСтр("ru = 'Контрагент'");
		Иначе
			ЗаголовокПартнер = НСтр("ru = 'Партнер'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗаголовокПартнер;
	
КонецФункции


// Изменяет запрос динамического списка партнеров и устанавливает отбор по типу отношений.
//
// Параметры:
//  Форма		 - УправляемаяФорма - форма, для которой устанавливаются отборы.
//
Процедура УстановитьОтборыДинамическийСписокПартнеры(Форма) Экспорт
	
	СформироватьСписокУстановленныхОтборовДинамическийСписокПартнеры(Форма);
	
	Если Форма.СписокОтборПоТипуПартнера.Количество() > 0 Тогда
		
		УстанавливатьОтборПоТипуПартнераКакИЛИ = Ложь;
		
		Если Форма.Параметры.Свойство("УстанавливатьОтборПоТипуПартнераКакИЛИ") И Форма.Параметры.УстанавливатьОтборПоТипуПартнераКакИЛИ Тогда
			УстанавливатьОтборПоТипуПартнераКакИЛИ = Истина;
		КонецЕсли;
		
		Для каждого ЭлементСписка Из Форма.СписокОтборПоТипуПартнера Цикл
			Форма.Параметры.Отбор.Удалить(ЭлементСписка.Значение);
		КонецЦикла;
		
		Форма.Список.ТекстЗапроса =  Форма.Список.ТекстЗапроса + ДополнениеЗапросаДинамическогоСпискаПоПартнерам(Форма.СписокОтборПоТипуПартнера, УстанавливатьОтборПоТипуПартнераКакИЛИ); 
		
		СтрокаЗаголовок = ?(Форма.ИспользоватьПартнеровКакКонтрагентов, НСтр("ru='Контрагенты ('"), НСтр("ru='Партнеры ('"));
		Для каждого ЭлементСписка Из Форма.СписокОтборПоТипуПартнера Цикл
			СтрокаЗаголовок = СтрокаЗаголовок + Метаданные.Справочники.Партнеры.Реквизиты[ЭлементСписка.Значение].Комментарий + ?(УстанавливатьОтборПоТипуПартнераКакИЛИ," ИЛИ "," И ");
		КонецЦикла;
		
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок = Лев(СтрокаЗаголовок, СтрДлина(СтрокаЗаголовок) - ?(УстанавливатьОтборПоТипуПартнераКакИЛИ,5,3)) + ")";
		
	ИначеЕсли Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		
		Форма.АвтоЗаголовок = Ложь;
		Форма.Заголовок =  НСтр("ru='Контрагенты'");
		
	КонецЕсли;
	
	Если Форма.ИспользоватьПартнеровКакКонтрагентов Тогда
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список,
			?(Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнеры"
			   ИЛИ Форма.ИмяФормы = "Справочник.Контрагенты.Форма.ФормаВыбораИспользуютсяТолькоПартнерыБезПолнотекстовогоПоиска", 
			   "Партнер", "Ссылка"),
			Справочники.Партнеры.НеизвестныйПартнер,
			ВидСравненияКомпоновкиДанных.НеРавно);
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет доступность полнотекстового поиска в формах списка и выбора справочника партнеры.
//
// Параметры:
//  Форма		 - УправляемаяФорма - форма, для которой определяется доступность.
//
Процедура ДоступностьПолнотекстовыйПоискСписокПартнеры(Форма) Экспорт
	
	// Настроить видимость элементов
	Форма.РасширенныйПоиск = Ложь;
	
	ОбщегоНазначенияУТ.ИнициализироватьРеквизитыФормыДляПолнотекстовогоПоиска(Форма, "ИспользоватьПолнотекстовыйПоиск"); 
	
		
	Форма.Элементы.СтрокаПоиска.Видимость = Ложь;
	Форма.Элементы.Найти.Видимость        = Ложь;

	
КонецПроцедуры

// Уставнавливает заголовок реквзита в зависимости от значения ФО "Использовать партнеров как контрагентов".
//
// Параметры:
//  Форма  - УправляемаяФорма - Форма, в которой находится элемент, для которого устанавливается заголовок.
//  ИмяЭлемента  - Строка - Имя элемента формы, для которого устанавливается заголовок.
//  НовыйЗаголовок  - Строка - заголовок, который будет установлен, если значение 
//                             ФО "Использовать партнеров как контрагентов" - ИСТИНА.
//  ИспользоватьПартнеровКакКонтрагентов  - Булево - значение ФО "Использовать партнеров как контрагентов".
//
Процедура ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(Форма, ИмяЭлемента, НовыйЗаголовок, ИспользоватьПартнеровКакКонтрагентов = Неопределено) Экспорт
	
	Если ИспользоватьПартнеровКакКонтрагентов = Неопределено Тогда
		ИспользоватьПартнеровКакКонтрагентов = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	КонецЕсли;
	
	Если ИспользоватьПартнеровКакКонтрагентов Тогда
		Если ПустаяСтрока(ИмяЭлемента) Тогда
			Форма.Автозаголовок = Ложь;
			Форма.Заголовок = НовыйЗаголовок;
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, ИмяЭлемента, "Заголовок", НовыйЗаголовок);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

// Формирует список выбора для выбора типа фильтра
//
// Параметры:
//  Форма  - УправляемаяФорма - Форма.
//  СписокВыбора - СписокЗначений - сформированный список выбора.
//
Процедура ЗаполнитьСписокВыбораТипФильтраСписокПартнеров(Форма, СписокВыбора) Экспорт
		
	Если ПравоДоступа("Чтение", Метаданные.Справочники.Пользователи) Тогда
		СписокВыбора.Добавить("Менеджер", НСтр("ru = 'основному менеджеру'"));
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		ДополнитьСписокВыбораТипФильтраСписокПартнеров(Форма, СписокВыбора);
	КонецЕсли;
	
КонецПроцедуры

// Получает необходимые данные о партнере для вывода в панель информации форм списка 
// и выбора справочника "Партнеры".
//
// Параметры:
//  Партнер  - СправочникСсылка.Партнеры - партнер для которого необходимо получить информацию.
//
// Возвращаемое значение:
//   Структура   - содержить информацию о партнере.
//
Функция ДанныеПартнераДляПанелиИнформации(Партнер) Экспорт
	
	ДанныеПартнера = Новый Структура;
	ДанныеПартнера.Вставить("Наименование", "");
	ДанныеПартнера.Вставить("КонтактнаяИнформация", "");
	ДанныеПартнера.Вставить("КоличествоКонтактныхЛиц", 0);
	ДанныеПартнера.Вставить("КоличествоКонтрагентов", 0);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Партнеры.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Ссылка = &Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Наименование КАК ВидКИ,
	|	ЕСТЬNULL(ПартнерыКонтактнаяИнформация.Представление, """") КАК ПредставлениеКИ,
	|	ВЫБОР
	|		КОГДА ВидыКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗначениеУпорядочивания,
	|	ВидыКонтактнойИнформации.Ссылка КАК СсылкаВидКИ
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|		ПО (ПартнерыКонтактнаяИнформация.Вид = ВидыКонтактнойИнформации.Ссылка)
	|			И (ПартнерыКонтактнаяИнформация.Ссылка = &Партнер)
	|ГДЕ
	|	ВидыКонтактнойИнформации.Родитель = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.СправочникПартнеры)
	|	И НЕ ВидыКонтактнойИнформации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗначениеУпорядочивания
	|ИТОГИ ПО
	|	СсылкаВидКИ
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтактныеЛицаПартнеров.Ссылка) КАК КоличествоКЛ
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|ГДЕ
	|	КонтактныеЛицаПартнеров.Владелец = &Партнер
	|	И НЕ КонтактныеЛицаПартнеров.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК КоличествоКонтрагентов
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = &Партнер
	|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Партнер", Партнер);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ВыборкаДанныеПартнера = Результат[0].Выбрать();
	Если ВыборкаДанныеПартнера.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеПартнера, ВыборкаДанныеПартнера);
	КонецЕсли;
	
	КонтактнаяИнформацияТаблица = Новый ТаблицаЗначений;
	КонтактнаяИнформацияТаблица.Колонки.Добавить("ВидКИ");
	КонтактнаяИнформацияТаблица.Колонки.Добавить("ПредставлениеКИ");
	
	ВыборкаВидыКИ = Результат[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВидыКИ.Следующий() Цикл
		ВыборкаДетали = ВыборкаВидыКИ.Выбрать();
		ПредставлениеКИ = "";
		Пока ВыборкаДетали.Следующий() Цикл
			ПредставлениеКИ = ПредставлениеКИ + ?(ПустаяСтрока(ПредставлениеКИ),"" ,"; ") + ВыборкаДетали.ПредставлениеКИ; 
		КонецЦикла;
		НоваяСтрока = КонтактнаяИнформацияТаблица.Добавить();
		НоваяСтрока.ВидКИ = ВыборкаДетали.ВидКИ;
		НоваяСтрока.ПредставлениеКИ = ПредставлениеКИ;
	КонецЦикла;
	ДанныеПартнера.Вставить("КонтактнаяИнформацияТаблица",КонтактнаяИнформацияТаблица);
	
	ВыборкаКоличествоКЛ = Результат[2].Выбрать();
	Если ВыборкаКоличествоКЛ.Следующий() Тогда
		
		ДанныеПартнера.КоличествоКонтактныхЛиц = ВыборкаКоличествоКЛ.КоличествоКЛ;
		
	КонецЕсли;
	
	ВыборкаКоличествоКонтрагентов = Результат[3].Выбрать();
	Если ВыборкаКоличествоКонтрагентов.Следующий() Тогда
		
		ДанныеПартнера.КоличествоКонтрагентов = ВыборкаКоличествоКонтрагентов.КоличествоКонтрагентов;
		
	КонецЕсли;
	
	Возврат ДанныеПартнера;
	
КонецФункции


#КонецОбласти

#Область ПроцедурыПроверкиКорректностиЗаполнения

// Проверяет корректность заполнения контрагента. Вызывается из процедуры "ОбработкаПроверкиЗаполнения".
//
// Параметры:
//  Объект - СправочникОбъект.Контрагенты, УправялемаяФорма - объект, содержащий данные контрагента
//  Контрагент - СправочникСсылка.Контрагенты - ссылка на проеряемого контрагент
//  Отказ - Булево - флаг отказа в процедуре проверки заполнения.
//
Процедура ПроверитьКорректностьЗаполненияКонтрагента(Объект, Контрагент, Отказ) Экспорт
	
	КлючДанных = ?(ТипЗнч(Объект) = Тип("УправляемаяФорма"), Неопределено, Объект);
			
	Если ЗначениеЗаполнено(Объект.ИНН) Тогда 
		
		ВыборкаКонтрагент = ИННКППУжеИспользуетсяВИнформационнойБазе(Объект.ИНН, Объект.КПП, Контрагент);
		
		Если ВыборкаКонтрагент <> Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			                                СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                                  НСтр("ru='Данные ИНН и КПП уже указаны для контрагента с кодом %1, ответственный - %2.'"), 
			                                  ВыборкаКонтрагент.Код,
			                                  ВыборкаКонтрагент.ОсновнойМенеджер),
			КлючДанных,
			"ИНН",
			,
			Отказ);
			
		КонецЕсли;
				
	Конецесли;
	
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Дополняет запрос динамического списка партнера условием по типу отношений сохраняя вышестоящие элементы иерархии.
//
// Параметры:
//  ТипОтношений - Строка - тип отношений для которого наложено условие.
//
// Возвращаемое значение:
//  Строка  - дополнение текста запроса.
//
Функция ДополнениеЗапросаДинамическогоСпискаПоПартнерам(СписокОтборПоТипуПартнера, УстанавливатьОтборПоТипуПартнераКакИЛИ) 
	
	СтрокаОтбора = "";
	СтрокаУсловия = ?(УстанавливатьОтборПоТипуПартнераКакИЛИ," ИЛИ "," И ");
	
	Для каждого ЭлементСписка Из СписокОтборПоТипуПартнера Цикл
		
		СтрокаОтбора = СтрокаОтбора + СтрокаУсловия + "Партнеры." + ЭлементСписка; 
		
	КонецЦикла;
	
	СтрокаОтбора = Прав(СтрокаОтбора,СтрДлина(СтрокаОтбора) - ?(УстанавливатьОтборПоТипуПартнераКакИЛИ, 4, 2));
	
	Возврат "
	|И
	|	СправочникПартнеры.Ссылка В
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ИерархияПартнеров.Родитель КАК Ссылка
	|		ИЗ
	|			Справочник.Партнеры КАК Партнеры ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИерархияПартнеров КАК ИерархияПартнеров
	|				ПО
	|					ИерархияПартнеров.Партнер = Партнеры.Ссылка
	|		ГДЕ
	|			" + СтрокаОтбора + ")";
	
КонецФункции


#Область ОбщиеПроцедурыИФункцииФормСпискаИВыбораСправочникаПартнеры

Функция ТекстЗапросаДинамическогоСпискаПартнеры()

	ЗапросСИнформациейПоКонтрагенту = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) КАК Ссылка,
		|	Контрагенты.Партнер КАК Партнер
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|
		|СГРУППИРОВАТЬ ПО
		|	Контрагенты.Партнер
		|
		|ИМЕЮЩИЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) > 1";
		
		УстановитьПривилегированныйРежим(Истина);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ЗапросСИнформациейПоКонтрагенту = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗапросСИнформациейПоКонтрагенту Тогда
		
		Возврат "
		|ВЫБРАТЬ
		|	СправочникПартнеры.Ссылка,
		|	СправочникПартнеры.ПометкаУдаления,
		|	СправочникПартнеры.Предопределенный,
		|	СправочникПартнеры.Родитель,
		|	СправочникПартнеры.Код,
		|	СправочникПартнеры.Наименование,		
		//|	СправочникПартнеры.БизнесРегион,
		//|	СправочникПартнеры.ГруппаДоступа,
		|	СправочникПартнеры.ДатаРегистрации,
		|	СправочникПартнеры.Клиент,
		|	СправочникПартнеры.Комментарий,
		//|	СправочникПартнеры.Конкурент,
		|	СправочникПартнеры.НаименованиеПолное,
		|	СправочникПартнеры.ОсновнойМенеджер,
		|	СправочникПартнеры.Поставщик,
		//|	СправочникПартнеры.Перевозчик,
		|	СправочникПартнеры.ПрочиеОтношения,
		//|	СправочникПартнеры.ОбслуживаетсяТорговымиПредставителями,
		|	СправочникПартнеры.ДополнительныеРеквизиты.(
		|		Ссылка,
		|		НомерСтроки,
		|		Свойство,
		|		Значение,
		|		ТекстоваяСтрока
		|	),
		|	СправочникПартнеры.КонтактнаяИнформация.(
		|		Ссылка,
		|		НомерСтроки,
		|		Тип,
		|		Вид,
		|		Представление,
		|		ЗначенияПолей,
		|		Страна,
		|		Регион,
		|		Город,
		|		АдресЭП,
		|		ДоменноеИмяСервера,
		|		НомерТелефона,
		|		НомерТелефонаБезКодов
		|	),
		|	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
		|	ЕСТЬNULL(Контрагенты.ЮридическоеФизическоеЛицо, ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ПустаяСсылка)) КАК ЮрФизЛицо,
		//|	ВЫБОР
		//|		КОГДА ЕСТЬNULL(Контрагенты.ОбособленноеПодразделение, ЛОЖЬ)
		//|			ТОГДА Контрагенты.ГоловнойКонтрагент
		//|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		//|	КОНЕЦ КАК ГоловнойКонтрагент,
		//|	ВЫБОР
		//|		КОГДА ЕСТЬNULL(Контрагенты.ОбособленноеПодразделение, ЛОЖЬ)
		//|			ТОГДА &ПредставлениеОбособленногоПодразделения
		//|		ИНАЧЕ ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Контрагенты.ЮрФизЛицо), """")
		//|	КОНЕЦ КАК ВидКонтрагента,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(Контрагенты.ЮридическоеФизическоеЛицо), """") ВидКонтрагента,

		//|	ЕстьNUll(Контрагенты.ОбособленноеПодразделение,ЛОЖЬ) КАК ОбособленноеПодразделение,
		|	ЕстьNUll(Контрагенты.ИНН,"""") КАК ИНН,
		|	ЕстьNUll(Контрагенты.КПП,"""") КАК КПП
		//|	ЕстьNUll(Контрагенты.КодПоОКПО,"""") КАК КодПоОКПО
		|ИЗ
		|	Справочник.Партнеры КАК СправочникПартнеры
		|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (Контрагенты.Партнер = СправочникПартнеры.Ссылка)}
		|ГДЕ
		//|	ВЫБОР
		//|			КОГДА НЕ &ОтборПоСегментуУстановлен
		//|				ТОГДА ИСТИНА
		//|			ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоСегменту)
		//|		КОНЕЦ
		//|	И 
		|ВЫБОР
		|			КОГДА НЕ &ОтборПоПолнотекстовомуПоискуУстановлен
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоПолнотекстовомуПоиску)
		|		КОНЕЦ
		|";
		
	Иначе
		
		Возврат "
		|ВЫБРАТЬ
		|	СправочникПартнеры.Ссылка,
		|	СправочникПартнеры.ПометкаУдаления,
		|	СправочникПартнеры.Предопределенный,
		|	СправочникПартнеры.Родитель,
		|	СправочникПартнеры.Код,
		|	СправочникПартнеры.Наименование,
		//|	СправочникПартнеры.БизнесРегион,
		//|	СправочникПартнеры.ГруппаДоступа,
		|	СправочникПартнеры.ДатаРегистрации,
		|	СправочникПартнеры.Клиент,
		|	СправочникПартнеры.Комментарий,
		//|	СправочникПартнеры.Конкурент,
		|	СправочникПартнеры.НаименованиеПолное,
		|	СправочникПартнеры.ОсновнойМенеджер,
		|	СправочникПартнеры.Поставщик,
		//|	СправочникПартнеры.Перевозчик,
		|	СправочникПартнеры.ПрочиеОтношения,
		//|	СправочникПартнеры.ОбслуживаетсяТорговымиПредставителями,
		|	СправочникПартнеры.ДополнительныеРеквизиты.(
		|		Ссылка КАК Ссылка1,
		|		НомерСтроки,
		|		Свойство,
		|		Значение
		|	),
		|	СправочникПартнеры.КонтактнаяИнформация.(
		|		Ссылка КАК Ссылка2,
		|		НомерСтроки КАК НомерСтроки1,
		|		Тип,
		|		Вид,
		|		Представление,
		|		ЗначенияПолей,
		|		Страна,
		|		Регион,
		|		Город,
		|		АдресЭП,
		|		ДоменноеИмяСервера,
		|		НомерТелефона,
		|		НомерТелефонаБезКодов
		|	)
		|ИЗ
		|	Справочник.Партнеры КАК СправочникПартнеры
		|ГДЕ
		|	ВЫБОР
		//|			КОГДА НЕ &ОтборПоСегментуУстановлен
		//|				ТОГДА ИСТИНА
		//|			ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоСегменту)
		//|		КОНЕЦ
		//|	И ВЫБОР
		|			КОГДА НЕ &ОтборПоПолнотекстовомуПоискуУстановлен
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ СправочникПартнеры.Ссылка В (&ОтборПоПолнотекстовомуПоиску)
		|		КОНЕЦ";
		
	КонецЕсли;
	

КонецФункции

Процедура ЗаполнитьДеревоКатегорий(Форма)
	
	Форма.Категории.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвойстваТипаБулево.ДопРеквизитСведение КАК Свойство,
	|	СвойстваТипаБулево.ЭтоРеквизит
	|ПОМЕСТИТЬ СвойстваТипаБулево
	|ИЗ
	|	&СвойстваТипаБулево КАК СвойстваТипаБулево
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПартнерыДополнительныеРеквизиты.Свойство КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(ПартнерыДополнительныеРеквизиты.Свойство) КАК Представление
	|ИЗ
	|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
	|ГДЕ
	|	ПартнерыДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СвойстваТипаБулево.Свойство
	|			ИЗ
	|				СвойстваТипаБулево КАК СвойстваТипаБулево
	|			ГДЕ
	|				СвойстваТипаБулево.ЭтоРеквизит)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Свойство,
	|	ПРЕДСТАВЛЕНИЕ(ДополнительныеСведения.Свойство)
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство В
	|			(ВЫБРАТЬ
	|				СвойстваТипаБулево.Свойство
	|			ИЗ
	|				СвойстваТипаБулево КАК СвойстваТипаБулево
	|			ГДЕ
	|				НЕ СвойстваТипаБулево.ЭтоРеквизит)";
	
	Запрос.УстановитьПараметр("СвойстваТипаБулево", Форма.ТаблицаДопРеквизитовСвойствТипаБулево.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтрокаТаблицы = Форма.Категории.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		СтрокаТаблицы.НомерКартинки = 0;
		
	КонецЦикла;
	
	ДобавитьСтрокуВПанельНавигации(Форма.Категории,Нстр("ru = 'Все'"),1);
	
	Форма.ТекущееСвойствоПанелиНавигации = Форма.ТипФильтра;
	
КонецПроцедуры

Процедура ЗаполнитьДеревоСвойств(Форма)
	
	Форма.Свойства.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос;
	
	Если Форма.ТипФильтра.ЭтоДополнительноеСведение Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДополнительныеСведения.Значение КАК Значение,
		|	ПРЕДСТАВЛЕНИЕ(ДополнительныеСведения.Значение) КАК Представление
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство = &Свойство
		|	И ДополнительныеСведения.Объект ССЫЛКА Справочник.Партнеры
		|
		|УПОРЯДОЧИТЬ ПО
		|	Значение
		|ИТОГИ ПО
		|	Значение ИЕРАРХИЯ";
		
	Иначе
	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПартнерыДополнительныеРеквизиты.Значение КАК Значение,
		|	ПРЕДСТАВЛЕНИЕ(ПартнерыДополнительныеРеквизиты.Значение) КАК Представление
		|ИЗ
		|	Справочник.Партнеры.ДополнительныеРеквизиты КАК ПартнерыДополнительныеРеквизиты
		|ГДЕ
		|	ПартнерыДополнительныеРеквизиты.Свойство = &Свойство
		|
		|УПОРЯДОЧИТЬ ПО
		|	Значение
		|ИТОГИ ПО
		|	Значение ИЕРАРХИЯ";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Свойство",Форма.ТипФильтра);
	
	Результат = Запрос.Выполнить();
	Дерево = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДобавитьСтрокуВПанельНавигации(Форма.Свойства,Нстр("ru = 'Не указан'"));
	
	СтрокиПервыйУровень = Форма.Свойства.ПолучитьЭлементы();
	
	Для Каждого Строка ИЗ Дерево.Строки Цикл
		СтрокаСвойства = СтрокиПервыйУровень.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаСвойства, Строка);
		СтрокаСвойства.НомерКартинки = 1;
		ДобавитьСтрокиВДеревоНавигации(Строка, СтрокаСвойства,Истина);
	КонецЦикла;
	
	ДобавитьСтрокуВПанельНавигации(Форма.Свойства,Нстр("ru = 'Все'"),2);

	Форма.ТекущееСвойствоПанелиНавигации = Форма.ТипФильтра;
	
КонецПроцедуры

Функция ДобавитьСтрокуВПанельНавигации(ДанныеФормыКоллекция, ИмяСтроки, НомерКартинки = 0)
	
	Если ТипЗнч(ДанныеФормыКоллекция) = Тип("ДанныеФормыДерево") Тогда
		НоваяСтрока = ДанныеФормыКоллекция.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = ДанныеФормыКоллекция.Добавить();
	КонецЕсли;
	
		НоваяСтрока.Значение = ИмяСтроки;
		НоваяСтрока.Представление = ИмяСтроки;
		НоваяСтрока.НомерКартинки = НомерКартинки;
	
	Возврат НоваяСтрока;
	
КонецФункции

Процедура ДобавитьСтрокиВДеревоНавигации(РодительскаяСтрока, СтрокаРодитель,ВыполнятьПроверку = Ложь)
	
	Для Каждого Строка ИЗ РодительскаяСтрока.Строки Цикл
		
		Если Строка.Значение = РодительскаяСтрока.Значение Или Строка.Значение = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = СтрокаРодитель.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.НомерКартинки = 1;
		
		ДобавитьСтрокиВДеревоНавигации(Строка, НоваяСтрока);
		
	КонецЦикла;
	
КонецПроцедуры

Функция СписокЗначимыхЗначенийПанелиНавигации(ИмяСписка)
	
	Если ИмяСписка = "БизнесРегионы" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.БизнесРегион КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры";
		
	ИначеЕсли ИмяСписка = "ГруппыДоступаПартнеров" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.ГруппаДоступа КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры";
		
	ИначеЕсли ИмяСписка = "Менеджеры" Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Партнеры.ОсновнойМенеджер КАК Ссылка
		|ИЗ
		|	Справочник.Партнеры КАК Партнеры";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область ИерархияПартнеров

Процедура ВыполнитьЗаписьПоПодчиненнымПартнерам(СтрокиДерева,ТекущийЭлементОбработки)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.Ссылка <> ТекущийЭлементОбработки Тогда
			ВыполнитьЗаписьВРегистрПоПартнеру(СтрокаДерева);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьЗаписьВРегистрПоПартнеру(СтрокаДерева);
	
	НаборЗаписей = РегистрыСведений.ИерархияПартнеров.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Партнер.Установить(СтрокаДерева.Ссылка);
	
	РодительСтрокиДерева = СтрокаДерева;
	Пока РодительСтрокиДерева <> Неопределено Цикл
		ЗаписьНабора = НаборЗаписей.Добавить();
		ЗаписьНабора.Партнер 	= СтрокаДерева.Ссылка;
		ЗаписьНабора.Родитель   = РодительСтрокиДерева.Ссылка;
		ЗаписьНабора.Уровень	= РодительСтрокиДерева.Уровень();
		РодительСтрокиДерева 	= РодительСтрокиДерева.Родитель;
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
	ВыполнитьЗаписьПоПодчиненнымПартнерам(СтрокаДерева.Строки, СтрокаДерева.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииРаботыСФормами

Функция СформироватьСписокУстановленныхОтборовДинамическийСписокПартнеры(Форма)
	
	Если Форма.Параметры.Отбор.Свойство("Клиент") Тогда
		Форма.СписокОтборПоТипуПартнера.Добавить("Клиент");
	КонецЕсли;
	Если Форма.Параметры.Отбор.Свойство("Поставщик") Тогда
		Форма.СписокОтборПоТипуПартнера.Добавить("Поставщик");
	КонецЕсли;
	Если Форма.Параметры.Отбор.Свойство("ПрочиеОтношения") Тогда
		Форма.СписокОтборПоТипуПартнера.Добавить("ПрочиеОтношения");
	КонецЕсли;
	
КонецФункции
#КонецОбласти


#Область ВспомогательныеПроцедурыИФункции

Процедура ЗаполнитьСписокПартнеровИзДерева(СтрокиДерева, СписокПартнеров, Партнер)
	
	Для каждого СтрокаДерева Из СтрокиДерева Цикл
		СписокПартнеров.Добавить(СтрокаДерева.Ссылка, СтрокаДерева.Наименование);
		Если СтрокаДерева.Ссылка <> Партнер Тогда
			ЗаполнитьСписокПартнеровИзДерева(СтрокаДерева.Строки, СписокПартнеров,Партнер);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ИмяНабораСведений(ИмяОтбора)
	
	Если ИмяОтбора = "Клиент" Тогда
		Возврат "Клиенты";
	ИначеЕсли ИмяОтбора = "Поставщик" Тогда
		Возврат "Поставщики";
	ИначеЕсли ИмяОтбора = "Конкурент" Тогда
		Возврат "Конкуренты";
	Иначе
		Возврат "Прочие";
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьСписокВыбораТипФильтраСписокПартнеров(Форма, СписокВыбора)
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	Если Форма.СписокОтборПоТипуПартнера.Количество() > 0 Тогда
		ТекстОтбораДопРеквизиты = "";
		
		Для каждого ЭлементСписка Из Форма.СписокОтборПоТипуПартнера Цикл
		
			ТекстОтбораДопРеквизиты = ТекстОтбораДопРеквизиты + "
			| ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_" 
			+ ИмяНабораСведений(ЭлементСписка.Значение) +")";
		
		КонецЦикла;
		
	Иначе
		
		ТекстОтбораДопРеквизиты = "
		| ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Клиенты)
		| ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Поставщики)
		| ИЛИ НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Прочие)";
		
	КонецЕсли;
	
	ТекстОтбораСвойства = СтрЗаменить(ТекстОтбораДопРеквизиты,"ДополнительныеРеквизиты","ДополнительныеСведения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство,
	|	ИСТИНА КАК ЭтоРеквизит
	|ПОМЕСТИТЬ ДопРеквизитыИСведения
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие) " + ТекстОтбораДопРеквизиты + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство,
	|	ЛОЖЬ КАК ЭтоРеквизит
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_Партнеры_Общие) " + ТекстОтбораСвойства + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК ДопРеквизитСведение,
	|	ДопРеквизитыИСведения.ЭтоРеквизит,
	|	ДополнительныеРеквизитыИСведения.Представление,
	|	ДополнительныеРеквизитыИСведения.ТипЗначения
	|ИЗ
	|	ДопРеквизитыИСведения КАК ДопРеквизитыИСведения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|		ПО ДопРеквизитыИСведения.Свойство = ДополнительныеРеквизитыИСведения.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ТипЗначения = ОписаниеТиповБулево Тогда
			НоваяСтрока = Форма.ТаблицаДопРеквизитовСвойствТипаБулево.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		Иначе
			СписокВыбора.Добавить(Выборка.ДопРеквизитСведение, НРег(Лев(Выборка.Представление,1)) + Прав(Выборка.Представление,СтрДлина(Выборка.Представление) - 1));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Форма.ТаблицаДопРеквизитовСвойствТипаБулево.Количество() > 0 Тогда
		
		СписокВыбора.Добавить("Категории", НСтр("ru = 'категориям'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
