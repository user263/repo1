////////////////////////////////////////////////////////////////////////////////
// торо_ЗаполнениеДокументовКлиент:  процедуры и функции,
// получающие значения для подстановки в документы при их создании.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Заполняет дерево ремонтных работ на форме документа.
// Параметры:
//		СтруктураДляЗаполнения - Структура - структура данных.
//		ЭлементыДерево - ДанныеФормыДерево - дерево, которое нужно заполнить.
//		Объект - ДокументОбъект, ДанныеФормыСтруктура - объект с формы.
//
Процедура ЗаполнитьДеревоРемонтов(СтруктураДляЗаполнения, ЭлементыДерево,Объект) Экспорт
	
	ИмяТЧ                     = СтруктураДляЗаполнения.ИмяТЧ;
	Текущий_ID                = СтруктураДляЗаполнения.Текущий_ID;
	Наименование_Ремонты      = СтруктураДляЗаполнения.Наименование_Ремонты;
	Наименование_ПолеРодитель = СтруктураДляЗаполнения.Наименование_ПолеРодитель;
	Наименование_ПолеЭлемент  = СтруктураДляЗаполнения.Наименование_ПолеЭлемент;
	
	
	МассивСтрокРемонтныхРабот = Объект[ИмяТЧ].НайтиСтроки(Новый Структура(Наименование_Ремонты,Текущий_ID));
	
	СоответствиеID = Новый Соответствие;
	
	Для каждого СтрокаМассива Из МассивСтрокРемонтныхРабот Цикл
		
		ID_Родителя = СтрокаМассива[Наименование_ПолеРодитель];
		
		НайдСоответствие = СоответствиеID.Получить(СтрокаМассива[Наименование_ПолеРодитель]);
		
		Если НайдСоответствие = Неопределено Тогда
			МассивСтрокСоответствия = Новый Массив;
			МассивСтрокСоответствия.Добавить(СтрокаМассива);
			СоответствиеID.Вставить(ID_Родителя, МассивСтрокСоответствия);
		Иначе
			МассивСтрокСоответствия = НайдСоответствие;
			МассивСтрокСоответствия.Добавить(СтрокаМассива);
		КонецЕсли; 
		
	КонецЦикла; 
	
	ЭлементыДерева = ЭлементыДерево.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();
	
	ЭлементДерева = ЭлементыДерева.Добавить();
	
	ЭлементДерева.РемонтнаяРабота = "Ремонтные работы";	
	ЭлементДерева.Картинка        = 4; 
	
	ЗаполнитьДерево(ЭлементДерева,СоответствиеID,"", Наименование_ПолеЭлемент);
	
	
КонецПроцедуры

// Открывает форму подбора продолжительности.
// Параметры:
//		ПродолжительностьВСекундах - Число - исходная продолжительность в секундах.
//		Владелец - ПолеНадписи - элемент, в который выводится текст.
//		Уникальность - Произвольный - ключ уникальности формы.
//
Процедура ОткрытьФормуПодбораПродолжительности(ПродолжительностьВСекундах, Владелец, Уникальность = "") Экспорт
	
	СтруктураПараметров = Новый Структура("ПродолжительностьВСекундах", ПродолжительностьВСекундах);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности",СтруктураПараметров, Владелец, Уникальность, ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УдалитьСтрокиЗатратОперации(ДокументОбъект, ИмяТЧРемонтныхРабот, СтрокаДерева, ТекСтрокаРО_ID, мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот, ДеревоРемонтныхРабот) Экспорт
	
	РемРаботы = ДокументОбъект[ИмяТЧРемонтныхРабот];
	
	// удаляем рем работы из тч рем работ
	МассивСтрокКУдалению = РемРаботы.НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаДерева.ID, ТекСтрокаРО_ID));
	
	Для каждого Строка Из МассивСтрокКУдалению Цикл
		РемРаботы.Удалить(Строка);
	КонецЦикла; 
	
	// удаляем строки из связанных ТЧ
	Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот Цикл
		
		ТЧДляПоискаИДаленияСтрок = ДокументОбъект[КлючИЗначение.Ключ];
		
		СтруктураОтбораСтрок = Новый Структура("ID, РемонтыОборудования_ID", СтрокаДерева.ID, ТекСтрокаРО_ID);
		
		МассивСтрокКУдалению = ТЧДляПоискаИДаленияСтрок.НайтиСтроки(СтруктураОтбораСтрок);
		
		Для каждого Строка Из МассивСтрокКУдалению Цикл
			ТЧДляПоискаИДаленияСтрок.Удалить(Строка);
		КонецЦикла; 

		
	КонецЦикла;
	
	// делаем тоже самое для подчиненных строк
	ЭлементыСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для каждого ПодчиненнаяСтрокаДерева Из ЭлементыСтроки Цикл
		УдалитьСтрокиЗатратОперации(ДокументОбъект, ИмяТЧРемонтныхРабот,ПодчиненнаяСтрокаДерева,ТекСтрокаРО_ID, мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот,ДеревоРемонтныхРабот);
	КонецЦикла; 
		
КонецПроцедуры

Процедура ЗаполнитьДерево(ЭлементДерева, Соответствие, Родитель, Наименование_ПолеЭлемент)
	
	МассивПодчиненныхСтрок = Соответствие.Получить(Родитель);
	
	Если Не МассивПодчиненныхСтрок = Неопределено
		И МассивПодчиненныхСтрок.Количество() > 0 Тогда
		
		ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		
		Если Не МассивПодчиненныхСтрок = Неопределено Тогда
			Для каждого Строка Из МассивПодчиненныхСтрок Цикл
				Элемент = ЭлементыДерева.Добавить();
				ЗаполнитьЗначенияСвойств(Элемент,Строка);
				ЗаполнитьДерево(Элемент,Соответствие,Строка[Наименование_ПолеЭлемент], Наименование_ПолеЭлемент);
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти

