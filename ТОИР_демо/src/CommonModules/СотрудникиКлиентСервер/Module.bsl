////////////////////////////////////////////////////////////////////////////////
// СотрудникиКлиентСервер: методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Процедура УстановитьВидЗанятостиНовогоСотрудника(Форма) Экспорт
КонецПроцедуры

Процедура УстановитьВидимостьПолейФИО(Форма) Экспорт
	ФИОВведено = НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Фамилия)
		ИЛИ НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Имя)
		ИЛИ НЕ ПустаяСтрока(Форма.ФИОФизическихЛиц.Отчество);
	Если ФИОВведено Тогда
		Форма.Элементы.ГруппаСтраницыПолноеИмя.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаПолноеИмя;
	Иначе
		Форма.Элементы.ГруппаСтраницыПолноеИмя.ТекущаяСтраница = Форма.Элементы.ГруппаСтраницаПолноеИмяСкрытое;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьНаборЗаписейИсторииДокументыФизическихЛиц(Форма, ВедущийОбъект) Экспорт
	Перем ЗаписьНабора;
	
	Если Не Форма["ДокументыФизическихЛицНаборЗаписейПрочитан"] Тогда
		
		РедактированиеПериодическихСведенийВызовСервера.ПрочитатьНаборЗаписей(Форма, "ДокументыФизическихЛиц", ВедущийОбъект);
		
	КонецЕсли;
	
	СтруктураЗаписиСтрокой = "";
	ПрежняяЗапись = Новый Структура;
	НужнаЗапятая = Ложь;
	Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
		Если НужнаЗапятая Тогда
			СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + ",";
		КонецЕсли;
		СтруктураЗаписиСтрокой = СтруктураЗаписиСтрокой + КлючЗначение.Ключ;
		НужнаЗапятая = Истина;
		ПрежняяЗапись.Вставить(КлючЗначение.Ключ);
	КонецЦикла;
		
	Если ЗначениеЗаполнено(Форма["ДокументыФизическихЛиц"].Период) Тогда
		ПериодИзменен = Форма["ДокументыФизическихЛиц"].Период > Форма["ДокументыФизическихЛицПрежняя"].Период;
		РесурсыИзменены = Ложь;
		Для Каждого КлючЗначение Из Форма["ДокументыФизическихЛицПрежняя"] Цикл
			Если КлючЗначение.Ключ = "Период" Тогда
				Продолжить;
			КонецЕсли;
			Если КлючЗначение.Значение <> Форма["ДокументыФизическихЛиц"][КлючЗначение.Ключ] Тогда
				РесурсыИзменены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		НаборЗаписей = Форма["ДокументыФизическихЛицНаборЗаписей"];
		Если (ПериодИзменен И РесурсыИзменены) ИЛИ НаборЗаписей.Количество() = 0 Тогда
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() = 0 Тогда
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли;
		Иначе
			ЗаписьНаНовуюДату = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ВидДокумента", Форма["ДокументыФизическихЛиц"].Период, Форма["ДокументыФизическихЛиц"].ВидДокумента));
			Если ЗаписьНаНовуюДату.Количество() > 0 Тогда
				ЗаписьНабора = ЗаписьНаНовуюДату[0];
			Иначе
				ЗаписьНабора = НаборЗаписей.Добавить();
			КонецЕсли; 
		КонецЕсли;
		
		Если ЗаписьНабора <> НеОпределено Тогда
			
			// Если в этом периоде уже есть документы являющиеся удостоверением личности - 
			// сбросим признак.
			ЯвляющиесяУдостоверениямиЛичности = НаборЗаписей.НайтиСтроки(Новый Структура("Период,ЯвляетсяДокументомУдостоверяющимЛичность", Форма["ДокументыФизическихЛиц"].Период, Истина));
			Для каждого УдостоверениеЛичности Из ЯвляющиесяУдостоверениямиЛичности Цикл
				Если УдостоверениеЛичности.ВидДокумента <> ЗаписьНабора.ВидДокумента Тогда
					УдостоверениеЛичности.ЯвляетсяДокументомУдостоверяющимЛичность = Ложь;
				КонецЕсли; 
			КонецЦикла;
			
			ЗаполнитьЗначенияСвойств(ЗаписьНабора, Форма["ДокументыФизическихЛиц"]);
			НаборЗаписей.Сортировать("Период,ЯвляетсяДокументомУдостоверяющимЛичность");
			
			ЗаполнитьЗначенияСвойств(ПрежняяЗапись, Форма["ДокументыФизическихЛиц"]);
			Форма["ДокументыФизическихЛицПрежняя"] = Новый ФиксированнаяСтруктура(ПрежняяЗапись);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокФормыСотрудника(Форма) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Возврат НСТр("ru='Сотрудник (создание)'")
	КонецЕсли;
	
	Возврат Форма.СотрудникНаименование + НСТр("ru=' (Сотрудник)'");
	
КонецФункции

Функция ЗаголовокФормыФизическогоЛица(Форма) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		Возврат НСТр("ru='Физическое лицо (создание)'")
	КонецЕсли;
	
	Возврат Форма.ФизическоеЛицо.Наименование + НСТр("ru=' (Физическое лицо)'");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление предупреждающих надписей

Процедура УстановитьИнфоНадпись(Форма) Экспорт
		
Конецпроцедуры

Процедура УстановитьДоступностьУточненияНаименования(Форма) Экспорт
	
КонецПроцедуры

Процедура ОбновитьДоступностьПолейВводаГражданства(Форма) Экспорт
	
	Форма.Элементы.ГражданствоФизическихЛицСтрана.Доступность = (Форма.ГражданствоФизическихЛицЛицоБезГражданства = 0);
	
КонецПроцедуры


Процедура ОбновитьПолеУдостоверениеЛичностиПериод(Форма) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		
		ЭтоЗначенияПоУмолчанию = Ложь;
		// Не обязательно заполнение поля Период если данные по умолчанию и при этом 
		// записи о сведениях об инвалидности еще нет.
		Если ЗарплатаКадрыКлиентСервер.УдостоверениеЛичностиПоУмолчанию(Форма.ДокументыФизическихЛиц)
			И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
			
			ЭтоЗначенияПоУмолчанию = Истина;
			Форма.ДокументыФизическихЛиц.Период = '00010101';
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицВидДокумента",
				"АвтоОтметкаНезаполненного",
				Ложь);

			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицВидДокумента",
				"ОтметкаНезаполненного",
				Ложь);
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицВидДокумента",
				"АвтоОтметкаНезаполненного",
				Истина);
				
			Если ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента) Тогда
				ВидДокументаОтметкаНезаполненного = Ложь;
			Иначе
				ВидДокументаОтметкаНезаполненного = Истина;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицВидДокумента",
				"ОтметкаНезаполненного",
				ВидДокументаОтметкаНезаполненного);
				
			Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.Период) И ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) Тогда
				Форма.ДокументыФизическихЛиц.Период = Форма.ДокументыФизическихЛиц.ДатаВыдачи;
			КонецЕсли;
			
			Форма.ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи) И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
			ТолькоПросмотрПоЛяПериод = Истина;
		Иначе
			ТолькоПросмотрПоЛяПериод = Ложь;
		КонецЕсли;
		
		Если НЕ ЭтоЗначенияПоУмолчанию
			И НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛицПрежняя.Период) Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицДатаВыдачи",
				"АвтоОтметкаНезаполненного",
				Истина);
				
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Форма.Элементы,
				"ДокументыФизическихЛицДатаВыдачи",
				"ОтметкаНезаполненного",
				НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ДатаВыдачи));

		КонецЕсли; 
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы,
			"ДокументыФизическихЛицПериод",
			"ТолькоПросмотр",
			ТолькоПросмотрПоЛяПериод);
		
		РедактированиеПериодическихСведенийКлиентСервер.ОбновитьОтображениеПолейВвода(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка);
		
	КонецЕсли; 
	
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для полей содержащих ИНН, СтраховойНомерПФР

// Осуществляет проверку заполненного элемента содержащему ИНН
Процедура ОбработатьОтображениеПоляИНН(ИНН, Элемент, Форма) Экспорт
	
	СообщенияПроверки = "";
	Форма.ИННУказанПравильно = Ложь;
	
	Если НЕ ПустаяСтрока(ИНН) Тогда
	
		Форма.ИННУказанПравильно = РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ИНН, Ложь, СообщенияПроверки);
		
		СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru = 'ИНН указан правильно'"), СообщенияПроверки);
		
		Если Форма.ИННУказанПравильно Тогда
			Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
			ТекстНадписи  = "";
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Иначе
			Картинка = БиблиотекаКартинок.Предупреждение;
			ТекстНадписи  = НСтр("ru = 'Ошибка'");
			ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
		КонецЕсли;
		
	Иначе
		
		СообщенияПроверки = НСтр("ru = 'Не указан ИНН (используется, например, в отчетности по форме 2-НДФЛ)'");
		ТекстНадписи  = "";
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Картинка = Новый Картинка;
			
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаЭлемента" Тогда
		
		Форма.ФизическоеЛицоИННКартинка = Картинка;
		Форма.ФизическоеЛицоИНННадпись  = ТекстНадписи;
		Форма.Элементы.ФизическоеЛицоИНННадпись.Подсказка = СообщенияПроверки;
		Форма.Элементы.ФизическоеЛицоИНННадпись.ЦветТекста = ЭлементЦветТекста;
		
	КонецЕсли; 

	Элемент.Подсказка  = СообщенияПроверки;
	Элемент.ЦветТекста = ЭлементЦветТекста;
	 
КонецПроцедуры

// Осуществляет проверку заполненного элемента содержащему СтраховойНомерПФР
Процедура ОбработатьОтображениеПоляСтраховойНомерПФР(СтраховойНомерПФР ,Элемент, Форма) Экспорт
	
	СообщенияПроверки = "";
	Форма.СНИЛСУказанПравильно = Ложь;
	
	Если НЕ ПустаяСтрока(СтрЗаменить(СтраховойНомерПФР, "-", "")) Тогда
	
		Форма.СНИЛСУказанПравильно = РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР, СообщенияПроверки);
		
		СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru = 'СНИЛС (страховой номер ПФР) указан правильно'"), СообщенияПроверки);
		
		Если Форма.СНИЛСУказанПравильно Тогда
			Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
			ТекстНадписи  = "";
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Иначе
			Картинка = БиблиотекаКартинок.Предупреждение;
			ТекстНадписи  = НСтр("ru = 'Ошибка'");
			ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
		КонецЕсли;
		
	Иначе
		
		СообщенияПроверки = НСтр("ru = 'Не указан СНИЛС (страховой номер ПФР)'");
		ТекстНадписи  = "";
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Картинка = Новый Картинка;
	
	КонецЕсли;
	
	Если Форма.ИмяФормы = "Справочник.ФизическиеЛица.Форма.ФормаЭлемента" Тогда
		
		Форма.ФизическоеЛицоСНИЛСКартинка = Картинка;
		Форма.ФизическоеЛицоСНИЛСНадпись  = ТекстНадписи;
		Форма.Элементы.ФизическоеЛицоСНИЛСНадпись.Подсказка = СообщенияПроверки;
		Форма.Элементы.ФизическоеЛицоСНИЛСНадпись.ЦветТекста = ЭлементЦветТекста;
	КонецЕсли;

	Элемент.Подсказка  = СообщенияПроверки;
	Элемент.ЦветТекста = ЭлементЦветТекста;
	 
КонецПроцедуры

Процедура ОбработатьОтображениеСерияДокументаФизическогоЛица(ВидДокумента, Серия ,Элемент, Форма) Экспорт
	СообщенияПроверки = "";
	ТипСерии = ФизическиеЛицаКлиентСервер.ТипСерииДокументаУдостоверяющегоЛичность(ВидДокумента);
	Если ЗначениеЗаполнено(ВидДокумента) И ТипСерии > 0 Тогда
		Если НЕ ПустаяСтрока(Серия) Тогда
			СерияУказанаПравильно = ФизическиеЛицаКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, Серия, СообщенияПроверки);
			СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru = 'Серия указана правильно'"), СообщенияПроверки);
			Если СерияУказанаПравильно Тогда
				Картинка = БиблиотекаКартинок.Успешно;
				ТекстНадписи  = "";
				ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Иначе
				Картинка = БиблиотекаКартинок.Предупреждение;
				ТекстНадписи  = НСтр("ru = 'Ошибка'");
				ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
			КонецЕсли;
		Иначе
			СообщенияПроверки = "Не указана серия документа";
			ТекстНадписи  = "";
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Картинка = Новый Картинка;
		КонецЕсли;
	Иначе
		СообщенияПроверки = "Серия документа";
		ТекстНадписи  = "";
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Картинка = Новый Картинка;
	КонецЕсли;
	Форма[Элемент.Имя + "ИнфоКартинка"] = Картинка;
	Форма[Элемент.Имя + "ИнфоТекст"] = ТекстНадписи;
	Форма.Элементы[Элемент.Имя + "ИнфоКартинка"].Подсказка = СообщенияПроверки;
	Форма.Элементы[Элемент.Имя + "ИнфоТекст"].Подсказка = СообщенияПроверки;
	Форма.Элементы[Элемент.Имя + "ИнфоТекст"].ЦветТекста = ЭлементЦветТекста;
	Элемент.Подсказка  = СообщенияПроверки;
	Элемент.ЦветТекста = ЭлементЦветТекста;
КонецПроцедуры

Процедура ОбработатьОтображениеНомерДокументаФизическогоЛица(ВидДокумента, Номер ,Элемент, Форма) Экспорт
	СообщенияПроверки = "";
	ТипНомера = ФизическиеЛицаКлиентСервер.ТипНомераДокументаУдостоверяющегоЛичность(ВидДокумента);
	Если ЗначениеЗаполнено(ВидДокумента) И ТипНомера > 0 Тогда
		Если НЕ ПустаяСтрока(Номер) Тогда
			СерияУказанаПравильно = ФизическиеЛицаКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, Номер, СообщенияПроверки);
			СообщенияПроверки = ?(ПустаяСтрока(СообщенияПроверки), НСтр("ru = 'Номер документа указан правильно'"), СообщенияПроверки);
			Если СерияУказанаПравильно Тогда
				Картинка = БиблиотекаКартинок.Успешно;
				ТекстНадписи  = "";
				ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Иначе
				Картинка = БиблиотекаКартинок.Предупреждение;
				ТекстНадписи  = НСтр("ru = 'Ошибка'");
				ЭлементЦветТекста = Форма.ЦветСтиляПоясняющийОшибкуТекст;
			КонецЕсли;
		Иначе
			СообщенияПроверки = "Не указан номер документа";
			ТекстНадписи  = "";
			ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
			Картинка = Новый Картинка;
		КонецЕсли;
	Иначе
		СообщенияПроверки = "Номер документа";
		ТекстНадписи  = "";
		ЭлементЦветТекста = Форма.ЦветСтиляЦветТекстаПоля;
		Картинка = Новый Картинка;
	КонецЕсли;
	Форма[Элемент.Имя + "ИнфоКартинка"] = Картинка;
	Форма[Элемент.Имя + "ИнфоТекст"]    = ТекстНадписи;
	Форма.Элементы[Элемент.Имя + "ИнфоКартинка"].Подсказка = СообщенияПроверки;
	Форма.Элементы[Элемент.Имя + "ИнфоТекст"].Подсказка    = СообщенияПроверки;
	Форма.Элементы[Элемент.Имя + "ИнфоТекст"].ЦветТекста   = ЭлементЦветТекста;
	Элемент.Подсказка  = СообщенияПроверки;
	Элемент.ЦветТекста = ЭлементЦветТекста;
КонецПроцедуры

Процедура УстановитьПодсказкуКДатеРождения(Форма) Экспорт
	
	Если ЗначениеЗаполнено(Форма.ФизическоеЛицо.ДатаРождения) Тогда
		
		Форма.ФизическоеЛицоДатаРожденияКартинка = Новый Картинка;
		Форма.ФизическоеЛицоДатаРожденияНадпись = "";
		ТекстПодсказки = "";
		
	Иначе
		
		Форма.ФизическоеЛицоДатаРожденияКартинка = БиблиотекаКартинок.Предупреждение;
		Форма.ФизическоеЛицоДатаРожденияНадпись = НСтр("ru='Дата рождения не указана,
			|зарплата не будет рассчитана'");
		ТекстПодсказки = НСтр(
			"ru='Дата рождения используется при расчете страховых взносов в ПФР'");
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизлицоДатаРождения",
		"Подсказка",
		ТекстПодсказки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизическоеЛицоДатаРожденияКартинка",
		"Подсказка",
		ТекстПодсказки);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Форма.Элементы,
		"ФизическоеЛицоДатаРожденияНадпись",
		"Подсказка",
		ТекстПодсказки);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Поля инфо-надписи группы доступа физического лица

Процедура ЗаполнитьИнфоГруппыДоступа(Форма) Экспорт
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с дополнительными формами

Функция ОбщееОписаниеДополнительнойФормы(ИмяОткрываемойФормы) Экспорт
	
	ОписаниеФормы = Новый Структура;
	
	ОписаниеФормы.Вставить("ИмяФормы", ИмяОткрываемойФормы);
	ОписаниеФормы.Вставить("КлючевыеРеквизиты", Новый Структура);
	ОписаниеФормы.Вставить("РеквизитыОбъекта", Новый Структура);
	ОписаниеФормы.Вставить("ДополнительныеДанные", Новый Структура);
	ОписаниеФормы.Вставить("АдресВХранилище", "");
	
	Возврат ОписаниеФормы;
	
КонецФункции

// Частный случай формы сотрудников.
// Параметры:
// 	ИмяОткрываемойФормы - Строка - имя открываемой формы. 
// Возвращаемое значение:
//		Структура - описание формы.	
//
Функция ОписаниеДополнительнойФормы(ИмяОткрываемойФормы) Экспорт
	
	Возврат СотрудникиКлиентСерверВнутренний.ОписаниеДополнительнойФормы(ИмяОткрываемойФормы);
	
КонецФункции

Функция ЗависимостиВидовАдресов() Экспорт
	
	ЗависимостиВидов = Новый Соответствие;
	
	МассивЗависимых = Новый Массив;
	МассивЗависимых.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица"));
	
	ЗависимостиВидов.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"),
		МассивЗависимых);
	
	МассивЗависимых.Добавить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"));
	
	ЗависимостиВидов.Вставить(ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица"),
		МассивЗависимых);
		
	Возврат ЗависимостиВидов;
	
КонецФункции

#КонецОбласти