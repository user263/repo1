#Область ПрограммныйИнтерфейс

// Функция - Получить таблицу порядка статусов документов.
// Параметры:
//   ДокументыОснования - СписокЗначений - список документов оснований.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с указанием порядка статусов документов, имеет колонки "ТипДокумента" пустая ссылка
//						на документ соответствующего типа,
//						Статус - Статус документа, тип - ПеречислениеСсылка.торо_СтатусыДокументов,
//						Порядок - прядок статусов, тип - число.
Функция ПолучитьТаблицуПорядкаСтатусовДокументов(ДокументыОснования) Экспорт 
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие"));
	
	ТаблицаПорядкаСтатусов = Новый ТаблицаЗначений;
	ТаблицаПорядкаСтатусов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов(МассивТипов));
	ТаблицаПорядкаСтатусов.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыДокументов"));
	ТаблицаПорядкаСтатусов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для каждого Элем Из ДокументыОснования Цикл
		
		// Порядок статусов выявленных дефектов
		Если ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_ВыявленныеДефекты.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 0;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.ЗапланированоУстранение;
			НС.Порядок = 1;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Устраняется;
			НС.Порядок = 2;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Устранен;
			НС.Порядок = 3;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Отклонен;
			НС.Порядок = 4;
			
			// Порядок статусов предписаний
		ИначеЕсли ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 0;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.ЗапланированоУстранение;
			НС.Порядок = 1;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Устраняется;
			НС.Порядок = 2;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Устранен;
			НС.Порядок = 3;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Отклонен;
			НС.Порядок = 4;
			
			// Порядок статусов заявок на ремонт
		ИначеЕсли ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 0;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Выполняется;
			НС.Порядок = 1;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Выполнен;
			НС.Порядок = 2;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Отклонен;
			НС.Порядок = 3;
			
			// Порядок статусов нарядов на ремонтные работы
		ИначеЕсли ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 0;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Выполнен;
			НС.Порядок = 1;
			
			// Порядок статусов нарядов на мероприятия
		ИначеЕсли ТипЗнч(Элем.Значение) = ТИП("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			
			Если ТаблицаПорядкаСтатусов.Найти(Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 0;
			
			НС = ТаблицаПорядкаСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка();
			НС.Статус = Перечисления.торо_СтатусыДокументов.Выполнен;
			НС.Порядок = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаПорядкаСтатусов;
	
КонецФункции

// Функция - Получить таблицу устанавливаемых статусов
//
// Параметры:
//  ТипДокументаСтрока - Строка - Тип документа для которого требуется получить таблицу устанавливаемых статусов.
//									Например: "ДокументСсылка.торо_ВыявленныеДефекты".
//  ДокументыОснования - СписокЗначений - список документов оснований.
//  ЗавершитьРемонтныеРаботы - Булево - Значение флага "Завершить ремонтные работы".
//
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица устанавливаемых статусов, колонки:
//		ТипДокумента пустая ссылка на документ соответствующего типа для которого устанавливается статус,
//		УстанавливаемыйСтатус, тип - ПеречислениеСсылка.торо_СтатусыДокументов - Статус который устанавливается документу,
//		Порядок, тип - Число - Порядок статуса у документа.
Функция ПолучитьТаблицуУстанавливаемыхСтатусов(ТипДокументаСтрока, ДокументыОснования, ЗавершитьРемонтныеРаботы = Ложь) Экспорт
		
	Если ТипДокументаСтрока = "ДокументСсылка.торо_ЗаявкаНаРемонт" Тогда
		Возврат ПолучитьТаблицуУстанавливаемыхСтатусовДляЗаявки(ДокументыОснования);
	ИначеЕсли ТипДокументаСтрока = "ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот" Тогда
		Возврат ПолучитьТаблицуУстанавливаемыхСтатусовДляНаряда(ДокументыОснования);
	ИначеЕсли ТипДокументаСтрока = "ДокументСсылка.торо_АктОВыполненииЭтапаРабот" Тогда
		Возврат ПолучитьТаблицуУстанавливаемыхСтатусовДляАктаОВыполненииЭтапаРабот(ДокументыОснования, ЗавершитьРемонтныеРаботы);
	ИначеЕсли ТипДокументаСтрока = "ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия" Тогда
		Возврат ПолучитьТаблицуУстанавливаемыхСтатусовДляАктаОВыполненииРегламентногоМероприятия(ДокументыОснования, ЗавершитьРемонтныеРаботы);
	ИначеЕсли ТипДокументаСтрока = "ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов" Тогда
		Возврат ПолучитьТаблицуУстанавливаемыхСтатусовДляЗакрытияЗаявокИРемонтов(ДокументыОснования);
	ИначеЕсли ТипДокументаСтрока = "ДокументСсылка.торо_ВыявленныеДефекты" Тогда
		Возврат ПолучитьТаблицуУстанавливаемыхСтатусовДляВыявленныхДефектов(ДокументыОснования);		
	КонецЕсли;	
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуУстанавливаемыхСтатусовДляЗаявки(ДокументыОснования)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	
	ТаблицаУстанавливаемыхСтатусов = Новый ТаблицаЗначений;
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов(МассивТипов));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("УстанавливаемыйСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыДокументов"));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для каждого Стр Из ДокументыОснования Цикл
		
		Если ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ВыявленныеДефекты.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.ЗапланированоУстранение;
			НС.Порядок = 1;
		
		ИначеЕсли ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.ЗапланированоУстранение;
			НС.Порядок = 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаУстанавливаемыхСтатусов;
	
КонецФункции

Функция ПолучитьТаблицуУстанавливаемыхСтатусовДляНаряда(ДокументыОснования)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	
	ТаблицаУстанавливаемыхСтатусов = Новый ТаблицаЗначений;
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов(МассивТипов));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("УстанавливаемыйСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыДокументов"));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для каждого Стр Из ДокументыОснования Цикл
		
		Если ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ВыявленныеДефекты.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;

			НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Устраняется;
			НС.Порядок = 2;
			
		ИначеЕсли ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Устраняется;
			НС.Порядок = 2;
			
		ИначеЕсли ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;

			НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Выполняется;
			НС.Порядок = 1; 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаУстанавливаемыхСтатусов;
	
КонецФункции

Функция ПолучитьТаблицуУстанавливаемыхСтатусовДляАктаОВыполненииЭтапаРабот(ДокументыОснования, ЗавершитьРемонтныеРаботы)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот"));
	
	ТаблицаУстанавливаемыхСтатусов = Новый ТаблицаЗначений;
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов(МассивТипов));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("УстанавливаемыйСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыДокументов"));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для каждого Стр Из ДокументыОснования Цикл
		
		Если ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ВыявленныеДефекты.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
				
			Если ЗавершитьРемонтныеРаботы Тогда
				
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Устранен;
				НС.Порядок = 3;
				
			Иначе
				
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Устраняется;
				НС.Порядок = 2;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗавершитьРемонтныеРаботы Тогда
				
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Устранен;
				НС.Порядок = 3;
				
			Иначе
				
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Устраняется;
				НС.Порядок = 2;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗавершитьРемонтныеРаботы Тогда
				
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Выполнен;
				НС.Порядок = 2;
			Иначе
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Выполняется;
				НС.Порядок = 1;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗавершитьРемонтныеРаботы Тогда
				
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Выполнен;
				НС.Порядок = 2;
				
			Иначе
				
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Выполняется;
				НС.Порядок = 1;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
		
	Возврат ТаблицаУстанавливаемыхСтатусов;

	
КонецФункции

Функция ПолучитьТаблицуУстанавливаемыхСтатусовДляАктаОВыполненииРегламентногоМероприятия(ДокументыОснования, ЗавершитьРемонтныеРаботы)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие"));
	
	ТаблицаУстанавливаемыхСтатусов = Новый ТаблицаЗначений;
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов(МассивТипов));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("УстанавливаемыйСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыДокументов"));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для каждого Стр Из ДокументыОснования Цикл
		
		Если ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗавершитьРемонтныеРаботы Тогда
				
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Выполнен;
				НС.Порядок = 1;
				
			Иначе
				
				НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
				НС.ТипДокумента = Документы.торо_НарядНаРегламентноеМероприятие.ПустаяСсылка();
				НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
				НС.Порядок = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаУстанавливаемыхСтатусов;
	
КонецФункции

Функция ПолучитьТаблицуУстанавливаемыхСтатусовДляЗакрытияЗаявокИРемонтов(ДокументыОснования)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	
	ТаблицаУстанавливаемыхСтатусов = Новый ТаблицаЗначений;
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов(МассивТипов));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("УстанавливаемыйСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыДокументов"));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для каждого Стр Из ДокументыОснования Цикл
		
		Если ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ВыявленныеДефекты.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка();
			НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Отклонен;
			НС.Порядок = 5;
			
		ИначеЕсли ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Отклонен;
			НС.Порядок = 5;
			
		ИначеЕсли ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка();
			НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Отклонен;
			НС.Порядок = 3;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаУстанавливаемыхСтатусов;
	
КонецФункции

Функция ПолучитьТаблицуУстанавливаемыхСтатусовДляВыявленныхДефектов(ДокументыОснования)
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	
	ТаблицаУстанавливаемыхСтатусов = Новый ТаблицаЗначений;
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов(МассивТипов));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("УстанавливаемыйСтатус", Новый ОписаниеТипов("ПеречислениеСсылка.торо_СтатусыДокументов"));
	ТаблицаУстанавливаемыхСтатусов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	
	Для каждого Стр Из ДокументыОснования Цикл
		
		Если ТипЗнч(Стр.Значение) = ТИП("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			Если ТаблицаУстанавливаемыхСтатусов.Найти(Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка()) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НС = ТаблицаУстанавливаемыхСтатусов.Добавить();
			НС.ТипДокумента = Документы.торо_ВнешнееОснованиеДляРабот.ПустаяСсылка();
			НС.УстанавливаемыйСтатус = Перечисления.торо_СтатусыДокументов.Зарегистрирован;
			НС.Порядок = 2;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаУстанавливаемыхСтатусов;
	
КонецФункции

#КонецОбласти