////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры работы с номенклатурой и связанными справочниками
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует наименование элемента справочника по заданному для вида номенклатуры шаблону.
//
// Параметры:
//		ШаблонНаименования - Строка - шаблон наименования, заданный в виде номенклатуры
//		ОбъектСправочник - СправочникОбъект.Номенклатура, СправочникОбъект.ХарактеристикиНоменклатуры,
//							СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры - объект справочник.
//
// Возвращаемое значение:
//  Строка - Наименование полученное по алгоритму расчета
//  Пустая строка - если не удалось сформировать наименование или не заполнены операнды алгоритма.
//
Функция НаименованиеПоШаблону (Знач ШаблонНаименования, ОбъектСправочник) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ТекстИсключения = НСтр("ru = 'Конфигурация работает в режиме сервиса. Формирование наименования должно происходить на клиенте.'");
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ФормулаНаименованияСтруктура = ФормулаНаименования(ШаблонНаименования, ОбъектСправочник);
	
	ФормулаНаименования = ФормулаНаименованияСтруктура.ФормулаНаименования;
	МассивЗначенийРеквизитов = ФормулаНаименованияСтруктура.МассивЗначенийРеквизитов; 
	
	Наименование = "";
	Если ЗначениеЗаполнено(ФормулаНаименования) Тогда
		
		Попытка
			
			Выполнить("Наименование = """" + " + ФормулаНаименования);
			
		Исключение
			
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно сформировать наименование по заданному для вида номенклатуры ""%ВидНоменклатуры%"" шаблону. Проверьте правильность шаблона.'");
			
			Если ТипЗнч(ОбъектСправочник) = Тип("СправочникОбъект.Номенклатура") Тогда
				
				ВидНоменклатуры = ОбъектСправочник.ВидНоменклатуры
				
			Иначе
				
				Если ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
					
					ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСправочник.Владелец, "ВидНоменклатуры");
					
				ИначеЕсли ТипЗнч(ОбъектСправочник.Владелец) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
					
					ВидНоменклатуры = ОбъектСправочник.Владелец;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СообщениеОбОшибке = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ВидНоменклатуры%", ВидНоменклатуры);
			ВызватьИсключение СообщениеОбОшибке;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Наименование;
	
КонецФункции

// Подставляет в шаблон наименования значения реквизитов
//
// Параметры:
//		ШаблонНаименования - Строка - шаблон наименования, заданный в виде номенклатуры
//		ОбъектСправочник - СправочникОбъект.Номенклатура, СправочникОбъект.ХарактеристикиНоменклатуры,
//							СправочникСсылка.Номенклатура, СправочникСсылка.ХарактеристикиНоменклатуры
//														- объект, для которого нужно расчитать наименование
// Возвращаемое значение:
//		Структура - с полями:
//			ФормулаНаименования - Строка - программный код, который нужно выполнить 
//			с помощью фукнции Выполнить для расчета наименования
//			МассивЗначенийРеквизитов - Массив - значения реквизитов, используемых в формуле наименования
//			ИндексыНаименованияВМассивеЗначенийРеквизитов - Массив - массив индексов элементов МассивЗначенийРеквизитов,
//																	которые хранят значение реквизита "Наименование". 
//
Функция ФормулаНаименования(Знач ШаблонНаименования, Знач ОбъектСправочник) Экспорт
	
	// Предусмотрено получение дополнительных реквизитов только на первом уровне вложенности.
	//	Правильно: [Реквизит.Реквизит.Реквизит], [ДопРеквизит.Реквизит.Реквизит].
	//	Неправильно: [Реквизит.ДопРеквизит.Реквизит], [ДопРеквизит.ДопРеквизит.Реквизит].
	
	ФормулаНаименования = ШаблонНаименования; 
	АлгоритмРасчета = ШаблонНаименования;
	МетаданныеОбъекта = ОбъектСправочник.Метаданные();
	МассивСтандартныхРеквизитов = Новый Массив;
	
	Для Каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		МассивСтандартныхРеквизитов.Добавить(СтандартныйРеквизит.Имя);
	КонецЦикла;
	
	Если ОбъектСправочник = Тип("СправочникСсылка.Номенклатура")
		Или ОбъектСправочник = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") Тогда
		
		ОбъектСправочник = ОбъектСправочник.ПолучитьОбъект();
	КонецЕсли;
	
	РеквизитыСправочника = МетаданныеОбъекта.Реквизиты;
	
	МассивЗначенийРеквизитов = Новый Массив;
	СчетчикРеквизитов = 0;
	
	ИндексыНаименованияВМассивеЗначенийРеквизитов = Новый Массив;
	
	Пока Истина Цикл
		
		ПервыйСимвол    = Найти(АлгоритмРасчета, "[");
		ПоследнийСимвол = Найти(АлгоритмРасчета, "]");
		
		Если ПервыйСимвол = 0 Или ПоследнийСимвол = 0 Тогда
			
			Прервать;
			
		Иначе
			
			ИмяОперанда = Сред(АлгоритмРасчета, ПервыйСимвол + 1, ПоследнийСимвол - ПервыйСимвол - 1);
			ЗначениеОперанда = "";
			
			КонецИмениРеквизита = Найти(ИмяОперанда, ".");
			
			Если КонецИмениРеквизита > 0 Тогда
				
				ИмяРеквизита = Лев(ИмяОперанда, КонецИмениРеквизита - 1);
				ПутьКДаннымОперанда = Прав(ИмяОперанда, СтрДлина(ИмяОперанда) - СтрДлина(ИмяРеквизита)-1);
				
			Иначе
				
				ИмяРеквизита = ИмяОперанда;
				
			КонецЕсли;
			
			ЭтоРеквизит = (РеквизитыСправочника.Найти(ИмяРеквизита) <> Неопределено) 
			          Или (МассивСтандартныхРеквизитов.Найти(ИмяРеквизита) <> Неопределено);
			
			Если ЭтоРеквизит Тогда
				
				Если ИмяРеквизита = ИмяОперанда Тогда
					
					ЗначениеОперанда = ОбъектСправочник[ИмяОперанда];
					
					Если ИмяРеквизита = "Наименование" Тогда
						ИндексыНаименованияВМассивеЗначенийРеквизитов.Добавить(СчетчикРеквизитов);
					КонецЕсли;
					
				Иначе
					
					ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСправочник[ИмяРеквизита], Новый Структура("ИмяОперанда", ПутьКДаннымОперанда));
					ЗначениеОперанда = ЗначенияРеквизитов.ИмяОперанда;
					
				КонецЕсли;
				
			Иначе
				
				ДопРеквизит        = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяРеквизита, Истина);
				ПолеДопРеквизита   = "";
				СложныйДопРеквизитСТочкойВИмени = Ложь; // Например, доп. реквизит "Сечение (кв. мм)"
				
				Если Не ЗначениеЗаполнено(ДопРеквизит) Тогда
					
					СложныйДопРеквизитСТочкойВИмени = Истина;
					
					// Проверяем наличие символа "." в имени доп. реквизита
					Пока Истина Цикл
						
						ИмяДопРеквизитаПраво        = Прав(ИмяОперанда, СтрДлина(ИмяОперанда) - КонецИмениРеквизита);
						КонецИмениДопРеквизитаПраво = Найти(ИмяДопРеквизитаПраво, ".");
						ИмяДопРеквизита             = ?(КонецИмениДопРеквизитаПраво > 0, Лев(ИмяОперанда, КонецИмениРеквизита + КонецИмениДопРеквизитаПраво - 1), ИмяОперанда);
						ДопРеквизит                 = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ИмяДопРеквизита, Истина);
						
						Если НЕ ЗначениеЗаполнено(ДопРеквизит) Тогда
							
							Если ИмяДопРеквизита = ИмяОперанда Тогда
								Прервать;
							Иначе
								КонецИмениРеквизита = КонецИмениРеквизита + КонецИмениДопРеквизитаПраво;
							КонецЕсли;
							
						Иначе
							
							ПолеДопРеквизита = Прав(ИмяОперанда, СтрДлина(ИмяОперанда) - СтрДлина(ДопРеквизит) - 1);
							Прервать;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				СтрокаДопРеквизита = ОбъектСправочник.ДополнительныеРеквизиты.Найти(ДопРеквизит, "Свойство");
			
				Если СтрокаДопРеквизита <> Неопределено Тогда
					
					Попытка
						
						Если ИмяРеквизита = ИмяОперанда Тогда
							
							ЗначениеОперанда = СтрокаДопРеквизита.Значение;
							
						ИначеЕсли СложныйДопРеквизитСТочкойВИмени Тогда
							
							// Если в доп. реквизите который имеет символ "." в наименовании есть более одного
							// обращения через точку, то нужно получать данные запросом.
							ОбращениеКРеквизитам = Найти(ПолеДопРеквизита, ".");
							
							Если ОбращениеКРеквизитам > 0 Тогда
								
								ОбъектПоиска = СтрокаДопРеквизита.Значение[Лев(ПолеДопРеквизита, ОбращениеКРеквизитам - 1)];
								// Пытаемся получить значения реквизитов в попытке на случай неверного указания имени реквизита.
								ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектПоиска,
													Новый Структура("ИмяОперанда",Прав(ПолеДопРеквизита, СтрДлина(ПолеДопРеквизита) - ОбращениеКРеквизитам)));
								ЗначениеОперанда = ЗначенияРеквизитов.ИмяОперанда;
								
							Иначе
								
								ЗначениеОперанда = ?(ЗначениеЗаполнено(ПолеДопРеквизита), СтрокаДопРеквизита.Значение[ПолеДопРеквизита], СтрокаДопРеквизита.Значение);
								
							КонецЕсли;
							
						Иначе
							
							ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДопРеквизита.Значение, Новый Структура("ИмяОперанда", ПутьКДаннымОперанда));
							ЗначениеОперанда = ЗначенияРеквизитов.ИмяОперанда;
							
						КонецЕсли;
						
					Исключение
						
						ВызватьИсключениеПоОшибкеШаблонаНаименования(ИмяОперанда);
						
					КонецПопытки;
					
				Иначе
					
					ЗначениеОперанда = "";
					
				КонецЕсли;
				
			КонецЕсли;
			
			МассивЗначенийРеквизитов.Добавить(ЗначениеОперанда);
			ФормулаНаименования = СтрЗаменить(ФормулаНаименования, "[" + ИмяОперанда + "]",  ("" + "МассивЗначенийРеквизитов[" + СчетчикРеквизитов + "]"));
			АлгоритмРасчета     = СтрЗаменить(АлгоритмРасчета, "[" + ИмяОперанда + "]", "");
			
		КонецЕсли;
		
		СчетчикРеквизитов = СчетчикРеквизитов + 1;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("ФормулаНаименования",ФормулаНаименования);
	Результат.Вставить("МассивЗначенийРеквизитов",МассивЗначенийРеквизитов);
	Результат.Вставить("ИндексыНаименованияВМассивеЗначенийРеквизитов", ИндексыНаименованияВМассивеЗначенийРеквизитов);
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает параметры проверки заполнения характеристик номенклатуры
//
//	Возвращаемое значение:
//		Структура - с полями:
//			*ИмяТЧ - Строка - значение по умолчанию "Товары"
//			*СуффиксДопРеквизита - Строка - значение по умолчанию "" - если в ТЧ два реквизита
//												"Характеристика", то второй назван с суффиком. 
//											если суффикс передан, то проверяются оба реквизита
//          *СписокСтрок - Массив, Неопределенно - значение по умолчанию Неопределенно
//			*ВыводитьНомераСтрок - Булево - значение по умолчанию Истина
//			*ОтборПроверяемыхСтрок - Структура - значение по умолчанию пустая Структура.
//
Функция ПараметрыПроверкиЗаполненияХарактеристик() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ",                 "Товары");	
	ПараметрыПроверки.Вставить("СуффиксДопРеквизита",   "");	
	ПараметрыПроверки.Вставить("СписокСтрок",           Неопределено);
	ПараметрыПроверки.Вставить("ВыводитьНомераСтрок",   Истина);
	ПараметрыПроверки.Вставить("ОтборПроверяемыхСтрок", Новый Структура);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Процедура проверки заполнения колонок "Характеристика" в формах.
// Параметры:
//		Объект - ДокументОбъект, СправочникОбъект - и т.п.
//		МассивНепроверяемыхРеквизитов - Массив - массив реквизитов, которые не нужно проверять платформенной проверкой
//		Отказ - Булево - отказ продолжения операции
//		ПараметрыПроверки - Структура - 
//			возможные поля (все необязательные):
//  		СуффиксДопРеквизита - суффикс реквизитов "Номенклатура" и "Характеристика", если в ТЧ есть такие реквизиты,
//						например, "Оприходование", если в ТЧ помимо "Номенклатура" и "Характеристика" есть еще
//						"НоменклатураОприходование" и "ХарактеристикаОприходование"
//			ИмяТЧ - имя проверяемой табличной части, если оно отличается от "Товары".
Процедура ПроверитьЗаполнениеХарактеристик(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Перем ИмяТЧ;
	Перем СписокСтрок;
		
	Если ПараметрыПроверки <> Неопределено Тогда
		ПараметрыПроверки.Свойство("ИмяТЧ",				  ИмяТЧ);	
		ПараметрыПроверки.Свойство("СписокСтрок",		  СписокСтрок);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
		ИмяТЧ = "Товары";	
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Характеристика");
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,";
	
	
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаХарактеристика
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	(ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	| 	И СтрокиСОшибками.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  Объект[ИмяТЧ].Выгрузить(СписокСтрок, "НомерСтроки,Номенклатура,Характеристика"));
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Характеристика%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредставлениеТЧ                      = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаХарактеристика = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Характеристика.Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаХарактеристика Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Характеристика%", ПредставлениеРеквизитаХарактеристика);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Характеристика");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

// Процедура проверки заполнения колонок "Содержание" в формах.
// Параметры:
//		Объект - ДокументОбъект - объект.
//		Отказ - Булево - отказ продолжения операции.
//		ИмяТЧ - Строка - имя ТЧ.
Процедура ПроверитьЗаполнениеСодержания(Объект, Отказ, ИмяТЧ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Содержание = """"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	СтрокиСОшибками.Номенклатура.ВариантОформленияПродажи = ЗНАЧЕНИЕ(Перечисление.ВариантыОформленияПродажи.АктВыполненныхРабот)
	|";
	Запрос.УстановитьПараметр("ТаблицаТоваров", Объект[ИмяТЧ].Выгрузить(,"НомерСтроки,Номенклатура,Содержание"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();

	ПредставлениеТЧ                 = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;

	ШаблонСообщения = НСтр("ru='Не заполнена колонка """"Содержание"""" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");

	Пока Выборка.Следующий() Цикл
					
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
					
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Содержание");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);

	КонецЦикла;
		
КонецПроцедуры

// Функция определяет наличие в табличной части работ.
// Параметры:
//		Объект - ДокументОбъект - объект.
//		ПараметрыПроверки - Структура -
//			возможные поля (все необязательные):
//  		ИмяТабличнойЧасти - имя проверяемой табличной части, если оно отличается от "Товары".
// Возвращаемое значение:
//		Структура - структура с полем "ЕстьРаботы".
Функция ПроверитьНаличиеРабот(Объект, ПараметрыПроверки = Неопределено) Экспорт
	Перем ИмяТабличнойЧасти;
	
	Если ПараметрыПроверки <> Неопределено Тогда
		ПараметрыПроверки.Свойство("ИмяТЧ", ИмяТабличнойЧасти);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ 
	|	ТаблицаТовары.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТовары
	|ИЗ 
	|	&ТаблицаТовары КАК ТаблицаТовары
	|;
	|/////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1 
	|	ИСТИНА КАК ЕстьРаботы
	|ИЗ 
	|	ТаблицаТовары КАК ТаблицаТовары
	|ГДЕ 
	|	ВЫРАЗИТЬ(ТаблицаТовары.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры 
	|	= ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)";
	
	Запрос.УстановитьПараметр("ТаблицаТовары", Объект[ИмяТабличнойЧасти].Выгрузить(, "Номенклатура"));
	РезультатЗапроса = Запрос.Выполнить();
	ТипыНоменклатуры = Новый Структура("ЕстьРаботы", Ложь);
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		ТипыНоменклатуры.ЕстьРаботы = Истина;
		
	КонецЕсли;
	
	Возврат ТипыНоменклатуры;
	
КонецФункции

// Процедура проверки заполнения колонок "Упаковка" в документах по адресному складу.
// Указание упаковок обязательно для товаров и необязательно для многоборотной тары.
// Параметры:
//		Объект - ДокументОбъект, СправочникОбъект - и т.п.
//		МассивНепроверяемыхРеквизитов - Массив - массив реквизитов, которые не нужно проверять платформенной проверкой.
//		Отказ - Булево - отказ продолжения операции.
//		ПараметрыПроверки - Структура -
//			возможные поля (все необязательные):
//			ИмяТЧ - имя проверяемой табличной части, если оно отличается от "Товары".
//
Процедура ПроверитьЗаполнениеУпаковок(Объект,МассивНепроверяемыхРеквизитов,Отказ,ПараметрыПроверки = Неопределено) Экспорт
	
	Перем ИмяТЧ, ИмяПоляУпаковка;
	
	Если ПараметрыПроверки <> Неопределено Тогда
		ПараметрыПроверки.Свойство("ИмяТЧ",ИмяТЧ);	
		ПараметрыПроверки.Свойство("ИмяПоляУпаковка", ИмяПоляУпаковка);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
		ИмяТЧ = "Товары";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяПоляУпаковка) Тогда
		ИмяПоляУпаковка = "Упаковка";
	КонецЕсли;
	
	Если МассивНепроверяемыхРеквизитов.Найти(ИмяТЧ+"." + ИмяПоляУпаковка) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+"." + ИмяПоляУпаковка);
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,
	|	ТаблицаТоваров.Номенклатура,
	|	ТаблицаТоваров." + ИмяПоляУпаковка + "
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  Объект[ИмяТЧ].Выгрузить(, "НомерСтроки,Номенклатура,"+ИмяПоляУпаковка));
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Упаковка%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредставлениеТЧ                = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаУпаковка = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяПоляУпаковка].Синоним;
	
	Пока Выборка.Следующий() Цикл
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Упаковка%", ПредставлениеРеквизитаУпаковка);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
		
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, ИмяПоляУпаковка);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
	КонецЦикла;
		
КонецПроцедуры

// Процедура проверки соответствия вида номенклатуры товаров другого качества виду номенклатуры исходного качества.
// Для номенклатуры, по которой ведется учет серий, товары другого качества должны быть одного вида с исходными.
// Параметры:
//		Объект - ДокументОбъект - объект.
//		Отказ - Булево - отказ продолжения операции
//		ИмяТЧДляПроверки - Строка - имя проверяемой табличной части, если оно отличается от "Товары".
//
Процедура ПроверитьВидНоменклатурыОприходования(Объект, Отказ, ИмяТЧДляПроверки = "Товары") Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Товары.НомерСтроки,
	|	Товары.Номенклатура,
	|	Товары.НоменклатураОприходование,
	|	Товары.СтатусУказанияСерий
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Товары.НомерСтроки
	|ИЗ
	|	Товары КАК Товары
	|ГДЕ
	|	ВЫРАЗИТЬ(Товары.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры <> ВЫРАЗИТЬ(Товары.НоменклатураОприходование КАК Справочник.Номенклатура).ВидНоменклатуры
	|	И Товары.СтатусУказанияСерий > 0";
	
	Запрос.УстановитьПараметр("Товары",
		Объект[ИмяТЧДляПроверки].Выгрузить(,"НомерСтроки,Номенклатура,НоменклатураОприходование,СтатусУказанияСерий"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекстОшибки = НСтр("ru='Вид номенклатуры другого качества (испорченного товара) должен совпадать с видом исходной номенклатуры, т.к. ведется учет по серям номенклатуры'");
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧДляПроверки,Выборка.НомерСтроки,"НоменклатураОприходование");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект,Поле,,Отказ);
	КонецЦикла;
	
КонецПроцедуры

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

// Получает служебные реквизиты по номенклатуре в структуре
//
// Параметры:
// 		СтруктураДанных - Структура, СтрокаТаблицыЗначений - Структура данных, в которой необходимо заполнить поля
// 		СтруктураДействий - Структура - структура с описанием реквизитов, которые необходимо заполнить.
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтруктуре(СтруктураДанных, СтруктураДействий) Экспорт
	
	СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруДополнительнойИнформации(СтруктураДействий);
	
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Для Каждого Источник Из СтруктураДопДанных.СтруктураИсточников Цикл
		ТаблицаВыгрузки.Колонки.Добавить(Источник.Ключ, Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(ТаблицаВыгрузки.Добавить(), СтруктураДанных);
	
	Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	Запрос.УстановитьПараметр("КоллекцияДанных", ТаблицаВыгрузки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка, СтруктураДопДанных.РеквизитыЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВСтруктуре()

// Заполняет служебные реквизиты по номенклатуре в коллекции
//
// Параметры:
// 		КоллекцияДанных - ДанныеФормыКоллекция, ТаблицаЗначний - Таблица, в которой необходимо заполнить реквизиты
// 		СтруктураДействий - Структура - структура с описанием реквизитов, которые необходимо заполнить.
//
Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(КоллекцияДанных, СтруктураДействий) Экспорт
	
	СтруктураДопДанных = ОбработкаТабличнойЧастиСервер.ПолучитьСтруктуруДополнительнойИнформации(СтруктураДействий);
	
	Запрос = Новый Запрос(ОбработкаТабличнойЧастиСервер.ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных));
	Запрос.УстановитьПараметр("КоллекцияДанных", КоллекцияДанных.Выгрузить( ,"НомерСтроки" + СтруктураДопДанных.РеквизитыВыгрузки));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Сч=0 По КоллекцияДанных.Количество()-1 Цикл
		Выборка.Следующий(); // Количество строк в выборке по запросу всегда равно количеству строк в коллекции
		ЗаполнитьЗначенияСвойств(КоллекцияДанных[Сч], Выборка, СтруктураДопДанных.РеквизитыЗаполнения);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыВКоллекции()

// Процедура заполнения колонок "ХарактеристикиИспользуются" в формах.
// Параметры:
//		ТаблицаФормы - ДанныеФормыКоллекция - таблица.
//		ПараметрыЗаполнения - структура - возможное поле (необязательное):
//  				СуффиксДопРеквизита - суффикс реквизитов "Номенклатура" и "Характеристика", если в ТЧ есть такие реквизиты,
//						например, "Оприходование", если в ТЧ помимо "Номенклатура" и "Характеристика" есть еще
//						"НоменклатураОприходование" и "ХарактеристикаОприходование"
Процедура ЗаполнитьПризнакИспользованияХарактеристик(ТаблицаФормы,ПараметрыЗаполнения = Неопределено) Экспорт
	
	Перем СуффиксДопРеквизита;
	
	Если ТаблицаФормы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения <> Неопределено Тогда
		
		ПараметрыЗаполнения.Свойство("СуффиксДопРеквизита",СуффиксДопРеквизита);	
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
	|	ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +"  КАК Номенклатура" + СуффиксДопРеквизита +","; 
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
		ТекстЗапроса = ТекстЗапроса + "	
		|	ВЫБОР
		|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|				ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура" + СуффиксДопРеквизита +" КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)	
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ХарактеристикиИспользуются" + СуффиксДопРеквизита +",";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
	|			ИЛИ ВЫРАЗИТЬ(ТаблицаТоваров.Номенклатура КАК Справочник.Номенклатура).ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	
	СтрокаДопРеквизитов = ?(Не ЗначениеЗаполнено(СуффиксДопРеквизита), "", ",Номенклатура"+СуффиксДопРеквизита);
	Запрос.УстановитьПараметр("ТаблицаТоваров",  ТаблицаФормы.Выгрузить(,"НомерСтроки,Номенклатура"+СтрокаДопРеквизитов));
	
	ТаблицаПризнаков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрТабл из ТаблицаФормы Цикл
		
		СтрокаХарактеристик = ТаблицаПризнаков[СтрТабл.НомерСтроки-1];
		
		СтрТабл.ХарактеристикиИспользуются = СтрокаХарактеристик.ХарактеристикиИспользуются;
		Если ЗначениеЗаполнено(СуффиксДопРеквизита) Тогда
			СтрТабл["ХарактеристикиИспользуются"+СуффиксДопРеквизита] = СтрокаХарактеристик["ХарактеристикиИспользуются"+СуффиксДопРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВызватьИсключениеПоОшибкеШаблонаНаименования(ИмяОперанда)
	
	ШаблонСообщенияОбОшибке = НСтр("ru = 'Невозможно рассчитать наименование по шаблону. Ошибка в имени операнда ""%ИмяОперанда%"".'");
	ТекстСообщенияОбОшибке  = СтрЗаменить(ШаблонСообщенияОбОшибке, "%ИмяОперанда%", ИмяОперанда);
	
	ВызватьИсключение ТекстСообщенияОбОшибке;
	
КонецПроцедуры

// Процедура проверяет правильность указания серий товаров по статусам в ТЧ "Товары".
// Если статусы
//       1 - количество по сериям не совпадает с количеством товаров (движения по сериям делать не нужно)
//       3 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям)
//       5 - количество по сериям не совпадает с количеством товаров (нужно делать движения по сериям, 
//					серии заполняются по FEFO)
//       7 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отбора)
//       9 - количество по сериям не совпадает с количеством товаров (серии указываются при планировании отгрузки)
//       13 - количество по сериям не совпадает с количеством товаров или серия не указана (учет себестоимости по сериям)
// то выдается ошибка.
// Параметры:
//		ДокументОбъект - ДокументОбъект, в котором нужно проверить указание серий.
//		Отказ - признак ошибки проверки.
//      МассивНепроверяемыхРеквизитов - Массив, Строка - массив имен реквизитов, 
//			которые нужно исключить из платформенной проверки.
//      ВыдаватьСообщения - Булево - признак того, что нужно выдавать сообщения об ошибках проверки.
//
Процедура ПроверитьЗаполнениеСерий(Объект,Отказ,МассивНепроверяемыхРеквизитов = Неопределено,ВыдаватьСообщения = Истина,ПараметрыПроверки = Неопределено) Экспорт
	Перем ИмяТЧ;
	Перем СписокСтрок;
		
	Если ПараметрыПроверки <> Неопределено Тогда
		ПараметрыПроверки.Свойство("ИмяТЧ",				  ИмяТЧ);	
		ПараметрыПроверки.Свойство("СписокСтрок",		  СписокСтрок);	
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТЧ) Тогда
		ИмяТЧ = "Товары";	
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить(ИмяТЧ+".Серия");
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоваров.НомерСтроки,";
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.Серия КАК Серия
	|ПОМЕСТИТЬ СтрокиСОшибками
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	ТаблицаТоваров.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтрокиСОшибками.НомерСтроки,";
	
	
	ТекстЗапроса = ТекстЗапроса + "	
	|	ВЫБОР
	|		КОГДА (ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьСерии = Истина
	|			)
	|			И СтрокиСОшибками.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка) ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеЗаполненаСерия
	|ИЗ
	|	СтрокиСОшибками КАК СтрокиСОшибками
	|ГДЕ
	|	(ВЫРАЗИТЬ(СтрокиСОшибками.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьСерии = Истина
	|			)
	| 	И СтрокиСОшибками.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)";
	
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("ТаблицаТоваров",  Объект[ИмяТЧ].Выгрузить(СписокСтрок, "НомерСтроки,Номенклатура,Серия"));
	
	ШаблонСообщения = НСтр("ru='Не заполнена колонка ""%Серия%"" в строке %НомерСтроки% списка ""%ТаблицаТовары%"".'");
	
	Выборка = Запрос.Выполнить().Выбрать();
	ПредставлениеТЧ                      = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Синоним;
	ПредставлениеРеквизитаСерия = МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты.Серия.Синоним;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненаСерия Тогда
			
			ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%Серия%", ПредставлениеРеквизитаСерия);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаТовары%", ПредставлениеТЧ);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Выборка.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Серия");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,"Объект",Отказ);
		КонецЕсли;
				
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
