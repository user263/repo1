////////////////////////////////////////////////////////////////////////////////
// Модуль "ПодборТоваровКлиент", содержит процедуры и функции необходимые для
// работы форм подбора товаров. Работа с отборами, обработчики событий элементов 
// форм.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ГорячиеКлавиши

// Процедура устанавливает текущим элементом нужную панель отборов в зависимости
// от установленного варианта навигации.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекущийЭлементНавигация(Форма) Экспорт
	
	ВариантНавигации = Форма.ВариантНавигации;
	
	Если ВариантНавигации = "ПоИерархии" Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ИерархияНоменклатуры;
		
	ИначеЕсли ВариантНавигации = "ПоСвойствам" Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ДеревоОтборов;
		
	ИначеЕсли ВариантНавигации = "Совместно" Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.ТаблицаНоменклатураПродаваемаяСовместноПредпосылка;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекущийЭлементСписокТоваров(Форма) Экспорт
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Иначе
		Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)];
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список подобранных товаров - корзину.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекущийЭлементКорзина(Форма) Экспорт
	
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	Если ЭтоФормаЧекаККМ Тогда
		
		Форма.ТекущийЭлемент = Форма.Элементы.Товары;
		
	Иначе
		
		Форма.ТекущийЭлемент = Форма.Элементы.Корзина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текущим элементом - список номенклатуры поставщика.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекущийЭлементНоменклатураПоставщика(Форма) Экспорт
	
	Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоставщикаПоВариантуПоиска(Форма)];
	
КонецПроцедуры

// Возвращает имя текущего элемента - строки поиска на форме подбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//		Строка - имя текущего элемента.
Функция ИмяТекущегоЭлементаСтрокиПоиска(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	ИмяТекущегоЭлемента = "СтрокаПоискаНоменклатура";
	
	Если ЭтоФормаПодбора Тогда
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			Если Форма.НавигацияПоНоменклатуреПоставщика Тогда
				ИмяТекущегоЭлемента = "СтрокаПоискаНоменклатураПоставщика";
			ИначеЕсли Форма.НавигацияПоХарактеристикам Тогда
				ИмяТекущегоЭлемента = "СтрокаПоискаХарактеристики";
			КонецЕсли;
		Иначе
			Если Форма.НавигацияПоХарактеристикам Тогда
				ИмяТекущегоЭлемента = "СтрокаПоискаХарактеристики";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяТекущегоЭлемента;

КонецФункции

// Процедура устанавливает текущим элементом строку поиска на форме.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекущийЭлементСтрокаПоиска(Форма) Экспорт
	
	ВариантПоиска = ПодборТоваровКлиентСервер.ДействующийВариантПоиска(Форма);
	Если Не ВариантПоиска = "Расширенный" Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = ИмяТекущегоЭлементаСтрокиПоиска(Форма);
	
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяТекущегоЭлемента];
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура вызывается при активизации строки списка иерархии номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма подборов.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатуры(Форма) Экспорт
	
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (Форма.ВариантНавигации = "ПоИерархии") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПомощникаПродаж Тогда
		Если Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаПодбор Тогда
			Форма.ПодключитьОбработчикОжидания("ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
		КонецЕсли;
	Иначе
		Форма.ПодключитьОбработчикОжидания("ИерархияНоменклатурыПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка иерархии номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма подборов.
//
Процедура ОбработчикАктивизацииСтрокиИерархииНоменклатуры(Форма) Экспорт

	Если Форма.ТекущаяИерархияНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекущаяИерархияНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	
	УстановитьОтборПоИерархииНоменклатуры(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) И Форма.НавигацияПоХарактеристикам Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;

КонецПроцедуры

// Устанавливает отбор по группе номенклатыр в списке номенклатуры.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатуры(Форма)
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ВариантНавигации = "ПоИерархии" Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Неопределено Тогда
		ОтборПоИерархииНоменклатуры = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	Иначе
		ОтборПоИерархииНоменклатуры = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура, "Родитель", ОтборПоИерархииНоменклатуры, 
		ВидСравненияКомпоновкиДанных.Равно, "Родитель", Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка иерархии номенклатуры поставщика.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма подборов.
//
Процедура ПриАктивизацииСтрокиИерархииНоменклатурыПоставщика(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтрНоменклатураПоставщика Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ПодключитьОбработчикОжидания("ИерархияНоменклатурыПоставщикаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки списка номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка.
//
Процедура ПриАктивизацииСтрокиСпискаНоменклатуры(Форма) Экспорт
	
	Форма.ПодключитьОбработчикОжидания("СписокПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы номенклатуры на формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора товаров,
//	 Элемент - Таблица - список номенклатуры.
//
Процедура ПриАктивизацииСтрокиТаблицыНоменклатуры(Форма, Элемент) Экспорт
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	Если Элемент.Имя <> ИмяСпискаНоменклатуры Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатуры = Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		
		ПодборТоваровКлиентСервер.ОчиститьТаблицуОстатков(Форма);
		Форма.ТекущаяСтрокаНоменклатуры = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
		
	Иначе
		
		Если Форма.ТекущаяСтрокаНоменклатуры <> Неопределено Тогда
			
			Если (Форма.ТекущаяСтрокаНоменклатуры.Номенклатура = СтрокаТаблицыНоменклатуры.Номенклатура) Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Форма.ТекущаяСтрокаНоменклатуры = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
		ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаНоменклатуры, СтрокаТаблицыНоменклатуры);
		
		Если ЭтоФормаПомощникаПродаж Тогда
			Если СтрокаТаблицыНоменклатуры.Доступно > 0 Тогда
				Форма.ДатаОтгрузки = НачалоДня(ТекущаяДата());
			Иначе
				Форма.ДатаОтгрузки = '00010101';
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоФормаПомощникаПродаж Тогда
			Если Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаПодбор Тогда
				УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);
			КонецЕсли;
		Иначе
			УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма);
		КонецЕсли;
		
		Если Форма.ОтображатьОстатки И Не ЭтоФормаЧекаККМ Тогда
			Если ЭтоФормаПомощникаПродаж Тогда
				Если Форма.Элементы.Страницы.ТекущаяСтраница = Форма.Элементы.СтраницаПодбор Тогда
					Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
				КонецЕсли;
			Иначе
				Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
			КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы характеристик на формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора товаров,
//	 Элемент - Таблица - список характеристик.
//
Процедура ПриАктивизацииСтрокиТаблицыХарактеристик(Форма, Элемент) Экспорт
	
	ИмяСпискаХарактеристик = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма);
	
	Если Элемент.Имя <> ИмяСпискаХарактеристик Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	СтрокаТаблицыХарактеристик = Элемент.ТекущиеДанные;
	
	Если СтрокаТаблицыХарактеристик = Неопределено Тогда
		
		Если Форма.НавигацияПоХарактеристикам Тогда
			ПодборТоваровКлиентСервер.ОчиститьТаблицуОстатков(Форма);
		КонецЕсли;
		Форма.ТекущаяСтрокаХарактеристик = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
		
		Возврат;
		
	КонецЕсли;
	
	Форма.ТекущаяСтрокаХарактеристик = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
	ЗаполнитьЗначенияСвойств(Форма.ТекущаяСтрокаХарактеристик, СтрокаТаблицыХарактеристик);
	
	Если Не Форма.НавигацияПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПомощникаПродаж Тогда
		Если СтрокаТаблицыХарактеристик.Доступно > 0 Тогда
			Форма.ДатаОтгрузки = НачалоДня(ТекущаяДата());
		Иначе
			Форма.ДатаОтгрузки = '00010101';
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.НавигацияПоХарактеристикам И Не ЭтоФормаЧекаККМ Тогда
		Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при активизации строки таблицы номенклатуры поставщика на формах подборов.
//
// Параметры:
//	 Форма   - УправляемаяФорма - форма подбора товаров,
//	 Элемент - Таблица          - список номенклатуры поставщика.
//
Процедура ПриАктивизацииСтрокиНоменклатурыПоставщика(Форма, Элемент) Экспорт
	
	Если Не Форма.НавигацияПоНоменклатуреПоставщика Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицыНоменклатурыПоставщика = Элемент.ТекущиеДанные;
	Если СтрокаТаблицыНоменклатурыПоставщика = Неопределено Тогда
		Форма.ТекущаяСтрокаНоменклатурыПоставщика = ПодборТоваровКлиентСервер.ПараметрыТовара();
		Возврат;
	КонецЕсли;
	
	ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
	ПараметрыТовара.Вставить("НоменклатураПоставщика", СтрокаТаблицыНоменклатурыПоставщика.Ссылка);
	
	ЗаполнитьЗначенияСвойств(ПараметрыТовара, СтрокаТаблицыНоменклатурыПоставщика);
	
	Форма.ТекущаяСтрокаНоменклатурыПоставщика = ПараметрыТовара;
	
	Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

// Процедура вызывается при изменении флажка "Отображать остатки" на формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ПриИзмененииОтображенияОстатковПоСкладамДокумента(Форма) Экспорт
	
	Форма.ОтображатьОстатки = Не Форма.ОтображатьОстатки;
	Форма.Элементы.ОстаткиТоваров.Видимость = Форма.ОтображатьОстатки;
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма) Тогда
		
		Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания",0.1,Истина);
		ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстатки(Форма);
		
		Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
			
			ПодборТоваровКлиентСервер.УстановитьТекстНадписиОтображатьОстаткиНоменклатурыПоставщика(Форма);
			Форма.Элементы.ОстаткиТоваровПоставщика.Видимость = Форма.ОтображатьОстатки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переключении страницы номенклатуры в форме подбора товаров
// в документы закупки. Возникает при переключении на страницу с номенклатурой поставщика и обратно.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора товаров в документы закупки.
//
Процедура СтраницыПриСменеСтраницыНоменклатуры(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Форма.НавигацияПоНоменклатуреПоставщика = (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНоменклатураПоставщика);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоманднаяПанельСоздатьНоменклатуру", "Доступность", (Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаНоменклатура));
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "КоманднаяПанельСоздатьХарактеристику", "Доступность", (Форма.НавигацияПоХарактеристикам И Не Форма.НавигацияПоНоменклатуреПоставщика));
	
	Если Форма.НавигацияПоНоменклатуреПоставщика Тогда
		ПриАктивизацииСтрокиНоменклатурыПоставщика(Форма, Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоставщикаПоВариантуПоиска(Форма)]);
	ИначеЕсли Форма.НавигацияПоХарактеристикам Тогда
		ПриАктивизацииСтрокиТаблицыХарактеристик(Форма, Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)]);
	Иначе
		ПриАктивизацииСтрокиТаблицыНоменклатуры(Форма, Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область НавигацияПоИерархииНоменклатурыПоставщика

// Отключает установленный отбор по группе номенклатуры поставщика у списка номенклатуры поставщика
// на форме подбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоИерархииНоменклатурыПоставщика(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатураПоставщика, "Родитель",,,,Ложь);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении флажка использования фильтров для номенклатуры поставщика.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтровНоменклатурыПоставщика(Форма) Экспорт
	
	Если Форма.ИспользоватьФильтрНоменклатураПоставщика Тогда
		УстановитьОтборПоРодителюТекущейСтрокиНоменклатурыПоставщика(Форма);
		УстановитьОтборПоИерархииНоменклатурыПоставщика(Форма);
	Иначе
		УдалитьОтборПоИерархииНоменклатурыПоставщика(Форма);
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтраНоменклатурыПоставщика(Форма);
	
КонецПроцедуры

// Устанавливает отбор по родителю текущей строки списка номенклатуры поставщика
// в формах подборов товаров.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоРодителюТекущейСтрокиНоменклатурыПоставщика(Форма)
	
	ТекущаяСтрока = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоставщикаПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Родитель = ПодборТоваровВызовСервера.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
	Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока = Родитель;
	
КонецПроцедуры

// Вызывается при активизации строки табличного поля иерархии номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура ОбработчикАктивизацииСтрокиИерархииНоменклатурыПоставщика(Форма) Экспорт
	
	Если Форма.ТекущаяИерархияНоменклатурыПоставщика = Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ТекущаяИерархияНоменклатурыПоставщика = Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока;
	
	УстановитьОтборПоИерархииНоменклатурыПоставщика(Форма);
	
КонецПроцедуры

// Устанавливает отбор по группе номенклатыр в списке номенклатуры поставщика.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатурыПоставщика(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтрНоменклатураПоставщика Тогда
		Возврат;
	КонецЕсли;
	
	ОтборПоИерархииНоменклатурыПоставщика = Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатураПоставщика, "Родитель", 
		ОтборПоИерархииНоменклатурыПоставщика, 
		ВидСравненияКомпоновкиДанных.Равно, "Родитель", Истина);
	
КонецПроцедуры

// Устанавливает отбор списка номенклатуры по текущей иерархии номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура УстановитьОтборПоТекущейИерархииНоменклатурыПоставщика(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатураПоставщика, "Родитель", 
		Форма.ТекущаяИерархияНоменклатурыПоставщика, ВидСравненияКомпоновкиДанных.Равно, "Родитель", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомСвойствВидаНоменклатуры

// Вызывается перед началом изменения значения свойства в дереве отбора по свойствам вида номенклатуры.
// 
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры, форма выбора, форма подбора.
//  Отказ - Булево - отказ.
//
Процедура ДеревоОтборовПередНачаломИзменения(Форма, Отказ) Экспорт
	
	Если Форма.ВариантНавигации = "ПоСвойствам" И Форма.ИспользоватьФильтры И Форма.НавигацияПоХарактеристикам 
		И Не Форма.Элементы.ДеревоОтборов.ТекущиеДанные.ОтборХарактеристик Тогда
		
		Отказ = Истина;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ПоискНаФормахПодбора

// Если используется полнотекстовый поиск, то функция проверяет актуальность индекса.
// Если индекс не актуален, то отображается диалог с предложением обновить индекс
// полнотекстового поиска. Если пользователь отказывается от обновления индекса,
// то все равно разрешается выполнить расширенный поиск, т.к. допускается что сведения
// касающие товаров часто не меняются.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма из которой выполняется вызов функции поиска.
//  ОписаниеОповещенияПриУспехе - ОписаниеОповещения - описание оповещения.
//
// Возвращаемое значение:
//	 Булево - Истина - выполнение поиска товаров возможно, Ложь - нет.
//
Процедура ВыполнениеРасширенногоПоискаВозможно(Форма, ОписаниеОповещенияПриУспехе = Неопределено) Экспорт
	
	// При включении флажка "Поиск по точному соответствию", выполняется неполнотекстовый поиск, 
	// соответственно, не нужно проверять актуальность индекса полнотекстового поиска.
	Если Форма.НайтиНоменклатуруПоТочномуСоответствию Тогда
		Если ОписаниеОповещенияПриУспехе <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриУспехе);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Проверка необходима только при использовании полнотекстового поиска.
	Если Не Форма.ИспользоватьПолнотекстовыйПоиск Тогда
		Если ОписаниеОповещенияПриУспехе <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриУспехе);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Форма.ИнформационнаяБазаФайловая И Не Форма.ИндексПолнотекстовогоПоискаАктуален Тогда
		ДополнительныеПараметры = Новый Структура("Форма, ОписаниеОповещенияПриУспехе", Форма, ОписаниеОповещенияПриУспехе);
		Оповещение = Новый ОписаниеОповещения("ВыполнениеРасширенногоПоискаВозможноПослеВопросаОбИндексах", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Индекс полнотекстового поиска неактуален. Обновить индекс?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ОписаниеОповещенияПриУспехе <> Неопределено Тогда
			ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриУспехе);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Продолжение предыдущей процедуры.
// Параметры:
//		Результат - КодВозвратаДиалога - ответ на вопрос.
//		ДополнительныеПараметры - Произвольный - доп. параметры.
Процедура ВыполнениеРасширенногоПоискаВозможноПослеВопросаОбИндексах(Результат, ДополнительныеПараметры) Экспорт
	
	Форма = ДополнительныеПараметры.Форма;
	ОписаниеОповещенияПриУспехе = ДополнительныеПараметры.ОписаниеОповещенияПриУспехе;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьИндексПолнотекстовогоПоиска();
		Форма.ИндексПолнотекстовогоПоискаАктуален = Истина;
	КонецЕсли;
	
	Если ОписаниеОповещенияПриУспехе <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриУспехе);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает флаг возврата функции выполнения поиска характеристик.
// Если поиск не был выполнен, то выводится предупреждение.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма из которой вызывалась функция поиска товаров по строке,
//	 ОтображатьПредупреждение - Булево - флаг отображения предупреждения, при неудачном поиске.
//
Процедура ПослеВыполненияПоискаХарактеристик(Форма, ОтображатьПредупреждение = Истина) Экспорт
	
	ПоискВыполнен = Не Форма.ПоискХарактеристикНеУдачный;
	КодОшибки = Форма.КодОшибкиПоиска;
	
	СтрокаПоиска = Форма.СтрокаПоискаХарактеристики;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не ПоискВыполнен И ОтображатьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено,ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки), 120, "Поиск");
		КонецЕсли;
        ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоискаХарактеристики.СписокВыбора, СтрокаПоиска, 21);
    КонецЕсли;
	
	// Установить текущий элемент формы.
	ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Если Не ПоискВыполнен Тогда
		ТекущийЭлемент = Форма.Элементы.СтрокаПоискаХарактеристики;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Обрабатывает флаг возврата функции выполнения поиска номенклатуры.
// Если поиск не был выполнен, то выводится предупреждение.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма из которой вызывалась функция поиска товаров по строке,
//	 ОтображатьПредупреждение - Булево - флаг отображения предупреждения, при неудачном поиске.
//
Процедура ПослеВыполненияПоискаНоменклатуры(Форма, ОтображатьПредупреждение = Истина) Экспорт
	
	ПоискВыполнен = Не Форма.ПоискНоменклатурыНеУдачный;
	КодОшибки = Форма.КодОшибкиПоиска;
	
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не ПоискВыполнен И ОтображатьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено,ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки), 120, "Поиск");
		КонецЕсли;
        ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоискаНоменклатура.СписокВыбора, СтрокаПоиска, 21);      
    КонецЕсли;
	
	// Установить текущий элемент формы.
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
		ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)];
	Иначе
		ТекущийЭлемент = Форма.Элементы["СписокРасширенныйПоискНоменклатура"];
	КонецЕсли;
	
	Если Не ПоискВыполнен Тогда
		ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатура;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Обрабатывает флаг возврата функции выполнения поиска номенклатуры.
// Если поиск не был выполнен, то выводится предупреждение.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма из которой вызывалась функция поиска товаров по строке,
//	 ОтображатьПредупреждение - Булево - флаг отображения предупреждения, при неудачном поиске.
//
Процедура ПослеВыполненияПоискаНоменклатурыПоставщика(Форма, ОтображатьПредупреждение = Истина) Экспорт
	
	ПоискВыполнен = Не Форма.ПоискНоменклатурыПоставщикаНеУдачный;
	КодОшибки = Форма.КодОшибкиПоиска;
	
	// Обновить список выбора значений у строки поиска.
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатураПоставщика;
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не ПоискВыполнен И ОтображатьПредупреждение Тогда
			ПоказатьПредупреждение(Неопределено,ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки), 120, "Поиск");
		КонецЕсли;
        ОбновитьСписокВыбора(Форма.Элементы.СтрокаПоискаНоменклатураПоставщика.СписокВыбора, СтрокаПоиска, 21);
    
    КонецЕсли;
	
	// Установить текущий элемент формы.
	ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоставщикаПоВариантуПоиска(Форма)];
	Если Не ПоискВыполнен Тогда
		ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатураПоставщика;
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Обновляет список выбора.
// Параметры:
//		СписокВыбора - СписокЗначений - список выбора.
//		СтрокаПоиска - Строка - строка поиска.
//		РазмерСпискаВыбора - Число - количество элементов в списке выбора.
Процедура ОбновитьСписокВыбора(СписокВыбора, СтрокаПоиска, РазмерСпискаВыбора = 1000) Экспорт
	
	// Удалим элемент из истории поиска если он там был
	НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	Пока НомерНайденногоЭлементаСписка <> Неопределено Цикл
		СписокВыбора.Удалить(НомерНайденногоЭлементаСписка);
		НомерНайденногоЭлементаСписка = СписокВыбора.НайтиПоЗначению(СтрокаПоиска);
	КонецЦикла;
	
	
	// И поставим его на первое место
	СписокВыбора.Вставить(0, СтрокаПоиска);
	Пока СписокВыбора.Количество() > РазмерСпискаВыбора Цикл
		СписокВыбора.Удалить(СписокВыбора.Количество() - 1);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокВыбора()


// Возвращает текст предупреждения по коду ошибки расширенного поиска.
//
// Параметры:
//	 КодОшибки - Строка - код ошибки расширенного поиска.
//
// Возвращаемое значение:
//	 Строка - текст предупреждения ошибки расширеннго поиска.
//
Функция ТекстПредупрежденияОшибкиРасширенногоПоиска(КодОшибки)
	
	Если КодОшибки = "НичегоНеНайдено" Тогда
		ТекстПредупреждения = НСтр("ru = 'Ничего не найдено, уточните запрос.'");
	ИначеЕсли КодОшибки = "СлишкомМногоРезультатов" Тогда
		ТекстПредупреждения = НСтр("ru = 'Слишком много результатов поиска, уточните запрос.'");
	ИначеЕсли КодОшибки = "ОшибкаПоиска" Тогда
		ТекстПредупреждения = НСтр("ru = 'При выполнении поиска произошла ошибка, попробуйте изменить выражение поиска.'");
	Иначе
		ТекстПредупреждения = "";
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

// Вызывает функцию обновления индекса полнотекстового поиска на сервере.
//
Процедура ОбновитьИндексПолнотекстовогоПоиска() Экспорт
	
	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	
	ПодборТоваровВызовСервера.ОбновитьИндексПолнотекстовогоПоиска();
	
	Состояние(НСтр("ru = 'Обновление индекса полнотекстового поиска завершено.'"));
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыНавигации

// Устанавливает текущую строку иерархии номенклатуры в формах списков номенклатуры и подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура УстановитьТекущуюСтрокуИерархииНоменклатуры(Форма) Экспорт
	
	Если Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	ТекущаяСтрока = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПодбора И Форма.НавигацияПоХарактеристикам Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ТекущиеДанные.Родитель Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ТекущиеДанные.Родитель;
	
КонецПроцедуры

// Устанавливает текущей страницу со списком номенклатуры.
// Используется в формах подборов (в документ продажи, закупки, чек ККМ).
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ПерейтиКСпискуНоменклатуры(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	Если Не ЭтоФормаПодбора Тогда
		Если ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
			УстановитьДоступностьЭлементовФильтров(Форма);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Форма.НавигацияПоХарактеристикам = Ложь;
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяТекущейСтраницыПоВариантуПоиска(Форма)];
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Ложь;
	
	УстановитьДоступностьЭлементовФильтров(Форма);
	
	Если ЗначениеЗаполнено(Форма.СтрокаПоискаНоменклатура) Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатура;
	Иначе
		Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)];
	КонецЕсли;
	
	Если Не ЭтоФормаЧекаККМ Тогда
		
		Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьНоменклатуру;
		
		Если Форма.ОтображатьОстатки Тогда
			Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает текущей страницу со списком характеристик.
// Используется при стандартном сценарии - когда выполняется выбор строки
// списка номенклатуры, и если по номенклатуре ведется учет характеристик,
// то выполняется переход к списку характеристик.
//
// Используется в формах подборов (в документах продажи, закупки, Чек ККМ).
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ПерейтиКСпискуХарактеристик(Форма) Экспорт
	
	// Очистить параметры новой номенклатуры, чтобы при добавлении новой характеристики
	// было можно понять, для какой номенклатуры добавляется характеристика.
	Форма.НоваяНоменклатура = Неопределено;
	
	ПриПереходеКСпискуХарактеристик(Форма, Форма.ТекущаяСтрокаНоменклатуры)
	
КонецПроцедуры

#КонецОбласти

#Область Прочие
// Процедура открывает форму просмотра цен товара. Используется в формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ЦеныНоменклатуры(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Номенклатура, Характеристика, Дата");
	
	СтрокаТаблицыНоменклатуры = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущиеДанные;
	
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Номенклатура = СтрокаТаблицыНоменклатуры.Ссылка;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		СтрокаТаблицыХарактеристик = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)].ТекущиеДанные;
		Если Не (СтрокаТаблицыХарактеристик = Неопределено) Тогда
			ПараметрыФормы.Характеристика = СтрокаТаблицыХарактеристик.Характеристика;
		КонецЕсли;	
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		
		ПараметрыФормы.Дата = Форма.Дата;
		ИмяОбработки = "ПодборТоваровВДокументЗакупки";
		
	ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма) Тогда
		
		ПараметрыФормы.Дата = Форма.Дата;
		ИмяОбработки = "ПодборТоваровВДокументПродажи";
		
	ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма) Тогда
		
		ПараметрыФормы.Дата = НачалоДня(Форма.Объект.Дата);
		ИмяОбработки = "ПомощникПродаж";
		
	КонецЕсли;
	
	ИмяФормы = "Обработка." + ИмяОбработки + ".Форма.ЦеныНоменклатуры";
	
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, Форма, ПараметрыФормы.Номенклатура);
	
КонецПроцедуры

// Процедура открывает форму карточки номенклатуры. Используется в формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ОткрытьКарточкуТовара(Форма) Экспорт
	
   
	
КонецПроцедуры

// Процедура вызывается при нажатии на информационную надпись - строку с информацией 
// о количестве и сумме подобранных товаров на формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 Объект - ОбработкаОбъект, ДокументОбъект - объект подбора.
//
Процедура ПриНажатииНаИнформационнуюНадпись(Форма, Объект) Экспорт
	
	Форма.ПоказыватьПодобранныеТовары = Не Форма.ПоказыватьПодобранныеТовары;
	Форма.Элементы.ОбластьПодобранныеТовары.Видимость = Форма.ПоказыватьПодобранныеТовары;
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПеретаскиваниеНаФормахПодбора

// Функция формирует параметры перетаскивания из списков номенлатуры,
// номенклатуры поставщика и характеристики номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//  Элемент - Элемент - элемент формы.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - параметры перетаскивания.
//
Процедура ПолучитьДанныеПеретаскивания(Форма, Элемент, ПараметрыПеретаскивания) Экспорт
	
	МассивПараметров = Новый Массив; 
	
	СтраницаХарактеристики = Ложь;
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		Если Форма.НавигацияПоХарактеристикам И Не Форма.НавигацияПоНоменклатуреПоставщика Тогда
			СтраницаХарактеристики = Истина;
		КонецЕсли;
	Иначе
		Если Форма.НавигацияПоХарактеристикам Тогда
			СтраницаХарактеристики = Истина;
		КонецЕсли; 
	КонецЕсли;
		
	Для каждого КлючСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(КлючСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ДанныеСтроки);
		
		Если СтраницаХарактеристики Тогда
			ЭтоТовар = Форма.ТекущаяСтрокаНоменклатуры.ЭтоТовар;
		Иначе 
			ЭтоТовар = ДанныеСтроки.ЭтоТовар;
		КонецЕсли;
		
		Если Не ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма) Тогда
			Если ЭтоТовар И Форма.Склады.Количество() = 1 И Форма.РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
				ПараметрыТовара.Склад = Форма.Склады.Получить(0).Значение;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		МассивПараметров.Добавить(ПараметрыТовара);
		
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = МассивПараметров;
	
КонецПроцедуры

// Функция формирует параметры перетаскивания из табличной части остатков
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//  Элемент - Элемент - элемент формы.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - параметры перетаскивания.
//
Процедура ПолучитьДанныеПеретаскиванияОстатков(Форма, Элемент, ПараметрыПеретаскивания) Экспорт
	
	МассивПараметров = Новый Массив; 
	
	ТекущаяСтрокаОснование = Форма.ТекущаяСтрокаНоменклатуры;
	
	Если Форма.НавигацияПоХарактеристикам Тогда
		ТекущаяСтрокаОснование = Форма.ТекущаяСтрокаХарактеристик;
	ИначеЕсли ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		Если Форма.НавигацияПоНоменклатуреПоставщика Тогда
			ТекущаяСтрокаОснование = Форма.ТекущаяСтрокаНоменклатурыПоставщика;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого КлючСтроки Из ПараметрыПеретаскивания.Значение Цикл
		
		ДанныеСтроки = Элемент.ДанныеСтроки(КлючСтроки);
		
		ПараметрыТовара = ПодборТоваровКлиентСервер.ПараметрыТовара();
		ПараметрыТовара.Вставить("НоменклатураПоставщика");
		
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ТекущаяСтрокаОснование);
		ЗаполнитьЗначенияСвойств(ПараметрыТовара, ДанныеСтроки);
		
		ПараметрыТовара.КоличествоУпаковок = 1;
		
		МассивПараметров.Добавить(ПараметрыТовара);
		
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = МассивПараметров;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаботаСДеревомСвойствВидаНоменклатуры

// Вызывается при переключении на страницу со списком характеристик.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 ПараметрыНоменклатуры - Структура - параметры номенклатуры, для 
//	     которой нужно переключиться на страницу со списком характеристик.
//
Процедура ПриПереходеКСпискуХарактеристик(Форма, ПараметрыНоменклатуры)
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	Форма.НавигацияПоХарактеристикам = Истина;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Характеристики: ""%1""'"), ПараметрыНоменклатуры.Номенклатура);
	
	ИмяЭлемента = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма) + "Характеристика";
	
	// Установить параметры списка характеристик.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "Номенклатура", ПараметрыНоменклатуры.Номенклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ЕдиницаИзмерения", ПараметрыНоменклатуры.ЕдиницаИзмерения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВладелецХарактеристик", ПараметрыНоменклатуры.ВладелецХарактеристик);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВидНоменклатуры", ПараметрыНоменклатуры.ВидНоменклатуры);
	
	Если Не ЭтоФормаЧекаККМ И Не ЭтоФормаПодбораВДокументыЗакупки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.СписокХарактеристики, "ЦеноваяГруппа", ПараметрыНоменклатуры.ЦеноваяГруппа);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "СегментНоменклатуры", 
		Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "НоменклатураСегмента", 
		ПараметрыНоменклатуры.Номенклатура, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	// Установить отбор списка характеристик по товарам продаваемым совместно.
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		МассивХарактеристик = Новый Массив;
		
		Для Каждого СтрокаТЧ Из Форма.ТаблицаНоменклатураПродаваемаяСовместно Цикл
			Если СтрокаТЧ.Номенклатура = ПараметрыНоменклатуры.Номенклатура Тогда
				МассивХарактеристик.Добавить(СтрокаТЧ.Характеристика);
			КонецЕсли;
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокХарактеристики, "Характеристика",
			МассивХарактеристик, ВидСравненияКомпоновкиДанных.ВСписке,, МассивХарактеристик.Количество() > 0);
			
	КонецЕсли;
	
	ИмяТекущейСтраницы = ПодборТоваровКлиентСервер.ИмяТекущейСтраницыПоВариантуПоиска(Форма);
	ТекущаяСтраница = Форма.Элементы[ИмяТекущейСтраницы];
	
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = ТекущаяСтраница;
	Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Истина;
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		ДоступностьСоздатьХарактеристику = (Форма.НавигацияПоХарактеристикам И Не Форма.НавигацияПоНоменклатуреПоставщика);
	Иначе
		ДоступностьСоздатьХарактеристику = Форма.НавигацияПоХарактеристикам;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "КоманднаяПанельСоздатьХарактеристику", "Доступность", ДоступностьСоздатьХарактеристику);
	
	Если Не ЭтоФормаЧекаККМ Тогда
		Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьХарактеристику;
	КонецЕсли;
	
	Если Форма.ОтображатьОстатки И Не ЭтоФормаЧекаККМ Тогда
		Форма.ПодключитьОбработчикОжидания("ПодборТаблицаПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);
	КонецЕсли;
	
	УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

// Устанавливает значения доступности элементов фильтров в зависимости от значения
// флажка использования фильтров.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьДоступностьЭлементовФильтров(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если Не ЭтоФормаВыбораХарактеристик Тогда
		Форма.Элементы.ВариантНавигации.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ИерархияНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ВидНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ВидНоменклатуры.АвтоОтметкаНезаполненного = Форма.ИспользоватьФильтры;
	КонецЕсли;
	
	Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		Форма.Элементы.НоменклатураИсходногоКачества.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.СписокКачества.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Форма.ИспользоватьФильтры;
	КонецЕсли;
	
	Форма.Элементы.ДеревоОтборовПредставление.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовОтбор.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовПредставлениеОтбора.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
