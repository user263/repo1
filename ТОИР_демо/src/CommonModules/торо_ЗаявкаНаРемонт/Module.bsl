////////////////////////////////////////////////////////////////////////////////
// торо_ЗаявкаНаРемонт: методы, для работы с документом "Смета ремонта (заявка на ремонтные работы).
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныеПроцедурыИФункции

// Процедура выполняет заполнение типовых затрат технологических операций.
//
// Параметры:
//  ДокументОбъект  – ДокументОбъект.торо_ЗаявкаНаРемонт – документ для которого
//                    необходимо заполнить типовые затраты.
//  СтрокаДерева    – СтрокаДереваЗначений – строка дерева ремонтных работ для
//                    которой заполняются типовые затраты.
//
Процедура ЗаполнитьТиповыеЗатратыТехнологическойОперации(РемонтныеРаботы, Объект, СтруктураСтрокаРодитель, Значение, РемонтыОборудования_ID = "") Экспорт
	
	
	СтрокаДерева = РемонтныеРаботы.Добавить();
	СтрокаДерева.ID                     = Новый УникальныйИдентификатор;
	СтрокаДерева.Родитель_ID            = СтруктураСтрокаРодитель.СтрокаРодитель_ID;
	СтрокаДерева.РемонтнаяРабота        = Значение;
	СтрокаДерева.Картинка               = торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(Значение);
	СтрокаДерева.Количество             = 1;
	СтрокаДерева.РемонтыОборудования_ID = ?(РемонтыОборудования_ID = "", СтруктураСтрокаРодитель.СтрокаРодительРемонтыОборудования_ID,РемонтыОборудования_ID);
	
	
	СтруктураСоответствияТЧ = Новый Структура;
	СтруктураСоответствияТЧ.Вставить("МатериальныеЗатраты", "МатериальныеЗатраты");
	СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты"    , "ТрудовыеЗатраты");
	СтруктураСоответствияТЧ.Вставить("ИнструментыИТехника", "Инструменты");
	
	
	// Формирование запроса
	СоответствиеНаимнованияТЧНомеруРезультатЗапроса = Новый Соответствие;
	НомерЗапроса = 0;
	
	Запрос = Новый Запрос;
	
	Для Каждого КлючИЗначение Из СтруктураСоответствияТЧ Цикл
		
		
		
		Если НомерЗапроса > 0 Тогда
			Запрос.Текст = Запрос.Текст + "
			|;
			|///////////////////////////////////////////////////////////////"
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ВЫБРАТЬ *
		|ИЗ
		|	Справочник.торо_ТехнологическиеОперации." + КлючИЗначение.Ключ + " КАК торо_ТехнологическиеОперации" + КлючИЗначение.Ключ + "
		|ГДЕ
		|	торо_ТехнологическиеОперации" + КлючИЗначение.Ключ + ".Ссылка = &Ссылка";
		
		СоответствиеНаимнованияТЧНомеруРезультатЗапроса.Вставить(КлючИЗначение.Ключ, НомерЗапроса);
		НомерЗапроса = НомерЗапроса + 1;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Ссылка", Значение);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Для Каждого КлючИЗначение Из СтруктураСоответствияТЧ Цикл	
		
		НомерЗапроса = СоответствиеНаимнованияТЧНомеруРезультатЗапроса.Получить(КлючИЗначение.Ключ);
		
		ТЧ = РезультатЗапроса[НомерЗапроса].Выгрузить();
		
		Для Каждого СтрокаТЧ Из ТЧ Цикл
			
			НовСтрокаТЧ    = Объект[КлючИЗначение.Значение].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, СтрокаТЧ);
			НовСтрокаТЧ.ID = СтрокаДерева.ID;
			НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаДерева.РемонтыОборудования_ID;
			
			Если КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
				
				НовСтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Упаковка;
				НовСтрокаТЧ.Количество = СтрокаТЧ.КоличествоУпаковок;
				
				Коэффициент = НовСтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
				
				Если Коэффициент = 0 Тогда
					Коэффициент = 1
				КонецЕсли;
				
				НовСтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.КоличествоУпаковок * Коэффициент;
			ИначеЕсли КлючИЗначение.Ключ = "ТрудоваеЗатраты"
				И Объект[КлючИЗначение.Значение].Колонки.Найти("ВремяРаботыТекст") Тогда 
				
				НовСтрокаТЧ.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(НовСтрокаТЧ.ВремяРаботы);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры 

// Определяет следующий статус документа относительно текущего по правилу
//
// Параметры:
//    УправлябщееПравило - ссылка на применяемое правило
//    ТекущийСтатусДокумента - статус документа.
//
// Возвращаемое значение:
//    следующий по правилу статус документа.
//
Функция ПолучитьСледующийСтатусНаОсновеПравила(УправляющееПравило, ТекущийСтатусДокумента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_МатрицаПереходаСтатусовДокументов.СпособСогласования,
	|	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус,
	|	торо_МатрицаПереходаСтатусовДокументов.СледующийСтатус
	|ИЗ
	|	РегистрСведений.торо_МатрицаПереходаСтатусовДокументов КАК торо_МатрицаПереходаСтатусовДокументов
	|ГДЕ
	|	торо_МатрицаПереходаСтатусовДокументов.СпособСогласования = &СпособСогласования
	|	И торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус = &ТекущийСтатус";
	
	Запрос.УстановитьПараметр("СпособСогласования", УправляющееПравило.Ссылка);
	Запрос.УстановитьПараметр("ТекущийСтатус", ТекущийСтатусДокумента);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
	
		Возврат Неопределено;
	
	КонецЕсли; 
	
	СписокСтатусов = Новый СписокЗначений;
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		СписокСтатусов.Добавить(Выборка.СледующийСтатус);
	
	КонецЦикла;
	
	Возврат СписокСтатусов;
	
КонецФункции  // ПолучитьСледующийСтатусНаОсновеПравила

// Функция получает из запроса по регистру накопления торо_УчетЭтаповРаботОстатки проценты невыполненных работ
// по элементам справочника торо_СоставРемонтныхРабот, которые выбранны в заявке
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт.
//  Возвращаемое значение:
//   выборка из запроса с элементами справочника торо_СоставРемонтныхРабот и процентом невыполнения их по заявке.
Функция СоздатьВыборкуРаботВЗаявкеСПроцентомРабот(Знач Заявка) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	торо_СоставРемонтныхРабот.Ссылка,
		|	ЕСТЬNULL(торо_УчетЭтаповРаботОстатки.ПроцентНевыполненныхРаботОстаток, 0) КАК ПроцентНевыполненныхРаботОстаток
		|ИЗ
		|	Справочник.торо_СоставРемонтныхРабот КАК торо_СоставРемонтныхРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_УчетЭтаповРабот.Остатки(, ЗаявкаНаРемонт = &Заявка) КАК торо_УчетЭтаповРаботОстатки
		|		ПО торо_СоставРемонтныхРабот.Заявка = торо_УчетЭтаповРаботОстатки.ЗаявкаНаРемонт
		|			И торо_СоставРемонтныхРабот.УникальныйИдентификатор = торо_УчетЭтаповРаботОстатки.УникальныйИдентификатор
		|ГДЕ
		|	торо_СоставРемонтныхРабот.Заявка = &Заявка
		|");
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции //СоздатьВыборкуРаботВЗаявкеСПроцентомРабот()

// Функция получает из запроса по регистру накопления торо_УчетЭтаповРаботОстатки проценты невыполненных работ
// по операции.
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//   УникальныйИдентификатор - уникальный идентификатор операции;
//	 ДокументОбъект - документ, который делает движения по регистру накопления торо_УчетЭтаповРаботОстатки.
//  Возвращаемое значение;
//   процент невыполнения.
Функция ПолучитьПроцентРаботНаПозициюДокумента(Знач Заявка, Знач УникальныйИдентификатор, Знач ДокументОбъект) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЕСТЬNULL(торо_УчетЭтаповРаботОстатки.ПроцентНевыполненныхРаботОстаток, 100) КАК ПроцентНевыполненныхРаботОстаток
	                      |ИЗ
	                      |	РегистрНакопления.торо_УчетЭтаповРабот.Остатки(
	                      |		&Период, ЗаявкаНаРемонт = &Заявка И УникальныйИдентификатор = &УникальныйИдентификатор) КАК торо_УчетЭтаповРаботОстатки
	                      |");
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("Период", Новый Граница(ДокументОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.ПроцентНевыполненныхРаботОстаток;
	КонецЕсли;
	Возврат 0;
КонецФункции //ПолучитьПроцентРаботНаПозициюДокумента()

// Функция получает из запроса по регистру накопления торо_УчетЭтаповРаботОстатки стоимость работ
// по операции.
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//   УникальныйИдентификатор - уникальный идентификатор операции;
//	 ДокументОбъект - документ, который делает движения по регистру накопления торо_УчетЭтаповРаботОстатки.
//  Возвращаемое значение;
//   стоимость.
Функция ПолучитьСуммуПоРаботеНаПозициюДокумента(Знач Заявка, Знач УникальныйИдентификатор, Знач ДокументОбъект) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	торо_УчетЭтаповРабот.Сумма КАК Стоимость,
		|	торо_УчетЭтаповРабот.ВидДвижения КАК ВидДвижения,
		|	торо_УчетЭтаповРабот.Период КАК Период,
		|	торо_УчетЭтаповРабот.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.торо_УчетЭтаповРабот КАК торо_УчетЭтаповРабот
		|ГДЕ
		|	ЗаявкаНаРемонт = &Заявка И УникальныйИдентификатор = &УникальныйИдентификатор
		|");
	
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Стоимость = 0;
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		Если Результат.ВидДвижения = ВидДвиженияНакопления.Расход 
			И ДокументОбъект.МоментВремени().Сравнить(Новый МоментВремени(Результат.Период, Результат.Регистратор)) = 1 Тогда
			Стоимость = Стоимость + Результат.Стоимость;
		КонецЕсли;
	КонецЦикла;
	Возврат Стоимость;
КонецФункции  //ПолучитьСуммуПоРаботеНаПозициюДокумента()

// Функция получает из запроса по регистру накопления торо_УчетЭтаповРаботОстатки признак выполнения 
// заявки.
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//   УникальныйИдентификатор - уникальный идентификатор операции;
//  Возвращаемое значение;
//   булево - признак выполнения заявки.
Функция НеобходимаПриходнаяЗаписьВУчетеЭтаповРабот(Знач Заявка, Знач УникальныйИдентификатор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	торо_УчетЭтаповРабот.ЗаявкаНаРемонт
		|ИЗ
		|	РегистрНакопления.торо_УчетЭтаповРабот КАК торо_УчетЭтаповРабот
		|ГДЕ
		|	торо_УчетЭтаповРабот.ЗаявкаНаРемонт = &Заявка
		|	И торо_УчетЭтаповРабот.ВидДвижения = &ВидДвижения
		|	И торо_УчетЭтаповРабот.ПроцентНевыполненныхРабот = 100
		|	И торо_УчетЭтаповРабот.УникальныйИдентификатор = &УникальныйИдентификатор
		|";
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Возврат Запрос.Выполнить().Пустой();
КонецФункции //НеобходимаПриходнаяЗаписьВУчетеЭтаповРабот()

// Функция предназначена для проверки закрытия операции документом торо_АктОВыполненииЭтапаРабот при проведении
// другого документа торо_АктОВыполненииЭтапаРабот.
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт, в котором была установлены операция;
//   УникальныйИдентификатор - уникальный идентификатор операции;
//   Документ - ссылка на текущий документ торо_АктОВыполненииЭтапаРабот.
//  Возвращаемое значение:
//   Булево - признак закрытия операции другим документом торо_АктОВыполненииЭтапаРабот.
Функция ЭтаОперацияСодержитсяВАктеОВыполненииЭтапаРаботНаПозициюДокумента(Знач Заявка, Знач УникальныйИдентификатор, Знач Документ) Экспорт
	
	МоментПроверки = ?(ЗначениеЗаполнено(Документ), Документ.МоментВремени(), Новый МоментВремени(ТекущаяДата()));

	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	торо_ОперацииАктовОВыполненииЭтаповРабот.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрСведений.торо_ОперацииАктовОВыполненииЭтаповРабот КАК торо_ОперацииАктовОВыполненииЭтаповРабот
		|ГДЕ
		|	торо_ОперацииАктовОВыполненииЭтаповРабот.ЗаявкаНаРемонт = &Заявка
		|	И торо_ОперацииАктовОВыполненииЭтаповРабот.УникальныйИдентификатор = &УникальныйИдентификатор
		|	И торо_ОперацииАктовОВыполненииЭтаповРабот.Регистратор <> &Регистратор
		|"
	);
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.МоментВремени().Сравнить(МоментПроверки) = 1 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции // ЭтаОперацияСодержитсяВАктеОВыполненииЭтапаРаботНаПозициюДокумента()

// Функция предназаначена для получения из запроса документа торо_АктОВыполненииЭтапаРабот, которым осуществлялись
// движения по текущей операции по регистру сведений торо_ОперацииАктовОВыполненииЭтаповРабот.
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//   УникальныйИдентификатор - уникальный идентификатор текущей операции;
//   Документ - текущий документ торо_АктОВыполненииЭтапаРабот, движения которого не надо учитывать .
//  Возвращаемое значение:
//   ссылка на документ торо_АктОВыполненииЭтапаРабот.
Функция НайтиАктОВыполненииЭтапаРаботНаПозициюДокументаПоОперации(Знач Заявка, Знач УникальныйИдентификатор, Знач Документ) Экспорт
	Запрос = Новый Запрос("ВЫБРАТЬ
	  |	ВЫРАЗИТЬ(торо_ОперацииАктовОВыполненииЭтаповРабот.Регистратор КАК Документ.торо_АктОВыполненииЭтапаРабот) КАК Ссылка
	  |ИЗ
	  |	РегистрСведений.торо_ОперацииАктовОВыполненииЭтаповРабот КАК торо_ОперацииАктовОВыполненииЭтаповРабот
	  |ГДЕ
	  |	торо_ОперацииАктовОВыполненииЭтаповРабот.ЗаявкаНаРемонт = &Заявка
	  |	И торо_ОперацииАктовОВыполненииЭтаповРабот.УникальныйИдентификатор = &УникальныйИдентификатор
	  |	И торо_ОперацииАктовОВыполненииЭтаповРабот.Регистратор <> &Регистратор
	  |	И торо_ОперацииАктовОВыполненииЭтаповРабот.Регистратор ССЫЛКА Документ.торо_АктОВыполненииЭтапаРабот"
	);
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Запрос.УстановитьПараметр("Регистратор", Документ);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.МоментВремени().Сравнить(Документ.МоментВремени()) = 1 Тогда
			Возврат Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Документы.торо_АктОВыполненииЭтапаРабот.ПустаяСсылка();
КонецФункции //НайтиАктОВыполненииЭтапаРаботНаПозициюДокументаПоОперации()

// Функция предназаначена для получения из запроса документа
// торо_НарядНаВыполнениеРемонтныхРабот, которым осуществлялись
// движения по текущей операции по регистру сведений торо_ОперацииНарядов.
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//   УникальныйИдентификатор - уникальный идентификатор текущей операции;
//   ИсключаемыйНаряд - текущий документ торо_НарядНаВыполнениеРемонтныхРабот, движения которого не надо учитывать.
//  Возвращаемое значение:
//   ссылка на документ торо_НарядНаВыполнениеРемонтныхРабот.
Функция НайтиНарядПоОперации(Знач ЗаявкаНаРемонт, Знач УникальныйИдентификатор, Знач ИсключаемыйНаряд) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫРАЗИТЬ(торо_ОперацииНарядов.Регистратор КАК Документ.торо_НарядНаВыполнениеРемонтныхРабот) КАК Наряд
		|ИЗ
		|	РегистрСведений.торо_ОперацииНарядов КАК торо_ОперацииНарядов
		|ГДЕ
		|	торо_ОперацииНарядов.Регистратор ССЫЛКА Документ.торо_НарядНаВыполнениеРемонтныхРабот
		|	И торо_ОперацииНарядов.УникальныйИдентификатор = &УникальныйИдентификатор
		|	И торо_ОперацииНарядов.ЗаявкаНаРемонт = &ЗаявкаНаРемонт
		|	И ВЫРАЗИТЬ(торо_ОперацииНарядов.Регистратор КАК Документ.торо_НарядНаВыполнениеРемонтныхРабот) <> &ИсключаемыйНаряд
		|");
	Запрос.УстановитьПараметр("ЗаявкаНаРемонт", ЗаявкаНаРемонт);
	Запрос.УстановитьПараметр("ИсключаемыйНаряд", ИсключаемыйНаряд);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", УникальныйИдентификатор);
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Наряд;
	КонецЕсли;
	Возврат Документы.торо_НарядНаВыполнениеРемонтныхРабот.ПустаяСсылка();
КонецФункции //НайтиНарядПоОперации()

// Функция проверяет занятость исполнителя на дату текущей заявки
//  Параметры:
//   Исполнитель - текущей исполнитель, справочник ФизическиеЛица;
//   Документ - текущая заявка, ссылка на документ торо_ЗаявкаНаРемонт.
//  Возвращаемое значение:
//   булево - признак занятости исполнителя в заявке.
Функция ЭтотИсполнительЗанятНаПозициюДокумента(Знач Исполнитель, Знач Документ) Экспорт
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
	    |	торо_ЗанятостьИсполнителейОстатки.ЗаявкаНаРемонт КАК ЗаявкаНаРемонт
	    |ИЗ
	    |	РегистрНакопления.торо_ЗанятостьИсполнителей.Остатки(&Период, Исполнитель = &Исполнитель) КАК торо_ЗанятостьИсполнителейОстатки
	    |"
	);
	Запрос.УстановитьПараметр("Период", Документ.МоментВремени());
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции //ЭтотИсполнительЗанятНаПозициюДокумента()

// Функция определяет наличие связанного с заявкой проведенного документа торо_АктОВыполненииРабот
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//   ИсключаемыйДокумент - документ, который не надо проверять.
//   ТолькоПроведенный - булево, признак проведения документа.
//  Возвращаемое значение:
//   булево - признак наличия связанного с заявкой проведенного документа торо_АктОВыполненииРабот.
Функция ПолучитьАктОВыполненииРемонтныхРаботСвязанныйСЗаявкой(Знач Заявка, Знач ИсключаемыйДокумент = Неопределено, Знач ТолькоПроведенный) Экспорт
	Возврат ПолучитьСвязанныйСЗаявкойДокумент(Заявка, "торо_АктОВыполненииЭтапаРабот", ИсключаемыйДокумент, ТолькоПроведенный);
КонецФункции //ПолучитьАктОВыполненииРемонтныхРаботСвязанныйСЗаявкой()

// Функция определяет наличие связанного с заявкой документа торо_НарядНаВыполнениеРемонтныхРабот
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//  Возвращаемое значение:
//   булево - признак наличия связанного с заявкой документа торо_НарядНаВыполнениеРемонтныхРабот.
Функция ЕстьНарядНаВыполнениеРемонтныхРаботСвязанныйСЗаявкой(Знач Заявка) Экспорт
	Возврат ЕстьСвязанныйСЗаявкойДокумент(Заявка, "торо_НарядНаВыполнениеРемонтныхРабот");
КонецФункции //ЕстьНарядНаВыполнениеРемонтныхРаботСвязанныйСЗаявкой()

// Функция определяет наличие связанного с заявкой документа торо_АктОВыполненииЭтапаРабот
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//  Возвращаемое значение:
//   булево - признак наличия связанного с заявкой документа торо_АктОВыполненииЭтапаРабот.
Функция ЕстьАктОВыполненииЭтапаРемонтныхРаботСвязанныйСЗаявкой(Знач Заявка) Экспорт
	Возврат ЕстьСвязанныйСЗаявкойДокумент(Заявка, "торо_АктОВыполненииЭтапаРабот");
КонецФункции //ЕстьАктОВыполненииЭтапаРемонтныхРаботСвязанныйСЗаявкой()

// Функция проверяет наличие проведенного документа торо_АктОВыполненииРабот, созданный после текущего документа
// торо_АктОВыполненииРабот.
//  Параметры:
//   Акт - текущий документ торо_АктОВыполненииРабот.
//  Возвращаемое значение:
//   булево - признак наличия документа.
Функция ЕстьАктОВыполненииРемонтныхРаботСозданныйПослеАкта(Знач Акт) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	торо_АктОВыполненииЭтапаРабот.ЗаявкаНаРемонт
	               |ИЗ
	               |	Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииРабот КАК торо_АктОВыполненииРабот
	               |		ПО торо_АктОВыполненииЭтапаРабот.МоментВремени < торо_АктОВыполненииРабот.МоментВремени
	               |			И торо_АктОВыполненииЭтапаРабот.ЗаявкаНаРемонт = торо_АктОВыполненииРабот.ЗаявкаНаРемонт
	               |ГДЕ
	               |	торо_АктОВыполненииЭтапаРабот.Ссылка = &Акт
	               |	И торо_АктОВыполненииРабот.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Акт", Акт);
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции //ЕстьАктОВыполненииРемонтныхРаботСозданныйПослеАкта()

// Функция возвращает список документов торо_НарядНаВыполнениеРемонтныхРабот, созданных на основании заявки и 
// момент времени которых меньше текущего документа наряда.
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт, на основании которой сделан текущий документ;
//   Документ - текущий документ торо_НарядНаВыполнениеРемонтныхРабот.
//  Возвращаемое значение:
//   список значений с ссылками на документы торо_НарядНаВыполнениеРемонтныхРабот.
Функция СоздатьСписокНарядовЗаявкиНаПозициюДокумента(Знач Заявка, Знач Документ) Экспорт
	Список = Новый СписокЗначений;	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРабот.ЗаявкаНаРемонт = &Заявка
		|");
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.МоментВремени().Сравнить(Документ.МоментВремени()) = -1
			И Выборка.Ссылка <> Документ Тогда
			Список.Добавить(Выборка.Ссылка);	
		КонецЕсли;
	КонецЦикла;
	Возврат Список;
КонецФункции //СоздатьСписокНарядовЗаявкиНаПозициюДокумента()

// Функция возвращает список документов торо_АктОВыполненииЭтапаРабот, созданных на основании заявки и 
// момент времени которых меньше текущего документа акта.
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт, на основании которой сделан текущий документ;
//   Документ - текущий документ торо_АктОВыполненииЭтапаРабот.
//  Возвращаемое значение:
//   список значений с ссылками на документы торо_АктОВыполненииЭтапаРабот. 
Функция СоздатьСписокАктовОВыполненииРаботЗаявкиНаПозициюДокумента(Знач Заявка, Знач Документ) Экспорт
	Список = Новый СписокЗначений;	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	торо_АктОВыполненииЭтапаРабот.Ссылка
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
		|ГДЕ
		|	торо_АктОВыполненииЭтапаРабот.НарядНаРемонт.ЗаявкаНаРемонт = &Заявка
		|");
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка.МоментВремени().Сравнить(Документ.МоментВремени()) = -1
			И Выборка.Ссылка <> Документ Тогда
			Список.Добавить(Выборка.Ссылка);	
		КонецЕсли;
	КонецЦикла;
	Возврат Список;
КонецФункции //СоздатьСписокАктовОВыполненииРаботЗаявкиНаПозициюДокумента()

// Функция возвращает список исполнителей текущей заявки
//  Параметры:
//   ЗаявкаНаРемонт - текущая заявка, ссылка на документ торо_ЗаявкаНаРемонт.
//  Возвращаемое значение:
//   список значений ссылками на элементы справочника ФизическиеЛица.
Функция СоздатьСписокИсполнителейЗаявки(Знач ЗаявкаНаРемонт) Экспорт
	
	Результат = Новый СписокЗначений;	
	
	Для Каждого Стр Из ЗаявкаНаРемонт.ИсполнителиРемонтов Цикл
		Результат.Добавить(Стр.Исполнитель);	
	КонецЦикла;
	Возврат Результат;
	
КонецФункции //СоздатьСписокИсполнителейЗаявки()

// Процедура выполняет заполнение затрат по данным нормативов.
//
Процедура ЗаполнитьЗатратыПоТиповым(ДокументОбъект, СтрокаДерева, ID) Экспорт
	
	РемонтнаяРабота = СтрокаДерева.Родитель.РемонтнаяРабота;
	
	Если РемонтнаяРабота = Неопределено Или ID = "" Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	СтруктураТЧ = Новый Структура();
	СтруктураТЧ.Вставить("МатериальныеЗатраты", "МатериальныеЗатраты");
	СтруктураТЧ.Вставить("ТрудовыеЗатраты", "ТрудовыеЗатраты");
	СтруктураТЧ.Вставить("ИнструментыИТехника", "Инструменты");
	СтруктураТЧ.Вставить("МерыБезопасности", "МерыБезопасности");
	
	Для Каждого КлючИЗначение Из СтруктураТЧ Цикл
		
		ТабЧастьДокумента = ДокументОбъект[КлючИЗначение.Значение];
		МассивСтрок   = РемонтнаяРабота[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", ID));
		
	    Для Каждого ЭлМассива Из МассивСтрок Цикл
		
			НовСтрокаТЧ = ТабЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, ЭлМассива); 
			НовСтрокаТЧ.ID = СтрокаДерева.ID;
			НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаДерева.РемонтыОборудования_ID;
	 
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция возвращает признак наличия сформированных заявок по таблице ID.
//
// Параметры
//  ТаблицаID  - ТаблицаЗначений - содержит ID для проверки.
//
// Возвращаемое значение:
//   Булево   - признак наличия сформированных заявок.
//
Функция ЕстьЗаявкаПоТаблицеID(ТаблицаID, Проверка=Ложь, ТолькоПроведенные=Ложь) Экспорт
	
	ЕстьЗаявки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таблица_ID.ID
	               |ПОМЕСТИТЬ ТаблицаID
	               |ИЗ
	               |	&Таблица_ID КАК Таблица_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонт.Представление
	               |ИЗ
	               |	ТаблицаID КАК ТаблицаID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	               |		ПО ТаблицаID.ID = торо_ЗаявкаНаРемонт.ID_СтрокиДокументаОснования
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонт.ПометкаУдаления = ЛОЖЬ"
	+?(ТолькоПроведенные," И торо_ЗаявкаНаРемонт.Проведен","");
	
	Запрос.УстановитьПараметр("Таблица_ID", ТаблицаID);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		ЕстьЗаявки = Истина;
		
		Если не Проверка Тогда 
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'По работам плана-графика ППР были сформированы документы!'"), СтатусСообщения.Важное);
			
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Выборка.Представление);
				
			КонецЦикла;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат ЕстьЗаявки;
	
КонецФункции // ЕстьЗаявкаПоСтрокеПланаГрафикаППР()

// Функция получает из запроса документ по заданным параметрам.
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//   ИмяТипаДокумента - тип документа;
//   ИсключаемыйДокумент - документ, который не надо выбирать;
//   ТолькоПроведенный - признак проведения документа
//  Возвращаемое значение;
//   ссылка на документ.
Функция ПолучитьСвязанныйСЗаявкойДокумент(Знач Заявка, Знач ИмяТипаДокумента, Знач ИсключаемыйДокумент = Неопределено, Знач ТолькоПроведенный = Истина)
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	" + ИмяТипаДокумента + ".Ссылка
		|ИЗ
		|	Документ." + ИмяТипаДокумента + ".ДокументыОснования КАК " + ИмяТипаДокумента + "
		|ГДЕ
		|	" + ИмяТипаДокумента + ".ДокументОснование = &Заявка"
		+ ?(ТолькоПроведенный, "	И " + ИмяТипаДокумента + ".Проведен = ИСТИНА", "")
		+ "	И " + ИмяТипаДокумента + ".Ссылка <> &ИсключаемыйДокумент"
	);
	Запрос.УстановитьПараметр("Заявка", Заявка);
	Запрос.УстановитьПараметр("ИсключаемыйДокумент", ИсключаемыйДокумент);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;	
	Возврат Неопределено;
КонецФункции //ПолучитьСвязанныйСЗаявкойДокумент()

// Функция определяет наличие связанного с заявкой документа
//  Параметры:
//   Заявка - ссылка на документ торо_ЗаявкаНаРемонт;
//   ИмяТипаДокумента - тип документа, связь с заявкой которого определяется;
//   ИсключаемыйДокумент - документ, который не надо проверять.
//  Возвращаемое значение:
//   булево - признак наличия связанного с заявкой документа.
Функция ЕстьСвязанныйСЗаявкойДокумент(Знач Заявка, Знач ИмяТипаДокумента, Знач ИсключаемыйДокумент = Неопределено)
	Возврат ПолучитьСвязанныйСЗаявкойДокумент(Заявка, ИмяТипаДокумента, ИсключаемыйДокумент) <> Неопределено;
КонецФункции //ЕстьСвязанныйСЗаявкойДокумент()

#КонецОбласти
