////////////////////////////////////////////////////////////////////////////////
// торо_РаботаСИерархией: методы, для работы с иерархиями
//
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьСтруктуруДанныхПоОбъектуРемонта(ОбъектРемонта, СтруктураИерархии, СтруктураПараметровФормы) Экспорт
	
	Если СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		               |ПОМЕСТИТЬ РасположениеОР
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		               |			,
		               |			СтруктураИерархии = &СтруктураИерархии
		               |				И Удален = ЛОЖЬ
		               |				И ОбъектИерархии = &ОбъектРемонта) КАК торо_ИерархическиеСтруктурыОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
		               |ПОМЕСТИТЬ ТабБезПорядка
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		               |ГДЕ
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии = &ОбъектРемонта
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	РасположениеОР.ОбъектИерархии,
		               |	РасположениеОР.СтруктураИерархии,
		               |	РасположениеОР.РодительИерархии
		               |ИЗ
		               |	РасположениеОР КАК РасположениеОР
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабБезПорядка.ОбъектИерархии КАК Ссылка,
		               |	КОЛИЧЕСТВО(торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии) КАК КоличествоПодчиненных
		               |ПОМЕСТИТЬ ОРСКоличествомВложенных
		               |ИЗ
		               |	ТабБезПорядка КАК ТабБезПорядка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархии
		               |		ПО ТабБезПорядка.ОбъектИерархии = торо_РасположениеОРВСтруктуреИерархии.РодительИерархии
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТабБезПорядка.ОбъектИерархии
		               |
		               |ИМЕЮЩИЕ
		               |	КОЛИЧЕСТВО(торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии) > 0
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабБезПорядка.ОбъектИерархии,
		               |	ТабБезПорядка.СтруктураИерархии,
		               |	ТабБезПорядка.РодительИерархии,
		               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР,
		               |	ВЫБОР
		               |		КОГДА ТабБезПорядка.ОбъектИерархии ССЫЛКА Справочник.торо_ОбъектыРемонта
		               |			ТОГДА ВЫБОР
		               |					КОГДА торо_ОбъектыРемонта.ЭтоГруппа
		               |						ТОГДА ВЫБОР
		               |								КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		               |									ТОГДА 6
		               |								ИНАЧЕ 5
		               |							КОНЕЦ
		               |					ИНАЧЕ ВЫБОР
		               |							КОГДА ОРСКоличествомВложенных.Ссылка ЕСТЬ NULL 
		               |								ТОГДА ВЫБОР
		               |										КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		               |											ТОГДА 1
		               |										ИНАЧЕ 0
		               |									КОНЕЦ
		               |							ИНАЧЕ ВЫБОР
		               |									КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		               |										ТОГДА 3
		               |									ИНАЧЕ 2
		               |								КОНЕЦ
		               |						КОНЕЦ
		               |				КОНЕЦ
		               |		ИНАЧЕ 4
		               |	КОНЕЦ КАК ИндексКартинки,
		               |	ВЫБОР
		               |		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL 
		               |			ТОГДА 1
		               |		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы
		               |			ТОГДА 0
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК ЕстьФайлы,
		               |	торо_ОбъектыРемонта.Код,
					   |	торо_ОбъектыРемонта.Организация,
					   |	торо_ОбъектыРемонта.Ссылка КАК Наименование,
		               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
		               |	торо_ОбъектыРемонта.ЗаводскойНомер,
		               |	торо_ОбъектыРемонта.ТехНомер,
		               |	торо_ОбъектыРемонта.ПометкаУдаления,
		               |	торо_ОбъектыРемонта.НеУчаствуетВПланировании,
		               |	ВЫРАЗИТЬ(торо_ОбъектыРемонта.Комментарий КАК СТРОКА(1000)) КАК Комментарий
					   |	%ТекстДляСозданияВТ1%
		               |ИЗ
		               |	ТабБезПорядка КАК ТабБезПорядка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
		               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ОРСКоличествомВложенных КАК ОРСКоличествомВложенных
		               |		ПО ТабБезПорядка.ОбъектИерархии = ОРСКоличествомВложенных.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
		               |		ПО торо_ОбъектыРемонта.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами
		               |ГДЕ
		               |	ТабБезПорядка.ОбъектИерархии = &ОбъектРемонта";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		               |ПОМЕСТИТЬ РасположениеОР
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		               |	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии = &ОбъектРемонта
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
		               |ПОМЕСТИТЬ ТабБезПорядка
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасположениеОР КАК РасположениеОР
		               |		ПО торо_ИерархическиеСтруктурыОР.РодительИерархии = РасположениеОР.ОбъектИерархии
		               |			И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = РасположениеОР.СтруктураИерархии
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	РасположениеОР.ОбъектИерархии,
		               |	РасположениеОР.СтруктураИерархии,
		               |	РасположениеОР.РодительИерархии
		               |ИЗ
		               |	РасположениеОР КАК РасположениеОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабБезПорядка.ОбъектИерархии КАК ОбъектИерархии,
		               |	ТабБезПорядка.СтруктураИерархии КАК СтруктураИерархии,
		               |	ТабБезПорядка.РодительИерархии КАК РодительИерархии
		               |ПОМЕСТИТЬ ВТ_ТабБезПорядка
		               |ИЗ
		               |	ТабБезПорядка КАК ТабБезПорядка
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии,
		               |	СтруктураИерархии,
		               |	РодительИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ОбъектыРемонтаГруппы.ОбъектИерархии КАК ОбъектИерархии
		               |ПОМЕСТИТЬ ВТ_Группы
		               |ИЗ
		               |	РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТабБезПорядка КАК ВТ_ТабБезПорядка
		               |		ПО торо_ОбъектыРемонтаГруппы.ОбъектИерархии = ВТ_ТабБезПорядка.ОбъектИерархии
		               |			И (торо_ОбъектыРемонтаГруппы.СтруктураИерархии = &СтруктураИерархии)
		               |			И (торо_ОбъектыРемонтаГруппы.ОбъектГруппа)
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабБезПорядка.ОбъектИерархии,
		               |	ТабБезПорядка.СтруктураИерархии,
		               |	ТабБезПорядка.РодительИерархии,
		               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР,
		               |	ВЫБОР
		               |		КОГДА ТабБезПорядка.ОбъектИерархии ССЫЛКА Справочник.торо_ОбъектыРемонта
		               |			ТОГДА ВЫБОР
		               |					КОГДА торо_ОбъектыРемонта.ЭтоГруппа
		               |						ТОГДА ВЫБОР
		               |								КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		               |									ТОГДА 6
		               |								ИНАЧЕ 5
		               |							КОНЕЦ
		               |					ИНАЧЕ ВЫБОР
		               |							КОГДА ВТ_Группы.ОбъектИерархии ЕСТЬ NULL 
		               |								ТОГДА ВЫБОР
		               |										КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		               |											ТОГДА 1
		               |										ИНАЧЕ 0
		               |									КОНЕЦ
		               |							ИНАЧЕ ВЫБОР
		               |									КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		               |										ТОГДА 3
		               |									ИНАЧЕ 2
		               |								КОНЕЦ
		               |						КОНЕЦ
		               |				КОНЕЦ
		               |		ИНАЧЕ 4
		               |	КОНЕЦ КАК ИндексКартинки,
		               |	ВЫБОР
		               |		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL 
		               |			ТОГДА 1
		               |		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы
		               |			ТОГДА 0
		               |		ИНАЧЕ 1
		               |	КОНЕЦ КАК ЕстьФайлы,
		               |	торо_ОбъектыРемонта.Код,
					   |	торо_ОбъектыРемонта.Организация,
					   |	торо_ОбъектыРемонта.Ссылка КАК Наименование,
		               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
		               |	торо_ОбъектыРемонта.ЗаводскойНомер,
		               |	торо_ОбъектыРемонта.ТехНомер,
		               |	торо_ОбъектыРемонта.ПометкаУдаления,
		               |	торо_ОбъектыРемонта.НеУчаствуетВПланировании,
		               |	ВЫРАЗИТЬ(торо_ОбъектыРемонта.Комментарий КАК СТРОКА(1000)) КАК Комментарий
				   	   |	%ТекстДляСозданияВТ1%					   
		               |ИЗ
		               |	ВТ_ТабБезПорядка КАК ТабБезПорядка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
		               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
		               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонтаГруппы.ОбъектИерархии
		               |			И ТабБезПорядка.СтруктураИерархии = торо_ОбъектыРемонтаГруппы.СтруктураИерархии
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Группы КАК ВТ_Группы
		               |		ПО ТабБезПорядка.ОбъектИерархии = ВТ_Группы.ОбъектИерархии
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
		               |		ПО торо_ОбъектыРемонта.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами
		               |ГДЕ
		               |	ТабБезПорядка.ОбъектИерархии = &ОбъектРемонта";
		
	КонецЕсли;	
				   
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Запрос.УстановитьПараметр("ОбъектРемонта"    , ОбъектРемонта);
	Справочники.торо_ОбъектыРемонта.ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос, СтруктураПараметровФормы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СписокИменКолонок = "";
	ЭтоПерваяКолонка = Истина;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Для Каждого Колонка ИЗ РезультатЗапроса.Колонки Цикл
			Если ЭтоПерваяКолонка Тогда
				СписокИменКолонок = Колонка.Имя;
				ЭтоПерваяКолонка = Ложь;
				Продолжить;
			КонецЕсли; 
			СписокИменКолонок = СписокИменКолонок + "," + Колонка.Имя;
		КонецЦикла;
		
		Выборка  = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		СтруктураВозврата = Новый Структура(СписокИменКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураВозврата, Выборка);
		
		МассивРодителей = Новый Массив;
		ЗаполнитьМассивРодителейОбъектаРемонта(ОбъектРемонта, МассивРодителей, СтруктураИерархии);
		
		СтруктураВозврата.Вставить("МассивРодителей", МассивРодителей);
		
		Возврат СтруктураВозврата;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции                                                                                         

Процедура ЗаполнитьМассивРодителейОбъектаРемонта(ОбъектРемонта, МассивРодителей, ТекСтруктураИерархии) Экспорт
	
	ЭлементРодитель = ПолучитьТекущихРодителейВИерархии(ОбъектРемонта, ТекСтруктураИерархии);
	
	Если ТипЗнч(ЭлементРодитель[ОбъектРемонта]) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	МассивРодителей.Добавить(ЭлементРодитель[ОбъектРемонта]);
	ЗаполнитьМассивРодителейОбъектаРемонта(ЭлементРодитель[ОбъектРемонта], МассивРодителей, ТекСтруктураИерархии);
	
КонецПроцедуры

Процедура ЗаполнитьМассивРодителейОбъектаРемонта_Исправленный(ОбъектРемонта, МассивРодителей, ТекСтруктураИерархии) Экспорт
	
	ЭлементРодитель = ПолучитьТекущегоРодителяВИерархии(ОбъектРемонта, ТекСтруктураИерархии);
	
	Если ЭлементРодитель[ОбъектРемонта] <> "<>" и ТипЗнч(ЭлементРодитель[ОбъектРемонта]) = Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	МассивРодителей.Добавить(ЭлементРодитель[ОбъектРемонта]);
	ЗаполнитьМассивРодителейОбъектаРемонта_Исправленный(ЭлементРодитель[ОбъектРемонта], МассивРодителей, ТекСтруктураИерархии);
	
КонецПроцедуры

// Функция возвращает список всех используемых иерархий.
//	Параметры:
//		ИсключаемаяИерархия - СправочникСсылка.торо_СтруктурыОР - если заполнено, то эта иерархия не выводится в список.
// Возвращаемое значение:
//		СписокЗначений - список иерархий.
Функция ПолучитьСписокИерархий(ИсключаемаяИерархия = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_СтруктурыОР.Ссылка,
	|	торо_СтруктурыОР.Наименование
	|ИЗ
	|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|ГДЕ
	|	торо_СтруктурыОР.ПометкаУдаления = ЛОЖЬ";
	
	Если ИсключаемаяИерархия <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + " И торо_СтруктурыОР.Ссылка <> &СтруктураИерархии";
		Запрос.УстановитьПараметр("СтруктураИерархии", ИсключаемаяИерархия);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокСтруктурОР = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СписокСтруктурОР.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
		
	КонецЦикла;
	
	Возврат СписокСтруктурОР;
КонецФункции

// Функция возвращает текущего ОДНОГО родителя для каждого переданного ОР 
// (в соответствии где ключом является передданый ОР/ОРЫ).
Функция ПолучитьТекущегоРодителяВИерархии(ОР, СтруктураИерархии, ДатаСреза = Неопределено) Экспорт
	
	ИзменяетсяДокументами = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СтруктураИерархии,"ИзменяетсяДокументами");
	АвтоматическаяИерархия = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СтруктураИерархии,"СтроитсяАвтоматически");
	
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если АвтоматическаяИерархия Тогда
		
		СтруктураПараметровИерархии = Новый Структура;
		СтруктураПараметровИерархии.Вставить("ТипРеквизитаОР", СтруктураИерархии.ТипРеквизитаОР);
		СтруктураПараметровИерархии.Вставить("РеквизитОР", СтруктураИерархии.РеквизитОР);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
		               |	торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" КАК РодительИерархии,
		               |	ЛОЖЬ КАК Удален
		               |ИЗ
		               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |ГДЕ
		               |	торо_ОбъектыРемонта.Ссылка = &ОР
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	Справочник.Ссылка,
		               |	Справочник.Родитель,
		               |	ЛОЖЬ
		               |ИЗ
		               |	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК Справочник
		               |ГДЕ
		               |	Справочник.Ссылка = &ОР";
					   
		Запрос.УстановитьПараметр("ОР", ОР);
		
		Если НЕ Метаданные.Справочники[СтруктураПараметровИерархии.ТипРеквизитаОР].Иерархический тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "	Справочник.Родитель", "Null как Родитель");
		КонецЕсли;
		
	ИначеЕсли ИзменяетсяДокументами Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			&Дата,
		|			ОбъектИерархии = &ОР
		|				И СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних";
		Запрос.УстановитьПараметр("Дата", ДатаСреза);
		Запрос.УстановитьПараметр("ОР", ОР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		|	ЛОЖЬ КАК Удален,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии = &ОР";
		Запрос.УстановитьПараметр("Дата", ДатаСреза);
		Запрос.УстановитьПараметр("ОР", ОР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	КонецЕсли;
	СоответствиеВозврата = Новый Соответствие;
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	СтрокаИерархии = ТЗ.Найти(ОР,"ОбъектИерархии");
	Если СтрокаИерархии <> Неопределено
		И НЕ СтрокаИерархии.Удален Тогда
		
		Если АвтоматическаяИерархия Тогда
			Если ТипЗнч(СтрокаИерархии.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") и НЕ ЗначениеЗаполнено(СтрокаИерархии.РодительИерархии) Тогда
				СоответствиеВозврата.Вставить(СтрокаИерархии.ОбъектИерархии, "<>");
			ИначеЕсли ЗначениеЗаполнено(СтрокаИерархии.РодительИерархии) Тогда
				СоответствиеВозврата.Вставить(СтрокаИерархии.ОбъектИерархии,СтрокаИерархии.РодительИерархии);
			Иначе
				СоответствиеВозврата.Вставить(СтрокаИерархии.ОбъектИерархии,"Корневая группа");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(СтрокаИерархии.РодительИерархии) Тогда
				СоответствиеВозврата.Вставить(СтрокаИерархии.ОбъектИерархии,СтрокаИерархии.РодительИерархии);
			Иначе
				СоответствиеВозврата.Вставить(СтрокаИерархии.ОбъектИерархии,"Корневая группа");
			КонецЕсли;
		КонецЕсли;			
	Иначе
		СоответствиеВозврата.Вставить(ОР,"Внесен в структуру иерархии");
	КонецЕсли;
		
	
	Возврат СоответствиеВозврата;
	
КонецФункции

// Функция возвращает соответствие текущих родителей ОР в иерархии.
Функция ПолучитьТекущихРодителейВИерархии(ЗНАЧ МассивОР,СтруктураИерархии,ДатаСреза = Неопределено, КореньВетки = Неопределено) Экспорт
	
	Если ТипЗнч(МассивОР) <> Тип("Массив") Тогда
		ВыбранноеЗначение = МассивОР;
		МассивОР = Новый Массив;
		МассивОР.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	ИзменяетсяДокументами = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СтруктураИерархии,"ИзменяетсяДокументами");
	АвтоматическаяИерархия = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СтруктураИерархии,"СтроитсяАвтоматически");
	
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если АвтоматическаяИерархия Тогда
		
		СтруктураПараметровИерархии = Новый Структура;
		СтруктураПараметровИерархии.Вставить("ТипРеквизитаОР", СтруктураИерархии.ТипРеквизитаОР);
		СтруктураПараметровИерархии.Вставить("РеквизитОР", СтруктураИерархии.РеквизитОР);
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Справочник.Ссылка КАК Ссылка,
		|	Справочник.Родитель
		|ПОМЕСТИТЬ ВТ_Справочник
		|ИЗ
		|	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК Справочник
		|ГДЕ
		|	&КореньВетки = ""<>""
		|	или Справочник.Ссылка В ИЕРАРХИИ(&КореньВетки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ОбъектыРемонта.Ссылка,
		|	торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" КАК Родитель
		|ПОМЕСТИТЬ ВТ_ОР
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник
		|		ПО торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" = ВТ_Справочник.Ссылка
		|ГДЕ
		|	НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|	И торо_ОбъектыРемонта.Ссылка в (&МассивОР)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОР.Ссылка КАК ОбъектИерархии,
		|	ВТ_ОР.Родитель КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Финальная
		|ИЗ
		|	ВТ_ОР КАК ВТ_ОР
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Справочник.Ссылка,
		|	ВТ_Справочник.Родитель
		|ИЗ
		|	ВТ_Справочник КАК ВТ_Справочник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Финальная.ОбъектИерархии,
		|	ВТ_Финальная.РодительИерархии,
		|	Ложь как Удален
		|ИЗ
		|	ВТ_Финальная КАК ВТ_Финальная";
		
		Если Метаданные.Справочники[СтруктураПараметровИерархии.ТипРеквизитаОР].Реквизиты.найти("Родитель") = Неопределено тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "	Справочник.Родитель", "Null как Родитель");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("КореньВетки", КореньВетки);
		Запрос.УстановитьПараметр("МассивОР", МассивОР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	
	ИначеЕсли ИзменяетсяДокументами Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			&Дата,
		|			ОбъектИерархии В (&МассивОР)
		|				И СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних";
		Запрос.УстановитьПараметр("Дата", ДатаСреза);
		Запрос.УстановитьПараметр("МассивОР", МассивОР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		|	ЛОЖЬ КАК Удален,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии В (&МассивОР)";
		Запрос.УстановитьПараметр("Дата", ДатаСреза);
		Запрос.УстановитьПараметр("МассивОР", МассивОР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	КонецЕсли;
	ТЗ = Запрос.Выполнить().Выгрузить();
	СоответствиеВозврата = Новый Соответствие;
		
	Для Каждого ОР Из МассивОР Цикл
		СтрокаИерархии = ТЗ.Найти(ОР,"ОбъектИерархии");
		Если СтрокаИерархии <> Неопределено
			И НЕ СтрокаИерархии.Удален Тогда
			Если ЗначениеЗаполнено(СтрокаИерархии.РодительИерархии) Тогда
				СоответствиеВозврата.Вставить(СтрокаИерархии.ОбъектИерархии,СтрокаИерархии.РодительИерархии);
			Иначе
				СоответствиеВозврата.Вставить(СтрокаИерархии.ОбъектИерархии,"Корневая группа");
			КонецЕсли;
		Иначе
			СоответствиеВозврата.Вставить(ОР,"Внесен в структуру иерархии");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ПолучитьСписокОРдляАльтернативныхИерархий(МассивОР) Экспорт
	
	МассивОРОР = Новый Массив;
	МассивОРНеОР = Новый Массив;
	Для каждого текОР из МассивОР Цикл
		Если ТипЗнч(текОР) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			МассивОРОР.Добавить(текОР);
		Иначе 
			МассивОРНеОР.Добавить(текОР.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК Потомок
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка В(&МассивПотомков_ОР)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Наименование В(&МассивНаименований)";
				   
	Запрос.УстановитьПараметр("МассивПотомков_ОР", МассивОРОР);
	Запрос.УстановитьПараметр("МассивНаименований", МассивОРНеОР);
				   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выгрузить();
	
	Возврат Выборка.ВыгрузитьКолонку("Потомок");
	
КонецФункции

// Функция возвращает соответствие ОР + ТекущийРодитель, которые уже есть в выбранной иерархии
// "Подчиненные" (булево) - если истина, то проверяются не только переданные ОР, но и все вложенные.
Функция ПроверитьЕстьЛиВыбранныеЗначенияВИерархии(МассивВыбранныхОР, СтруктураИерархииПриемник, Подчиненные = Ложь, СтруктураИерархииРодитель = Неопределено,  ДатаСреза = Неопределено) Экспорт
	
	Если ТипЗнч(МассивВыбранныхОР) <> Тип("Массив") Тогда
		ВыбранноеЗначение = МассивВыбранныхОР;
		МассивВыбранныхОР = Новый Массив;
		МассивВыбранныхОР.Добавить(ВыбранноеЗначение);
	КонецЕсли;
	
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	
	Если Подчиненные И ЗначениеЗаполнено(СтруктураИерархииРодитель) Тогда
		
		ТаблицаИерархииРодителя = ПолучитьТаблицуИерархии(СтруктураИерархииРодитель,ДатаСреза);
		ТаблицаИерархииРодителя.Колонки.Добавить("ИскомоеЗначение",Новый ОписаниеТипов("Булево"));
		
		Для Каждого ОР Из МассивВыбранныхОР Цикл
			ОтметитьПодчиненные(ОР,ТаблицаИерархииРодителя);
		КонецЦикла;
		
		Для Каждого СтрокаОР Из ТаблицаИерархииРодителя Цикл
			Если СтрокаОР.ИскомоеЗначение Тогда
				МассивВыбранныхОР.Добавить(СтрокаОР.ОбъектИерархии);
			Конецесли;
		КонецЦикла;
		
	КонецЕсли;
	
	МассивВыбранныхОР_параметр = ПолучитьСписокОРдляАльтернативныхИерархий(МассивВыбранныхОР);
	
	Если СтруктураИерархииПриемник.СтроитсяАвтоматически Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Справочник.Ссылка КАК Ссылка,
		|	Справочник.Родитель
		|ПОМЕСТИТЬ ВТ_Справочник
		|ИЗ
		|	Справочник."+СтруктураИерархииПриемник.ТипРеквизитаОР+" КАК Справочник
		|ГДЕ
		|	&КореньВетки = ""<>""
		|	или Справочник.Ссылка В ИЕРАРХИИ(&КореньВетки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ОбъектыРемонта.Ссылка,
		|	торо_ОбъектыРемонта."+СтруктураИерархииПриемник.РеквизитОР+" КАК Родитель
		|ПОМЕСТИТЬ ВТ_ОР
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник
		|		ПО торо_ОбъектыРемонта."+СтруктураИерархииПриемник.РеквизитОР+" = ВТ_Справочник.Ссылка
		|ГДЕ
		|	НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|	И торо_ОбъектыРемонта.Ссылка в (&МассивОР)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОР.Ссылка КАК ОбъектИерархии,
		|	ВТ_ОР.Родитель КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Финальная
		|ИЗ
		|	ВТ_ОР КАК ВТ_ОР
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Справочник.Ссылка,
		|	ВТ_Справочник.Родитель
		|ИЗ
		|	ВТ_Справочник КАК ВТ_Справочник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Финальная.ОбъектИерархии,
		|	ВТ_Финальная.РодительИерархии,
		|	Ложь как Удален
		|ИЗ
		|	ВТ_Финальная КАК ВТ_Финальная";
		
		Если Метаданные.Справочники[СтруктураИерархииПриемник.ТипРеквизитаОР].Реквизиты.найти("Родитель") = Неопределено тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "	Справочник.Родитель", "Null как Родитель");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("МассивОР", МассивВыбранныхОР_параметр);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархииПриемник);
	
	ИначеЕсли НЕ СтруктураИерархииПриемник.ИзменяетсяДокументами Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
			|	торо_ИерархическиеСтруктурыОР.РодительИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			|	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии В (&ОбъектыИерархии)";		
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии,
			|	торо_РасположениеОРВСтруктуреИерархии.РодительИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&ДатаСреза, ) КАК торо_РасположениеОРВСтруктуреИерархии
			|ГДЕ
			|	торо_РасположениеОРВСтруктуреИерархии.СтруктураИерархии = &СтруктураИерархии
			|	И торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии В(&ОбъектыИерархии)";
			
		Запрос.УстановитьПараметр("ДатаСреза",ДатаСреза);
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ОбъектыИерархии", МассивВыбранныхОР_параметр);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархииПриемник);
	
	РезультатЗапроса = Запрос.Выполнить();
	СоответствиеВозврата = Новый Соответствие;
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СоответствиеВозврата.Вставить(ВыборкаДетальныеЗаписи.ОбъектИерархии,ВыборкаДетальныеЗаписи.РодительИерархии);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

Функция ПолучитьТаблицуИерархии(СтруктураИерархии, ДатаСреза = Неопределено, БезУдаленныхИзИерархии=Ложь) Экспорт
	
	Если ДатаСреза = Неопределено Тогда
		
		ДатаСреза = ТекущаяДата();
		
	КонецЕсли;
	
	Запрос = Новый Запрос;	
	Если СтруктураИерархии.СтроитсяАвтоматически Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Справочник.Ссылка КАК Ссылка,
		|	Справочник.Родитель
		|ПОМЕСТИТЬ ВТ_Справочник
		|ИЗ
		|	Справочник."+СтруктураИерархии.ТипРеквизитаОР+" КАК Справочник
		|ГДЕ
		|	&КореньВетки = ""<>""
		|	или Справочник.Ссылка В ИЕРАРХИИ(&КореньВетки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка,
		|	торо_ОбъектыРемонта."+СтруктураИерархии.РеквизитОР+" КАК Родитель
		|ПОМЕСТИТЬ ВТ_ОР
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник
		|		ПО торо_ОбъектыРемонта."+СтруктураИерархии.РеквизитОР+" = ВТ_Справочник.Ссылка
		|ГДЕ
		|	НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОР.Ссылка КАК ОбъектИерархии,
		|	ВТ_ОР.Родитель КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Финальная
		|ИЗ
		|	ВТ_ОР КАК ВТ_ОР
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВТ_Справочник.Ссылка,
		|	ВТ_Справочник.Родитель
		|ИЗ
		|	ВТ_Справочник КАК ВТ_Справочник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Финальная.ОбъектИерархии,
		|	ВТ_Финальная.РодительИерархии,
		|	Ложь как Удален
		|ИЗ
		|	ВТ_Финальная КАК ВТ_Финальная";
		
		Если Метаданные.Справочники[СтруктураИерархии.ТипРеквизитаОР].Реквизиты.найти("Родитель") = Неопределено тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "	Справочник.Родитель", "Null как Родитель");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);	
	ИначеЕсли СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархии.Период,
		|	торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархии.РодительИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&ДатаСреза, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархии
		|";
		
		Если БезУдаленныхИзИерархии Тогда
			Запрос.Текст = Запрос.Текст+"
			|ГДЕ	НЕ торо_РасположениеОРВСтруктуреИерархии.Удален";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ДатаСреза",ДатаСреза);
	Иначе                                                       
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает массив иерархий, в которых есть ОР. Есть возможность исключения одной иерархии.
Функция ПолучитьМассивИерархийОР(ОбъектИерархии, ИсключаемаяИерархия = Неопределено,ДатаСреза = Неопределено) Экспорт
	
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&Дата,ОбъектИерархии = &ОбъектИерархии И НЕ Удален !ДопУсловие1) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии = &ОбъектИерархии
		|	!ДопУсловие2";

	Запрос.УстановитьПараметр("ОбъектИерархии", ОбъектИерархии);
	Запрос.УстановитьПараметр("Дата",ТекущаяДата());
	Если ИсключаемаяИерархия <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"!ДопУсловие1","И СтруктураИерархии <> &ИсключаемаяИерархия");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"!ДопУсловие2","И торо_ИерархическиеСтруктурыОР.СтруктураИерархии <> &ИсключаемаяИерархия");
		Запрос.УстановитьПараметр("ИсключаемаяИерархия", ИсключаемаяИерархия);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"!ДопУсловие1","");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"!ДопУсловие2","");
	КонецЕсли;
	
	МассивВозврата = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		МассивВозврата.Добавить(Выборка.СтруктураИерархии);
		
	КонецЦикла;
	
	Возврат МассивВозврата;

КонецФункции

Функция ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии,СтруктураПараметровФормы) Экспорт
	
	Возврат Справочники.торо_ОбъектыРемонта.ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии,СтруктураПараметровФормы);
	
КонецФункции

Процедура ПеренестиЭлементыВКореньИерархии(МассивОР,СтруктураИерархии,ИзменяетсяДокументами,МассивУдаляемых = Неопределено) Экспорт

	Справочники.торо_ОбъектыРемонта.ПеренестиЭлементыВКореньИерархии(МассивОР,СтруктураИерархии,ИзменяетсяДокументами,МассивУдаляемых);
	
КонецПроцедуры

Процедура ПолучитьМассивПодчиненныхНаСервере(Ссылка,Массив,СтруктураИерархии,ИзменяетсяДокументами, ПоВсемИерархиям = Ложь) Экспорт
	
	Справочники.торо_ОбъектыРемонта.ПолучитьМассивПодчиненныхНаСервере(Ссылка,Массив,СтруктураИерархии,ИзменяетсяДокументами, ПоВсемИерархиям);
	
КонецПроцедуры

Функция ПолучитьСписокПодчиненныхОбъектов(СтруктураПараметровИерархии,РодительИерархии = Неопределено,СтруктураПараметровФормы) Экспорт
	
	Возврат Справочники.торо_ОбъектыРемонта.ПолучитьСписокПодчиненныхОбъектов(СтруктураПараметровИерархии,РодительИерархии,СтруктураПараметровФормы);
	
КонецФункции

Процедура ОбработатьВыборОРНаСервере(ВыбранноеЗначение,ТекущийОР,ТекСтруктураИерархии,РодительТекущего = Неопределено,РодительДобавляемогоЭлемента = Неопределено, ИерархияИсточник = Неопределено, КореньВетки = Неопределено) Экспорт
	
	Справочники.торо_ОбъектыРемонта.ОбработатьВыборОРНаСервере(ВыбранноеЗначение,ТекущийОР,ТекСтруктураИерархии,РодительТекущего,РодительДобавляемогоЭлемента, ИерархияИсточник, КореньВетки);
	
Конецпроцедуры

Процедура ИзменитьПоложениеВИерархии(Ссылка, СтруктураИерархии, НовоеПоложение, РодительДляГруппы) Экспорт
	
	Справочники.торо_ОбъектыРемонта.ИзменитьПоложениеВИерархии(Ссылка, СтруктураИерархии, НовоеПоложение, РодительДляГруппы);
	
КонецПроцедуры

Процедура ЗаполнитьДопПоляСпискаОбъектовСервере(МассивСтруктурОР) Экспорт
	
	СписокОбъектовРемонта = Новый Массив;
	Для каждого ТекСтрока из МассивСтруктурОР Цикл
		Если ТипЗнч(ТекСтрока.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда		
			СписокОбъектовРемонта.Добавить(ТекСтрока.ОбъектИерархии);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ОбъектыРемонта.Ссылка,
	|	торо_ОбъектыРемонта.Организация,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НаличиеПрисоединенныхФайлов.ЕстьФайлы, ЛОЖЬ)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьФайлы
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
	|		ПО торо_ОбъектыРемонта.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка В(&СписокОбъектовРемонта)";
	
	Запрос.УстановитьПараметр("СписокОбъектовРемонта", СписокОбъектовРемонта);

	ТаблицаДопПолей = Запрос.Выполнить().Выгрузить();
	ТаблицаДопПолей.Индексы.Добавить("Ссылка");
	
	Для каждого ТекСтрока из МассивСтруктурОР Цикл
		Если ТипЗнч(ТекСтрока.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда		
			СтрокаДопПолей = ТаблицаДопПолей.Найти(ТекСтрока.ОбъектИерархии, "Ссылка");
			Если СтрокаДопПолей <> Неопределено Тогда
				ТекСтрока.Вставить("Организация",СтрокаДопПолей.Организация);
				ТекСтрока.Вставить("ЕстьФайлы",СтрокаДопПолей.ЕстьФайлы);
			Иначе
				ТекСтрока.Вставить("ЕстьФайлы",1);
			КонецЕсли;
		Иначе
			ТекСтрока.Вставить("ЕстьФайлы",1);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция НайтиРодителейУзловВИерархии(Иерархия, МассивУзлов, КореньВетки = Неопределено) Экспорт
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("Ключ", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	тз.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	Для каждого текСтрока из МассивУзлов цикл
		нс = тз.Добавить();
		нс.Ключ = текСтрока;
	КонецЦикла;
	
	Если Иерархия = Неопределено или МассивУзлов.Количество() = 0 Тогда
		Возврат тз;
	КонецЕсли;
	
	СоответствиеВыборка = ПолучитьТекущихРодителейВИерархии(МассивУзлов, Иерархия, Неопределено, КореньВетки);
	
	Возврат ?(СоответствиеВыборка.Количество() = 0, тз, СоответствиеВыборка);
	
КонецФункции

Функция ПолучитьСоздатьОР(ОР, Создавать = Истина) Экспорт
	Если ТипЗнч(ОР) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		Если ОР = Неопределено Тогда
			НаименованиеОР = Строка(ОР);
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОР)) Тогда
			НаименованиеОР = Строка(ОР) + " (" + ОР.Код + ")";
		Иначе
			НаименованиеОР = Строка(ОР);
		КонецЕсли;		
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ОбъектыРемонта.Ссылка
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|ГДЕ
		|	торо_ОбъектыРемонта.Наименование = &Наименование
		|	И торо_ОбъектыРемонта.ЭтоГруппа = ИСТИНА";
					   
		Запрос.УстановитьПараметр("Наименование", НаименованиеОР);
		резЗапроса = Запрос.Выполнить();
		Если НЕ резЗапроса.Пустой() Тогда
			Выборка = резЗапроса.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
		Если Создавать Тогда
			НоваяГруппаОР = Справочники.торо_ОбъектыРемонта.СоздатьГруппу();
			НоваяГруппаОР.Наименование = НаименованиеОР;
			НоваяГруппаОР.Записать();
			Возврат НоваяГруппаОР.Ссылка;
		Иначе
			Возврат "";
		КонецЕсли;
	Иначе 
		Возврат ОР;
	КонецЕсли;		
КонецФункции

// Функция - Является группой.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.торо_ОбъектыРемонта - ссылка которую нужно проверить является ли группой.
// Возвращаемое значение:
//  Булево - значение свойства ЭтоГруппа.
Функция ЯвляетсяГруппой(Ссылка) Экспорт
	
	Возврат Ссылка.ЭтоГруппа;
	
КонецФункции

Функция ПолучитьКоличествоПодчиненныхОРВСтруктуреИерархии(РодительИерархии, СтруктураИерархии) Экспорт
	
	ИзменяетсяДокументами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураИерархии, "ИзменяетсяДокументами");
	
	Запрос = Новый Запрос;
	
	Если ИзменяетсяДокументами = Истина Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии) КАК Количество
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии = &РодительИерархии";
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(торо_ИерархическиеСтруктурыОР.ОбъектИерархии) КАК Количество
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Запрос.УстановитьПараметр("РодительИерархии", РодительИерархии);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Количество;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции
/////////////////////////////////////
//// ОбработчикиСобытийЭлементовФормОР

// ПометкаУдаления
Процедура ПометитьНаУдалениеНаСервере(Ссылка,ЕстьПодчиненные,ПометкаУдаления,ТекСтруктураИерархии) Экспорт
	
	Объект = Ссылка.ПолучитьОбъект();
	Объект.ПометкаУдаления = ПометкаУдаления;
	Попытка
		Объект.Записать();
		Справочники.торо_ОбъектыРемонта.ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(Ссылка,ТекСтруктураИерархии,ЕстьПодчиненные);
	Исключение
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось пометить объект на удаление по причине: '")+ИнформацияОбОшибке());
	КонецПопытки
	
КонецПроцедуры


// УдалениеИзИерархии

Процедура УдалитьПорядокЭлементаИзРегистра(ОбъектИерархии,ТекСтруктураИерархии) Экспорт
	
	Справочники.торо_ОбъектыРемонта.УдалитьПорядокЭлементаИзРегистра(ОбъектИерархии,ТекСтруктураИерархии);
	
КонецПроцедуры

Процедура ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ОР,ТекСтруктураИерархии,ЭтоГруппа) Экспорт
		
	Справочники.торо_ОбъектыРемонта.ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ОР,ТекСтруктураИерархии,ЭтоГруппа);
	
КонецПроцедуры

Функция ЭтоОсновнаяИерархия(ТекСтруктураИерархии) Экспорт
	Возврат Константы.торо_ИерархияДляВводаНовыхОР.Получить() = ТекСтруктураИерархии;	
КонецФункции

Функция ПометитьОбъектРемонтаНаСервере(ОбъектСсылка) Экспорт
	
	НачатьТранзакцию();
	
	ОбъектРемонта = ОбъектСсылка.ПолучитьОбъект();
	ОбъектРемонта.ПометкаУдаления = Истина;
	ОбъектУдален = Истина;
	
	Попытка
		ОбъектРемонта.Записать();
	Исключение
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не удалось установить пометку удаления.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина
	
КонецФункции

Процедура ИзменитьПоложениеВИерархииЗавершениеНаСервере(Ссылка,ТекСтруктураИерархии,ВыбранноеЗначение, РодительИерархии) Экспорт
	
	Справочники.торо_ОбъектыРемонта.ИзменитьПоложениеВИерархии(Ссылка,ТекСтруктураИерархии,ВыбранноеЗначение, РодительИерархии);
	
КонецПроцедуры

//// ОбработчикиСобытийЭлементовФормОР

// Функция - Добавить элемент в иерархию
//
// Параметры:
//  Элемент	- СправочникСсылка.торо_ОбъектыРемонта - добавляемый элемент.
//  Родитель - СправочникСсылка.торо_ОбъектыРемонта - куда добавляются элементы.
//  Иерархия - СправочникСсылка.торо_СтруктураОР - структура в которую происходит добавление.
//  ПредыдущееПоложение - СправочникСсылка.торо_ОбъектыРемонта или строка - 
//  имеет смысл только для иерархий, которые изменяются документами.
Процедура ДобавитьЭлементВИерархию(Элемент, Родитель, Иерархия, ПредыдущееПоложение = Неопределено) Экспорт
	
	Если Иерархия.СтроитсяАвтоматически или Не ЗначениеЗаполнено(Элемент) Тогда
		возврат;
	КонецЕсли;
	
	Если Иерархия.ИзменяетсяДокументами Тогда
		докОбъект = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
		докОбъект.Дата = ТекущаяДата();
		докОбъект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация", Истина);
		докОбъект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновноеПодразделение", Истина);		
		докОбъект.Ответственный = Пользователи.ТекущийПользователь();
		докОбъект.СтруктураИерархии = Иерархия;
		
		нс = докОбъект.ПоложенияВСтруктуреИерархии.Добавить();
		нс.ОбъектИерархии = Элемент;
		нс.ПредыдущееПоложение = ?(ПредыдущееПоложение=Неопределено, "Добавление в структуру иерархии.", ПредыдущееПоложение);
		нс.РодительИерархии = Родитель;
		
		докОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Иначе
		МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ОбъектИерархии     = Элемент;
		МенеджерЗаписи.СтруктураИерархии  = Иерархия;
		МенеджерЗаписи.РодительИерархии   = Родитель;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(Элемент, Иерархия, Ложь);
	
КонецПроцедуры

// Функция - Добавить дерево в иерархию.
//
// Параметры:
//  Дерево - ТаблицаЗначений или ДеревоЗначений - добавляемые элементы (вариант с деревом не тестировался, 
//  следует использовать с осторожностью).
//  Родитель - СправочникСсылка.торо_ОбъектыРемонта - куда добавляются элементы.
//  Иерархия - СправочникСсылка.торо_СтруктураОР - иерархия в которую происходит добавление.
//	 ОбновитьРегистрСГруппами - Булево - если истина вызывается процедура обнволеняи регистра "торо_ОбъектыРемонтаГруппы", 
//    если планируется добавить несколько веток подряд
//		то оптимальнее будет вызвать процедуру обновления дерева после добавления всех веток вручную.
Процедура ДобавитьВеткуВИерархию(Дерево, Родитель, Иерархия, ОбновитьРегистрСГруппами = Истина) Экспорт
	
	Если Иерархия.СтроитсяАвтоматически или Не ЗначениеЗаполнено(Дерево) Тогда
		возврат;
	КонецЕсли;
	
	тзНовыеЭлементы = Новый ТаблицаЗначений;
	тзНовыеЭлементы.Колонки.Добавить("ОбъектИерархии", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	тзНовыеЭлементы.Колонки.Добавить("РодительИерархии", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	тзНовыеЭлементы.Колонки.Добавить("СтруктураИерархии", Новый ОписаниеТипов("СправочникСсылка.торо_СтруктурыОР"));
	тзНовыеЭлементы.Колонки.Добавить("ЭтоГруппа", Новый ОписаниеТипов("Булево"));	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	МассивТипов.Добавить(Тип("Строка"));
	тзНовыеЭлементы.Колонки.Добавить("ПредыдущееПоложение", Новый ОписаниеТипов(МассивТипов,,,Новый КвалификаторыСтроки(50)));
	
	Если типЗнч(Дерево) = Тип("ДеревоЗначений") Тогда
		ДобавитьЭлементыИзДерева(Дерево, Родитель, тзНовыеЭлементы, Иерархия);
	Иначе
		ДобавитьЭлементыИзТаблицы(Дерево, Родитель, тзНовыеЭлементы, Иерархия);
	КонецЕсли;
	
	Если Иерархия.ИзменяетсяДокументами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсхДанные.ОбъектИерархии КАК ОбъектИерархии,
		               |	ИсхДанные.РодительИерархии,
		               |	ИсхДанные.СтруктураИерархии,
		               |	ИсхДанные.ЭтоГруппа,
		               |	ИсхДанные.ПредыдущееПоложение
		               |ПОМЕСТИТЬ Вт_ИсхДанные
		               |ИЗ
		               |	&Таб КАК ИсхДанные
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален
		               |ПОМЕСТИТЬ Вт_Регистр
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&Период, СтруктураИерархии = &СИ) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		               |ГДЕ
		               |	НЕ торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Вт_ИсхДанные.ОбъектИерархии,
		               |	Вт_ИсхДанные.РодительИерархии,
		               |	Вт_ИсхДанные.СтруктураИерархии,
		               |	Вт_ИсхДанные.ЭтоГруппа,
		               |	ЕСТЬNULL(Вт_Регистр.РодительИерархии, ""Добавление в структуру иерархии."") КАК ПредыдущееПоложение,
		               |	ВЫБОР
		               |		КОГДА Вт_Регистр.РодительИерархии ЕСТЬ NULL 
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК НовыеЭлементы
		               |ИЗ
		               |	Вт_ИсхДанные КАК Вт_ИсхДанные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Вт_Регистр КАК Вт_Регистр
		               |		ПО Вт_ИсхДанные.ОбъектИерархии = Вт_Регистр.ОбъектИерархии";
			   
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Запрос.УстановитьПараметр("СИ", Иерархия);
		Запрос.УстановитьПараметр("Таб", тзНовыеЭлементы);
		
		тзНовыеЭлементы = Запрос.Выполнить().Выгрузить();
		
		докОбъект = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
		докОбъект.Дата = ТекущаяДата();
		докОбъект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация", Истина);
		докОбъект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновноеПодразделение", Истина);		
		докОбъект.Ответственный = Пользователи.ТекущийПользователь();
		докОбъект.СтруктураИерархии = Иерархия;
		
		Для каждого текСтрока из тзНовыеЭлементы Цикл
			нс = докОбъект.ПоложенияВСтруктуреИерархии.Добавить();
			нс.ОбъектИерархии = текСтрока.ОбъектИерархии;
			нс.РодительИерархии = текСтрока.РодительИерархии;
			нс.ПредыдущееПоложение = текСтрока.ПредыдущееПоложение;
		КонецЦикла;
		
		тзНовыеЭлементы = тзНовыеЭлементы.Скопировать(Новый структура("НовыеЭлементы", Истина));
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ИсхДанные.ОбъектИерархии КАК ОбъектИерархии,
		               |	ИсхДанные.РодительИерархии,
		               |	ИсхДанные.СтруктураИерархии,
		               |	ИсхДанные.ЭтоГруппа
		               |ПОМЕСТИТЬ Вт_ИсхДанные
		               |ИЗ
		               |	&Таб КАК ИсхДанные
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
		               |ПОМЕСТИТЬ ВТ_Регистр
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СИ
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЫРАЗИТЬ(Вт_ИсхДанные.ОбъектИерархии КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектИерархии,
		               |	ВЫРАЗИТЬ(Вт_ИсхДанные.РодительИерархии КАК Справочник.торо_ОбъектыРемонта) КАК РодительИерархии,
		               |	Вт_ИсхДанные.СтруктураИерархии,
		               |	Вт_ИсхДанные.ЭтоГруппа,
		               |	ВЫБОР
		               |		КОГДА ВТ_Регистр.ОбъектИерархии ЕСТЬ NULL 
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ПредПоложение
		               |ПОМЕСТИТЬ ВТ_ФинДанные
		               |ИЗ
		               |	Вт_ИсхДанные КАК Вт_ИсхДанные
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Регистр КАК ВТ_Регистр
		               |		ПО Вт_ИсхДанные.ОбъектИерархии = ВТ_Регистр.ОбъектИерархии
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ФинДанные.ОбъектИерархии,
		               |	ВТ_ФинДанные.РодительИерархии,
		               |	ВТ_ФинДанные.СтруктураИерархии,
		               |	ВТ_ФинДанные.ЭтоГруппа,
		               |	"""" КАК ПредыдущееПоложение
		               |ИЗ
		               |	ВТ_ФинДанные КАК ВТ_ФинДанные
		               |ГДЕ
		               |	ВТ_ФинДанные.ПредПоложение
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ФинДанные.ОбъектИерархии КАК ОбъектИерархии,
		               |	ВТ_ФинДанные.РодительИерархии КАК РодительИерархии,
		               |	ВТ_ФинДанные.СтруктураИерархии,
		               |	ВТ_ФинДанные.ЭтоГруппа,
		               |	"""" КАК ПредыдущееПоложение
		               |ИЗ
		               |	ВТ_ФинДанные КАК ВТ_ФинДанные
		               |ГДЕ
		               |	НЕ ВТ_ФинДанные.ПредПоложение";
					   
		Запрос.УстановитьПараметр("СИ", Иерархия);
		Запрос.УстановитьПараметр("Таб", тзНовыеЭлементы);
		РезЗапроса = Запрос.ВыполнитьПакет();
		
		тзПеремещаемыеЭлементы = РезЗапроса[3].Выгрузить();
		тзНовыеЭлементы = РезЗапроса[4].Выгрузить();
		
		нзИерархическиеСтруктурыОР = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьНаборЗаписей();
		нзИерархическиеСтруктурыОР.Отбор.СтруктураИерархии.Установить(Иерархия);
		нзИерархическиеСтруктурыОР.Прочитать();
		
		тзНзВременно = нзИерархическиеСтруктурыОР.Выгрузить();
		тзНзВременно.Индексы.Добавить("ОбъектИерархии");
		стрПоиска = новый Структура("ОбъектИерархии");
		
		Для каждого текОР из тзПеремещаемыеЭлементы Цикл 
			стрПоиска.ОбъектИерархии = текОР.ОбъектИерархии;
			НайС = тзНзВременно.НайтиСтроки(стрПоиска);
			Для каждого текСтрока из НайС Цикл
				текСтрока.РодительИерархии = текОР.РодительИерархии;
			КонецЦикла;
		КонецЦикла;
		
		нзИерархическиеСтруктурыОР.Загрузить(тзНзВременно);
		
		Для каждого текСтрока из тзНовыеЭлементы Цикл
			нс = нзИерархическиеСтруктурыОР.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Позиция = торо_НастройкаПорядкаЭлементов.ПолучитьМаксимальноеЗначениеРеквизитаДопУпорядоивания(Иерархия);
	
	нзПорядокОРПоИерархии = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьНаборЗаписей();
	нзПорядокОРПоИерархии.Отбор.СтруктураИерархии.Установить(Иерархия);
	нзПорядокОРПоИерархии.Прочитать();
	Для Каждого текСтрока из тзНовыеЭлементы Цикл
		нс = нзПорядокОРПоИерархии.Добавить();
		нс.ОбъектРемонта = текСтрока.ОбъектИерархии;
		нс.СтруктураИерархии = Иерархия;
		нс.РеквизитДопУпорядочиванияОР = Позиция;
		Позиция = Позиция + 1;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		Если Иерархия.ИзменяетсяДокументами Тогда
			докОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			нзИерархическиеСтруктурыОР.Записать();
		КонецЕсли;
		нзПорядокОРПоИерархии.Записать();
	Исключение
		ОтменитьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	ЗафиксироватьТранзакцию();
	
	Если ОбновитьРегистрСГруппами и НЕ Иерархия.ИзменяетсяДокументами Тогда
		ОбновитьДеревоГрупп(Иерархия);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьДеревоГрупп(Иерархия) Экспорт
	
	Если не ЗначениеЗаполнено(Иерархия) Тогда Возврат; КонецЕсли;
	
	нзОбъектыРемонтаГруппы = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
	нзОбъектыРемонтаГруппы.Отбор.СтруктураИерархии.Установить(Иерархия);
	нзОбъектыРемонтаГруппы.Прочитать();
	нзОбъектыРемонтаГруппы.Очистить();	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таб.СтруктураИерархии,
	|	Таб.РодительИерархии КАК ОбъектИерархии,
	|	ИСТИНА КАК ОбъектГруппа
	|ИЗ
	|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК Таб
	|ГДЕ
	|	Таб.СтруктураИерархии = &Иерархия
	|	И Таб.РодительИерархии <> ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|	И НЕ Таб.РодительИерархии.ЭтоГруппа
	|	И НЕ Таб.ОбъектИерархии.Наименование ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.СтруктураИерархии,
	|	Таб.РодительИерархии";
	
	Запрос.УстановитьПараметр("Иерархия", Иерархия);
	РезЗапроса = Запрос.Выполнить();
	Если РезЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	тзВыборка = РезЗапроса.Выгрузить();
	нзОбъектыРемонтаГруппы.Загрузить(тзВыборка);
	нзОбъектыРемонтаГруппы.Записать();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ДобавитьЭлементыИзТаблицы(Дерево, Родитель, НаборДляДобавления, Иерархия)
	
	КоличествоПодчиненных = Новый Соответствие;
	Для каждого текСтрока из Дерево Цикл
		Если НЕ ЗначениеЗаполнено(текСтрока.ОбъектИерархии) Тогда
			Продолжить;
		КонецЕсли;
		
		нс = НаборДляДобавления.Добавить();
		нс.СтруктураИерархии = Иерархия;
		
		нс.ОбъектИерархии = ПолучитьСоздатьОР(текСтрока.ОбъектИерархии);
		
		ТекРодитель = ?(ЗначениеЗаполнено(текСтрока.РодительИерархии), текСтрока.РодительИерархии, Родитель);
		нс.РодительИерархии = ПолучитьСоздатьОР(ТекРодитель);
		
		элем = КоличествоПодчиненных[нс.РодительИерархии];
		Если элем = Неопределено Тогда
			КоличествоПодчиненных.Вставить(нс.РодительИерархии, 1);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого текСтрока из НаборДляДобавления Цикл
		текСтрока.ЭтоГруппа = КоличествоПодчиненных[текСтрока.ОбъектИерархии] <> Неопределено И НЕ текСтрока.ОбъектИерархии.ЭтоГруппа;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьЭлементыИзДерева(Дерево, Родитель, НаборДляДобавления, Иерархия)
	
	Для каждого текСтрока из Дерево.Строки Цикл
		нс = НаборДляДобавления.Добавить();
		нс.ОбъектИерархии = текСтрока.ОбъектИерархии;
		нс.РодительИерархии = ?(текСтрока.Родитель = неопределено, Родитель, текСтрока.Родитель.ОбъектИерархии);
		нс.СтруктураИерархии = Иерархия;
		
		нс.ЭтоГруппа = текСтрока.Строки.Количество() > 0 И НЕ текСтрока.ОбъектИерархии.ЭтоГруппа;
		ДобавитьЭлементыИзДерева(текСтрока, текСтрока.ОбъектИерархии, НаборДляДобавления, Иерархия);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтметитьПодчиненные(ОР,ТаблицаИерархииРодителя)
	
	МассивПодчиненных = ТаблицаИерархииРодителя.НайтиСтроки(Новый Структура("РодительИерархии",ОР));
	Для Каждого СтрокаОР Из МассивПодчиненных Цикл
		
		СтрокаОР.ИскомоеЗначение = Истина;
		ОтметитьПодчиненные(СтрокаОР.ОбъектИерархии,ТаблицаИерархииРодителя);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция - Полное наименование ОР
//
// Параметры:
//  ОР	- СправочникСсылка.торо_ОбъектыРемонта - ор наименование, которого будет получаться.
//  СИ	- СправочникСсылка.торо_СтруктураОР - иерархия, по которой будет формироваться полное наименование, если не указана будет взята основная структура для добавления.
Функция ПолноеНаименованиеОР(ОР, СИ = неопределено) Экспорт 
	
	Если СИ = Неопределено Тогда 
		СИ = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяСтруктураИерархии", Справочники.торо_СтруктурыОР.ПустаяСсылка());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СИ) Тогда
		Возврат ОР.Наименование;
	КонецЕсли;
		
	МассивРодителей = Новый Массив;
	ЗаполнитьМассивРодителейОбъектаРемонта_Исправленный(ОР, МассивРодителей, СИ);
	
	ПолноеНаименование = "";
	пос = МассивРодителей.Количество()-1;
	ПервыйОР = Истина;
	Пока Пос >= 0 Цикл
		ПолноеНаименование = ?(ПервыйОР, МассивРодителей[пос].Наименование, ПолноеНаименование + " / " + МассивРодителей[пос].Наименование);
		ПервыйОР = Ложь;
		пос = пос - 1;
	КонецЦикла;
	
	ПолноеНаименование = ?(ПервыйОР, ОР.Наименование, ПолноеНаименование + " / " + ОР.Наименование);
	
	Возврат ПолноеНаименование;
	
КонецФункции

Функция ЯвляетсяЛиОбъектГруппой(ОбъектРемонта, СтруктураИерархии = Неопределено) Экспорт
	
	Возврат ОбъектРемонта.ЭтоГруппа;
	
КонецФункции

Процедура торо_ВыполнитьДействияПередУдалениемОбъектаРемонтаПередУдалением(Источник, Отказ) Экспорт
	ТекИерархияУдаление = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	Если ТекИерархияУдаление.ИзменяетсяДокументами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		               |			,
		               |			СтруктураИерархии = &СтруктураИерархии
		               |				И ОбъектИерархии = &ОР) КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ";
					   
		Запрос.УстановитьПараметр("ОР", Источник.Ссылка);
		Запрос.УстановитьПараметр("СтруктураИерархии", ТекИерархияУдаление);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущийРодитель = Выборка.РодительИерархии;
		КонецЕсли;

	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии = &ОР
		               |	И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";
					   
		Запрос.УстановитьПараметр("ОР", Источник.Ссылка);
		Запрос.УстановитьПараметр("СтруктураИерархии", ТекИерархияУдаление);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущийРодитель = Выборка.РодительИерархии;
		КонецЕсли;
	КонецЕсли;
	Справочники.торо_ОбъектыРемонта.ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекущийРодитель, ТекИерархияУдаление,,Истина);
КонецПроцедуры

#КонецОбласти
