
#Область ВЫГРУЗКА_В_PROJECT

Функция ПодготовитьСоответствие(Знач ПараметрыЗапроса, Знач ПоискПоСсылке = ИСТИНА) Экспорт
	
	СоответствиеЗадачи = Новый Соответствие;
	СоответствиеРесурсы = Новый Соответствие;
	
	СуммарныйТекстЗапроса = ?(ПоискПоСсылке = ИСТИНА, ЗапросЗадачиСоответствия(), ЗапросЗадачиСоответствияПоРемонтам())
		+ Символы.ПС + ";" + Символы.ПС; 
	
	НомерРезультатовПоЗадачам = 2;
	НомерРезультатовПоРесурсам = 3;
	
	
	
	Запрос = Новый Запрос(СуммарныйТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", ПараметрыЗапроса.Ссылки);
	Запрос.УстановитьПараметр("ID", ПараметрыЗапроса.Ссылки);
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаЗадачи = Результаты[НомерРезультатовПоЗадачам].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		
		СоответствиеНазначения = Новый Массив;
		Имя = ИмяЗадачи(ВыборкаЗадачи.ОбъектРемонта, ВыборкаЗадачи.ВидРемонтныхРабот, ВыборкаЗадачи.ДатаНачала, ВыборкаЗадачи.ДатаОкончания, ВыборкаЗадачи.ID);
		
		ВыборкаНазначения = ВыборкаЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПослениеНомераРесурсов = Новый Соответствие;
		
		Пока ВыборкаНазначения.Следующий() Цикл
			
			Ресурс = ВыборкаНазначения.Ресурс;
			
			Если ЗначениеЗаполнено(Ресурс) Тогда
				ИмяРесурса  = ИмяРесурса(ВыборкаНазначения.Наименование, ВыборкаНазначения.Код);
				GUID = Ресурс.УникальныйИдентификатор();
				
				Если ВыборкаНазначения.ТипРесурса = 0 Тогда // трудозатраты
					
					НомерРесурса = ПослениеНомераРесурсов.Получить(GUID);
					Если НомерРесурса = Неопределено Тогда
						НомерРесурса = 1;
					Иначе
						НомерРесурса = НомерРесурса + 1;
					КонецЕсли;
					
					Для Индекс = 1 по ВыборкаНазначения.КоличествоЧеловек Цикл
						НовоеИмяРесурса = ИмяРесурса + " №" + НомерРесурса;
						НовыйGUID = Строка(GUID) + "_" + НомерРесурса;
						СоответствиеРесурсы.Вставить(НовыйGUID,
							Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствРесурсов(), ВыборкаНазначения.Группа, ВыборкаНазначения.ТипРесурса, ВыборкаНазначения.Код, НовыйGUID, НовоеИмяРесурса, ВыборкаНазначения.CanLevel, ВыборкаНазначения.StandardRateFormat));
						
						СоответствиеНазначения.Добавить(Новый Структура("Ресурс, Units", НовыйGUID, ВыборкаНазначения.Количество));
						
						НомерРесурса = НомерРесурса + 1;
					КонецЦикла;
					ПослениеНомераРесурсов.Вставить(GUID, НомерРесурса);
					
				Иначе // материалы
					
					СоответствиеРесурсы.Вставить(GUID,
						Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствРесурсов(), ВыборкаНазначения.Группа, ВыборкаНазначения.ТипРесурса, ВыборкаНазначения.Код, GUID, ИмяРесурса, ВыборкаНазначения.CanLevel, ВыборкаНазначения.StandardRateFormat));
			
					СоответствиеНазначения.Добавить(Новый Структура("Ресурс, Units", GUID, ВыборкаНазначения.Количество));
					
				КонецЕсли;
				
				
			КонецЕсли;

		КонецЦикла;
		
		Длительность = РассчитатьДлительностьПоСтандартномуКалендарю(ВыборкаЗадачи.ДатаНачала, ВыборкаЗадачи.ДатаОкончания);
		
		СоответствиеЗадачи.Вставить(ВыборкаЗадачи.ID, Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствЗадач()+", Назначения", 
									ВыборкаЗадачи.ДатаНачала, ВыборкаЗадачи.ДатаОкончания, ВыборкаЗадачи.ID, Имя, Длительность.ДлительностьСтрокой, Длительность.ФорматДлительности, "ЗаявкаНаРемонт", Длительность.WorkVariance, Длительность.ДлительностьСтрокой, СоответствиеНазначения));
	КонецЦикла;
	
	БольшоеСоответствие = новый Соответствие;
	БольшоеСоответствие.Вставить("Задачи" , СоответствиеЗадачи);
	БольшоеСоответствие.Вставить("Ресурсы", СоответствиеРесурсы);

	ДополнитьСоответствиеСводнымиДанными(БольшоеСоответствие);
	
	Возврат БольшоеСоответствие;
	
КонецФункции

Функция ПодготовитьОстСоответствие(Знач ПараметрыЗапроса) Экспорт
	
	СоответствиеЗадачи = Новый Соответствие;
	СоответствиеРесурсы = Новый Соответствие;
	
	СуммарныйТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ОбъектРемонта КАК ОбъектРемонта,
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ВидРемонта КАК ВидРемонтныхРабот,
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ДатаНачалаРемонта КАК ДатаНачала,
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ДатаОкончанияРемонта КАК ДатаОкончания,
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ID КАК ID
	                        |ИЗ
	                        |	Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ОстановочныеРемонтыСвязанныеРемонты
	                        |ГДЕ
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка В(&Ссылки)
	                        |	И торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка.Проведен
	                        |
	                        |СГРУППИРОВАТЬ ПО
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ОбъектРемонта,
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ВидРемонта,
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ДатаНачалаРемонта,
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ДатаОкончанияРемонта,
	                        |	торо_ОстановочныеРемонтыСвязанныеРемонты.ID";
	
	
	Запрос = Новый Запрос(СуммарныйТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылки", ПараметрыЗапроса.Ссылки);
	Запрос.УстановитьПараметр("ID", ПараметрыЗапроса.Ссылки);
	
	ВыборкаЗадачи = Запрос.Выполнить().Выбрать();;
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		   		
		Имя = ИмяЗадачи(ВыборкаЗадачи.ОбъектРемонта, ВыборкаЗадачи.ВидРемонтныхРабот, ВыборкаЗадачи.ДатаНачала, ВыборкаЗадачи.ДатаОкончания, ВыборкаЗадачи.ID);
		
		Длительность = РассчитатьДлительностьПоСтандартномуКалендарю(ВыборкаЗадачи.ДатаНачала, ВыборкаЗадачи.ДатаОкончания);
		
		СоответствиеЗадачи.Вставить(ВыборкаЗадачи.ID, Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствЗадач()+", Назначения", 
									ВыборкаЗадачи.ДатаНачала, ВыборкаЗадачи.ДатаОкончания, ВыборкаЗадачи.ID, Имя, Длительность.ДлительностьСтрокой, Длительность.ФорматДлительности, "ОстановочныйРемонт", Длительность.WorkVariance, Длительность.ДлительностьСтрокой, Неопределено));
	КонецЦикла;
	
	БольшоеСоответствие = новый Соответствие;
	БольшоеСоответствие.Вставить("Задачи" , СоответствиеЗадачи);
	БольшоеСоответствие.Вставить("Ресурсы", Неопределено);

	ДополнитьСоответствиеСводнымиДанными(БольшоеСоответствие);
	
	Возврат БольшоеСоответствие;
	
КонецФункции

Функция ПодготовитьСоответствиеПланРабот(Знач ПараметрыЗапроса) Экспорт

	СоответствиеЗадачи = Новый Соответствие;
	СоответствиеРесурсы = Новый Соответствие;
	
	ТаблицаСсылок = Новый ТаблицаЗначений;
	ТаблицаССылок.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36,ДопустимаяДлина.Переменная)));
	
	ТипыРегистраторов = Новый Массив;
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.торо_ПланГрафикРемонта"));
	ТипыРегистраторов.Добавить(Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР"));
	ТаблицаССылок.Колонки.Добавить("ДокументРегистратор", Новый ОписаниеТипов(ТипыРегистраторов));
	
	Для каждого СтруктураСсылки из ПараметрыЗапроса.Ссылки Цикл
		НовСтр = ТаблицаСсылок.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтруктураСсылки);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =	"ВЫБРАТЬ
	              	|	ТаблицаСсылок.ID,
	              	|	ТаблицаСсылок.ДокументРегистратор
	              	|ПОМЕСТИТЬ ТаблицаСсылок
	              	|ИЗ
	              	|	&ТаблицаСсылок КАК ТаблицаСсылок
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	              	|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация КАК Квалификация,
	              	|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество,
	              	|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы,
	              	|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество * торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы КАК ОбщееВремя
	              	|ПОМЕСТИТЬ втКвалификацииРазвернутые
	              	|ИЗ
	              	|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
	              	|		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID
	              	|			И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка
	              	|ГДЕ
	              	|	(торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка, торо_ЗаявкаНаРемонтРемонтыОборудования.ID) В
	              	|			(ВЫБРАТЬ
	              	|				ТаблицаСсылок.ДокументРегистратор,
	              	|				ТаблицаСсылок.ID
	              	|			ИЗ
	              	|				ТаблицаСсылок
	              	|			ГДЕ
	              	|				ТаблицаСсылок.ДокументРегистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт)
	              	|
	              	|ИНДЕКСИРОВАТЬ ПО
	              	|	ID,
	              	|	Квалификация
	              	|;
	              	|
	              	|////////////////////////////////////////////////////////////////////////////////
	              	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	              	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура КАК Ресурс,
	              	|	СУММА(торо_ЗаявкаНаРемонтМатериальныеЗатраты.КоличествоЕдиниц) КАК Количество,
	              	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры КАК ПараметрРесурса,
	              	|	0 КАК Порядок,
	              	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Наименование КАК Наименование,
	              	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Код КАК Код,
	              	|	ВЫБОР
	              	|		КОГДА торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	              	|			ТОГДА ""Материалы""
	              	|		ИНАЧЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель.Наименование
	              	|	КОНЕЦ КАК Группа,
	              	|	1 КАК ТипРесурса,
	              	|	0 КАК РабГруппа,
	              	|	0 КАК CanLevel,
	              	|	8 КАК StandardRateFormat,
	              	|	0 КАК КоличествоЧеловек,
	              	|	0 КАК ОбщееКоличествоЧеловек,
	              	|	""ЗаявкаНаРемонт"" КАК ИсточникДанных
	              	|ИЗ
	              	|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	              	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.МатериальныеЗатраты КАК торо_ЗаявкаНаРемонтМатериальныеЗатраты
	              	|		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID
	              	|			И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтМатериальныеЗатраты.Ссылка
	              	|ГДЕ
	              	|	(торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка, торо_ЗаявкаНаРемонтРемонтыОборудования.ID) В
	              	|			(ВЫБРАТЬ
	              	|				ТаблицаСсылок.ДокументРегистратор,
	              	|				ТаблицаСсылок.ID
	              	|			ИЗ
	              	|				ТаблицаСсылок
	              	|			ГДЕ
	              	|				ТаблицаСсылок.ДокументРегистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт)
	              	|	И НЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура ЕСТЬ NULL 
	              	|
	              	|СГРУППИРОВАТЬ ПО
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ID,
	              	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала,
	              	|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания,
	              	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура,
	              	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Наименование,
	              	|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Код,
	              	|	ВЫБОР
	              	|		КОГДА торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	              	|			ТОГДА ""Материалы""
	              	|		ИНАЧЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель.Наименование
	              	|	КОНЕЦ
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	втКвалификации.ОбъектРемонта,
	              	|	втКвалификации.ВидРемонтныхРабот,
	              	|	втКвалификации.ДатаНачала,
	              	|	втКвалификации.ДатаОкончания,
	              	|	втКвалификации.ID,
	              	|	втКвалификации.Квалификация,
	              	|	втКвалификации.ВремяРаботы / ЗапросОбщегоВремени.ОбщееВремя,
	              	|	NULL,
	              	|	1,
	              	|	втКвалификации.Квалификация.Наименование,
	              	|	втКвалификации.Квалификация.Код,
	              	|	""Квалификации"",
	              	|	0,
	              	|	1,
	              	|	1,
	              	|	2,
	              	|	втКвалификации.Количество,
	              	|	ЗапросКоличества.ОбщееКоличество,
	              	|	""ЗаявкаНаРемонт""
	              	|ИЗ
	              	|	втКвалификацииРазвернутые КАК втКвалификации
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              	|			втКвалификацииРазвернутые.ID КАК ID,
	              	|			СУММА(втКвалификацииРазвернутые.ОбщееВремя) КАК ОбщееВремя
	              	|		ИЗ
	              	|			втКвалификацииРазвернутые КАК втКвалификацииРазвернутые
	              	|		
	              	|		СГРУППИРОВАТЬ ПО
	              	|			втКвалификацииРазвернутые.ID) КАК ЗапросОбщегоВремени
	              	|		ПО втКвалификации.ID = ЗапросОбщегоВремени.ID
	              	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	              	|			втКвалификацииРазвернутые.ID КАК ID,
	              	|			втКвалификацииРазвернутые.Квалификация КАК Квалификация,
	              	|			СУММА(втКвалификацииРазвернутые.Количество) КАК ОбщееКоличество
	              	|		ИЗ
	              	|			втКвалификацииРазвернутые КАК втКвалификацииРазвернутые
	              	|		
	              	|		СГРУППИРОВАТЬ ПО
	              	|			втКвалификацииРазвернутые.ID,
	              	|			втКвалификацииРазвернутые.Квалификация) КАК ЗапросКоличества
	              	|		ПО втКвалификации.ID = ЗапросКоличества.ID
	              	|			И втКвалификации.Квалификация = ЗапросКоличества.Квалификация
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	              	|	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот,
	              	|	торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот,
	              	|	торо_ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот,
	              	|	КОНЕЦПЕРИОДА(торо_ПлановыеРемонтныеРаботы.ДатаОкончанияРемонтныхРабот, ДЕНЬ),
	              	|	торо_ПлановыеРемонтныеРаботы.ID,
	              	|	НЕОПРЕДЕЛЕНО,
	              	|	0,
	              	|	НЕОПРЕДЕЛЕНО,
	              	|	-1,
	              	|	"""",
	              	|	"""",
	              	|	"""",
	              	|	1,
	              	|	0,
	              	|	0,
	              	|	8,
	              	|	0,
	              	|	0,
	              	|	""ППР""
	              	|ИЗ
	              	|	РегистрСведений.торо_ПлановыеРемонтныеРаботы КАК торо_ПлановыеРемонтныеРаботы
	              	|ГДЕ
	              	|	(торо_ПлановыеРемонтныеРаботы.Регистратор, торо_ПлановыеРемонтныеРаботы.ID) В
	              	|			(ВЫБРАТЬ
	              	|				ТаблицаСсылок.ДокументРегистратор,
	              	|				ТаблицаСсылок.ID
	              	|			ИЗ
	              	|				ТаблицаСсылок
	              	|			ГДЕ
	              	|				ТаблицаСсылок.ДокументРегистратор ССЫЛКА Документ.торо_ПланГрафикРемонта)
	              	|
	              	|ОБЪЕДИНИТЬ ВСЕ
	              	|
	              	|ВЫБРАТЬ
	              	|	торо_ПлановыеРемонтныеРаботы.СписокОбъектов,
	              	|	торо_ПлановыеРемонтныеРаботы.ВидМероприятия,
	              	|	торо_ПлановыеРемонтныеРаботы.ДатаНачала,
	              	|	КОНЕЦПЕРИОДА(торо_ПлановыеРемонтныеРаботы.ДатаОкончания),
	              	|	торо_ПлановыеРемонтныеРаботы.ID,
	              	|	НЕОПРЕДЕЛЕНО,
	              	|	0,
	              	|	НЕОПРЕДЕЛЕНО,
	              	|	-1,
	              	|	"""",
	              	|	"""",
	              	|	"""",
	              	|	1,
	              	|	0,
	              	|	0,
	              	|	8,
	              	|	0,
	              	|	0,
	              	|	""РМ""
	              	|ИЗ
	              	|	РегистрСведений.торо_ПлановыеМероприятия КАК торо_ПлановыеРемонтныеРаботы
	              	|ГДЕ
	              	|	(торо_ПлановыеРемонтныеРаботы.Регистратор, торо_ПлановыеРемонтныеРаботы.ID) В
	              	|			(ВЫБРАТЬ
	              	|				ТаблицаСсылок.ДокументРегистратор,
	              	|				ТаблицаСсылок.ID
	              	|			ИЗ
	              	|				ТаблицаСсылок
	              	|			ГДЕ
	              	|				ТаблицаСсылок.ДокументРегистратор ССЫЛКА Документ.торо_ГрафикРегламентныхМероприятийТОиР)
	              	|
	              	|УПОРЯДОЧИТЬ ПО
	              	|	Порядок УБЫВ,
	              	|	ТипРесурса
	              	|ИТОГИ
	              	|	МАКСИМУМ(ОбъектРемонта),
	              	|	МАКСИМУМ(ВидРемонтныхРабот),
	              	|	МАКСИМУМ(ДатаНачала),
	              	|	МАКСИМУМ(ДатаОкончания),
	              	|	МАКСИМУМ(ИсточникДанных)
	              	|ПО
	              	|	ID";
						
	Запрос.УстановитьПараметр("ТаблицаСсылок", ТаблицаСсылок);
	
	Результат = Запрос.Выполнить();
	ВыборкаЗадачи = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗадачи.Следующий() Цикл
		   		
		СоответствиеНазначения = Новый Массив;
		Имя = ИмяЗадачи(ВыборкаЗадачи.ОбъектРемонта, ВыборкаЗадачи.ВидРемонтныхРабот, ВыборкаЗадачи.ДатаНачала, ВыборкаЗадачи.ДатаОкончания, ВыборкаЗадачи.ID);
		
		Если ВыборкаЗадачи.ИсточникДанных = "ППР" Тогда
			Имя = "[ППР] "+Имя;
		КонецЕсли;
		
		ВыборкаНазначения = ВыборкаЗадачи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		ПослениеНомераРесурсов = Новый Соответствие;
		
		Пока ВыборкаНазначения.Следующий() Цикл
			
			Ресурс = ВыборкаНазначения.Ресурс;
			
			Если ЗначениеЗаполнено(Ресурс) Тогда
				ИмяРесурса  = ИмяРесурса(ВыборкаНазначения.Наименование, ВыборкаНазначения.Код);
				GUID = Ресурс.УникальныйИдентификатор();
				
				Если ВыборкаНазначения.ТипРесурса = 0 Тогда // трудозатраты
					
					НомерРесурса = ПослениеНомераРесурсов.Получить(GUID);
					Если НомерРесурса = Неопределено Тогда
						НомерРесурса = 1;
					Иначе
						НомерРесурса = НомерРесурса + 1;
					КонецЕсли;
					
					Для Индекс = 1 по ВыборкаНазначения.КоличествоЧеловек Цикл
						НовоеИмяРесурса = ИмяРесурса + " №" + НомерРесурса;
						НовыйGUID = Строка(GUID) + "_" + НомерРесурса;
						СоответствиеРесурсы.Вставить(НовыйGUID,
							Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствРесурсов(), ВыборкаНазначения.Группа, ВыборкаНазначения.ТипРесурса, ВыборкаНазначения.Код, НовыйGUID, НовоеИмяРесурса, ВыборкаНазначения.CanLevel, ВыборкаНазначения.StandardRateFormat));
						
						СоответствиеНазначения.Добавить(Новый Структура("Ресурс, Units", НовыйGUID, ВыборкаНазначения.Количество));
						
						НомерРесурса = НомерРесурса + 1;
					КонецЦикла;
					ПослениеНомераРесурсов.Вставить(GUID, НомерРесурса);
					
				Иначе // материалы
					
					СоответствиеРесурсы.Вставить(GUID,
						Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствРесурсов(), ВыборкаНазначения.Группа, ВыборкаНазначения.ТипРесурса, ВыборкаНазначения.Код, GUID, ИмяРесурса, ВыборкаНазначения.CanLevel, ВыборкаНазначения.StandardRateFormat));
			
					СоответствиеНазначения.Добавить(Новый Структура("Ресурс, Units", GUID, ВыборкаНазначения.Количество));
					
				КонецЕсли;
				
				
			КонецЕсли;

		КонецЦикла;
		
		Длительность = РассчитатьДлительностьПоСтандартномуКалендарю(ВыборкаЗадачи.ДатаНачала, ВыборкаЗадачи.ДатаОкончания);
		
		СоответствиеЗадачи.Вставить(ВыборкаЗадачи.ID, Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствЗадач()
																	+", Назначения", 
									ВыборкаЗадачи.ДатаНачала, ВыборкаЗадачи.ДатаОкончания, ВыборкаЗадачи.ID, Имя, Длительность.ДлительностьСтрокой, Длительность.ФорматДлительности, ВыборкаЗадачи.ИсточникДанных, Длительность.WorkVariance, Длительность.ДлительностьСтрокой,
									?(СоответствиеНазначения.Количество() > 0, СоответствиеНазначения, Неопределено)));
	КонецЦикла;
	
	БольшоеСоответствие = новый Соответствие;
	БольшоеСоответствие.Вставить("Задачи" , СоответствиеЗадачи);
	БольшоеСоответствие.Вставить("Ресурсы", СоответствиеРесурсы);
	
	ДополнитьСоответствиеСводнымиДанными(БольшоеСоответствие);
	
	Возврат БольшоеСоответствие;
	
КонецФункции

Процедура ДополнитьСоответствиеСводнымиДанными(БольшоеСоответствие)
	
	СоответствиеЗадачи = БольшоеСоответствие["Задачи"];
	
	МинДатаНачала = Неопределено;
	МаксДатаОкончания = Неопределено;
	ИДЗадач = Новый Массив;
	ОбщаяWorkVariance = 0;
	
	Если СоответствиеЗадачи <> Неопределено Тогда
		Для каждого ДанныеЗадачи из СоответствиеЗадачи Цикл
			Свойства = ДанныеЗадачи.Значение;
			МинДатаНачала = ?(МинДатаНачала = Неопределено, Свойства.Start, Мин(Свойства.Start, МинДатаНачала));
			МаксДатаОкончания = ?(МаксДатаОкончания = Неопределено, Свойства.Finish, Макс(Свойства.Finish, МаксДатаОкончания));
			ИДЗадач.Добавить(Свойства.Text30);
			ОбщаяWorkVariance = ОбщаяWorkVariance + Свойства.WorkVariance;
		КонецЦикла;
	КонецЕсли;
	
	Если МинДатаНачала = Неопределено Тогда
		МинДатаНачала = Дата(1,1,1);
	КонецЕсли;
	
	Если МаксДатаОкончания = Неопределено Тогда
		МаксДатаОкончания = Дата(1,1,1);
	КонецЕсли;
	
	Длительность = РассчитатьДлительностьПоСтандартномуКалендарю(МинДатаНачала, МаксДатаОкончания);
	
	РаботаМинут = Цел(ОбщаяWorkVariance/1000);
	РаботаЧасов = Цел(РаботаМинут/60);
	РаботаМинут = РаботаМинут - РаботаЧасов*60;
	РаботаСекунд = Окр(60*(ОбщаяWorkVariance/1000 - Цел(ОбщаяWorkVariance/1000)), 0);
	
	WORK = "PT"+Формат(РаботаЧасов, "ЧН=0; ЧГ=0")+"H"
				+Формат(РаботаМинут, "ЧН=0; ЧГ=0")+"M"
				+Формат(РаботаСекунд, "ЧН=0; ЧГ=0")+"S";
	
	СвойстваПроекта = Новый Структура("StartDate, FinishDate, ИДЗадач", МинДатаНачала, МаксДатаОкончания, ИДЗадач);
	СвойстваПустойЗадачи = Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствЗадач(), 
									МинДатаНачала, МаксДатаОкончания, 0, "", Длительность.ДлительностьСтрокой, Длительность.ФорматДлительности, "", ОбщаяWorkVariance, WORK);
									
	БольшоеСоответствие.Вставить("ПустаяЗадача" , СвойстваПустойЗадачи);
	БольшоеСоответствие.Вставить("СвойстваПроекта", СвойстваПроекта);
	
КонецПроцедуры

Функция ИмяЗадачи(ОбъектРемонта, видРемонта, Дата1, Дата2, ID)
	
	ИмяЗадачи = Строка(ОбъектРемонта)+" — "+Строка(видРемонта)+" — "+Строка(Дата1)+" – "+Строка(Дата2)+" ("+ID+")";
	ЗаменитьПроблемныеСимволы(ИмяЗадачи);
	
	Возврат ИмяЗадачи;
	
КонецФункции

Функция ИмяРесурса(Наименование, Код)
	
	ИмяРесурса = Строка(Наименование)+" ("+Строка(Код)+")";
	
	// В наименованиях ресурсов Project не поддреживает значения [,] и разделителя списков, 
	// последний обработать невозможно.
	ЗаменитьПроблемныеСимволы(ИмяРесурса);

	Возврат ИмяРесурса;
	
КонецФункции

Процедура ЗаменитьПроблемныеСимволы(ИмяРесурса)
	
	ИмяРесурса = СтрЗаменить(ИмяРесурса, "[", "_");
	ИмяРесурса = СтрЗаменить(ИмяРесурса, "]", "_");
	ИмяРесурса = СтрЗаменить(ИмяРесурса, ";", ",");
	ИмяРесурса = СтрЗаменить(ИмяРесурса, Символы.Таб," ");
	
КонецПроцедуры

Функция РассчитатьДлительностьПоСтандартномуКалендарю(Знач ДатаНачала, Знач ДатаОкончания)
	
	// Рабочее время по стандартному календарю:
	// с 9.00 по 13.00 и с 14.00 по 18.00 с понедельника по пятницу.
	
	СтруктураВозврата = Новый Структура;
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) 
		ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания)
		ИЛИ ДатаОкончания <= ДатаНачала Тогда
		СтруктураВозврата.Вставить("ДлительностьСтрокой", "PT0H0M0S");
		СтруктураВозврата.Вставить("ФорматДлительности", 53);
		СтруктураВозврата.Вставить("WorkVariance", 0);
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТекущаяДатаНачала = ДатаНачала;
	
	ВремяНачалаДня = 9*3600;
	ВремяНачалаОбеда = 13*3600;
	ВремяКонцаОбеда = 14*3600;
	ВремяКонцаДня = 18*3600;
	ЧасовЗаДень = 8;
	ДлинаСуток = 24*3600;
	
	КоличествоДней = 0;
	КоличествоЧасов = 0;
	КоличествоМинут = 0;
	КоличествоСекунд = 0;
	
	Пока ТекущаяДатаНачала + ДлинаСуток <= ДатаОкончания Цикл
		ТекДеньРабочий = ЭтоРабочийДеньПоСтандартномуКалендарю(ТекущаяДатаНачала);
		СледДеньРабочий = ЭтоРабочийДеньПоСтандартномуКалендарю(ТекущаяДатаНачала + ДлинаСуток);
		
		Если ТекДеньРабочий И СледДеньРабочий Тогда
			КоличествоДней = КоличествоДней + 1;
		ИначеЕсли ТекДеньРабочий Тогда
			ДобавитьДлительностьНеполногоДня(ТекущаяДатаНачала, Ложь, ВремяНачалаДня, ВремяНачалаОбеда, ВремяКонцаОбеда, ВремяКонцаДня, КоличествоДней, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		ИначеЕсли СледДеньРабочий Тогда
			ДобавитьДлительностьНеполногоДня(ТекущаяДатаНачала, Истина, ВремяНачалаДня, ВремяНачалаОбеда, ВремяКонцаОбеда, ВремяКонцаДня, КоличествоДней, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		КонецЕсли;
		
		ТекущаяДатаНачала = ТекущаяДатаНачала + ДлинаСуток;
	КонецЦикла;
	
	// осталось меньше 1 суток
	Если НачалоДня(ТекущаяДатаНачала) < НачалоДня(ДатаОкончания) Тогда
		
		Если ЭтоРабочийДеньПоСтандартномуКалендарю(ТекущаяДатаНачала) Тогда
			ДобавитьДлительностьНеполногоДня(ТекущаяДатаНачала, Ложь, ВремяНачалаДня, ВремяНачалаОбеда, ВремяКонцаОбеда, ВремяКонцаДня, КоличествоДней, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		КонецЕсли;
		
		Если ЭтоРабочийДеньПоСтандартномуКалендарю(ДатаОкончания) Тогда
			ДобавитьДлительностьНеполногоДня(ДатаОкончания, Истина, ВремяНачалаДня, ВремяНачалаОбеда, ВремяКонцаОбеда, ВремяКонцаДня, КоличествоДней, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		КонецЕсли;
		
	Иначе // нет перехода между сутками
		
		Если ЭтоРабочийДеньПоСтандартномуКалендарю(ТекущаяДатаНачала) Тогда
			ВремяНачала = ТекущаяДатаНачала - НачалоДня(ТекущаяДатаНачала);
			ВремяОкончания = ДатаОкончания - НачалоДня(ДатаОкончания);
			
			Если ВремяНачала <= ВремяНачалаДня Тогда
				ДобавитьДлительностьНеполногоДня(ДатаОкончания, Истина, ВремяНачалаДня, ВремяНачалаОбеда, ВремяКонцаОбеда, ВремяКонцаДня, КоличествоДней, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
				
			ИначеЕсли ВремяОкончания >= ВремяКонцаДня Тогда
				ДобавитьДлительностьНеполногоДня(ТекущаяДатаНачала, Ложь, ВремяНачалаДня, ВремяНачалаОбеда, ВремяКонцаОбеда, ВремяКонцаДня, КоличествоДней, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
				
			ИначеЕсли ВремяНачала <= ВремяНачалаОбеда Тогда
				ДобавитьДлительностьНеполногоДня(ДатаОкончания, Истина, ВремяНачала, ВремяНачалаОбеда, ВремяКонцаОбеда, ВремяКонцаДня, КоличествоДней, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
				
			ИначеЕсли ВремяНачала <= ВремяКонцаОбеда Тогда
				ДобавитьДлительностьНеполногоДня(ДатаОкончания, Истина, ВремяНачалаОбеда, ВремяНачалаОбеда, ВремяКонцаОбеда, ВремяКонцаДня, КоличествоДней, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
				
			Иначе
				ДобавитьДлительностьИнтервала(ВремяНачала, ВремяОкончания, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// обработка переполнения
	Пока КоличествоСекунд >= 60 Цикл
		КоличествоМинут = КоличествоМинут + 1;
		КоличествоСекунд = КоличествоСекунд - 60;
	КонецЦикла;
	
	Пока КоличествоМинут >= 60 Цикл
		КоличествоЧасов = КоличествоЧасов + 1;
		КоличествоМинут = КоличествоМинут - 60;
	КонецЦикла;
	
	КоличествоЧасов = КоличествоЧасов + КоличествоДней*ЧасовЗаДень;
	
	ДлительностьСтрокой = "PT"+Формат(КоличествоЧасов, "ЧН=0; ЧГ=0")+"H"
				+Формат(КоличествоМинут, "ЧН=0; ЧГ=0")+"M"
				+Формат(КоличествоСекунд, "ЧН=0; ЧГ=0")+"S";

	СтруктураВозврата.Вставить("ДлительностьСтрокой", ДлительностьСтрокой);
	СтруктураВозврата.Вставить("КоличествоЧасов", КоличествоЧасов);
	СтруктураВозврата.Вставить("КоличествоМинут", КоличествоМинут);
	СтруктураВозврата.Вставить("КоличествоСекунд", КоличествоСекунд);
	СтруктураВозврата.Вставить("ЧасовЗаДень", ЧасовЗаДень);
	
	ФорматДлительности = ОпределитьDurationFormat(СтруктураВозврата);
	СтруктураВозврата.Вставить("ФорматДлительности", ФорматДлительности);
	
	СтруктураВозврата.Вставить("WorkVariance", ОКР((КоличествоЧасов*60+КоличествоМинут+КоличествоСекунд/60)*1000, 2));
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЭтоРабочийДеньПоСтандартномуКалендарю(Дата)
	
	ДеньНедели = ДеньНедели(Дата);
	Возврат ДеньНедели <> 6 И ДеньНедели <> 7;
	
КонецФункции

Процедура ДобавитьДлительностьНеполногоДня(Дата, ЭтоДатаОкончания = Ложь, ВремяНачалаДня, ВремяНачалаОбеда, ВремяКонцаОбеда, ВремяКонцаДня, КоличествоДней, КоличествоЧасов, КоличествоМинут, КоличествоСекунд)
	
	Время = Дата - НачалоДня(Дата);
	
	// от заданного времени до конца дня
	Если НЕ ЭтоДатаОкончания Тогда
		
		Если Время <= ВремяНачалаДня Тогда
			КоличествоДней = КоличествоДней + 1;
		ИначеЕсли Время < ВремяНачалаОбеда Тогда
			ДобавитьДлительностьИнтервала(Время, ВремяНачалаОбеда, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
			ДобавитьДлительностьИнтервала(ВремяКонцаОбеда, ВремяКонцаДня, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		ИначеЕсли Время <= ВремяКонцаОбеда Тогда
			ДобавитьДлительностьИнтервала(ВремяКонцаОбеда, ВремяКонцаДня, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		ИначеЕсли Время < ВремяКонцаДня Тогда
			ДобавитьДлительностьИнтервала(Время, ВремяКонцаДня, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		КонецЕсли;
		
	Иначе // от начала дня до указанного времени
		
		Если Время >= ВремяКонцаДня Тогда
			КоличествоДней = КоличествоДней + 1;
		ИначеЕсли Время > ВремяКонцаОбеда Тогда
			ДобавитьДлительностьИнтервала(ВремяКонцаОбеда, Время, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
			ДобавитьДлительностьИнтервала(ВремяНачалаДня, ВремяНачалаОбеда, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		ИначеЕсли Время >= ВремяНачалаОбеда Тогда	
			ДобавитьДлительностьИнтервала(ВремяНачалаДня, ВремяНачалаОбеда, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		ИначеЕсли Время > ВремяНачалаДня Тогда
			ДобавитьДлительностьИнтервала(ВремяНачалаДня, Время, КоличествоЧасов, КоличествоМинут, КоличествоСекунд);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДлительностьИнтервала(ВремяНачала, ВремяОкончания, КоличествоЧасов, КоличествоМинут, КоличествоСекунд)
	
	Разность = ВремяОкончания - ВремяНачала;
	Если Разность <=0 Тогда
		Возврат;
	КонецЕсли;
	
	ЦелыхЧасов = Цел(Разность/3600);
	Разность = Разность - ЦелыхЧасов*3600;
	
	ЦелыхМинут = Цел(Разность/60);
	Разность = Разность - ЦелыхМинут*60;
	
	КоличествоЧасов = КоличествоЧасов + ЦелыхЧасов;
	КоличествоМинут = КоличествоМинут + ЦелыхМинут;
	КоличествоСекунд = КоличествоСекунд + Разность;
	
КонецПроцедуры

Функция ОпределитьDurationFormat(СтруктураДлительности)
	
	Если СтруктураДлительности.КоличествоЧасов >= СтруктураДлительности.ЧасовЗаДень Тогда
		Возврат 7; // дни
	ИначеЕсли СтруктураДлительности.КоличествоЧасов >= 1 Тогда
		Возврат 5; // часы
	Иначе
		Возврат 3; // минуты
	КонецЕсли;
	
КонецФункции


Функция ЗапросЗадачиСоответствия()
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация КАК Квалификация,
	               |	СУММА(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество * торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы) КАК ОбщееВремя
	               |ПОМЕСТИТЬ втКвалификации
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
	               |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка В(&Ссылки)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация КАК Квалификация,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы
	               |ПОМЕСТИТЬ втКвалификацииРазвернутые
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
	               |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка В(&Ссылки)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Квалификация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура КАК Ресурс,
	               |	СУММА(торо_ЗаявкаНаРемонтМатериальныеЗатраты.КоличествоЕдиниц) КАК Количество,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры КАК ПараметрРесурса,
	               |	0 КАК Порядок,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Наименование КАК Наименование,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Код КАК Код,
	               |	ВЫБОР
	               |		КОГДА торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |			ТОГДА ""Материалы""
	               |		ИНАЧЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель.Наименование
	               |	КОНЕЦ КАК Группа,
	               |	1 КАК ТипРесурса,
	               |	0 КАК РабГруппа,
	               |	0 КАК CanLevel,
	               |	8 КАК StandardRateFormat,
	               |	0 КАК КоличествоЧеловек,
	               |	0 КАК ОбщееКоличествоЧеловек
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.МатериальныеЗатраты КАК торо_ЗаявкаНаРемонтМатериальныеЗатраты
	               |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтМатериальныеЗатраты.Ссылка
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка В(&Ссылки)
	               |	И НЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура ЕСТЬ NULL 
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Наименование,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Код,
	               |	ВЫБОР
	               |		КОГДА торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |			ТОГДА ""Материалы""
	               |		ИНАЧЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель.Наименование
	               |	КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втКвалификации.ОбъектРемонта,
	               |	втКвалификации.ВидРемонтныхРабот,
	               |	втКвалификации.ДатаНачала,
	               |	втКвалификации.ДатаОкончания,
	               |	втКвалификации.ID,
	               |	втКвалификации.Квалификация,
	               |	втКвалификации.ВремяРаботы / ВложенныйЗапрос.ОбщееВремя,
	               |	NULL,
	               |	1,
	               |	втКвалификации.Квалификация.Наименование,
	               |	втКвалификации.Квалификация.Код,
	               |	""Квалификации"",
	               |	0,
	               |	1,
	               |	1,
	               |	2,
	               |	втКвалификации.Количество,
	               |	ЗапросКоличества.ОбщееКоличество
	               |ИЗ
	               |	втКвалификацииРазвернутые КАК втКвалификации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			втКвалификации.ID КАК ID,
	               |			СУММА(втКвалификации.ОбщееВремя) КАК ОбщееВремя
	               |		ИЗ
	               |			втКвалификации КАК втКвалификации
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			втКвалификации.ID) КАК ВложенныйЗапрос
	               |		ПО втКвалификации.ID = ВложенныйЗапрос.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			втКвалификацииРазвернутые.ID КАК ID,
	               |			втКвалификацииРазвернутые.Квалификация КАК Квалификация,
	               |			СУММА(втКвалификацииРазвернутые.Количество) КАК ОбщееКоличество
	               |		ИЗ
	               |			втКвалификацииРазвернутые КАК втКвалификацииРазвернутые
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			втКвалификацииРазвернутые.ID,
	               |			втКвалификацииРазвернутые.Квалификация) КАК ЗапросКоличества
	               |		ПО втКвалификации.ID = ЗапросКоличества.ID
	               |			И втКвалификации.Квалификация = ЗапросКоличества.Квалификация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок УБЫВ,
	               |	ТипРесурса
	               |ИТОГИ
	               |	МАКСИМУМ(ОбъектРемонта),
	               |	МАКСИМУМ(ВидРемонтныхРабот),
	               |	МАКСИМУМ(ДатаНачала),
	               |	МАКСИМУМ(ДатаОкончания)
	               |ПО
	               |	ID";
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЗапросЗадачиСоответствияПоРемонтам()
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация КАК Квалификация,
	               |	СУММА(торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество * торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы) КАК ОбщееВремя
	               |ПОМЕСТИТЬ втКвалификации
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
	               |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID В(&ID)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация КАК Квалификация,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы
	               |ПОМЕСТИТЬ втКвалификацииРазвернутые
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
	               |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID В(&ID)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Квалификация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура КАК Ресурс,
	               |	СУММА(торо_ЗаявкаНаРемонтМатериальныеЗатраты.КоличествоЕдиниц) КАК Количество,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры КАК ПараметрРесурса,
	               |	0 КАК Порядок,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Наименование КАК Наименование,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Код КАК Код,
	               |	ВЫБОР
	               |		КОГДА торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |			ТОГДА ""Материалы""
	               |		ИНАЧЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель.Наименование
	               |	КОНЕЦ КАК Группа,
	               |	1 КАК ТипРесурса,
	               |	0 КАК РабГруппа,
	               |	0 КАК CanLevel,
	               |	8 КАК StandardRateFormat,
	               |	0 КАК КоличествоЧеловек,
	               |	0 КАК ОбщееКоличествоЧеловек
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.МатериальныеЗатраты КАК торо_ЗаявкаНаРемонтМатериальныеЗатраты
	               |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = торо_ЗаявкаНаРемонтМатериальныеЗатраты.Ссылка
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID В(&ID)
	               |	И НЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура ЕСТЬ NULL 
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Наименование,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Код,
	               |	ВЫБОР
	               |		КОГДА торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |			ТОГДА ""Материалы""
	               |		ИНАЧЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура.Родитель.Наименование
	               |	КОНЕЦ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втКвалификации.ОбъектРемонта,
	               |	втКвалификации.ВидРемонтныхРабот,
	               |	втКвалификации.ДатаНачала,
	               |	втКвалификации.ДатаОкончания,
	               |	втКвалификации.ID,
	               |	втКвалификации.Квалификация,
	               |	втКвалификации.ВремяРаботы / ВложенныйЗапрос.ОбщееВремя,
	               |	NULL,
	               |	1,
	               |	втКвалификации.Квалификация.Наименование,
	               |	втКвалификации.Квалификация.Код,
	               |	""Квалификации"",
	               |	0,
	               |	1,
	               |	1,
	               |	2,
	               |	втКвалификации.Количество,
	               |	ЗапросКоличества.ОбщееКоличество
	               |ИЗ
	               |	втКвалификацииРазвернутые КАК втКвалификации
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			втКвалификации.ID КАК ID,
	               |			СУММА(втКвалификации.ОбщееВремя) КАК ОбщееВремя
	               |		ИЗ
	               |			втКвалификации КАК втКвалификации
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			втКвалификации.ID) КАК ВложенныйЗапрос
	               |		ПО втКвалификации.ID = ВложенныйЗапрос.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			втКвалификацииРазвернутые.ID КАК ID,
	               |			втКвалификацииРазвернутые.Квалификация КАК Квалификация,
	               |			СУММА(втКвалификацииРазвернутые.Количество) КАК ОбщееКоличество
	               |		ИЗ
	               |			втКвалификацииРазвернутые КАК втКвалификацииРазвернутые
	               |		
	               |		СГРУППИРОВАТЬ ПО
	               |			втКвалификацииРазвернутые.ID,
	               |			втКвалификацииРазвернутые.Квалификация) КАК ЗапросКоличества
	               |		ПО втКвалификации.ID = ЗапросКоличества.ID
	               |			И втКвалификации.Квалификация = ЗапросКоличества.Квалификация
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Порядок УБЫВ,
	               |	ТипРесурса
	               |ИТОГИ
	               |	МАКСИМУМ(ОбъектРемонта),
	               |	МАКСИМУМ(ВидРемонтныхРабот),
	               |	МАКСИМУМ(ДатаНачала),
	               |	МАКСИМУМ(ДатаОкончания)
	               |ПО
	               |	ID";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьОбъектXDTO(ПространствоИмен, Тип) Экспорт
	
	Попытка
		
		ОбъектДанныеТип = ФабрикаXDTO.Тип(ПространствоИмен, Тип );
		ОбъектДанные = ФабрикаXDTO.Создать(ОбъектДанныеТип);    
		
	Исключение
		
		Описание = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ТекстОшибки = "Не удалось получить Тип XDTO «" + 
		Тип + "» в пакете «"+ПространствоИмен+"» по причине: " + Описание;
		
	КонецПопытки;
	
	
	Возврат ОбъектДанные;
	
КонецФункции

Функция ПолучитьФабрикуИзМакета(Знач ИмяМакета)
	
	ТекстСхемы = торо_ИнтеграцияСmsProjectСервер.ОбщийТекстовыйМакет(ИмяМакета);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xsd");
	ТекстСхемы.Записать(ИмяВременногоФайла);
	
	Пути = Новый Массив();
	Пути.Добавить(ИмяВременногоФайла);
	
	Пакеты = Новый Массив;
	Пакеты.Добавить(ФабрикаXDTO.Пакеты.Получить("http://schemas.microsoft.com/project/2010"));

	
	Попытка
		Фабрика = СоздатьФабрикуXDTO(Пути, Пакеты);
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ОписаниеОшибки();
		СообщениеПользователю.Сообщить();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Фабрика;
	
КонецФункции

Функция XDTOТипProject(Фабрика)
	Возврат ФабрикаXDTO.Тип("http://schemas.microsoft.com/project/2010", "Project");
КонецФункции

Функция XDTOТипTask(ФабрикаXDTO)
	Возврат XDTOТипProject(ФабрикаXDTO).Свойства.Получить("Tasks").Тип.Свойства.Получить("Task").Тип;
КонецФункции

Функция XDTOТипResource(ФабрикаXDTO)
	Возврат XDTOТипProject(ФабрикаXDTO).Свойства.Получить("Resources").Тип.Свойства.Получить("Resource").Тип;
КонецФункции

Функция XDTOТипAssignment(ФабрикаXDTO)
	Возврат XDTOТипProject(ФабрикаXDTO).Свойства.Получить("Assignments").Тип.Свойства.Получить("Assignment").Тип;
КонецФункции

Функция XDTOТипCalendar(ФабрикаXDTO)
	Возврат XDTOТипProject(ФабрикаXDTO).Свойства.Получить("Calendars").Тип.Свойства.Получить("Calendar").Тип;
КонецФункции

Функция XDTOТипWeekDay(ФабрикаXDTO)
	Возврат XDTOТипProject(ФабрикаXDTO).Свойства.Получить("Calendars").Тип.Свойства.Получить("Calendar").Тип.Свойства.Получить("WeekDays").Тип.Свойства.Получить("WeekDay").Тип;
КонецФункции

Функция XDTOТипWorkingTime(ФабрикаXDTO)
	Возврат XDTOТипProject(ФабрикаXDTO).Свойства.Получить("Calendars").Тип.Свойства.Получить("Calendar").Тип.Свойства.Получить("WeekDays").Тип.Свойства.Получить("WeekDay").Тип.Свойства.Получить("WorkingTimes").Тип.Свойства.Получить("WorkingTime").Тип;
КонецФункции

Функция XDTOТипExtendedAttribute(ФабрикаXDTO)
	Возврат XDTOТипTask(ФабрикаXDTO).Свойства.Получить("ExtendedAttribute").Тип;
КонецФункции

Функция XDTOТипExtendedAttributes(ФабрикаXDTO)
	Возврат XDTOТипProject(ФабрикаXDTO).Свойства.Получить("ExtendedAttributes").Тип;
КонецФункции

Функция XDTOТипProjectExtendedAttribute(ФабрикаXDTO)
	Возврат XDTOТипProject(ФабрикаXDTO).Свойства.Получить("ExtendedAttributes").Тип.Свойства.Получить("ExtendedAttribute").Тип;
КонецФункции

Функция XDTOТипProjectOutlineCodes(ФабрикаXDTO)
	Возврат XDTOТипProject(ФабрикаXDTO).Свойства.Получить("OutlineCodes").Тип;
КонецФункции

Функция XDTOТипProjectOutlineCode(ФабрикаXDTO)
	Возврат XDTOТипProjectOutlineCodes(ФабрикаXDTO).Свойства.Получить("OutlineCode").Тип;
КонецФункции

Функция XDTOТипProjectMasks(ФабрикаXDTO)
	Возврат XDTOТипProjectOutlineCode(ФабрикаXDTO).Свойства.Получить("Masks").Тип;
КонецФункции

Функция XDTOТипProjectMask(ФабрикаXDTO)
	Возврат XDTOТипProjectMasks(ФабрикаXDTO).Свойства.Получить("Mask").Тип;
КонецФункции

Функция XDTOТипProjectOutlineCodeValues(ФабрикаXDTO)
	Возврат XDTOТипProjectOutlineCode(ФабрикаXDTO).Свойства.Получить("Values").Тип;
КонецФункции

Функция XDTOТипProjectOutlineCodeValue(ФабрикаXDTO)
	Возврат XDTOТипProjectOutlineCodeValues(ФабрикаXDTO).Свойства.Получить("Value").Тип;
КонецФункции


Функция XDTOШаблонTask(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипTask(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонResource(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипResource(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонAssignment(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипAssignment(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонCalendar(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипCalendar(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонWeekDay(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипWeekDay(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонWorkingTime(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипWorkingTime(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонExtendedAttribute(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипExtendedAttribute(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонExtendedAttributes(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипExtendedAttributes(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонProjectExtendedAttribute(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипProjectExtendedAttribute(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонProjectOutlineCodes(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипProjectOutlineCodes(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонProjectOutlineCode(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипProjectOutlineCode(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонProjectMasks(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипProjectMasks(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонProjectMask(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипProjectMask(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонProjectOutlineCodeValues(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипProjectOutlineCodeValues(ФабрикаXDTO));
КонецФункции

Функция XDTOШаблонProjectOutlineCodeValue(ФабрикаXDTO)
	Возврат ФабрикаXDTO.Создать(XDTOТипProjectOutlineCodeValue(ФабрикаXDTO));
КонецФункции



Процедура ЗаполнитьПроектПоУмолчанию(ProjectXDTO)
	ЗаполнитьЗначенияСвойств(ProjectXDTO, СвойстваПроектаПоУмолчанию());
КонецПроцедуры

Процедура ЗаполнитьРесурсПоУмолчанию(ResourceXDTO)
	ЗаполнитьЗначенияСвойств(ResourceXDTO, СвойстваРесурсаПоУмолчанию());
КонецПроцедуры

Процедура ЗаполнитьЗадачуПоУмолчанию(TaskXDTO)
	ЗаполнитьЗначенияСвойств(TaskXDTO, СвойстваЗадачиПоУмолчанию());
КонецПроцедуры

Процедура ЗаполнитьНазначениеПоУмолчанию(AssXDTO)
	ЗаполнитьЗначенияСвойств(AssXDTO, СвойстваНазначенияПоУмолчанию());
КонецПроцедуры


Функция СвойстваПроектаПоУмолчанию()
	СвойстваПроектаПоУмолчанию = Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствПроектаВсе(),
	12, // SaveVersion
	"1С.xml", // Name 
	"1С", // Company 
	"1С", // Author 
	ТекущаяДата(), // CreationDate 
	ТекущаяДата(), // LastSaved 
	1, // ScheduleFromStart 
	ТекущаяДата(), // StartDate 
	ТекущаяДата(), // FinishDate 
	1, // FYStartDate 
	0, // CriticalSlackLimit 
	2, // CurrencyDigits 
	Символ(1088)+".", // CurrencySymbol 
	"RUR", // CurrencyCode 
	1, // CurrencySymbolPosition 
	1, // CalendarUID 
	Дата(1,1,1,9,0,0), // DefaultStartTime 
	Дата(1,1,1,18,0,0), // DefaultFinishTime 
	480, // MinutesPerDay 
	2400, // MinutesPerWeek 
	20, // DaysPerMonth 
	0, // DefaultTaskType 
	3, // DefaultFixedCostAccrual 
	0, // DefaultStandardRate 
	0, // DefaultOvertimeRate 
	7, // DurationFormat 
	2, // WorkFormat 
	0, // EditableActualCosts 
	0, // HonorConstraints 
	1, // InsertedProjectsLikeSummary 
	0, // MultipleCriticalPaths 
	0, // NewTasksEffortDriven 
	1, // NewTasksEstimated 
	1, // SplitsInProgressTasks 
	0, // SpreadActualCost 
	0, // SpreadPercentComplete 
	1, // TaskUpdatesResource 
	0, // FiscalYearStart 
	1, // WeekStartDay 
	0, // MoveCompletedEndsBack 
	0, // MoveRemainingStartsBack 
	0, // MoveRemainingStartsForward 
	0, // MoveCompletedEndsForward 
	0, // BaselineForEarnedValue 
	1, // AutoAddNewResourcesAndTasks 
	ТекущаяДата(), // CurrentDate 
	1, // MicrosoftProjectServerURL 
	0, // Autolink 
	0, // NewTaskStartDate 
	1, // NewTasksAreManual    // True, если новые задачи создаются c режимом назначений вручную. 
										// False, если режим автоматически по расписанию. Boolean.
	0, // DefaultTaskEVMethod 
	0, // ProjectExternallyEdited 
	ТекущаяДата(), // ExtendedCreationDate 
	1, // ActualsInSync 
	0, // RemoveFileProperties 
	0, // AdminProject 
	1, // UpdateManuallyScheduledTasksWhenEditingLinks 
	0 // KeepTaskOnNearestWorkingTimeWhenMadeAutoScheduled
);
	Возврат СвойстваПроектаПоУмолчанию;
КонецФункции

Функция СвойстваРесурсаПоУмолчанию()
	СвойстваРесурсаПоУмолчанию = Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствРесурсаВсе(),
			0,				// UID 
			0,				// ID
			"ИмяРесурса",	// Name
			"ГруппаРесурса",	// Group
			0,				// Type 
			0,				// IsNull 
			1.00,			// MaxUnits 
			0.00,			// PeakUnits 
			0,				// OverAllocated 
			1,				// CanLevel 
			3,				// AccrueAt 
			"PT0H0M0S",				// Work (Duration)
			"PT0H0M0S",				// RegularWork (Duration)
			"PT0H0M0S",				// OvertimeWork (Duration)
			"PT0H0M0S",				// ActualWork (Duration)
			"PT0H0M0S",				// RemainingWork (Duration)
			"PT0H0M0S",				// ActualOvertimeWork (Duration)
			"PT0H0M0S",				// RemainingOvertimeWork (Duration)
			0,				// PercentWorkComplete 
			0,				// StandardRate 
			2,				// StandardRateFormat 
			0,				// Cost 
			0,				// OvertimeRate 
			2,				// OvertimeRateFormat 
			0,				// OvertimeCost 
			0,				// CostPerUse 
			0,				// ActualCost 
			0,				// ActualOvertimeCost 
			0,				// RemainingCost 
			0,				// RemainingOvertimeCost 
			0.00,			// WorkVariance 
			0,				// CostVariance 
			0.00,			// SV 
			0.00,			// CV 
			0.00,			// ACWP 
			2,				// CalendarUID 
			0.00,			// BCWS 
			0.00,			// BCWP 
			0,				// IsGeneric 
			0,				// IsInactive 
			0,				// IsEnterprise 
			0,				// BookingType 
			ТекущаяДата(),	// CreationDate 
			0,				// IsCostResource 
			0				// IsBudget 
);
	Возврат СвойстваРесурсаПоУмолчанию;
КонецФункции

Функция СвойстваЗадачиПоУмолчанию()
	СвойстваРесурсаПоУмолчанию = Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствЗадачиВсе(),
			0, // UID 
			0, // ID 
			1, // Active 
			1, // 0, // Manual 
			1, // Type 
			0, // IsNull 
			ТекущаяДата(), // CreateDate 
			1,// 0, // WBS 
			1, // OutlineNumber 
			1, // OutlineLevel 
			500, // Priority 
			ТекущаяДата(), // Start 
			ТекущаяДата(), // Finish 
			"PT0H0M0S", // Duration  (Duration)
			ТекущаяДата(), // ManualStart 
			ТекущаяДата(), // ManualFinish 
			"PT0H0M0S", // ManualDuration  (Duration)
			53, // DurationFormat 
			"PT0H0M0S", // Work  (Duration)
			0, // ResumeValid 
			0, // EffortDriven 
			0, // Recurring 
			0, // OverAllocated 
			1, // Estimated 
			0,// 0, // Milestone 
			0,// 1, // Summary 
			0, // DisplayAsSummary 
			0, // Critical 
			0, // IsSubproject 
			0, // IsSubprojectReadOnly 
			0, // ExternalTask 
			ТекущаяДата(), // EarlyStart 
			ТекущаяДата(), // EarlyFinish 
			ТекущаяДата(), // LateStart 
			ТекущаяДата(), // LateFinish 
			0, // StartVariance 
			0, // FinishVariance 
			0.00, // WorkVariance 
			0, // FreeSlack 
			0, // TotalSlack 
			0, // StartSlack 
			0, // FinishSlack 
			0, // FixedCost 
			3, // FixedCostAccrual 
			0, // PercentComplete 
			0, // PercentWorkComplete 
			0, // Cost 
			0, // OvertimeCost 
			"PT0H0M0S", // OvertimeWork  (Duration)
			"PT0H0M0S", // ActualDuration  (Duration)
			0, // ActualCost 
			0, // ActualOvertimeCost 
			"PT0H0M0S", // ActualWork  (Duration)
			"PT0H0M0S", // ActualOvertimeWork  (Duration)
			"PT0H0M0S", // RegularWork  (Duration)
			"PT0H0M0S", // RemainingDuration  (Duration)
			0, // RemainingCost 
			"PT0H0M0S", // RemainingWork  (Duration)
			0, // RemainingOvertimeCost 
			"PT0H0M0S", // RemainingOvertimeWork  (Duration)
			0.00, // ACWP 
			0.00, // CV 
			0, // ConstraintType 
		   -1, // CalendarUID 
			1, // LevelAssignments 
			1, // LevelingCanSplit 
			0, // LevelingDelay 
			8, // LevelingDelayFormat 
			0, // IgnoreResourceCalendar 
			0, // HideBar 
			0, // Rollup 
			0.00, // BCWS 
			0.00, // BCWP 
			0, // PhysicalPercentComplete 
			0, // EarnedValueMethod 
			0, // IsPublished 
			"PT0H0M0S", // ManualDuration
			0 // CommitmentType 
);
	Возврат СвойстваРесурсаПоУмолчанию;
КонецФункции

Функция СвойстваНазначенияПоУмолчанию()
	СвойстваНазначенияПоУмолчанию = Новый Структура(торо_ИнтеграцияСmsProjectКлиентСервер.СтрокаСвойствНазначенияВсе(),
			  2, // UID 
  1, // TaskUID 
  31, // ResourceUID 
  0, // PercentWorkComplete 
  0, // ActualCost 
  0, // ActualOvertimeCost 
  "PT0H0M0S", // ActualOvertimeWork 
  "PT0H0M0S", // ActualWork 
  0.00, // ACWP 
  0, // Confirmed 
  0, // Cost 
  0, // CostRateTable 
  0, // RateScale 
  0, // CostVariance 
  0.00, // CV 
  0, // Delay 
  ТекущаяДата(), // Finish 
  0, // FinishVariance 
  1, // HasFixedRateUnits 
  0, // FixedMaterial 
  0, // LevelingDelay 
  7, // LevelingDelayFormat 
  0, // LinkedFields 
  0, // Milestone 
  0, // Overallocated 
  0, // OvertimeCost 
  "PT0H0M0S", // OvertimeWork 
  "PT0H0M0S", // RegularWork 
  0, // RemainingCost 
  0, // RemainingOvertimeCost 
  "PT0H0M0S", // RemainingOvertimeWork 
  "PT0H0M0S", // RemainingWork 
  0, // ResponsePending 
  ТекущаяДата(), // Start 
  0, // StartVariance 
  1, // Units 
  0, // UpdateNeeded 
  0.00, // VAC 
  "PT0H0M0S", // Work 
  0, // WorkContour 
  0.00, // BCWS 
  0.00, // BCWP 
  0, // BookingType 
  ТекущаяДата(), // CreationDate 
  0, // BudgetCost 
  "PT0H0M0S" // BudgetWork  
  );
	Возврат СвойстваНазначенияПоУмолчанию;
КонецФункции

Процедура СоздатьКоллекциюКалендарей(локФабрикаXDTO, ОбъектPrjct)
	
	КонтейнерКалендарей = локФабрикаXDTO.Создать(XDTOТипProject(локФабрикаXDTO).Свойства.Получить("Calendars").Тип);
	ОбъектPrjct.Calendars = КонтейнерКалендарей;
	ОбъектClndrBase = XDTOШаблонCalendar(локФабрикаXDTO);
	ОбъектClndrBase.UID=1;
	ОбъектClndrBase.Name = "Стандартный";
	ОбъектClndrBase.IsBaseCalendar = 1;
	ОбъектClndrBase.IsBaselineCalendar = 0;
	ОбъектClndrBase.BaseCalendarUID = -1;
	КонтейнерДнейНедели = локФабрикаXDTO.Создать(XDTOТипProject(локФабрикаXDTO).Свойства.Получить("Calendars").Тип.Свойства.Получить("Calendar").Тип.Свойства.Получить("WeekDays").Тип);
	ОбъектClndrBase.WeekDays = КонтейнерДнейНедели;
	Для День = 1 по 7 Цикл
		
		ОбъектWkD = XDTOШаблонWeekDay(локФабрикаXDTO);
		
		ОбъектWkD.DayType = День;
		Если День <> 1 И День <> 7 Тогда
			
			ОбъектWkD.DayWorking = 1;
			КонтейнерРабочихЧасов = локФабрикаXDTO.Создать(XDTOТипProject(локФабрикаXDTO).Свойства.Получить("Calendars").Тип.Свойства.Получить("Calendar").Тип.Свойства.Получить("WeekDays").Тип.Свойства.Получить("WeekDay").Тип.Свойства.Получить("WorkingTimes").Тип);
			ОбъектWkD.WorkingTimes = КонтейнерРабочихЧасов;
			
			ОбъектWkngTms09_13 = XDTOШаблонWorkingTime(локФабрикаXDTO);
			ОбъектWkngTms09_13.FromTime = Дата(1,1,1, 9,0,0);
			ОбъектWkngTms09_13.ToTime   = Дата(1,1,1,13,0,0);

			ОбъектWkngTms14_18 = XDTOШаблонWorkingTime(локФабрикаXDTO);
			ОбъектWkngTms14_18.FromTime = Дата(1,1,1,14,0,0);
			ОбъектWkngTms14_18.ToTime   = Дата(1,1,1,18,0,0);
			
			ОбъектWkD.WorkingTimes.WorkingTime.Добавить(ОбъектWkngTms09_13);
			ОбъектWkD.WorkingTimes.WorkingTime.Добавить(ОбъектWkngTms14_18);
			
		Иначе
			ОбъектWkD.DayWorking = 0;
			
		КонецЕсли;
		
		ОбъектClndrBase.WeekDays.WeekDay.Добавить(ОбъектWkD);
		
	КонецЦикла;
	
	ОбъектPrjct.Calendars.Calendar.Добавить(ОбъектClndrBase);
	
КонецПроцедуры

Функция ТекстФайлаXML(Данные) Экспорт
	
	ТекстФайлаXML = "";
	ТекстДок = ОбщийТекстовыйМакет("EmptyProjectXMLDoc");
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(ТекстДок.ПолучитьТекст());

	локФабрикаXDTO = ПолучитьФабрикуИзМакета("ProjectXMLSchema");
	ДанныеXDTO = локФабрикаXDTO.ПрочитатьXML(ЧтениеXML);
	
	ОбъектPrjct = ПолучитьОбъектXDTO("http://schemas.microsoft.com/project/2010", "Project");
	ЗаполнитьПроектПоУмолчанию(ОбъектPrjct);
	
	СоответствиеValueGuid = Новый Соответствие;
	
	СвойстваПроекта = Данные.Получить("СвойстваПроекта");
	Если СвойстваПроекта <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ОбъектPrjct, СвойстваПроекта);
		
		Если СвойстваПроекта.Свойство("ИДЗадач") Тогда
			ИдентификаторСпискаИДЗадач = Новый УникальныйИдентификатор;
			
			OutlineCodes = XDTOШаблонProjectOutlineCodes(локФабрикаXDTO);
			OutlineCode = XDTOШаблонProjectOutlineCode(локФабрикаXDTO);
			OutlineCode.Guid = XMLСтрока(ИдентификаторСпискаИДЗадач);
			OutlineCode.Enterprise = XMLСтрока(0);
			OutlineCode.ShowIndent = XMLСтрока(1);
			OutlineCode.ResourceSubstitutionEnabled = XMLСтрока(0);
			OutlineCode.LeafOnly = XMLСтрока(0);
			OutlineCode.AllLevelsRequired = XMLСтрока(0);
			OutlineCode.OnlyTableValuesAllowed = XMLСтрока(1);
			
			Masks = XDTOШаблонProjectMasks(локФабрикаXDTO);
			Mask = XDTOШаблонProjectMask(локФабрикаXDTO);
			Mask.Level = XMLСтрока(1);
			Mask.Type = XMLСтрока(3);
			Mask.Length = XMLСтрока(0);
			Mask.Separator = XMLСтрока(".");
			Masks.Mask.Add(Mask);
			OutlineCode.Masks = Masks;
			
			Values = XDTOШаблонProjectOutlineCodeValues(локФабрикаXDTO);
			Индекс = 1;
			Для каждого ИДЗадачи из СвойстваПроекта.ИДЗадач Цикл
				FieldGUID = Новый УникальныйИдентификатор;
				СоответствиеValueGuid.Вставить(ИДЗадачи, FieldGUID);
				
				Value = XDTOШаблонProjectOutlineCodeValue(локФабрикаXDTO);
				Value.ValueID = XMLСтрока(Индекс);
				Value.FieldGUID = XMLСтрока(FieldGUID);
				Value.ParentValueID = XMLСтрока(0);
				Value.Type = XMLСтрока(21);
				Value.IsCollapsed = XMLСтрока(0);
				Value.Value = XMLСтрока(ИДЗадачи);
				Values.Value.Add(Value);
				Индекс = Индекс + 1;
			КонецЦикла;
			OutlineCode.Values = Values;
			
			OutlineCodes.OutlineCode.Add(OutlineCode);
			ОбъектPrjct.OutlineCodes = OutlineCodes;
			
			ExtendedAttributes = XDTOШаблонExtendedAttributes(локФабрикаXDTO);
			ExtendedAttribute = XDTOШаблонProjectExtendedAttribute(локФабрикаXDTO);
			ExtendedAttribute.FieldID = XMLСтрока(188744016); // Text30
			ExtendedAttribute.FieldName = XMLСтрока("Текст30");
			ExtendedAttribute.Alias = XMLСтрока("TasksID");
			ExtendedAttribute.Ltuid = XMLСтрока(ИдентификаторСпискаИДЗадач);
			ExtendedAttribute.Guid = XMLСтрока(Новый УникальныйИдентификатор);
			ExtendedAttributes.ExtendedAttribute.Add(ExtendedAttribute);
			
			ExtendedAttribute = XDTOШаблонProjectExtendedAttribute(локФабрикаXDTO);
			ExtendedAttribute.FieldID = XMLСтрока(188744015); // Text29
			ExtendedAttribute.FieldName = XMLСтрока("Текст29");
			ExtendedAttribute.Alias = XMLСтрока("Источник");
			ExtendedAttribute.Guid = XMLСтрока(Новый УникальныйИдентификатор);
			ExtendedAttributes.ExtendedAttribute.Add(ExtendedAttribute);

			ОбъектPrjct.ExtendedAttributes = ExtendedAttributes;
		КонецЕсли;
	КонецЕсли;
	
	Задача = XDTOШаблонTask(локФабрикаXDTO);
	
	Ресурсы = Данные.Получить("Ресурсы");
	ствРесурсИД = Новый Соответствие;
	
	КонтейнерКалендарей = локФабрикаXDTO.Создать(XDTOТипProject(локФабрикаXDTO).Свойства.Получить("Calendars").Тип);
	ОбъектPrjct.Calendars = КонтейнерКалендарей;

	// Добавляем календарь
	СоздатьКоллекциюКалендарей(локФабрикаXDTO, ОбъектPrjct);
	
	// Грузим ресурсы
	Если Ресурсы <> Неопределено Тогда
		
		ИД = 1;
		КонтейнерРесурсов = локФабрикаXDTO.Создать(XDTOТипProject(локФабрикаXDTO).Свойства.Получить("Resources").Тип);
		ОбъектPrjct.Resources = КонтейнерРесурсов;
		Для каждого кзРесурс из Ресурсы Цикл
			
			// Создадим календарь
			ОбъектClndrChild = XDTOШаблонCalendar(локФабрикаXDTO);
			ОбъектClndrChild.UID=ИД;
			ОбъектClndrChild.Name = кзРесурс.Значение.Name;
			ОбъектClndrChild.IsBaseCalendar = 0;
			ОбъектClndrChild.IsBaselineCalendar = 0;
			ОбъектClndrChild.BaseCalendarUID = 1;

			ОбъектPrjct.Calendars.Calendar.Добавить(ОбъектClndrChild);
			
			Свойства = кзРесурс.Значение;
			
			ОбъектRsrc = XDTOШаблонResource(локФабрикаXDTO); 
			ЗаполнитьРесурсПоУмолчанию(ОбъектRsrc);
			ОбъектRsrc.UID = ИД;
			ОбъектRsrc.ID = ИД;
			ОбъектRsrc.CalendarUID = ИД;
			
			кзРесурс.Значение.Type = ?(кзРесурс.Значение.Type = 1,0,1);
			
			ЗаполнитьЗначенияСвойств(ОбъектRsrc, кзРесурс.Значение);
			
			ОбъектPrjct.Resources.Resource.Добавить(ОбъектRsrc);
			
			ствРесурсИД.Вставить(кзРесурс.Ключ, Новый Структура("ID, FixedMaterial", ИД, кзРесурс.Значение.Type));
			
			ИД = ИД + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	//
	// Грузим задачи...
	пЗадачи = Данные.Получить("Задачи");
	ПустаяЗадача = Данные.Получить("ПустаяЗадача");
	
	КонтейнерЗадач = локФабрикаXDTO.Создать(XDTOТипProject(локФабрикаXDTO).Свойства.Получить("Tasks").Тип);
	ОбъектPrjct.Tasks = КонтейнерЗадач;
		
	КонтейнерНазначений = локФабрикаXDTO.Создать(XDTOТипProject(локФабрикаXDTO).Свойства.Получить("Assignments").Тип);
	ОбъектPrjct.Assignments = КонтейнерНазначений;
	
	Если ПустаяЗадача <> Неопределено Тогда
		
		ОбъектTsc = XDTOШаблонTask(локФабрикаXDTO); 
		ЗаполнитьЗадачуПоУмолчанию(ОбъектTsc);
		ОбъектTsc.UID = 0;
		ОбъектTsc.ID = 0;
		
		ЗаполнитьЗначенияСвойств(ОбъектTsc, ПустаяЗадача);
								
		ОбъектTsc.EarlyStart   = ПустаяЗадача.Start;
		ОбъектTsc.EarlyFinish  = ПустаяЗадача.Finish;
		ОбъектTsc.LateStart    = ПустаяЗадача.Start;
		ОбъектTsc.LateFinish   = ПустаяЗадача.Finish;
		ОбъектTsc.ManualStart  = ПустаяЗадача.Start;
		ОбъектTsc.ManualFinish = ПустаяЗадача.Finish;
		ОбъектTsc.ManualDuration = ПустаяЗадача.Duration;
		ОбъектTsc.RemainingDuration = ПустаяЗадача.Duration;
		ОбъектTsc.RegularWork = ПустаяЗадача.Work;
		ОбъектTsc.RemainingWork = ПустаяЗадача.Work;
		ОбъектTsc.Type = 0;
		ОбъектTsc.Milestone = 0;
		
		ОбъектTsc.Summary = 1;
		ОбъектTsc.OutlineLevel  = 0;
		ОбъектTsc.OutlineNumber = 0;
		ОбъектTsc.WBS           = 0;
		ОбъектTsc.CommitmentType = 0;
		
		ОбъектPrjct.Tasks.Task.Добавить(ОбъектTsc);
		
	КонецЕсли;
	
	Если пЗадачи <> Неопределено Тогда
		
		ИД = 1; ИДНазнач = 1;
		
		Для каждого кзЗадача из пЗадачи Цикл
			
			Свойства = кзЗадача.Значение;
			
			ОбъектTsc = XDTOШаблонTask(локФабрикаXDTO); 
			ЗаполнитьЗадачуПоУмолчанию(ОбъектTsc);
			ОбъектTsc.Name = "";
			ОбъектTsc.UID = ИД;
			ОбъектTsc.ID = ИД;
			ОбъектTsc.EarlyStart  = кзЗадача.Значение.Start;
			ОбъектTsc.EarlyFinish = кзЗадача.Значение.Finish;
			ОбъектTsc.LateStart  = кзЗадача.Значение.Start;
			ОбъектTsc.LateFinish = кзЗадача.Значение.Finish;
			ОбъектTsc.ManualStart  = кзЗадача.Значение.Start;
			ОбъектTsc.ManualFinish = кзЗадача.Значение.Finish;
			ОбъектTsc.ManualDuration = кзЗадача.Значение.Duration;
			ОбъектTsc.RemainingDuration = кзЗадача.Значение.Duration;
			ОбъектTsc.RegularWork = кзЗадача.Значение.Work;
			ОбъектTsc.RemainingWork = кзЗадача.Значение.Work;
			ОбъектTsc.Milestone = 0;
			ОбъектTsc.CommitmentType = 0;
			ЗаполнитьЗначенияСвойств(ОбъектTsc, кзЗадача.Значение);
			
			ОбъектTsc.OutlineNumber = ИД;
			
			ExtendedAttribute = XDTOШаблонExtendedAttribute(локФабрикаXDTO);
			ExtendedAttribute.FieldID = XMLСтрока(188744016); // Text30
			ExtendedAttribute.Value   = XMLСтрока(кзЗадача.Значение.Text30);
			ExtendedAttribute.ValueGUID   = XMLСтрока(СоответствиеValueGuid[кзЗадача.Значение.Text30]);
			
			ОбъектTsc.ExtendedAttribute.Add(ExtendedAttribute);
			
			ExtendedAttribute = XDTOШаблонExtendedAttribute(локФабрикаXDTO);
			ExtendedAttribute.FieldID = XMLСтрока(188744015); // Text29
			ExtendedAttribute.Value   = XMLСтрока(кзЗадача.Значение.Text29);
			
			ОбъектTsc.ExtendedAttribute.Add(ExtendedAttribute);
			
			ОбъектPrjct.Tasks.Task.Добавить(ОбъектTsc);
			
			/// ... и назначения
			Назначения = Свойства.Назначения;
			
			Если Назначения <> Неопределено Тогда
				
				Для каждого кзНазначение из Назначения Цикл
					
					СвойстваНазначения = кзНазначение;
					
					СтуктураДанных = ствРесурсИД.Получить(СвойстваНазначения.Ресурс);
					
					Если СтуктураДанных <> Неопределено Тогда
						IDресурса = СтуктураДанных.ID;
						
						ОбъектAss = XDTOШаблонAssignment(локФабрикаXDTO);
						ЗаполнитьНазначениеПоУмолчанию(ОбъектAss);
						
						ОбъектAss.UID           = ИДНазнач;
						ОбъектAss.TaskUID       = ИД;
						ОбъектAss.ResourceUID   = IDресурса;
						ОбъектAss.FixedMaterial = СтуктураДанных.FixedMaterial;
						
						Если Не СтуктураДанных.FixedMaterial = 1 Тогда        // для трудозатрат
							ЦелаяЧасть   = Цел(СвойстваНазначения.Units);
							ДробнаяЧасть = Сред(Формат((СвойстваНазначения.Units - ЦелаяЧасть) * 60, "ЧЦ=2; ЧН=0"),0,2);
							
							Работа = "PT" +  Строка(ЦелаяЧасть) + "H" + ДробнаяЧасть + "M0S";
											
							ОбъектAss.RegularWork   = XMLСтрока(Работа);
							ОбъектAss.RemainingWork = XMLСтрока(Работа);
							ОбъектAss.Work          = XMLСтрока(Работа);
							
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(ОбъектAss, СвойстваНазначения);
						
						ОбъектPrjct.Assignments.Assignment.Добавить(ОбъектAss);
						
						ИДНазнач = ИДНазнач + 1;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ИД = ИД + 1;

		КонецЦикла;
		
	КонецЕсли;
	
	ИмяВременногоTXTФайла = ПолучитьИмяВременногоФайла("txt");
	ИмяВременногоXMLФайла = ПолучитьИмяВременногоФайла("xml");
	
	МойXML = Новый ЗаписьXML;
	ПараметрыЗаписиXML = Новый ПараметрыЗаписиXML("UTF-16", "1.0", ИСТИНА, ИСТИНА, Символы.Таб);
	МойXML.ОткрытьФайл(ИмяВременногоTXTФайла, ПараметрыЗаписиXML);
	МойXML.ЗаписатьОбъявлениеXML();

	локФабрикаXDTO.ЗаписатьXML(МойXML, ОбъектPrjct);

	МойXML.Закрыть();
	
	ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоTXTФайла, "UTF-16");
	ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоXMLФайла, "UTF-16");
	
	// читаем файл для замены значений
	
	ТекстФайлаXML = ЧтениеТекста.Прочитать();
	ТекстФайлаXML = СтрЗаменить(ТекстФайлаXML, "true" , 1);
	ТекстФайлаXML = СтрЗаменить(ТекстФайлаXML, "false", 0);
	ЗаписьТекста.Записать(ТекстФайлаXML);
	ЗаписьТекста.Закрыть();
	ЧтениеТекста.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоXMLФайла);
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	УдалитьФайлы(ИмяВременногоXMLФайла);
	УдалитьФайлы(ИмяВременногоTXTФайла);
	
	Возврат ПутьВоВременномХранилище;
	
КонецФункции

#КонецОбласти

#Область ЗАГРУЗКА_ИЗ_PROJECT

Функция ОбработатьСоответствиеСДанными(Данные, ОбновленныеДокументы) Экспорт
	
	Ошибки = "";
	
	ствЗадачи = Данные.Получить("Задачи");
	ствРесурсы = Данные.Получить("Ресурсы");
	ствНазначения = Данные.Получить("Назначения");
	
	Если Данные.Получить("НетЗадач") = Истина Тогда
		Возврат "Данный файл не содержит информации по ремонтам.";
	КонецЕсли; 
	
	МассивИдентификаторов = Новый Массив;
	Для каждого кзЗадача из ствЗадачи Цикл
		МассивИдентификаторов.Добавить(кзЗадача.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК Заявка
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		|ГДЕ
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ID В(&МассивID)";
	
	Запрос.УстановитьПараметр("МассивID", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		обЗаявка = Выборка.Заявка.ПолучитьОбъект();
		Для каждого Ремонт из обЗаявка.РемонтыОборудования Цикл
			
			ИзмененныеДанные = ствЗадачи.Получить(Ремонт.ID);
			Если ИзмененныеДанные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Ремонт.ДатаНачала    = ИзмененныеДанные.Start;
			Ремонт.ДатаОкончания = ИзмененныеДанные.Finish;
			
		КонецЦикла;
		
		Попытка
			обЗаявка.Записать();
		Исключение
			Ошибки = Ошибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + Символы.ПС;
		КонецПопытки;
		
		ОбновленныеДокументы.Добавить(Выборка.Заявка);
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

Функция ОбработатьСоответствиеСДаннымиОст(Данные, ОбновленныеДокументы) Экспорт
	
	Ошибки = "";
	
	ствЗадачи = Данные.Получить("Задачи");
	ствРесурсы = Данные.Получить("Ресурсы");
	ствНазначения = Данные.Получить("Назначения");
	
	Если Данные.Получить("НетЗадач") = Истина Тогда
		Возврат "Данный файл не содержит информации по ремонтам.";
	КонецЕсли; 
	
	МассивИдентификаторов = Новый Массив;
	Для каждого кзЗадача из ствЗадачи Цикл
		МассивИдентификаторов.Добавить(кзЗадача.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка КАК ОстЗаявка
		|ИЗ
		|	Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ОстановочныеРемонтыСвязанныеРемонты
		|ГДЕ
		|	торо_ОстановочныеРемонтыСвязанныеРемонты.ID В(&МассивID)";
	
	Запрос.УстановитьПараметр("МассивID", МассивИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		обОстЗаявка = Выборка.ОстЗаявка.ПолучитьОбъект();
		Для каждого Ремонт из обОстЗаявка.СвязанныеРемонты Цикл
			
			ИзмененныеДанные = ствЗадачи.Получить(Ремонт.ID);
			Если ИзмененныеДанные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Ремонт.ДатаНачалаРемонта    = ИзмененныеДанные.Start;
			Ремонт.ДатаОкончанияРемонта = ИзмененныеДанные.Finish;
			
		КонецЦикла;
		
		Попытка
			обОстЗаявка.Записать();
		Исключение
			Ошибки = Ошибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + Символы.ПС;
		КонецПопытки;
		
		ОбновленныеДокументы.Добавить(Выборка.ОстЗаявка);
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции

Функция ОбработатьСоответствиеСДаннымиПланРабот(Данные, ОбновленныеДокументы) Экспорт
	
	Ошибки = "";
	
	ствЗадачи = Данные.Получить("Задачи");
	ствРесурсы = Данные.Получить("Ресурсы");
	ствНазначения = Данные.Получить("Назначения");
	
	Если Данные.Получить("НетЗадач") = Истина Тогда
		Возврат "Данный файл не содержит информации по ремонтам.";
	КонецЕсли; 
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(36,ДопустимаяДлина.Переменная)));
	ТаблицаИдентификаторов.Колонки.Добавить("Источник", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(100,ДопустимаяДлина.Переменная)));
	Для каждого кзЗадача из ствЗадачи Цикл
		НовСтр = ТаблицаИдентификаторов.Добавить();
		НовСтр.ID = кзЗадача.Ключ;
		НовСтр.Источник = кзЗадача.Значение.Text29;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаИдентификаторов.ID,
	               |	ТаблицаИдентификаторов.Источник
	               |ПОМЕСТИТЬ ТаблицаИдентификаторов
	               |ИЗ
	               |	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК Документ
	               |ИЗ
	               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
	               |ГДЕ
	               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID В
	               |			(ВЫБРАТЬ
	               |				ТаблицаИдентификаторов.ID
	               |			ИЗ
	               |				ТаблицаИдентификаторов
	               |			ГДЕ
	               |				ТаблицаИдентификаторов.Источник = ""ЗаявкаНаРемонт"")
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка
	               |ИЗ
	               |	Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
	               |ГДЕ
	               |	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID В
	               |			(ВЫБРАТЬ
	               |				ТаблицаИдентификаторов.ID
	               |			ИЗ
	               |				ТаблицаИдентификаторов
	               |			ГДЕ
	               |				ТаблицаИдентификаторов.Источник = ""РМ"")";
				   
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		обДокумент = Выборка.Документ.ПолучитьОбъект();
		Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
			
			Для каждого Ремонт из обДокумент.ПланРемонтов Цикл
				
				ИзмененныеДанные = ствЗадачи.Получить(Ремонт.ID);
				Если ИзмененныеДанные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Ремонт.ДатаНач    = ИзмененныеДанные.Start;
				Ремонт.ДатаКон = ИзмененныеДанные.Finish;
				
			КонецЦикла;
			
		Иначе
			
			Для каждого Ремонт из обДокумент.РемонтыОборудования Цикл
				
				ИзмененныеДанные = ствЗадачи.Получить(Ремонт.ID);
				Если ИзмененныеДанные = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				Ремонт.ДатаНачала    = ИзмененныеДанные.Start;
				Ремонт.ДатаОкончания = ИзмененныеДанные.Finish;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Попытка
			обДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Ошибки = Ошибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) + Символы.ПС + Символы.ПС;
		КонецПопытки;
		
		ОбновленныеДокументы.Добавить(Выборка.Документ);
	КонецЦикла;
	
	Возврат Ошибки;
	
КонецФункции


Функция ОбщийТекстовыйМакет(ИмяМакета) Экспорт
	Возврат ПолучитьОбщийМакет(ИмяМакета);
КонецФункции

#КонецОбласти
