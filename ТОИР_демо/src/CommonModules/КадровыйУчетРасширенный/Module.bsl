////////////////////////////////////////////////////////////////////////////////
// КадровыйУчетРасширенный: Процедуры и функции подсистемы Кадровый учет
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Получает сотрудников, работающих в указанной организации по списку физических лиц.
// Соответствие между сотрудниками и физическими лицами не устанавливается.
//
// Параметры:
//		ФизическиеЛица - Массив - массив физ. лиц.
//		Организация - СправочникСсылка.Организации - организация
//		ОтбиратьПоГоловнойОрганизации - Булево - (необязательный) по умолчанию Истина, 
//				см. комментарий к методу КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
//		РаботникиПоДоговорамГПХ - Неопределено - не используется.
//
// Возвращаемое значение:
//		Массив - массив сотрудников.
//
Функция СотрудникиФизическихЛиц(ФизическиеЛица, Организация, ОтбиратьПоГоловнойОрганизации = Истина, РаботникиПоДоговорамГПХ = Неопределено) Экспорт
	
	ПараметрыЗапроса = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыЗапроса.СписокФизическихЛиц = ФизическиеЛица;
	ПараметрыЗапроса.Организация = Организация;
	ПараметрыЗапроса.ОтбиратьПоГоловнойОрганизации = ОтбиратьПоГоловнойОрганизации;
	ПараметрыЗапроса.РаботникиПоДоговорамГПХ = РаботникиПоДоговорамГПХ;
	
	СотрудникиОрганизации = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыЗапроса);
	
	Возврат ОбщегоНазначения.ВыгрузитьКолонку(СотрудникиОрганизации, "Сотрудник", Истина);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Формирование временных таблиц с кадровыми данными

// Функция формирует временную таблицу с кадровыми данными. 
// Параметры:
//		ТолькоРазрешенные - Булево - только разрешенные.
//		ИмяВТКадровыеДанныеФизическихЛиц - Строка - имя ВТ.
//		ИмяВременнойТаблицыОтборовФизическихЛиц - строка - имя ВТ.
//		КадровыеДанные - Структура - см. описание к функции КадровыеДанныеФизическихЛиц 
//		ПоляОтбораФизическихЛиц  - Структура - структура отбора.
//		ПоляОтбораПериодическихДанных -  Структура - см. описание к функции КадровыеДанныеФизическихЛиц.
//
// Возвращаемое значение:
//		Запрос - подготовленный запрос.
//
Функция ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ИмяВТКадровыеДанныеФизическихЛиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	НеобходимыДанныеРасширеннойПодсистемы = Ложь;
	
	КадровыеДанныеБазовойПодсистемы = Новый Массив;
	КадровыеДанныеРасширеннойПодсистемы = Новый Массив;
	
	НеобходимыСведенияОбОбразовании = Ложь;
	ПоляСведенийОбОбразовании = Новый Массив;
	
	НеобходимыСведенияОВысшемОбразовании = Ложь;
	ПоляСведенийОВысшемОбразовании = Новый Массив;
	
	НеобходимыСведенияОВторомВысшемОбразовании = Ложь;
	ПоляСведенийОВторомВысшемОбразовании = Новый Массив;
	
	НеобходимыСведенияОПослевузовскомОбразовании = Ложь;
	ПоляСведенийОПослевузовскомОбразовании = Новый Массив;
	
	ПоляСведенийОбУченойСтепени = Новый Массив;
	НеобходимыСведенияОбУченойСтепени = Ложь;
	
	НеобходимыСведенияОбУченомЗвании = Ложь;
	ПоляСведенийОбУченомЗвании = Новый Массив;
	
	НеобходимыСведенияОбОбщемСтаже = Ложь;
	ПоляСведенийОбОбщемСтаже = Новый Массив;
	
	НеобходимыСведенияОНепрерывномСтаже = Ложь;
	ПоляСведенийОНепрерывномСтаже = Новый Массив;
	
	НеобходимыСведенияОСтажеНаНадбавкуЗаВыслугуЛет = Ложь;
	ПоляСведенийОСтажеНаНадбавкуЗаВыслугуЛет = Новый Массив;
	
	НеобходимыСведенияОДругомСтаже = Ложь;
	ПоляСведенийОДругомСтаже = Новый Массив;
	
	НеобходимыСведенияОбОбщемНаучноПедагогическомСтаже = Ложь;
	ПоляСведенийОбОбщемНаучноПедагогическомСтаже = Новый Массив;
	
	НеобходимыСведенияОПедагогическомСтаже = Ложь;
	ПоляСведенийОПедагогическомСтаже = Новый Массив;
	
	НеобходимыСведенияОВладенииЯзыками = Ложь;
	ПоляСведенийОВладенииЯзыками = Новый Массив;
	
	НеобходимыСведенияОПрофессии = Ложь;
	ПоляСведенийОПрофессии = Новый Массив;
	
	НеобходимоСемейноеПоложение = Ложь;
	
	НеобходимыСведенияОВоинскомУчете = Ложь;
	ПоляСведенийВоинскогоУчета = Новый Массив;
	
	НеобходимаОрганизацияБронированияВоинскогоУчета = Ложь;
	
	Для Каждого ЭлМассива Из КадровыеДанные Цикл
			
	КадровыеДанныеБазовойПодсистемы.Добавить(ЭлМассива);
					
	КонецЦикла;
	
	ЗапросВТКадровыеДанныеФизическихЛиц = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеФизическихЛиц(ТолькоРазрешенные, ИмяВТКадровыеДанныеФизическихЛиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц, КадровыеДанныеБазовойПодсистемы, ПоляОтбораПериодическихДанных);
	
	Если НеобходимыСведенияОбОбразовании
		ИЛИ НеобходимыСведенияОВысшемОбразовании
		ИЛИ НеобходимыСведенияОВторомВысшемОбразовании
		ИЛИ НеобходимыСведенияОПослевузовскомОбразовании 
		ИЛИ НеобходимыСведенияОбУченойСтепени
		ИЛИ НеобходимыСведенияОбУченомЗвании
		ИЛИ НеобходимыСведенияОбОбщемСтаже
		ИЛИ НеобходимыСведенияОНепрерывномСтаже
		ИЛИ НеобходимыСведенияОСтажеНаНадбавкуЗаВыслугуЛет
		ИЛИ НеобходимыСведенияОДругомСтаже
		ИЛИ НеобходимыСведенияОбОбщемНаучноПедагогическомСтаже
		ИЛИ НеобходимыСведенияОПедагогическомСтаже
		ИЛИ НеобходимыСведенияОВладенииЯзыками
		ИЛИ НеобходимыСведенияОПрофессии
		ИЛИ НеобходимоСемейноеПоложение
		ИЛИ НеобходимыСведенияОВоинскомУчете
		ИЛИ НеобходимаОрганизацияБронированияВоинскогоУчета
		Тогда
		
		ИменаВТКУничтожению = Новый Массив;
		
		МассивТекстовЗапроса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗапросВТКадровыеДанныеФизическихЛиц.Текст, ";");
		
		ТекстЗапросаВТКадровыеДанныеФизическихЛиц = "";
		ТекстПоместить = "ПОМЕСТИТЬ " + ВРег(ИмяВТКадровыеДанныеФизическихЛиц);
		
		Для каждого ТекстЗапроса Из МассивТекстовЗапроса Цикл
			
			ПозицияПоместить = Найти(ВРег(ТекстЗапроса), ТекстПоместить);
			
			Если ПозицияПоместить > 0 Тогда
				
				ТекстЗапросаВТКадровыеДанныеФизическихЛиц = ТекстЗапроса;
				ТекстОписанияПолей = СокрЛП(Лев(ТекстЗапросаВТКадровыеДанныеФизическихЛиц, ПозицияПоместить - 1));
				ТекстПослеПоместить = СокрЛП(Сред(ТекстЗапросаВТКадровыеДанныеФизическихЛиц, ПозицияПоместить + СтрДлина(ТекстПоместить)));
				
				Прервать;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если НеобходимыСведенияОбОбразовании
			ИЛИ НеобходимыСведенияОВысшемОбразовании
			ИЛИ НеобходимыСведенияОВторомВысшемОбразовании
			ИЛИ НеобходимыСведенияОПослевузовскомОбразовании Тогда
			
			ИмяВТОбразованиеФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОбразованиеФизическихЛиц");
			
			ТекстЗапросаСведений = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ФизическиеЛицаОбразование.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ФизическиеЛицаОбразование.НомерПоПорядку КАК НомерСтроки,
				|	ФизическиеЛицаОбразование.ВидОбразования,
				|	ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования,
				|	ФизическиеЛицаОбразование.УчебноеЗаведение,
				|	ФизическиеЛицаОбразование.Специальность,
				|	ФизическиеЛицаОбразование.Диплом,
				|	ФизическиеЛицаОбразование.ГодОкончания,
				|	ФизическиеЛицаОбразование.Квалификация
				|ПОМЕСТИТЬ ВТОбразованиеФизическихЛиц
				|ИЗ
				|	РегистрСведений.ОбразованиеФизическихЛиц КАК ФизическиеЛицаОбразование
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
				|		ПО ФизическиеЛицаОбразование.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
				|			И (ФизическиеЛицаОбразование.ГодОкончания <= ГОД(ФизическиеЛица.Период))}
				|{ГДЕ
				|	ФизическиеЛицаОбразование.ФизическоеЛицо.*,
				|	ФизическиеЛицаОбразование.ВидОбразования.*,
				|	ФизическиеЛицаОбразование.ВидПослевузовскогоОбразования.*,
				|	ФизическиеЛицаОбразование.УчебноеЗаведение.*,
				|	ФизическиеЛицаОбразование.Специальность.*,
				|	ФизическиеЛицаОбразование.ГодОкончания,
				|	ФизическиеЛицаОбразование.Квалификация}";
			
			Если НЕ ТолькоРазрешенные Тогда
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
			КонецЕсли;
	
			Если НеобходимыСведенияОбОбразовании Тогда
				
				ИмяВТОбразованияПервые 						= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОбразованияПервые");
				ИмяВТОбразование1ПриоритетВидаОбразования 	= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОбразование1ПриоритетВидаОбразования");
				ИмяВТОбразование1ПриоритетГОдаОкончания 	= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОбразование1ПриоритетГОдаОкончания");
				ИмяВТОбразование1ПриоритетНомераСтроки 		= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОбразование1ПриоритетНомераСтроки");
				ИмяВТОбразованиеПервое 						= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ИмяВТОбразованиеПервое");
				ИмяВТОбразованияВторые 						= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОбразованияВторые");
				ИмяВТОбразование2ПриоритетВидаОбразования 	= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОбразование2ПриоритетВидаОбразования");
				ИмяВТОбразование2ПриоритетГОдаОкончания 	= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОбразование2ПриоритетГОдаОкончания");
				ИмяВТОбразование2ПриоритетНомераСтроки 		= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТОбразование2ПриоритетНомераСтроки");
				ИмяВТОбразованиеВторое 						= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ИмяВТОбразованиеВторое");
				
				ТекстЗапросаСведений = 
					ТекстЗапросаСведений +
					ЗарплатаКадры.РазделительЗапросов() +
					"ВЫБРАТЬ
					|	ОбразованиеФизическихЛиц.ФизическоеЛицо,
					|	ОбразованиеФизическихЛиц.НомерСтроки,
					|	ВЫРАЗИТЬ(ОбразованиеФизическихЛиц.ВидОбразования КАК Справочник.ВидыОбразованияФизическихЛиц) КАК ВидОбразования,
					|	ОбразованиеФизическихЛиц.ВидПослевузовскогоОбразования КАК ВидПослевузовскогоОбразования,
					|	ОбразованиеФизическихЛиц.УчебноеЗаведение КАК УчебноеЗаведение,
					|	ОбразованиеФизическихЛиц.Специальность КАК Специальность,
					|	ОбразованиеФизическихЛиц.Диплом КАК Диплом,
					|	ОбразованиеФизическихЛиц.ГодОкончания КАК ГодОкончания,
					|	ОбразованиеФизическихЛиц.Квалификация КАК Квалификация
					|ПОМЕСТИТЬ ВТОбразованияПервые
					|ИЗ
					|	ВТОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
					|ГДЕ
					|	ОбразованиеФизическихЛиц.ВидОбразования В (ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПолноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НачальноеПрофессиональноеОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.СреднееПрофессиональноеОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.НеполноеВысшееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ОсновноеОбщееОбразование), ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование))
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Образования.ФизическоеЛицо,
					|	МАКСИМУМ(Образования.ВидОбразования.Код) КАК КодВидаОбразования
					|ПОМЕСТИТЬ ВТОбразование1ПриоритетВидаОбразования
					|ИЗ
					|	ВТОбразованияПервые КАК Образования
					|
					|СГРУППИРОВАТЬ ПО
					|	Образования.ФизическоеЛицо
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Образования.ФизическоеЛицо,
					|	Образования.ВидОбразования КАК ВидОбразования,
					|	МАКСИМУМ(Образования.ГодОкончания) КАК ГодОкончания
					|ПОМЕСТИТЬ ВТОбразование1ПриоритетГОдаОкончания
					|ИЗ
					|	ВТОбразованияПервые КАК Образования
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетВидаОбразования КАК Образование1ПриоритетВидаОбразования
					|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетВидаОбразования.ФизическоеЛицо
					|			И Образования.ВидОбразования.Код = Образование1ПриоритетВидаОбразования.КодВидаОбразования}
					|
					|СГРУППИРОВАТЬ ПО
					|	Образования.ФизическоеЛицо,
					|	Образования.ВидОбразования
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Образования.ФизическоеЛицо,
					|	МИНИМУМ(Образования.НомерСтроки) КАК НомерСтроки
					|ПОМЕСТИТЬ ВТОбразование1ПриоритетНомераСтроки
					|ИЗ
					|	ВТОбразованияПервые КАК Образования
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетГОдаОкончания КАК Образование1ПриоритетГОдаОкончания
					|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетГОдаОкончания.ФизическоеЛицо
					|			И Образования.ВидОбразования = Образование1ПриоритетГОдаОкончания.ВидОбразования
					|			И Образования.ГодОкончания = Образование1ПриоритетГОдаОкончания.ГодОкончания}
					|
					|СГРУППИРОВАТЬ ПО
					|	Образования.ФизическоеЛицо
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Образования.ФизическоеЛицо,
					|	Образования.НомерСтроки,
					|	Образования.ВидОбразования КАК Образование1ВидОбразования,
					|	Образования.ВидПослевузовскогоОбразования КАК Образование1ВидПослевузовскогоОбразования,
					|	Образования.УчебноеЗаведение КАК Образование1УчебноеЗаведение,
					|	Образования.Специальность КАК Образование1Специальность,
					|	Образования.Диплом КАК Образование1Диплом,
					|	Образования.ГодОкончания КАК Образование1ГодОкончания,
					|	Образования.Квалификация КАК Образование1Квалификация
					|ПОМЕСТИТЬ ВТОбразованиеПервое
					|ИЗ
					|	ВТОбразованияПервые КАК Образования
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетНомераСтроки КАК Образование1ПриоритетНомераСтроки
					|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетНомераСтроки.ФизическоеЛицо
					|			И Образования.НомерСтроки = Образование1ПриоритетНомераСтроки.НомерСтроки}
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Образования.ФизическоеЛицо,
					|	Образования.НомерСтроки,
					|	Образования.ВидОбразования КАК ВидОбразования,
					|	Образования.ВидПослевузовскогоОбразования КАК ВидПослевузовскогоОбразования,
					|	Образования.УчебноеЗаведение КАК УчебноеЗаведение,
					|	Образования.Специальность КАК Специальность,
					|	Образования.Диплом КАК Диплом,
					|	Образования.ГодОкончания КАК ГодОкончания,
					|	Образования.Квалификация КАК Квалификация
					|ПОМЕСТИТЬ ВТОбразованияВторые
					|ИЗ
					|	ВТОбразованияПервые КАК Образования
					|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразование1ПриоритетНомераСтроки КАК Образование1ПриоритетНомераСтроки
					|		ПО Образования.ФизическоеЛицо = Образование1ПриоритетНомераСтроки.ФизическоеЛицо
					|			И Образования.НомерСтроки = Образование1ПриоритетНомераСтроки.НомерСтроки}
					|ГДЕ
					|	Образование1ПриоритетНомераСтроки.НомерСтроки ЕСТЬ NULL 
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Образования.ФизическоеЛицо,
					|	МАКСИМУМ(Образования.ВидОбразования.Код) КАК КодВидаОбразования
					|ПОМЕСТИТЬ ВТОбразование2ПриоритетВидаОбразования
					|ИЗ
					|	ВТОбразованияВторые КАК Образования
					|
					|СГРУППИРОВАТЬ ПО
					|	Образования.ФизическоеЛицо
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Образования.ФизическоеЛицо,
					|	Образования.ВидОбразования КАК ВидОбразования,
					|	МАКСИМУМ(Образования.ГодОкончания) КАК ГодОкончания
					|ПОМЕСТИТЬ ВТОбразование2ПриоритетГОдаОкончания
					|ИЗ
					|	ВТОбразованияВторые КАК Образования
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетВидаОбразования КАК Образование2ПриоритетВидаОбразования
					|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетВидаОбразования.ФизическоеЛицо
					|			И Образования.ВидОбразования.Код = Образование2ПриоритетВидаОбразования.КодВидаОбразования}
					|
					|СГРУППИРОВАТЬ ПО
					|	Образования.ФизическоеЛицо,
					|	Образования.ВидОбразования
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Образования.ФизическоеЛицо,
					|	МИНИМУМ(Образования.НомерСтроки) КАК НомерСтроки
					|ПОМЕСТИТЬ ВТОбразование2ПриоритетНомераСтроки
					|ИЗ
					|	ВТОбразованияВторые КАК Образования
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетГОдаОкончания КАК Образование2ПриоритетГОдаОкончания
					|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетГОдаОкончания.ФизическоеЛицо
					|			И Образования.ВидОбразования = Образование2ПриоритетГОдаОкончания.ВидОбразования
					|			И Образования.ГодОкончания = Образование2ПриоритетГОдаОкончания.ГодОкончания}
					|
					|СГРУППИРОВАТЬ ПО
					|	Образования.ФизическоеЛицо
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	Образования.ФизическоеЛицо,
					|	Образования.ВидОбразования КАК Образование2ВидОбразования,
					|	Образования.ВидПослевузовскогоОбразования КАК Образование2ВидПослевузовскогоОбразования,
					|	Образования.УчебноеЗаведение КАК Образование2УчебноеЗаведение,
					|	Образования.Специальность КАК Образование2Специальность,
					|	Образования.Диплом КАК Образование2Диплом,
					|	Образования.ГодОкончания КАК Образование2ГодОкончания,
					|	Образования.Квалификация КАК Образование2Квалификация
					|ПОМЕСТИТЬ ВТОбразованиеВторое
					|ИЗ
					|	ВТОбразованияВторые КАК Образования
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбразование2ПриоритетНомераСтроки КАК Образование2ПриоритетНомераСтроки
					|		ПО Образования.ФизическоеЛицо = Образование2ПриоритетНомераСтроки.ФизическоеЛицо
					|			И Образования.НомерСтроки = Образование2ПриоритетНомераСтроки.НомерСтроки}";
					
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованияПервые", 					ИмяВТОбразованияПервые);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование1ПриоритетВидаОбразования", 	ИмяВТОбразование1ПриоритетВидаОбразования);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование1ПриоритетГОдаОкончания", 	ИмяВТОбразование1ПриоритетГОдаОкончания);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование1ПриоритетНомераСтроки", 	ИмяВТОбразование1ПриоритетНомераСтроки);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованиеПервое", 					ИмяВТОбразованиеПервое);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованияВторые", 					ИмяВТОбразованияВторые);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование2ПриоритетВидаОбразования", 	ИмяВТОбразование2ПриоритетВидаОбразования);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование2ПриоритетГОдаОкончания", 	ИмяВТОбразование2ПриоритетГОдаОкончания);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразование2ПриоритетНомераСтроки", 	ИмяВТОбразование2ПриоритетНомераСтроки);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованиеВторое", 					ИмяВТОбразованиеВторое);
				
				ИменаВТКУничтожению.Добавить(ИмяВТОбразованияПервые);
				ИменаВТКУничтожению.Добавить(ИмяВТОбразование1ПриоритетВидаОбразования);
				ИменаВТКУничтожению.Добавить(ИмяВТОбразование1ПриоритетГОдаОкончания);
				ИменаВТКУничтожению.Добавить(ИмяВТОбразование1ПриоритетНомераСтроки);
				ИменаВТКУничтожению.Добавить(ИмяВТОбразованиеПервое);
				ИменаВТКУничтожению.Добавить(ИмяВТОбразованияВторые);
				ИменаВТКУничтожению.Добавить(ИмяВТОбразование2ПриоритетВидаОбразования);
				ИменаВТКУничтожению.Добавить(ИмяВТОбразование2ПриоритетГОдаОкончания);
				ИменаВТКУничтожению.Добавить(ИмяВТОбразование2ПриоритетНомераСтроки);
				ИменаВТКУничтожению.Добавить(ИмяВТОбразованиеВторое);
						
				Для каждого ПолеСведений Из ПоляСведенийОбОбразовании Цикл
				
					ТекстОписанияПолей = ТекстОписанияПолей + ",
						|	" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбОбразовании(ПолеСведений) + " КАК " + ПолеСведений 
				
				КонецЦикла;
						
				ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
				ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТОбразованиеПервое + " КАК Образование1
					|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = Образование1.ФизическоеЛицо}
					|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТОбразованиеВторое + " КАК Образование2
					|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = Образование2.ФизическоеЛицо}
					|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
			КонецЕсли; 
			
			Если НеобходимыСведенияОВысшемОбразовании ИЛИ НеобходимыСведенияОВторомВысшемОбразовании Тогда
				
				ИмяВТВысшиеОбразованияФизическихЛиц = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТВысшиеОбразованияФизическихЛиц");
				
				ТекстЗапросаСведений = 
					ТекстЗапросаСведений +
					ЗарплатаКадры.РазделительЗапросов() +
					"ВЫБРАТЬ
					|	ОбразованиеФизическихЛиц.ФизическоеЛицо,
					|	ОбразованиеФизическихЛиц.УчебноеЗаведение,
					|	ОбразованиеФизическихЛиц.Специальность,
					|	ОбразованиеФизическихЛиц.Диплом,
					|	ОбразованиеФизическихЛиц.ГодОкончания,
					|	ОбразованиеФизическихЛиц.Квалификация,
					|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОбразованиеФизическихЛицПредыдущие.ГодОкончания) КАК ПорядокПолучения
					|ПОМЕСТИТЬ ВТВысшиеОбразованияФизическихЛиц
					|ИЗ
					|	ВТОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
					|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛицПредыдущие
					|		ПО ОбразованиеФизическихЛиц.ФизическоеЛицо = ОбразованиеФизическихЛицПредыдущие.ФизическоеЛицо
					|			И ОбразованиеФизическихЛиц.ВидОбразования = ОбразованиеФизическихЛицПредыдущие.ВидОбразования
					|			И (ОбразованиеФизическихЛиц.ГодОкончания > ОбразованиеФизическихЛицПредыдущие.ГодОкончания
					|				ИЛИ ОбразованиеФизическихЛиц.ГодОкончания = ОбразованиеФизическихЛицПредыдущие.ГодОкончания
					|					И ОбразованиеФизическихЛиц.НомерСтроки < ОбразованиеФизическихЛицПредыдущие.НомерСтроки)}
					|ГДЕ
					|	ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ВысшееОбразование)
					|
					|СГРУППИРОВАТЬ ПО
					|	ОбразованиеФизическихЛиц.ФизическоеЛицо,
					|	ОбразованиеФизическихЛиц.УчебноеЗаведение,
					|	ОбразованиеФизическихЛиц.Специальность,
					|	ОбразованиеФизическихЛиц.Диплом,
					|	ОбразованиеФизическихЛиц.ГодОкончания,
					|	ОбразованиеФизическихЛиц.Квалификация";
					
					Если НеобходимыСведенияОВысшемОбразовании Тогда
						
						ИмяВТВысшееОбразование = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТВысшееОбразование");
						
						ТекстЗапросаСведений = 
							ТекстЗапросаСведений +
							ЗарплатаКадры.РазделительЗапросов() +
							"ВЫБРАТЬ
							|	ФизическиеЛица.ФизическоеЛицо,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.УчебноеЗаведение, ЗНАЧЕНИЕ(Справочник.УчебныеЗаведения.ПустаяСсылка)) КАК ВысшееОбразованиеУчебноеЗаведение,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.Специальность, ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)) КАК ВысшееОбразованиеСпециальность,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.Диплом, """") КАК ВысшееОбразованиеДиплом,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.ГодОкончания, 0) КАК ВысшееОбразованиеГодОкончания,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.Квалификация, """") КАК ВысшееОбразованиеКвалификация
							|ПОМЕСТИТЬ ВТВысшееОбразование
							|ИЗ
							|	ВТФизическиеЛица КАК ФизическиеЛица
							|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТВысшиеОбразованияФизическихЛиц КАК ВысшиеОбразованияФизическихЛиц
							|		ПО ФизическиеЛица.ФизическоеЛицо = ВысшиеОбразованияФизическихЛиц.ФизическоеЛицо
							|			И (ВысшиеОбразованияФизическихЛиц.ПорядокПолучения = 0)}";
							
						ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТВысшееОбразование", ИмяВТВысшееОбразование);
						ИменаВТКУничтожению.Добавить(ИмяВТВысшееОбразование);
						
						Для каждого ПолеСведений Из ПоляСведенийОВысшемОбразовании Цикл
				
							ТекстОписанияПолей = ТекстОписанияПолей + ",
								|	ВысшееОбразование." + ПолеСведений + " КАК " + ПолеСведений 
				
						КонецЦикла;
						
						ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
						ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
							"
							|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТВысшееОбразование + " КАК ВысшееОбразование
							|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = ВысшееОбразование.ФизическоеЛицо}
							|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
							
					КонецЕсли;
					
					Если НеобходимыСведенияОВторомВысшемОбразовании Тогда
						
						ИмяВТВысшееОбразованиеВторое = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТВысшееОбразованиеВторое");
						
						ТекстЗапросаСведений = 
							ТекстЗапросаСведений +
							ЗарплатаКадры.РазделительЗапросов() +
							"ВЫБРАТЬ
							|	ФизическиеЛица.ФизическоеЛицо,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.УчебноеЗаведение, ЗНАЧЕНИЕ(Справочник.УчебныеЗаведения.ПустаяСсылка)) КАК ВысшееОбразованиеВтороеУчебноеЗаведение,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.Специальность, ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)) КАК ВысшееОбразованиеВтороеСпециальность,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.Диплом, """") КАК ВысшееОбразованиеВтороеДиплом,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.ГодОкончания, 0) КАК ВысшееОбразованиеВтороеГодОкончания,
							|	ЕСТЬNULL(ВысшиеОбразованияФизическихЛиц.Квалификация, """") КАК ВысшееОбразованиеВтороеКвалификация
							|ПОМЕСТИТЬ ВТВысшееОбразованиеВторое
							|ИЗ
							|	ВТФизическиеЛица КАК ФизическиеЛица
							|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТВысшиеОбразованияФизическихЛиц КАК ВысшиеОбразованияФизическихЛиц
							|		ПО ФизическиеЛица.ФизическоеЛицо = ВысшиеОбразованияФизическихЛиц.ФизическоеЛицо
							|			И (ВысшиеОбразованияФизическихЛиц.ПорядокПолучения = 1)}";
							
						ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТВысшееОбразованиеВторое", ИмяВТВысшееОбразованиеВторое);
						ИменаВТКУничтожению.Добавить(ИмяВТВысшееОбразованиеВторое);
						
						Для каждого ПолеСведений Из ПоляСведенийОВторомВысшемОбразовании Цикл
				
							ТекстОписанияПолей = ТекстОписанияПолей + ",
								|	ВысшееОбразованиеВторое." + ПолеСведений + " КАК " + ПолеСведений 
				
						КонецЦикла;
						
						ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
						ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
							"
							|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТВысшееОбразованиеВторое + " КАК ВысшееОбразованиеВторое
							|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = ВысшееОбразованиеВторое.ФизическоеЛицо}
							|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
							
					КонецЕсли;
				
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТВысшиеОбразованияФизическихЛиц", ИмяВТВысшиеОбразованияФизическихЛиц);
				ИменаВТКУничтожению.Добавить(ИмяВТВысшиеОбразованияФизическихЛиц);
				
			КонецЕсли;
			
			Если НеобходимыСведенияОПослевузовскомОбразовании Тогда
				
				ИмяВТПериодыПослевузовскогоОбразования = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПериодыПослевузовскогоОбразования");
				ИмяВТНомераСтрокПослевузовскогоОбразования = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТНомераСтрокПослевузовскогоОбразования");
				ИмяВТПослевузовскоеОбразование = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПослевузовскоеОбразование");
				
				ТекстЗапросаСведений = 
					ТекстЗапросаСведений +
					ЗарплатаКадры.РазделительЗапросов() +
					"ВЫБРАТЬ
					|	ОбразованиеФизическихЛиц.ФизическоеЛицо,
					|	МИНИМУМ(ОбразованиеФизическихЛиц.ГодОкончания) КАК ГодОкончания
					|ПОМЕСТИТЬ ВТПериодыПослевузовскогоОбразования
					|ИЗ
					|	ВТОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
					|ГДЕ
					|	ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование)
					|
					|СГРУППИРОВАТЬ ПО
					|	ОбразованиеФизическихЛиц.ФизическоеЛицо
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ОбразованиеФизическихЛиц.ФизическоеЛицо,
					|	МАКСИМУМ(ОбразованиеФизическихЛиц.НомерСтроки) КАК НомерСтроки
					|ПОМЕСТИТЬ ВТНомераСтрокПослевузовскогоОбразования
					|ИЗ
					|	ВТОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
					|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПериодыПослевузовскогоОбразования КАК ПериодыПослевузовскогоОбразования
					|		ПО ОбразованиеФизическихЛиц.ФизическоеЛицо = ПериодыПослевузовскогоОбразования.ФизическоеЛицо
					|			И ОбразованиеФизическихЛиц.ГодОкончания = ПериодыПослевузовскогоОбразования.ГодОкончания
					|			И (ОбразованиеФизическихЛиц.ВидОбразования = ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПослевузовскоеОбразование))}
					|
					|СГРУППИРОВАТЬ ПО
					|	ОбразованиеФизическихЛиц.ФизическоеЛицо
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
					|	ЕСТЬNULL(ОбразованиеФизическихЛиц.ВидОбразования, ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка)) КАК ПослевузовскоеОбразованиеВидОбразования,
					|	ЕСТЬNULL(ОбразованиеФизическихЛиц.ВидПослевузовскогоОбразования, ЗНАЧЕНИЕ(Справочник.ВидыОбразованияФизическихЛиц.ПустаяСсылка)) КАК ПослевузовскоеОбразованиеВидПослевузовскогоОбразования,
					|	ЕСТЬNULL(ОбразованиеФизическихЛиц.УчебноеЗаведение, ЗНАЧЕНИЕ(Справочник.УчебныеЗаведения.ПустаяСсылка)) КАК ПослевузовскоеОбразованиеУчебноеЗаведение,
					|	ЕСТЬNULL(ОбразованиеФизическихЛиц.Специальность, ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)) КАК ПослевузовскоеОбразованиеСпециальность,
					|	ЕСТЬNULL(ОбразованиеФизическихЛиц.Диплом, """") КАК ПослевузовскоеОбразованиеДиплом,
					|	ЕСТЬNULL(ОбразованиеФизическихЛиц.ГодОкончания, 0) КАК ПослевузовскоеОбразованиеГодОкончания,
					|	ЕСТЬNULL(ОбразованиеФизическихЛиц.Квалификация, """") КАК ПослевузовскоеОбразованиеКвалификация
					|ПОМЕСТИТЬ ВТПослевузовскоеОбразование
					|ИЗ
					|	ВТФизическиеЛица КАК ФизическиеЛица
					|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
					|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНомераСтрокПослевузовскогоОбразования КАК НомераСтрокПослевузовскогоОбразования
					|			ПО ОбразованиеФизическихЛиц.ФизическоеЛицо = НомераСтрокПослевузовскогоОбразования.ФизическоеЛицо
					|				И ОбразованиеФизическихЛиц.НомерСтроки = НомераСтрокПослевузовскогоОбразования.НомерСтроки
					|		ПО ФизическиеЛица.ФизическоеЛицо = ОбразованиеФизическихЛиц.ФизическоеЛицо}";
					
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПериодыПослевузовскогоОбразования", ИмяВТПериодыПослевузовскогоОбразования);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТНомераСтрокПослевузовскогоОбразования", ИмяВТНомераСтрокПослевузовскогоОбразования);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПослевузовскоеОбразование", ИмяВТПослевузовскоеОбразование);
				
				ИменаВТКУничтожению.Добавить(ИмяВТПериодыПослевузовскогоОбразования);
				ИменаВТКУничтожению.Добавить(ИмяВТНомераСтрокПослевузовскогоОбразования);
				ИменаВТКУничтожению.Добавить(ИмяВТПослевузовскоеОбразование);
				
				Для каждого ПолеСведений Из ПоляСведенийОПослевузовскомОбразовании Цикл
				
					ТекстОписанияПолей = ТекстОписанияПолей + ",
						|	ПослевузовскоеОбразование." + ПолеСведений + " КАК " + ПолеСведений 
				
				КонецЦикла;
						
				ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
				ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПослевузовскоеОбразование + " КАК ПослевузовскоеОбразование
					|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = ПослевузовскоеОбразование.ФизическоеЛицо}
					|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
							
			КонецЕсли;
			
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТОбразованиеФизическихЛиц", ИмяВТОбразованиеФизическихЛиц);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТФизическиеЛица", ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстОписанияПолей = ТекстЗапросаСведений + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			ИменаВТКУничтожению.Добавить(ИмяВТОбразованиеФизическихЛиц);
			
		КонецЕсли;
		
		Если НеобходимыСведенияОбУченойСтепени Тогда
			
			Для каждого ПолеСведений Из ПоляСведенийОбУченойСтепени Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей + ",
					|	УченыеСтепени." + ПолеСведений + " КАК " + ПолеСведений 
				
			КонецЦикла;
			
			ИмяВТУченыеСтепени = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТУченыеСтепени");
			ИмяВТМаксимальныеДатыПрисужденияУченыхСтепеней = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТМаксимальныеДатыПрисужденияУченыхСтепеней");
			ИмяВТНомераСтрокУченыхСтепеней = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТНомераСтрокУченыхСтепеней");
			ИмяВТПредварительноУченыеСтепени = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПредварительноУченыеСтепени");
			
			ТекстЗапросаСведений =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
				|	МАКСИМУМ(ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени) КАК ДатаПрисужденияУченойСтепени
				|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисужденияУченыхСтепеней
				|ИЗ
				|	ВТФизическиеЛица КАК ФизическиеЛица
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
				|		ПО (ФизическиеЛицаУченыеСтепени.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо)
				|			И (ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени <= ФизическиеЛица.Период)}
				|{ГДЕ
				|	ФизическиеЛицаУченыеСтепени.ФизическоеЛицо.* КАК ФизическоеЛицо,
				|	ФизическиеЛицаУченыеСтепени.УченаяСтепень.*,
				|	ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени,
				|	ФизическиеЛицаУченыеСтепени.ОтрасльНауки}
				|
				|СГРУППИРОВАТЬ ПО
				|	ФизическиеЛица.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо,
				|	МАКСИМУМ(ФизическиеЛицаУченыеСтепени.НомерПоПорядку) КАК НомерСтроки
				|ПОМЕСТИТЬ ВТНомераСтрокУченыхСтепеней
				|ИЗ
				|	ВТМаксимальныеДатыПрисужденияУченыхСтепеней КАК МаксимальныеДатыПрисужденияУченыхСтепеней
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
				|		ПО МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо = ФизическиеЛицаУченыеСтепени.ФизическоеЛицо
				|			И МаксимальныеДатыПрисужденияУченыхСтепеней.ДатаПрисужденияУченойСтепени = ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени}
				|
				|СГРУППИРОВАТЬ ПО
				|	МаксимальныеДатыПрисужденияУченыхСтепеней.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НомераСтрокУченыхСтепеней.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ФизическиеЛицаУченыеСтепени.УченаяСтепень КАК УченаяСтепень,
				|	ФизическиеЛицаУченыеСтепени.ДатаПрисужденияУченойСтепени КАК УченаяСтепеньДатаПрисуждения,
				|	ФизическиеЛицаУченыеСтепени.ОтрасльНауки КАК УченаяСтепеньОтрасльНауки,
				|	ФизическиеЛицаУченыеСтепени.ДиссертационныйСовет КАК УченаяСтепеньДиссертационныйСовет,
				|	ФизическиеЛицаУченыеСтепени.ДипломСерияНомер КАК УченаяСтепеньДипломСерияНомер,
				|	ФизическиеЛицаУченыеСтепени.ДипломВыданОрганизация КАК УченаяСтепеньОрганизация
				|ПОМЕСТИТЬ ВТПредварительноУченыеСтепени
				|ИЗ
				|	ВТНомераСтрокУченыхСтепеней КАК НомераСтрокУченыхСтепеней
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеСтепениФизическихЛиц КАК ФизическиеЛицаУченыеСтепени
				|		ПО (ФизическиеЛицаУченыеСтепени.ФизическоеЛицо = НомераСтрокУченыхСтепеней.ФизическоеЛицо)
				|			И (ФизическиеЛицаУченыеСтепени.НомерПоПорядку = НомераСтрокУченыхСтепеней.НомерСтроки)}
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ФизическиеЛица.Период КАК Период,
				|	ЕСТЬNULL(УченыеСтепени.УченаяСтепень, ЗНАЧЕНИЕ(Справочник.УченыеСтепени.ПустаяСсылка)) КАК УченаяСтепень,
				|	ЕСТЬNULL(УченыеСтепени.УченаяСтепеньДатаПрисуждения, ДАТАВРЕМЯ(1, 1, 1)) КАК УченаяСтепеньДатаПрисуждения,
				|	ВЫРАЗИТЬ(ЕСТЬNULL(УченыеСтепени.УченаяСтепеньОтрасльНауки, """") КАК СТРОКА(1000)) КАК УченаяСтепеньОтрасльНауки,
				|	ВЫРАЗИТЬ(ЕСТЬNULL(УченыеСтепени.УченаяСтепеньДиссертационныйСовет, """") КАК СТРОКА(1000)) КАК УченаяСтепеньДиссертационныйСовет,
				|	ЕСТЬNULL(УченыеСтепени.УченаяСтепеньДипломСерияНомер, """") КАК УченаяСтепеньДипломСерияНомер,
				|	ВЫРАЗИТЬ(ЕСТЬNULL(УченыеСтепени.УченаяСтепеньОрганизация, """") КАК СТРОКА(1000)) КАК УченаяСтепеньОрганизация
				|ПОМЕСТИТЬ ВТУченыеСтепени
				|ИЗ
				|	ВТФизическиеЛица КАК ФизическиеЛица
				|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПредварительноУченыеСтепени КАК УченыеСтепени
				|		ПО ФизическиеЛица.ФизическоеЛицо = УченыеСтепени.ФизическоеЛицо}";
			
			Если НЕ ТолькоРазрешенные Тогда
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
			КонецЕсли;
			
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТУченыеСтепени", ИмяВТУченыеСтепени);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТМаксимальныеДатыПрисужденияУченыхСтепеней", ИмяВТМаксимальныеДатыПрисужденияУченыхСтепеней);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТНомераСтрокУченыхСтепеней", ИмяВТНомераСтрокУченыхСтепеней);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПредварительноУченыеСтепени", ИмяВТПредварительноУченыеСтепени);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТФизическиеЛица", ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстОписанияПолей = ТекстЗапросаСведений + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
			ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТУченыеСтепени + " КАК УченыеСтепени
				|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = УченыеСтепени.ФизическоеЛицо}
				|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
				
			ИменаВТКУничтожению.Добавить(ИмяВТМаксимальныеДатыПрисужденияУченыхСтепеней);
			ИменаВТКУничтожению.Добавить(ИмяВТНомераСтрокУченыхСтепеней);
			ИменаВТКУничтожению.Добавить(ИмяВТПредварительноУченыеСтепени);
			ИменаВТКУничтожению.Добавить(ИмяВТУченыеСтепени);
			
		КонецЕсли; 
		
		Если НеобходимыСведенияОбУченомЗвании Тогда
			
			Для каждого ПолеСведений Из ПоляСведенийОбУченомЗвании Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей + ",
					|	УченыеЗвания." + ПолеСведений + " КАК " + ПолеСведений 
				
			КонецЦикла;
			
			ИмяВТУченыеЗвания = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТУченыеЗвания");
			ИмяВТМаксимальныеДатыПрисвоенияУченогоЗвания = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТМаксимальныеДатыПрисвоенияУченогоЗвания");
			ИмяВТНомераСтрокУченыхЗваний = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТНомераСтрокУченыхЗваний");
			ИмяВТПредварительноУченыеЗвания = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПредварительноУченыеЗвания");
			
			ТекстЗапросаСведений =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
				|	МАКСИМУМ(ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания) КАК ДатаПрисвоенияУченогоЗвания
				|ПОМЕСТИТЬ ВТМаксимальныеДатыПрисвоенияУченогоЗвания
				|ИЗ
				|	ВТФизическиеЛица КАК ФизическиеЛица
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
				|		ПО (ФизическиеЛицаУченыеЗвания.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо)
				|			И (ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания <= ФизическиеЛица.Период)}
				|{ГДЕ
				|	ФизическиеЛицаУченыеЗвания.ФизическоеЛицо.* КАК ФизическоеЛицо,
				|	ФизическиеЛицаУченыеЗвания.УченоеЗвание.*,
				|	ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания,
				|	ФизическиеЛицаУченыеЗвания.НаучнаяСпециальность.*}
				|
				|СГРУППИРОВАТЬ ПО
				|	ФизическиеЛица.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо,
				|	МАКСИМУМ(ФизическиеЛицаУченыеЗвания.НомерПоПорядку) КАК НомерСтроки
				|ПОМЕСТИТЬ ВТНомераСтрокУченыхЗваний
				|ИЗ
				|	ВТМаксимальныеДатыПрисвоенияУченогоЗвания КАК МаксимальныеДатыПрисвоенияУченогоЗвания
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
				|		ПО МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо = ФизическиеЛицаУченыеЗвания.ФизическоеЛицо
				|			И МаксимальныеДатыПрисвоенияУченогоЗвания.ДатаПрисвоенияУченогоЗвания = ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания}
				|
				|СГРУППИРОВАТЬ ПО
				|	МаксимальныеДатыПрисвоенияУченогоЗвания.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	НомераСтрокУченыхЗваний.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ФизическиеЛицаУченыеЗвания.УченоеЗвание КАК УченоеЗвание,
				|	ФизическиеЛицаУченыеЗвания.ДатаПрисвоенияУченогоЗвания КАК УченоеЗваниеДатаПрисвоения,
				|	ФизическиеЛицаУченыеЗвания.АттестатСерия КАК УченоеЗваниеАттестатСерия,
				|	ФизическиеЛицаУченыеЗвания.АттестатНомер КАК УченоеЗваниеАттестатНомер,
				|	ФизическиеЛицаУченыеЗвания.АттестатВыданОрганизация КАК УченоеЗваниеОрганизация,
				|	ФизическиеЛицаУченыеЗвания.НаучнаяСпециальность КАК УченоеЗваниеСпециальность
				|ПОМЕСТИТЬ ВТПредварительноУченыеЗвания
				|ИЗ
				|	ВТНомераСтрокУченыхЗваний КАК НомераСтрокУченыхЗваний
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УченыеЗванияФизическихЛиц КАК ФизическиеЛицаУченыеЗвания
				|		ПО (ФизическиеЛицаУченыеЗвания.ФизическоеЛицо = НомераСтрокУченыхЗваний.ФизическоеЛицо)
				|			И (ФизическиеЛицаУченыеЗвания.НомерПоПорядку = НомераСтрокУченыхЗваний.НомерСтроки)}
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ФизическиеЛица.Период КАК Период,
				|	ЕСТЬNULL(УченыеЗвания.УченоеЗвание, ЗНАЧЕНИЕ(Справочник.УченыеЗвания.ПустаяСсылка)) КАК УченоеЗвание,
				|	ЕСТЬNULL(УченыеЗвания.УченоеЗваниеДатаПрисвоения, ДАТАВРЕМЯ(1, 1, 1)) КАК УченоеЗваниеДатаПрисвоения,
				|	ЕСТЬNULL(УченыеЗвания.УченоеЗваниеАттестатСерия, """") КАК УченоеЗваниеАттестатСерия,
				|	ЕСТЬNULL(УченыеЗвания.УченоеЗваниеАттестатНомер, """") КАК УченоеЗваниеАттестатНомер,
				|	ВЫРАЗИТЬ(ЕСТЬNULL(УченыеЗвания.УченоеЗваниеОрганизация, """") КАК СТРОКА(1000)) КАК УченоеЗваниеОрганизация,
				|	ЕСТЬNULL(УченыеЗвания.УченоеЗваниеСпециальность, ЗНАЧЕНИЕ(Справочник.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка)) КАК УченоеЗваниеСпециальность
				|ПОМЕСТИТЬ ВТУченыеЗвания
				|ИЗ
				|	ВТФизическиеЛица КАК ФизическиеЛица
				|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПредварительноУченыеЗвания КАК УченыеЗвания
				|		ПО ФизическиеЛица.ФизическоеЛицо = УченыеЗвания.ФизическоеЛицо}";
			
			Если НЕ ТолькоРазрешенные Тогда
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
			КонецЕсли;
			
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТУченыеЗвания", ИмяВТУченыеЗвания);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТМаксимальныеДатыПрисвоенияУченогоЗвания", ИмяВТМаксимальныеДатыПрисвоенияУченогоЗвания);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТНомераСтрокУченыхЗваний", ИмяВТНомераСтрокУченыхЗваний);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПредварительноУченыеЗвания", ИмяВТПредварительноУченыеЗвания);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТФизическиеЛица", ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстОписанияПолей = ТекстЗапросаСведений + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
			ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТУченыеЗвания + " КАК УченыеЗвания
				|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = УченыеЗвания.ФизическоеЛицо}
				|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
				
				
			ИменаВТКУничтожению.Добавить(ИмяВТМаксимальныеДатыПрисвоенияУченогоЗвания);
			ИменаВТКУничтожению.Добавить(ИмяВТНомераСтрокУченыхЗваний);
			ИменаВТКУничтожению.Добавить(ИмяВТПредварительноУченыеЗвания);
			ИменаВТКУничтожению.Добавить(ИмяВТУченыеЗвания);
			
		КонецЕсли; 
		
		Если НеобходимыСведенияОбОбщемСтаже
			ИЛИ НеобходимыСведенияОНепрерывномСтаже
			ИЛИ НеобходимыСведенияОСтажеНаНадбавкуЗаВыслугуЛет
			ИЛИ НеобходимыСведенияОДругомСтаже
			ИЛИ НеобходимыСведенияОбОбщемНаучноПедагогическомСтаже
			ИЛИ НеобходимыСведенияОПедагогическомСтаже Тогда
			
			ИмяВТСтажиРезультирующая = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСтажиРезультирующая");
			
			ЗапросВТСтажи = ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ИмяВТСтажиРезультирующая, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц);
			
			ТекстЗапросаСведений = ЗапросВТСтажи.Текст;
			
			Если НеобходимыСведенияОДругомСтаже Тогда
					
				ИмяВТСтажиДругиеСтажи = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСтажиДругиеСтажи");
				ИмяВТДлинныеДругиеСтажи = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТДлинныеДругиеСтажи");
				ИмяВТСамыеДлинныеДругиеСтажи = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСамыеДлинныеДругиеСтажи");
				ИмяВТСтажиДругойСтаж = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСтажиДругойСтаж");
				
				ТекстЗапросаСведений = 
					ТекстЗапросаСведений
					+ ЗарплатаКадры.РазделительЗапросов()
					+ "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					  |	ВидыСтажа.Ссылка КАК ВидСтажа
					  |ПОМЕСТИТЬ ВТВидыСтажа
					  |ИЗ
					  |	Справочник.ВидыСтажа КАК ВидыСтажа
					  |ГДЕ
					  |	ВидыСтажа.КатегорияСтажа В (ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Общий), ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Непрерывный), ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.ВыслугаЛет))
					  |;
					  |
					  |////////////////////////////////////////////////////////////////////////////////
					  |ВЫБРАТЬ
					  |	СтажиРезультирующая.ФизическоеЛицо,
					  |	ВЫРАЗИТЬ(СтажиРезультирующая.ВидСтажа КАК Справочник.ВидыСтажа) КАК ВидСтажа,
					  |	СтажиРезультирующая.ДатаОтсчета,
					  |	СтажиРезультирующая.Лет,
					  |	СтажиРезультирующая.ВсегоМесяцев,
					  |	СтажиРезультирующая.ВсегоДней,
					  |	СтажиРезультирующая.Месяцев,
					  |	СтажиРезультирующая.Дней
					  |ПОМЕСТИТЬ ВТСтажиДругиеСтажи
					  |ИЗ
					  |	ВТСтажиРезультирующая КАК СтажиРезультирующая
					  |		{ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыСтажа КАК ВидыСтажа
					  |		ПО СтажиРезультирующая.ВидСтажа = ВидыСтажа.ВидСтажа}
					  |ГДЕ
					  |	ВидыСтажа.ВидСтажа ЕСТЬ NULL 
					  |;
					  |
					  |////////////////////////////////////////////////////////////////////////////////
					  |ВЫБРАТЬ
					  |	СтажиДругиеСтажи.ФизическоеЛицо,
					  |	МАКСИМУМ(СтажиДругиеСтажи.ВсегоДней) КАК ВсегоДней
					  |ПОМЕСТИТЬ ВТДлинныеДругиеСтажи
					  |ИЗ
					  |	ВТСтажиДругиеСтажи КАК СтажиДругиеСтажи
					  |
					  |СГРУППИРОВАТЬ ПО
					  |	СтажиДругиеСтажи.ФизическоеЛицо
					  |;
					  |
					  |////////////////////////////////////////////////////////////////////////////////
					  |ВЫБРАТЬ
					  |	СтажиДругиеСтажи.ФизическоеЛицо,
					  |	МИНИМУМ(СтажиДругиеСтажи.ВидСтажа.Код) КАК ВидСтажаКод
					  |ПОМЕСТИТЬ ВТСамыеДлинныеДругиеСтажи
					  |ИЗ
					  |	ВТСтажиДругиеСтажи КАК СтажиДругиеСтажи
					  |		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДлинныеДругиеСтажи КАК ДлинныеДругиеСтажи
					  |		ПО СтажиДругиеСтажи.ФизическоеЛицо = ДлинныеДругиеСтажи.ФизическоеЛицо
					  |			И СтажиДругиеСтажи.ВсегоДней = ДлинныеДругиеСтажи.ВсегоДней}
					  |
					  |СГРУППИРОВАТЬ ПО
					  |	СтажиДругиеСтажи.ФизическоеЛицо,
					  |	СтажиДругиеСтажи.ВсегоДней
					  |;
					  |
					  |////////////////////////////////////////////////////////////////////////////////
					  |ВЫБРАТЬ
					  |	СтажиДругиеСтажи.ФизическоеЛицо,
					  |	СтажиДругиеСтажи.ВидСтажа,
					  |	СтажиДругиеСтажи.ДатаОтсчета,
					  |	СтажиДругиеСтажи.Лет,
					  |	СтажиДругиеСтажи.ВсегоМесяцев,
					  |	СтажиДругиеСтажи.ВсегоДней,
					  |	СтажиДругиеСтажи.Месяцев,
					  |	СтажиДругиеСтажи.Дней
					  |ПОМЕСТИТЬ ВТСтажиДругойСтаж
					  |ИЗ
					  |	ВТСтажиДругиеСтажи КАК СтажиДругиеСтажи
					  |		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСамыеДлинныеДругиеСтажи КАК СамыеДлинныеДругиеСтажи
					  |		ПО СтажиДругиеСтажи.ФизическоеЛицо = СамыеДлинныеДругиеСтажи.ФизическоеЛицо
					  |			И СтажиДругиеСтажи.ВидСтажа.Код = СамыеДлинныеДругиеСтажи.ВидСтажаКод}";
				
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТСтажиДругиеСтажи", ИмяВТСтажиДругиеСтажи);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТДлинныеДругиеСтажи", ИмяВТДлинныеДругиеСтажи);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТСамыеДлинныеДругиеСтажи", ИмяВТСамыеДлинныеДругиеСтажи);
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТСтажиДругойСтаж", ИмяВТСтажиДругойСтаж);
				
				ИменаВТКУничтожению.Добавить(ИмяВТСтажиДругиеСтажи);
				ИменаВТКУничтожению.Добавить(ИмяВТДлинныеДругиеСтажи);
				ИменаВТКУничтожению.Добавить(ИмяВТСамыеДлинныеДругиеСтажи);
				ИменаВТКУничтожению.Добавить(ИмяВТСтажиДругойСтаж);
				
			КонецЕсли; 
			
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТФизическиеЛица", ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстОписанияПолей = ТекстЗапросаСведений + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			
			Если НеобходимыСведенияОбОбщемСтаже Тогда
				
				Для каждого ПолеСведений Из ПоляСведенийОбОбщемСтаже Цикл
				
					ТекстОписанияПолей = ТекстОписанияПолей + ",
						|	ЕСТЬNULL(ОбщийСтаж." + ИмяПоляСведенийОСтаже(ПолеСведений) + ", 0) КАК " + ПолеСведений 
				
				КонецЦикла;
						
				ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
				ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтажиРезультирующая + " КАК ОбщийСтаж
					|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = ОбщийСтаж.ФизическоеЛицо
					|		И ОбщийСтаж.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Общий)}
					|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
							
			КонецЕсли; 
			
			Если НеобходимыСведенияОНепрерывномСтаже Тогда
				
				Для каждого ПолеСведений Из ПоляСведенийОНепрерывномСтаже Цикл
				
					ТекстОписанияПолей = ТекстОписанияПолей + ",
						|	ЕСТЬNULL(НепрерывныйСтаж." + ИмяПоляСведенийОСтаже(ПолеСведений) + ", 0) КАК " + ПолеСведений 
				
				КонецЦикла;
						
				ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
				ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтажиРезультирующая + " КАК НепрерывныйСтаж
					|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = НепрерывныйСтаж.ФизическоеЛицо
					|		И НепрерывныйСтаж.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Непрерывный)}
					|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
							
			КонецЕсли;
			
			Если НеобходимыСведенияОСтажеНаНадбавкуЗаВыслугуЛет Тогда
				
				Для каждого ПолеСведений Из ПоляСведенийОСтажеНаНадбавкуЗаВыслугуЛет Цикл
				
					ТекстОписанияПолей = ТекстОписанияПолей + ",
						|	ЕСТЬNULL(СтажНаНадбавкуЗаВыслугуЛет." + ИмяПоляСведенийОСтаже(ПолеСведений) + ", 0) КАК " + ПолеСведений 
				
				КонецЦикла;
						
				ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
				ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтажиРезультирующая + " КАК СтажНаНадбавкуЗаВыслугуЛет
					|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = СтажНаНадбавкуЗаВыслугуЛет.ФизическоеЛицо
					|		И СтажНаНадбавкуЗаВыслугуЛет.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.ВыслугаЛет)}
					|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
							
			КонецЕсли;
			
			Если НеобходимыСведенияОДругомСтаже Тогда
				
				Для каждого ПолеСведений Из ПоляСведенийОДругомСтаже Цикл
				
					ТекстОписанияПолей = ТекстОписанияПолей + ",
						|	ЕСТЬNULL(ДругойСтаж." + ИмяПоляСведенийОСтаже(ПолеСведений) + ", 0) КАК " + ПолеСведений 
				
				КонецЦикла;
						
				ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
				ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтажиДругойСтаж + " КАК ДругойСтаж
					|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = ДругойСтаж.ФизическоеЛицо}
					|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
							
				КонецЕсли;
				
			Если НеобходимыСведенияОбОбщемНаучноПедагогическомСтаже Тогда
				
				Для каждого ПолеСведений Из ПоляСведенийОбОбщемНаучноПедагогическомСтаже Цикл
				
					ТекстОписанияПолей = ТекстОписанияПолей + ",
						|	ЕСТЬNULL(ОбщийНаучноПедагогическийСтаж." + ИмяПоляСведенийОСтаже(ПолеСведений) + ", 0) КАК " + ПолеСведений 
				
				КонецЦикла;
						
				ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
				ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтажиРезультирующая + " КАК ОбщийНаучноПедагогическийСтаж
					|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = ОбщийНаучноПедагогическийСтаж.ФизическоеЛицо
					|		И ОбщийНаучноПедагогическийСтаж.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.ОбщийНаучноПедагогический)}
					|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
							
			КонецЕсли; 
			
			Если НеобходимыСведенияОПедагогическомСтаже Тогда
				
				Для каждого ПолеСведений Из ПоляСведенийОПедагогическомСтаже Цикл
				
					ТекстОписанияПолей = ТекстОписанияПолей + ",
						|	ЕСТЬNULL(ПедагогическийСтаж." + ИмяПоляСведенийОСтаже(ПолеСведений) + ", 0) КАК " + ПолеСведений 
				
				КонецЦикла;
						
				ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
				ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтажиРезультирующая + " КАК ПедагогическийСтаж
					|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = ПедагогическийСтаж.ФизическоеЛицо
					|		И ПедагогическийСтаж.ВидСтажа.КатегорияСтажа = ЗНАЧЕНИЕ(Перечисление.КатегорииСтажа.Педагогический)}
					|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
							
			КонецЕсли; 
			
			ИменаВТКУничтожению.Добавить(ИмяВТСтажиРезультирующая);
			
		КонецЕсли;
		
		Если НеобходимыСведенияОВладенииЯзыками Тогда
			
			ИмяВТЗнаниеЯзыков 			= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТЗнаниеЯзыков");
			ИмяВТКодСтепениЗнанияЯзыка1 = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКодСтепениЗнанияЯзыка1");
			ИмяВТСтепеньЗнанияЯзыка1 	= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСтепеньЗнанияЯзыка1");
			ИмяВТКодСтепениЗнанияЯзыка2 = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКодСтепениЗнанияЯзыка2");
			ИмяВТСтепеньЗнанияЯзыка2 	= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСтепеньЗнанияЯзыка2");
			
			ТекстЗапросаСведений =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ФизическиеЛицаЗнаниеЯзыков.Язык,
				|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка
				|ПОМЕСТИТЬ ВТЗнаниеЯзыков
				|ИЗ
				|	РегистрСведений.ЗнаниеЯзыковФизическихЛиц КАК ФизическиеЛицаЗнаниеЯзыков
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
				|		ПО ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо}
				|{ГДЕ
				|	ФизическиеЛицаЗнаниеЯзыков.ФизическоеЛицо.*,
				|	ФизическиеЛицаЗнаниеЯзыков.Язык.*,
				|	ФизическиеЛицаЗнаниеЯзыков.СтепеньЗнанияЯзыка.*}
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗнаниеЯзыков.ФизическоеЛицо,
				|	МАКСИМУМ(ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код) КАК СтепеньЗнанияЯзыкаКод
				|ПОМЕСТИТЬ ВТКодСтепениЗнанияЯзыка1
				|ИЗ
				|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗнаниеЯзыков.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗнаниеЯзыков.ФизическоеЛицо,
				|	МАКСИМУМ(ЗнаниеЯзыков.Язык) КАК Язык,
				|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
				|ПОМЕСТИТЬ ВТСтепеньЗнанияЯзыка1
				|ИЗ
				|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодСтепениЗнанияЯзыка1 КАК КодСтепениЗнанияЯзыка1
				|		ПО ЗнаниеЯзыков.ФизическоеЛицо = КодСтепениЗнанияЯзыка1.ФизическоеЛицо
				|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код = КодСтепениЗнанияЯзыка1.СтепеньЗнанияЯзыкаКод}
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗнаниеЯзыков.ФизическоеЛицо,
				|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗнаниеЯзыков.ФизическоеЛицо,
				|	МАКСИМУМ(ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код) КАК СтепеньЗнанияЯзыкаКод
				|ПОМЕСТИТЬ ВТКодСтепениЗнанияЯзыка2
				|ИЗ
				|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
				|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
				|		ПО ЗнаниеЯзыков.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо
				|			И ЗнаниеЯзыков.Язык = СтепеньЗнанияЯзыка1.Язык
				|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка = СтепеньЗнанияЯзыка1.СтепеньЗнанияЯзыка}
				|ГДЕ
				|	СтепеньЗнанияЯзыка1.Язык ЕСТЬ NULL 
				|
				|СГРУППИРОВАТЬ ПО
				|	ЗнаниеЯзыков.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ЗнаниеЯзыков.ФизическоеЛицо,
				|	ЗнаниеЯзыков.Язык,
				|	ЗнаниеЯзыков.СтепеньЗнанияЯзыка
				|ПОМЕСТИТЬ ВТСтепеньЗнанияЯзыка2
				|ИЗ
				|	ВТЗнаниеЯзыков КАК ЗнаниеЯзыков
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодСтепениЗнанияЯзыка2 КАК КодСтепениЗнанияЯзыка2
				|		ПО ЗнаниеЯзыков.ФизическоеЛицо = КодСтепениЗнанияЯзыка2.ФизическоеЛицо
				|			И ЗнаниеЯзыков.СтепеньЗнанияЯзыка.Код = КодСтепениЗнанияЯзыка2.СтепеньЗнанияЯзыкаКод}
				|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТСтепеньЗнанияЯзыка1 КАК СтепеньЗнанияЯзыка1
				|		ПО ЗнаниеЯзыков.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо
				|			И ЗнаниеЯзыков.Язык = СтепеньЗнанияЯзыка1.Язык}
				|ГДЕ
				|	СтепеньЗнанияЯзыка1.Язык ЕСТЬ NULL ";
				
			Если НЕ ТолькоРазрешенные Тогда
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
			КонецЕсли;
			
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТЗнаниеЯзыков", ИмяВТЗнаниеЯзыков);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТКодСтепениЗнанияЯзыка1", ИмяВТКодСтепениЗнанияЯзыка1);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТСтепеньЗнанияЯзыка1", ИмяВТСтепеньЗнанияЯзыка1);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТКодСтепениЗнанияЯзыка2", ИмяВТКодСтепениЗнанияЯзыка2);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТСтепеньЗнанияЯзыка2", ИмяВТСтепеньЗнанияЯзыка2);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТФизическиеЛица", ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстОписанияПолей = ТекстЗапросаСведений + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			ТекстОписанияПолей = ТекстОписанияПолей + ",
				|	ЕСТЬNULL(СтепеньЗнанияЯзыка1.Язык, ЗНАЧЕНИЕ(Справочник.ЯзыкиНародовМира.ПустаяСсылка)) КАК ВладеемыйЯзык1,
				|	ЕСТЬNULL(СтепеньЗнанияЯзыка1.СтепеньЗнанияЯзыка, ЗНАЧЕНИЕ(Справочник.СтепениЗнанияЯзыка.ПустаяСсылка)) КАК ВладеемыйЯзык1СтепеньЗнания,
				|	ЕСТЬNULL(СтепеньЗнанияЯзыка2.Язык, ЗНАЧЕНИЕ(Справочник.ЯзыкиНародовМира.ПустаяСсылка)) КАК ВладеемыйЯзык2,
				|	ЕСТЬNULL(СтепеньЗнанияЯзыка2.СтепеньЗнанияЯзыка, ЗНАЧЕНИЕ(Справочник.СтепениЗнанияЯзыка.ПустаяСсылка)) КАК ВладеемыйЯзык2СтепеньЗнания";
				
			ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
			ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтепеньЗнанияЯзыка1 + " КАК СтепеньЗнанияЯзыка1
				|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо}
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСтепеньЗнанияЯзыка2 + " КАК СтепеньЗнанияЯзыка2
				|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = СтепеньЗнанияЯзыка2.ФизическоеЛицо}
				|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
			
			ИменаВТКУничтожению.Добавить(ИмяВТЗнаниеЯзыков);
			ИменаВТКУничтожению.Добавить(ИмяВТКодСтепениЗнанияЯзыка1);
			ИменаВТКУничтожению.Добавить(ИмяВТСтепеньЗнанияЯзыка1);
			ИменаВТКУничтожению.Добавить(ИмяВТКодСтепениЗнанияЯзыка2);
			ИменаВТКУничтожению.Добавить(ИмяВТСтепеньЗнанияЯзыка2);
			
		КонецЕсли;
		
		Если НеобходимыСведенияОПрофессии Тогда
			
			ИмяВТПрофессии 		= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПрофессии");
			ИмяВТКодПрофессии1 	= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКодПрофессии1");
			ИмяВТПрофессия1 		= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПрофессия1");
			ИмяВТКодПрофессии2 	= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКодПрофессии2");
			ИмяВТПрофессия2 		= ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПрофессия2");
			
			ТекстЗапросаСведений =
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ПрофессииФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
				|	ПрофессииФизическихЛиц.Профессия
				|ПОМЕСТИТЬ ВТПрофессии
				|ИЗ
				|	РегистрСведений.ПрофессииФизическихЛиц КАК ПрофессииФизическихЛиц
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
				|		ПО ПрофессииФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо}
				|{ГДЕ
				|	ПрофессииФизическихЛиц.ФизическоеЛицо.*,
				|	ПрофессииФизическихЛиц.Профессия.*}
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Профессии.ФизическоеЛицо,
				|	МАКСИМУМ(Профессии.Профессия.Код) КАК Профессия1Код
				|ПОМЕСТИТЬ ВТКодПрофессии1
				|ИЗ
				|	ВТПрофессии КАК Профессии
				|
				|СГРУППИРОВАТЬ ПО
				|	Профессии.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Профессии.ФизическоеЛицо,
				|	МАКСИМУМ(Профессии.Профессия) КАК Профессия
				|ПОМЕСТИТЬ ВТПрофессия1
				|ИЗ
				|	ВТПрофессии КАК Профессии
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодПрофессии1 КАК КодПрофессии1
				|		ПО Профессии.ФизическоеЛицо = КодПрофессии1.ФизическоеЛицо
				|			И Профессии.Профессия.Код = КодПрофессии1.Профессия1Код}
				|
				|СГРУППИРОВАТЬ ПО
				|	Профессии.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Профессии.ФизическоеЛицо,
				|	МАКСИМУМ(Профессии.Профессия.Код) КАК Профессия2Код
				|ПОМЕСТИТЬ ВТКодПрофессии2
				|ИЗ
				|	ВТПрофессии КАК Профессии
				|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
				|		ПО Профессии.ФизическоеЛицо = Профессия1.ФизическоеЛицо
				|			И Профессии.Профессия = Профессия1.Профессия}
				|ГДЕ
				|	Профессия1.Профессия ЕСТЬ NULL 
				|
				|СГРУППИРОВАТЬ ПО
				|	Профессии.ФизическоеЛицо
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Профессии.ФизическоеЛицо,
				|	Профессии.Профессия
				|ПОМЕСТИТЬ ВТПрофессия2
				|ИЗ
				|	ВТПрофессии КАК Профессии
				|		{ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКодПрофессии2 КАК КодПрофессии2
				|		ПО Профессии.ФизическоеЛицо = КодПрофессии2.ФизическоеЛицо
				|			И Профессии.Профессия.Код = КодПрофессии2.Профессия2Код}
				|		{ЛЕВОЕ СОЕДИНЕНИЕ ВТПрофессия1 КАК Профессия1
				|		ПО Профессии.ФизическоеЛицо = Профессия1.ФизическоеЛицо
				|			И Профессии.Профессия = Профессия1.Профессия}
				|ГДЕ
				|	Профессия1.Профессия ЕСТЬ NULL ";
				
			Если НЕ ТолькоРазрешенные Тогда
				ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
			КонецЕсли;
			
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПрофессии", ИмяВТПрофессии);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТКодПрофессии1", ИмяВТКодПрофессии1);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПрофессия1", ИмяВТПрофессия1);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТКодПрофессии2", ИмяВТКодПрофессии2);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТПрофессия2", ИмяВТПрофессия2);
			ТекстЗапросаСведений = СтрЗаменить(ТекстЗапросаСведений, "ВТФизическиеЛица", ИмяВременнойТаблицыОтборовФизическихЛиц);
			
			ТекстОписанияПолей = ТекстЗапросаСведений + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			ТекстОписанияПолей = ТекстОписанияПолей + ",
				|	ЕСТЬNULL(Профессия1.Профессия, ЗНАЧЕНИЕ(Справочник.ПрофессииРабочих.ПустаяСсылка)) КАК Профессия1,
				|	ЕСТЬNULL(Профессия2.Профессия, ЗНАЧЕНИЕ(Справочник.ПрофессииРабочих.ПустаяСсылка)) КАК Профессия2";
				
			ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
			ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПрофессия1 + " КАК Профессия1
				|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = СтепеньЗнанияЯзыка1.ФизическоеЛицо}
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПрофессия2 + " КАК Профессия2
				|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = СтепеньЗнанияЯзыка2.ФизическоеЛицо}
				|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
			
			ИменаВТКУничтожению.Добавить(ИмяВТПрофессии);
			ИменаВТКУничтожению.Добавить(ИмяВТКодПрофессии1);
			ИменаВТКУничтожению.Добавить(ИмяВТПрофессия1);
			ИменаВТКУничтожению.Добавить(ИмяВТКодПрофессии2);
			ИменаВТКУничтожению.Добавить(ИмяВТПрофессия2);
			
		КонецЕсли;
		
		МассивИзмерений = Новый Массив;
		МассивИзмерений.Добавить("Период");
		МассивИзмерений.Добавить("ФизическоеЛицо");
		
		Если НеобходимоСемейноеПоложение Тогда
			
			ИмяВТСемейноеПоложениеФизическихЛицСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТСемейноеПоложениеФизическихЛицСрезПоследних");
			
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("СемейноеПоложениеФизическихЛиц", МассивИзмерений); 
			
			ПоляОтбора = Неопределено;
			
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			
				ПоляОтбораПериодическихДанных.Свойство("СемейноеПоложениеФизическихЛиц", ПоляОтбора);
			
			КонецЕсли;
			 
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
					ТолькоРазрешенные, 
					КоллекцииПолей, 
					"СемейноеПоложениеФизическихЛиц", 
					ИмяВременнойТаблицыОтборовФизическихЛиц, 
					ИмяВТСемейноеПоложениеФизическихЛицСрезПоследних, 
					ПоляОтбора, 
					, 
					, 
					Истина);
			
			ТекстОписанияПолей = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			ТекстОписанияПолей = ТекстОписанияПолей + ",
				|	ЕСТЬNULL(СемейноеПоложениеФизическихЛиц.СемейноеПоложение, ЗНАЧЕНИЕ(Справочник.СостояниеВБраке.ПустаяСсылка)) КАК СемейноеПоложение";
				
			ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
			ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТСемейноеПоложениеФизическихЛицСрезПоследних + " КАК СемейноеПоложениеФизическихЛиц
				|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = СемейноеПоложениеФизическихЛиц.ФизическоеЛицо}
				|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
				
			ИменаВТКУничтожению.Добавить(ИмяВТСемейноеПоложениеФизическихЛицСрезПоследних);
			
		КонецЕсли; 
		
		Если НеобходимыСведенияОВоинскомУчете Тогда
			
			ИмяВТВоинскийУчетСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТВоинскийУчетСрезПоследних");
			
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("ВоинскийУчет", МассивИзмерений); 
			
			ПоляОтбора = Неопределено;
			
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			
				ПоляОтбораПериодическихДанных.Свойство("ВоинскийУчет", ПоляОтбора);
			
			КонецЕсли;
			 
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
					ТолькоРазрешенные, 
					КоллекцииПолей, 
					"ВоинскийУчет", 
					ИмяВременнойТаблицыОтборовФизическихЛиц, 
					ИмяВТВоинскийУчетСрезПоследних, 
					ПоляОтбора, 
					, 
					, 
					Истина);
			
			ТекстОписанияПолей = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			Для каждого ПолеСведений Из ПоляСведенийВоинскогоУчета Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей + ",
					|	" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхВоинскогоУчета(ПолеСведений) + " КАК " + ПолеСведений;
					
			КонецЦикла;
				
			ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
			ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТВоинскийУчетСрезПоследних + " КАК ВоинскийУчет
				|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = ВоинскийУчет.ФизическоеЛицо}
				|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
				
			ИменаВТКУничтожению.Добавить(ИмяВТВоинскийУчетСрезПоследних);
			
		КонецЕсли; 
		
		Если НеобходимаОрганизацияБронированияВоинскогоУчета Тогда
			
			ИмяВТБронированиеСотрудниковСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТБронированиеСотрудниковСрезПоследних");
			
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("БронированиеСотрудников", МассивИзмерений); 
			
			ПоляОтбора = Неопределено;
			
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
			
				ПоляОтбораПериодическихДанных.Свойство("БронированиеСотрудников", ПоляОтбора);
			
			КонецЕсли;
			 
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
					ТолькоРазрешенные, 
					КоллекцииПолей, 
					"БронированиеСотрудников", 
					ИмяВременнойТаблицыОтборовФизическихЛиц, 
					ИмяВТБронированиеСотрудниковСрезПоследних, 
					ПоляОтбора, 
					, 
					, 
					Истина);
			
			ТекстОписанияПолей = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
				
			ТекстОписанияПолей = ТекстОписанияПолей + ",
				|	ЕСТЬNULL(БронированиеСотрудников.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ВоинскийУчетЗабронированОрганизацией";
					
			
			ПозицияИндексировать = Найти(ТекстПослеПоместить, "ИНДЕКСИРОВАТЬ");
			
			ТекстПослеПоместить = Лев(ТекстПослеПоместить, ПозицияИндексировать - 1) +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТБронированиеСотрудниковСрезПоследних + " КАК БронированиеСотрудников
				|		ПО ДанныеФизическихЛиц.ФизическоеЛицо = БронированиеСотрудников.ФизическоеЛицо}
				|" + Сред(ТекстПослеПоместить, ПозицияИндексировать);
				
			ИменаВТКУничтожению.Добавить(ИмяВТБронированиеСотрудниковСрезПоследних);
			
		КонецЕсли; 
		
		НовыйТекстЗапросаВТКадровыеДанныеФизическихЛиц = 
			ТекстОписанияПолей + "
			|ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеФизическихЛиц + "
			|" +
			ТекстПослеПоместить;
			
		ЗапросВТКадровыеДанныеФизическихЛиц.Текст = 
			СтрЗаменить(
				ЗапросВТКадровыеДанныеФизическихЛиц.Текст, 
				ТекстЗапросаВТКадровыеДанныеФизическихЛиц,
				НовыйТекстЗапросаВТКадровыеДанныеФизическихЛиц);
				
		ЗарплатаКадры.ДобавитьТекстУдаленияВременныхТаблиц(ЗапросВТКадровыеДанныеФизическихЛиц.Текст, ИменаВТКУничтожению);
		
	КонецЕсли; 
	
	Возврат ЗапросВТКадровыеДанныеФизическихЛиц;
	
КонецФункции

// Осуществляет запрос во временную таблицу кадровых данных о сотрудниках.
// Параметры:
//			ТолькоРазрешенные - Булево - только разрешенные.
//			ИмяВТКадровыеДанныеСотрудников - Строка - имя ВТ.
//			ИмяВременнойТаблицыОтборовСотрудников - Строка - имя ВТ.
//			ПоляОтбораСотрудников - Структура - структура отбора.
//			КадровыеДанные - Структура - см. описание к функции КадровыеДанныеФизическихЛиц.
//			ПоляОтбораПериодическихДанных - Структура - см. описание к функции КадровыеДанныеФизическихЛиц.
//
// Возвращаемое значение:
//		Запрос - подготовленный запрос.
//
Функция ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ИмяВТКадровыеДанныеСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, КадровыеДанные, ПоляОтбораПериодическихДанных) Экспорт
	
	НеобходимыДанныеКадровойИстории = Ложь;
	
	НеобходимГрафик = Ложь;
	НеобходимыСвойстваГрафика = Ложь;
	
	НеобходимыСведенияОПлановыхАвансах = Ложь;
	МассивПолейПлановыхАвансов = Новый Массив;
	
	НеобходимыДанныеДолжности = Ложь;
	НеобходимыДанныеОбОсновныхНачислениях = Ложь;
	НеобходимыДанныеПодразделения = Ложь;
	
	НеобходимаТекущаяДолжностьПоШтатномуРасписанию = Ложь;
	
	СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность = Ложь;
	
	МассивПолейКадровойИстории = Новый Массив;
	МассивПолейГрафиков = Новый Массив;
	МассивПолейСвойствГрафика = Новый Массив;
	МассивПолейДанныхДолжности = Новый Массив;
	МассивПолейДанныхПодразделения = Новый Массив;
	МассивФункциональныхОпций = Новый Массив;
	МассивПолейТекущаяДолжностьПоШтатномуРасписанию = Новый Массив;
	
	МассивНеобходимыхКадровыхДанныхБазовогоУчета = Новый Массив;
	
	НеобходимПоказательТарифнойСтавки = Ложь;
	СредиПолейЗапрашиваемыхДанныхЕстьПоляТарифнойСтавки = Ложь;
	
	Для Каждого ЭлМассива Из КадровыеДанные Цикл
		
		Если ВРег(ЭлМассива) = "ДОЛЖНОСТЬ"  Тогда
			
			СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность = Истина;
			
		КонецЕсли; 
		
		Если ВРег(ЭлМассива) = "ПОДРАЗДЕЛЕНИЕ"  Тогда
			
			СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение = Истина;
			
		КонецЕсли; 
		
		Если ВРег(ЭлМассива) = "ОРГАНИЗАЦИЯ"  Тогда
			
			СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация = Истина;
			
		КонецЕсли;
		
		Если ВРег(ЭлМассива) = "ОСНОВНОЕНАЧИСЛЕНИЕ" Тогда
			
			НеобходимыДанныеОбОсновныхНачислениях = Истина;
			
		ИначеЕсли КадровыйУчетБазовый.НеобходимыДанныеДолжности(ЭлМассива) Тогда
			
			МассивПолейДанныхДолжности.Добавить(ЭлМассива);
			НеобходимыДанныеДолжности = Истина;
			
			КадровыйУчетБазовый.НеобходимыФункциональныеОпцииОрганизации(МассивФункциональныхОпций, ЭлМассива);
			
		ИначеЕсли КадровыйУчетБазовый.НеобходимыДанныеПодразделения(ЭлМассива) Тогда
			
			МассивПолейДанныхПодразделения.Добавить(ЭлМассива);
			НеобходимыДанныеПодразделения = Истина;
			
			КадровыйУчетБазовый.НеобходимыФункциональныеОпцииОрганизации(МассивФункциональныхОпций, ЭлМассива);
							
		ИначеЕсли НеобходимаИсторияГрафиков(ЭлМассива) Тогда
			
			МассивПолейГрафиков.Добавить(ЭлМассива);
			НеобходимГрафик = Истина;
			
		ИначеЕсли НеобходимыСвойстваГрафика(ЭлМассива) Тогда
			
			МассивПолейСвойствГрафика.Добавить(ЭлМассива);
			НеобходимГрафик = Истина;
			НеобходимыСвойстваГрафика = Истина;
			
		ИначеЕсли НеобходимыСведенияОПлановыхАвансах(ЭлМассива) Тогда
			
			МассивПолейПлановыхАвансов.Добавить(ЭлМассива);
			НеобходимыСведенияОПлановыхАвансах = Истина;
			
		ИначеЕсли НеобходимаТекущаяДолжностьПоШтатномуРасписанию(ЭлМассива) Тогда
			
			МассивПолейТекущаяДолжностьПоШтатномуРасписанию.Добавить(ЭлМассива);
			НеобходимаТекущаяДолжностьПоШтатномуРасписанию = Истина;
			
		ИначеЕсли НеобходимПоказательТарифнойСтавки(ЭлМассива) Тогда
			
			НеобходимПоказательТарифнойСтавки = Истина;
			
		Иначе
			
			Если КадровыйУчетБазовый.НеобходимаТарифнаяСтавкаСотрудника(ЭлМассива) Тогда
				
				СредиПолейЗапрашиваемыхДанныхЕстьПоляТарифнойСтавки = Истина;
				
			КонецЕсли; 
			
			МассивНеобходимыхКадровыхДанныхБазовогоУчета.Добавить(ЭлМассива);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗапросВТКадровыеДанныеСотрудников = КадровыйУчетБазовый.ЗапросВТКадровыеДанныеСотрудников(ТолькоРазрешенные, ИмяВТКадровыеДанныеСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, МассивНеобходимыхКадровыхДанныхБазовогоУчета, ПоляОтбораПериодическихДанных);
	
	Если МассивНеобходимыхКадровыхДанныхБазовогоУчета.Количество() < КадровыеДанные.Количество() Тогда
		
		ИменаВТКУничтожению = Новый Массив;
		
		МассивТекстовЗапроса = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЗапросВТКадровыеДанныеСотрудников.Текст, ";");
		
		ТекстЗапросаВТКадровыеДанныеСотрудников = "";
		ТекстПоместить = "ПОМЕСТИТЬ " + ВРег(ИмяВТКадровыеДанныеСотрудников);
		
		Для Каждого ТекстЗапроса Из МассивТекстовЗапроса Цикл
			
			ПозицияПоместить = Найти(ВРег(ТекстЗапроса), ТекстПоместить);
			
			Если ПозицияПоместить > 0 Тогда
				
				ТекстЗапросаВТКадровыеДанныеСотрудников = ТекстЗапроса;
				ТекстОписанияПолей = СокрЛП(Лев(ТекстЗапросаВТКадровыеДанныеСотрудников, ПозицияПоместить - 1));
				ТекстПослеПоместить = СокрЛП(Сред(ТекстЗапросаВТКадровыеДанныеСотрудников, ПозицияПоместить + СтрДлина(ТекстПоместить)));
				
				Прервать;
				
			КонецЕсли; 
			
		КонецЦикла;
		
		Если МассивФункциональныхОпций.Количество() > 0 И НЕ СредиПолейЗапрашиваемыхДанныхЕстьПолеОрганизация Тогда
			
			НеобходимыДанныеКадровойИстории = Истина;
			МассивПолейКадровойИстории.Добавить("Организация");
			
		КонецЕсли; 
		
		Если НеобходимыДанныеПодразделения И НЕ СредиПолейЗапрашиваемыхДанныхЕстьПолеПодразделение Тогда
			
			НеобходимыДанныеКадровойИстории = Истина;
			МассивПолейКадровойИстории.Добавить("Подразделение");
			
		КонецЕсли;
			
		Если НеобходимыДанныеДолжности И НЕ СредиПолейЗапрашиваемыхДанныхЕстьПолеДолжность Тогда
			
			НеобходимыДанныеКадровойИстории = Истина;
			МассивПолейКадровойИстории.Добавить("Должность");
			
		КонецЕсли;
		
		СоответствиеИзмеренийПолямТаблицы = Новый Соответствие;
		СоответствиеИзмеренийПолямТаблицы.Вставить("Период", ПоляОтбораСотрудников.Период);
		СоответствиеИзмеренийПолямТаблицы.Вставить("Сотрудник", ПоляОтбораСотрудников.Сотрудник);
		
		Если НеобходимыДанныеКадровойИстории Тогда
			
			ИмяВТКадроваяИсторияСотрудниковСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТКадроваяИсторияСотрудниковСрезПоследних");
			
			ПоляОтбора = Неопределено;
			
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
				
				 ПоляОтбораПериодическихДанных.Свойство("КадроваяИсторияСотрудников", ПоляОтбора);
				 
			КонецЕсли;
				 
			МассивИзмерений = Новый Массив;
			МассивИзмерений.Добавить("Период");
			МассивИзмерений.Добавить("Сотрудник");
		
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("КадроваяИсторияСотрудников", МассивИзмерений); 
			
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"КадроваяИсторияСотрудников", 
				ИмяВременнойТаблицыОтборовСотрудников, 
				ИмяВТКадроваяИсторияСотрудниковСрезПоследних, 
				ПоляОтбора, 
				, 
				, 
				Истина,
				СоответствиеИзмеренийПолямТаблицы);
				
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(ЗапросВТКадровыеДанныеСотрудников, ЗапросВТИмяРегистраСрез);
					
			ТекстОписанияПолей = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
					
			Для Каждого ЭлМассива Из МассивПолейКадровойИстории Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|" + ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника(ЭлМассива) + " КАК " + ЭлМассива;
				
			КонецЦикла;
				
			ТекстПослеПоместить = ТекстПослеПоместить +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТКадроваяИсторияСотрудниковСрезПоследних + " КАК КадроваяИсторияСотрудниковСрезПоследних
				|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
				|			И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = КадроваяИсторияСотрудниковСрезПоследних.Период}";
				
			ИменаВТКУничтожению.Добавить(ИмяВТКадроваяИсторияСотрудниковСрезПоследних);	
			
		КонецЕсли;
		
		Если НеобходимГрафик Тогда
			
			ИмяВТГрафикРаботыСотрудниковСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТГрафикРаботыСотрудниковСрезПоследних");
			
			ПоляОтбора = Неопределено;
			
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
				
				 ПоляОтбораПериодическихДанных.Свойство("ГрафикРаботыСотрудников", ПоляОтбора);
				 
			КонецЕсли;
			 
			МассивИзмерений = Новый Массив;
			МассивИзмерений.Добавить("Период");
			МассивИзмерений.Добавить("Сотрудник");
			
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("ГрафикРаботыСотрудников", МассивИзмерений); 
		
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"ГрафикРаботыСотрудников", 
				ИмяВременнойТаблицыОтборовСотрудников, 
				ИмяВТГрафикРаботыСотрудниковСрезПоследних, 
				ПоляОтбора, 
				, 
				, 
				Истина,
				СоответствиеИзмеренийПолямТаблицы);
				
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(ЗапросВТКадровыеДанныеСотрудников, ЗапросВТИмяРегистраСрез);
			
			ТекстОписанияПолей = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			Для Каждого ЭлМассива Из МассивПолейГрафиков Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы КАК " + ЭлМассива;
				
			КонецЦикла;
			
			Для Каждого ЭлМассива Из МассивПолейСвойствГрафика Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	ОписаниеГрафика." + ЭлМассива;
				
			КонецЦикла;
				
			ТекстПослеПоместить = ТекстПослеПоместить +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТГрафикРаботыСотрудниковСрезПоследних + " КАК ГрафикРаботыСотрудниковСрезПоследних
				|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ГрафикРаботыСотрудниковСрезПоследних.Сотрудник
				|		И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = ГрафикРаботыСотрудниковСрезПоследних.Период}";
			
			Если НеобходимыСвойстваГрафика Тогда
				
				ТекстПослеПоместить = ТекстПослеПоместить +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботыСотрудников КАК ОписаниеГрафика
					|		ПО ГрафикРаботыСотрудниковСрезПоследних.ГрафикРаботы = ОписаниеГрафика.Ссылка}";
				
			КонецЕсли;	
			
			ИменаВТКУничтожению.Добавить(ИмяВТГрафикРаботыСотрудниковСрезПоследних);
			
		КонецЕсли;
		
		Если НеобходимыСведенияОПлановыхАвансах Тогда
			
			ИмяВТПлановыеАвансыСрезПоследних = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТПлановыеАвансыСрезПоследних");
			
			ПоляОтбора = Неопределено;
			Если ПоляОтбораПериодическихДанных <> Неопределено Тогда
				 ПоляОтбораПериодическихДанных.Свойство("ПлановыеАвансы", ПоляОтбора);
			КонецЕсли;
			 
			МассивИзмерений = Новый Массив;
			МассивИзмерений.Добавить("Период");
			МассивИзмерений.Добавить("Сотрудник");
			
			КоллекцииПолей = ЗарплатаКадры.КоллекцииПолейДляПодготовкиТекстаЗапроса("ПлановыеАвансы", МассивИзмерений); 
		
			ЗапросВТИмяРегистраСрез = ЗарплатаКадры.ЗапросВТИмяРегистраСрез(
				ТолькоРазрешенные, 
				КоллекцииПолей, 
				"ПлановыеАвансы", 
				ИмяВременнойТаблицыОтборовСотрудников, 
				ИмяВТПлановыеАвансыСрезПоследних, 
				ПоляОтбора, 
				, 
				, 
				Истина,
				СоответствиеИзмеренийПолямТаблицы);
				
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(ЗапросВТКадровыеДанныеСотрудников, ЗапросВТИмяРегистраСрез);
			
			ТекстОписанияПолей = ЗапросВТИмяРегистраСрез.Текст + ЗарплатаКадры.РазделительЗапросов() + ТекстОписанияПолей;
			
			Для Каждого ЭлМассива Из МассивПолейПлановыхАвансов Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	ПлановыеАвансыСрезПоследних." + ЭлМассива + " КАК " + ЭлМассива;
				
			КонецЦикла;
			
			ТекстПослеПоместить = ТекстПослеПоместить +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТПлановыеАвансыСрезПоследних + " КАК ПлановыеАвансыСрезПоследних
				|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ПлановыеАвансыСрезПоследних.Сотрудник
				|		И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = ПлановыеАвансыСрезПоследних.Период}";
			
			ИменаВТКУничтожению.Добавить(ИмяВТПлановыеАвансыСрезПоследних);
			
		КонецЕсли; 
		
		Если НеобходимыДанныеДолжности Тогда
			
			Для Каждого ЭлементМассиваПолей Из МассивПолейДанныхДолжности Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	" + КадровыйУчетБазовый.ПутьКДаннымПоИмениЗапрашиваемыхДанныхДолжности(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
					
			КонецЦикла;
				
			ФОИспользоватьШтатноеРасписание = Ложь;
			
			Если ФОИспользоватьШтатноеРасписание Тогда
				
				ТекстПослеПоместить = ТекстПослеПоместить +
					"
					|{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК ДанныеДолжности
					| 	ПО КадроваяИсторияСотрудниковСрезПоследних.ДолжностьПоШтатномуРасписанию.Должность = ДанныеДолжности.Ссылка}";
					
			Иначе
					
				ТекстПослеПоместить = ТекстПослеПоместить +
					"
					|{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Должности КАК ДанныеДолжности
					| 	ПО КадроваяИсторияСотрудниковСрезПоследних.Должность = ДанныеДолжности.Ссылка}";
					
			КонецЕсли;
				
		КонецЕсли; 
		
		Если НеобходимыДанныеПодразделения Тогда
			
			Для Каждого ЭлементМассиваПолей Из МассивПолейДанныхПодразделения Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	" + КадровыйУчетБазовый.ПутьКДаннымПоИмениЗапрашиваемыхДанныхПодразделения(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
					
			КонецЦикла;
				
			ТекстПослеПоместить = ТекстПослеПоместить +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПодразделенияОрганизаций КАК ДанныеПодразделения
				|		ПО КадроваяИсторияСотрудниковСрезПоследних.Подразделение = ДанныеПодразделения.Ссылка}";
				
		КонецЕсли; 
			
		Если НеобходимаТекущаяДолжностьПоШтатномуРасписанию Тогда
			
			Для Каждого ЭлементМассиваПолей Из МассивПолейТекущаяДолжностьПоШтатномуРасписанию Цикл
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	" + ПутьКДаннымПоИмениТекущаяДолжностьПоШтатномуРасписанию(ЭлементМассиваПолей) + " КАК " + ЭлементМассиваПолей;
				
			КонецЦикла;
			
			Если Найти(ТекстПослеПоместить, "РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников") = 0 Тогда
				ТекстПослеПоместить = ТекстПослеПоместить +
					"
					|	{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
					|		ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ТекущиеКадровыеДанныеСотрудников.Сотрудник}";
			КонецЕсли; 
				
		КонецЕсли; 
		
		Если НеобходимПоказательТарифнойСтавки ИЛИ НеобходимыДанныеОбОсновныхНачислениях Тогда
			
			Если НЕ СредиПолейЗапрашиваемыхДанныхЕстьПоляТарифнойСтавки Тогда
				
				ИмяВТТарифныеСтавкиСотрудников = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТТарифныеСтавкиСотрудников");
					
				ЗапросВТТарифныеСтавкиСотрудников = ЗапросВТТарифныеСтавкиСотрудников(
					ТолькоРазрешенные,
					ИмяВТТарифныеСтавкиСотрудников,
					ИмяВременнойТаблицыОтборовСотрудников,
					ПоляОтбораСотрудников,
					ПоляОтбораПериодическихДанных);
				
				ЗарплатаКадры.СкопироватьПараметрыЗапроса(ЗапросВТКадровыеДанныеСотрудников, ЗапросВТТарифныеСтавкиСотрудников);
				
				ТекстОписанияПолей = 
					ЗапросВТТарифныеСтавкиСотрудников.Текст +
					ЗарплатаКадры.РазделительЗапросов() +
					ТекстОписанияПолей;
				
				ТекстПослеПоместить = ТекстПослеПоместить +
					"
					|{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТТарифныеСтавкиСотрудников + " КАК ТарифныеСтавкиСотрудников
					| 	ПО " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Сотрудник + " = ТарифныеСтавкиСотрудников.Сотрудник
					| 		И " + ИмяВременнойТаблицыОтборовСотрудников + "." + ПоляОтбораСотрудников.Период + " = ТарифныеСтавкиСотрудников.Период}";
				
				ИменаВТКУничтожению.Добавить(ИмяВТТарифныеСтавкиСотрудников);
				
			КонецЕсли; 
			
			Если НеобходимПоказательТарифнойСтавки Тогда
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	" + ПутьКДаннымПоказательТарифнойСтавки() + " КАК ПоказательТарифнойСтавки";
					
			КонецЕсли;
				
			Если НеобходимыДанныеОбОсновныхНачислениях Тогда
				
				ТекстОписанияПолей = ТекстОписанияПолей +
					",
					|	" + ПутьКДаннымОсновногоНачисления() + " КАК ОсновноеНачисление";
					
			КонецЕсли;
				
		КонецЕсли; 
		
		Если МассивФункциональныхОпций.Количество() > 0 Тогда
			
			ИмяВТФункциональныеОпцииОрганизаций = ЗарплатаКадры.УникальноеИмяВременнойТаблицы("ВТФункциональныеОпцииОрганизаций");
			
			ЗапросВТФункциональныеОпцииОрганизаций = КадровыйУчетБазовый.ЗапросВТФункциональныеОпцииОрганизаций(
					ТолькоРазрешенные, 
					ИмяВТФункциональныеОпцииОрганизаций,
					МассивФункциональныхОпций);
			
			ЗарплатаКадры.СкопироватьПараметрыЗапроса(ЗапросВТКадровыеДанныеСотрудников, ЗапросВТФункциональныеОпцииОрганизаций);
			
			ТекстОписанияПолей = 
				ЗапросВТФункциональныеОпцииОрганизаций.Текст +
				ЗарплатаКадры.РазделительЗапросов() +
				ТекстОписанияПолей;
				
			ТекстПослеПоместить = ТекстПослеПоместить +
				"
				|	{ЛЕВОЕ СОЕДИНЕНИЕ " + ИмяВТФункциональныеОпцииОрганизаций + " КАК ФункциональныеОпции
				| 		ПО " + ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника("Организация") + " = ФункциональныеОпции.Организация}";
				
			ИменаВТКУничтожению.Добавить(ИмяВТФункциональныеОпцииОрганизаций);
			
		КонецЕсли; 
		
		НовыйТекстЗапросаВТКадровыеДанныеСотрудников = 
			ТекстОписанияПолей + "
			|ПОМЕСТИТЬ " + ИмяВТКадровыеДанныеСотрудников + "
			|" +
			ТекстПослеПоместить;
			
		ЗапросВТКадровыеДанныеСотрудников.Текст = 
			СтрЗаменить(
				ЗапросВТКадровыеДанныеСотрудников.Текст, 
				ТекстЗапросаВТКадровыеДанныеСотрудников,
				НовыйТекстЗапросаВТКадровыеДанныеСотрудников);
	
		ЗарплатаКадры.ДобавитьТекстУдаленияВременныхТаблиц(ЗапросВТКадровыеДанныеСотрудников.Текст, ИменаВТКУничтожению);
		
	КонецЕсли;
	
	Возврат ЗапросВТКадровыеДанныеСотрудников;
	
КонецФункции

// Возвращает временную таблицу тарифных ставок сотрудников.
// Параметры:
//         ТолькоРазрешенные - Булево - только разрешенные.
//         ИмяВТТарифныеСтавкиСотрудников - Строка - имя ВТ.
//         ИмяВременнойТаблицыОтборовСотрудников - Строка - имя ВТ.
//         ПоляОтбораСотрудников  - Структура - Структура отбора.
//         ПоляОтбораПериодическихДанных -  Структура - см. описание к функции КадровыеДанныеФизическихЛиц.
//
// Возвращаемое значение:
//		Запрос - подготовленный запрос.
//
Функция ЗапросВТТарифныеСтавкиСотрудников(ТолькоРазрешенные, ИмяВТТарифныеСтавкиСотрудников, ИмяВременнойТаблицыОтборовСотрудников, ПоляОтбораСотрудников, ПоляОтбораПериодическихДанных) Экспорт

	Возврат Неопределено; 
	
КонецФункции

// Заполняет кадровые движения документа
//		КадроваяИсторияСотрудников
//		ЗанятыеПозицииШтатногоРасписания.
//
// Параметры:
//		РегистраторОбъект - ДокументОбъект - регистратор.
//		Движения - Движения - коллекция движений, в которой необходимо заполнить кадровые движения
//		КадровыеДвижения - ТаблицаЗначений - таблица значений с полями:
//			ДатаСобытия
//			ВидСобытия - Перечисление.ВидыКадровыхСобытий
//			ДействуетДо (не обязательно)
//			Сотрудник
//			Позиция (не обязательно)
//			Подразделение (не обязательно)
//			Должность (не обязательно)
// 		КоличествоСтавок (не обязательно).
// 		
Процедура СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения) Экспорт
	
	ФОИспользоватьШтатноеРасписание = Ложь;
	
	КадровыйУчетБазовый.СформироватьКадровыеДвижения(РегистраторОбъект, Движения, КадровыеДвижения, Ложь);
	
	Регистратор = РегистраторОбъект.Ссылка;
	
	ДействуетДоЕсть = (КадровыеДвижения.Колонки.Найти("ДействуетДо") <> НеОпределено);
	ПозицияЕсть = (КадровыеДвижения.Колонки.Найти("Позиция") <> НеОпределено) и ФОИспользоватьШтатноеРасписание;
	ПодразделениеЕсть = (КадровыеДвижения.Колонки.Найти("Подразделение") <> НеОпределено);
	ДолжностьЕсть = (КадровыеДвижения.Колонки.Найти("Должность") <> НеОпределено);
	КоличествоСтавокЕсть = (КадровыеДвижения.Колонки.Найти("КоличествоСтавок") <> НеОпределено);
	ВидЗанятостиЕсть = (КадровыеДвижения.Колонки.Найти("ВидЗанятости") <> НеОпределено);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, ПозицияЕсть, Регистратор);
	
	// получим подразделения по позиции, если требуется
	Если ПозицияЕсть Тогда
		ПозицииСоответствие = Новый Соответствие;
		ПозицииМассив = Новый Массив;
		
		Для Каждого СтрокаДанных Из КадровыеДвижения Цикл
			ПозицииСоответствие[СтрокаДанных.Позиция] = 0;
		КонецЦикла;
		Для Каждого ЭлементСоответствия Из ПозицииСоответствие Цикл
			ПозицииМассив.Добавить(ЭлементСоответствия.Ключ);
		КонецЦикла;
		ПодразделенияДолжностиПозиций = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ПозицииМассив, "Подразделение,Должность");
	КонецЕсли;
	
	Для Каждого СтрокаДанных Из КадровыеДвижения Цикл
		
		Если КоличествоСтавокЕсть И СтрокаДанных.КоличествоСтавок = 0 И СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
			СтрокаДанных.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
		КонецЕсли;
		
		// движение по КадроваяИсторияСотрудников
		НоваяСтрока = Движения.КадроваяИсторияСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		НоваяСтрока.ФизическоеЛицо = СтрокаДанных.ФизическоеЛицо;
		НоваяСтрока.Организация = СтрокаДанных.Организация;
		Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.Подразделение = СтрокаДанных.ТекущееПодразделение;
			НоваяСтрока.Должность = СтрокаДанных.ТекущаяДолжность;
			НоваяСтрока.КоличествоСтавок = СтрокаДанных.ТекущееКоличествоСтавок;
			НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
		Иначе
			Если ПодразделениеЕсть И НЕ ПозицияЕсть Тогда
				НоваяСтрока.Подразделение = СтрокаДанных.Подразделение;
			КонецЕсли;
			Если ДолжностьЕсть И НЕ ПозицияЕсть Тогда
				НоваяСтрока.Должность = СтрокаДанных.Должность;
			КонецЕсли;
			Если ПозицияЕсть Тогда
				НоваяСтрока.ДолжностьПоШтатномуРасписанию = СтрокаДанных.Позиция;
				// если есть позиция, то подразделение и должность берем из нее!
				НоваяСтрока.Подразделение = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Подразделение;
				НоваяСтрока.Должность = ПодразделенияДолжностиПозиций[СтрокаДанных.Позиция].Должность;
			КонецЕсли;
			Если КоличествоСтавокЕсть Тогда
				НоваяСтрока.КоличествоСтавок = СтрокаДанных.КоличествоСтавок;
			КонецЕсли;
			Если ВидЗанятостиЕсть Тогда
				НоваяСтрока.ВидЗанятости = СтрокаДанных.ВидЗанятости;
			Иначе
				НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
			КонецЕсли; 
		КонецЕсли;
		НоваяСтрока.ВидСобытия = СтрокаДанных.ВидСобытия;
		
		// если есть дата "обратного" события - вводим его данные
		Если ДействуетДоЕсть Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.ОрганизацияПоОкончании = СтрокаДанных.Организация;
					Если ПодразделениеЕсть Тогда
						НоваяСтрока.ПодразделениеПоОкончании = СтрокаДанных.Подразделение;
					КонецЕсли;
					Если ПозицияЕсть Тогда
						НоваяСтрока.ДолжностьПоШтатномуРасписаниюПоОкончании = СтрокаДанных.Позиция;
					КонецЕсли;
					Если ДолжностьЕсть Тогда
						НоваяСтрока.ДолжностьПоОкончании = СтрокаДанных.Должность;
					КонецЕсли;
					Если КоличествоСтавокЕсть Тогда
						НоваяСтрока.КоличествоСтавокПоОкончании = СтрокаДанных.КоличествоСтавок;
					КонецЕсли;
					Если ВидЗанятостиЕсть Тогда
						НоваяСтрока.ВидЗанятостиПоОкончании = СтрокаДанных.ВидЗанятости;
					Иначе
						НоваяСтрока.ВидЗанятости = СтрокаДанных.ТекущийВидЗанятости;
					КонецЕсли; 
				Иначе
					НоваяСтрока.ОрганизацияПоОкончании = СтрокаДанных.ТекущаяОрганизация;
					НоваяСтрока.ПодразделениеПоОкончании = СтрокаДанных.ТекущееПодразделение;
					НоваяСтрока.ДолжностьПоОкончании = СтрокаДанных.ТекущаяДолжность;
					НоваяСтрока.КоличествоСтавокПоОкончании = СтрокаДанных.ТекущееКоличествоСтавок;
					НоваяСтрока.ВидЗанятостиПоОкончании = СтрокаДанных.ТекущийВидЗанятости;
				Конецесли;
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.ВидСобытияПоОкончании = Перечисления.ВидыКадровыхСобытий.Увольнение;
				ИначеЕсли СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
					НоваяСтрока.ВидСобытияПоОкончании = Перечисления.ВидыКадровыхСобытий.Перемещение;
				ИначеЕсли СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
					НоваяСтрока.ВидСобытияПоОкончании = Перечисления.ВидыКадровыхСобытий.Прием;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;

		// если есть дата "обратного" события - вводим его данные
		Если ДействуетДоЕсть Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
					НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
					НоваяСтрока.ПрименениеПоОкончании = Истина;
				ИначеЕсли СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
					НоваяСтрока.ПрименениеПоОкончании = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// если передана позиция - проводим по регистру ЗанятыеПозицииШтатногоРасписания
		Если ПозицияЕсть И КоличествоСтавокЕсть Тогда
			ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаДанных, ДействуетДоЕсть);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Движения.КадроваяИсторияСотрудников.Записывать Тогда
		Движения.КадроваяИсторияСотрудников.Записать();
		Движения.КадроваяИсторияСотрудников.Записывать = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет историю изменения графиков работы
//
// Параметры:
//		Движения - Движения - коллекция движений, в которой необходимо заполнить движения по графикам работы
//		ДвиженияГрафиков - ТаблицаЗначений - таблица значений с полями:
//			ДатаСобытия
//			ВидСобытия - Перечисление.ВидыКадровыхСобытий
//			Сотрудник
//			ГрафикРаботы
//			ДействуетДо (не обязательно).
// 		
Процедура СформироватьИсториюИзмененияГрафиков(Движения, ДвиженияГрафиков) Экспорт
	Регистратор = Движения.ГрафикРаботыСотрудников.Отбор.Регистратор.Значение;
	
	ДействуетДоЕсть = (ДвиженияГрафиков.Колонки.Найти("ДействуетДо") <> НеОпределено);
	
	// Дополним полем Организация, получим текущие данные для записей перемещения и увольнения.
	ДополнитьТекущимиДаннымиГрафиков(ДвиженияГрафиков, Регистратор);
	
	Для Каждого СтрокаДанных Из ДвиженияГрафиков Цикл
		Движения.ГрафикРаботыСотрудников.Записывать = Истина;
		
		НоваяСтрока = Движения.ГрафикРаботыСотрудников.Добавить();
		НоваяСтрока.Период = СтрокаДанных.ДатаСобытия;
		НоваяСтрока.Сотрудник = СтрокаДанных.Сотрудник;
		Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.ГрафикРаботы = СтрокаДанных.ТекущийГрафик;
		Иначе
			НоваяСтрока.ГрафикРаботы = СтрокаДанных.ГрафикРаботы;
		КонецЕсли;
		
		// если есть дата "обратного" события - вводим его данные
		Если ДействуетДоЕсть Тогда
			Если ЗначениеЗаполнено(СтрокаДанных.ДействуетДо) Тогда
				НоваяСтрока.ДействуетДо = СтрокаДанных.ДействуетДо;
				Если СтрокаДанных.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием Тогда
					НоваяСтрока.ГрафикРаботыПоОкончании = СтрокаДанных.ГрафикРаботы;
				Иначе
					НоваяСтрока.ГрафикРаботыПоОкончании = СтрокаДанных.ТекущийГрафик;
				Конецесли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Возвращает процент северной надбавки физического лица или сотрудника
//
// Параметры:
//		Объект - СправочникСсылка.Сотрудники, СправочникСсылка.ФизическиеЛица - объект.
//		ДатаПолученияДанных - Дата - дата получения данных.
//
// Возвращаемое значение: 
//		Число - Процент надбавки.
//
Функция ПроцентСевернойНадбавки(Объект, ДатаПолученияДанных) Экспорт
	
	
	
КонецФункции

// Возвращает массив сотрудников.
//
// Параметры:
//		ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физ. лицо.
//		Организация - СправочникСсылка.Организации - Организация.
//		Период - Дата - Период.
//
// Возвращаемое значение:
//		Массив - массив элементос справочника Сотрудники.
Функция МассивСотрудников(ФизическоеЛицо, Организация, Период) Экспорт
	
	МассивФизическихЛиц = Новый Массив();
	МассивФизическихЛиц.Добавить(ФизическоеЛицо);
	
	ПараметрыПолученияСотрудниковОрганизаций = КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ПараметрыПолученияСотрудниковОрганизаций.СписокФизическихЛиц	= МассивФизическихЛиц;
	ПараметрыПолученияСотрудниковОрганизаций.Организация 			= Организация;
	ПараметрыПолученияСотрудниковОрганизаций.НачалоПериода 			= Период;
	ПараметрыПолученияСотрудниковОрганизаций.ОкончаниеПериода 		= Период;
	
	ТаблицаСотрудников = КадровыйУчет.СотрудникиОрганизации(Истина, ПараметрыПолученияСотрудниковОрганизаций);
	
	Возврат ТаблицаСотрудников.ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(Сотрудники) Экспорт
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		ОбновляемыеСотрудники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		ОбновляемыеСотрудники = Сотрудники;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбновляемыеСотрудники", ОбновляемыеСотрудники);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация,
		|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение
		|ПОМЕСТИТЬ ВТСотрудникиКОбновлению
		|ИЗ
		|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудниковПоФизлицу
		|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудниковПоФизлицу.ФизическоеЛицо
		|			И (ТекущиеКадровыеДанныеСотрудниковПоФизлицу.ОсновноеРабочееМестоВОрганизации = ИСТИНА)
		|			И ТекущиеКадровыеДанныеСотрудников.Сотрудник <> ТекущиеКадровыеДанныеСотрудниковПоФизлицу.Сотрудник
		|ГДЕ
		|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В(&ОбновляемыеСотрудники)
		|	И ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
		|	И ТекущиеКадровыеДанныеСотрудниковПоФизлицу.Сотрудник ЕСТЬ NULL 
		|;
		| 	
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоследниеДоговоры.Сотрудник,
		|	ПоследниеДоговоры.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПоследниеДоговоры.Сотрудник.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(ПоследниеДоговоры.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
		|	ЕСТЬNULL(ПоследниеДоговоры.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ТекущееПодразделение,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ПоследниеДоговоры.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ОсновноеРабочееМестоВОрганизации
		|ИЗ
		|	ВТСотрудникиКОбновлению КАК ПоследниеДоговоры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ПоследниеДоговоры.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
		|ГДЕ
		|	(ЕСТЬNULL(ПоследниеДоговоры.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
		|			ИЛИ ЕСТЬNULL(ПоследниеДоговоры.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) <> ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение)";
		
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Набор = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			Набор.Отбор.Сотрудник.Установить(Выборка.Сотрудник);
			
			ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);
			
			Набор.ОбменДанными.Загрузка = Истина;
			Набор.Записать();
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Функция НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля) Экспорт
	
	НеобходимыКадровыеДанныеФизическогоЛица = КадровыйУчетБазовый.НеобходимыКадровыеДанныеФизическогоЛица(ИмяПоля);
	
	Возврат НеобходимыКадровыеДанныеФизическогоЛица
		ИЛИ НеобходимыСведенияОВысшемОбразовании(ИмяПоля)
		ИЛИ НеобходимыСведенияОВторомВысшемОбразовании(ИмяПоля)
		ИЛИ НеобходимыСведенияОПослевузовскомОбразовании(ИмяПоля)
		ИЛИ НеобходимыСведенияОбУченойСтепени(ИмяПоля)
		ИЛИ НеобходимыСведенияОбУченомЗвании(ИмяПоля)
		ИЛИ НеобходимыСведенияОбОбщемСтаже(ИмяПоля)
		ИЛИ НеобходимыСведенияОНепрерывномСтаже(ИмяПоля)
		ИЛИ НеобходимыСведенияОДругомСтаже(ИмяПоля)
		ИЛИ НеобходимыСведенияОСтажеНаНадбавкуЗаВыслугуЛет(ИмяПоля)
		ИЛИ НеобходимыСведенияОбОбщемНаучноПедагогическомСтаже(ИмяПоля)
		ИЛИ НеобходимыСведенияОПедагогическомСтаже(ИмяПоля)
		ИЛИ НеобходимыСведенияОВладенииЯзыками(ИмяПоля)
		ИЛИ НеобходимыСведенияОПрофессии(ИмяПоля)
		ИЛИ НеобходимоСемейноеПоложение(ИмяПоля)
		ИЛИ НеобходимыСведенияОВоинскомУчете(ИмяПоля)
		ИЛИ НеобходимаОрганизацияБронированияВоинскогоУчета(ИмяПоля)
		ИЛИ НеобходимыСведенияОбОбразовании(ИмяПоля);
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций. Структура содержит
// ключи возвращаемые КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц.
// Добавляет ключи РаботникиПоТрудовымДоговорам и РаботникиПоДоговорамГПХ. Позволяет формировать списки
// сотрудников с различными сочетаниями трудовых отношений.
//
// Возвращаемое значение:
//   Структура - Содержит дополнительные ключи:
//					РаботникиПоТрудовымДоговорам - Булево, Неопределено (Истина - работник по ТД, Ложь - не работает по ТД
//												Неопределено - неважно наличие ТД)
//					РаботникиПоДоговорамГПХ - Булево, Неопределено (Истина - есть действующие договоры ГПХ, Ложь - нет
//												действующих договоров ГПХ, Неопределено - неважно наличие действующего договора ГПХ).
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц() Экспорт
		
	ПараметрыПолученияСотрудников = КадровыйУчетБазовый.ПараметрыПолученияСотрудниковОрганизацийПоСпискуФизическихЛиц();
	ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников);
	
	Возврат ПараметрыПолученияСотрудников;
	
КонецФункции

// Возвращает структуру параметров для СоздатьВТСотрудникиОрганизаций. Структура содержит
// ключи возвращаемые КадровыйУчет.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице.
// Добавляет ключи РаботникиПоТрудовымДоговорам и РаботникиПоДоговорамГПХ. Позволяет формировать списки
// сотрудников с различными сочетаниями трудовых отношений.
//
// Возвращаемое значение:
//   Структура - Содержит дополнительные ключи:
//					РаботникиПоТрудовымДоговорам - Булево, Неопределено (Истина - работник по ТД, Ложь - не работает по ТД
//											Неопределено - неважно наличие ТД)
//					РаботникиПоДоговорамГПХ - Булево, Неопределено (Истина - есть действующие договоры ГПХ, Ложь - нет
//											действующих договоров ГПХ, Неопределено - неважно наличие действующего договора ГПХ).
//
Функция ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице() Экспорт

	ПараметрыПолученияСотрудников =  КадровыйУчетБазовый.ПараметрыПолученияСотрудниковОрганизацийПоВременнойТаблице();
	ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников);
	
	Возврат ПараметрыПолученияСотрудников;
	
КонецФункции


// Процедура создает временную таблицу процентов северной надбавки физических лиц
// на указанные даты.
//
// В менеджере временных таблиц создается таблица ВТПроцентСевернойНадбавкиФизическихЛиц
// 	- ФизическоеЛицо,
// 	- ПроцентСевернойНадбавки - процент северной надбавки определенный для физического лица.
// 
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер ВТ, в котором должна быть 
//											таблица ВТФизическиеЛицаПериоды с полями 
//											- ФизическоеЛицо, 
//											- Период
//		ИмяТаблицыФизическиеЛицаПериоды - Строка - можно передать имя временной таблицы 
//											в которой хранятся физические лица и периоды.
//
Процедура СоздатьВТПроцентСевернойНадбавкиФизическихЛиц(МенеджерВременныхТаблиц, ИмяТаблицыФизическиеЛицаПериоды = "ВТФизическиеЛицаПериоды") Экспорт
	
КонецПроцедуры

// Процедура создает временную таблицу с процентом северной надбавки сотрудников 
// на указанную дату.
//
// В менеджере временных таблиц создается таблица ВТПериодыИзмененияСтажа
// 	- Сотрудник,
// 	- Период - период получения процента северной надбавки,
// 	- ПроцентСевернойНадбавки - значение стажа в месяцах на дату.
// 
// Параметры:
//		МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер ВТ, в котором должна быть 
//											таблица ВТСотрудникиПериоды с полями 
//											- Сотрудник, 
//											- Период,
//		ИмяТаблицыСотрудникиПериоды - Строка - можно передать имя временной таблицы 
//											в которой хранятся сотрудники и периоды.
//
Процедура СоздатьВТПроцентСевернойНадбавкиСотрудников(МенеджерВременныхТаблиц, ИмяТаблицыСотрудникиПериоды = "ВТСотрудникиПериоды") Экспорт
	
	
	
КонецПроцедуры


Функция ЗапросВТСотрудникиОрганизации(ТолькоРазрешенные, ИмяВТСотрудникиОрганизации, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КадроваяИсторияСотрудников.Период КАК Период,
	               |	КадроваяИсторияСотрудников.ВидСобытия
	               |ПОМЕСТИТЬ ВТ_СобытияПоПериод
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	               |ГДЕ
	               |	КадроваяИсторияСотрудников.Период <= &Период
	               |	И КадроваяИсторияСотрудников.ВидСобытия В (&Прием, &Увольнение)
	               |	И КадроваяИсторияСотрудников.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КадроваяИсторияСотрудников.ВидСобытия,
	               |	КадроваяИсторияСотрудников.Сотрудник,
	               |	КадроваяИсторияСотрудников.ФизическоеЛицо,
	               |	КадроваяИсторияСотрудников.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПоПериод.Сотрудник КАК Сотрудник,
	               |	ВТ_СобытияПоПериод.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(ВТ_СобытияПоПериод.Период) КАК Период
	               |ПОМЕСТИТЬ ВТ_СобытияПо_Период_Макс
	               |ИЗ
	               |	ВТ_СобытияПоПериод КАК ВТ_СобытияПоПериод
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СобытияПоПериод.Сотрудник,
	               |	ВТ_СобытияПоПериод.ФизическоеЛицо
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПоПериод.Сотрудник КАК Сотрудник,
	               |	ВТ_СобытияПоПериод.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВТ_СобытияПоПериод.Период,
	               |	ВТ_СобытияПоПериод.ВидСобытия
	               |ПОМЕСТИТЬ ВТ_СобытияПо_Период_Срез
	               |ИЗ
	               |	ВТ_СобытияПоПериод КАК ВТ_СобытияПоПериод
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СобытияПо_Период_Макс КАК ВТ_СобытияПо_Период_Макс
	               |		ПО ВТ_СобытияПоПериод.Сотрудник = ВТ_СобытияПо_Период_Макс.Сотрудник
	               |			И ВТ_СобытияПоПериод.ФизическоеЛицо = ВТ_СобытияПо_Период_Макс.ФизическоеЛицо
	               |			И ВТ_СобытияПоПериод.Период = ВТ_СобытияПо_Период_Макс.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	               |	КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	КадроваяИсторияСотрудников.ДействуетДо КАК ДействуетДо,
	               |	КадроваяИсторияСотрудников.ВидСобытияПоОкончании
	               |ПОМЕСТИТЬ ВТ_СобытияПо_ДействуетДо
	               |ИЗ
	               |	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
	               |ГДЕ
	               |	КадроваяИсторияСотрудников.Период <= &Период
	               |	И КадроваяИсторияСотрудников.ВидСобытия В (&Прием, &Увольнение)
	               |	И КадроваяИсторияСотрудников.Организация = &Организация
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	КадроваяИсторияСотрудников.ФизическоеЛицо,
	               |	КадроваяИсторияСотрудников.ДействуетДо,
	               |	КадроваяИсторияСотрудников.Сотрудник,
	               |	КадроваяИсторияСотрудников.ВидСобытияПоОкончании
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо,
	               |	ДействуетДо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПо_ДействуетДо.Сотрудник КАК Сотрудник,
	               |	ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	МАКСИМУМ(ВТ_СобытияПо_ДействуетДо.ДействуетДо) КАК ДействуетДо
	               |ПОМЕСТИТЬ ВТ_СобытияПо_ДействуетДо_Макс
	               |ИЗ
	               |	ВТ_СобытияПо_ДействуетДо КАК ВТ_СобытияПо_ДействуетДо
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_СобытияПо_ДействуетДо.Сотрудник,
	               |	ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо,
	               |	ДействуетДо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПо_ДействуетДо.Сотрудник КАК Сотрудник,
	               |	ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВТ_СобытияПо_ДействуетДо.ДействуетДо,
	               |	ВТ_СобытияПо_ДействуетДо.ВидСобытияПоОкончании
	               |ПОМЕСТИТЬ ВТ_СобытияПо_ДействуетДо_Срез
	               |ИЗ
	               |	ВТ_СобытияПо_ДействуетДо КАК ВТ_СобытияПо_ДействуетДо
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СобытияПо_ДействуетДо_Макс КАК ВТ_СобытияПо_ДействуетДо_Макс
	               |		ПО ВТ_СобытияПо_ДействуетДо.Сотрудник = ВТ_СобытияПо_ДействуетДо_Макс.Сотрудник
	               |			И ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо = ВТ_СобытияПо_ДействуетДо_Макс.ФизическоеЛицо
	               |			И ВТ_СобытияПо_ДействуетДо.ДействуетДо = ВТ_СобытияПо_ДействуетДо_Макс.ДействуетДо
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Сотрудник,
	               |	ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_СобытияПоПериод.Сотрудник,
	               |	ВТ_СобытияПоПериод.ФизическоеЛицо,
	               |	ВТ_СобытияПоПериод.Период,
	               |	ВТ_СобытияПоПериод.ВидСобытия,
	               |	ЕСТЬNULL(ВТ_СобытияПо_ДействуетДо.ДействуетДо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДействуетДО,
	               |	ЕСТЬNULL(ВТ_СобытияПо_ДействуетДо.ВидСобытияПоОкончании, НЕОПРЕДЕЛЕНО) КАК ВидСобытияПоОкончании
	               |ПОМЕСТИТЬ ВТ_ОбщаяТаблица
	               |ИЗ
	               |	ВТ_СобытияПо_Период_Срез КАК ВТ_СобытияПоПериод
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СобытияПо_ДействуетДо_Срез КАК ВТ_СобытияПо_ДействуетДо
	               |		ПО ВТ_СобытияПоПериод.Сотрудник = ВТ_СобытияПо_ДействуетДо.Сотрудник
	               |			И ВТ_СобытияПоПериод.ФизическоеЛицо = ВТ_СобытияПо_ДействуетДо.ФизическоеЛицо
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОбщаяТаблица.Сотрудник,
	               |	ВТ_ОбщаяТаблица.ФизическоеЛицо,
	               |	ВЫБОР
	               |		КОГДА ВТ_ОбщаяТаблица.Период >= ВТ_ОбщаяТаблица.ДействуетДО
	               |			ТОГДА ВТ_ОбщаяТаблица.ВидСобытия
	               |		ИНАЧЕ ВТ_ОбщаяТаблица.ВидСобытияПоОкончании
	               |	КОНЕЦ КАК Событие
	               |ПОМЕСТИТЬ ВТ_Финальная
	               |ИЗ
	               |	ВТ_ОбщаяТаблица КАК ВТ_ОбщаяТаблица
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_Финальная.Сотрудник
				   |ПОМЕСТИТЬ "+ ИмяВТСотрудникиОрганизации +"
	               |ИЗ
	               |	ВТ_Финальная КАК Вт_Финальная
	               |ГДЕ
	               |	Вт_Финальная.Событие = &Прием";
   
	Запрос.УстановитьПараметр("Период", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("Прием", Перечисления.ВидыКадровыхСобытий.Прием);
	Запрос.УстановитьПараметр("Увольнение", Перечисления.ВидыКадровыхСобытий.Увольнение);
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
			
	Возврат Запрос;
			
КонецФункции

// Возвращает структуру параметров для ЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников.
//
// Параметры:
//				Сотрудники - СправочникСсылка.Сотрудники, массив сотрудников, если параметр опущен
//							рабочие места будут подбираться по всем сотрудникам соответствующим отбору
//							по организации и подразделению
//				НачалоПериода - Дата, Строка (при встраивание в тест другого запроса)
//				ОкончаниеПериода - Дата, если не указана - будут отбираться все рабочие места,
//							начиная с НачалоПериода
//								- Строка (при встраивание в тест другого запроса).
//
// Возвращаемое значение:
//   Структура - Содержит ключи, возвращаемые методом ПараметрыДляЗапросВТРабочиеМестаСотрудников
//				СписокСотрудников - Массив ссылок справочника сотрудники
//				НачалоПериода - Дата, значение по умолчанию '00010101'. 
//				ОкончаниеПериода - Дата, значение по умолчанию '00010101'. При установке должно выполняться условие
//					ОкончаниеПериода >= НачалоПериода. Используется для выборки кадровых данных сотрудников, если
//					параметр не указан, выборка будет производиться на текущую дату сеанса.
//
Функция ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники = Неопределено, НачалоПериода = '00010101', ОкончаниеПериода = '00010101') Экспорт
		
	ПараметрыПолученияРабочихМестСотрудников = ПараметрыДляЗапросВТРабочиеМестаСотрудников();
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.Сотрудники") Тогда
		СписокСотрудников = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
	Иначе
		СписокСотрудников = Сотрудники;
	КонецЕсли;
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("СписокСотрудников", СписокСотрудников);

	Возврат ПараметрыПолученияРабочихМестСотрудников;
	
КонецФункции

// Возвращает структуру параметров для ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице.
//
// Параметры:
//			ИмяВТСотрудникиПериоды - Строка
//			ИмяПоляСотрудник - Строка, 
//			ИмяПоляНачалоПериода - Строка
//			ИмяПоляОкончаниеПериода - Строка
//
// Возвращаемое значение:
//   Структура - Содержит ключи, возвращаемые методом ПараметрыДляЗапросВТРабочиеМестаСотрудников
//				ИмяВТСотрудникиПериоды
//				ИмяПоляСотрудник
//				ИмяПоляНачалоПериода
//				ИмяПоляОкончаниеПериода
//
Функция ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ИмяВТСотрудникиПериоды = "ВТСотрудникиПериоды", ИмяПоляСотрудник = "Сотрудник", ИмяПоляНачалоПериода = "НачалоПериода", ИмяПоляОкончаниеПериода = "ОкончаниеПериода") Экспорт
		
	ПараметрыПолученияРабочихМестСотрудников = ПараметрыДляЗапросВТРабочиеМестаСотрудников();
	
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяВТСотрудникиПериоды", ИмяВТСотрудникиПериоды);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяПоляСотрудник", ИмяПоляСотрудник);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяПоляНачалоПериода", ИмяПоляНачалоПериода);
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ИмяПоляОкончаниеПериода", ИмяПоляОкончаниеПериода);

	Возврат ПараметрыПолученияРабочихМестСотрудников;
	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры) Экспорт
	

	
КонецФункции

Функция ЗапросВТРабочиеМестаСотрудниковПоВременнойТаблице(ТолькоРазрешенные, ИмяВТРабочиеМестаСотрудников, Параметры) Экспорт
	
	
	
КонецФункции

Процедура СоздатьВТРабочиеМестаСотрудников(МенеджерВременныхТаблиц, ТолькоРазрешенные, ДатаНачала, ДатаОкончания, Организация = Неопределено, Сотрудники = Неопределено, Подразделение = Неопределено, ОтбиратьПоГоловнойОрганизации = Ложь) Экспорт
	
    ПараметрыВТРабочиеМестаСотрудников = ПараметрыДляЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(Сотрудники, ДатаНачала, ДатаОкончания);
	ПараметрыВТРабочиеМестаСотрудников.Организация = Организация;
	ПараметрыВТРабочиеМестаСотрудников.Подразделение = Подразделение;
	ПараметрыВТРабочиеМестаСотрудников.ОтбиратьПоГоловнойОрганизации = ОтбиратьПоГоловнойОрганизации;
	
	Запрос = ЗапросВТРабочиеМестаСотрудниковПоСпискуСотрудников(ТолькоРазрешенные, "ВТРабочиеМестаСотрудников", ПараметрыВТРабочиеМестаСотрудников);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТТекущаяКадроваяРастановка(ТолькоРазрешенные, Организация, Дата, ИмяВТТекущаяКадроваяРастановка = "ВТТекущаяКадроваяРастановка") Экспорт
	

	
КонецФункции

Процедура СоздатьВТТекущаяКадроваяРастановка(МенеджерВременныхТаблиц, Организация = Неопределено, Дата = '00010101') Экспорт
	
		
КонецПроцедуры	

Функция ПараметрыДляСоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице(ИмяВТФизическиеЛицаДоговорники, Организация, НачалоПериода = '00010101', ОкончаниеПериода = '00010101') Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ИмяВТФизическиеЛицаДоговорники", ИмяВТФизическиеЛицаДоговорники);
	Параметры.Вставить("Организация", Организация);
	Параметры.Вставить("НачалоПериода", НачалоПериода);
	Параметры.Вставить("ОкончаниеПериода", ОкончаниеПериода);
	Параметры.Вставить("ИмяВТДоговорыГПХФизическихЛиц", "ВТДоговорыГПХФизическихЛиц");
	
	Возврат Параметры;
	
КонецФункции

Процедура СоздатьВТДоговорыГПХФизическихЛицПоВременнойТаблице(МенеджерВременныхТаблиц, ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = ЗапросВТДоговорыГПХФизическихЛиц(ТолькоРазрешенные, Параметры);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ЗапросВТДоговорыГПХФизическихЛиц(ТолькоРазрешенные, Параметры) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ДоговорыГражданскоПравовогоХарактера.Ссылка КАК Договор,
		|	ДоговорыГражданскоПравовогоХарактера.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ДоговорыГражданскоПравовогоХарактера.ДатаНачала КАК ДатаНачала,
		|	ДоговорыГражданскоПравовогоХарактера.ДатаОкончания КАК ДатаОкончания,
		|	ДоговорыГражданскоПравовогоХарактера.Сумма
		|ПОМЕСТИТЬ ВТДоговорыГПХФизическихЛиц
		|ИЗ
		|	ЖурналДокументов.ДоговорыГражданскоПравовогоХарактера КАК ДоговорыГражданскоПравовогоХарактера
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛицаДоговорники КАК ФизическиеЛицаДоговорники
		|		ПО ДоговорыГражданскоПравовогоХарактера.Ссылка.ФизическоеЛицо = ФизическиеЛицаДоговорники.ФизическоеЛицо
		|ГДЕ
		|	ДоговорыГражданскоПравовогоХарактера.Проведен
		|	И ДоговорыГражданскоПравовогоХарактера.Организация = &Организация
		|	И ДоговорыГражданскоПравовогоХарактера.ДатаОкончания >= &ДатаНачала
		|	И (ДоговорыГражданскоПравовогоХарактера.ДатаНачала <= &ДатаОкончания
		|			ИЛИ &ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1))
		|	И (ТИПЗНАЧЕНИЯ(ДоговорыГражданскоПравовогоХарактера.Ссылка) = ТИП(Документ.ДоговорРаботыУслуги)
		|			ИЛИ ТИПЗНАЧЕНИЯ(ДоговорыГражданскоПравовогоХарактера.Ссылка) = ТИП(Документ.ДоговорАвторскогоЗаказа))";
		
	Если НЕ ТолькоРазрешенные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли; 
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаНачала", "ДАТАВРЕМЯ(" + Формат(Параметры.НачалоПериода, "ДФ='гггг, М, д'; ДП=") + ")");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДатаОкончания", "ДАТАВРЕМЯ(" + Формат(Параметры.ОкончаниеПериода, "ДФ='гггг, М, д'; ДП=") + ")");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТФизическиеЛицаДоговорники", Параметры.ИмяВТФизическиеЛицаДоговорники);
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТДоговорыГПХФизическихЛиц", Параметры.ИмяВТДоговорыГПХФизическихЛиц);
	
	Запрос.УстановитьПараметр("Организация", Параметры.Организация);
	
	Возврат Запрос;
	
КонецФункции

Процедура ДополнитьДвиженияЗанятыхПозицийПоСтрокеКадровыхДвижений(Движения, СтрокаКадровыхДвижений, ДействуетДоЕсть) Экспорт

	Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.Позиция) Тогда
		
		Движения.ЗанятыеПозицииШтатногоРасписания.Записывать = Истина;
		
		// основная запись
		НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
		
		НоваяСтрока.Период = СтрокаКадровыхДвижений.ДатаСобытия;
		
		Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием ИЛИ
			СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		ИначеЕсли СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		КонецЕсли;
		
		НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
		
		Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Увольнение Тогда
			НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.ТекущаяПозиция;
			НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
		Иначе
			НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.Позиция;
			НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.КоличествоСтавок;
		КонецЕсли;
		
		// если есть дата обратного события - вводим "условное" движение
		Если ДействуетДоЕсть Тогда
			
			Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.ДействуетДо) Тогда
				
				НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
				
				НоваяСтрока.Период = СтрокаКадровыхДвижений.ДействуетДо;
				
				Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Прием ИЛИ
					СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
				Иначе
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
				КонецЕсли;
				
				НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
				НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.Позиция;
				НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.КоличествоСтавок;
				НоваяСтрока.УсловноеДвижение = Истина;
				НоваяСтрока.УсловноеКоличествоСтавок = СтрокаКадровыхДвижений.КоличествоСтавок;
				НоваяСтрока.ДатаОтменыУсловногоДвижения = СтрокаКадровыхДвижений.ДатаСобытия;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Если это - перемещение - "спишем" ставку с текущей позиции.
		Если СтрокаКадровыхДвижений.ВидСобытия = Перечисления.ВидыКадровыхСобытий.Перемещение Тогда
			
			НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
			
			НоваяСтрока.Период = СтрокаКадровыхДвижений.ДатаСобытия;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
			НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.ТекущаяПозиция;
			НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
			
			// Если есть дата обратного события - вводим "условное" 
			// движение с возвратом ставки на прежнюю позицию.
			Если ДействуетДоЕсть Тогда
				
				Если ЗначениеЗаполнено(СтрокаКадровыхДвижений.ДействуетДо) Тогда
					
					НоваяСтрока = Движения.ЗанятыеПозицииШтатногоРасписания.Добавить();
					
					НоваяСтрока.Период = СтрокаКадровыхДвижений.ДействуетДо;
					НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
					НоваяСтрока.Сотрудник = СтрокаКадровыхДвижений.Сотрудник;
					НоваяСтрока.ПозицияШтатногоРасписания = СтрокаКадровыхДвижений.ТекущаяПозиция;
					НоваяСтрока.КоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
					НоваяСтрока.УсловноеДвижение = Истина;
					НоваяСтрока.УсловноеКоличествоСтавок = СтрокаКадровыхДвижений.ТекущееКоличествоСтавок;
					НоваяСтрока.ДатаОтменыУсловногоДвижения = СтрокаКадровыхДвижений.ДатаСобытия;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Процедуры и функции получения данных для отчетов

Функция ОписанияСоставаНачисленийПоВременнойТаблице(МенеджерВременныхТаблиц, ИмяВТСотрудникиПериоды, ИмяПоляПериод, ИмяПоляСотрудник) Экспорт
	
	
	
КонецФункции

Функция СформироватьЗапросДляТ6(МассивОбъектов) Экспорт
	
		
	
КонецФункции

Функция СформироватьЗапросДляТ61(МассивОбъектов) Экспорт
	
	
	
КонецФункции

Процедура СоздатьВТДанныеДокументовКадровыхПеремещений(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КадровыйПеревод.Ссылка,
		|	КадровыйПеревод.ДатаНачала КАК Дата,
		|	КадровыйПеревод.Сотрудник КАК Сотрудник,
		|	КадровыйПеревод.ДатаНачала КАК ДатаНачала,
		|	КадровыйПеревод.ДатаОкончания КАК ДатаОкончания,
		|	КадровыйПеревод.Номер КАК НомерДок,
		|	КадровыйПеревод.Дата КАК ДатаДок,
		|	КадровыйПеревод.Руководитель,
		|	КадровыйПеревод.ДолжностьРуководителя,
		|	КадровыйПеревод.ФизическоеЛицо,
		|	КадровыйПеревод.ОснованиеПеревода,
		|	КадровыйПеревод.ПричинаПеревода,
		|	0 КАК Надбавка
		|ПОМЕСТИТЬ ВТДанныеДокументовКадровыхПеремещений
		|ИЗ
		|	Документ.КадровыйПеревод КАК КадровыйПеревод
		|ГДЕ
		|	КадровыйПеревод.Ссылка В(&МассивОбъектов)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Дата,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДатаПеремещения,
		|	ДАТАВРЕМЯ(1, 1, 1),
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Номер,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Дата,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.Руководитель,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ДолжностьРуководителя,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Сотрудник.ФизическоеЛицо,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ОснованиеПеревода,
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка.ПричинаПеревода,
		|	0
		|ИЗ
		|	Документ.ПеремещениеВДругоеПодразделение.Сотрудники КАК ПеремещениеВДругоеПодразделениеСотрудники
		|ГДЕ
		|	ПеремещениеВДругоеПодразделениеСотрудники.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовПриемНаРаботу(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПриемНаРаботу.Ссылка,
		|	ПриемНаРаботу.ДатаПриема КАК Дата,
		|	ПриемНаРаботу.Сотрудник,
		|	ПриемНаРаботу.ДатаПриема КАК Период,
		|	ПриемНаРаботу.Номер КАК НомерДок,
		|	ПриемНаРаботу.Дата КАК ДатаДок,
		|	ПриемНаРаботу.Руководитель,
		|	ПриемНаРаботу.ДолжностьРуководителя,
		|	ПриемНаРаботу.УсловияПриема,
		|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора КАК ДатаЗавершенияТрудовогоДоговора,
		|	0 КАК Надбавка,
		|	ПриемНаРаботу.ДлительностьИспытательногоСрока КАК ДлительностьИспытательногоСрока
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
		|ГДЕ
		|	ПриемНаРаботу.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура СоздатьВТДанныеДокументовУвольнение(МенеджерВременныхТаблиц, МассивОбъектов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Параметры.Вставить("МассивОбъектов", МассивОбъектов);
	
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Увольнение.Ссылка,
		|	Увольнение.ДатаУвольнения КАК Дата,
		|	Увольнение.Сотрудник,
		|	Увольнение.ДатаУвольнения КАК Период,
		|	Увольнение.Номер КАК НомерДок,
		|	Увольнение.Дата КАК ДатаДок,
		|	Увольнение.СтатьяТКРФ,
		|	Увольнение.СтатьяТКРФ.ТекстОснования КАК ТекстОснования,
		|	Увольнение.Руководитель,
		|	Увольнение.ДолжностьРуководителя,
		|	Увольнение.ОснованиеУвольнения,
		|	Увольнение.РабочийГодС,
		|	Увольнение.РабочийГодПо
		|ПОМЕСТИТЬ ВТДанныеДокументов
		|ИЗ
		|	Документ.Увольнение КАК Увольнение
		|ГДЕ
		|	Увольнение.Ссылка В(&МассивОбъектов)";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция КадровыеДанныеДляПечатиКадровыхПриказов() Экспорт
	
	Возврат КадровыйУчетБазовый.КадровыеДанныеДляПечатиКадровыхПриказов() + ",ТрудовойДоговорНомер,ТрудовойДоговорДата";
	
КонецФункции

Процедура ОбновитьТекущиеКадровыеДанныеСотрудников(Запрос) Экспорт
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ТекущееПодразделение,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжность,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковПрием.Период, ВЫБОР
	|			КОГДА ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|				ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|			ИНАЧЕ ТекущиеКадровыеДанныеСотрудников.ДатаПриема
	|		КОНЕЦ) КАК ДатаПриема,
	|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(КадроваяИсторияСотрудниковУвольнение.Период, ДЕНЬ, -1), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольнения,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ТекущийВидЗанятости,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизацияПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ТекущееПодразделениеПредыдущее,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжностьПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаПриема, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПриемаПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаУвольненияПредыдущая,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущийВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ВидЗанятостиПредыдущий
	|ПОМЕСТИТЬ ВТНовыеКадровыеДанные
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО Сотрудники.Ссылка = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковПрием
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковПрием.Сотрудник
	|			И (КадроваяИсторияСотрудниковПрием.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковУвольнение
	|		ПО Сотрудники.Ссылка = КадроваяИсторияСотрудниковУвольнение.Сотрудник
	|			И (КадроваяИсторияСотрудниковУвольнение.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение))
	|ГДЕ
	|	Сотрудники.Ссылка В(&МассивСотрудниковДляОбновления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеКадровыеДанные.Сотрудник,
	|	НовыеКадровыеДанные.ТекущаяОрганизация,
	|	НовыеКадровыеДанные.ТекущееПодразделение,
	|	НовыеКадровыеДанные.ТекущаяДолжность,
	|	НовыеКадровыеДанные.ДатаПриема,
	|	НовыеКадровыеДанные.ДатаУвольнения,
	|	НовыеКадровыеДанные.ТекущийВидЗанятости,
	|	НовыеКадровыеДанные.ФизическоеЛицо,
	|	НовыеКадровыеДанные.ТекущийВидЗанятости КАК ТекущийВидЗанятости
	|ИЗ
	|	ВТНовыеКадровыеДанные КАК НовыеКадровыеДанные
	|ГДЕ
	|	(НовыеКадровыеДанные.ТекущаяОрганизация <> НовыеКадровыеДанные.ТекущаяОрганизацияПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ТекущееПодразделение <> НовыеКадровыеДанные.ТекущееПодразделениеПредыдущее
	|			ИЛИ НовыеКадровыеДанные.ТекущаяДолжность <> НовыеКадровыеДанные.ТекущаяДолжностьПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ДатаПриема <> НовыеКадровыеДанные.ДатаПриемаПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ДатаУвольнения <> НовыеКадровыеДанные.ДатаУвольненияПредыдущая
	|			ИЛИ НовыеКадровыеДанные.ТекущийВидЗанятости <> НовыеКадровыеДанные.ВидЗанятостиПредыдущий)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СотрудникиНеПринятые = Новый Массив;
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.ТекущаяДолжность) Тогда
				СотрудникиНеПринятые.Добавить(Выборка.Сотрудник);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.ТекущиеКадровыеДанныеСотрудников.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Сотрудник.Установить(Выборка.Сотрудник, Истина); 
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
		Если СотрудникиНеПринятые.Количество() > 0 Тогда
			ОбновитьТекущиеКадровыеДанныеПоДоговорамГПХ(СотрудникиНеПринятые);
		КонецЕсли;
	
	КонецЕсли;
		
КонецПроцедуры

// Проверка списка начислений кадровых документов
// Вызывается при обработке проверки заполнения
// Параметры:
//		Объект - проверяемый объект
//		Начисления - список начислений - коллекция объектов у которых среди 
//			прочих есть поля
//				Начисление
//				НомерСтроки
//		ИмяТаблицыНачислений - имя табличной части с начислениями
//		Отказ
//
Процедура ПроверкаСпискаНачисленийКадровогоДокумента(Объект, Начисления, ИмяТаблицыНачислений, Отказ) Экспорт
	
	Если НЕ Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхДляНачисленияЗарплатыРасширенная,ЧтениеДанныхДляНачисленияЗарплатыРасширенная") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Начисления.Начисление КАК Начисление,
	|	Начисления.НомерСтроки
	|ПОМЕСТИТЬ ВТНачисленияДокумента
	|ИЗ
	|	&Начисления КАК Начисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Начисления.Наименование,
	|	НачисленияДокумента.НомерСтроки,
	|	Начисления.Ссылка,
	|	ОбозначенияВТабелеУчетаРабочегоВремени.Ссылка КАК ОбозначениеВТабелеУчетаРабочегоВремени
	|ПОМЕСТИТЬ ВТНачисленияСЗачетомВремени
	|ИЗ
	|	ВТНачисленияДокумента КАК НачисленияДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.Начисления КАК Начисления
	|		ПО (Начисления.Ссылка = НачисленияДокумента.Начисление)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыИспользованияРабочегоВремени КАК ОбозначенияВТабелеУчетаРабочегоВремени
	|		ПО (ОбозначенияВТабелеУчетаРабочегоВремени.Ссылка = Начисления.ОбозначениеВТабелеУчетаРабочегоВремени)
	|ГДЕ
	|	Начисления.ЗачетНормыВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТНачисленияСЗачетомВремени.Наименование,
	|	ВТНачисленияСЗачетомВремени.НомерСтроки
	|ИЗ
	|	ВТНачисленияСЗачетомВремени КАК ВТНачисленияСЗачетомВремени
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСЗачетомВремени КАК ВТНачисленияСЗачетомВремениПров
	|		ПО ВТНачисленияСЗачетомВремени.Ссылка <> ВТНачисленияСЗачетомВремениПров.Ссылка
	|			И ВТНачисленияСЗачетомВремени.ОбозначениеВТабелеУчетаРабочегоВремени = ВТНачисленияСЗачетомВремениПров.ОбозначениеВТабелеУчетаРабочегоВремени
	|ГДЕ
	|	НЕ ВТНачисленияСЗачетомВремениПров.НомерСтроки ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНачисленияСЗачетомВремени.НомерСтроки,
	|	ВТНачисленияСЗачетомВремени.Наименование";
	Запрос.УстановитьПараметр("Начисления", Начисления);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Введено несколько взаимоисключающих начислений (%1)'"), Выборка.Наименование);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения, Объект, ИмяТаблицыНачислений + "[" + Формат(Выборка.НомерСтроки - 1, "ЧГ=0") + "].Начисление",,Отказ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции формирования отчетов

Функция ДополнительныеСведенияУнифицированнойФормыТ2(СтрокиДанных, ДатаОтчета) Экспорт
	
	
	
КонецФункции

Функция ОтчетВидаКарточкаСотрудника(КлючВарианта) Экспорт
	
	Если КлючВарианта = "Т4" Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Процедура ВывестиМакетыОтчетовПоСотрудникам(КлючВарианта, ДокументРезультат, Данные, Группировки, ЗначениеПараметра, СоответствиеПользовательскихПолей) Экспорт
	
	Если КлючВарианта = "Т4" Тогда
		
		ВывестиМакетыСГруппировкамиТ4(ДокументРезультат, Данные, Группировки, ЗначениеПараметра, СоответствиеПользовательскихПолей);
		
	КонецЕсли; 
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики)Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.0";
	Обработчик.Процедура = "Справочники.ВидыСтажа.СоздатьВидыСтажаПоНастройкам";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.9";
	Обработчик.Процедура = "Справочники.ОснованияУвольнения.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	// При создании базы данных вызывается в КадровыйУчетРасширенный.ЗаполнитьКлассификаторы.
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.5.9";
	Обработчик.Процедура = "Справочники.РазрядыКатегорииДолжностей.НачальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.3";
	Обработчик.Процедура = "Справочники.ВидыСтажа.ЗаполнитьКатегориюСтажа";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.6.12";
	Обработчик.Процедура = "Справочники.ЯзыкиНародовМира.ЗаполнитьСправочникПоКлассификатору";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.7.53";
	Обработчик.Процедура = "КадровыйУчетРасширенный.ОбновитьВидыКонтактнойИнформацииФизическогоЛица";

	
КонецПроцедуры

Процедура ОбновитьВидыКонтактнойИнформацииФизическогоЛица() Экспорт
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонМобильныйФизическогоЛица");
	ПараметрыВида.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон;
	ПараметрыВида.Подсказка = "";
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге = Ложь;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.Порядок = 1;
	
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
	КадровыйУчетБазовый.ОбновитьВидыКонтктнойИнформацииПоПордку(2);
	КадровыйУчетБазовый.ОбновитьПоРядкиКонтактнойИнформации();
	
КонецПроцедуры

Функция ПутьКДаннымПоИмениДанныхПриказаОПриеме(ИмяПоля) Экспорт
	
	Если ВРег(ИмяПоля) = ВРег("ПриказОПриемеДатаЗавершенияТрудовогоДоговора") Тогда
		ПутьКДанным = "ЕСТЬNULL(ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ДатаЗавершенияТрудовогоДоговора, ДАТАВРЕМЯ(1,1,1))";
	Иначе
		ПутьКДанным = КадровыйУчетБазовый.ПутьКДаннымПоИмениДанныхПриказаОПриеме(ИмяПоля);
	КонецЕсли;
	
	Если ПутьКДанным = Неопределено Тогда
		
		Если ВРег(ИмяПоля) = ВРег("ТрудовойДоговорНомер") Тогда
			
			ПутьКДанным = "ЕСТЬNULL(ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ТрудовойДоговорНомер, """")";
			
		ИначеЕсли ВРег(ИмяПоля) = ВРег("ТрудовойДоговорДата") Тогда
			
			ПутьКДанным = "ЕСТЬNULL(ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ТрудовойДоговорДата, ДАТАВРЕМЯ(1,1,1))";
			
		ИначеЕсли ВРег(ИмяПоля) = ВРег("КраткосрочныйТрудовойДоговор") Тогда
			
			ПутьКДанным = 
				"ЕСТЬNULL(ВЫБОР
				|		КОГДА НЕ ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).Проведен
				|			ТОГДА ЛОЖЬ
				|		КОГДА ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ДатаЗавершенияТрудовогоДоговора = ДАТАВРЕМЯ(1, 1, 1)
				|			ТОГДА ЛОЖЬ
				|		КОГДА РАЗНОСТЬДАТ(ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ДатаПриема, ВЫРАЗИТЬ(ПриказыОПриеме.Регистратор КАК Документ.ПриемНаРаботу).ДатаЗавершенияТрудовогоДоговора, МЕСЯЦ) < 2
				|			ТОГДА ИСТИНА
				|		ИНАЧЕ ЛОЖЬ
				|		КОНЕЦ, ЛОЖЬ)";
			
		КонецЕсли; 
	
	КонецЕсли;
	
	Возврат ПутьКДанным;
	
КонецФункции

Функция НеобходимыСведенияПриказаОПриеме(ИмяПоля) Экспорт
	
	Возврат КадровыйУчетБазовый.НеобходимыСведенияПриказаОПриеме(ИмяПоля)
		ИЛИ ВРег(ИмяПоля) = ВРег("ТрудовойДоговорДата")
		ИЛИ ВРег(ИмяПоля) = ВРег("ТрудовойДоговорНомер")
		ИЛИ ВРег(ИмяПоля) = ВРег("КраткосрочныйТрудовойДоговор");
		
КонецФункции

// Позволяет определить свойства должности
// Например:
//	СоответствиеЗапрашиваемыхДанных.Вставить(ВРег("ЯвляетсяПрокурором"),
//		"ЕСТЬNULL(ДанныеДолжности.ЯвляетсяПрокурором, ЛОЖЬ)");
//
Функция ПутиКДаннымПоИменамЗапрашиваемыхДанныхДолжности() Экспорт
	
	СоответствиеЗапрашиваемыхДанных = КадровыйУчетБазовый.ПутиКДаннымПоИменамЗапрашиваемыхДанныхДолжности();
	
	Возврат СоответствиеЗапрашиваемыхДанных;
	
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(ИмяПоля) Экспорт
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Если ИмяПоля = "ТЕКУЩИЙФОТ" Тогда
		Возврат "ЕСТЬNULL(ТекущаяТарифнаяСтавкаСотрудников.ТекущийФОТ, 0)";
	КонецЕсли; 
	
	Возврат КадровыйУчетБазовый.ПутьКДаннымПоИмениЗапрашиваемойТекущейТарифнойСтавкиСотрудника(ИмяПоля);
	
КонецФункции


Процедура УстановитьПараметрыВыбораНачисленийПоКатегории(Форма, СоздатьОписаниеТаблицыНачислений, МассивКатегорийНачислений) Экспорт
	
	ЭлементФормыНачисление = Форма.Элементы.Найти(
		СоздатьОписаниеТаблицыНачислений.ИмяТаблицы
		+ СоздатьОписаниеТаблицыНачислений.ИмяРеквизитаВидРасчета);
		
	Если ЭлементФормыНачисление <> Неопределено Тогда
		
		ЕстьСвояНастройкаПараметра = Ложь;
		
		ПараметрыВыбораНачислений = Новый Массив;
		Для каждого ПараметрВыбора Из ЭлементФормыНачисление.ПараметрыВыбора Цикл
			Если ПараметрВыбора.Имя = "Отбор.КатегорияНачисленияИлиНеоплаченногоВремени" Тогда
				ЕстьСвояНастройкаПараметра = Истина;
				Прервать;
			КонецЕсли; 
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбора);
		КонецЦикла;
		
		Если НЕ ЕстьСвояНастройкаПараметра Тогда
			
			ПараметрВыбораНачислений = Новый ПараметрВыбора("Отбор.КатегорияНачисленияИлиНеоплаченногоВремени", Новый ФиксированныйМассив(МассивКатегорийНачислений));
			
			ПараметрыВыбораНачислений.Добавить(ПараметрВыбораНачислений);
			
			ЭлементФормыНачисление.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораНачислений);
			
		КонецЕсли; 
			
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку соответствия штатному расписанию переданных кадровых движений.
// Параметры: 
//	ДанныеОЗанятыхПозициях это коллекция элементов с полями
//		Период, 
//		ПозицияШтатногоРасписания, 
//		Сотрудник,
//		КоличествоСтавок.
//	ПроверяемыйРегистратор - ссылка на проверяемый регистратор (движения 
//		которого необходимо исключить из рассмотрения),
//	СохранитьНаСервере - Булево - Если Истина, то результаты проверки необходимо 
//		сохранить во временном хранилище,
//	РезультатПроверки - в этот параметр возвращается результат проверки - 
//		адрес временного хранилища со структурой или сама структура.
//		Структура может содержать два поля
//			ПроблемыТекущегоДокумента,
//			ПроблемыДругихДокументов.
//		Каждое из полей - таблица значений с колонками 
//			- Документ - ссылка на документ, который не будет соответствовать штатному расписанию,
//			- ДокументПредставление - ...его представление,
//			- ДатаДокумента - ...его дата,
//			- Период - дата движения, которое не будет соответствовать штатному расписанию,
//			- Сотрудник,
//			- КоличествоСтавок,
//			- ПозицияШтатногоРасписания,
//			- ПозицияШтатногоРасписанияПредставление.
//	ИсправленныйДокумент - ссылка на документ, который будет исправлен документом ПроверяемыйРегистратор
//		Не обязательный.
//			
//	Возвращаемое значение:
//	Истина, если данные соответствуют штатному расписанию и Ложь в противном случае.
Функция ПроверкаСоответствияШтатномуРасписанию(Знач ДанныеОЗанятыхПозициях, ПроверяемыйРегистратор, СохранитьНаСервере, РезультатПроверки, ИсправленныйДокумент = НеОпределено) Экспорт
	
	
	
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудников(МассивСтруктурСотрудников) Экспорт
	

КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудниковПриВозвратеНаРаботу(МассивСтруктурСотрудников) Экспорт
		
КонецФункции

Функция АдресДанныхОЗанятыхПозицияхСотрудниковПриПеремещенииВДругоеПодразделение(СоответствиеСотрудников) Экспорт
	
КонецФункции

Процедура ЗаполнитьНачисленияПоПозиции(Форма, ИмяРеквизитаДатаСобытия, ОписаниеТаблицыНачислений, ЗаполнениеИзПеремещения = Ложь) Экспорт
		
КонецПроцедуры
 
Процедура ПодразделенияОрганизацийОбработкаПроверкиЗаполненияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если НЕ Источник.Сформировано Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаСоздания");
	КонецЕсли; 
	
	Если НЕ Источник.Расформировано Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ПроверяемыеРеквизиты, "ДатаРасформирования");
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Источник.ДатаРасформирования) И ЗначениеЗаполнено(Источник.ДатаСоздания) И Источник.ДатаСоздания > Источник.ДатаРасформирования Тогда
		ТекстСообщения = НСтр("ru = 'Дата создания подразделения не может быть больше даты расформирования""!'",);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ);	
	КонецЕсли;	
	
	Если (Не Источник.Расформировано) И Источник.ПометкаУдаления Тогда
		ТекстСообщения = НСтр("ru = 'У помеченного на удаление подразделения нельзя снять флаг ""Расформировано""!'",);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Источник.Ссылка, , , Отказ);	
	КонецЕсли;	
	
	Если Источник.Расформировано Тогда
		ПроверкаИспользованияВШтатномРасписании(Отказ, Источник.Ссылка, Источник.ДатаРасформирования);
	КонецЕсли;	

КонецПроцедуры

Процедура ПодразделенияОрганизацийПередЗаписьюПередЗаписью(Источник, Отказ) Экспорт
	
 
	
КонецПроцедуры

Процедура ПроверитьЗаписиДанныхФизическихЛицПередЗаписью(Источник, Отказ, Замещение) Экспорт
		
КонецПроцедуры

// Находит значения возвратных ресурсов регистра сведений и обновляет их
// в соответствии с значениями записываемого набора записей.
// Может вызываться из процедур ПередЗаписью и ПриЗаписи модуля набора записей регистра сведений
// Работает только для регистров сведений подчиненных регистратору.
//
// Получает срез первых для каждого набора измерений(включая период) НабораЗаписей.
// Если такие записи есть, то к ним присоединяются данные среза последних
// на дату из записи из среза первых - 1 секунда. Если значения ресурсов среза последних
// отличаются от значений возвратных ресурсов среза первых, то  
// значения в записях среза первых заполняются значениями из среза последних.
//
// Параметры:
//		НовыйНабор - НаборЗаписей - набор записей, влияние записей которого на будущие записи проверяется.
//
//		ПередЗаписью - Булево - Показывает из какой процедуры вызвана текущая процедура ПередЗаписью или ПриЗаписи. 
//
//		СтрокаЗаполняемыхВозвратныхРесурсов - Строка - Строка содержащая наименования 
//       заполняемых возвратных ресурсов через запятую.
//			Наименования указываются без постфикса "ПоОкончании".
//	
Процедура ОбновитьВторичныеДанныеВозвратногоРегистра(НаборЗаписей, ПередЗаписью,  СтрокаЗаполняемыхВозвратныхРесурсов = "") Экспорт
	
	ИмяРегистра = НаборЗаписей.Метаданные().Имя;
	РегистрСведенийМетаданные = Метаданные.РегистрыСведений[ИмяРегистра];
	Регистратор = НаборЗаписей.Отбор.Регистратор.Значение;
	// Создадим массив содержащий измерения нашего регистра + период.
	// Создадим строку описывающую измерения нашего регистра + период.
	
	Измерения = Новый Массив;
	СтрокаИзмерений = "Период";
	Измерения.Добавить(СтрокаИзмерений);
	Для Каждого Измерение Из РегистрСведенийМетаданные.Измерения Цикл
		Измерения.Добавить(Измерение.Имя);
		СтрокаИзмерений = СтрокаИзмерений + "," + Измерение.Имя;
	КонецЦикла;
	
	НаборЗаписейИзменен = Истина;
	
	Если НЕ ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Свойство("НаборЗаписейИзменен", НаборЗаписейИзменен);
	иначе
		НаборЗаписейИзменен = НаборЗаписейИзменен(НаборЗаписей, ИмяРегистра, Регистратор);
		НаборЗаписей.ДополнительныеСвойства.Вставить("НаборЗаписейИзменен", НаборЗаписейИзменен);
	КонецЕсли;
	
	Если НЕ НаборЗаписейИзменен Тогда
		Возврат;
	КонецЕсли;
	
	// При записи в дополнительных свойствах набора содержится менеджер временных таблиц,
	// а в нем таблица содержащая наборы измерений которые не имеют записей в будущем.
	// Если Менеджера в свойствах нет, создадим новый.
	МенеджерВременныхТаблиц	= Неопределено;
	
	Если НЕ ПередЗаписью Тогда
		НаборЗаписей.ДополнительныеСвойства.Свойство("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц = Неопределено Тогда
		МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Если ПередЗаписью Тогда
		ЭтоВторичныйНабор = Ложь;
		Если НаборЗаписей.ДополнительныеСвойства.Свойство("ЭтоВторичныйНабор", ЭтоВторичныйНабор) Тогда
			Если ЭтоВторичныйНабор Тогда
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
				ТекстЗапроса = "ВЫБРАТЬ ";
				Для Каждого Измерение Из Измерения Цикл
					ТекстЗапроса = ТекстЗапроса + "
					|	NULL КАК " + Измерение + ",";
				КонецЦикла;
				ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
				ТекстЗапроса = ТекстЗапроса + "
				| ПОМЕСТИТЬ ВТИзмеренияДатыПередЗаписью";
				Запрос.Текст = ТекстЗапроса;
				Запрос.Выполнить();
				НаборЗаписей.ДополнительныеСвойства.Вставить("МенеджерВременныхТаблицПередЗаписью", МенеджерВременныхТаблиц); 
				Возврат;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	
	
	// Создадим массив содержащий отборы из записываемого набора
	Отбор = Новый Массив;
	Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", ЭлементОтбора.Имя, " = ", ЭлементОтбора.Значение));
	КонецЦикла;
	
	// Создадим в менеджере таблицу ВТИзмеренияДатыДляФормированияСрезаПервых и заполним её данными из базы
	// с отбором таким же как в записываемом наборе записей.
	// Таблица будет содержать все наборы измерений по которым необходимо проверить записи в будущем.
	ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора(ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц);
	
	// Получим в наш МенеджерВременныхТаблиц таблицу ВТ[ИмяРегистра]СрезПервых
	Отбор.Очистить();
	ЗаполнитьВременныеТаблицыДляПроверкиИОбновленияВозвратногоРегистра(ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц);
	
	// Перед записью нам не нужны данные по текущему регистратору
	Если ПередЗаписью Тогда 
		Отбор.Очистить();
		Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение", "Регистратор", " <> ", Регистратор));
	иначе
		Отбор = Неопределено;
	КонецЕсли;	
	
	ПроверитьИОбновитьСледующиеЗаписиВозвратногоРегистра(НаборЗаписей, ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, МенеджерВременныхТаблиц, Отбор, СтрокаЗаполняемыхВозвратныхРесурсов);
	
КонецПроцедуры	


////////////////////////////////////////////////////////////////////////////////
// Формирование карточки научного работника (Т-4)

Процедура ВывестиМакетыСГруппировкамиТ4(ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, Уровень = 0)
	
	Если Группировки.Количество() > Уровень Тогда 
		
		Для Каждого СтрокаДанных из Данные.Строки Цикл
		
			ПолеДанных = Группировки[Уровень].Значение;
			ВывестиГруппировкуТ4(ДокументРезультат, СтрокаДанных, ПолеДанных, Уровень, Группировки);
			ВывестиМакетыСГруппировкамиТ4(ДокументРезультат, СтрокаДанных, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, Уровень + 1);
		
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаДанных из Данные.Строки Цикл
			
			ВывестиМакетТ4(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, СоответствиеПользовательскихПолей)
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГруппировкуТ4(ДокументРезультат, СтрокаДанных, Поле, Уровень, Группировки)
	

	
КонецПроцедуры 

Процедура ВывестиМакетТ4(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, СоответствиеПользовательскихПолей) 
	

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные методы для получения кадровых данных

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхСотрудника(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("ОРГАНИЗАЦИЯ", 	"ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ПОДРАЗДЕЛЕНИЕ", 	"ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ДОЛЖНОСТЬ", 		"ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка))");
	
	Если СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля) = Неопределено Тогда
		Возврат "КадроваяИсторияСотрудниковСрезПоследних." + ИмяПоля;
	КонецЕсли;
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимаИсторияГрафиков(ИмяПоля)
	
	Если ВРег(ИмяПоля) = ВРег("ГрафикРаботы") 
		ИЛИ ВРег(ИмяПоля) = ВРег("ТекущийГрафикРаботы") Тогда
		
		Возврат Истина;
		
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

Функция НеобходимыСвойстваГрафика(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат (ИмяПоля = ВРег("СуммированныйУчетРабочегоВремени"));
	
КонецФункции

Функция НеобходимыСведенияОПлановыхАвансах(Знач ИмяПоля)
	
	ИмяПоля = Врег(ИмяПоля);
	
	Возврат ИмяПоля = ВРег("СпособРасчетаАванса")
		ИЛИ ИмяПоля = ВРег("Аванс");
		
КонецФункции

Функция НеобходимаТекущаяДолжностьПоШтатномуРасписанию(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	Возврат (ИмяПоля = ВРег("ТекущаяДолжностьПоШтатномуРасписанию"));
	
КонецФункции

Функция ПутьКДаннымПоИмениТекущаяДолжностьПоШтатномуРасписанию(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("ТЕКУЩАЯДОЛЖНОСТЬПОШТАТНОМУРАСПИСАНИЮ", "ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжностьПоШтатномуРасписанию, ЗНАЧЕНИЕ(Справочник.ШтатноеРасписание.ПустаяСсылка))");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимыСведенияОВысшемОбразовании(ЭлМассива)
	
	Возврат 
		ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеУчебноеЗаведение")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеСпециальность")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеДиплом")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеГодОкончания")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеКвалификация");
		
КонецФункции

Функция НеобходимыСведенияОВторомВысшемОбразовании(ЭлМассива)
	
	Возврат 
		ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеВтороеУчебноеЗаведение")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеВтороеСпециальность")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеВтороеДиплом")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеВтороеГодОкончания")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВысшееОбразованиеВтороеКвалификация");
		
КонецФункции

Функция НеобходимыСведенияОПослевузовскомОбразовании(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("ПослевузовскоеОбразованиеУчебноеЗаведение")
		ИЛИ ВРег(ЭлМассива) = ВРег("ПослевузовскоеОбразованиеВидОбразования")
		ИЛИ ВРег(ЭлМассива) = ВРег("ПослевузовскоеОбразованиеВидПослевузовскогоОбразования")
		ИЛИ ВРег(ЭлМассива) = ВРег("ПослевузовскоеОбразованиеСпециальность")
		ИЛИ ВРег(ЭлМассива) = ВРег("ПослевузовскоеОбразованиеДиплом")
		ИЛИ ВРег(ЭлМассива) = ВРег("ПослевузовскоеОбразованиеГодОкончания")
		ИЛИ ВРег(ЭлМассива) = ВРег("ПослевузовскоеОбразованиеКвалификация");
		
КонецФункции

Функция НеобходимыСведенияОбУченойСтепени(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("УченаяСтепень")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченаяСтепеньОтрасльНауки")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченаяСтепеньДатаПрисуждения")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченаяСтепеньДиссертационныйСовет")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченаяСтепеньДипломСерияНомер")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченаяСтепеньОрганизация");
	
КонецФункции

Функция НеобходимыСведенияОбУченомЗвании(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("УченоеЗвание")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченоеЗваниеАттестатСерия")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченоеЗваниеАттестатНомер")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченоеЗваниеДатаПрисвоения")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченоеЗваниеОрганизация")
		ИЛИ ВРег(ЭлМассива) = ВРег("УченоеЗваниеСпециальность");
	
КонецФункции

Функция НеобходимыСведенияОбОбщемСтаже(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("ОбщийСтажДней")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ОбщийСтажМесяцев")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ОбщийСтажЛет");
	
КонецФункции

Функция НеобходимыСведенияОНепрерывномСтаже(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("НепрерывныйСтажДней")
		ИЛИ	ВРег(ЭлМассива) = ВРег("НепрерывныйСтажМесяцев")
		ИЛИ	ВРег(ЭлМассива) = ВРег("НепрерывныйСтажЛет");
	
КонецФункции

Функция НеобходимыСведенияОСтажеНаНадбавкуЗаВыслугуЛет(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("СтажНаНадбавкуЗаВыслугуЛетДней")
		ИЛИ	ВРег(ЭлМассива) = ВРег("СтажНаНадбавкуЗаВыслугуЛетМесяцев")
		ИЛИ	ВРег(ЭлМассива) = ВРег("СтажНаНадбавкуЗаВыслугуЛетЛет");
	
КонецФункции
	
Функция НеобходимыСведенияОбОбщемНаучноПедагогическомСтаже(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("ОбщийНаучноПедагогическийСтажДней")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ОбщийНаучноПедагогическийСтажМесяцев")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ОбщийНаучноПедагогическийСтажЛет");
	
КонецФункции

Функция НеобходимыСведенияОПедагогическомСтаже(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("ПедагогическийСтажДней")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ПедагогическийСтажМесяцев")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ПедагогическийСтажЛет");
	
КонецФункции

Функция НеобходимыСведенияОДругомСтаже(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("ДругойСтажВид")
		ИЛИ ВРег(ЭлМассива) = ВРег("ДругойСтажДней")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ДругойСтажМесяцев")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ДругойСтажЛет");
	
КонецФункции
	
Функция ИмяПоляСведенийОСтаже(ЭлМассива)
	
	Если ВРег(ЭлМассива) = ВРег("ДругойСтажВид") Тогда
		
		Возврат "ВидСтажа";
		
	ИначеЕсли ВРег(ЭлМассива) = ВРег("ОбщийСтажДней")
		ИЛИ ВРег(ЭлМассива) = ВРег("НепрерывныйСтажДней")
		ИЛИ ВРег(ЭлМассива) = ВРег("СтажНаНадбавкуЗаВыслугуЛетДней")
		ИЛИ ВРег(ЭлМассива) = ВРег("ДругойСтажДней")
		ИЛИ ВРег(ЭлМассива) = ВРег("ПедагогическийСтажДней")
		ИЛИ ВРег(ЭлМассива) = ВРег("ОбщийНаучноПедагогическийСтажДней") Тогда
		
		Возврат "Дней";
		
	ИначеЕсли ВРег(ЭлМассива) = ВРег("ОбщийСтажМесяцев") 
		ИЛИ ВРег(ЭлМассива) = ВРег("НепрерывныйСтажМесяцев")
		ИЛИ ВРег(ЭлМассива) = ВРег("СтажНаНадбавкуЗаВыслугуЛетМесяцев")
		ИЛИ ВРег(ЭлМассива) = ВРег("ДругойСтажМесяцев")
		ИЛИ ВРег(ЭлМассива) = ВРег("ПедагогическийСтажМесяцев") 
		ИЛИ ВРег(ЭлМассива) = ВРег("ОбщийНаучноПедагогическийСтажМесяцев") Тогда
		
		Возврат "Месяцев";
		
	ИначеЕсли ВРег(ЭлМассива) = ВРег("ОбщийСтажЛет") 
		ИЛИ ВРег(ЭлМассива) = ВРег("НепрерывныйСтажЛет")
		ИЛИ ВРег(ЭлМассива) = ВРег("СтажНаНадбавкуЗаВыслугуЛетЛет")
		ИЛИ ВРег(ЭлМассива) = ВРег("ДругойСтажЛет")
		ИЛИ ВРег(ЭлМассива) = ВРег("ПедагогическийСтажЛет") 
		ИЛИ ВРег(ЭлМассива) = ВРег("ОбщийНаучноПедагогическийСтажЛет") Тогда
		
		Возврат "Лет";
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция НеобходимыСведенияОВладенииЯзыками(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("ВладеемыйЯзык1")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВладеемыйЯзык1СтепеньЗнания")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВладеемыйЯзык2")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВладеемыйЯзык2СтепеньЗнания");
	
КонецФункции

Функция НеобходимыСведенияОПрофессии(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("Профессия1")
		ИЛИ	ВРег(ЭлМассива) = ВРег("Профессия2");
	
КонецФункции

Функция НеобходимоСемейноеПоложение(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("СемейноеПоложение")
	
КонецФункции

Функция НеобходимыСведенияОВоинскомУчете(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("ВоинскийУчетКатегорияЗапаса")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВоинскийУчетЗвание")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВоинскийУчетСостав")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВоинскийУчетВУС")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВоинскийУчетГодность")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВоинскийУчетВоенкомат")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВоинскийУчетНомерКомандыПартии")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВоинскийУчетПунктПеречня")
		ИЛИ	ВРег(ЭлМассива) = ВРег("ВоинскийУчетНаличиеМобпредписания")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВоинскийУчетОтношениеКВоинскойОбязанности")
		ИЛИ ВРег(ЭлМассива) = ВРег("ВоинскийУчетОтношениеКВоинскомуУчету");
		
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхВоинскогоУчета(Знач ИмяПоля)
	
	ИмяПоля = ВРег(ИмяПоля);
	
	СоответствиеЗапрашиваемыхДанных = Новый Соответствие;
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТКАТЕГОРИЯЗАПАСА",					"ЕСТЬNULL(ВоинскийУчет.КатегорияЗапаса, ЗНАЧЕНИЕ(Перечисление.КатегорииЗапасаВоеннообязанных.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТЗВАНИЕ",							"ЕСТЬNULL(ВоинскийУчет.Звание, ЗНАЧЕНИЕ(Справочник.ЗванияГражданскогоВоинскогоУчета.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТСОСТАВ",							"ЕСТЬNULL(ВоинскийУчет.Состав, ЗНАЧЕНИЕ(Справочник.СоставыВоеннослужащих.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТВУС",								"ЕСТЬNULL(ВоинскийУчет.ВУС, """")");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТГОДНОСТЬ",						"ЕСТЬNULL(ВоинскийУчет.Годность, ЗНАЧЕНИЕ(Перечисление.ГодностьКВоеннойСлужбе.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТВОЕНКОМАТ",						"ЕСТЬNULL(ВоинскийУчет.Военкомат, ЗНАЧЕНИЕ(Справочник.Военкоматы.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТНОМЕРКОМАНДЫПАРТИИ",				"ЕСТЬNULL(ВоинскийУчет.НомерКомандыПартии, """")");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТПУНКТПЕРЕЧНЯ",					"ЕСТЬNULL(ВоинскийУчет.ПунктПеречня, ЗНАЧЕНИЕ(Справочник.ПереченьДолжностейДляБронированияГраждан.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТНАЛИЧИЕМОБПРЕДПИСАНИЯ",			"ЕСТЬNULL(ВоинскийУчет.НаличиеМобпредписания, ЛОЖЬ)");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТОТНОШЕНИЕКВОИНСКОЙОБЯЗАННОСТИ",	"ЕСТЬNULL(ВоинскийУчет.ОтношениеКВоинскойОбязанности, ЗНАЧЕНИЕ(Перечисление.ОтношениеКВоинскойОбязанности.ПустаяСсылка))");
	СоответствиеЗапрашиваемыхДанных.Вставить("ВОИНСКИЙУЧЕТОТНОШЕНИЕКВОИНСКОМУУЧЕТУ",		"ЕСТЬNULL(ВоинскийУчет.ОтношениеКВоинскомуУчету, ЗНАЧЕНИЕ(Перечисление.ОтношениеКВоинскомуУчету.ПустаяСсылка))");
	
	Возврат СоответствиеЗапрашиваемыхДанных.Получить(ИмяПоля);
	
КонецФункции

Функция НеобходимаОрганизацияБронированияВоинскогоУчета(ЭлМассива)
	
	Возврат ВРег(ЭлМассива) = ВРег("ВоинскийУчетЗабронированОрганизацией")
	
КонецФункции

Функция НеобходимыСведенияОбОбразовании(Знач ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = ВРег("Образование1УчебноеЗаведение")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование1ВидОбразования")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование1Специальность")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование1Диплом")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование1ГодОкончания")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование1Квалификация")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование2УчебноеЗаведение")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование2ВидОбразования")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование2Специальность")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование2Диплом")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование2ГодОкончания")
		ИЛИ ВРег(ИмяПоля) = ВРег("Образование2Квалификация");
		
КонецФункции

Функция ПутьКДаннымПоИмениЗапрашиваемыхДанныхОбОбразовании(Знач ИмяПоля)
	
	Если Найти(ВРег(ИмяПоля), "ОБРАЗОВАНИЕ1") Тогда
		
		Возврат "Образование1." + ИмяПоля;
		
	КонецЕсли;
	
	Возврат "Образование2." + ИмяПоля;
	
КонецФункции

Функция НеобходимПоказательТарифнойСтавки(Знач ИмяПоля)
	
	Возврат ВРег(ИмяПоля) = ВРег("ПоказательТарифнойСтавки");
	
КонецФункции

Функция ПутьКДаннымПоказательТарифнойСтавки()
	
	Возврат "ЕСТЬNULL(ТарифныеСтавкиСотрудников.ПоказательТарифнойСтавки, ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.ПустаяСсылка))";
	
КонецФункции

Функция ПутьКДаннымОсновногоНачисления()
	
	Возврат "ЕСТЬNULL(ТарифныеСтавкиСотрудников.ОсновноеНачисление, ЗНАЧЕНИЕ(ПланВидовРасчета.Начисления.ПустаяСсылка))";
	
КонецФункции

Функция ЗапросВТСтажиФизическихЛиц(ТолькоРазрешенные, ИмяВТСтажиФизическихЛиц, ИмяВременнойТаблицыОтборовФизическихЛиц, ПоляОтбораФизическихЛиц)
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции форм кадровых документов

// Дополняет переданную коллекцию колонками
//		Организация
//		ГоловнаяОрганизация
//		ТекущаяОрганизация
//		ТекущаяПозиция
//		ТекущееПодразделение
//		ТекущаяДолжность
//  	ТекущееКоличествоСтавок
// Колонки Текущая... заполняются только для записей перемещения и увольнения
// Колонки Организация, ГоловнаяОрганизация - для всех.
Процедура ДополнитьТекущимиКадровымиДанными(КадровыеДвижения, ПозицияЕсть, Регистратор)
	
	КадровыеДвижения.Колонки.Добавить("ТекущаяОрганизация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КадровыеДвижения.Колонки.Добавить("ТекущееПодразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КадровыеДвижения.Колонки.Добавить("ТекущаяДолжность", Новый ОписаниеТипов("СправочникСсылка.Должности"));
	КадровыеДвижения.Колонки.Добавить("ТекущееКоличествоСтавок", Новый ОписаниеТипов("Число"));
	КадровыеДвижения.Колонки.Добавить("ТекущийВидЗанятости", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыЗанятости"));
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ИзмеренияДаты = КадровыеДвижения.Скопировать(, "Сотрудник,ДатаСобытия");
	ИзмеренияДаты.Колонки.ДатаСобытия.Имя = "Период";
	
	Отбор = Новый Массив;
	Отбор.Добавить(Новый Структура("ЛевоеЗначение,ВидСравнения,ПравоеЗначение","Регистратор", "<>", Регистратор));
	
	ЗарплатаКадры.СоздатьПоТаблицеЗначенийВТИмяРегистраСрезПоследних(
		Запрос.МенеджерВременныхТаблиц, 
		Истина,
		"КадроваяИсторияСотрудников",
		ИзмеренияДаты,
		Отбор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КадроваяИсторияСотрудниковСрезПоследних.Сотрудник,
	|	КадроваяИсторияСотрудниковСрезПоследних.Период КАК ДатаСобытия,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ТекущаяОрганизация,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ТекущееПодразделение,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.Должность, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ТекущаяДолжность,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.КоличествоСтавок, 0) КАК ТекущееКоличествоСтавок,
	|	ЕСТЬNULL(КадроваяИсторияСотрудниковСрезПоследних.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ТекущийВидЗанятости
	|ИЗ
	|	ВТКадроваяИсторияСотрудниковСрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПоиска = Новый Структура("Сотрудник, ДатаСобытия");
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		НайденныеСтроки = КадровыеДвижения.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Выборка, 
			"ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущееКоличествоСтавок,ТекущийВидЗанятости");
			Если НЕ ЗначениеЗаполнено(НайденнаяСтрока.Организация) Тогда
				НайденнаяСтрока.Организация = Выборка.ТекущаяОрганизация;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Дополняет переданную коллекцию колонками
//		ГоловнаяОрганизация
//		ТекущийГрафик
// Колонки ТекущийГрафик заполняются только для записей перемещения и увольнения
// Колонка ГоловнаяОрганизация - для всех.
Процедура ДополнитьТекущимиДаннымиГрафиков(ДвиженияГрафиков, Регистратор)
	

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

Процедура ПроверкаИспользованияВШтатномРасписании(Отказ, Ссылка, ДатаРасформирования)
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Подразделение", Ссылка);
	Запрос.УстановитьПараметр("ДатаРасформирования", ДатаРасформирования);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Наименование КАК НаименованиеПодразделения,
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Родитель = &Подразделение
	|	И НЕ ПодразделенияОрганизаций.Расформировано";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Подразделение ""%1"" не может быть расформировано, т.к. на %2 есть действующие подчиненные подразделения:'"); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Ссылка,
			Формат(ДатаРасформирования, "ДЛФ=DD")); 
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.Расформировано" , , Отказ);
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = "- " + НСтр("ru = 'подразделение'") + " ""%1""";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.НаименованиеПодразделения); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,  "Объект.Расформировано", , Отказ);
		КонецЦикла;
		
	КонецЕсли; 
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШтатноеРасписание.Наименование КАК ПозицияШтатногоРасписания,
	|	ШтатноеРасписание.Ссылка
	|ИЗ
	|	Справочник.ШтатноеРасписание КАК ШтатноеРасписание
	|ГДЕ
	|	ШтатноеРасписание.Подразделение = &Подразделение
	|	И НЕ ШтатноеРасписание.ЭтоГруппа
	|	И НЕ(ШтатноеРасписание.Закрыта
	|				И ШтатноеРасписание.ДатаЗакрытия <= &ДатаРасформирования)";
	
	Результат = Запрос.Выполнить();
		
	Если Не Результат.Пустой() Тогда
		
		ТекстСообщения = НСтр("ru = 'Подразделение ""%1"" не может быть расформировано, т.к. на %2 оно используется в актуальных позициях штатного расписания:'"); 
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Ссылка,
			Формат(ДатаРасформирования, "ДЛФ=DD")); 
        ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.Расформировано" , , Отказ);

		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ТекстСообщения = "- " + НСтр("ru = 'позиция'") + " ""%1""";
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстСообщения,
				Выборка.ПозицияШтатногоРасписания); 
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка,  "Объект.Расформировано", , Отказ);
		КонецЦикла;	
		
	КонецЕсли;
		
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции обновления вторичных данных "возвратного" регистра сведений

Процедура ДополнитьТаблицуДаннымиРегистраПоОтборуНовогоНабора(ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ";
	Для Каждого Измерение Из Измерения Цикл
		ТекстЗапроса = ТекстЗапроса + "
		|	РегистрСведений." + Измерение + ",";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 1);
	ТекстЗапроса = ТекстЗапроса + "
	| ПОМЕСТИТЬ ВТИзмеренияДатыДляФормированияСрезаПервых
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + " КАК РегистрСведений ";
	
	// Добавим отбор, по измерениям не имеющим записей в будущем, из таблицы которую создали ПередЗаписью.
	Если НЕ ПередЗаписью Тогда
		ТекстЗапроса =	ТекстЗапроса + " ЛЕВОЕ СОЕДИНЕНИЕ ВТИзмеренияДатыПередЗаписью КАК ПередЗаписью
		|ПО "; 	
		Для Каждого Измерение Из Измерения Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	РегистрСведений." + Измерение + " = ПередЗаписью." + Измерение + " И ";
		КонецЦикла;
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	КонецЕсли;
	
	Если Отбор.Количество() <> 0 Тогда
		СчПараметров = 1;
		ТекстОтбор = "
		|	ГДЕ (";
		Для Каждого СтруктураОтбора Из Отбор Цикл
			ТекстОтбор = ТекстОтбор + "
			|	РегистрСведений." + СтруктураОтбора.ЛевоеЗначение + СтруктураОтбора.ВидСравнения + "(&Параметр" + СчПараметров + ") И";
			СчПараметров = СчПараметров + 1;
		КонецЦикла;	
		ТекстОтбор = Лев(ТекстОтбор, СтрДлина(ТекстОтбор) - 1);
		ТекстОтбор = ТекстОтбор + ")";
		ТекстЗапроса = ТекстЗапроса + ТекстОтбор;
	КонецЕсли;
	
	Если НЕ ПередЗаписью Тогда
		Если Отбор.Количество() <> 0 Тогда
			ТекстЗапроса =	ТекстЗапроса + "
			|  И (ПередЗаписью.Период ЕСТЬ NULL)";		
		иначе
			ТекстЗапроса =	ТекстЗапроса + "
			|	ГДЕ (ПередЗаписью.Период ЕСТЬ NULL)"; 	
		КонецЕсли;
	КонецЕсли;
	
	Если Отбор <> Неопределено Тогда
		СчПараметров = 1;
		Для Каждого СтруктураОтбора Из Отбор Цикл
			Запрос.УстановитьПараметр("Параметр" + СчПараметров, СтруктураОтбора.ПравоеЗначение);			
			СчПараметров = СчПараметров + 1;
		КонецЦикла;
	КонецЕсли;	
	
	Если НЕ ПередЗаписью  Тогда
		ТекстЗапроса = ТекстЗапроса + ";
		|///////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТИзмеренияДатыПередЗаписью";
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
КонецПроцедуры	

Процедура ЗаполнитьВременныеТаблицыДляПроверкиИОбновленияВозвратногоРегистра(ИмяРегистра, Измерения, СтрокаИзмерений, Отбор, МенеджерВременныхТаблиц)

КонецПроцедуры	

Процедура ПроверитьИОбновитьСледующиеЗаписиВозвратногоРегистра(НаборЗаписей, ПередЗаписью, ИмяРегистра, Измерения, СтрокаИзмерений, МенеджерВременныхТаблиц, ОтборНеЭтотРегистратор, СтрокаЗаполняемыхВозвратныхРесурсов = "")
		
КонецПроцедуры

Функция НаборЗаписейИзменен(НаборЗаписей, ИмяРегистра, Регистратор)

	ТЗИзНабораЗаписей = НаборЗаписей.Выгрузить();
	
	// Подготовим массив полей по которым будем сравнивать данные 
	МассивПолей = Новый Массив;
	Для каждого Колонка Из ТЗИзНабораЗаписей.Колонки Цикл
		// Колонка "Номер строки" с точки зрения нашего механизма не существенна.
		// Регистратор сравнивать тоже не будем - и в запросе, и в наборе по нему отбор. 
		Если Колонка.Имя = "НомерСтроки" или 
			Колонка.Имя = "Регистратор" Тогда
			Продолжить;
		КонецЕсли;
		МассивПолей.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТЗИзНабораЗаписей",ТЗИзНабораЗаписей);
	Запрос.УстановитьПараметр("Регистратор",Регистратор);
	
	// Выберем все данные из базы и из записываемого набора, которые необходимо сравнить.
	// Соединим по всем полям данные из базы и из записываемого набора.
	ТекстЗапроса = 
	"ВЫБРАТЬ * ПОМЕСТИТЬ ВТИзНабораЗаписей ИЗ &ТЗИзНабораЗаписей КАК ТЗИзНабораЗаписей
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ * ПОМЕСТИТЬ ВТИзРегистра ИЗ РегистрСведений." + ИмяРегистра + " КАК РегистрСведений ГДЕ РегистрСведений.Регистратор = &Регистратор
	|;
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ	
	|	РегистрСведений.НомерСтроки КАК НомерСтроки,
	|	ВТИзНабораЗаписей.НомерСтроки КАК НомерСтрокиИзНабора 
	|ИЗ
	|	ВТИзРегистра КАК РегистрСведений
	|ПОЛНОЕ СОЕДИНЕНИЕ
	|	 ВТИзНабораЗаписей КАК ВТИзНабораЗаписей	
	|ПО  "; 
	Для Каждого Поле Из МассивПолей Цикл
		ТекстЗапроса = ТекстЗапроса + " 
		|	РегистрСведений." + Поле + " = " + "ВТИзНабораЗаписей." + Поле + " И ";
	КонецЦикла;
	ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 3);
	ТекстЗапроса = ТекстЗапроса + "
	|	ГДЕ РегистрСведений.НомерСтроки ЕСТЬ NULL ИЛИ ВТИзНабораЗаписей.НомерСтроки ЕСТЬ NULL"; 
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	// Если данные в базе и в записываемом наборе совпадают, результат будет пустой
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции	

Процедура ДополнитьПараметрыПолученияСотрудников(ПараметрыПолученияСотрудников)
	
	ПараметрыПолученияСотрудников.Вставить("РаботникиПоТрудовымДоговорам", Истина);
	ПараметрыПолученияСотрудников.Вставить("РаботникиПоДоговорамГПХ", Неопределено);
	
КонецПроцедуры

// Возвращает структуру параметров для, формирующих ВТРабочиеМестаСотрудников.
//
// Возвращаемое значение:
//   Структура - Содержит ключи:
//				Организация - СправочникСсылка.Организации, если параметр опустить в таблицу войдут все сотрудник
//					независимо от организации
//				ОтбиратьПоГоловнойОрганизации - если Истина, то отбор по головной организации, иначе по текущей организации
//					По умолчанию - ЛОЖЬ
//				Подразделение - СправочникСсылка.ПодразделенияОрганизаций, в таблицу войдут сотрудники указанного подразделения
//					и всех подразделений, подчиненных указанному, если параметр опустить в таблицу войдут все сотрудники.
//
Функция ПараметрыДляЗапросВТРабочиеМестаСотрудников()
		
	ПараметрыПолученияРабочихМестСотрудников = Новый Структура;
	ПараметрыПолученияРабочихМестСотрудников.Вставить("Организация");
	ПараметрыПолученияРабочихМестСотрудников.Вставить("Подразделение");
	ПараметрыПолученияРабочихМестСотрудников.Вставить("ОтбиратьПоГоловнойОрганизации", Ложь);
	
	Возврат ПараметрыПолученияРабочихМестСотрудников;
	
КонецФункции

#КонецОбласти
