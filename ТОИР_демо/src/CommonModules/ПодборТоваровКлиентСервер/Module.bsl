////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции необходимые для работы форм
// подбора товаров. Модуль содержит вспомогательные функции,
// которые вызываются из клиентского и серверного модулей.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОберткиДляОпределенияТипаФормПодборов

// Проверяет, является ли форма формой подбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора, форма списка.
//
// Возвращаемое значение:
//	 Булево - см. описание выше.
//
Функция ЭтоФормаПодбора(Форма) Экспорт
	
	КодФормы = Форма.КодФормы;
	
	Если КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма"
		Или КодФормы = "Обработка_ПодборТоваровВДокументЗакупки_Форма" 
		Или КодФормы = "Документ_ЧекККМ_ФормаДокументаМастер" 
		Или КодФормы = "Обработка_ПомощникПродаж_Форма" 
		Или КодФормы = "Обработка_ПодборПоТоварнымКатегориям_Форма" 
        Или КодФормы = "Обработка_ПодборНоменклатуры_Форма" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Проверяет, является ли формой подбора в документы закупки.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора, форма списка.
//
// Возвращаемое значение:
//	 Булево - см. описание выше.
//
Функция ЭтоФормаПодбораВДокументыЗакупки(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Обработка_ПодборТоваровВДокументЗакупки_Форма");
	
КонецФункции

// Проверяет, является ли формой помощника продаж.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма.
//
// Возвращаемое значение:
//	 Булево - см. описание выше.
//
Функция ЭтоФормаПомощникаПродаж(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Обработка_ПомощникПродаж_Форма");
	
КонецФункции

// Проверяет, является ли формой чека ККМ.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма.
//
// Возвращаемое значение:
//	 Булево - см. описание выше.
//
Функция ЭтоФормаЧекаККМ(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Документ_ЧекККМ_ФормаДокументаМастер");
	
КонецФункции

// Проверяет, является ли формой подбора в документы продажи.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора, форма списка.
//
// Возвращаемое значение:
//	 Булево - см. описание выше.
//
Функция ЭтоФормаПодбораВДокументыПродажи(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Обработка_ПодборТоваровВДокументПродажи_Форма");
	
КонецФункции

// Проверяет, является ли формой выбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	 Форма - УправляемаяФорма - форма.
//
// Возвращаемое значение:
//	 Булево - см. описание выше.
//
Функция ЭтоФормаВыбораХарактеристик(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_ХарактеристикиНоменклатуры_ФормаВыбора");
	
КонецФункции

// Проверяет, является ли формой выбора справочника "Номенклатура".
//
// Параметры:
//	 Форма - УправляемаяФорма - форма.
//
// Возвращаемое значение:
//	 Булево - см. описание выше.
//
Функция ЭтоФормаВыбораНоменклатуры(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_Номенклатура_ФормаВыбора");
	
КонецФункции

// Проверяет, является ли формой списка справочника "Номенклатура".
//
// Параметры:
//	 Форма - УправляемаяФорма - форма.
//
// Возвращаемое значение:
//	 Булево - см. описание выше.
//
Функция ЭтоФормаСпискаНоменклатуры(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_Номенклатура_ФормаСписка");
	
КонецФункции

// Проверяет, является ли формой подобных товаров.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма.
//
// Возвращаемое значение:
//	 Булево - см. описание выше.
//
Функция ЭтоФормаПодобныеТоварыНоменклатуры(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Справочник_Номенклатура_ПодобныеТовары");
	
КонецФункции

// Проверяет, является ли формой подбора по товарным категориям.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора товаров по товарным категориям.
//
// Возвращаемое значение:
//	Булево - см. описание выше.
//
Функция ЭтоФормаПодбораТоваровПоКатегориям(Форма) Экспорт
	
	Возврат (Форма.КодФормы = "Обработка_ПодборПоТоварнымКатегориям_Форма");
	
КонецФункции

#КонецОбласти

#Область ОпределениеИменСписковНаФормеВЗависимостиОтВариантаПоиска

// Возвращает имя списка характеристик по варианту поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	 Строка - имя списка характеристик.
//
Функция ИмяСпискаХарактеристикПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСписка = ?(ВариантПоискаТоваров = "Расширенный", "СписокРасширенныйПоискХарактеристики", "СписокСтандартныйПоискХарактеристики");
	
	Возврат ИмяСписка;
	
КонецФункции

// Возвращает имя списка номенклатуры по варианту поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	 Строка - имя списка номенклатуры.
//
Функция ИмяСпискаНоменклатурыПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСписка = ?(ВариантПоискаТоваров = "Расширенный", "СписокРасширенныйПоискНоменклатура", "СписокСтандартныйПоискНоменклатура");
	
	Возврат ИмяСписка;
	
КонецФункции

// Возвращает имя списка номенклатуры поставщика по варианту поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора товаров в документы закупки.
//
// Возвращаемое значение:
//	 Строка - имя списка номенклатуры.
//
Функция ИмяСпискаНоменклатурыПоставщикаПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСписка = ?(ВариантПоискаТоваров = "Расширенный", "СписокРасширенныйПоискНоменклатураПоставщика", "СписокСтандартныйПоискНоменклатураПоставщика");
	
	Возврат ИмяСписка;
	
КонецФункции

// Возвращает имя текущей страницы номенклатуры по варианту поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма ывбора. списка, подбора.
//
// Возвращаемое значение:
//	 Строка - имя страницы номенклатуры.
//
Функция ИмяСтраницыНоменклатурыПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	ИмяСтраницы = ?(ВариантПоискаТоваров = "Расширенный", "СтраницаРасширенныйПоискНоменклатура", "СтраницаСтандартныйПоискНоменклатура");
	
	Возврат ИмяСтраницы;
	
КонецФункции

// Возвращает имя страницы списка страниц на форме подбора, которую надо сделать текущей
// в зависимости от включенного типа поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма подбора.
//
// Возвращаемое значение:
//	 Строка - имя страницы.
//
Функция ИмяТекущейСтраницыПоВариантуПоиска(Форма) Экспорт
	
	ИмяСтраницыСписка = "";
	
	Если ЭтоФормаПодбора(Форма) Тогда
		НавигацияПоХарактеристикам = Форма.НавигацияПоХарактеристикам;
	Иначе
		НавигацияПоХарактеристикам = Ложь;
	КонецЕсли;
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	
	ИмяСтраницыСписка = ?(НавигацияПоХарактеристикам, "СтраницаСтандартныйПоискХарактеристики", "СтраницаСтандартныйПоискНоменклатура");
	
	Если ВариантПоискаТоваров = "Расширенный" Тогда
		ИмяСтраницыСписка = ?(НавигацияПоХарактеристикам, "СтраницаРасширенныйПоискХарактеристики", "СтраницаРасширенныйПоискНоменклатура");
	КонецЕсли;
	
	Возврат ИмяСтраницыСписка;
	
КонецФункции

// Возвращает имя страницы списка страниц номенклатуры поставщика на форме подбора, которую надо сделать текущей
// в зависимости от включенного типа поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма подбора.
//
// Возвращаемое значение:
//	 Строка - имя страницы.
//
Функция ИмяТекущейСтраницыНоменклатурыПоставщикаПоВариантуПоиска(Форма) Экспорт
	
	ВариантПоискаТоваров = ДействующийВариантПоиска(Форма);
	
	Возврат ?(ВариантПоискаТоваров = "Стандартный", "СтраницаСтандартныйПоискНоменклатураПоставщика", "СтраницаРасширенныйПоискНоменклатураПоставщика");
	
КонецФункции

// Возвращает идентфикатор действующего варианта поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//	 Строка - идентификатор варианта поиска.
//
Функция ДействующийВариантПоиска(Форма) Экспорт
	
	Если Форма.ВариантПоискаТоваров = "ПоУмолчанию" Тогда
		Если Форма.ИспользоватьСтандартныйПоискПриПодбореТоваров Тогда
			Возврат "Стандартный";
		Иначе
			Возврат "Расширенный";
		КонецЕсли;
	Иначе
		Возврат Форма.ВариантПоискаТоваров;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ФункцииДляРаботыМеханизмаПоиска

// Устанавливает отбор по строке поиска у динамического списка.
//
// Параметры:
//	 ЭлементыОтбора - Коллекция - коллекция элементов отбора,
//	 ЗначениеОтбора - Массив - массив значений отбора,
//	 ИспользованиеОтбора - Булево - флаг использования отбора.
//
Процедура УстановитьОтборСпискаПоСтрокеПоиска(ЭлементыОтбора, ЗначениеОтбора = Неопределено, ИспользованиеОтбора = Истина) Экспорт
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементыОтбора, "ПоискПоПодстроке", 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтбора, "Ссылка", ЗначениеОтбора, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ПоискПоПодстроке", ИспользованиеОтбора);
	
КонецПроцедуры

// Сбрасывает установленный отбор по строке поиска у списка номенклатуры.
//
// Параметры:
//	 Форма -УправляемаяФорма - форма подбора, форма списка.
//
Процедура СнятьОтборПоСтрокеПоискаНоменклатуры(Форма) Экспорт
	
	Форма.КодОшибкиПоиска = "";
	Форма.ЕстьФильтрПоПоискуНоменклатуры = Ложь;
	Форма.ПоискНоменклатурыНеУдачный = Ложь;
	
	УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,, Ложь);
	
	Если Не ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
		УстановитьОтборПоДиапазонуЦен(Форма);
	КонецЕсли;
	
КонецПроцедуры


// Сбрасывает установленный отбор по строке поиска у списка характеристик.
//
// Параметры:
//	 Форма -УправляемаяФорма - форма подбора.
//
Процедура СнятьОтборПоСтрокеПоискаХарактеристик(Форма) Экспорт
	
	Если Не ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.КодОшибкиПоиска = "";
	Форма.ПоискХарактеристикНеУдачный = Ложь;
	
	УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,, Ложь);
	
КонецПроцедуры

// Сбрасывает установленный отбор по строке поиска у списка номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора, форма списка.
//
Процедура СнятьОтборПоСтрокеПоискаНоменклатурыПоставщика(Форма) Экспорт
	
	Если Не ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.КодОшибкиПоиска = "";
	Форма.ПоискНоменклатурыПоставщикаНеУдачный = Ложь;
	
	УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатураПоставщика).Элементы,, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииУстановкиИСбросаОтборов

// Устанавливает отбор по диапазону цен на список номенклатуры поставщика в формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора товаров.
//
Процедура УстановитьОтборПоДиапазонуЦенПоставщика(Форма) Экспорт
	
	Если Не ЭтоФормаПодбора(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// Отбор на список номенклатуры поставщика.
	ГруппаОтбораЦенаНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатураПоставщика).Элементы,
		"ЦеныНоменклатуры",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ГруппаОтборПоЦене = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораЦенаНоменклатура.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОтПоставщика,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаОтПоставщика));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДоПоставщика,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаДоПоставщика));
	
КонецПроцедуры

// Устанавливает отбор по условию цены поставщика на форме подбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоУсловиеЦеныПоставщика(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокНоменклатураПоставщика, 
		"УсловиеЦеныПоставщика", 
		Форма.УсловиеЦеныПоставщика);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокНоменклатура, 
		"УсловиеЦеныПоставщика", 
		Форма.УсловиеЦеныПоставщика);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, 
		"УсловиеЦеныПоставщика", 
		Форма.УсловиеЦеныПоставщика);

КонецПроцедуры

// Устанавливает отбор по диапазону цен на список номенклатуры и 
// список характеристик в формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора товаров.
//
Процедура УстановитьОтборПоДиапазонуЦен(Форма) Экспорт
	
	ЭтоФормаПодбора = ЭтоФормаПодбора(Форма);
	
	Если Не ЭтоФормаПодбора Тогда
		Возврат;
	КонецЕсли;
	
	// Отбор на список номенклатуры.
	ГруппаОтбораЦенаНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		"ЦеныНоменклатуры",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ГруппаОтборПоЦене = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ГруппаОтбораЦенаНоменклатура.Элементы,
		"ОтборПоЦене",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОт,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаОт));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтборПоЦене,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДо,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаДо));
	
	// Отбор на список характеристик.
	СписокВариантов = Новый СписокЗначений();
	СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры"));
	СписокВариантов.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры"));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаНоменклатура,
		"ИспользованиеХарактеристик",
		ВидСравненияКомпоновкиДанных.ВСписке,
		СписокВариантов,
		"ИспользованиеХарактеристик",
		ЗначениеЗаполнено(Форма.ОтборЦенаОт));
	
	// Установить фильтр на список характеристик.
	ГруппаОтбораЦенаХарактеристики = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
		"ЦенаХарактеристики",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаХарактеристики,
		"Цена",
		ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
		Форма.ОтборЦенаОт,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаОт));
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбораЦенаХарактеристики,
		"Цена",
		ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,
		Форма.ОтборЦенаДо,
		"Цена",
		ЗначениеЗаполнено(Форма.ОтборЦенаДо));
	
КонецПроцедуры

// Устанавливает значения доступности элементов фильтра номенклатуры поставщика в зависимости от значения
// флажка использования фильтра номенклатуры поставщика.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьДоступностьЭлементовФильтраНоменклатурыПоставщика(Форма) Экспорт
	
	Форма.Элементы.ИерархияНоменклатурыПоставщика.Доступность = Форма.ИспользоватьФильтрНоменклатураПоставщика;
	
КонецПроцедуры

// Устанавливает значения доступности элементов фильтров в зависимости от значения
// флажка использования фильтров.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьДоступностьЭлементовФильтров(Форма) Экспорт
	
	ЭтоФормаВыбораХарактеристик = ЭтоФормаВыбораХарактеристик(Форма);
	ЭтоФормаПодбора = ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если Не ЭтоФормаВыбораХарактеристик Тогда
		
		Форма.Элементы.ВариантНавигации.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ИерархияНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ВидНоменклатуры.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.ВидНоменклатуры.АвтоОтметкаНезаполненного = Форма.ИспользоватьФильтры;
		
	КонецЕсли;
	
	Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		
		Форма.Элементы.НоменклатураИсходногоКачества.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.СписокКачества.Доступность = Форма.ИспользоватьФильтры;
		Форма.Элементы.СброситьОтборыПоСвойствам.Доступность = Форма.ИспользоватьФильтры;
		
	КонецЕсли;
	
	Форма.Элементы.ДеревоОтборовПредставление.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовОтбор.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	Форма.Элементы.ДеревоОтборовПредставлениеОтбора.ТолькоПросмотр = Не Форма.ИспользоватьФильтры;
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаОтображенияФормыПоВариантуПоиска

// Устанавлиает кнопку выбора по умолчанию в форме выбора номенклатуры в зависимости от варианта поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура НазначитьКнопкуВыбораПоУмолчанию(Форма) Экспорт
	
	ВариантПоиска = ДействующийВариантПоиска(Форма);
	
	Если ВариантПоиска = "Расширенный" Тогда
		
		Форма.Элементы.СписокСтандартныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Ложь;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Истина;
		
	ИначеЕсли ВариантПоиска = "Стандартный" Тогда
		
		Форма.Элементы.СписокСтандартныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Истина;
		Форма.Элементы.СписокРасширенныйПоискНоменклатураВыбратьЗначениеНоменклатуры.КнопкаПоУмолчанию = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения текущих страниц на формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура УстановитьТекущиеСтраницыПоВариантуПоиска(Форма) Экспорт
	
	Если ДействующийВариантПоиска(Форма) = "Стандартный" Тогда
		СнятьОтборПоСтрокеПоискаНоменклатуры(Форма);
		Форма.СтрокаПоискаНоменклатура = "";
	КонецЕсли;
	
	Если ЭтоФормаПодбора(Форма) Тогда
		
		Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ИмяТекущейСтраницыПоВариантуПоиска(Форма)];
		
		Если ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
			Форма.Элементы.СтраницыСписковНоменклатураПоставщика.ТекущаяСтраница = Форма.Элементы[ИмяТекущейСтраницыНоменклатурыПоставщикаПоВариантуПоиска(Форма)];
		КонецЕсли;
		
		НазначитьСочетанияКлавишКомандФормыПоВариантуПоиска(Форма);
		
	Иначе
		
		ИмяСтраницы = ИмяТекущейСтраницыПоВариантуПоиска(Форма);
		Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ИмяСтраницы];
		
	КонецЕсли;
	
КонецПроцедуры

// Назначает нужные сочетания для клавиш команд формы в зависимости от варианта поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры, форма выбора, форма подбора.
//
Процедура НазначитьСочетанияКлавишКомандФормыПоВариантуПоиска(Форма)
	
	ВариантПоиска = ДействующийВариантПоиска(Форма);
	
	Если ВариантПоиска = "Расширенный" Тогда
		ОсновнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыРасширенныйПоиск;
		ДополнительнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыСтандартныйПоиск;
	Иначе
		ОсновнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыСтандартныйПоиск;
		ДополнительнаяКоманда = Форма.Элементы.ПерейтиКСпискуНоменклатурыРасширенныйПоиск;
	КонецЕсли;
	
	ОсновнаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.BackSpace);
	ДополнительнаяКоманда.СочетаниеКлавиш = Новый СочетаниеКлавиш(Клавиша.Нет);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Устанавливает значение свойства элемента формы, если находит элемент на форме.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы - элементы формы, среди которых содержится искомый элемент.
//  ИмяЭлемента   - Строка - имя искомого элемента.
//  ИмяСвойства   - Строка - имя свойства, для которого будет устанавливаться значение.
//  Значение      - Произвольный - значение, которое будет установлено.
//  УстанавливатьДляПодчиненных - Булево - установить аналогичное свойство для подчиненных элементов искомого элемента.
//
Процедура УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяСвойства, Значение, УстанавливатьДляПодчиненных = Ложь) Экспорт
	
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НРег(ИмяСвойства) = "толькопросмотр"
		И ТипЗнч(Элемент) = Тип("КнопкаФормы") Тогда
			
		ИмяСвойстваЭлемента = "Доступность";
		ЗначениеСвойства    = НЕ Значение;
	Иначе
		ИмяСвойстваЭлемента = ИмяСвойства;
		ЗначениеСвойства    = Значение;
	КонецЕсли;
	
	Если Элемент[ИмяСвойстваЭлемента] <> ЗначениеСвойства Тогда
		Элемент[ИмяСвойстваЭлемента] = ЗначениеСвойства;
	КонецЕсли;
	
	ТипыЭлементовФормыСПодчиненнымиЭлементами = Новый ОписаниеТипов("УправляемаяФорма, ГруппаФормы, ТаблицаФормы");
	
	Если УстанавливатьДляПодчиненных И ТипыЭлементовФормыСПодчиненнымиЭлементами.СодержитТип(ТипЗнч(Элемент)) Тогда
		Для Каждого ПодчиненныйЭлемент Из Элемент.ПодчиненныеЭлементы Цикл
			УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ПодчиненныйЭлемент.Имя, ИмяСвойства, Значение, Истина);
		КонецЦикла;
 	КонецЕсли;
 	
КонецПроцедуры // УстановитьСвойствоЭлементаФорма()

// Возвращает структуру строки номенклатуры. Структура используется
// для кэширования текущих данных из строки динамического списка номенклатуры.
//
// Возвращаемое значение:
//	 Структура - Структура для хранения сведений об активизированной строке номенклатуры.
//
Функция СтруктураСтрокиНоменклатуры() Экспорт
	
	СтруктураСтроки = Новый Структура();
	
	СтруктураСтроки.Вставить("Ссылка");
	СтруктураСтроки.Вставить("Родитель");
	СтруктураСтроки.Вставить("ВидНоменклатуры");
	СтруктураСтроки.Вставить("ТипНоменклатуры");
	СтруктураСтроки.Вставить("Упаковка");
	СтруктураСтроки.Вставить("ЕдиницаИзмерения");
	СтруктураСтроки.Вставить("Номенклатура");
	СтруктураСтроки.Вставить("ЦеноваяГруппа");
	СтруктураСтроки.Вставить("ЭтоТовар",Ложь);
	СтруктураСтроки.Вставить("ЭтоУслуга", Ложь);
	СтруктураСтроки.Вставить("ПометкаУдаления", Ложь);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", Ложь);
	СтруктураСтроки.Вставить("ЭтоГруппа", Ложь);
	СтруктураСтроки.Вставить("ИспользованиеХарактеристик", Ложь);
	СтруктураСтроки.Вставить("Цена", 0);
	СтруктураСтроки.Вставить("ВНаличииОстаток", 0);
	СтруктураСтроки.Вставить("ВладелецХарактеристик");
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру строки характеристик. Структура используется
// для кэширования текущих данных из строки динамического списка характеристик.
//
// Возвращаемое значение:
//	 Структура - Структура для хранения сведений.
//
Функция СтруктураСтрокиХарактеристик() Экспорт
	
	СтруктураСтроки = Новый Структура();
	
	СтруктураСтроки.Вставить("Ссылка");
	СтруктураСтроки.Вставить("Характеристика");
	СтруктураСтроки.Вставить("Номенклатура");
	СтруктураСтроки.Вставить("ВидНоменклатуры");
	СтруктураСтроки.Вставить("ТипНоменклатуры");
	СтруктураСтроки.Вставить("ЕдиницаИзмерения");
	СтруктураСтроки.Вставить("Упаковка");
	СтруктураСтроки.Вставить("ЦеноваяГруппа");
	СтруктураСтроки.Вставить("ПометкаУдаления", Ложь);
	СтруктураСтроки.Вставить("ХарактеристикиИспользуются", Истина);
	СтруктураСтроки.Вставить("Цена", 0);
	СтруктураСтроки.Вставить("ВНаличииОстаток", 0);
	СтруктураСтроки.Вставить("ВладелецХарактеристик");
	
	Возврат СтруктураСтроки;
	
КонецФункции

// Возвращает структуру необходимую для передачи данных о товаре в
// процедуры добавления товара в корзину.
//
// Параметры:
//	 Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//
// Возвращаемое значение:
//	 Структура - структура параметров товара.
//
Функция ПараметрыТовара(Номенклатура = Неопределено) Экспорт
	
	ПараметрыТовара = Новый Структура();
	ПараметрыТовара.Вставить("Номенклатура");
	ПараметрыТовара.Вставить("ТипНоменклатуры");
	ПараметрыТовара.Вставить("Характеристика");
	ПараметрыТовара.Вставить("ХарактеристикиИспользуются", Ложь);
	ПараметрыТовара.Вставить("Упаковка");
	ПараметрыТовара.Вставить("ВидЦены");
	ПараметрыТовара.Вставить("Цена",0);
	ПараметрыТовара.Вставить("Склад");
	ПараметрыТовара.Вставить("ДатаОтгрузки",'00010101');
	ПараметрыТовара.Вставить("СрокПоставки",0);
	ПараметрыТовара.Вставить("КоличествоУпаковок",0);
	ПараметрыТовара.Вставить("ЭтоТовар",Ложь);
	ПараметрыТовара.Вставить("ЭтоУслуга",Ложь);
	ПараметрыТовара.Вставить("УсловиеЦеныПоставщика");
	ПараметрыТовара.Вставить("НоменклатураПоставщика");
	ПараметрыТовара.Вставить("ЦеноваяГруппа");
	ПараметрыТовара.Вставить("ПроцентРучнойСкидки",0);
	ПараметрыТовара.Вставить("Продавец");
	ПараметрыТовара.Вставить("Помещение");
	
	Если Номенклатура <> Неопределено Тогда
		ПараметрыТовара.Упаковка = ПодборТоваровВызовСервера.ПолучитьУпаковкуХранения(Номенклатура);
	КонецЕсли; 
	
	Возврат ПараметрыТовара;
	
КонецФункции

// Устанавливает текст информационной надписи о количестве и сумме
// товаров подобранных в корзину на форме подбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекстИнформационнойНадписи(Форма) Экспорт
	
	ЭтоФормаЧекаККМ = ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ЭтоФормаПомощникаПродаж(Форма);
	
	Если ЭтоФормаЧекаККМ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоФормаПомощникаПродаж Тогда
		Корзина = Форма.Объект.Товары;
		Валюта = Форма.Объект.Валюта;
	Иначе
		Корзина = Форма.Объект.Корзина;
		Валюта = Форма.Валюта;
	КонецЕсли;
	
	Сумма = Формат(Корзина.Итог("Сумма"), "ЧЦ=15; ЧДЦ=2; ЧН=");
	Количество = НРег(ЧислоПрописью(Корзина.Количество(), "Л = ru_RU; ДП = Ложь; НП = Истина; НД = Ложь;", НСтр("ru = 'позиция,позиции,позиций,ж,,,,,0'")));
	
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров, на сумму [Сумма] [Валюта] [СкрытьПоказать]'");
	
	СкрытьПоказать = "";
	
	Если Не ЭтоФормаПомощникаПродаж Тогда
		Если Форма.РежимПодбораБезКоличественныхПараметров Или Форма.РежимПодбораБезСуммовыхПараметров Тогда
			ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано [Количество] товаров [СкрытьПоказать]'");
		КонецЕсли;
		
		СкрытьПоказать = ?(Форма.ПоказыватьПодобранныеТовары, НСтр("ru = '(скрыть)'"), НСтр("ru = '(показать)'"));
	КонецЕсли;
	
	ВставляемыеЗначения = Новый Структура("Количество, Сумма, Валюта, СкрытьПоказать", Количество, Сумма, Валюта, СкрытьПоказать);
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
	Если Не ЭтоФормаПомощникаПродаж Тогда
		Форма.ИнформационнаяНадпись = ИнформационнаяНадпись;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает текст надписи о скрытии или отображении остатков.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекстНадписиОтображатьОстатки(Форма) Экспорт
	
	Форма.ОтображатьОстаткиНадпись = ?(Форма.Элементы.ОстаткиТоваров.Видимость, 
		НСтр("ru = 'Подробная информация об остатках (скрыть)'"), 
		НСтр("ru = 'Подробная информация об остатках (показать)'"));
	
КонецПроцедуры

// Устанавливает текст надписи скрытия/отображения остатков номенклатуры поставщика.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекстНадписиОтображатьОстаткиНоменклатурыПоставщика(Форма) Экспорт
	
	Форма.ОтображатьОстаткиНадпись = ?(Форма.Элементы.ОстаткиТоваров.Видимость, 
		НСтр("ru = 'Подробная информация об остатках (скрыть)'"), 
		НСтр("ru = 'Подробная информация об остатках (показать)'"));
	
КонецПроцедуры

// Формирует текст информационной надписи о количестве и сумме подобранных товаров.
//
// Параметры:
//	 ИнформационнаяНадпись - Строка- реквизит, в который будет помещена информационная надпись,
//	 КоличествоТоваров - Число - количество товаров,
//	 СуммаТоваров - Число - сумма товаров,
//	 Валюта - СправочникСсылка.Валюты - валюта, в которой осуществляется подбор товаров.
//
Процедура СформироватьИнформационнуюНадписьПодобранныхТоваров(ИнформационнаяНадпись, КоличествоТоваров, СуммаТоваров, Валюта) Экспорт
	
	ИнформационнаяНадпись = НСтр("ru = 'Всего подобрано товаров [КоличествоТоваров] на сумму [СуммаТоваров] [Валюта]'");
	
	ВставляемыеЗначения = Новый Структура("КоличествоТоваров, СуммаТоваров, Валюта");
	
	ВставляемыеЗначения.КоличествоТоваров = Формат(КоличествоТоваров, "ЧН=0");
	ВставляемыеЗначения.СуммаТоваров      = Формат(СуммаТоваров, "ЧЦ=15; ЧДЦ=2; ЧН=0,00");
	ВставляемыеЗначения.Валюта            = Валюта;
	
	ИнформационнаяНадпись = СтроковыеФункцииКлиентСервер.ВставитьПараметрыВСтроку(ИнформационнаяНадпись, ВставляемыеЗначения);
	
КонецПроцедуры

// Процедура удаляет строки из таблицы остатков на формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ОчиститьТаблицуОстатков(Форма) Экспорт
	
	Если ЭтоФормаЧекаККМ(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ОстаткиТоваров = Форма.ОстаткиТоваров.ПолучитьЭлементы();
	ОстаткиТоваров.Очистить();
	
КонецПроцедуры

// Проверяет, есть ли в корзине товары продаваемые совместно.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 Объект - ОбработкаОбъект, ДокументОбъект - обработка подбора товаров, документ.
//
// Возвращаемое значение:
//	 Булево - есть ли в корзине товары продаваемые совместно.
//
Функция ЕстьТоварыПродаваемыеСовместно(Форма, Объект) Экспорт
	
	ЭтоФормаЧекаККМ = ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ЭтоФормаПомощникаПродаж(Форма);
	
	Если ЭтоФормаЧекаККМ Или ЭтоФормаПомощникаПродаж Тогда
		Возврат Объект.Товары.Итог("ИндексСовместноПродаваемыеТовары") > 0;
	Иначе
		Возврат Объект.Корзина.Итог("ИндексСовместноПродаваемыеТовары") > 0;
	КонецЕсли;
	
КонецФункции

// Устанавливает видимость команды перехода к списку совместно продаваемых товаров.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 Объект - ОбработкаОбъект, ДокументОбъект - обработка подбора или документ.
//
Процедура УстановитьВидимостьКомандыПодбораНоменклатурыПродаваемойСовместно(Форма, Объект) Экспорт
	
	Форма.Элементы.СПодобраннойНоменклатуройСовместноПродается.Видимость = ЕстьТоварыПродаваемыеСовместно(Форма, Объект);
	
КонецПроцедуры

// Заполняет список выбора вариантов навигации на форме подбора товаров.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ЗаполнитьСписокВыбораВариантовНавигации(Форма) Экспорт
	
	Форма.Элементы.ВариантНавигации.СписокВыбора.Очистить();
	
	СписокВыбораВариантов = Новый СписокЗначений;
	СписокВыбораВариантов.Добавить("ПоСвойствам", "виду и свойствам");
	СписокВыбораВариантов.Добавить("ПоИерархии", "иерархии");
	СписокВыбораВариантов.Добавить("ПоТоварамДругогоКачества", "товарам другого качества");
	
	Если ЕстьТоварыПродаваемыеСовместно(Форма, Форма.Объект) Тогда
		СписокВыбораВариантов.Добавить("Совместно", "совместным продажам");
	КонецЕсли;
	
	Для каждого ЭлементСписка Из СписокВыбораВариантов Цикл
		Форма.Элементы.ВариантНавигации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора товаров.
//
Процедура УстановитьЗаголовокФормыПодбора(Форма) Экспорт
	
	Документ = Форма.Параметры.Документ;
	
	Если Документ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Документ) Тогда
		Форма.Заголовок = Форма.Заголовок + ": " + Документ;
	Иначе
		ТекстДокумент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='%1 (новый)'"), Документ.Метаданные().Синоним);
		
		Форма.Заголовок = Форма.Заголовок + ": " + ТекстДокумент;
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок формы подбора, состоящий из заголовка формы и представления документа.
//
// Параметры:
//	 Заголовок - Строка - заголовок формы,
//	 Документ - ДокументСсылка - ссылка на документ, из которого открывается подбор.
//
// Возвращаемое значение:
//	 Строка - заголовок формы подбора.
//
Функция СформироватьЗаголовокФормыПодбора(Заголовок, Документ) Экспорт
	
	Если Документ = Неопределено Тогда
		Возврат Заголовок;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Документ) Тогда
		
		Заголовок = Заголовок + ": " + Документ;
		
	Иначе
		
		ТекстДокумент = НСтр("ru='%1 (новый)'");
		ТекстДокумент = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДокумент, Документ.Метаданные().Синоним);
		
		Заголовок = Заголовок + ": " + ТекстДокумент;
		
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

// Устанавливает значение параметра динамического списка, или отключает его использование в зависимости от признака.
//
// Параметры:
//	 Список - ДинамическийСписок - список,
//	 ИмяПараметра - Строка - имя параметра,
//	 Значение - Произвольный - значение параметра,
//	 Использование - Булево - признак использования параметра.
//
Процедура УстановитьПараметрДинамическогоСписка(Список, ИмяПараметра, Значение, Использование = Истина) Экспорт
	
	ЗначениеПараметра = Список.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра <> Неопределено Тогда
		Если Использование Тогда
			Список.Параметры.УстановитьЗначениеПараметра(ИмяПараметра, Значение);
		Иначе
			ЗначениеПараметра.Значение = Значение;
			ЗначениеПараметра.Использование = Ложь;
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
