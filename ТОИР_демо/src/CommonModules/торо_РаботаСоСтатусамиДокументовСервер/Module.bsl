////////////////////////////////////////////////////////////////////////////////
// торо_РаботаСоСтатусамиДокументовСервер: методы, для работы со статусами документов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Согласования
// Функция инициализирует реквизиты формы, используемые для согласования документов.
//
// Параметры:
//  ЭтаФорма - УправляемаяФорма - форма документа.
//  ВидДокумента - ПеречислениеСсылка.торо_ВидыДокументовСогласованияРемонтов - вид документа.
//  Регламентный - Булево - это документ регламентного мероприятия.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, ВидДокумента, Регламентный = Ложь) Экспорт
	
	Объект = ЭтаФорма.Объект;
	
	ЭтаФорма.мХранитьИсториюСогласованияВДокументах = Константы.торо_ХранитьИсториюСогласованияВДокументах.Получить();
	ЭтаФорма.мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента, Регламентный);
	
	Если ЭтаФорма.мИспользоватьСогласованиеДокументов Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			
			Объект.СпособСогласования = торо_РаботаСоСтатусамиДокументовСервер.УстановитьСпособСогласования(ВидДокумента, Объект.Организация, Объект.Подразделение);
			
			ЭтаФорма.СтатусДокументаРегистр = торо_Ремонты.ПолучитьНачальныйСтатус(Объект.СпособСогласования);
			Если ЭтаФорма.мХранитьИсториюСогласованияВДокументах Тогда
				Объект.СтатусДокумента = ЭтаФорма.СтатусДокументаРегистр;
			КонецЕсли;
			
			торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, ЭтаФорма.СтатусДокументаРегистр);

		Иначе
			
			ЭтаФорма.СтатусДокументаРегистр = торо_Согласования.ПолучитьТекущийСтатусСогласованияДокумента(Объект.Ссылка);
			ПрочитатьРегистрыСогласования(ЭтаФорма);
			
		КонецЕсли;
		
		ОбновитьДеревоСогласующих(ЭтаФорма);
	
	КонецЕсли;
	
	торо_РаботаССогласованиямиКлиентСервер.УстановитьВидимостьСогласованиеИУтверждение(ЭтаФорма.мИспользоватьСогласованиеДокументов, Объект, ЭтаФорма);
	
КонецПроцедуры

// Функция сохраняет необходимые данные о согласовании при записи документа.
//
// Параметры:
//  ЭтаФорма - УправляемаяФорма - форма документа.
//  ТекущийОбъект - ДокументОбъект - объект документа.
//
Процедура ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект) Экспорт
	
	Если ЭтаФорма.мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаССогласованиямиКлиентСервер.ЗаписатьДеревоСогласования(ЭтаФорма);
		Если ЭтаФорма.СтатусДокументаРегистр = торо_Ремонты.ПолучитьНачальныйСтатус(ТекущийОбъект.СпособСогласования) Тогда
			ЗаписатьРегистрыСогласования(ЭтаФорма, ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет необходимые действия при записи документа.
//
// Параметры:
//  Ссылка - ДокументСылка - ссылка на документ.
//  ВидДокумента - ПеречислениеСсылка.торо_ВидыДокументовСогласованияРемонтов - вид документа.
//  СпособСогласования - СправочникСсылка.торо_СпособыСогласованияДокументов - способ согласования.
//  ДополнительныеСвойства - Структура - дополнительные свойства.
//  Регламентный - Булево - это документ регламентного мероприятия.
//  Отказ - Булево - отказ от выполнения операции.
//
Процедура ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства, Регламентный = Ложь, Отказ)  Экспорт
	
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента, Регламентный);
	
	Если ДополнительныеСвойства.Свойство("СтатусДокумента") Тогда
		СтатусДокумента = ДополнительныеСвойства.СтатусДокумента;
	Иначе
		СтатусДокумента = торо_Согласования.ПолучитьТекущийСтатусСогласованияДокумента(Ссылка);
	КонецЕсли;
	
	Если мИспользоватьСогласованиеДокументов 
		И ЗначениеЗаполнено(СпособСогласования) 
		И СтатусДокумента = торо_Ремонты.ПолучитьНачальныйСтатус(СпособСогласования)
		Тогда
		торо_Согласования.ДобавитьСтатусыСогласованияПоДокументу(Ссылка, ДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет данные о согласовании в дополнительные свойства для проверки при проведении.
//
// Параметры:
//  ЭтаФорма - УправляемаяФорма - форма документа.
//  ТекущийОбъект - ДокументОбъект - объект документа.
//
Процедура ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект) Экспорт
	
	Если ЭтаФорма.мИспользоватьСогласованиеДокументов Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатусДокумента", ЭтаФорма.СтатусДокументаРегистр);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("Согласующие", ЭтаФорма.СогласующиеРегистр.Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку, что при данном статусе согласования документа разрешено проведение.
//
// Параметры:
//  Ссылка - ДокументСылка - ссылка на документ.
//  СпособСогласования - СправочникСсылка.торо_СпособыСогласованияДокументов - способ согласования.
//  ДополнительныеСвойства - Структура - дополнительные свойства.
//  Отказ - Булево - отказ от выполнения операции.
//
Процедура ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ) Экспорт
	
	Если ДополнительныеСвойства.Свойство("СтатусДокумента") Тогда
		СтатусДокументаРегистр = ДополнительныеСвойства.СтатусДокумента;
	Иначе
		СтатусДокументаРегистр = торо_Согласования.ПолучитьТекущийСтатусСогласованияДокумента(Ссылка);
	КонецЕсли;
	
	СтруктураДанных = торо_Ремонты.ПолучитьДанныеПоСтатусуДокумента(СпособСогласования, СтатусДокументаРегистр);
	ПроводитьДокумент = СтруктураДанных.ПроводитьДокумент;
	
	Если Не (ПроводитьДокумент = Истина) Тогда
		
		Если ЗначениеЗаполнено(СтатусДокументаРегистр) Тогда
			ШаблонСообщения = НСтр("ru = 'В статусе ""%1"" проведение документа невозможно!'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,СтатусДокументаРегистр);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не заполнен текущий статус документа. Проведение документа невозможно!'");
		КонецЕсли;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СтатусСообщения.Важное);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция обновляет реквизит ДеревоСогласования.
//
// Параметры:
//  ЭтаФорма - УправляемаяФорма - форма документа.
//  НовыйСпособСогласования - СправочникСсылка.торо_СпособыСогласованияДокументов - новый способ согласования.
// 
Процедура ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования = Ложь) Экспорт
	
	Объект = ЭтаФорма.Объект;
	
	Если НовыйСпособСогласования Тогда
		ЭтаФорма.СтатусДокументаРегистр = торо_Ремонты.ПолучитьНачальныйСтатус(Объект.СпособСогласования);
		Если ЭтаФорма.мХранитьИсториюСогласованияВДокументах Тогда
			Объект.СтатусДокумента = ЭтаФорма.СтатусДокументаРегистр;
		КонецЕсли;
	КонецЕсли;
	
	Дерево = ЭтаФорма.РеквизитФормыВЗначение("ДеревоСогласования");
	Дерево = торо_Ремонты.ПолучитьДеревоСогласования(Объект.СпособСогласования, ЭтаФорма.СтатусДокументаРегистр, ЭтаФорма.СогласующиеРегистр.Выгрузить());
	ЭтаФорма.ЗначениеВРеквизитФормы(Дерево,"ДеревоСогласования");
	
	торо_РаботаССогласованиямиКлиентСервер.УстановитьВидимостьСогласованиеИУтверждение(ЭтаФорма.мИспользоватьСогласованиеДокументов, Объект, ЭтаФорма);
		
КонецПроцедуры

// Функция устанавливает способ согласования для вида документов.
//
// Параметры:
//  ВидДокумента - ПеречислениеСсылка.торо_ВидыДокументовСогласованияРемонтов - вид документа.
//  Организация - СправочникСылка.Организации - организация документа.
//  ПодразделениеОрганизации - СправочникСсылка.СтруктураПредприятия - подразделение документа.
//
// Возвращаемое значение:
//  СправочникСсылка.торо_СпособыСогласованияДокументов - способ согласования по умолчанию.
//
Функция УстановитьСпособСогласования(ВидДокумента,Организация, ПодразделениеОрганизации)Экспорт		
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	торо_НастройкиСогласованияДокументовТОиР.ВидДокумента,
	|	торо_НастройкиСогласованияДокументовТОиР.Организация КАК Организация,
	|	торо_НастройкиСогласованияДокументовТОиР.Подразделение,
	|	торо_НастройкиСогласованияДокументовТОиР.СпособСогласования,
	|	ВЫБОР
	|		КОГДА торо_НастройкиСогласованияДокументовТОиР.ВидДокумента = &ВидДокумента
	|				И торо_НастройкиСогласованияДокументовТОиР.Организация = &Организация
	|				И торо_НастройкиСогласованияДокументовТОиР.Подразделение = &Подразделение
	|			ТОГДА 1
	|		КОГДА торо_НастройкиСогласованияДокументовТОиР.ВидДокумента = &ВидДокумента
	|				И торо_НастройкиСогласованияДокументовТОиР.Организация = &Организация
	|				И торо_НастройкиСогласованияДокументовТОиР.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА торо_НастройкиСогласованияДокументовТОиР.ВидДокумента = &ВидДокумента
	|				И торо_НастройкиСогласованияДокументовТОиР.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И торо_НастройкиСогласованияДокументовТОиР.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.торо_НастройкиСогласованияДокументовТОиР КАК торо_НастройкиСогласованияДокументовТОиР
	|ГДЕ
	|	торо_НастройкиСогласованияДокументовТОиР.ВидДокумента = &ВидДокумента
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет,
	|	Организация" ;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() И НЕ ВыборкаДетальныеЗаписи.Приоритет = 4 Тогда
		СпособСогласования = ВыборкаДетальныеЗаписи.СпособСогласования;
	Иначе

		СпособСогласования = Справочники.торо_СтатусыСогласованияДокументовРемонтныхРабот.ПустаяСсылка();
	
	КонецЕсли;
	
	Возврат СпособСогласования;
	
КонецФункции

// Функция устанавливает способ согласования для вида документов регламентных мероприятий.
//
// Параметры:
//  ВидДокумента - ПеречислениеСсылка.торо_ВидыДокументовСогласованияРемонтов - вид документа.
//  Организация - СправочникСылка.Организации - организация документа.
//  ПодразделениеОрганизации - СправочникСсылка.СтруктураПредприятия - подразделение документа.
//
// Возвращаемое значение:
//  СправочникСсылка.торо_СпособыСогласованияДокументов - способ согласования по умолчанию.
//
Функция УстановитьСпособСогласованияМероприятий(ВидДокумента,Организация, ПодразделениеОрганизации)Экспорт		
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ ПЕРВЫЕ 1
	              |	торо_НастройкиСогласованияМероприятий.ВидДокумента,
	              |	торо_НастройкиСогласованияМероприятий.Организация КАК Организация,
	              |	торо_НастройкиСогласованияМероприятий.ПодразделениеОрганизации,
	              |	торо_НастройкиСогласованияМероприятий.СпособСогласования,
	              |	ВЫБОР
	              |		КОГДА торо_НастройкиСогласованияМероприятий.ВидДокумента = &ВидДокумента
	              |				И торо_НастройкиСогласованияМероприятий.Организация = &Организация
	              |				И торо_НастройкиСогласованияМероприятий.ПодразделениеОрганизации = &Подразделение
	              |			ТОГДА 1
	              |		КОГДА торо_НастройкиСогласованияМероприятий.ВидДокумента = &ВидДокумента
	              |				И торо_НастройкиСогласованияМероприятий.Организация = &Организация
	              |				И торо_НастройкиСогласованияМероприятий.ПодразделениеОрганизации = НЕОПРЕДЕЛЕНО
	              |			ТОГДА 2
	              |		КОГДА торо_НастройкиСогласованияМероприятий.ВидДокумента = &ВидДокумента
	              |				И торо_НастройкиСогласованияМероприятий.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	              |				И торо_НастройкиСогласованияМероприятий.ПодразделениеОрганизации = НЕОПРЕДЕЛЕНО
	              |			ТОГДА 3
	              |		ИНАЧЕ 4
	              |	КОНЕЦ КАК Приоритет
	              |ИЗ
	              |	РегистрСведений.торо_НастройкиСогласованияМероприятий КАК торо_НастройкиСогласованияМероприятий
	              |ГДЕ
	              |	торо_НастройкиСогласованияМероприятий.ВидДокумента = &ВидДокумента
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Приоритет,
	              |	Организация" ;
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() И НЕ ВыборкаДетальныеЗаписи.Приоритет = 4 Тогда
		СпособСогласования = ВыборкаДетальныеЗаписи.СпособСогласования;
	Иначе
		СпособСогласования = Справочники.торо_СтатусыСогласованияДокументовРемонтныхРабот.ПустаяСсылка();
	КонецЕсли;
	
	Возврат СпособСогласования;
	
КонецФункции

// Очищает реквизиты согласования при копировании документа.
//
// Параметры:
//  ЭтотОбъект - ДокументОбъект - создаваемый документ.
//
Процедура ОчиститьСогласованиеПриКопировании(ЭтотОбъект) Экспорт
	
	ЭтотОбъект.СтатусДокумента    = Справочники.торо_СтатусыСогласованияДокументовРемонтныхРабот.ПустаяСсылка();
	ЭтотОбъект.СпособСогласования = Справочники.торо_СпособыСогласованияДокументов.ПустаяСсылка();
	ЭтотОбъект.ИсторияСтатусов.Очистить();
	ЭтотОбъект.Согласующие.Очистить();
	
КонецПроцедуры

// Процедура записывает данные в регистры торо_ТекущиеСогласующиеДокументов,
// торо_ИсторияСтатусовДокументов, торо_ТекущиеСтатусыДокументов.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа.
//  ТекущийОбъект - ДокументОбъект - документ.
//
Процедура ЗаписатьРегистрыСогласования(Форма, ТекущийОбъект = Неопределено) Экспорт
	
	Если ТекущийОбъект <> Неопределено Тогда
		Объект = ТекущийОбъект;
	Иначе
		Объект = Форма.Объект;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	// Запись таблицы Согласующие.
	Форма.СогласующиеРегистр.Очистить();
	
	МассивСогласованного = Новый Массив;			
	ЗаполнитьМассивИзДерева(МассивСогласованного, Форма.ДеревоСогласования.ПолучитьЭлементы());
	
	Для Каждого ЭлементМассива Из МассивСогласованного Цикл
		Если ЭлементМассива.Согласовано Тогда 
			ЗаполнитьЗначенияСвойств(Форма.СогласующиеРегистр.Добавить(), ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	НаборДляЗаписи = РегистрыСведений.торо_ТекущиеСогласующиеДокументов.СоздатьНаборЗаписей();
   НаборДляЗаписи.Отбор.Документ.Установить(Объект.Ссылка);
	Для каждого Строка из Форма.СогласующиеРегистр Цикл
		НоваяСтрока = НаборДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Документ = Объект.Ссылка;
	КонецЦикла;
	НаборДляЗаписи.Записать(Истина);
	
	// Запись таблицы ИсторияСтатусов.
	НаборДляЗаписи = РегистрыСведений.торо_ИсторияСтатусовДокументов.СоздатьНаборЗаписей();
   НаборДляЗаписи.Отбор.Документ.Установить(Объект.Ссылка);
	Для каждого Строка из Форма.ИсторияСтатусовРегистр Цикл
		НоваяСтрока = НаборДляЗаписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.Документ = Объект.Ссылка;
	КонецЦикла;
	НаборДляЗаписи.Записать(Истина);

	// Запись текущего статуса документа.
	МенеджерЗаписи = РегистрыСведений.торо_ТекущиеСтатусыДокументов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Документ = Объект.Ссылка;
	МенеджерЗаписи.СтатусДокумента = Форма.СтатусДокументаРегистр;
	МенеджерЗаписи.Записать(Истина);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Процедура читает данные из регистра торо_ТекущиеСогласующиеДокументов,
// торо_ИсторияСтатусовДокументов.
//
// Параметры:
//  Форма - УправляемаяФорма - форма документа.
//
Процедура ПрочитатьРегистрыСогласования(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	НаборЗаписей = Форма.РеквизитФормыВЗначение("ИсторияСтатусовРегистр");
	НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	Форма.ЗначениеВреквизитФормы(НаборЗаписей, "ИсторияСтатусовРегистр");
	
	НаборЗаписей = Форма.РеквизитФормыВЗначение("СогласующиеРегистр");
	НаборЗаписей.Отбор.Документ.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	Форма.ЗначениеВреквизитФормы(НаборЗаписей, "СогласующиеРегистр");
		
КонецПроцедуры

#КонецОбласти

#Область СтатусыНеСогласования
// Процедура - Установить статус документа.
// Процедура предназначена для установки статуса документа. 
//
// Параметры:
//  Ссылка	-	ДокументСсылка.торо_ВыявленныеДефекты,
//				ДокументСсылка.торо_ВнешнееОснованиеДляРабот,
//				ДокументСсылка.торо_ЗаявкаНаРемонт, 
//				ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//				ДокументСсылка.торо_НарядНаРегламентноеМероприятие - Ссылка на документ для которого требуется установить статус.
//  Регистратор	-	ДокументСсылка.торо_АктОВыполненииЭтапаРабот,
//					ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия,
//					ДокументСсылка.торо_ЗаявкаНаРемонт, 
//					ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//					ДокументСсылка.тоо_ЗакрытиеЗаявокИРемонтов - Ссылка на документ для которого требуется установить статус.
//  Движения - РегистрСведенийНаборЗаписей.торо_СтатусыДокументовВыявленныхДефектов 
//							- Движения для записи статуса в регистр.
//  Статус	 - ПеречислениеСсылка.торо_СтатусыДокументов - Статус устанавливаемый для документа.
//  СтатусУстановлен - Булево - Означает что текущий статус является наибольшим на момент проведения.
Процедура УстановитьСтатусДокумента(Ссылка, Регистратор, Движения, Статус, СтатусУстановлен = Истина) Экспорт
	
	ИмяРегистра = ПолучитьИмяРегистраПоСсылке(Ссылка);
	
	Движение = Вычислить("Движения." + ИмяРегистра + ".Добавить()");
		
	Движение.Период 					= Регистратор.Дата;
	Движение.Документ 					= Ссылка;
	Движение.СтатусДокумента 			= Статус;
	Движение.СтатусУстановлен			= СтатусУстановлен;
	
КонецПроцедуры

// Изменить статусы документов оснований.
// Процедура предназначена для изменения статусов документов оснований проводимого документа.
//
// Параметры:
//  Регистратор - 	ДокументСсылка.торо_ЗаявкаНаРемонт, 
//							ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//							ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия,
//							ДокументСсылка.торо_АктОВыполненииЭтапаРабот,
//							ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов - Ссылка на документ меняющий статус своих документов оснований.
Процедура ИзменитьСтатусыДокументовОснований(Регистратор) Экспорт
	
	ДокументыОснования = Новый ТаблицаЗначений;
	
	МассивТиповОснований = Новый Массив;
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие"));
	
	ДокументыОснования.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(МассивТиповОснований));
	
	ПолучитьДокументыОснования(Регистратор, ДокументыОснования);
	
	СтруктураДокОснований = Новый Структура;
	Для каждого Стр Из ДокументыОснования Цикл
		
		СтруктураДокОснований.Вставить("Атрибут" + Строка(ДокументыОснования.Индекс(Стр)), Стр.ДокументОснование);
		
	КонецЦикла;
	
	ТаблицаУстанавливаемыхСтатусов = ПолучитьТаблицуУстанавливаемыхСтатусовПоСсылке(Регистратор, СтруктураДокОснований);
	ТаблицаПорядкаСтатусов = торо_РаботаСоСтатусамиДокументовПовтИсп.ПолучитьТаблицуПорядкаСтатусовДокументов(СтруктураДокОснований);
	
	ИменаИспользующихсяРегистров = ПолучитьМассивИменИспользующихсяРегистров(Регистратор, ДокументыОснования);
	
	Если ИменаИспользующихсяРегистров.Количество() Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	ДокументыОснования.ДокументОснование
		|ПОМЕСТИТЬ ДокументыОснования
		|ИЗ
		|	&ДокументыОснования КАК ДокументыОснования
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументОснование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаУстанавливаемыхСтатусов.ТипДокумента,
		|	ТаблицаУстанавливаемыхСтатусов.УстанавливаемыйСтатус,
		|	ТаблицаУстанавливаемыхСтатусов.Порядок
		|ПОМЕСТИТЬ ТаблицаУстанавливаемыхСтатусов
		|ИЗ
		|	&ТаблицаУстанавливаемыхСтатусов КАК ТаблицаУстанавливаемыхСтатусов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПорядкаСтатусов.ТипДокумента,
		|	ТаблицаПорядкаСтатусов.Статус,
		|	ТаблицаПорядкаСтатусов.Порядок
		|ПОМЕСТИТЬ ТаблицаПорядкаСтатусов
		|ИЗ
		|	&ТаблицаПорядкаСтатусов КАК ТаблицаПорядкаСтатусов
		|ИНДЕКСИРОВАТЬ ПО
		|	Статус,
		|	ТипДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|%ОбъединениеРегистровИОснований%
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыОснованияСРегистрами.Документ,
		|	МАКСИМУМ(ТаблицаПорядкаСтатусов.Порядок) КАК Порядок
		|ПОМЕСТИТЬ ИмеющиесяСтатусыИПриоритеты
		|ИЗ
		|	ДокументыОснованияСРегистрами КАК ДокументыОснованияСРегистрами
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПорядкаСтатусов КАК ТаблицаПорядкаСтатусов
		|		ПО ДокументыОснованияСРегистрами.СтатусДокумента = ТаблицаПорядкаСтатусов.Статус
		|			И ТИПЗНАЧЕНИЯ(ДокументыОснованияСРегистрами.Документ) = ТИПЗНАЧЕНИЯ(ТаблицаПорядкаСтатусов.ТипДокумента)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументыОснованияСРегистрами.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИмеющиесяСтатусыИПриоритеты.Документ,
		|	ТаблицаУстанавливаемыхСтатусов.УстанавливаемыйСтатус,
		|	ИСТИНА КАК СтатусУстановлен
		|ИЗ
		|	ИмеющиесяСтатусыИПриоритеты КАК ИмеющиесяСтатусыИПриоритеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУстанавливаемыхСтатусов КАК ТаблицаУстанавливаемыхСтатусов
		|		ПО ТИПЗНАЧЕНИЯ(ИмеющиесяСтатусыИПриоритеты.Документ) = ТИПЗНАЧЕНИЯ(ТаблицаУстанавливаемыхСтатусов.ТипДокумента)
		|			И ИмеющиесяСтатусыИПриоритеты.Порядок < ТаблицаУстанавливаемыхСтатусов.Порядок
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИмеющиесяСтатусыИПриоритеты.Документ,
		|	ТаблицаУстанавливаемыхСтатусов.УстанавливаемыйСтатус,
		|	ЛОЖЬ
		|ИЗ
		|	ИмеющиесяСтатусыИПриоритеты КАК ИмеющиесяСтатусыИПриоритеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаУстанавливаемыхСтатусов КАК ТаблицаУстанавливаемыхСтатусов
		|		ПО ТИПЗНАЧЕНИЯ(ИмеющиесяСтатусыИПриоритеты.Документ) = ТИПЗНАЧЕНИЯ(ТаблицаУстанавливаемыхСтатусов.ТипДокумента)
		|			И ИмеющиесяСтатусыИПриоритеты.Порядок >= ТаблицаУстанавливаемыхСтатусов.Порядок";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОбъединениеРегистровИОснований%", 
		ОбъединениеРегистровИОснований(ИменаИспользующихсяРегистров));
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТаблицаПорядкаСтатусов", 		ТаблицаПорядкаСтатусов);
		Запрос.УстановитьПараметр("ТаблицаУстанавливаемыхСтатусов", ТаблицаУстанавливаемыхСтатусов);
		Запрос.УстановитьПараметр("ДокументыОснования",				ДокументыОснования);
		Запрос.УстановитьПараметр("Регистратор", 					Регистратор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Движения = Регистратор.ПолучитьОбъект().Движения;
		
		Пока Выборка.Следующий() Цикл
			УстановитьСтатусДокумента(Выборка.Документ, Регистратор, Движения, Выборка.УстанавливаемыйСтатус, Выборка.СтатусУстановлен);
		КонецЦикла;
		
		ЗаписатьДвиженияРегистратора(Движения, ИменаИспользующихсяРегистров);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Добавить статус в заголовок формы
//
// Параметры:
//  Заголовок - Строка - Заголовок формы.
//  Форма - УправляемаяФорма - Форма которой в заголовок следует добавить статус документа.
//
// Возвращаемое значение:
//  Строка - заголовок формы.
Функция ДобавитьСтатусВЗаголовокФормы(Заголовок, Форма) Экспорт
	
	Ссылка = Форма.Объект.Ссылка;
		
	ТекущийСтатусДокумента = ПолучитьТекущийСтатусДокумента(Ссылка);
	
	Если ТекущийСтатусДокумента <> Неопределено Тогда
		Возврат Заголовок + " [" + Строка(ТекущийСтатусДокумента) + "]";
	Иначе
		Возврат Заголовок;
	КонецЕсли;
			
КонецФункции

// Процедура - Отмена проведения.
//	Необходимо вызывать при обработке удаления проведения для изменения реквизита СтатусУстановлен других записей,
//	что позволит определить текущий статус документа без лишних трудностей.
//
// Параметры:
//  Регистратор			 - 	ДокументСсылка.торо_ЗаявкаНаРемонт, 
//							ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//							ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия,
//							ДокументСсылка.торо_АктОВыполненииЭтапаРабот,
//							ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов - Ссылка на документ удаляющий свои движения. 
Процедура ОтменаПроведения(Регистратор) Экспорт
	
	// ФСВ
	ДокументыОснования = Новый ТаблицаЗначений;
	
	МассивТиповОснований = Новый Массив;
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот"));
	МассивТиповОснований.Добавить(Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие"));
	
	ДокументыОснования.Колонки.Добавить("ДокументОснование", Новый ОписаниеТипов(МассивТиповОснований));
	
	ПолучитьДокументыОснования(Регистратор, ДокументыОснования);
	
	СтруктураДокОснований = Новый Структура;
	Для каждого Стр Из ДокументыОснования Цикл
		
		СтруктураДокОснований.Вставить("Атрибут" + Строка(ДокументыОснования.Индекс(Стр)), Стр.ДокументОснование);
		
	КонецЦикла;
	// ФСВ
	
	МассивИменИспользующихсяРегистров = ПолучитьМассивИменИспользующихсяРегистров(Регистратор, ДокументыОснования);
	
	Если МассивИменИспользующихсяРегистров.Количество() Тогда
	ТекстЗапроса = "";
		
	// Формируем текст запроса для получения всех записей регистратора по регистрам со статусами.
	ДобавитьОбъединитьВсе = Ложь;
	Для Каждого ИмяРегистра Из МассивИменИспользующихсяРегистров Цикл
		ТекстЗапроса = ТекстЗапроса 
		+ ПолучитьТекстЗапросаСрезаПоследнихПоРегистру(ИмяРегистра, Ложь,,, Истина, 
		?(ДобавитьОбъединитьВсе, "", "ЗаписиПоРегистратору")) + Символы.ПС;
		ДобавитьОбъединитьВсе = Истина;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса 
	+ ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// Формируем текст запроса для получения записей по всем документам статусы которых поменял регистратор.
	ВВиртТабл = Истина;
	Первый = Истина;
	Для Каждого ИмяРегистра Из МассивИменИспользующихсяРегистров Цикл
		ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапросаТаблицыДокументовДляУстановкиФлагаПриОтменеПроведения(ИмяРегистра, ?(ВВиртТабл, "ИмеющиесяДругиеЗаписи", ""), Первый);
		ВВиртТабл = Ложь;
		Первый = Ложь;
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПорядкаСтатусов.ТипДокумента,
	|	ТаблицаПорядкаСтатусов.Статус,
	|	ТаблицаПорядкаСтатусов.Порядок
	|ПОМЕСТИТЬ ТаблицаПорядкаСтатусов
	|ИЗ
	|	&ТаблицаПорядкаСтатусов КАК ТаблицаПорядкаСтатусов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИмеющиесяДругиеЗаписи.Регистратор,
	|	ИмеющиесяДругиеЗаписи.Период,
	|	ТаблицаПорядкаСтатусов.Статус,
	|	ТаблицаПорядкаСтатусов.Порядок,
	|	ИмеющиесяДругиеЗаписи.Документ
	|ПОМЕСТИТЬ ИмеющиесяДругиеЗаписиСПорядком
	|ИЗ
	|	ТаблицаПорядкаСтатусов КАК ТаблицаПорядкаСтатусов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмеющиесяДругиеЗаписи КАК ИмеющиесяДругиеЗаписи
	|		ПО (ТИПЗНАЧЕНИЯ(ТаблицаПорядкаСтатусов.ТипДокумента) = ТИПЗНАЧЕНИЯ(ИмеющиесяДругиеЗаписи.Документ))
	|			И ТаблицаПорядкаСтатусов.Статус = ИмеющиесяДругиеЗаписи.СтатусДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИмеющиесяДругиеЗаписиСПорядком.Документ,
	|	МАКСИМУМ(ИмеющиесяДругиеЗаписиСПорядком.Порядок) КАК Порядок
	|ПОМЕСТИТЬ ДокументСМаксимальнымНовымСтатусом
	|ИЗ
	|	ИмеющиесяДругиеЗаписиСПорядком КАК ИмеющиесяДругиеЗаписиСПорядком
	|
	|СГРУППИРОВАТЬ ПО
	|	ИмеющиесяДругиеЗаписиСПорядком.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументСМаксимальнымНовымСтатусом.Документ,
	|	ДокументСМаксимальнымНовымСтатусом.Порядок,
	|	ИмеющиесяДругиеЗаписиСПорядком.Период,
	|	ИмеющиесяДругиеЗаписиСПорядком.Регистратор
	|ПОМЕСТИТЬ МаксимальныеСтатусы
	|ИЗ
	|	ДокументСМаксимальнымНовымСтатусом КАК ДокументСМаксимальнымНовымСтатусом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИмеющиесяДругиеЗаписиСПорядком КАК ИмеющиесяДругиеЗаписиСПорядком
	|		ПО ДокументСМаксимальнымНовымСтатусом.Документ = ИмеющиесяДругиеЗаписиСПорядком.Документ
	|			И ДокументСМаксимальнымНовымСтатусом.Порядок = ИмеющиесяДругиеЗаписиСПорядком.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеСтатусы.Документ КАК Документ,
	|	МаксимальныеСтатусы.Регистратор КАК Регистратор
	|ИЗ
	|	МаксимальныеСтатусы КАК МаксимальныеСтатусы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МаксимальныеСтатусы.Документ КАК Документ,
	|			МИНИМУМ(МаксимальныеСтатусы.Период) КАК Период
	|		ИЗ
	|			МаксимальныеСтатусы КАК МаксимальныеСтатусы
	|		
	|		СГРУППИРОВАТЬ ПО
	|			МаксимальныеСтатусы.Документ) КАК ВложенныйЗапрос
	|		ПО МаксимальныеСтатусы.Документ = ВложенныйЗапрос.Документ
	|			И МаксимальныеСтатусы.Период = ВложенныйЗапрос.Период
	|ИТОГИ ПО
	|	Регистратор,
	|	Документ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.УстановитьПараметр("ТаблицаПорядкаСтатусов", торо_РаботаСоСтатусамиДокументовПовтИсп.ПолучитьТаблицуПорядкаСтатусовДокументов(СтруктураДокОснований));
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистратор.Следующий() Цикл
		ДокументОбъект = ВыборкаРегистратор.Регистратор.ПолучитьОбъект();
		ВыборкаДокумент = ВыборкаРегистратор.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Движения = ДокументОбъект.Движения;
		
		МассивИменИспользующихсяРегистров = ПолучитьМассивИменИспользующихсяРегистров(ВыборкаРегистратор.Регистратор, ДокументыОснования);
		
		Для Каждого ИмяРегистра Из МассивИменИспользующихсяРегистров Цикл
			Выполнить("ДокументОбъект.Движения." + ИмяРегистра + ".Записывать = Истина");
			Выполнить("ДокументОбъект.Движения." + ИмяРегистра + ".Прочитать()");
		КонецЦикла;
		
		Пока ВыборкаДокумент.Следующий() Цикл
			ИмяРегистра = ПолучитьИмяРегистраПоСсылке(ВыборкаДокумент.Документ);
			
			Для Каждого Движение Из Вычислить("Движения." + ИмяРегистра) Цикл
				Если Движение.Документ = ВыборкаДокумент.Документ Тогда
					Движение.СтатусУстановлен = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ИмяРегистра Из МассивИменИспользующихсяРегистров Цикл
			Выполнить("ДокументОбъект.Движения." + ИмяРегистра + ".Записать()");
		КонецЦикла;
	КонецЦикла;
КонецЕсли;
	
КонецПроцедуры

// Функция - Получить текущий статус документа
//
// Параметры:
//  Ссылка	 -	ДокументСсылка.торо_ВыявленныеДефекты,
//				ДокументСсылка.торо_ВнешнееОснованиеДляРабот,
//				ДокументСсылка.торо_ЗаявкаНаРемонт, 
//				ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//				ДокументСсылка.торо_НарядНаРегламентноеМероприятие - Ссылка на документ для которого требуется получить статус.
// Возвращаемое значение:
//  ПеречислениеСсылка.торо_СтатусыДокументов, Неопределено - Текущий статус документа, 
//      либо Неопределено если получить не удалось.
Функция ПолучитьТекущийСтатусДокумента(Ссылка) Экспорт
	
	ИмяРегистра = ПолучитьИмяРегистраПоСсылке(Ссылка);
	
	Если ИмяРегистра = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ТекстЗапроса = ПолучитьТекстЗапросаСрезаПоследнихПоРегистру(ИмяРегистра,,,,,,Ложь); 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СтатусДокумента;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция - Получить имя регистра по ссылке. Сделана экспортной для использования при обновлении информационной базы.
//
// Параметры:
//  Ссылка	 - ДокументСсылка.торо_ВыявленныеДефекты,
//				ДокументСсылка.торо_ВнешнееОснованиеДляРабот,
//				ДокументСсылка.торо_ЗаявкаНаРемонт, 
//				ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот,
//				ДокументСсылка.торо_НарядНаРегламентноеМероприятие - Ссылка на документ по которой требуется получить
//																	имя регистра для изменения статуса документа.
// Возвращаемое значение:
//  Строка - Имя регистра.
Функция ПолучитьИмяРегистраПоСсылке(Ссылка) Экспорт
	
	ИмяРегистра = Неопределено;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ИмяРегистра = "торо_СтатусыДокументовВыявленныхДефектов";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ИмяРегистра = "торо_СтатусыДокументовЗаявок";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ИмяРегистра = "торо_СтатусыДокументовВнешнихОснований";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ИмяРегистра = "торо_СтатусыДокументовНарядовНаРемонтныеРаботы";
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ИмяРегистра = "торо_СтатусыДокументовНарядовНаМероприятия";
	КонецЕсли;
	
	Возврат ИмяРегистра;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьМассивИменИспользующихсяРегистров(Регистратор, ДокументыОснования)
	
	МассивИменРегистров = Новый Массив;
	
	Для каждого Стр Из ДокументыОснования Цикл
		
		Если ТипЗнч(Стр.ДокументОснование) = ТИП("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			МассивИменРегистров.Добавить("торо_СтатусыДокументовВыявленныхДефектов");
		ИначеЕсли ТипЗнч(Стр.ДокументОснование) = ТИП("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			МассивИменРегистров.Добавить("торо_СтатусыДокументовВнешнихОснований");
		ИначеЕсли ТипЗнч(Стр.ДокументОснование) = ТИП("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			МассивИменРегистров.Добавить("торо_СтатусыДокументовЗаявок");
		ИначеЕсли ТипЗнч(Стр.ДокументОснование) = ТИП("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
			МассивИменРегистров.Добавить("торо_СтатусыДокументовНарядовНаРемонтныеРаботы");
		ИначеЕсли ТипЗнч(Стр.ДокументОснование) = ТИП("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			МассивИменРегистров.Добавить("торо_СтатусыДокументовНарядовНаМероприятия");
		КонецЕсли;
		
	КонецЦикла;
	
	МассивИспользующихсяРегистров = Новый Массив;
	
	Для Каждого Регистр Из Регистратор.Метаданные().Движения Цикл
		Если МассивИменРегистров.Найти(Регистр.Имя) <> Неопределено Тогда
			МассивИспользующихсяРегистров.Добавить(Регистр.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИспользующихсяРегистров;
	
КонецФункции

Процедура ЗаписатьДвиженияРегистратора(Движения, ИменаИспользующихсяРегистров)
	
	Для Каждого ИмяРегистра Из ИменаИспользующихсяРегистров Цикл
		Выполнить("Движения." + ИмяРегистра + ".Записать()");
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДокументыОснования(Регистратор, ДокументыОснования)
	
	ТипДокумента = ТипЗнч(Регистратор);
	
	Если ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_АктОВыполненииЭтапаРаботДокументыОснования.ДокументОснование
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_АктОВыполненииЭтапаРаботДокументыОснования
		|ГДЕ
		|	торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка = &Регистратор";
		
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			НС = ДокументыОснования.Добавить();
			НС.ДокументОснование = ВыборкаДетальныеЗаписи.ДокументОснование;
			ПолучитьДокументыОснования(ВыборкаДетальныеЗаписи.ДокументОснование, ДокументыОснования);
			
		КонецЦикла;
		
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")
		Или ТипДокумента = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
		Или ТипДокумента = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") 
		ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_ВыявленныеДефекты") 
		Тогда
		
		Для Каждого Строка Из Регистратор.ДокументыОснования Цикл
			НС = ДокументыОснования.Добавить();
			НС.ДокументОснование = Строка.ДокументОснование;
			ПолучитьДокументыОснования(Строка.ДокументОснование, ДокументыОснования);
		КонецЦикла;
				
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
		ЗакрываемыеРемонты = Регистратор.ЗакрываемыеРемонты.Выгрузить(,"ID");
		ТекстЗапроса = "ВЫБРАТЬ
		               |	ЗакрываемыеРемонты.ID
		               |ПОМЕСТИТЬ ЗакрываемыеРемонты
		               |ИЗ
		               |	&ЗакрываемыеРемонты КАК ЗакрываемыеРемонты
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_Ремонты.Регистратор
		               |ПОМЕСТИТЬ Регистраторы
		               |ИЗ
		               |	ЗакрываемыеРемонты КАК ЗакрываемыеРемонты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		               |		ПО (торо_Ремонты.Регистратор ССЫЛКА Документ.торо_ВыявленныеДефекты
		               |				ИЛИ торо_Ремонты.Регистратор ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот
		               |				ИЛИ торо_Ремонты.Регистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт)
		               |			И ЗакрываемыеРемонты.ID = торо_Ремонты.ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Регистраторы.Регистратор КАК ДокументОснование
		               |ИЗ
		               |	Регистраторы КАК Регистраторы";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ЗакрываемыеРемонты", ЗакрываемыеРемонты);
			ДокументыОснования = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьТаблицуУстанавливаемыхСтатусовПоСсылке(Регистратор, ДокументыОснования)

	ТипДокументаСтрока = ПолучитьТипДокументаКакСтроку(Регистратор);
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")
		ИЛИ ТипЗнч(Регистратор) = ТИП("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ЗавершитьРемонтныеРаботы = Регистратор.ЗавершитьРемонтныеРаботы;
	Иначе
		ЗавершитьРемонтныеРаботы = Ложь;
	КонецЕсли;
	
	ТаблицаУстанавливаемыхСтатусов = торо_РаботаСоСтатусамиДокументовПовтИсп.ПолучитьТаблицуУстанавливаемыхСтатусов(ТипДокументаСтрока, ДокументыОснования, ЗавершитьРемонтныеРаботы);
	
	Возврат ТаблицаУстанавливаемыхСтатусов;
		
КонецФункции

Функция ПолучитьТипДокументаКакСтроку(Ссылка)
	
	ТипДокумента = ТипЗнч(Ссылка);
	Если ТипДокумента = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		Возврат "ДокументСсылка.торо_ЗаявкаНаРемонт";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		Возврат "ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		Возврат "ДокументСсылка.торо_АктОВыполненииЭтапаРабот";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		Возврат "ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов") Тогда
		Возврат "ДокументСсылка.торо_ЗакрытиеЗаявокИРемонтов";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		Возврат "ДокументСсылка.торо_ВыявленныеДефекты";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		Возврат "ДокументСсылка.торо_ВнешнееОснованиеДляРабот";
	КонецЕсли;
	
КонецФункции

Функция ДоступнаРоль(ИмяРоли) Экспорт
	
	Возврат РольДоступна(ИмяРоли);
	
КонецФункции

Процедура ЗаполнитьМассивИзДерева(Массив, ЭлементыДерева)
	
	Для каждого Элемент Из ЭлементыДерева Цикл
		Массив.Добавить(Элемент);
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЗаполнитьМассивИзДерева(Массив, Элемент.ПолучитьЭлементы())
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

#Область ФормированиеТекстовЗапросов

Функция ПолучитьТекстЗапросаТаблицыДокументовДляУстановкиФлагаПриОтменеПроведения(ИмяРегистра, ИмяВременнойТаблицы = "", Первый)
	
	Если первый Тогда
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ";
	Иначе
		ТекстЗапроса = "ВЫБРАТЬ";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|	торо_СтатусыДокументов.Период,
	|	торо_СтатусыДокументов.Регистратор,
	|	торо_СтатусыДокументов.Документ,
	|	торо_СтатусыДокументов.СтатусДокумента,
	|	торо_СтатусыДокументов.СтатусУстановлен
	|%ИспользоватьВременнуюТаблицу%
	|ИЗ
	|	ЗаписиПоРегистратору КАК ЗаписиПоРегистратору
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК торо_СтатусыДокументов
	|		ПО ((ВЫРАЗИТЬ(ЗаписиПоРегистратору.Документ КАК Документ." + ТипДокументаДляЗапросаПоИмениРегистра(ИмяРегистра) + ")) = торо_СтатусыДокументов.Документ)
	|			И торо_СтатусыДокументов.Регистратор <> &Регистратор"; 
	
	Если ИмяВременнойТаблицы = "" Тогда
		ТекстЗапроса = Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + СтрЗаменить(ТекстЗапроса, "%ИспользоватьВременнуюТаблицу%", "");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИспользоватьВременнуюТаблицу%", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли;
	
	Возврат ТекстЗапроса
	
КонецФункции
	
Функция ОбъединениеРегистровИОснований(ИменаИспользующихсяРегистров)
	
	ТекстЗапросаДокОсн = "";
	ТекстЗапроса = "";
	
	ВоВременнуюТаблицу = Истина;
	Для Каждого ИмяРегистра Из ИменаИспользующихсяРегистров Цикл
		
		ДобТекст = ПолучитьТекстВыраженияТаблицыДокОсн(ИмяРегистра); 
		
		Если ВоВременнуюТаблицу Тогда
			ДобавляемыйТекст = ПолучитьТекстЗапросаСрезаПоследнихПоРегистру(ИмяРегистра, Ложь, Истина, Истина,, "ДокументыОснованияСРегистрами");
			ВоВременнуюТаблицу = Ложь;
		Иначе
			ДобавляемыйТекст = ПолучитьТекстЗапросаСрезаПоследнихПоРегистру(ИмяРегистра, Ложь, Истина, Истина);
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДобавляемыйТекст;
		ТекстЗапросаДокОсн = ТекстЗапросаДокОсн + Символы.ПС + ДобТекст;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапросаДокОсн + ТекстЗапроса;
	
	Если НЕ ВоВременнуюТаблицу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИНДЕКСИРОВАТЬ ПО
		|	СтатусДокумента
		|;";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстВыраженияТаблицыДокОсн(ИмяРегистра)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДокументыОснования.ДокументОснование
	|ПОМЕСТИТЬ ДокументыОснования" + ИмяРегистра + "
	|	ИЗ ДокументыОснования КАК ДокументыОснования
	|ГДЕ
	|	ВЫРАЗИТЬ(ДокументыОснования.ДокументОснование КАК Документ." 
		+ ТипДокументаДляЗапросаПоИмениРегистра(ИмяРегистра) 
		+ ") ССЫЛКА Документ." + ТипДокументаДляЗапросаПоИмениРегистра(ИмяРегистра) + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаСрезаПоследнихПоРегистру(ИмяРегистра, 
													ПоДокументу = Истина,
													ОбъединитьСОснованиями = Ложь,
													КромеРегистратора = Ложь,
													ПоРегистратору = Ложь, 
													ИмяВременнойТаблицы = "",
													ОбъединитьВсе = Истина)
		
	Если ОбъединитьСОснованиями Тогда
		ВыбираемыеПоля = "	торо_СтатусыДокументовСрезПоследних.Документ,
		|	торо_СтатусыДокументовСрезПоследних.СтатусДокумента";
		
	Иначе
		ВыбираемыеПоля = "	торо_СтатусыДокументовСрезПоследних.Период,
		|	торо_СтатусыДокументовСрезПоследних.Регистратор,
		|	торо_СтатусыДокументовСрезПоследних.НомерСтроки,
		|	торо_СтатусыДокументовСрезПоследних.Активность,
		|	торо_СтатусыДокументовСрезПоследних.Документ,
		|	торо_СтатусыДокументовСрезПоследних.СтатусДокумента,
		|	торо_СтатусыДокументовСрезПоследних.СтатусУстановлен";
	КонецЕсли;

	ТекстЗапроса = "ВЫБРАТЬ " + ВыбираемыеПоля + 
	" %ИспользоватьВременнуюТаблицу%
	|ИЗ
	|	РегистрСведений." + ИмяРегистра + ".СрезПоследних(
	|			,
	|			СтатусУстановлен = ИСТИНА %Условие1% %Условие2% %Условие3%) КАК торо_СтатусыДокументовСрезПоследних";
	
	ЕстьПредыдущееУсловие = Ложь;
	
	Если ПоДокументу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие1%"," И Документ = &Документ ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие1%"," ");
	КонецЕсли;
	
	Если КромеРегистратора Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие2%"," И Регистратор <> &Регистратор ");
	ИначеЕсли ПоРегистратору Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие2%"," И Регистратор = &Регистратор ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие2%"," ");
	КонецЕсли;
	
	Если ОбъединитьСОснованиями Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие3%"," И Документ В
		|(ВЫБРАТЬ
		|	ДокументыОснования.ДокументОснование
		|ИЗ
		|	ДокументыОснования" + ИмяРегистра + " КАК ДокументыОснования) ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие3%"," ");
	КонецЕсли;
	
	Если ИмяВременнойТаблицы = "" Тогда
		Если ОбъединитьВсе Тогда
			ТекстЗапроса = Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС + СтрЗаменить(ТекстЗапроса, "%ИспользоватьВременнуюТаблицу%", "");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИспользоватьВременнуюТаблицу%", "");
		КонецЕсли;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ИспользоватьВременнуюТаблицу%", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
		
КонецФункции

Функция ТипДокументаДляЗапросаПоИмениРегистра(ИмяРегистра)
	
	Если ИмяРегистра = "торо_СтатусыДокументовВыявленныхДефектов" Тогда
		Возврат "торо_ВыявленныеДефекты";
	ИначеЕсли ИмяРегистра = "торо_СтатусыДокументовЗаявок" Тогда
		Возврат "торо_ЗаявкаНаРемонт";
	ИначеЕсли ИмяРегистра = "торо_СтатусыДокументовВнешнихОснований" Тогда
		Возврат "торо_ВнешнееОснованиеДляРабот";
	ИначеЕсли ИмяРегистра = "торо_СтатусыДокументовНарядовНаРемонтныеРаботы" Тогда
		Возврат "торо_НарядНаВыполнениеРемонтныхРабот";
	ИначеЕсли ИмяРегистра = "торо_СтатусыДокументовНарядовНаМероприятия" Тогда
		Возврат "торо_НарядНаРегламентноеМероприятие";
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#КонецОбласти