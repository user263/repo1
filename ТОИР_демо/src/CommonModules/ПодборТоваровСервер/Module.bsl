///////////////////////////////////////////////////////////////////////////////
// Модуль "ПодборТоваровСервер", содержит процедуры и функции необходимые для
// работы форм подбора товаров. Модуль содержит основные функции которые отвечают
// за установку и снятие отборов, переключение страниц номенклатуры/характеристик,
// функции работы с поиском.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РаботаСКорзиной

// Вызывается при изменениия данных в корзине подобранных товаров в формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ПриИзмененииКорзины(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	ПодборТоваровКлиентСервер.УстановитьТекстИнформационнойНадписи(Форма);
	
	Если (ЭтоФормаПодбора И Не Форма.РежимПодбораБезСуммовыхПараметров) Тогда
        
        Форма.ВариантНавигации = "ПоИерархии";
					
    КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеИнформацииОЦенеОстаткахТоваровИзФормПодборов

// Переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное
// хранилище.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	 Строка - Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыПараметровДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов        = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Если ПодчиненныеСтроки.Количество() = 1 Тогда
				
				СтрокаЗначенияОтбора = ПодчиненныеСтроки[0];
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

// Переносит данные установленных значений отборов из дерева отборов по
// свойствам вида номенклатуры в таблицу значений и помещает ее во временное хранилище.
//
// Параметры:
//		Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//		Строка - Адрес таблицы значений во временном хранилище.
//
Функция АдресТаблицыСопостовленияДереваОтборов(Форма) Экспорт
	
	УникальныйИдентификаторФормы = Форма.УникальныйИдентификатор;
	ДеревоЗначенийОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	АдресТаблицы = Неопределено;
	
	ТаблицаПараметров = Новый ТаблицаЗначений;
	
	ТаблицаПараметров.Колонки.Добавить("ИмяРеквизита");
	ТаблицаПараметров.Колонки.Добавить("ЗначениеОтбора");
	ТаблицаПараметров.Колонки.Добавить("ЭтоДопРеквизит");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалОт");
	ТаблицаПараметров.Колонки.Добавить("ИнтервалДо");
	ТаблицаПараметров.Колонки.Добавить("Интервал");
	
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	СтрокиДереваОтборов = ДеревоЗначенийОтборов.Строки;
	
	НайденныеСтроки = СтрокиДереваОтборов.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаДереваОтборов Из НайденныеСтроки Цикл
		
		Если СтрокаДереваОтборов.ФиксированноеЗначение Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			Если СтрокаДереваОтборов.ИнтервалОт <> Неопределено Тогда
				СтрокаТаблицы.Интервал = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка")
			Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
			
			СтрокаТаблицы = ТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДереваОтборов);
			
			СтрокаТаблицы.Интервал = Ложь;
			
		ИначеЕсли Не СтрокаДереваОтборов.ОтборДоступен Тогда
			
			ПодчиненныеСтроки = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора);
			
			Для Каждого СтрокаЗначенияОтбора Из ПодчиненныеСтроки Цикл
				
				СтрокаТаблицы = ТаблицаПараметров.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗначенияОтбора);
				
				СтрокаТаблицы.Интервал = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТаблицаПараметров.Количество() > 0 Тогда
		АдресТаблицы = ПоместитьВоВременноеХранилище(ТаблицаПараметров, УникальныйИдентификаторФормы);
	КонецЕсли;
	
	Возврат АдресТаблицы;
	
КонецФункции

#КонецОбласти

#Область НавигацияПоХарактеристикамВФормахПодборов

// Устанавливает текущей страницу со списком номенклатуры.
// Используется в формах подборов (в документ продажи, закупки, чек ККМ).
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ПерейтиКСпискуНоменклатуры(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если ЭтоФормаПодбора Тогда
		
		Если Форма.НавигацияПоХарактеристикам Тогда
			
			ИмяСтраницыНоменклатуры = ПодборТоваровКлиентСервер.ИмяСтраницыНоменклатурыПоВариантуПоиска(Форма);
			Элементы.СтраницыСписков.ТекущаяСтраница = Элементы[ИмяСтраницыНоменклатуры];
			
			Форма.НавигацияПоХарактеристикам = Ложь;
			Элементы.СегментНоменклатуры.ТолькоПросмотр = Ложь;
			
			ПриПереходеКСпискуНоменклатуры(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает текущей страницу со списком характеристик.
// Используется при нестандартном сценарии - когда добавляется новый товар,
// для которого ведется учет характеристик, то выполняется переключение
// на страницу со списком характеристик.
//
// Используется в формах подборов (в документах продажи, закупки, Чек ККМ).
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ПерейтиКСпискуХарактеристикНовойНоменклатуры(Форма) Экспорт
	
	ПриПереходеКСпискуХарактеристик(Форма, Форма.НоваяНоменклатура)
	
КонецПроцедуры

// Устанавливает текущий элемент на странице списка номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ПриПереходеКСпискуНоменклатуры(Форма)
	
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	Если ЗначениеЗаполнено(Форма.СтрокаПоискаНоменклатура) Тогда
		Форма.ТекущийЭлемент = Форма.Элементы.СтрокаПоискаНоменклатура;
	Иначе
		Форма.ТекущийЭлемент = Форма.Элементы[ИмяСпискаНоменклатуры];
	КонецЕсли;
	
	Если Не ЭтоФормаЧекаККМ Тогда
		Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьНоменклатуру;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при переключении на страницу со списком характеристик.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 ПараметрыНоменклатуры - Структура - параметры номенклатуры, для
//	    которой нужно переключиться на страницу со списком характеристик.
//
Процедура ПриПереходеКСпискуХарактеристик(Форма, ПараметрыНоменклатуры)
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	
	// Включить признак навигации по характеристикам.
	Форма.НавигацияПоХарактеристикам = Истина;
	
	// Установить заголовок колонки таблицы характеристик.
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Характеристики: ""%1""'"), ПараметрыНоменклатуры.Номенклатура);
	
	ИмяЭлемента = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма) + "Характеристика";
	
	Форма.Элементы[ИмяЭлемента].Заголовок = ТекстЗаголовка;
	
	// Установить параметры списка характеристик.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "Номенклатура", ПараметрыНоменклатуры.Номенклатура);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ЕдиницаИзмерения", 
		ПараметрыНоменклатуры.ЕдиницаИзмерения);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВладелецХарактеристик", 
		ПараметрыНоменклатуры.ВладелецХарактеристик);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ТипНоменклатуры", ПараметрыНоменклатуры.ТипНоменклатуры);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "ВидНоменклатуры", ПараметрыНоменклатуры.ВидНоменклатуры);
	
	Если Не ЭтоФормаЧекаККМ И Не ЭтоФормаПодбораВДокументыЗакупки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Форма.СписокХарактеристики, "ЦеноваяГруппа", ПараметрыНоменклатуры.ЦеноваяГруппа);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "СегментНоменклатуры", 
		Форма.СегментНоменклатуры, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокХарактеристики, "НоменклатураСегмента", 
		ПараметрыНоменклатуры.Номенклатура, ЗначениеЗаполнено(Форма.СегментНоменклатуры));
	
	// Установить отбор списка характеристик по товарам продаваемым совместно.
	Если ЭтоФормаПодбораВДокументыПродажи Тогда
		
		МассивХарактеристик = Новый Массив;
		
		Для Каждого СтрокаТЧ Из Форма.ТаблицаНоменклатураПродаваемаяСовместно Цикл
			
			Если СтрокаТЧ.Номенклатура = ПараметрыНоменклатуры.Номенклатура Тогда
				МассивХарактеристик.Добавить(СтрокаТЧ.Характеристика);
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокХарактеристики, "Характеристика",
			МассивХарактеристик, ВидСравненияКомпоновкиДанных.ВСписке, ,МассивХарактеристик.Количество() > 0);
		
	КонецЕсли;
	
	Форма.Элементы.СтраницыСписков.ТекущаяСтраница = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяТекущейСтраницыПоВариантуПоиска(Форма)];
	Форма.ТекущийЭлемент = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)];
	Форма.Элементы.СегментНоменклатуры.ТолькоПросмотр = Истина;
	
	Если Не ЭтоФормаЧекаККМ Тогда
		Форма.Элементы.СтраницыСоздать.ТекущаяСтраница = Форма.Элементы.СтраницаСоздатьХарактеристику;
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентсике функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ДеревоОтборовОтборПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентсике функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура СписокКачестваПометкаПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	УстановитьОтборПоКачествуНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при изменении значения в дереве отбора по свойствам вида номенклатуры.
// Т.е. клиентские функции обрабатывают обработку значений на элементе формы (устанавливают
// значения флажков на строках, подчиненных строках, открывают форму установки интервала значений
// и т.п.), затем управление передается на сервер и сначала отключаются все установленные отборы
// по дереву свойств, затем включается отбор только по значениям строк с установленными флажками отбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура НоменклатураИсходногоКачестваПриИзменении(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьЭлементыСпискаЗначенийКачества(Форма);
	УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	УстановитьПометкуГрадацииКачества(Форма);
	УстановитьОтборПоКачествуНоменклатуры(Форма);
	
КонецПроцедуры

// Заполняет дерево отборов характеристик по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовХарактеристик(Форма) Экспорт
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборовХарактеристик(Форма, ДеревоОтборов);
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаИУдалениеОтборов

// Устанавливает отбор по владельцу характеристик.
// Используется в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоВладельцуХарактеристик(Форма) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.Список, "Владелец", Форма.ВладелецХарактеристик, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоВладельцуХарактеристик", Истина);
	
КонецПроцедуры


// Устанавливает отбор по владельцу характеристик. Используется
// в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреИсходногоКачества(Форма) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТоварыДругогоКачества.НоменклатураБрак
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	ТоварыДругогоКачества.Номенклатура = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Форма.НоменклатураИсходногоКачества);
	Таблица = Запрос.Выполнить().Выгрузить();
	
	ГруппаОтборПоТоварамИсходногоКачества = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		"ГруппаОтборПоТоварамИсходногоКачества",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	МассивТоваров = Таблица.ВыгрузитьКолонку("НоменклатураБрак");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ГруппаОтборПоТоварамИсходногоКачества, "Ссылка", МассивТоваров, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ГруппаОтборПоТоварамИсходногоКачества", Истина);
	
КонецПроцедуры

// Удаляет отбор по номенклатуре исходного качества.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоНоменклатуреИсходногоКачества(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		Форма.СписокНоменклатура,,"ГруппаОтборПоТоварамИсходногоКачества");
	
КонецПроцедуры

// Устанавливает отбор по владельцу характеристик. Используется
// в форме подбора справочника "Характеристики номенклатуры".
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоКачествуНоменклатуры(Форма) Экспорт
	
	МассивКачества = Новый Массив;
	
	Для Каждого ЭлементСписка Из Форма.СписокКачества Цикл
		Если ЭлементСписка.Пометка Тогда
			МассивКачества.Добавить(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивКачества.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.СписокНоменклатура, "Качество", МассивКачества, ВидСравненияКомпоновкиДанных.ВСписке);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по группе номенклатыр в списке номенклатуры.
// Если на форме используется вариант навигации отличный от навигации по иерархии,
// то отбор не устанавливается.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоИерархииНоменклатуры(Форма) Экспорт
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ВариантНавигации = "ПоИерархии" Тогда
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Неопределено Тогда
		Родитель = Справочники.Номенклатура.ПустаяСсылка();
	Иначе
		Родитель = Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Родитель", Родитель, 
		ВидСравненияКомпоновкиДанных.Равно, "Родитель", Истина);
	
КонецПроцедуры

// Добавляет отбор в указанную коллекцию области отбора.
//
// Параметры:
//	 ОбластьОтбора - ОтборКомпоновкиДанных - отбор динамического списка,
//	 ЛевоеЗначение - Строка - путь к данным поля отбора,
//	 ПравоеЗначение - Произвольный - значение отбора,
//	 ВидОтбора - ВидСравненияКомпоновкиДанных - вид сравнения,
//	 Представление - Строка - представление элемента отбора.
//
Процедура ДобавитьЭлементОтбора(ОбластьОтбора, ЛевоеЗначение, ПравоеЗначение, ВидОтбора, Представление = "") Экспорт
	
	ЭлементОтбора                   = ОбластьОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	ЭлементОтбора.ПравоеЗначение    = ПравоеЗначение;
	ЭлементОтбора.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ВидСравнения      = ВидОтбора;
	
	Если ЗначениеЗаполнено(Представление) Тогда
		ЭлементОтбора.Представление = Представление;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Вызывается из форм подборов при изменении флажка использования фильтров.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииИспользованияФильтров(Форма) Экспорт

	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма) Тогда
		
		УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
		
		Если Форма.ИспользоватьФильтры Тогда
			УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Если Форма.ИспользоватьФильтры Тогда
			
			Если Форма.ВариантНавигации = "ПоСвойствам" Тогда
				
				УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
				
			ИначеЕсли Форма.ВариантНавигации = "ПоИерархии" Тогда
				
				УстановитьОтборПоРодителюТекущейСтрокиНоменклатуры(Форма);
				УстановитьОтборПоИерархииНоменклатуры(Форма);
				
				
			ИначеЕсли Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
				
				УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
				УстановитьОтборПоКачествуНоменклатуры(Форма);
				
			КонецЕсли;
			
		Иначе
			
			УдалитьОтборПоИерархииНоменклатуры(Форма);
			УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
			
			Если ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
				Если Не Форма.ВыборТовараДругогоКачества Тогда
					УдалитьОтборПоКачествуНоменклатуры(Форма);
				КонецЕсли;
			КонецЕсли;
			
			УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
			
			Если Форма.ВариантНавигации = "Совместно" Тогда
				ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
					Форма.СписокНоменклатура,,"ПоНоменклатуреПродаваемойСовместно");
			КонецЕсли;
			
		КонецЕсли;
		
		ПерейтиКСпискуНоменклатуры(Форма);
		
	КонецЕсли;
	
	Если ЭтоФормаПодбора И Форма.ВариантНавигации = "ПоСвойствам" Тогда
		УстановитьТекстыЗапросовСписковФормыПодбора(Форма);
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении варианта навигации.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииВариантаНавигации(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	
	УстановитьВариантНавигацииИИспользоватьФильтрДоТДК(Форма);
	УстановитьСтраницуВариантаНавигации(Форма);
	УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
	УдалитьОтборПоКачествуНоменклатуры(Форма);
	
	Если Форма.ВариантНавигации = "ПоИерархии" Тогда
		
		УстановитьОтборПоИерархииНоменклатуры(Форма);
		
	ИначеЕсли Форма.ВариантНавигации = "ПоСвойствам" Тогда
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
		
	ИначеЕсли Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
		
		УстановитьОтборПоНоменклатуреИсходногоКачества(Форма);
		УстановитьОтборПоКачествуНоменклатуры(Форма);
		
	КонецЕсли;
	
	Если ЭтоФормаПодбора Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
		УстановитьТекстыЗапросовСписковФормыПодбора(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из форм подбороа при изменении вида номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора, форма списка, форма выбора.
//
Процедура ПриИзмененииВидаНоменклатуры(Форма) Экспорт
	
	Если Форма.ВидНоменклатуры = Форма.ВидНоменклатурыДоИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Форма.ВидНоменклатурыДоИзменения = Форма.ВидНоменклатуры;
	
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	
	Если Не ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
		
		ОчиститьДеревоОтборов(Форма);
		УстановитьОтборПоВидуНоменклатуры(Форма);
		
	Иначе
		
		Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
			
			СохранитьПараметрыДереваОтбора(Форма, Ложь);
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
			
		Иначе
			
			ЗаполнитьДеревоОтборовНоменклатуры(Форма);
			
		КонецЕсли;
		
		УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
		
	КонецЕсли;
	
	Если ЭтоФормаПодбора Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
		УстановитьТекстыЗапросовСписковФормыПодбора(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет строку в таблицу параметров отбора, используется при работе варианта навигации
// по товарам "альтернативного" качества.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора, форма списка, форма выбора.
//
Процедура УстановитьПараметрыДереваОтбораКачествоНовый(Форма) Экспорт
	
	СтрокаТаблицыПараметровОтбора = Форма.ТаблицаПараметровОтбора.Добавить();
	
	СтрокаТаблицыПараметровОтбора.ИмяРеквизита = "Качество";
	СтрокаТаблицыПараметровОтбора.ЗначениеОтбора = Перечисления.ГрадацииКачества.Новый;
	СтрокаТаблицыПараметровОтбора.Представление = "Новый";
	СтрокаТаблицыПараметровОтбора.ФиксированноеЗначение = Ложь;
	СтрокаТаблицыПараметровОтбора.Отбор = Истина;
	
КонецПроцедуры

// Вызывается из форм подборов при изменении значения сегмента номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииУсловияЦеныПоставщика(Форма) Экспорт
	
	Если Не УсловиеЦеныПоставщикаИзменилось(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ПодборТоваровКлиентСервер.УстановитьОтборПоУсловиеЦеныПоставщика(Форма);
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦенПоставщика(Форма);
	
КонецПроцедуры

// Для сброса флажков для свойств номенклатуры в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура СброситьОтборыПоСвойствам(Форма) Экспорт
	
	Для Каждого ОтборПервыйУровень Из Форма.ДеревоОтборов.ПолучитьЭлементы() Цикл
		
		Если ОтборПервыйУровень.Отбор Тогда
			
			ОтборПервыйУровень.Отбор = Ложь;
			
			Для Каждого ОтборВторойУровень Из ОтборПервыйУровень.ПолучитьЭлементы() Цикл
				ОтборВторойУровень.Отбор = Ложь;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается при выполнени команды отображения товаров другого качества
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоНоменклатуреДругогоКачества(Форма) Экспорт
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	СтрокаТаблицыНоменклатуры = Форма.Элементы[ИмяСпискаНоменклатуры].ТекущаяСтрока;
	Если СтрокаТаблицыНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;

	УстановитьВариантНавигацииИИспользоватьФильтрДоТДК(Форма);
	
	Форма.ИспользоватьФильтры = Истина;
	Форма.ВариантНавигации = "ПоТоварамДругогоКачества";
	Форма.Элементы.ВариантНавигации.Доступность = Истина;
	Форма.НоменклатураИсходногоКачества = СтрокаТаблицыНоменклатуры.Ссылка;
	
	УстановитьСтраницуВариантаНавигации(Форма);
	УдалитьОтборПоИерархииНоменклатуры(Форма);
	УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма);
	УдалитьОтборПоНоменклатуреИсходногоКачества(Форма);
	НоменклатураИсходногоКачестваПриИзменении(Форма);
	ПерейтиКСпискуНоменклатуры(Форма);
	
КонецПроцедуры

// Вызывается из форм подборов при изменении значения сегмента номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииСегментаНоменклатуры(Форма) Экспорт
	
	Если Не СегментНоменклатурыИзменился(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборПоСегментуНоменклатуры(Форма);
	ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(Форма);
	
КонецПроцедуры

// Вызывается при выполнени команды отображения товаров с аналогичными свойствами
// в контекстном меню списка номенклатуры в формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ПриИзмененииОтображенияТоваровСоСхожимиСвойствами(Форма) Экспорт
	
	ТекущаяСтрока = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтфильтроватьПоАналогичнымСвойствам(Форма, ТекущаяСтрока.Ссылка);
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		ПерейтиКСпискуНоменклатуры(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыПоНаличиюПоЦенам

// Устанавливает отбор "Только в наличии" на список номенклатуры
// и характеристик в формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборТолькоВНаличии(Форма) Экспорт
	
	// Для списка номенклатуры.
	ГруппаОтбораТолькоВНаличииНоменклатура = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		"ГруппаТолькоВНаличии", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбораТолькоВНаличииНоменклатура,
		"ВНаличииОстаток", 0, ВидСравненияКомпоновкиДанных.Больше,,Форма.ТолькоВНаличии);
		
	// Для списка характеристик.
	ГруппаОтбораТолькоВНаличииХарактеристики = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
		"ГруппаТолькоВНаличии", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ГруппаОтбораТолькоВНаличииХарактеристики,
		"ВНаличииОстаток", 0, ВидСравненияКомпоновкиДанных.Больше,,Форма.ТолькоВНаличии);
	
	УстановитьАктивныйСписокНаФорме(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОтборыВспомогательные

// Возвращает массив свойств по которым устанавливается отбор при отображении
// списка товаров с аналогичными свойствами в формах подборов.
//
// Параметры:
//	 Номенклатура - СправочникСсылка.Номенклатура - номенклатура для которой формируется массив свойств.
//
// Возвращаемое значение:
//	 Массив - Массив свойств и значений свойств элемента номенклатуры по которым нужно
//	          будет отобрать товары.
//
Функция СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура) Экспорт
	
	ДополнительныеРеквизиты = Новый Массив;
	Свойства = Новый Массив;
	
	// Получить имена и значения реквизитов которые используются для отбора.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораНоменклатуры.ИмяРеквизита   КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораНоменклатуры.Свойство       КАК Свойство,
	|	РеквизитыБыстрогоОтбораНоменклатуры.ЭтоДопРеквизит КАК ЭтоДопРеквизит
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораНоменклатуры КАК РеквизитыБыстрогоОтбораНоменклатуры
	|ГДЕ
	|	РеквизитыБыстрогоОтбораНоменклатуры.Ссылка = &ВидНоменклатуры");
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Номенклатура.ВидНоменклатуры);
	
	КоличествоПолей = 0;
	
	ТекстЗапроса = "ВЫБРАТЬ";
	
	РеквизитыБыстрогоОтбораНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТЧ Из РеквизитыБыстрогоОтбораНоменклатуры Цикл
		
		Если СтрокаТЧ.ЭтоДопРеквизит Тогда
			ДополнительныеРеквизиты.Добавить(СтрокаТЧ.Свойство);
		Иначе
			
			КоличествоПолей = КоличествоПолей + 1;
			
			Если КоличествоПолей = 1 Тогда
				ТекстЗапроса = ТекстЗапроса + " " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			Иначе
				ТекстЗапроса = ТекстЗапроса + ", " + "Т." + СтрокаТЧ.ИмяРеквизита + " " + "КАК " + СтрокаТЧ.ИмяРеквизита;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоПолей > 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса +" " + "Из Справочник.Номенклатура КАК Т ГДЕ Т.Ссылка = &Номенклатура";
		
		Запрос = Новый Запрос(
		ТекстЗапроса +
		";
		|ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		Результат = Запрос.ВыполнитьПакет();
		
		Выборка = Результат[0].Выбрать(); // обход реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			Для Каждого Колонка Из Результат[0].Колонки Цикл
				
				НоваяСтрока = Новый Структура("ИмяРеквизита, Значение, Представление");
				
				НоваяСтрока.ИмяРеквизита = Колонка.Имя;
				НоваяСтрока.Значение     = Выборка[Колонка.Имя];
				
				Реквизит = Метаданные.Справочники.Номенклатура.Реквизиты.Найти(Колонка.Имя);
				
				НоваяСтрока.Представление = Реквизит.Синоним;
				
				Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение реквизита элемента номенклатуры
				
			КонецЦикла;
			
		КонецЦикла;
		
		Выборка = Результат[1].Выбрать(); // обход дополнительных реквизитов номенклатуры
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Представление = Строка(Выборка.Свойство);
			
			Свойства.Добавить(НоваяСтрока); // в выходной массив добавляется имя и значение доп.реквизита вида номенклатуры
			
		КонецЦикла;
		
	Иначе
		
		// В том случае, если реквизиты вида номенклатуры не включены в панель быстрого отбора,
		// то в выходной массив добавляются только значения доп.реквизитов вида номенклатуры.
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	НоменклатураДополнительныеРеквизиты.Свойство        КАК Свойство,
		|	НоменклатураДополнительныеРеквизиты.Значение        КАК Значение
		|ИЗ
		|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
		|ГДЕ
		|	НоменклатураДополнительныеРеквизиты.Ссылка = &Номенклатура
		|	И НоменклатураДополнительныеРеквизиты.Свойство В (&ДополнительныеРеквизиты)");
		
		Запрос.УстановитьПараметр("Номенклатура",            Номенклатура);
		Запрос.УстановитьПараметр("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Новый Структура("Свойство, Значение, Представление");
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			НоваяСтрока.Представление = Строка(Выборка.Свойство);
			
			Свойства.Добавить(НоваяСтрока);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

// Устанавливает отбор на список номенклатуры по аналогичным свойствам вида номенклатуры переданного товара.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора,
//	 Номенклатура - СправочникСсылка.Номенклатура - товар по значениям 
//	      свойств которого необходимо установить отбор списка номенклатуры.
//
Процедура ОтфильтроватьПоАналогичнымСвойствам(Форма, Номенклатура) Экспорт
	
	// Включить использование фильтров.
	Форма.ИспользоватьФильтры = Истина;
	ПодборТоваровКлиентСервер.УстановитьДоступностьЭлементовФильтров(Форма);
	
	// Установить вариант навигации - "по свойствам".
	Форма.ВариантНавигации = "ПоСвойствам";
	Форма.Элементы.ВариантыНавигации.ТекущаяСтраница = Форма.Элементы.НавигацияВидыНоменклатуры;
	
	// Установить вид номенклатуры и заполнить дерево отборов.
	Форма.ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ВидНоменклатуры");
	УстановитьОтборПоВидуНоменклатуры(Форма);
	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	
	// Получить список свойств и значений вида номенклатуры текущего товара..
	СвойстваДляПодбораТоваровСАналогичнымиСвойствами = СвойстваДляПодбораТоваровСАналогичнымиСвойствами(Номенклатура);
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	// Пройти по полученному списку свойств, проставить флажки использования.
	Для Каждого ДополнительноеСвойство Из СвойстваДляПодбораТоваровСАналогичнымиСвойствами Цикл
		
		Для Каждого Свойство Из ДеревоОтборов.Строки Цикл
			
			Если ЗначениеЗаполнено(Свойство.ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ЗначениеСвойства Из Свойство.Строки Цикл
				
				Если Не (ДополнительноеСвойство.Представление = Свойство.Представление) Тогда
					Продолжить;
				КонецЕсли;
				
				// Включить использование свойства в отборе, если значение дерева отбора аналогично 
				// значению списка свойств вида текущей номенклатуры.
				ЗначениеСвойства.Отбор = (ЗначениеСвойства.ЗначениеОтбора = ДополнительноеСвойство.Значение);
				
				Если ЗначениеСвойства.Отбор Тогда
					Свойство.Отбор = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
	// Флажки расставлены, теперь применить отборы к списку номенклатуры.
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискНаФормахПодборов

// Выполняет поиск номенклатуры по строке поиска.
//
// Параметры:
//  Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
// Возвращаемое значение:
//  Булево - Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискНоменклатуры(Форма) Экспорт
	
	ПоискВыполнен = Ложь;
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	
	Форма.ПоискНоменклатурыНеУдачный = Ложь;
	Форма.КодОшибкиПоиска = "";
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не Форма.ИспользоватьПолнотекстовыйПоиск Или Форма.НайтиНоменклатуруПоТочномуСоответствию Тогда
			ВыполнитьНеПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска);
		Иначе
			ВыполнитьПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска);
		КонецЕсли;
		ПоискВыполнен = Истина;
	КонецЕсли;
	
	Форма.ПоискНоменклатурыНеУдачный = (ПоискВыполнен И ЗначениеЗаполнено(РезультатПоиска.КодОшибки));
	Форма.КодОшибкиПоиска = РезультатПоиска.КодОшибки;
	
	ПодборТоваровКлиентСервер.УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы,
		РезультатПоиска.Номенклатура, 
		ПоискВыполнен);
		
	Форма.ЕстьФильтрПоПоискуНоменклатуры = ПоискВыполнен;
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодбораТоваровПоКатегориям(Форма) Тогда
		ПодборТоваровКлиентСервер.УстановитьОтборПоДиапазонуЦен(Форма);
	КонецЕсли;
	
	Возврат ПоискВыполнен;
	
КонецФункции

// Выполняет поиск характеристик по строке поиска.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	 Булево - Истина - удалось выполнить поиск, элементы найдены, Ложь - не удалось выполнить поиск.
//
Функция ВыполнитьПоискХарактеристик(Форма) Экспорт
	
	ПоискВыполнен = Ложь;
	
	Форма.ПоискХарактеристикНеУдачный = Ложь;
	Форма.КодОшибкиПоиска = "";
	
	СтрокаПоиска = Форма.СтрокаПоискаХарактеристики;
	РезультатПоиска = СтруктураРезультатовПоиска();
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Если Не Форма.ИспользоватьПолнотекстовыйПоиск Или Форма.НайтиХарактеристикиПоТочномуСоответствию Тогда
			ВыполнитьНеПолнотекстовыйПоискХарактеристик(Форма, РезультатПоиска);
		Иначе
			ВыполнитьПолнотекстовыйПоискХарактеристик(Форма, РезультатПоиска);
		КонецЕсли;
		ПоискВыполнен = Истина;
	КонецЕсли;
	
	Форма.ПоискХарактеристикНеУдачный = (ПоискВыполнен И ЗначениеЗаполнено(РезультатПоиска.КодОшибки));
	Форма.КодОшибкиПоиска = РезультатПоиска.КодОшибки;
	
	ПодборТоваровКлиентСервер.УстановитьОтборСпискаПоСтрокеПоиска(
		ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы,
		РезультатПоиска.ХарактеристикиНоменклатуры, ПоискВыполнен);
	
	Возврат ПоискВыполнен;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Сохраняет значения реквизитов на форме в хранилище общих настроек.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма выбора.
//
Процедура СохранитьНастройкиФормы(Форма) Экспорт
	
	НастройкиФормы = НастройкиФормы(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", НастройкиФормы);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	СохранитьСпискиВыбора(Форма);
	
КонецПроцедуры

// Сохраняет значения реквизитов на форме подбора в хранилище общих настроек.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура СохранитьНастройкиФормыПодбора(Форма) Экспорт
	
	НастройкиФормыПодбора = НастройкиФормыПодбора(Форма);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(Форма.КодФормы, "", НастройкиФормыПодбора);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ВариантПоискаТоваров", "", Форма.ВариантПоискаТоваров);
	
КонецПроцедуры

// Восстанавливает значение реквизитов на форме из хранилища общих настроек.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма списка, форма выбора.
//
Процедура УстановитьЗначенияПоНастройкамФормы(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	
	// Установить значения по умолчанию.
	Форма.ИспользоватьФильтры = Истина;
	Форма.ВариантНавигации = "ПоИерархии";
	
	Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		Форма.ИспользоватьФильтрыДоТДК = Истина;
		Форма.ВариантНавигацииДоТДК = "ПоИерархии";
	КонецЕсли;
	
	Форма.ВидНоменклатуры = Справочники.ВидыНоменклатуры.ПустаяСсылка();
	Форма.ТекущаяИерархияНоменклатуры = Справочники.Номенклатура.ПустаяСсылка();
	
	// Получить настройку вариант поиска товаров.
	НастройкиВариантПоискаТоваров = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ВариантПоискаТоваров", "");
	
	Если НастройкиВариантПоискаТоваров = Неопределено Тогда
		Форма.ВариантПоискаТоваров = "ПоУмолчанию";
	Иначе
		Форма.ВариантПоискаТоваров = НастройкиВариантПоискаТоваров;
	КонецЕсли;
	
	// Если есть сохраненные настройки, то установить значения по настройкам.
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы, "");
	
	Если Настройки <> Неопределено Тогда
		
		Если Настройки.Свойство("ИспользоватьФильтры") Тогда
			Форма.ИспользоватьФильтры = Настройки.ИспользоватьФильтры;
		КонецЕсли;
		
		Если Настройки.Свойство("ИспользоватьФильтрНоменклатураПоставщика") Тогда
			Форма.ИспользоватьФильтрНоменклатураПоставщика = Настройки.ИспользоватьФильтрНоменклатураПоставщика;
		КонецЕсли;
		
		Если Настройки.Свойство("ВариантНавигации") Тогда
			Форма.ВариантНавигации = Настройки.ВариантНавигации;
		КонецЕсли;
		
		Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
			Форма.ИспользоватьФильтрыДоТДК = Форма.ИспользоватьФильтры;
			Форма.ВариантНавигацииДоТДК = Форма.ВариантНавигации;
		КонецЕсли;
		
		Если Настройки.Свойство("ТаблицаПараметровОтбора") Тогда
			Если ЗначениеЗаполнено(Настройки.ТаблицаПараметровОтбора) Тогда
				Форма.ТаблицаПараметровОтбора.Загрузить(Настройки.ТаблицаПараметровОтбора);
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ВидНоменклатуры") Тогда
			
			Если ЗначениеЗаполнено(Настройки.ВидНоменклатуры) Тогда
				
				// Проверить, что ссылка указывает на существующий объект.
				Если Настройки.ВидНоменклатуры.ПолучитьОбъект() <> Неопределено Тогда
					
					Форма.ВидНоменклатуры = Настройки.ВидНоменклатуры;
					
					Если Форма.ВариантНавигации = "ПоИерархии" Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
						Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
							ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
						КонецЕсли;
						
					КонецЕсли;
					
					Если Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
						
						ЗаполнитьДеревоОтборовНоменклатуры(Форма);
						
						Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
							ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатуры") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатуры) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатуры.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатуры;
					Форма.ТекущаяИерархияНоменклатуры = Настройки.ТекущаяИерархияНоменклатуры;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ТекущаяИерархияНоменклатурыПоставщика") Тогда
			Если ЗначениеЗаполнено(Настройки.ТекущаяИерархияНоменклатурыПоставщика) Тогда
				// Проверить, что ссылка указывает на существующий объект.
				Если Не (Настройки.ТекущаяИерархияНоменклатурыПоставщика.ПолучитьОбъект() = Неопределено) Тогда
					Форма.Элементы.ИерархияНоменклатурыПоставщика.ТекущаяСтрока = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
					Форма.ТекущаяИерархияНоменклатурыПоставщика = Настройки.ТекущаяИерархияНоменклатурыПоставщика;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("НоменклатураИсходногоКачества") Тогда
			Если ЗначениеЗаполнено(Настройки.НоменклатураИсходногоКачества) Тогда
				Если Не (Настройки.НоменклатураИсходногоКачества.ПолучитьОбъект() = Неопределено) Тогда
					Форма.НоменклатураИсходногоКачества = Настройки.НоменклатураИсходногоКачества;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Установить страницу варианта навигации по списку номенклатуры.
	УстановитьСтраницуВариантаНавигации(Форма);
	
	Если Форма.ВариантНавигации = "ПоСвойствам" Тогда
		ПриИзмененииВидаНоменклатуры(Форма);
	ИначеЕсли Форма.ВариантНавигации = "ПоИерархии" Тогда
		УстановитьОтборПоТекущейИерархииНоменклатуры(Форма);
	КонецЕсли;
	
	ПриИзмененииИспользованияФильтров(Форма);
	
КонецПроцедуры

// Устанавливает значения реквизитов формы, специфичные для формы подбора.
// Вызывается из форм подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьЗначенияПоНастройкамФормыПодбора(Форма) Экспорт
	
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	УстановитьЗначенияПоНастройкамФормы(Форма);
	
	Форма.ТолькоВНаличии = Ложь;
	Форма.ОтображатьОстатки = Истина;
	
	Если Не ЭтоФормаПомощникаПродаж Тогда
		Форма.ПоказыватьПодобранныеТовары = Истина;
	КонецЕсли;
	
	Форма.ЗапрашиватьКоличество = Истина;
	
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(Форма.КодФормы, "");
	
	Если Не (Настройки = Неопределено) Тогда
		
		Если Настройки.Свойство("ТолькоВНаличии") Тогда
			
			Форма.ТолькоВНаличии = Настройки.ТолькоВНаличии;
			Форма.ТолькоВНаличииИзПараметров = Настройки.ТолькоВНаличии;
			
			// В форме помощника продаж значение реквизита "Склад" при открытии всегда не заполнено,
			// значит установка фильтра "Только в наличии" (без указания склада) не имеет смысла.
			Если ЭтоФормаПомощникаПродаж Тогда
				Форма.ТолькоВНаличии = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не (ЭтоФормаПомощникаПродаж Или ЭтоФормаЧекаККМ) Тогда
			Если Форма.Параметры.СкрыватьКомандуОстаткиНаСкладах Тогда
				Форма.ТолькоВНаличии = Ложь;
			КонецЕсли; 
		КонецЕсли;
		
		Если Настройки.Свойство("ОтображатьОстатки") Тогда
			Форма.ОтображатьОстатки = Настройки.ОтображатьОстатки;
		КонецЕсли;
		
		Если Настройки.Свойство("ПоказыватьПодобранныеТовары") Тогда
			Если Не ЭтоФормаПомощникаПродаж Тогда
				Форма.ПоказыватьПодобранныеТовары = Настройки.ПоказыватьПодобранныеТовары;
			КонецЕсли;
		КонецЕсли;
		
		Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
			Форма.ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.Элементы.ЗапрашиватьКоличествоЦену.Пометка = Форма.ЗапрашиватьКоличество;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаОповещенийИзПомощниковДобавленияНовойНоменклатуры
// и новой характеристики.

// Вызывается при обработке оповещения создания новой номенклатуры из помощника
// добавления новой номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 Номенклатура - СправочникСсылка.Номенклатура - источник события.
//
Процедура ПриЗаписиНовойНоменклатуры(Форма, Номенклатура) Экспорт
	
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	
	Форма.ЗаписьНового = Истина;
	Форма.Элементы[ИмяСпискаНоменклатуры].ТекущаяСтрока = Номенклатура;
	
	ЗаполнитьПараметрыНовойНоменклатуры(Форма, Номенклатура);
	
КонецПроцедуры

// Заполняет реквизит формы "ТекущаяСтрокаНоменклатуры" значениями реквизитов элемента номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 Номенклатура - СправочникСсылка.Номенклатура - созданный элемент номенклатуры.
//
Процедура ЗаполнитьПараметрыНовойНоменклатуры(Форма, Номенклатура)
	
	Форма.НоваяНоменклатура = ПодборТоваровКлиентСервер.СтруктураСтрокиНоменклатуры();
	
	РеквизитыНоменклатуры = "Ссылка, ЭтоГруппа, Родитель, ПометкаУдаления, ВидНоменклатуры, ЕдиницаИзмерения, 
	|ИспользованиеХарактеристик, ТипНоменклатуры, ЦеноваяГруппа";
	
	ЗначенияРеквизитовНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, РеквизитыНоменклатуры);
	
	ЗаполнитьЗначенияСвойств(Форма.НоваяНоменклатура, ЗначенияРеквизитовНоменклатуры);
	
	Форма.НоваяНоменклатура.Номенклатура = Номенклатура;
	Форма.НоваяНоменклатура.ХарактеристикиИспользуются = 
		Не (ЗначенияРеквизитовНоменклатуры.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать);
	Форма.НоваяНоменклатура.ЭтоТовар  = (ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
										Или ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	Форма.НоваяНоменклатура.ЭтоУслуга = (ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга
										Или ЗначенияРеквизитовНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	
КонецПроцедуры

// Вызывается при обработке оповещения создания новой характеристики из помощника
// добавления новой характеристики.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 Характеристика - СправочникСсылка.ХарактеристикиНоменклатуры - источник события.
//
Процедура ПриЗаписиНовойХарактеристики(Форма, Характеристика) Экспорт
	
	Если Не ЗначениеЗаполнено(Характеристика) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЗаписьНового = Истина;
	Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма)].ТекущаяСтрока = Характеристика;
	
	ЗаполнитьПараметрыНовойХарактеристики(Форма, Характеристика);
	
КонецПроцедуры

// Заполняет реквизит формы "НоваяХарактеристика" значениями реквизитов новой характеристики.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 Характеристика - СправочникСсылка.Характеристики - характеристика.
//
Процедура ЗаполнитьПараметрыНовойХарактеристики(Форма, Характеристика)
	
	Форма.НоваяХарактеристика = ПодборТоваровКлиентСервер.СтруктураСтрокиХарактеристик();
	
	Форма.НоваяХарактеристика.Ссылка = Характеристика;
	Форма.НоваяХарактеристика.Характеристика = Характеристика;
	
	Если ЗначениеЗаполнено(Форма.НоваяНоменклатура) Тогда
		ПараметрыНоменклатуры = Форма.НоваяНоменклатура;
	Иначе
		ПараметрыНоменклатуры = Форма.ТекущаяСтрокаНоменклатуры;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма.НоваяХарактеристика, ПараметрыНоменклатуры);
	
КонецПроцедуры

// Вызывается из форм подборов при обработке оповещения о закрытии помощника добавления
// новой номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ПриЗакрытииПомощникаДобавленияНовойНоменклатуры(Форма) Экспорт
	
	Если Не Форма.ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЗаписьНового = Ложь;
	
	СоответствуетОтборуПоТипуНоменклатуры = НовыйТоварСоответствуетОтборуПоТипуНоменклатуры(Форма);
	
	Если Форма.ИспользоватьХарактеристикиНоменклатуры 
		И Форма.НоваяНоменклатура.ХарактеристикиИспользуются Тогда
		
		Если СоответствуетОтборуПоТипуНоменклатуры Тогда
			ПерейтиКСпискуХарактеристикНовойНоменклатуры(Форма);
		КонецЕсли;
		
	Иначе
		
		Форма.ТоварДляДобавленияВКорзину = ПодборТоваровКлиентСервер.ПараметрыТовара();
		
		ЗаполнитьЗначенияСвойств(Форма.ТоварДляДобавленияВКорзину, Форма.НоваяНоменклатура);
		ЗаполнитьСкладТовараДляДобавлениявКорзину(Форма);
		
		Форма.ТоварДляДобавленияВКорзину.КоличествоУпаковок = 1;
		
		Если Не СоответствуетОтборуПоТипуНоменклатуры Тогда
			Форма.ТоварДляДобавленияВКорзину = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из форм подборов при обработке оповещения о закрытии помощника добавления
// новой характеристики.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ПриЗакрытииПомощникаДобавленияНовойХарактеристики(Форма) Экспорт
	
	Если Не Форма.ЗаписьНового Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.НоваяХарактеристика) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ЗаписьНового = Ложь;
	Форма.ТоварДляДобавленияВКорзину = ПодборТоваровКлиентСервер.ПараметрыТовара();
	
	ЗаполнитьЗначенияСвойств(Форма.ТоварДляДобавленияВКорзину, Форма.НоваяХарактеристика);
	ЗаполнитьСвойстваТовараДляДобавленияВКорзинуПоТипуНоменклатуры(Форма.ТоварДляДобавленияВКорзину, Форма.НоваяХарактеристика.ТипНоменклатуры);
	ЗаполнитьСкладТовараДляДобавлениявКорзину(Форма);
	
	Форма.ТоварДляДобавленияВКорзину.КоличествоУпаковок = 1;
	
	// При добавлении новой характеристики из формы подбора может возникнуть ситуация, 
	// когда пользователь стал добавлять новую номенклатуру, но вместо этого, стал редактировать 
	// состав общих характеристик у вида номенклатуры. 
	// В этом случае владельцем создаваемой характеристики будет элемент справочника "ВидыНоменклатуры" 
	// и вид номенклатуры у номенклатуры товара для добавления в корзину не совпадет с ним.
	
	ВладелецХарактеристикиТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.НоваяХарактеристика.Характеристика, "Владелец");
	ВидНоменклатурыТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.НоваяХарактеристика.Номенклатура, "ВидНоменклатуры");
	
	Если ТипЗнч(ВладелецХарактеристикиТовара) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
		Если ВладелецХарактеристикиТовара <> ВидНоменклатурыТовара Тогда
			Форма.ТоварДляДобавленияВКорзину = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Проверить, если новый товар не соответствует отбору по типу номенклатуры, то не добавлять его в корзину.
	Если Не НовыйТоварСоответствуетОтборуПоТипуНоменклатуры(Форма) Тогда
		Форма.ТоварДляДобавленияВКорзину = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет соответствует ли тип номенклатуры созданного товара типу номенклатуры
// установленного в качестве отбора списка номенклатуры в форме подбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Функция НовыйТоварСоответствуетОтборуПоТипуНоменклатуры(Форма)
	
	Перем ТипыНоменклатурыОтбора;
	
	Если Не ЗначениеЗаполнено(Форма.НоваяНоменклатура) Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Если отбор по типу номенклатуры не установлен, то в корзину можно добавлять
	// товары любого типа.
	Если Не УстановленОтборПоТипуНоменклатуры(Форма, ТипыНоменклатурыОтбора) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипНоменклатурыТовара = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.НоваяНоменклатура.ВидНоменклатуры, "ТипНоменклатуры");
	
	// Если тип номенклатуры товара отсутствует в списке типов установленных в качестве
	// типов отбора, то, стало быть, не соответствует.
	Если ТипыНоменклатурыОтбора.НайтиПоЗначению(ТипНоменклатурыТовара) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет, установлен ли отбор по типу номенклатуры у списка номенклатуры.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора,
//	 ТипыНоменклатурыОтбора - Неопределено - переменная в которую передается значение установленного 
//		отбора по типу номенклатуры. В качестве значений установленного отбора всегда используется
//		список значений. Отбор по типу номенклатуры устанавливается в процедуре 
//		<УстановитьОтборПоТипуНоменклатурыПоПараметрам>.
//
// Возвращаемое значение:
//	 Булево - Истина - установлен, Ложь - нет.
//
Функция УстановленОтборПоТипуНоменклатуры(Форма, ТипыНоменклатурыОтбора = Неопределено)
	
	Для Каждого ЭлементОтбора Из ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы Цикл
		
		Если ЭлементОтбора.Представление = "ОтборПоТипуНоменклатуры" 
			И ЭлементОтбора.Использование Тогда
			
			Если ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("СписокЗначений") Тогда
				
				Если ЭлементОтбора.ПравоеЗначение.Количество() > 0 Тогда
					
					ТипыНоменклатурыОтбора = ЭлементОтбора.ПравоеЗначение;
					Возврат Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Заполняет поля "ЭтоТовар", "ЭтоУслуга" структуры ТоварДляДобавленияВКорзину.
//
// Параметры:
//	 ТоварДляДобавленияВКорзину - Структура - параметры товара для добавления в корзину,
//	 ВидНоменклатуры - СправочникСсылка.ВидыНоменклатуры - вид номенклатуры.
//
Процедура ЗаполнитьСвойстваТовараДляДобавленияВКорзинуПоТипуНоменклатуры(ТоварДляДобавленияВКорзину, ТипНоменклатуры)
	
	ТоварДляДобавленияВКорзину.ЭтоТовар = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ТоварДляДобавленияВКорзину.ЭтоУслуга = (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	
КонецПроцедуры

// Анализирует настройки формы подбора в части указания склада и заполняет
// поле "Склад" добавляемого в корзину товара.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура ЗаполнитьСкладТовараДляДобавлениявКорзину(Форма)
	
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	Если ЭтоФормаЧекаККМ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Форма.ТоварДляДобавленияВКорзину.ЭтоТовар Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСкладов = Форма.Склады.Количество();
	
	Если Не КоличествоСкладов = 1 Или КоличествоСкладов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Склад = Форма.Склады.Получить(0).Значение;
	
	Если ЭтоФормаПомощникаПродаж Тогда
		Форма.ТоварДляДобавленияВКорзину.Склад = Склад;
	Иначе
		Если Форма.РежимПодбораИспользоватьСкладыВТабличнойЧасти Тогда
			Форма.ТоварДляДобавленияВКорзину.Склад = Склад;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Выполняет попытку загрузить настройки из общего хранилища настроек
// по имени ключа объекта. Если настройки в общем хранилище есть, значит форма
// уже открывалась, если нет, значит это первое открытие формы.
//
// Параметры:
//	 КлючОбъекта - Строка - ключ объекта настроек формы.
//
// Возвращаемое значение:
//  Булево - первое открытие формы.
Функция ПервоеОткрытиеФормы(КлючОбъекта) Экспорт
	
	НастройкиФормы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, "");
	
	Если НастройкиФормы = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает владельца характеристик номенклатуры. В зависимости от настроек
// вида номенклатуры это может быть либо сам вид номенклатуры, либо номенклатура.
//
// Параметры:
//	 Номенклатура - СправочникСсылка.Номенклатура - номенклатура.
//
// Возвращаемое значение:
//	 СправочникСсылка.Номенклатура, СправочникСсылка.ВидыНоменклатуры, Неопределено - владелец.
//
Функция ВладелецХарактеристик(Номенклатура)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Номенклатура, "ВидНоменклатуры,ИспользованиеХарактеристик");
	
	Если Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры Тогда
		Возврат Реквизиты.ВидНоменклатуры;
	ИначеЕсли Реквизиты.ИспользованиеХарактеристик = Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры Тогда
		Возврат Номенклатура;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру параметров для создания новой номенклатуры из форм подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//  Структура - параметры формы.
Функция ПараметрыСозданияНовойНоменклатуры(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Родитель, ВидНоменклатуры, АдресТаблицыПараметров, АдресТаблицыСопостовления");
	
	Если Форма.ИспользоватьФильтры Тогда
		
		Если Форма.ВариантНавигации = "ПоИерархии" Тогда
			
			ПараметрыФормы.Родитель = ?(ЗначениеЗаполнено(Форма.ТекущаяИерархияНоменклатуры), Форма.ТекущаяИерархияНоменклатуры, Справочники.Номенклатура.ПустаяСсылка());
			
		ИначеЕсли Форма.ВариантНавигации = "ПоСвойствам" Тогда
			
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыФормы.ВидНоменклатуры = Форма.ВидНоменклатуры;
				ПараметрыФормы.АдресТаблицыПараметров = АдресТаблицыПараметровДереваОтборов(Форма);
				ПараметрыФормы.АдресТаблицыСопостовления = АдресТаблицыСопостовленияДереваОтборов(Форма)
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

// Возвращает структуру параметров для создания новой характеристики из форм подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//  Структура - параметры формы.
Функция ПараметрыСозданияНовойХарактеристики(Форма) Экспорт
	
	ПараметрыФормы = Новый Структура("Владелец, ВидНоменклатуры, АдресТаблицы");
	
	// Параметры создания новой характеристики можно получить из параметров
	// динамического списка характеристик, т.к. в общем случае отбор может быть
	// наложен как по номенклатуре отображенной в списке номенклатуры,
	// так и по новой номенклатуре, которая в списке не отобразилась.
	
	ПараметрыСпискаХарактеристик = Форма.СписокХарактеристики.Параметры.Элементы;
	
	// ... получить значение параметра номенклатуры.
	Параметр = ПараметрыСпискаХарактеристик.Найти("Номенклатура");
	
	Если Не (Параметр = Неопределено) Тогда
		ПараметрыФормы.Владелец = ВладелецХарактеристик(Параметр.Значение);
	КонецЕсли;
	
	// ... получить значение параметра вида номенклатуры.
	Параметр = ПараметрыСпискаХарактеристик.Найти("ВидНоменклатуры");
	
	Если Не (Параметр = Неопределено) Тогда
		ПараметрыФормы.ВидНоменклатуры = Параметр.Значение;
	КонецЕсли;
	
	Если Форма.ИспользоватьФильтры Тогда
		Если Форма.ВариантНавигации = "ПоСвойствам" Тогда
			Если ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда
				ПараметрыФормы.АдресТаблицы = АдресТаблицыПараметровДереваОтборов(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыФормы;
	
КонецФункции

#КонецОбласти

#Область ФормированиеТекстовЗапросовДинамическихСписковНаФормахПодборов

// Возвращает текст запроса для динамического списка формы подбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - фомра подбора,
//	 ТипСписка - Строка - тип списка формы подбора.
//
// Возвращаемое значение:
//	 Строка - текст запроса списка формы подбора.
//
Функция ТекстЗапросаСпискаФормыПодбора(Форма, ТипСписка)
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	Если ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		ВариантРасчетаЦенПоставщика = ?(ЗначениеЗаполнено(Форма.Соглашение), "ЦеныПоСоглашению", "БезЦен");
		
		Если ТипСписка = "СписокНоменклатура" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика);
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика);
		ИначеЕсли ТипСписка = "СписокНоменклатураПоставщика" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыПоставщикаПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика);
		КонецЕсли; 
		
	ИначеЕсли ЭтоФормаЧекаККМ Тогда
		
		ИспользоватьАссортимент = Форма.ИспользоватьАссортимент;
		
		Если ТипСписка = "СписокНоменклатура" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаНоменклатурыЧекаККМ(ИспользоватьАссортимент);
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			ШаблонТекстЗапроса = ШаблонТекстаЗапросаСпискаХарактеристикЧекаККМ(ИспользоватьАссортимент);
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстЗапроса = ПодставитьЗначенияПараметровВШаблонТекстаЗапроса(ШаблонТекстЗапроса, ТипСписка, Форма);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса для списка характеристик в списке формы подбора документа "Чек ККМ".
//
// Параметры:
//	 ИспользоватьАссортимент - Булево - признак включения ФО "Использовать ассортимент".
//
// Возвращаемое значение:
//	 Строка - шаблон текста запроса.
//
Функция ШаблонТекстаЗапросаСпискаХарактеристикЧекаККМ(ИспользоватьАссортимент)
	
	Если ИспользоватьАссортимент Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникХарактеристикиОбщиеПоля}
		
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток
		
		|ИЗ
		
		|	{СправочникХарактеристики}
		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
		|			ОбъектПланирования = &ФорматМагазина 
		|				И Номенклатура = &Номенклатура) КАК Ассортимент
		|		ПО Ассортимент.РазрешеныПродажи
		
		|		{СвободныеОстатки}
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
		|				&Дата,
		|				Номенклатура = &Номенклатура
		|				{(Характеристика).* КАК Характеристика}
		|			) КАК ЦеныНоменклатуры
		|		ПО (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦены)
		|			И (ЦеныНоменклатуры.Номенклатура = &Номенклатура)
		|			И (ЦеныНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		
		|		{КурсВалютыЦены}
		|		{КурсВалютыДокумента}
		
		|ГДЕ
		
		|	{ОтборХарактеристикПоВладельцу}
		|	{ОтборХарактеристикПоСегменту}
		
		|";
		
	Иначе
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникХарактеристикиОбщиеПоля}
		
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток
		
		|ИЗ
		
		|	{СправочникХарактеристики}
		|	{СвободныеОстатки}
		
		|		{ЦеныНоменклатуры}
		|		И (ЦеныНоменклатуры.ВидЦены = &ВидыЦен)
		
		|		{КурсВалютыЦены}
		|		{КурсВалютыДокумента}
		
		|ГДЕ
		
		|	{ОтборХарактеристикПоВладельцу}
		|	{ОтборХарактеристикПоСегменту}
		
		|";
		
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает шаблон текста запроса для списка номенклатуры в списке формы подбора документа "Чек ККМ".
//
// Параметры:
//	 ИспользоватьАссортимент - Булево - признак включения ФО "Использовать ассортимент".
//
// Возвращаемое значение:
//	 Строка - шаблон текста запроса.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыЧекаККМ(ИспользоватьАссортимент)
	
	Если ИспользоватьАссортимент Тогда
		
		ШаблонТекстаЗапроса =
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.Ассортимент.СрезПоследних(
		|			КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), 
		|				ОбъектПланирования = &ФорматМагазина
		|			{(Номенклатура).* КАК Номенклатура}
		|			) КАК Ассортимент
		|		ПО СправочникНоменклатура.Ссылка = Ассортимент.Номенклатура
		|			И (Ассортимент.РазрешеныПродажи)
		
		|		{СвободныеОстатки}
		|		{ЦеныНоменклатуры}
		|		И (ЦеныНоменклатуры.ВидЦены = Ассортимент.ВидЦены)
		
		|		{КурсВалютыЦены}
		|		{КурсВалютыДокумента}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	Иначе
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ЦеныНоменклатуры.Упаковка КАК Упаковка,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 3)) КАК ВНаличииОстаток
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		|	{СвободныеОстатки}
		|	{ЦеныНоменклатуры}
		|	{КурсВалютыЦены}
		|	{КурсВалютыДокумента}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка характеристик по параметрам соглашения с поставщиком.
//
// Параметры:
//	 ВариантРасчетаЦенПоставщика - Строка - вариант расчета цен поставщика.
//
// Возвращаемое значение:
//	 Строка - текст запроса списка характеристик.
//
Функция ШаблонТекстаЗапросаспискаХарактеристикПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика)
	
	Если ВариантРасчетаЦенПоставщика = "БезЦен" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникХарактеристикиОбщиеПоля}
		
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} КАК ЧИСЛО(15, 2)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} КАК ЧИСЛО(15, 2)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникХарактеристики}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборХарактеристикПоВладельцу}
		|	{ОтборХарактеристикПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникХарактеристикиОбщиеПоля}
		
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ВЫРАЗИТЬ((ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) КАК ЧИСЛО(15, 2))) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 2)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 2)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникХарактеристики}
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|				&Дата,
		|				Соглашение = &Соглашение
		|					И УсловиеЦеныПоставщика = &УсловиеЦеныПоставщика
		|					И Номенклатура = &Номенклатура
		|			) КАК ЦеныНоменклатурыПоставщиков
		|		ПО
		|			(ЦеныНоменклатурыПоставщиков.Соглашение = &Соглашение)
		|			И (ЦеныНоменклатурыПоставщиков.УсловиеЦеныПоставщика = &УсловиеЦеныПоставщика)
		|			И (ЦеныНоменклатурыПоставщиков.Номенклатура = &Номенклатура)
		|			И (ЦеныНоменклатурыПоставщиков.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		
		|		{КурсВалютыДокумента}
		|		{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборХарактеристикПоВладельцу}
		|	{ОтборХарактеристикПоСегменту}
		
		|";
		
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка номенклатуры по параметрам соглашения с поставщиком.
//
// Параметры:
//	 ВариантРасчетаЦенПоставщика - Строка - вариант расчета цен поставщика.
//
// Возвращаемое значение:
//	 Строка - текст запроса списка номенклатуры.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика)
	
	Если ВариантРасчетаЦенПоставщика = "БезЦен" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта,
		|	ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка) КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} КАК ЧИСЛО(15, 2)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} КАК ЧИСЛО(15, 2)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		|	{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	ИначеЕсли ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураОбщиеПоля}
		
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
		
		|	ВЫРАЗИТЬ({СвободныеОстаткиВНаличии} / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 2)) КАК ВНаличииОстаток,
		|	ВЫРАЗИТЬ({ВсеОстаткиДоступно} / ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 2)) КАК Доступно
		
		|ИЗ
		
		|	{СправочникНоменклатура}
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|				&Дата,
		|				Соглашение = &Соглашение
		|					И УсловиеЦеныПоставщика = &УсловиеЦеныПоставщика
		|					И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
		|					{(Номенклатура).* КАК Номенклатура}
		|			) КАК ЦеныНоменклатурыПоставщиков
		|		ПО (ЦеныНоменклатурыПоставщиков.Соглашение = &Соглашение)
		|			И (ЦеныНоменклатурыПоставщиков.УсловиеЦеныПоставщика = &УсловиеЦеныПоставщика)
		|			И (ЦеныНоменклатурыПоставщиков.Номенклатура = СправочникНоменклатура.Ссылка)
		|			И (ЦеныНоменклатурыПоставщиков.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		
		|		{КурсВалютыДокумента}
		|		{ВсеОстатки}
		
		|ГДЕ
		
		|	{ОтборНоменклатурыПоГруппе}
		|	{ОтборНоменклатурыПоСегменту}
		
		|";
		
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает текст запроса списка номенклатуры поставщика по параметрам соглашения с поставщиком.
//
// Параметры:
//	 ВариантРасчетаЦенПоставщика - Строка - вариант расчета цен поставщика.
//
// Возвращаемое значение:
//	 Строка - текст запроса списка номенклатуры поставщика.
//
Функция ШаблонТекстаЗапросаСпискаНоменклатурыПоставщикаПоПараметрамСоглашенияСПоставщиком(ВариантРасчетаЦенПоставщика)
	
	Если ВариантРасчетаЦенПоставщика = "БезЦен" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураПоставщиковОбщиеПоля}
		
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.УсловияЦенПоставщиков.ПустаяСсылка) КАК УсловиеЦеныПоставщика
		
		|ИЗ
		
		|	{СправочникНоменклатураПоставщиков}";
		
	ИначеЕсли ВариантРасчетаЦенПоставщика = "ЦеныПоСоглашению" Тогда
		
		ШаблонТекстаЗапроса = 
		"ВЫБРАТЬ
		
		|	{СправочникНоменклатураПоставщиковОбщиеПоля}
		
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
		|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
		|				ТОГДА ВЫБОР
		|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
		|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
		|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
		|						ИНАЧЕ 0
		|					КОНЕЦ
		|			ИНАЧЕ 1
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
		|	ЦеныНоменклатурыПоставщиков.УсловиеЦеныПоставщика
		
		|ИЗ
		
		|	{СправочникНоменклатураПоставщиков}
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
		|				&Дата,
		|				Соглашение = &Соглашение
		|					И УсловиеЦеныПоставщика = &УсловиеЦеныПоставщика
		|				{(Номенклатура).* КАК Номенклатура}
		|			) КАК ЦеныНоменклатурыПоставщиков
		|		ПО 
		|			(ЦеныНоменклатурыПоставщиков.Соглашение = &Соглашение)
		|			И (ЦеныНоменклатурыПоставщиков.УсловиеЦеныПоставщика = &УсловиеЦеныПоставщика)
		|			И (ЦеныНоменклатурыПоставщиков.Номенклатура = СправочникНоменклатураПоставщиков.Номенклатура)
		|			И (ЦеныНоменклатурыПоставщиков.Характеристика = СправочникНоменклатураПоставщиков.Характеристика)
		
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
		|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
		
		|		{КурсВалютыДокумента}
		
		|";
		
	КонецЕсли;
	
	Возврат ШаблонТекстаЗапроса;
	
КонецФункции

// Возвращает массив подстрок поиска для поиска и замены в шаблоне текста запроса списка формы подбора.
//
// Возвращаемое значение:
//	 Массив - массив строк.
//
Функция ПараметрыШаблонаТекстаЗапроса()
	
	ПараметрыШаблона = Новый Массив();
	
	ПараметрыШаблона.Добавить("{СправочникНоменклатура}");
	ПараметрыШаблона.Добавить("{СправочникХарактеристики}");
	ПараметрыШаблона.Добавить("{СправочникНоменклатураПоставщиков}");
	
	ПараметрыШаблона.Добавить("{СправочникНоменклатураОбщиеПоля}");
	ПараметрыШаблона.Добавить("{СправочникХарактеристикиОбщиеПоля}");
	ПараметрыШаблона.Добавить("{СправочникНоменклатураПоставщиковОбщиеПоля}");
	
	ПараметрыШаблона.Добавить("{ОтборНоменклатурыПоГруппе}");
	ПараметрыШаблона.Добавить("{ОтборПоЗначениюЦены}");
	ПараметрыШаблона.Добавить("{ОтборНоменклатурыПоСегменту}");
	
	ПараметрыШаблона.Добавить("{КурсВалютыСоглашения}");
	ПараметрыШаблона.Добавить("{КурсВалютыДокумента}");
	ПараметрыШаблона.Добавить("{КурсВалютыЦены}");
	
	ПараметрыШаблона.Добавить("{ЦеныНоменклатуры}");
	
	ПараметрыШаблона.Добавить("{ОтборХарактеристикПоВладельцу}");
	ПараметрыШаблона.Добавить("{ОтборХарактеристикПоСегменту}");
	
	ПараметрыШаблона.Добавить("{ВсеОстатки}");
	ПараметрыШаблона.Добавить("{СвободныеОстатки}");
	ПараметрыШаблона.Добавить("{ДоступныеОстаткиПланируемыхПоступлений}");
	
	ПараметрыШаблона.Добавить("{СвободныеОстаткиВНаличии}");
	ПараметрыШаблона.Добавить("{ВсеОстаткиДоступно}");
	
	Возврат ПараметрыШаблона;
	
КонецФункции

// Возвращает подстроку замены для подстановки в шаблон текста запроса.
//
// Параметры:
//	 ПодстрокаПоиска - Строка - подстрока поиска,
//	 ПараметрыЗамены - Строка - подстрока замены.
//
// Возвращаемое значение:
//	 Строка - подстрока замены для подстановки в шаблон текста запроса.
//
Функция ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса(ПодстрокаПоиска, ПараметрыЗамены)
		
	ТипСписка = ПараметрыЗамены.ТипСписка;
	НесколькоСкладов = ПараметрыЗамены.НесколькоСкладов;
	НесколькоВидовЦен = ПараметрыЗамены.НесколькоВидовЦен;
	ЕстьЦеныВБудущем = ПараметрыЗамены.ЕстьЦеныВБудущем;
	ТолькоСЦенами = ПараметрыЗамены.ТолькоСЦенами;
	ИспользоватьХарактеристикиНоменклатуры = ПараметрыЗамены.ИспользоватьХарактеристикиНоменклатуры;
	
	Если ПодстрокаПоиска = "{СправочникНоменклатура}" Тогда
		
		ПодстрокаЗамены = "
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникХарактеристики}" Тогда
		
		ПодстрокаЗамены = "
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникНоменклатураПоставщиков}" Тогда
		
		ПодстрокаЗамены = "
		|	Справочник.НоменклатураПоставщиков КАК СправочникНоменклатураПоставщиков
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникНоменклатураОбщиеПоля}" Тогда
		
		ПодстрокаЗамены = "
		|	СправочникНоменклатура.Ссылка КАК Ссылка,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	СправочникНоменклатура.Код КАК Код,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникНоменклатура.Родитель КАК Родитель,
		|	СправочникНоменклатура.ЭтоГруппа КАК ЭтоГруппа,
		|	СправочникНоменклатура.Ссылка КАК Номенклатура,
		|	СправочникНоменклатура.Ссылка КАК ЭлементСписка,
		|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
		|	СправочникНоменклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	СправочникНоменклатура.ЦеноваяГруппа КАК ЦеноваяГруппа,
		|	СправочникНоменклатура.Качество КАК Качество,
		|	СправочникНоменклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ВидНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоУслуга,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|			ТОГДА СправочникНоменклатура.ВидНоменклатуры
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|			ТОГДА СправочникНоменклатура.Ссылка
		|		ИНАЧЕ Неопределено
		|	КОНЕЦ КАК ВладелецХарактеристик,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ХарактеристикиИспользуются,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатура.ЭтоГруппа
		|			ТОГДА ВЫБОР
		|					КОГДА СправочникНоменклатура.ПометкаУдаления
		|						ТОГДА 13
		|					ИНАЧЕ 12
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА СправочникНоменклатура.ЕстьТоварыДругогоКачества
		|					ТОГДА 4 + ВЫБОР
		|							КОГДА СправочникНоменклатура.ПометкаУдаления
		|								ТОГДА 1
		|							ИНАЧЕ 0
		|						КОНЕЦ + ВЫБОР
		|							КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|								ТОГДА 0
		|							ИНАЧЕ 2
		|						КОНЕЦ
		|				ИНАЧЕ -1 + ВЫБОР
		|						КОГДА СправочникНоменклатура.ПометкаУдаления
		|							ТОГДА 1
		|						ИНАЧЕ 0
		|					КОНЕЦ + ВЫБОР
		|						КОГДА СправочникНоменклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
		|							ТОГДА 1
		|						ИНАЧЕ 3
		|					КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинки,
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникХарактеристикиОбщиеПоля}" Тогда
		
		ПодстрокаЗамены = "
		|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка,
		|	ХарактеристикиНоменклатуры.Ссылка КАК Характеристика,
		|	ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления,
		|	ИСТИНА КАК ХарактеристикиИспользуются,
		|	&Номенклатура КАК Номенклатура,
		|	&ТипНоменклатуры КАК ТипНоменклатуры,
		|	&ВидНоменклатуры КАК ВидНоменклатуры,
		|	&ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	&ВладелецХарактеристик,
		|	ВЫБОР
		|		КОГДА ХарактеристикиНоменклатуры.ПометкаУдаления
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексКартинки,
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СправочникНоменклатураПоставщиковОбщиеПоля}" Тогда
		
		ПодстрокаЗамены = "
		|	СправочникНоменклатураПоставщиков.ПометкаУдаления КАК ПометкаУдаления,
		|	СправочникНоменклатураПоставщиков.Предопределенный КАК Предопределенный,
		|	СправочникНоменклатураПоставщиков.Владелец КАК Владелец,
		|	СправочникНоменклатураПоставщиков.Родитель КАК Родитель,
		|	СправочникНоменклатураПоставщиков.ЭтоГруппа КАК ЭтоГруппа,
		|	СправочникНоменклатураПоставщиков.Наименование КАК Наименование,
		|	СправочникНоменклатураПоставщиков.Номенклатура КАК Номенклатура,
		|	СправочникНоменклатураПоставщиков.Номенклатура.ТипНоменклатуры КАК ТипНоменклатуры,
		|	СправочникНоменклатураПоставщиков.Номенклатура.ИспользованиеХарактеристик КАК ИспользованиеХарактеристик,
		|	СправочникНоменклатураПоставщиков.Номенклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	СправочникНоменклатураПоставщиков.Характеристика КАК Характеристика,
		|	СправочникНоменклатураПоставщиков.Упаковка КАК Упаковка,
		|	СправочникНоменклатураПоставщиков.Артикул КАК Артикул,
		|	СправочникНоменклатураПоставщиков.Код КАК Код,
		|	СправочникНоменклатураПоставщиков.Номенклатура.СтавкаНДС КАК СтавкаНДС,
		|	СправочникНоменклатураПоставщиков.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатураПоставщиков.Номенклатура.ВидНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоТовар,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатураПоставщиков.Номенклатура.ВидНоменклатуры.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоУслуга,
		|	ВЫБОР
		|		КОГДА СправочникНоменклатураПоставщиков.ЭтоГруппа
		|			ТОГДА ВЫБОР
		|					КОГДА СправочникНоменклатураПоставщиков.ПометкаУдаления
		|						ТОГДА 13
		|					ИНАЧЕ 12
		|				КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинки,
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборНоменклатурыПоГруппе}" Тогда
		
		ПодстрокаЗамены = "
		|	НЕ СправочникНоменклатура.ЭтоГруппа
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборПоЗначениюЦены}" Тогда
		
		Если ТолькоСЦенами Тогда
			ПодстрокаЗамены = "
			|	И ЦеныНоменклатуры.Цена <> 0
			|";
		Иначе
			ПодстрокаЗамены = "";
		КонецЕсли;
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборНоменклатурыПоСегменту}" Тогда
		
		ПодстрокаЗамены = "
		|{ГДЕ
		|	(1 В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			1
		|		ИЗ
		|			РегистрСведений.НоменклатураСегмента КАК Сегменты
		|		ГДЕ
		|			Сегменты.Номенклатура = СправочникНоменклатура.Ссылка
		|			И Сегменты.Сегмент = &СегментНоменклатуры))}
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{КурсВалютыДокумента}" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
		|	ПО (ИСТИНА)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{КурсВалютыСоглашения}" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаСоглашения
		|	ПО (КурсыСрезПоследнихВалютаСоглашения.Валюта = СоглашениеТовары.Ссылка.Валюта)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{КурсВалютыЦены}" Тогда
		
		ПодстрокаЗамены = "
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыСрезПоследнихВалютаЦены
		|	ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{ЦеныНоменклатуры}" Тогда
		
		Если ТипСписка = "СписокНоменклатура" Тогда
			
			ПодстрокаЗамены = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			{УсловиеОтбораПоДате},
			|			{УсловиеОтбораПоВидуЦен}
			|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
			|			{(Номенклатура).* КАК Номенклатура}
			|		) КАК ЦеныНоменклатуры
			|	ПО (ЦеныНоменклатуры.Номенклатура = СправочникНоменклатура.Ссылка)
			|		И (ЦеныНоменклатуры.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))";
			
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			
			ПодстрокаЗамены = "
			|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
			|			{УсловиеОтбораПоДате},
			|			{УсловиеОтбораПоВидуЦен}
			|				И Номенклатура = &Номенклатура
			|			{(Характеристика).* КАК Характеристика}
			|		) КАК ЦеныНоменклатуры
			|	ПО (ЦеныНоменклатуры.Номенклатура = &Номенклатура)
			|		И (ЦеныНоменклатуры.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
			|";
			
		КонецЕсли; 
		
		УсловиеОтбораПоДате = ?(ЕстьЦеныВБудущем, "&Дата", "");
		УсловиеОтбораПоВидуЦен = ?(НесколькоВидовЦен, "ВидЦены В (&ВидыЦен)", "ВидЦены = &ВидыЦен");
		
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоДате}", УсловиеОтбораПоДате);
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоВидуЦен}", УсловиеОтбораПоВидуЦен);
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборХарактеристикПоВладельцу}" Тогда
		
		ПодстрокаЗамены = "
		|	ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристик
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{ОтборХарактеристикПоСегменту}" Тогда
		
		ПодстрокаЗамены = "
		|{ГДЕ
		|	(1 В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			1
		|		ИЗ
		|			РегистрСведений.НоменклатураСегмента КАК Сегменты
		|		ГДЕ
		|			Сегменты.Характеристика = ХарактеристикиНоменклатуры.Ссылка
		|			И Сегменты.Номенклатура = &НоменклатураСегмента
		|			И Сегменты.Сегмент = &СегментНоменклатуры))}
		|";
		
	ИначеЕсли ПодстрокаПоиска = "{СвободныеОстаткиВНаличии}" Тогда
		
		ПодстрокаЗамены = "ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0)";
		
	ИначеЕсли ПодстрокаПоиска = "{ВсеОстаткиДоступно}" Тогда
		
		ПодстрокаЗамены = "(ЕСТЬNULL(СвободныеОстатки.ВНаличииОстаток, 0) - ЕСТЬNULL(СвободныеОстатки.ВРезервеПодЗаказОстаток, 0) -
		|ЕСТЬNULL(СвободныеОстатки.ВРезервеСоСкладаОстаток, 0) + ЕСТЬNULL(ОстаткиИзЗаказов.Количество, 0))";
		
	ИначеЕсли ПодстрокаПоиска = "{ВсеОстатки}" Тогда
		
		ПодстрокаЗамены = 
			ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса("{СвободныеОстатки}", ПараметрыЗамены) + 
			ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса("{ДоступныеОстаткиПланируемыхПоступлений}", ПараметрыЗамены);
		
	ИначеЕсли ПодстрокаПоиска = "{СвободныеОстатки}" Тогда
		
		Если ТипСписка = "СписокНоменклатура" Или ТипСписка = "СписокНоменклатураПоставщика" Тогда
			
			Если НесколькоСкладов Тогда	
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
					|			, 
					|			{УсловиеОтбораПоСкладу}
					|			{(Номенклатура).* КАК Номенклатура}
					|		) КАК СвободныеОстатки
					|	ПО (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
					|";
				
				Иначе
					
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
					|			, 
					|			{УсловиеОтбораПоСкладу}
					|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
					|			{(Номенклатура).* КАК Номенклатура}
					|		) КАК СвободныеОстатки
					|	ПО (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
					|		И (СвободныеОстатки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
					|";
					
				КонецЕсли;
			
			Иначе
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
					|			, 
					|			{УсловиеОтбораПоСкладу}
					|			{(Номенклатура).* КАК Номенклатура}
					|		) КАК СвободныеОстатки
					|	ПО (СвободныеОстатки.Склад = &Склад)
					|		И (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
					|";
					
				Иначе
										
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
					|			, 
					|			{УсловиеОтбораПоСкладу}
					|				И Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
					|			{(Номенклатура).* КАК Номенклатура}
					|		) КАК СвободныеОстатки
					|	ПО (СвободныеОстатки.Склад = &Склад)
					|		И (СвободныеОстатки.Номенклатура = СправочникНоменклатура.Ссылка)
					|		И (СвободныеОстатки.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
					|";
						
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
			
			Если НесколькоСкладов Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
				|			,
				|			{УсловиеОтбораПоСкладу} 
				|				И Номенклатура = &Номенклатура
				|			{(Характеристика).* КАК Характеристика}
				|		) КАК СвободныеОстатки
				|	ПО (СвободныеОстатки.Номенклатура = &Номенклатура)
				|		И (СвободныеОстатки.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
				|";
				
			Иначе
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СвободныеОстатки.Остатки(
				|			,
				|			{УсловиеОтбораПоСкладу} 
				|				И Номенклатура = &Номенклатура
				|			{(Характеристика).* КАК Характеристика}
				|		) КАК СвободныеОстатки
				|	ПО (СвободныеОстатки.Склад = &Склад)
				|		И (СвободныеОстатки.Номенклатура = &Номенклатура)
				|		И (СвободныеОстатки.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
				|";
				
			КонецЕсли;
			
		КонецЕсли;
		
		УсловиеОтбораПоСкладу = ?(НесколькоСкладов, "Склад В (&Склад)", "Склад = &Склад");
		ПодстрокаЗамены = СтрЗаменить(ПодстрокаЗамены, "{УсловиеОтбораПоСкладу}", УсловиеОтбораПоСкладу);
		
	ИначеЕсли ПодстрокаПоиска = "{ДоступныеОстаткиПланируемыхПоступлений}" Тогда
		
		Если НесколькоСкладов Тогда
			
			Если ТипСписка = "СписокНоменклатура" Или ТипСписка = "СписокНоменклатураПоставщика" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ(
				|		ВЫБРАТЬ
				|			Т.Номенклатура КАК Номенклатура,
				|			СУММА(Т.Количество) КАК Количество
				|		ИЗ
				|			РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
				|		ГДЕ
				|			Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
				|			И Т.Количество < 0
				|			И Т.Склад В(&Склад)
				|		СГРУППИРОВАТЬ ПО
				|			Т.Номенклатура
				|	) КАК ОстаткиИзЗаказов
				|	ПО 
				|		(ОстаткиИзЗаказов.Номенклатура = СправочникНоменклатура.Ссылка)";
				
			ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ(
				|		ВЫБРАТЬ
				|			Т.Характеристика КАК Характеристика,
				|			СУММА(Т.Количество) КАК Количество
				|		ИЗ
				|			РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
				|		ГДЕ
				|			Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
				|			И Т.Количество < 0
				|			И Т.Склад В(&Склад)
				|			И Т.Номенклатура = &Номенклатура
				|		СГРУППИРОВАТЬ ПО
				|			Т.Характеристика
				|	) КАК ОстаткиИзЗаказов
				|	ПО 
				|		(ОстаткиИзЗаказов.Характеристика = ХарактеристикиНоменклатуры.Ссылка)";
				
			КонецЕсли;
			
		Иначе
			
			Если ТипСписка = "СписокНоменклатура" Или ТипСписка = "СписокНоменклатураПоставщика" Тогда
				
				Если ИспользоватьХарактеристикиНоменклатуры Тогда
					
					ПодстрокаЗамены = "
					| ЛЕВОЕ СОЕДИНЕНИЕ(
					| ВЫБРАТЬ
					| Т.Номенклатура КАК Номенклатура,
					| СУММА(Т.Количество) КАК Количество
					| ИЗ
					| РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК Т
					| ГДЕ
					| Т.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1)
					| И Т.Количество < 0
					| И Т.Склад = &Склад
					| СГРУППИРОВАТЬ ПО
					| Т.Номенклатура
					| ) КАК ОстаткиИзЗаказов
					| ПО 
					| (ОстаткиИзЗаказов.Номенклатура = СправочникНоменклатура.Ссылка)
					|";
					
				Иначе
					
					ПодстрокаЗамены = "
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ОстаткиИзЗаказов
					|		ПО (ОстаткиИзЗаказов.Склад = &Склад)
					|		И (ОстаткиИзЗаказов.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
					|		И (ОстаткиИзЗаказов.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
					|		И (ОстаткиИзЗаказов.Номенклатура = СправочникНоменклатура.Ссылка)
					|		И (ОстаткиИзЗаказов.Количество < 0)
					|";
					
				КонецЕсли;
				
			ИначеЕсли ТипСписка = "СписокХарактеристики" Тогда
				
				ПодстрокаЗамены = "
				|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДоступныеОстаткиПланируемыхПоступлений КАК ОстаткиИзЗаказов
				|		ПО (ОстаткиИзЗаказов.Склад = &Склад)
				|		И (ОстаткиИзЗаказов.Номенклатура = &Номенклатура)
				|		И (ОстаткиИзЗаказов.ДатаДоступности = ДАТАВРЕМЯ(1, 1, 1))
				|		И (ОстаткиИзЗаказов.Характеристика = ХарактеристикиНоменклатуры.Ссылка)
				|		И (ОстаткиИзЗаказов.Количество < 0)
				|";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПодстрокаЗамены;
	
КонецФункции

// Подставляет значения в шаблон текста запроса.
//
// Параметры:
//	 ШаблонТекстЗапроса - Строка - шаблон текста запроса,
//	 ТипСписка - Строка - тип списка формы подбора,
//	 Форма - УправляемаяФорма - форма подбора товаров.
//
// Возвращаемое значение:
//	 Строка - текст запроса заполненный по шаблону.
//
Функция ПодставитьЗначенияПараметровВШаблонТекстаЗапроса(Знач ШаблонТекстЗапроса, ТипСписка, Форма)
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	
	// Вспомогательные параметры для определения значений подстановки в шаблон текста запроса.
	Если ЭтоФормаЧекаККМ Тогда
		НесколькоСкладов = Ложь;
	Иначе
		Если ЭтоФормаПомощникаПродаж Тогда
			Если Не ЗначениеЗаполнено(Форма.Объект.Склад) Тогда
				НесколькоСкладов = Истина; // будут отображены остатки по всем складам
			ИначеЕсли Форма.Объект.Склад.ЭтоГруппа Тогда
				НесколькоСкладов = Истина;
			Иначе
				НесколькоСкладов = Ложь;
			КонецЕсли;
		Иначе
			НесколькоСкладов = (Форма.Склады.Количество() > 1);
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоФормаПомощникаПродаж Тогда
		Соглашение = Форма.Объект.Соглашение;
		ДатаПодбора = ТекущаяДата();
	Иначе
		ДатаПодбора = Форма.Дата;
	КонецЕсли;
	
	ЕстьЦеныВБудущем = Ложь;
	НесколькоВидовЦен = Ложь;
	ТолькоСЦенами = Ложь;
	
	Если ЭтоФормаПодбораВДокументыПродажи Или ЭтоФормаПомощникаПродаж Тогда
		
		ВидыЦен = Новый Массив();
		ЕстьЦеныВБудущем = Ложь;
		НесколькоВидовЦен = Ложь;
		
		Если ЭтоФормаПодбораВДокументыПродажи Тогда
			Если Форма.РежимПодбораБезСуммовыхПараметров Тогда
				ВидыЦен = Новый Массив();
				ЕстьЦеныВБудущем = Ложь;
				НесколькоВидовЦен = Ложь;
			Иначе
				ВидыЦен = ВидыЦенПоСоглашениюсКлиентом(Соглашение);
				ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(ДатаПодбора, ВидыЦен);
				НесколькоВидовЦен = (ВидыЦен.Количество() > 1);
			КонецЕсли;
		Иначе
			ВидыЦен = ВидыЦенПоСоглашениюсКлиентом(Соглашение);
			ЕстьЦеныВБудущем = ЕстьЗначенияЦенПозжеДатыПодбора(ДатаПодбора, ВидыЦен);
			НесколькоВидовЦен = (ВидыЦен.Количество() > 1);
		КонецЕсли;
		
		Если ЭтоФормаПодбораВДокументыПродажи Тогда
			ТолькоСЦенами = Форма.ТолькоСЦенами;
		КонецЕсли;
		
	КонецЕсли; 
	
	ИспользоватьХарактеристикиНоменклатуры = Ложь;
	Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		Если Форма.ИспользоватьФильтры
			И Форма.ВариантНавигации = "ПоСвойствам" 
			И ЗначениеЗаполнено(Форма.ВидНоменклатуры) Тогда	
			ИспользованиеХарактеристик = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ВидНоменклатуры,"ИспользованиеХарактеристик");
			Если ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать Тогда	
				ИспользоватьХарактеристикиНоменклатуры = Истина;
			КонецЕсли;
		Иначе	
			ИспользоватьХарактеристикиНоменклатуры = Истина;
		КонецЕсли;	
	КонецЕсли;		
	
	ПараметрыЗамены = Новый Структура;
	ПараметрыЗамены.Вставить("ТипСписка",ТипСписка);
	ПараметрыЗамены.Вставить("НесколькоСкладов",НесколькоСкладов);
	ПараметрыЗамены.Вставить("НесколькоВидовЦен",НесколькоВидовЦен);
	ПараметрыЗамены.Вставить("ЕстьЦеныВБудущем",ЕстьЦеныВБудущем);
	ПараметрыЗамены.Вставить("ТолькоСЦенами",ТолькоСЦенами);
	ПараметрыЗамены.Вставить("ИспользоватьХарактеристикиНоменклатуры",ИспользоватьХарактеристикиНоменклатуры);
		
	МассивПодстрокПоиска = ПараметрыШаблонаТекстаЗапроса();
	
	Для каждого ПодстрокаПоиска Из МассивПодстрокПоиска Цикл
		
		ПодстрокаЗамены = ПодстрокаЗаменыПараметраШаблонаТекстаЗапроса(ПодстрокаПоиска, ПараметрыЗамены);
		ШаблонТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, ПодстрокаПоиска, ПодстрокаЗамены);
		
	КонецЦикла;
	
	Возврат ШаблонТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для получения информации о цене продажи товара.
//
// Параметры:
//	 СоставРазделовЗапроса - Массив, Неопределено - переменная в которую записывается
//										массив строк, состав разделов текста запроса.
//
// Возвращаемое значение:
//	 Строка - текст запроса для получения информации о цене продажи товара.
//
Функция ТекстЗапросаЦенаПродажиТовара(СоставРазделовЗапроса) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив;
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("ЦенаПродажиТовара");
	
	Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА СоглашениеТовары.ВидЦены
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА СоглашениеШапка.ВидЦен
	|	КОНЕЦ КАК ВидЦены,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА 1
	|		КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|			ТОГДА 2
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|				И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА 3
	|		КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|				И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|					ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|				И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|			ТОГДА 4
	|	КОНЕЦ КАК Описание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|			ТОГДА СоглашениеТовары.Упаковка
	|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка))
	|	КОНЕЦ КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатуры.Упаковка.Коэффициент, 1) КАК Коэффициент,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|				ТОГДА СоглашениеТовары.Цена
	|			КОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|							ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|							ТОГДА СоглашениеТовары.ВидЦены
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|								И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|						КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|								ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|								И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|									ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|								И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|							ТОГДА СоглашениеШапка.ВидЦен
	|					КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					И ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) > 0
	|				ТОГДА ЦеныНоменклатуры.Цена * ВЫБОР
	|						КОГДА &Валюта <> ЦеныНоменклатуры.Валюта
	|							ТОГДА ВЫБОР
	|									КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|											И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|										ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
	|			ТОГДА СоглашениеТовары.СрокПоставки
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
	|					ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
	|				ИНАЧЕ СоглашениеШапка.СрокПоставки
	|			КОНЕЦ
	|	КОНЕЦ КАК СрокПоставки
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
	|		ПО (СоглашениеТовары.Ссылка = &Соглашение)
	|			И (СоглашениеТовары.Номенклатура = &Номенклатура)
	|			И (СоглашениеТовары.Характеристика = &Характеристика)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Ссылка = &Номенклатура)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
	|		ПО (СоглашениеЦеновыеГруппы.Ссылка = &Соглашение)
	|			И (СоглашениеЦеновыеГруппы.ЦеноваяГруппа = СправочникНоменклатура.ЦеноваяГруппа)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|				ВидЦены В (&ВидыЦен)
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика) КАК ЦеныНоменклатуры
	|		ПО (ЦеныНоменклатуры.ВидЦены = ВЫБОР
	|				КОГДА ЕСТЬNULL(СоглашениеТовары.Цена, 0) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|				КОГДА СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL 
	|					ТОГДА СоглашениеТовары.ВидЦены
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL 
	|						И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеЦеновыеГруппы.ВидЦен
	|				КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|						ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL )
	|						И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL 
	|							ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
	|						И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
	|					ТОГДА СоглашениеШапка.ВидЦен
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатуры.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение";
	
	Возврат Текст;
	
КонецФункции

// Возвращает текст запроса для получения информации о цене закупки товара.
//
// Параметры:
//	 СоставРазделовЗапроса - Массив, Неопределено - переменная в которую записывается
//									массив строк, состав разделов текста запроса.
//
// Возвращаемое значение:
//	 Строка - текст запроса для получения информации о цене закупки товара.
//
Функция ТекстЗапросаЦенаЗакупкиТовара(СоставРазделовЗапроса) Экспорт
	
	Если СоставРазделовЗапроса = Неопределено Тогда
		СоставРазделовЗапроса = Новый Массив;
	КонецЕсли;
	
	СоставРазделовЗапроса.Добавить("ЦенаЗакупкиТовара");
	
	Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка, ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)) КАК Упаковка,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Упаковка.Коэффициент, 1) КАК Коэффициент,
	|	ВЫРАЗИТЬ(ЕСТЬNULL(ЦеныНоменклатурыПоставщиков.Цена, 0) * ВЫБОР
	|			КОГДА &Валюта <> ЦеныНоменклатурыПоставщиков.Валюта
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
	|								И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
	|							ТОГДА КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность / (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 1
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашениеШапка
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(
	|				КОНЕЦПЕРИОДА(&ТекущаяДата, ДЕНЬ),
	|				Соглашение = &Соглашение
	|					И УсловиеЦеныПоставщика = ЗНАЧЕНИЕ(Справочник.УсловияЦенПоставщиков.ПустаяСсылка)
	|					И Номенклатура = &Номенклатура
	|					И Характеристика = &Характеристика) КАК ЦеныНоменклатурыПоставщиков
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыСрезПоследнихВалютаЦены
	|		ПО (КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыПоставщиков.Валюта)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
	|		ПО (ИСТИНА)
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение
	|	И СправочникНоменклатура.Ссылка = &Номенклатура";
	
	Возврат Текст;
	
КонецФункции

// Возвращает строку - разделитель текстов запросов пакетного запроса.
//
// Возвращаемое значение:
//	 Строка - разделитель текстов запросов.
//
Функция РазделительПакетаЗапросов() Экспорт
	
	Разделитель = "
	|;
	|";
	
	Возврат Разделитель;
	
КонецФункции

#КонецОбласти

#Область УстановкаПараметровЗапросовДинамическихСписковНаФормахПодборов

// Вызывает процедуры установки свойств динамических списков (номенклатуры и характеристик) на форме подбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьСвойстваСписковФормыПодбора(Форма) Экспорт
	
	УстановитьТекстыЗапросовСписковФормыПодбора(Форма);
	УстановитьПараметрыСписковФормыПодбора(Форма);
	
КонецПроцедуры

// Устанавливает значения текстов запросов динамических списков на формах подборов.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьТекстыЗапросовСписковФормыПодбора(Форма) 
	
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	
	Форма.СписокНоменклатура.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма, "СписокНоменклатура");
	
	Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		Форма.СписокХарактеристики.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма, "СписокХарактеристики");
	КонецЕсли;
	
	Если ЭтоФормаПодбораВДокументыЗакупки И Форма.ИспользоватьНоменклатуруПоставщиков Тогда
		Форма.СписокНоменклатураПоставщика.ТекстЗапроса = ТекстЗапросаСпискаФормыПодбора(Форма, "СписокНоменклатураПоставщика");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает значения параметров динамических списков на форме подбора.
//
// Параметры:
//	 Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьПараметрыСписковФормыПодбора(Форма) Экспорт
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
		
	СписокНоменклатура   = Форма.СписокНоменклатура;
	СписокХарактеристики = Форма.СписокХарактеристики;
		
	Если ЭтоФормаПодбора Тогда
		
		МассивСкладов = Форма.Склады.ВыгрузитьЗначения();
		Склад = ?(МассивСкладов.Количество() > 1, МассивСкладов, ?(МассивСкладов.Количество() = 0, Справочники.Склады.ПустаяСсылка(), МассивСкладов[0]));
		
		Если Форма.Параметры.РежимПодбораБезСуммовыхПараметров Тогда
			МассивВидовЦен = Новый Массив();
		Иначе
			МассивВидовЦен = ВидыЦенПоСоглашениюсКлиентом(Форма.Параметры.Соглашение);
		КонецЕсли;
		
		Форма.ВидыЦен.ЗагрузитьЗначения(МассивВидовЦен);
		
		ВидыЦен = ?(МассивВидовЦен.Количество() > 1, МассивВидовЦен, ?(МассивВидовЦен.Количество() = 0, Справочники.ВидыЦен.ПустаяСсылка(), МассивВидовЦен[0]));
				
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Соглашение", Форма.Параметры.Соглашение);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Валюта",     Форма.Параметры.Валюта);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "Дата",       Форма.Параметры.Дата);
		ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокНоменклатура, "ВидыЦен",    ВидыЦен);
		
		Если Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
			
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Номенклатура",          Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ЕдиницаИзмерения",      Справочники.ЕдиницыИзмерения.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВладелецХарактеристик", Справочники.Номенклатура.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Валюта",                Форма.Параметры.Валюта);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "Дата",                  Форма.Параметры.Дата);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидыЦен",               ВидыЦен);
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ТипНоменклатуры",       Перечисления.ТипыНоменклатуры.ПустаяСсылка());
			ПодборТоваровКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокХарактеристики, "ВидНоменклатуры",       Справочники.ВидыНоменклатуры.ПустаяСсылка());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеВидимостьюСтраницСПараметрамиНавигации

// Устанавливает страницу варианта навигации на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьСтраницуВариантаНавигации(Форма)
	
	Если Форма.ВариантНавигации = "ПоИерархии" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
	ИначеЕсли Форма.ВариантНавигации = "" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияИерархияНоменклатуры;
		Форма.ВариантНавигации = "ПоИерархии";
	ИначеЕсли Форма.ВариантНавигации = "ПоСвойствам" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.НавигацияВидыНоменклатуры;
	ИначеЕсли Форма.ВариантНавигации = "Совместно" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.СтраницаПодобранныеТовары;
	ИначеЕсли Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
		СтраницаВариантаНавигации = Форма.Элементы.СтраницаТоварыДругогоКачества;
	КонецЕсли;
	
	Форма.Элементы.ВариантыНавигации.ТекущаяСтраница = СтраницаВариантаНавигации;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСДеревомОтбораПоСвойствамВидаНоменклатуры

// Возвращает структуру - текст запроса по дереву свойств вида номенклатуры
// и массив имен реквизитов номенклатуры по которым выполняется построение дерева свойств.
//
// Параметры:
//	ЕстьОтборПоРеквизитам (Булево) - признак наличия отбора по реквизитам,
//	ЕстьОтборПоДопРеквизитам (Булево) - признак наличия отбора по доп.реквизитам,
//	ЕстьОтборПоСегменту (Булево) - признак наличия отбора по сегменту.
//	РеквизитыБыстрогоОтбораНоменклатуры (Таблица значений) - таблица реквизитами быстрого отбора.
//
// Возвращаемое значение:
//	Структура.
//		- ТекстЗапроса (Строка) - текст запроса,
//		- МассивЗначений (Массив) - массив имен реквизитов номенклатуры у которых ссылочный тип.
//
Функция ТекстЗапросаПоДеревуСвойствВидаНоменклатуры(ЕстьОтборПоРеквизитам, ЕстьОтборПоДопРеквизитам, ЕстьОтборПоСегменту, РеквизитыБыстрогоОтбораНоменклатуры)
	
	Если ЕстьОтборПоРеквизитам Тогда
		
		РеквизитыНоменклатуры = Метаданные.Справочники.Номенклатура.Реквизиты;
		
		МассивНеиспользуемыхРеквизитов = Справочники.Номенклатура.НеиспользуемыеДляКонтроляЗаполненияИОтборовРеквизиты();
		
		ТекстВыбораРеквизитов                 = "";
		ТекстСвойстваНоменклатуры			  = "";
		ТекстВыбораРеквизитовПримитивныхТипов = "";
		
		МассивИменРеквизитов = Новый Массив;
		
		Для Каждого РеквизитНоменклатуры Из РеквизитыНоменклатуры Цикл
			
			Если МассивНеиспользуемыхРеквизитов.Найти(РеквизитНоменклатуры.Имя) = Неопределено 
				И РеквизитыБыстрогоОтбораНоменклатуры.Найти(РеквизитНоменклатуры.Имя, "ИмяРеквизита") <> Неопределено Тогда
				
				Если Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Строка"))
					И Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Дата"))
					И Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Число"))
					И Не РеквизитНоменклатуры.Тип.СодержитТип(Тип("Булево")) Тогда
					
					ТекстСвойстваНоменклатуры = ?(ТекстСвойстваНоменклатуры = "", "", ТекстСвойстваНоменклатуры + ",") + "
					|	СправочникНоменклатура." + РеквизитНоменклатуры.Имя;					
					
					ТекстВыбораРеквизитов = ТекстВыбораРеквизитов + "
					|		КОГДА СписокСвойств.ИмяРеквизита = """ + РеквизитНоменклатуры.Имя + """
					|			ТОГДА СправочникНоменклатура." + РеквизитНоменклатуры.Имя;
					
					МассивИменРеквизитов.Добавить(РеквизитНоменклатуры.Имя);
					
				Иначе
					
					Если РеквизитНоменклатуры.Тип.СодержитТип(Тип("Строка")) Тогда
						ЗначениеПоУмолчанию = """""";
						
					ИначеЕсли РеквизитНоменклатуры.Тип.СодержитТип(Тип("Дата")) Тогда
						ЗначениеПоУмолчанию = "ДАТАВРЕМЯ(1,1,1)";
						
					ИначеЕсли  РеквизитНоменклатуры.Тип.СодержитТип(Тип("Число")) Тогда
						ЗначениеПоУмолчанию = "0";
						
					ИначеЕсли РеквизитНоменклатуры.Тип.СодержитТип(Тип("Булево")) Тогда
						ЗначениеПоУмолчанию = "ЛОЖЬ";
						
					КонецЕсли;
					
					ТекстВыбораРеквизитовПримитивныхТипов = ТекстВыбораРеквизитовПримитивныхТипов + "
					|		КОГДА СписокСвойств.ИмяРеквизита = """ + РеквизитНоменклатуры.Имя + """
					|			ТОГДА " + ЗначениеПоУмолчанию;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстЗапросаПоСпискуСвойств = "
	|ВЫБРАТЬ
	|	ТаблицаРеквизитовОтбора.НомерСтроки            КАК НомерСтроки,
	|	ТаблицаРеквизитовОтбора.Свойство               КАК Свойство,
	|	ТаблицаРеквизитовОтбора.ИмяРеквизита           КАК ИмяРеквизита,
	|	ТаблицаРеквизитовОтбора.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	ТаблицаРеквизитовОтбора.ЭтоДопРеквизит         КАК ЭтоДопРеквизит,
	|	ТаблицаРеквизитовОтбора.ТипЗначения            КАК ТипЗначения
	|ПОМЕСТИТЬ СписокСвойств
	|ИЗ
	|	&ТаблицаРеквизитов КАК ТаблицаРеквизитовОтбора
	|;";
	
	ТекстЗапросаЗначенийДопРеквизитов = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.Значение КАК ЗначениеОтбора,
	| 	ЛОЖЬ 										 КАК ТипЗначениеОтбора,
	|	НоменклатураДополнительныеРеквизиты.Свойство КАК ИмяРеквизита,
	|	ИСТИНА КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ПОМЕСТИТЬ СписокЗначенийОтбора
	|ИЗ
	|	Справочник.Номенклатура.ДополнительныеРеквизиты КАК НоменклатураДополнительныеРеквизиты
	|ГДЕ
	|	НоменклатураДополнительныеРеквизиты.Ссылка.ВидНоменклатуры = &ВидНоменклатуры
	|	И НоменклатураДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СписокСвойств.Свойство
	|			ИЗ
	|				СписокСвойств
	|			ГДЕ
	|				СписокСвойств.ЭтоДопРеквизит)
	|	%ТекстУсловияОтбораПоСегменту%
	|;";
	
	ТекстУсловияОтбораПоСегменту = "";
	
	Если ЕстьОтборПоСегменту Тогда
		
		ТекстУсловияОтбораПоСегменту = "
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.НоменклатураСегмента КАК Сегменты
		|			ГДЕ
		|				Сегменты.Номенклатура = НоменклатураДополнительныеРеквизиты.Ссылка
		|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
		|";
		
	КонецЕсли; 
	
	ТекстЗапросаЗначенийДопРеквизитов = СтрЗаменить(ТекстЗапросаЗначенийДопРеквизитов, "%ТекстУсловияОтбораПоСегменту%", ТекстУсловияОтбораПоСегменту);
	
	ТекстЗапросаПоДопРеквизитам = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки                          КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита               КАК ПредставлениеРеквизита,
	|	НоменклатураДополнительныеРеквизиты.Свойство       КАК Свойство,
	|	НоменклатураДополнительныеРеквизиты.ЗначениеОтбора КАК ЗначениеОтбора,
	| 	ЛОЖЬ 											   КАК ТипЗначениеОтбора,
	|	НоменклатураДополнительныеРеквизиты.ИмяРеквизита   КАК ИмяРеквизита,
	|	НоменклатураДополнительныеРеквизиты.ЭтоДопРеквизит КАК ЭтоДопРеквизит,
	|	НоменклатураДополнительныеРеквизиты.Отбор          КАК Отбор
	|ИЗ
	|	СписокЗначенийОтбора КАК НоменклатураДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСвойств КАК СписокСвойств
	|		ПО НоменклатураДополнительныеРеквизиты.Свойство = СписокСвойств.Свойство
	|ГДЕ
	|	СписокСвойств.ЭтоДопРеквизит
	|	И СписокСвойств.ТипЗначения <> ""Строка""
	|	И СписокСвойств.ТипЗначения <> ""Дата""
	|	И СписокСвойств.ТипЗначения <> ""Число""
	|	И СписокСвойств.ТипЗначения <> ""Булево""";
	
	ТекстЗапросаПоДопРеквизитамПримитивныхТипов = "
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки                       КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита            КАК ПредставлениеРеквизита,
	|	СписокСвойств.Свойство                          КАК Свойство,
	|	ВЫБОР
	|		КОГДА СписокСвойств.ТипЗначения = ""Строка""
	|			ТОГДА """"
	|		КОГДА СписокСвойств.ТипЗначения = ""Дата""
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СписокСвойств.ТипЗначения = ""Число""
	|			ТОГДА 0
	|		КОГДА СписокСвойств.ТипЗначения = ""Булево""
	|			ТОГДА ЛОЖЬ
	|	КОНЕЦ                                           КАК ЗначениеОтбора,
	| 	ЛОЖЬ 											КАК ТипЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита                      КАК ИмяРеквизита,
	|	СписокСвойств.ЭтоДопРеквизит                    КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	СписокСвойств.ЭтоДопРеквизит
	|	И (СписокСвойств.ТипЗначения = ""Строка""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Дата""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Число""
	|	ИЛИ СписокСвойств.ТипЗначения = ""Булево"")";
	
	ТекстОбъединения = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|";
	
	ТекстЗапросаПоСвойствамНоменклатуры = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ" + ТекстСвойстваНоменклатуры + "
	|ПОМЕСТИТЬ СвойстваНоменклатуры
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|ГДЕ
	|	СправочникНоменклатура.ВидНоменклатуры = &ВидНоменклатуры
	|	%ТекстУсловияОтбораПоСегменту%
	|;";
	
	ТекстЗапросаПоРеквизитам = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	СписокСвойств.ПредставлениеРеквизита КАК Свойство,
	|	" + ?(ТекстВыбораРеквизитов = "","NULL","ВЫБОР" + ТекстВыбораРеквизитов + "
	|	КОНЕЦ") + "                                  КАК ЗначениеОтбора,
	|	" + ?(ТекстВыбораРеквизитов = "","ТИПЗНАЧЕНИЯ(NULL)","ТИПЗНАЧЕНИЯ(ВЫБОР" + ТекстВыбораРеквизитов + "
	|	КОНЕЦ)") + "                                  КАК ТипЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита КАК ИмяРеквизита,
	|	ЛОЖЬ КАК ЭтоДопРеквизит,
	|	ЛОЖЬ КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СвойстваНоменклатуры КАК СправочникНоменклатура
	|		ПО (Истина)
	|ГДЕ
	|	НЕ СписокСвойств.ЭтоДопРеквизит
	|";
	
	ТекстУсловияОтбораПоСегменту = "";
	
	Если ЕстьОтборПоСегменту Тогда
		
		ТекстУсловияОтбораПоСегменту = "
		|	И 1 В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				1
		|			ИЗ
		|				РегистрСведений.НоменклатураСегмента КАК Сегменты
		|			ГДЕ
		|				Сегменты.Номенклатура = СправочникНоменклатура.Ссылка
		|				И Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры))
		|";
		
	КонецЕсли; 
	
	ТекстЗапросаПоСвойствамНоменклатуры = СтрЗаменить(ТекстЗапросаПоСвойствамНоменклатуры, "%ТекстУсловияОтбораПоСегменту%", ТекстУсловияОтбораПоСегменту);
	
	ТекстЗапросаПоРеквизитамПримитивныхТипов = "
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки              КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита   КАК ПредставлениеРеквизита,
	|	СписокСвойств.ПредставлениеРеквизита   КАК Свойство,
	|	" + ?(ТекстВыбораРеквизитовПримитивныхТипов = "","NULL","ВЫБОР" + ТекстВыбораРеквизитовПримитивныхТипов + "
	|	КОНЕЦ") + "                                  КАК ЗначениеОтбора,
	| 	ЛОЖЬ 								   КАК ТипЗначениеОтбора,
	|	СписокСвойств.ИмяРеквизита             КАК ИмяРеквизита,
	|	ЛОЖЬ                                   КАК ЭтоДопРеквизит,
	|	ЛОЖЬ                                   КАК Отбор
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	(Не СписокСвойств.ЭтоДопРеквизит)";
	
	ТекстИтогов = "
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Свойство,
	|	ТипЗначениеОтбора";
	
	ТекстЗапросаПоДереву = "";
	
	Если ЕстьОтборПоРеквизитам И Не ЕстьОтборПоДопРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаПоСвойствамНоменклатуры + ТекстЗапросаПоРеквизитам + ТекстОбъединения + 
		ТекстЗапросаПоРеквизитамПримитивныхТипов + ТекстИтогов;
		
	ИначеЕсли ЕстьОтборПоДопРеквизитам И Не ЕстьОтборПоРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаЗначенийДопРеквизитов + ТекстЗапросаПоДопРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоДопРеквизитамПримитивныхТипов + ТекстИтогов;
		
	ИначеЕсли ЕстьОтборПоДопРеквизитам И ЕстьОтборПоРеквизитам Тогда
		
		ТекстЗапросаПоДереву = 
		ТекстЗапросаПоСпискуСвойств + ТекстЗапросаЗначенийДопРеквизитов + ТекстЗапросаПоСвойствамНоменклатуры + ТекстЗапросаПоДопРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоДопРеквизитамПримитивныхТипов + ТекстОбъединения + ТекстЗапросаПоРеквизитам + 
		ТекстОбъединения + ТекстЗапросаПоРеквизитамПримитивныхТипов + ТекстИтогов;
		
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ТекстЗапроса, МассивЗначений", ТекстЗапросаПоДереву, МассивИменРеквизитов);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Заполняет дерево отборов по свойствам вида номенклатуры выбранного на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ЗаполнитьДеревоОтборовНоменклатуры(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	ЗаполнитьДеревоЗначенийОтборовНоменклатуры(Форма, ДеревоОтборов);
	
	// Если для выбранного на форме вида номенклатуры включен учет по характеристикам,
	// то дополнить дерево отборов свойствами и значениями свойств для характеристик.
	ИспользуютсяХарактеристики = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.ВидНоменклатуры, "ИспользоватьХарактеристики");
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) 
		И ИспользуютсяХарактеристики Тогда
		ЗаполнитьДеревоЗначенийОтборовХарактеристикВидаНоменклатуры(Форма, ДеревоОтборов);
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Заполняет дерево значений отборов формы (списка, подбора) значениями
// отбора для номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
Процедура ЗаполнитьДеревоЗначенийОтборовНоменклатуры(Форма, ДеревоОтборов)
	
	СтруктураЗапроса = ТекстЗапросаПоДеревуСвойствВидаНоменклатуры(Ложь, Ложь, Ложь,Новый ТаблицаЗначений());
	ТекстЗапроса = СтруктураЗапроса.ТекстЗапроса;
	Если Не ЗначениеЗаполнено(ТекстЗапроса) Тогда
		Возврат
	КонецЕсли;
	
	ЗапросПоДеревуОтборов = Новый Запрос;
	ЗапросПоДеревуОтборов.Текст = ТекстЗапроса;
	ЗапросПоДеревуОтборов.УстановитьПараметр("ВидНоменклатуры",   Форма.ВидНоменклатуры);
	
	ВыборкаПоСвойствам = ЗапросПоДеревуОтборов.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоСвойствам.Следующий() Цикл
		
		ВыборкаПоРеквизитам = ВыборкаПоСвойствам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоРеквизитам.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаПоРеквизитам.ТипЗначениеОтбора) <> Тип("Булево") Тогда
				МетаданныеСвойства = Метаданные.НайтиПоТипу(ВыборкаПоРеквизитам.ТипЗначениеОтбора);
				
				Если МетаданныеСвойства = Неопределено ИЛИ Не ПравоДоступа("Чтение", МетаданныеСвойства) Тогда
					Продолжить
				КонецЕсли;
			КонецЕсли;	
			
			ВыборкаЗначения = ВыборкаПоРеквизитам.Выбрать();
			
			Если ВыборкаЗначения.Количество() = 0 Тогда
				Продолжить
			КонецЕсли;     
			
			СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
			СтрокаРеквизита.ИмяРеквизита = ВыборкаПоРеквизитам.Свойство;
			
			ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ВыборкаПоРеквизитам);
			ВыборкаЗначения.Следующий();
			
			СтрокаРеквизита.Представление = ВыборкаЗначения.ПредставлениеРеквизита;
			ВыборкаЗначения.Сбросить();
			
			Пока ВыборкаЗначения.Следующий() Цикл
				
				Если ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число")
					Или ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Дата") Тогда
					
					СтрокаРеквизита.ИнтервалОт            = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
					СтрокаРеквизита.ИнтервалДо            = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
					СтрокаРеквизита.ИмяРеквизита          = ВыборкаЗначения.ИмяРеквизита;
					СтрокаРеквизита.ЭтоДопРеквизит        = ВыборкаЗначения.ЭтоДопРеквизит;
					СтрокаРеквизита.ФиксированноеЗначение = Истина;
					СтрокаРеквизита.ОтборДоступен         = Истина;
					СтрокаРеквизита.ЗначениеОтбора        = ВыборкаЗначения.ЗначениеОтбора;
					СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
					
					Прервать;
					
				ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Булево") Тогда
					
					СтрокаРеквизита.ИмяРеквизита   = ВыборкаЗначения.ИмяРеквизита;
					СтрокаРеквизита.ОтборДоступен  = Истина;
					СтрокаРеквизита.ЗначениеОтбора = Истина;
					СтрокаРеквизита.ЭтоДопРеквизит = ВыборкаЗначения.ЭтоДопРеквизит;
					
					Прервать;
					
				ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Строка") Тогда
					
					СтрокаРеквизита.ИмяРеквизита          = ВыборкаЗначения.ИмяРеквизита;
					СтрокаРеквизита.ЭтоДопРеквизит        = ВыборкаЗначения.ЭтоДопРеквизит;
					СтрокаРеквизита.ОтборДоступен         = Истина;
					СтрокаРеквизита.ЗначениеОтбора        = "";
					СтрокаРеквизита.ФиксированноеЗначение = Истина;
					СтрокаРеквизита.ПредставлениеОтбора   = НСтр("ru = '<не задано>'");
					
					Прервать;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ВыборкаЗначения.ЗначениеОтбора) Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗначения, ВыборкаЗначения);
				
				СтрокаЗначения.Представление = ВыборкаЗначения.ЗначениеОтбора;
				СтрокаЗначения.ОтборДоступен = Истина;
				
			КонецЦикла;
			
			Если СтрокаРеквизита.Строки.Количество() = 0 И Не СтрокаРеквизита.ОтборДоступен Тогда
				ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
			ИначеЕсли СтрокаРеквизита.Строки.Количество() > 0 И Не СтрокаРеквизита.ОтборДоступен Тогда
				СтрокаРеквизита.Строки.Сортировать("Представление");
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Заполняет дерево значений отборов формы (списка, подбора) значениями отбора
// для характеристик.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//	ДеревоОтборов (ДеревоЗначений) - дерево значений отборов свойств.
//
Процедура ЗаполнитьДеревоЗначенийОтборовХарактеристик(Форма, ДеревоОтборов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораХарактеристик.НомерСтроки КАК НомерСтроки,
	|	РеквизитыБыстрогоОтбораХарактеристик.Свойство КАК Свойство,
	|	РеквизитыБыстрогоОтбораХарактеристик.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.ЭтоДопРеквизит
	|ПОМЕСТИТЬ СписокСвойств
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораХарактеристик КАК РеквизитыБыстрогоОтбораХарактеристик
	|ГДЕ
	|	РеквизитыБыстрогоОтбораХарактеристик.Ссылка = &ВидНоменклатуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДополнительныеРеквизиты.Значение КАК ЗначениеОтбора,
	|	ХарактеристикиДополнительныеРеквизиты.Свойство.Представление КАК ИмяРеквизита,
	|	ЛОЖЬ КАК Отбор
	|ПОМЕСТИТЬ СписокЗначенийОтбора
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиДополнительныеРеквизиты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец) = ТИП(Справочник.ВидыНоменклатуры)
	|				ТОГДА ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
	|			ИНАЧЕ ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры = &ВидНоменклатуры
	|		КОНЕЦ
	|	И ХарактеристикиДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СписокСвойств.Свойство
	|			ИЗ
	|				СписокСвойств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки КАК НомерСтроки,
	|	ХарактеристикиДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДополнительныеРеквизиты.ЗначениеОтбора КАК ЗначениеОтбора,
	|	ХарактеристикиДополнительныеРеквизиты.ИмяРеквизита КАК ИмяРеквизита,
	|	ХарактеристикиДополнительныеРеквизиты.Отбор КАК Отбор,
	|	СписокСвойств.ЭтоДопРеквизит
	|ИЗ
	|	СписокЗначенийОтбора КАК ХарактеристикиДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСвойств КАК СписокСвойств
	|		ПО ХарактеристикиДополнительныеРеквизиты.Свойство = СписокСвойств.Свойство
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Свойство";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
	
	ВыборкаПоРеквизитам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НеЗадано = НСтр("ru = '<не задано>'");
	ПустаяДата = Дата('00010101');
	
	Пока ВыборкаПоРеквизитам.Следующий() Цикл
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		СтрокаРеквизита.ИмяРеквизита = ВыборкаПоРеквизитам.Свойство;
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ВыборкаПоРеквизитам);
		СтрокаРеквизита.Представление = ?(ТипЗнч(ВыборкаПоРеквизитам.Свойство) = Тип("Строка"), ВыборкаПоРеквизитам.Свойство, ВыборкаПоРеквизитам.Свойство.Наименование);
		
		ВыборкаЗначения = ВыборкаПоРеквизитам.Выбрать();
		
		Пока ВыборкаЗначения.Следующий() Цикл
			
			ТипЗначенияОтбора = ТипЗнч(ВыборкаЗначения.ЗначениеОтбора);
			
			Если ТипЗначенияОтбора = Тип("Число") Или ТипЗначенияОтбора = Тип("Дата") Тогда
				
				ЗначениеИнтервала = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, ПустаяДата);
				
				СтрокаРеквизита.ИнтервалОт = ЗначениеИнтервала;
				СтрокаРеквизита.ИнтервалДо = ЗначениеИнтервала;
				СтрокаРеквизита.ИмяРеквизита = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ОтборДоступен = Истина;
				СтрокаРеквизита.ЗначениеОтбора = ВыборкаЗначения.ЗначениеОтбора;
				СтрокаРеквизита.ПредставлениеОтбора = НеЗадано;
				СтрокаРеквизита.ЭтоДопРеквизит = ВыборкаЗначения.ЭтоДопРеквизит;
				
				Прервать;
				
			ИначеЕсли ТипЗначенияОтбора = Тип("Булево") Тогда
				
				СтрокаРеквизита.ИмяРеквизита = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборДоступен = Истина;
				СтрокаРеквизита.ЗначениеОтбора = Истина;
				СтрокаРеквизита.ЭтоДопРеквизит = ВыборкаЗначения.ЭтоДопРеквизит;
				
				Прервать;
				
			ИначеЕсли ТипЗначенияОтбора = Тип("Строка") Тогда
				
				СтрокаРеквизита.ИмяРеквизита = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборДоступен = Истина;
				СтрокаРеквизита.ЗначениеОтбора = "";
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора = НеЗадано;
				СтрокаРеквизита.ЭтоДопРеквизит = ВыборкаЗначения.ЭтоДопРеквизит;
				
				Прервать;
				
			КонецЕсли;
			
			СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЗначения, ВыборкаЗначения);
			СтрокаЗначения.Представление = ВыборкаЗначения.ЗначениеОтбора;
			СтрокаЗначения.ОтборДоступен = Истина;
			
		КонецЦикла;
		
		Если СтрокаРеквизита.Строки.Количество() = 0 И Не СтрокаРеквизита.ОтборДоступен Тогда
			ДеревоОтборов.Строки.Удалить(СтрокаРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет дерево отборов на форме значениями быстрого отбора
// и элементами значений быстрого отбора. Используется в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора,
//	ДеревоОтборов (ДеревоЗначений) - дерево отборов на форме подбора.
//
Процедура ЗаполнитьДеревоЗначенийОтборовХарактеристикВидаНоменклатуры(Форма, ДеревоОтборов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораХарактеристик.НомерСтроки КАК НомерСтроки,
	|	РеквизитыБыстрогоОтбораХарактеристик.Свойство КАК Свойство,
	|	РеквизитыБыстрогоОтбораХарактеристик.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.Свойство.Наименование КАК ПредставлениеРеквизита,
	|	ВЫБОР
	|		КОГДА НЕ РеквизитыБыстрогоОтбораХарактеристик.Свойство ЕСТЬ NULL 
	|			ТОГДА РеквизитыБыстрогоОтбораХарактеристик.Свойство.ТипЗначения
	|	КОНЕЦ КАК ОписаниеТипаЗначения
	|ИЗ
	|	Справочник.ВидыНоменклатуры.РеквизитыБыстрогоОтбораХарактеристик КАК РеквизитыБыстрогоОтбораХарактеристик
	|ГДЕ
	|	РеквизитыБыстрогоОтбораХарактеристик.Ссылка = &ВидНоменклатуры";
	
	Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	КолонкаТипов = Результат.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(6,ДопустимаяДлина.Фиксированная)));
	
	Для Каждого Строка Из Результат Цикл
		
		Если ЗначениеЗаполнено(Строка.ОписаниеТипаЗначения) Тогда
			
			Если Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Строка")) Тогда
				Строка.ТипЗначения = "Строка";
			ИначеЕсли Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Дата")) Тогда
				Строка.ТипЗначения = "Дата";
			ИначеЕсли Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Число")) Тогда
				Строка.ТипЗначения = "Число";
			ИначеЕсли Строка.ОписаниеТипаЗначения.СодержитТип(Тип("Булево")) Тогда
				Строка.ТипЗначения = "Булево";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Колонки.Удалить("ОписаниеТипаЗначения");
	
	ЕстьОтборПоСегменту = ЗначениеЗаполнено(Форма.СегментНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеквизитыБыстрогоОтбораХарактеристик.НомерСтроки КАК НомерСтроки,
	|	РеквизитыБыстрогоОтбораХарактеристик.Свойство КАК Свойство,
	|	РеквизитыБыстрогоОтбораХарактеристик.ИмяРеквизита КАК ИмяРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	РеквизитыБыстрогоОтбораХарактеристик.ТипЗначения КАК ТипЗначения
	|ПОМЕСТИТЬ СписокСвойств
	|ИЗ
	|	&ТаблицаСвойствХарактеристик КАК РеквизитыБыстрогоОтбораХарактеристик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХарактеристикиДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДополнительныеРеквизиты.Значение КАК ЗначениеОтбора,
	|	ХарактеристикиДополнительныеРеквизиты.Свойство.Наименование КАК ИмяРеквизита,
	|	ЛОЖЬ КАК Отбор
	|ПОМЕСТИТЬ СписокЗначенийОтбора
	|ИЗ
	|	Справочник.ХарактеристикиНоменклатуры.ДополнительныеРеквизиты КАК ХарактеристикиДополнительныеРеквизиты
	|ГДЕ ";
	Если ЕстьОтборПоСегменту Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец) = ТИП(Справочник.ВидыНоменклатуры)
		|				ТОГДА ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
		|					И 1 В (ВЫБРАТЬ ПЕРВЫЕ 1
		|							1
		|						 ИЗ
		|							РегистрСведений.НоменклатураСегмента КАК Сегменты
		|						 ГДЕ
		|							Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры)
		|                           И Сегменты.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры)
		|			ИНАЧЕ ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры = &ВидНоменклатуры	
		|				И 1 В
		|					(ВЫБРАТЬ ПЕРВЫЕ 1
		|						1
		|					 ИЗ
		|						РегистрСведений.НоменклатураСегмента КАК Сегменты
		|					 ГДЕ
		|						Сегменты.Сегмент В ИЕРАРХИИ (&СегментНоменклатуры)
		|						И Сегменты.Номенклатура = ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец)
		|		КОНЕЦ";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец) = ТИП(Справочник.ВидыНоменклатуры)
		|				ТОГДА ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец = &ВидНоменклатуры
		|			ИНАЧЕ ХарактеристикиДополнительныеРеквизиты.Ссылка.Владелец.ВидНоменклатуры = &ВидНоменклатуры	
		|		КОНЕЦ
		|";
	КонецЕсли; 
	Запрос.Текст = Запрос.Текст + "
	|	И ХарактеристикиДополнительныеРеквизиты.Свойство В
	|			(ВЫБРАТЬ
	|				СписокСвойств.Свойство
	|			ИЗ
	|				СписокСвойств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокСвойств.НомерСтроки КАК НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита КАК ПредставлениеРеквизита,
	|	ХарактеристикиДополнительныеРеквизиты.Свойство КАК Свойство,
	|	ХарактеристикиДополнительныеРеквизиты.ЗначениеОтбора КАК ЗначениеОтбора,
	|	ХарактеристикиДополнительныеРеквизиты.ИмяРеквизита КАК ИмяРеквизита,
	|	ХарактеристикиДополнительныеРеквизиты.Отбор КАК Отбор
	|ИЗ
	|	СписокЗначенийОтбора КАК ХарактеристикиДополнительныеРеквизиты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокСвойств КАК СписокСвойств
	|		ПО ХарактеристикиДополнительныеРеквизиты.Свойство = СписокСвойств.Свойство	
	|ГДЕ
	|	СписокСвойств.ТипЗначения <> ""Строка""
	|	И СписокСвойств.ТипЗначения <> ""Дата""
	|	И СписокСвойств.ТипЗначения <> ""Число""
	|	И СписокСвойств.ТипЗначения <> ""Булево""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокСвойств.НомерСтроки,
	|	СписокСвойств.ПредставлениеРеквизита,
	|	СписокСвойств.Свойство,
	|	ВЫБОР
	|		КОГДА СписокСвойств.ТипЗначения = ""Строка""
	|			ТОГДА """"
	|		КОГДА СписокСвойств.ТипЗначения = ""Дата""
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОГДА СписокСвойств.ТипЗначения = ""Число""
	|			ТОГДА 0
	|		КОГДА СписокСвойств.ТипЗначения = ""Булево""
	|			ТОГДА ЛОЖЬ
	|	КОНЕЦ,
	|	СписокСвойств.ИмяРеквизита,
	|	ЛОЖЬ
	|ИЗ
	|	СписокСвойств КАК СписокСвойств
	|ГДЕ
	|	(СписокСвойств.ТипЗначения = ""Строка""
	|			ИЛИ СписокСвойств.ТипЗначения = ""Дата""
	|			ИЛИ СписокСвойств.ТипЗначения = ""Число""
	|			ИЛИ СписокСвойств.ТипЗначения = ""Булево"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Свойство";
			
	Запрос.УстановитьПараметр("ТаблицаСвойствХарактеристик", Результат);
	Запрос.УстановитьПараметр("ВидНоменклатуры", Форма.ВидНоменклатуры);
	Если ЕстьОтборПоСегменту Тогда
		Запрос.УстановитьПараметр("СегментНоменклатуры", Форма.СегментНоменклатуры);
	КонецЕсли; 
	
	ВыборкаПоРеквизитам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоРеквизитам.Следующий() Цикл
		
		ВыборкаЗначения = ВыборкаПоРеквизитам.Выбрать();
		
		Если ВыборкаЗначения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаРеквизита = ДеревоОтборов.Строки.Добавить();
		СтрокаРеквизита.ОтборХарактеристик = Истина;
		СтрокаРеквизита.ЭтоДопРеквизит = Истина;
		СтрокаРеквизита.ИмяРеквизита = ВыборкаПоРеквизитам.Свойство;
		
		ЗаполнитьЗначенияСвойств(СтрокаРеквизита, ВыборкаПоРеквизитам);	
		ВыборкаЗначения.Следующий();
		
		СтрокаРеквизита.Представление = ВыборкаЗначения.ПредставлениеРеквизита;
		ВыборкаЗначения.Сбросить();
		
		Пока ВыборкаЗначения.Следующий() Цикл
			
			Если ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число")
				Или ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Дата") Тогда
				
				СтрокаРеквизита.ИнтервалОт = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
				СтрокаРеквизита.ИнтервалДо = ?(ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Число"), 0, Дата('00010101'));
				СтрокаРеквизита.ИмяРеквизита = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборХарактеристик = Истина;
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ОтборДоступен = Истина;
				СтрокаРеквизита.ЗначениеОтбора = ВыборкаЗначения.ЗначениеОтбора;
				СтрокаРеквизита.ПредставлениеОтбора = НСтр("ru = '<не задано>'");
				
				Прервать;
				
			ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Булево") Тогда
				
				СтрокаРеквизита.ИмяРеквизита = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборХарактеристик = Истина;
				СтрокаРеквизита.ОтборДоступен = Истина;
				СтрокаРеквизита.ЗначениеОтбора = Истина;
				
				Прервать;
				
			ИначеЕсли ТипЗнч(ВыборкаЗначения.ЗначениеОтбора) = Тип("Строка") Тогда
				
				СтрокаРеквизита.ИмяРеквизита = ВыборкаЗначения.ИмяРеквизита;
				СтрокаРеквизита.ОтборХарактеристик = Истина;
				СтрокаРеквизита.ОтборДоступен = Истина;
				СтрокаРеквизита.ЗначениеОтбора = "";
				СтрокаРеквизита.ФиксированноеЗначение = Истина;
				СтрокаРеквизита.ПредставлениеОтбора = НСтр("ru = '<не задано>'");
				
				Прервать;
				
			КонецЕсли;
			
			СтрокаЗначения = СтрокаРеквизита.Строки.Добавить();
			СтрокаЗначения.ЭтоДопРеквизит = Истина;
			СтрокаЗначения.ОтборХарактеристик = Истина;
			
			ЗаполнитьЗначенияСвойств(СтрокаЗначения, ВыборкаЗначения);
			
			СтрокаЗначения.Представление = ВыборкаЗначения.ЗначениеОтбора;
			СтрокаЗначения.ОтборДоступен = Истина;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает дерево свойств для отбора по свойствам вида номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура ОчиститьДеревоОтборов(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ДеревоОтборов.Строки.Очистить();
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаИУдалениеОтборов

// Устанавливает отбор списка номенклатуры по текущей иерархии номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура УстановитьОтборПоТекущейИерархииНоменклатуры(Форма)
	
	Если Не Форма.ИспользоватьФильтры Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Родитель", 
		Форма.ТекущаяИерархияНоменклатуры, ВидСравненияКомпоновкиДанных.Равно, "Родитель", Истина);
	
КонецПроцедуры

// Устанавливает пометку у элементов списка градаций качества.
// Используется при навигации по товарам альтернативного качества.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора, форма подбора.
//
Процедура УстановитьПометкуГрадацииКачества(Форма)
	
	Для Каждого ЭлементСписка Из Форма.СписокКачества Цикл
		ЭлементСписка.Пометка = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Отключает установленный отбор по группе номенклатуры у списка номенклатуры
// на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоИерархииНоменклатуры(Форма)
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.СписокНоменклатура, "Родитель",,,,Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по родителю текущей строки списка номенклатуры
// в формах подборов товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоРодителюТекущейСтрокиНоменклатуры(Форма)
	
	ТекущаяСтрока = Форма.Элементы[ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма)].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Элементы.ИерархияНоменклатуры.ТекущаяСтрока = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяСтрока, "Родитель");
	
КонецПроцедуры

// Устанавливает отборпо виду номенклатуры и свойствам вида номенклатуры
// у списка номенклатуры в формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УстановитьОтборПоВидуНоменклатуры(Форма);
	УстановитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Устанавливает отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоВидуНоменклатуры(Форма)
	
	ВидНоменклатуры = Форма.ВидНоменклатуры;
	ЭлементыОтбора = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	
	// Установить отбор по виду номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементыОтбора,
		"ВидНоменклатуры",
		ВидНоменклатуры,
		ВидСравненияКомпоновкиДанных.Равно, 
		"ОтборПоВидуНоменклатуры",
		Истина);
	
КонецПроцедуры

// Устанавливает отбор по списку значений из строк дерева отборов.
//
// Параметры:
//	ИмяЭлементаОтбора - Строка - имя элемента отбора,
//	Отбор - ОтборКомпоновкиДанных - коллекция элементов отбора списка номенклатуры,
//	СтрокиДереваОтборов - Массив - массив строк дерева отборов.
//
Процедура УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, Отбор, СтрокиДереваОтборов)
	
	ЗначенияОтборов = Новый Массив;
	Для Каждого Строка Из СтрокиДереваОтборов Цикл
		ЗначенияОтборов.Добавить(Строка.ЗначениеОтбора);
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Отбор, ИмяЭлементаОтбора, ЗначенияОтборов, ВидСравненияКомпоновкиДанных.ВСписке, , Истина);
	
КонецПроцедуры

// Устанавливает отбор по свойствам вида номенклатуры у списка номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
Процедура УстановитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ПараметрыОтбора = Новый Структура("Отбор", Истина);
	
	Если ЭтоФормаВыбораХарактеристик Тогда
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список);
	Иначе
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура);
	КонецЕсли;
	
	ИмяСсылки = "Ссылка.[";
	
	УстанавливатьОтборСпискаХарактеристик = Ложь;
	
	Если ЭтоФормаПодбора И Форма.ИспользоватьХарактеристикиНоменклатуры Тогда
		УстанавливатьОтборСпискаХарактеристик = Истина;
		ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики);
	КонецЕсли;
	
	Для каждого СтрокаДереваОтборов Из ДеревоОтборов.Строки Цикл
		
		Если СтрокаДереваОтборов.ОтборДоступен Тогда
			
			Если Не СтрокаДереваОтборов.Отбор Тогда
				Продолжить;
			КонецЕсли;
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаДереваОтборов.ИмяРеквизита;
			Если СтрокаДереваОтборов.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаДереваОтборов.ИмяРеквизита + "]";
			КонецЕсли;
			
			// В зависимости от типа установить значение элемента отбора.
			Если ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Булево") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, Истина, 
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, Истина, 
						ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли; 
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Дата") 
				Или ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Число") Тогда
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалОт) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалОт, 
							ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаДереваОтборов.ИнтервалДо) Тогда
					
					Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
						ДобавитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, СтрокаДереваОтборов.ИнтервалДо, 
							ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаДереваОтборов.ЗначениеОтбора) = Тип("Строка") Тогда
				
				Если Не СтрокаДереваОтборов.ОтборХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаНоменклатуры, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборСпискаХарактеристик, ИмяЭлементаОтбора, 
						СтрокаДереваОтборов.ЗначениеОтбора, ВидСравненияКомпоновкиДанных.Равно,,Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			// Отбор не доступен - это строка отбора, имеющая подчиненные строки.
			МассивСтрок = СтрокаДереваОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Если МассивСтрок.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаОтбора = МассивСтрок[0];
			
			// Сформировать имя элемента отбора.
			ИмяЭлементаОтбора = СтрокаОтбора.ИмяРеквизита;
			Если СтрокаОтбора.ЭтоДопРеквизит Тогда
				ИмяЭлементаОтбора = ИмяСсылки + СтрокаОтбора.ИмяРеквизита + "]";
			КонецЕсли;
			
			// Установить отбор по значениям подчиненных строк строки дерева отборов.
			Если Не СтрокаОтбора.ОтборХарактеристик Тогда 
				УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, ОтборСпискаНоменклатуры, МассивСтрок);
			ИначеЕсли УстанавливатьОтборСпискаХарактеристик Тогда
				УстановитьОтборПоСтрокамДереваОтборов(ИмяЭлементаОтбора, ОтборСпискаХарактеристик, МассивСтрок);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отключает установленные отборы по виду номенклатуры и по свойствам выбранного
// вида номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора, форма выбора.
//
Процедура УдалитьОтборПоВидуНоменклатурыИСвойствамВидаНоменклатуры(Форма)
	
	УдалитьОтборПоВидуНоменклатуры(Форма);
	УдалитьОтборПоСвойствамВидаНоменклатуры(Форма);
	
КонецПроцедуры

// Удаляет отбор по виду номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоВидуНоменклатуры(Форма)
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "ВидНоменклатуры", Форма.ВидНоменклатуры, 
		ВидСравненияКомпоновкиДанных.Равно, "ОтборПоВидуНоменклатуры", Ложь);
	
КонецПроцедуры

// Удаляет установленные отборы по свойствам вида номенклатуры.
// Точнее удаляются все установленные отборы на списке за исключением тех
// которые не относятся к отборам дерева свойств.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоСвойствамВидаНоменклатуры(Форма)
	
	ЭтоФормаПодбора = ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма);
	ЭтоФормаВыбораХарактеристик = ПодборТоваровКлиентСервер.ЭтоФормаВыбораХарактеристик(Форма);
	ЭтоФормаСпискаНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	// Некоторые элементы отбора не должны удаляться - они не относятся
	// к отбору по свойствам вида номенклатуры.
	НеУдаляемыеЭлементы = НеУдаляемыеЭлементыОтборов();
	
	// Удалить элементы отбора по свойствам вида номенклатуры.
	Если ЭтоФормаПодбора Или ЭтоФормаСпискаНоменклатуры Или ЭтоФормаВыбораНоменклатуры Тогда
		
		ОтборСпискаНоменклатуры = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокНоменклатура).Элементы;
		ВГраница = ОтборСпискаНоменклатуры.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
		ЭлементОтбора = ОтборСпискаНоменклатуры[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаНоменклатуры.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если (ЭтоФормаПодбора И Форма.ИспользоватьХарактеристикиНоменклатуры) Или ЭтоФормаВыбораХарактеристик Тогда
		
		Если ЭтоФормаВыбораХарактеристик Тогда
			ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.Список).Элементы;
		Иначе
			ОтборСпискаХарактеристик = ОбщегоНазначенияУТКлиентСервер.ПолучитьОтборДинамическогоСписка(Форма.СписокХарактеристики).Элементы;
		КонецЕсли;
		
		ВГраница = ОтборСпискаХарактеристик.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			
			ЭлементОтбора = ОтборСпискаХарактеристик[ВГраница - ОбрИндекс];
			
			Если НеУдаляемыеЭлементы.Найти(ЭлементОтбора.Представление) = Неопределено Тогда
				ОтборСпискаХарактеристик.Удалить(ЭлементОтбора);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Удаляет отбор по качеству номенклатуры у списка номенклатуры на формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УдалитьОтборПоКачествуНоменклатуры(Форма)
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "Качество", "КачествоНоменклатуры");
	
КонецПроцедуры

// Устанавливает отбор по сегменту номенклатуры на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Процедура УстановитьОтборПоСегментуНоменклатуры(Форма)
	
	// Отбор по сегменту у списка номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Форма.СписокНоменклатура, 
		"СегментНоменклатуры", 
		Форма.СегментНоменклатуры, 
		ЗначениеЗаполнено(Форма.СегментНоменклатуры));
		
КонецПроцедуры

Функция НеУдаляемыеЭлементыОтборов() 
	
	НеУдаляемыеЭлементы = Новый Массив;
	
	НеУдаляемыеЭлементы.Добавить("ПоискПоПодстроке");
	НеУдаляемыеЭлементы.Добавить("ЦеныНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ЦенаХарактеристики");
	НеУдаляемыеЭлементы.Добавить("ГруппаТолькоВНаличии");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВидуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоВладельцуХарактеристик");
	НеУдаляемыеЭлементы.Добавить("ОтборПоТипуНоменклатуры");
	НеУдаляемыеЭлементы.Добавить("ОтборПоУмолчанию");
	
	Возврат НеУдаляемыеЭлементы
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовНаФормахПодборов

// Сохраняет флаги для дерева отбора на формах подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//	Закрыть - Булево - признак показывыющий что форма закрывается, тогда нужно сохранять
//	все настройки отборов, а не только Качество в случае изменения вида номенклатуры.
//
Процедура СохранитьПараметрыДереваОтбора(Форма, Закрыть)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	Если Закрыть Тогда
		
		ТаблицаПараметровОтбора.Очистить(); 
		
		Для Каждого ПервыйУровень Из ДеревоОтборов.Строки Цикл
			
			Если ПервыйУровень.Отбор Тогда
				
				Если ПервыйУровень.ФиксированноеЗначение Тогда
					
					НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
					НоваяСтрока.ИмяРеквизита = ПервыйУровень.Представление;
					НоваяСтрока.Представление = ПервыйУровень.Представление;
					НоваяСтрока.ЗначениеОтбора = ПервыйУровень.ЗначениеОтбора;
					НоваяСтрока.ПредставлениеОтбора = ПервыйУровень.ПредставлениеОтбора;
					НоваяСтрока.ФиксированноеЗначение = Истина;
					НоваяСтрока.Отбор = Истина;
					
					Если ПервыйУровень.ИнтервалОт<>Неопределено Или ПервыйУровень.ИнтервалДо<>Неопределено Тогда
						
						Если ТипЗнч(ПервыйУровень.ИнтервалОт) = Тип("Дата") Или ТипЗнч(ПервыйУровень.ИнтервалДо) = Тип("Дата") Тогда
							
							НоваяСтрока.ИнтервалДата = Истина;
							НоваяСтрока.ИнтервалДатаОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалДатаДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						Иначе
							
							НоваяСтрока.ИнтервалЧисла = Истина;
							НоваяСтрока.ИнтервалЧислаОт = ПервыйУровень.ИнтервалОт;
							НоваяСтрока.ИнтервалЧислаДо = ПервыйУровень.ИнтервалДо;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					ИмяРеквизита = ПервыйУровень.Представление;
					
					Для Каждого ВторойУровень Из ПервыйУровень.Строки Цикл
						
						Если ВторойУровень.Отбор Тогда
							
							НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
							НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
							НоваяСтрока.Представление = ВторойУровень.Представление;
							НоваяСтрока.ЗначениеОтбора = ВторойУровень.ЗначениеОтбора;
							НоваяСтрока.Отбор = Истина;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ПервыйУровень Из ДеревоОтборов.Строки Цикл
			
			Если ПервыйУровень.Представление="Качество" Тогда
				
				Для Каждого ВторойУровень Из ПервыйУровень.Строки Цикл
					
					Отбор = Новый Структура();
					Отбор.Вставить("Представление",ВторойУровень.Представление);
					ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
					
					Если ЗначениеЗаполнено(ОтобранныеСтроки) Тогда
						ОтобранныеСтроки[0].Отбор = ВторойУровень.Отбор; 
					Иначе
						
						НоваяСтрока = ТаблицаПараметровОтбора.Добавить();
						НоваяСтрока.ИмяРеквизита = "Качество";
						НоваяСтрока.Представление = ВторойУровень.Представление;
						НоваяСтрока.ЗначениеОтбора = ВторойУровень.ЗначениеОтбора;
						Если НоваяСтрока.Представление = "Новый" Тогда 
							НоваяСтрока.Отбор = Истина;
						Иначе
							НоваяСтрока.Отбор = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ТаблицаПараметровОтбора.Загрузить(ТаблицаПараметровОтбора);
	
КонецПроцедуры

// Расставляет флаги для дерева отбора на формах подбора.
//
Процедура ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма)
	
	ДеревоОтборов = Форма.РеквизитФормыВЗначение("ДеревоОтборов");
	
	ТаблицаПараметровОтбора = Форма.ТаблицаПараметровОтбора.Выгрузить();
	
	ТекущиеИмяРеквизита = "";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Отбор",Истина);
	ОтобранныеСтроки = ТаблицаПараметровОтбора.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из ОтобранныеСтроки Цикл
		
		Если СтрокаТаблицы.ИмяРеквизита <> ТекущиеИмяРеквизита Тогда
			
			ТекущиеИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
			
			ЕстьПометкаНаВторомУровне = Ложь;
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", ТекущиеИмяРеквизита);
			СтрокаДереваПервогоУровня = ДеревоОтборов.Строки.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Если СтрокаДереваПервогоУровня.Количество()>0 Тогда
				
				Если СтрокаТаблицы.ФиксированноеЗначение Тогда
					
					СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
					СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
					СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
					
					Если СтрокаТаблицы.ИнтервалДаты Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалДатыОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалДатыДо;
						
						Продолжить;
						
					ИначеЕсли СтрокаТаблицы.ИнтервалЧисла Тогда
						
						СтрокаДереваПервогоУровня[0].ФиксированноеЗначение = Истина;
						СтрокаДереваПервогоУровня[0].ЗначениеОтбора = СтрокаТаблицы.ЗначениеОтбора;
						СтрокаДереваПервогоУровня[0].ПредставлениеОтбора = СтрокаТаблицы.ПредставлениеОтбора;
						СтрокаДереваПервогоУровня[0].ИнтервалОт = СтрокаТаблицы.ИнтервалЧислаОт;
						СтрокаДереваПервогоУровня[0].ИнтервалДо = СтрокаТаблицы.ИнтервалЧислаДо;
						
						Продолжить;
						
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;
				
				СтрокиДереваВторогоУровня = СтрокаДереваПервогоУровня[0].Строки;
				СтрокаНайдена= Истина;
				
			Иначе
				
				СтрокаНайдена = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаНайдена Тогда
			
			ПараметрыОтбора = Новый Структура;
			ПараметрыОтбора.Вставить("Представление", СтрокаТаблицы.Представление);
			СтрокаПоиска = СтрокиДереваВторогоУровня.НайтиСтроки(ПараметрыОтбора, Ложь);
			
			Если СтрокаПоиска.Количество() > 0 Тогда
				
				СтрокаПоиска[0].Отбор = Истина;
				СтрокаДереваПервогоУровня[0].Отбор = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ЗначениеВРеквизитФормы(ДеревоОтборов, "ДеревоОтборов");
	
КонецПроцедуры

// Сохраняет вариант навигации до выбора варианта навигации по товарам другого качества.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры, форма подбора, форма выбора.
//
Процедура УстановитьВариантНавигацииИИспользоватьФильтрДоТДК(Форма)
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПодобныеТоварыНоменклатуры(Форма) И
		Не (Форма.ВариантНавигации = "ПоТоварамДругогоКачества") Тогда
		
		Форма.ВариантНавигацииДоТДК = Форма.ВариантНавигации;
		Форма.ИспользоватьФильтрыДоТДК = Форма.ИспользоватьФильтры;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтборыПоНаличиюПоЦенам

// Возвращает Истина, если условие цены поставщика на форме подбора был изменен
// по сравнению с ранее установленным значением.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Функция УсловиеЦеныПоставщикаИзменилось(Форма)
	
	ИмяПараметра = "УсловиеЦеныПоставщика";
	
	ЗначениеПараметра = Форма.СписокНоменклатураПоставщика.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	
	Если ЗначениеПараметра = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Форма.УсловиеЦеныПоставщика) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Не (ЗначениеПараметра.Значение = Форма.УсловиеЦеныПоставщика);
	
КонецФункции

#КонецОбласти

#Область ОтборыВспомогательные

// Возвращает Истина, если сегмент номенклатуры на форме подбора был изменен
// по сравнению с ранее установленным значением.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка номенклатуры или форма подбора.
//
Функция СегментНоменклатурыИзменился(Форма)
	
	ЗначениеПараметра = Форма.СписокНоменклатура.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СегментНоменклатуры"));
	
	Если ЗначениеПараметра = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(Форма.СегментНоменклатуры) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат (ЗначениеПараметра.Значение <> Форма.СегментНоменклатуры Или Не ЗначениеПараметра.Использование);
	
КонецФункции

#КонецОбласти

#Область ПоискНаФормахПодборов

// Выполняет полнотекстовый поиск номенклатуры по строке поиска введенной в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора. форма подбора,
//	РезультатПоиска - Неопределено - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска)
	
	СтрокаПоиска = Форма.СтрокаПоискаНоменклатура;
	РезультатПоиска = СтруктураРезультатовПоиска();
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	// Создать список поиска.
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластиПоискаНоменклатуры(Форма);
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат;
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	// Пройти по списку поиска.
	РазмерПорции = 20;
	НачальнаяПозиция = 0;
	ВГраница = ?(КоличествоРезультатов > РазмерПорции, РазмерПорции, КоличествоРезультатов) - 1;
	
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для Сч = 0 По ВГраница Цикл
			ЭлементСписка = СписокПоиска.Получить(Сч);
			ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоРезультатов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			ВГраница = ?(КоличествоРезультатов > (НачальнаяПозиция + РазмерПорции), РазмерПорции, КоличествоРезультатов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
	ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска);
	
КонецПроцедуры

// Выполняет неполнотекстовый поиск номенклатуры по строке поиска.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска,
//	РезультатПоиска - Неопределено - переменная, в которую записывается структура, результат поиска.
//
Процедура ВыполнитьНеПолнотекстовыйПоискНоменклатуры(Форма, РезультатПоиска)
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СписокПоиска = РезультатПоискаНоменклатуры(Форма);
	УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска);
	ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска);
	ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска);
	
КонецПроцедуры

// Выполняет полнотекстовый поиск характеристик по строке поиска введенной в форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора. форма подбора,
//	РезультатПоиска - Неопределено - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьПолнотекстовыйПоискХарактеристик(Форма, РезультатПоиска)
	
	СтрокаПоиска = Форма.СтрокаПоискаХарактеристики;
	РезультатПоиска = СтруктураРезультатовПоиска();
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(СтрокаПоиска);
	СписокПоиска.ПолучатьОписание = Ложь;
	СписокПоиска.ОбластьПоиска = ОбластиПоискаХарактеристик(Форма);
	
	Попытка
		СписокПоиска.ПерваяЧасть();
	Исключение
		РезультатПоиска.КодОшибки = "ОшибкаПоиска";
		Возврат;
	КонецПопытки;
	
	Если СписокПоиска.СлишкомМногоРезультатов() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	КоличествоРезультатов = СписокПоиска.ПолноеКоличество();
	
	Если КоличествоРезультатов = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
		Возврат;
	КонецЕсли;
	
	Если КоличествоРезультатов > МаксимальноеКоличествоЭлементовПоиска Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
		Возврат;
	КонецЕсли;
	
	// Пройти по списку поиска.
	РазмерПорции = 20;
	НачальнаяПозиция = 0;
	ВГраница = ?(КоличествоРезультатов > РазмерПорции, РазмерПорции, КоличествоРезультатов) - 1;
	
	ЕстьСледующаяПорция = Истина;
	
	Пока ЕстьСледующаяПорция Цикл
		Для Сч = 0 По ВГраница Цикл
			ЭлементСписка = СписокПоиска.Получить(Сч);
			ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
		КонецЦикла;
		
		НачальнаяПозиция = НачальнаяПозиция + РазмерПорции;
		ЕстьСледующаяПорция = (НачальнаяПозиция < КоличествоРезультатов - 1);
		
		Если ЕстьСледующаяПорция Тогда
			ВГраница = ?(КоличествоРезультатов > (НачальнаяПозиция + РазмерПорции), РазмерПорции, КоличествоРезультатов - НачальнаяПозиция) - 1;
			СписокПоиска.СледующаяЧасть();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Выполняет неполнотекстовый поиск характеристик по строке поиска на форме.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска,
//	РезультатПоиска - Неопределено - переменная, в которую записывается результат поиска.
//
Процедура ВыполнитьНеПолнотекстовыйПоискХарактеристик(Форма, РезультатПоиска)
	
	РезультатПоиска = СтруктураРезультатовПоиска();
	СписокПоиска = РезультатПоискаХарактеристик(Форма);
	ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска);
	УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска);
	
КонецПроцедуры

// Проверяет принадлежность элемента списка поиска, в зависиимости
// от принадлежности элемента к типу метаданных, включает значение элемента
// в нужный раздел результата поиска.
//
// Параметры:
//	ЭлементСписка - ЭлементСпискаЗначений - элемент списка поиска,
//	РезультатПоиска - Структура - структура результатов поиска.
//
Процедура ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска)
	
	МетаданныеЭлемента = ЭлементСписка.Метаданные;
	ЗначениеЭлемента = ЭлементСписка.Значение;
	
	Если ТипЗнч(МетаданныеЭлемента) = Тип("ОбъектМетаданных") Тогда
		
		Если МетаданныеЭлемента = Метаданные.Справочники.Номенклатура Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
		КонецЕсли;
		
	Иначе
		
		Если МетаданныеЭлемента = "Номенклатура" Тогда
			РезультатПоиска.Номенклатура.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ХарактеристикиНоменклатуры" Тогда
			РезультатПоиска.ХарактеристикиНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "ШтрихкодыНоменклатуры" Тогда
			РезультатПоиска.ШтрихкодыНоменклатуры.Добавить(ЗначениеЭлемента);
		ИначеЕсли МетаданныеЭлемента = "НоменклатураПоставщиков" Тогда
			РезультатПоиска.НоменклатураПоставщиков.Добавить(ЗначениеЭлемента);
		Иначе
			ВызватьИсключение НСтр("ru = 'Неизвестная ошибка'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает результат поиска номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Структура - результат поиска товаров.
//
Функция РезультатПоискаНоменклатуры(Форма)
	
	ТочноеСоответствие = Форма.НайтиНоменклатуруПоТочномуСоответствию;
	
	СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаНоменклатура, ТочноеСоответствие);
	ОбластиПоиска = ОбластиПоискаНоменклатуры(Форма);
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	РезультатПоиска = СтруктураРезультатаПоиска();
	
	// Сформировать текст запроса по областям поиска.
	Запрос = Новый Запрос;
	
	РазделительВТекстеЗапросов = "
	|;
	|";
	
	Для каждого ОбластьПоиска Из ОбластиПоиска Цикл
		ТекстЗапросаПоискаПоОбласти = ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие);
		
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), РазделительВТекстеЗапросов, "") + ТекстЗапросаПоискаПоОбласти;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавить найденные элементы в список поиска. Как только количество элементов в списке
	// превысит максимальное количество найденных элементов, прервать цикл обхода.
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЭлементПоиска = Новый Структура("Значение, Метаданные");
			ЗаполнитьЗначенияСвойств(ЭлементПоиска, Выборка);
			
			РезультатПоиска.Элементы.Добавить(ЭлементПоиска);
			
			Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПоиска.ПолноеКоличество = РезультатПоиска.Элементы.Количество();
	РезультатПоиска.СлишкомМногоРезультатов = (РезультатПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает результат поиска характеристик.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора, форма списка.
//
// Возвращаемое значение:
//	Структура - результаты поиска характеристик.
//
Функция РезультатПоискаХарактеристик(Форма)
	
	ТочноеСоответствие = Форма.НайтиХарактеристикиПоТочномуСоответствию;
	
	СтрокаПоиска = ФорматироватьСтрокуПоиска(Форма.СтрокаПоискаХарактеристики, ТочноеСоответствие);
	ОбластиПоиска = ОбластиПоискаХарактеристик(Форма);
	МаксимальноеКоличествоЭлементовПоиска = МаксимальноеКоличествоЭлементовПоиска();
	РезультатПоиска = СтруктураРезультатаПоиска();
	
	// Сформировать текст запроса по областям поиска.
	Запрос = Новый Запрос;
	
	РазделительВТекстеЗапросов = "
	|;
	|";
	
	Для каждого ОбластьПоиска Из ОбластиПоиска Цикл
		ТекстЗапросаПоискаПоОбласти = ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие);
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), РазделительВТекстеЗапросов, "") + ТекстЗапросаПоискаПоОбласти;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтрокаПоиска", СтрокаПоиска);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	// Добавить найденные элементы в список поиска. Как только количество элементов в списке
	// превысит максимальное количество найденных элементов, прервать цикл обхода.
	Для каждого РезультатЗапроса Из РезультатыЗапроса Цикл
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЭлементПоиска = Новый Структура("Значение, Метаданные");
			ЗаполнитьЗначенияСвойств(ЭлементПоиска, Выборка);
			
			РезультатПоиска.Элементы.Добавить(ЭлементПоиска);
			
			Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если РезультатПоиска.Элементы.Количество() > МаксимальноеКоличествоЭлементовПоиска Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатПоиска.ПолноеКоличество = РезультатПоиска.Элементы.Количество();
	РезультатПоиска.СлишкомМногоРезультатов = (РезультатПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает массив областей поиска товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска.
//
// Возвращаемое значение:
//	Массив. Массив метаданных, областей поиска товаров.
//
Функция ОбластиПоискаНоменклатуры(Форма)
	
	// В зависимости от того, из какой формы выполняется вызов функции поиска,
	// список областей поиска будет различаться.
	ОбластиПоиска = Новый Массив;
	
	ОбластиПоиска.Добавить(Метаданные.Справочники.Номенклатура);
		
	Возврат ОбластиПоиска;
	
КонецФункции

// Возвращает массив областей поиска характеристик.
//
// Параметры:
//	Форма - УправляемаяФорма - форма из которой была вызвана функция поиска.
//
// Возвращаемое значение:
//	Массив - массив метаданных, областей поиска характеристик.
//
Функция ОбластиПоискаХарактеристик(Форма)
	
	ОбластиПоиска = Новый Массив;
	ОбластиПоиска.Добавить(Метаданные.Справочники.ХарактеристикиНоменклатуры);
	
	Возврат ОбластиПоиска;
	
КонецФункции

// Возвращает структуру результатов поиска.
// Используется при неполнотекстовом поиске товаров.
//
Функция СтруктураРезультатовПоиска()
	
	РезультатПоиска = Новый Структура();
	
	РезультатПоиска.Вставить("КодОшибки", "");
	РезультатПоиска.Вставить("Номенклатура", Новый Массив);
	РезультатПоиска.Вставить("ХарактеристикиНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("ШтрихкодыНоменклатуры", Новый Массив);
	РезультатПоиска.Вставить("НоменклатураПоставщиков", Новый Массив);
	
	Возврат РезультатПоиска;
	
КонецФункции

// Возвращает структуру списка поиска.
// Используется при неполнотекстовом поиске товаров.
//
Функция СтруктураРезультатаПоиска()
	
	СписокПоиска = Новый Структура;
	
	СписокПоиска.Вставить("Элементы", Новый Массив);
	СписокПоиска.Вставить("ПолноеКоличество", 0);
	СписокПоиска.Вставить("СлишкомМногоРезультатов", Ложь);
	
	Возврат СписокПоиска;
	
КонецФункции

// Возвращает максимальное количество элементов которое может быть обработано
// при выполнении полнотекстового или неполнотекствого поиска. Если количество найденных
// элементов превышает возвращаемое этой функцией значение, то считается что условие поиска задано
// размыто и предлагается уточнить его.
//
Функция МаксимальноеКоличествоЭлементовПоиска()
	
	Возврат 500;
	
КонецФункции

// Выполняет дополнительную обработку результатов поиска:
// если выполнялся поиск по характеристикам, штрихкодам или номенклатуре
// поставщиков, то процедура выполняет дополнительный запроса для поиска
// номенклатуры - владельцев найденных элементов. Найденная номенклатура
// включается в результат поиска в раздел "Номенклатура".
//
// Параметры:
//	РезультатПоиска - Структура - структура результатов поиска.
//
Процедура ДополнитьРезультатыПоискаНоменклатуры(РезультатПоиска)
	
	// Если найдены характеристики номенклатуры, номенклатура поставщиков или штрихкоды номенклатуры,
	// то для них нужно найти владельцев и добавить их в список номенклатуры.
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	Если РезультатПоиска.ХарактеристикиНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Номенклатура
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|		ПО (Номенклатура.Ссылка = ХарактеристикиНоменклатуры.Владелец
		|				ИЛИ Номенклатура.ВидНоменклатуры = ХарактеристикиНоменклатуры.Владелец)
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Ссылка В(&СписокХарактеристики)";
		
		Запрос.УстановитьПараметр("СписокХарактеристики", РезультатПоиска.ХарактеристикиНоменклатуры);
	КонецЕсли;
	
	Если РезультатПоиска.ШтрихкодыНоменклатуры.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	ШтрихкодыНоменклатуры.Номенклатура КАК Номенклатура
		|ИЗ
		|	РегистрСведений.ШтрихкодыНоменклатуры КАК ШтрихкодыНоменклатуры
		|ГДЕ
		|	ШтрихкодыНоменклатуры.Штрихкод В(&СписокШтрихкодов)";
		
		Запрос.УстановитьПараметр("СписокШтрихкодов", РезультатПоиска.ШтрихкодыНоменклатуры);
	КонецЕсли;
	
	Если РезультатПоиска.НоменклатураПоставщиков.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(Запрос.Текст), " ОБЪЕДИНИТЬ ВСЕ ", "") + 
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	НоменклатураПоставщиков.Ссылка В(&СписокНоменклатурыПоставщиков)";
		
		Запрос.УстановитьПараметр("СписокНоменклатурыПоставщиков", РезультатПоиска.НоменклатураПоставщиков);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Запрос.Текст) Тогда
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				РезультатПоиска.Номенклатура.Добавить(Выборка.Номенклатура);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текст запроса необходимый для выполнения поиска по области.
//
// Параметры:
//	ОбластьПоиска      - ОбъектМетаданных - идентификатор области поиска,
//	ТочноеСоответствие - Булево           - признак выполнения поиска по точному соответствию.
//
Функция ТекстЗапросаПоискаПоОбласти(ОбластьПоиска, ТочноеСоответствие)
	
	МаксКоличество = МаксимальноеКоличествоЭлементовПоиска() + 1;
	ТекстЗапроса = "";
	
	Если ОбластьПоиска = Метаданные.Справочники.Номенклатура Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	СправочникНоменклатура.Ссылка КАК Значение,
		|	""Номенклатура"" КАК Метаданные
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоГруппа И
		|	(СправочникНоменклатура.Наименование %ВидСравнения% &СтрокаПоиска
		|			ИЛИ СправочникНоменклатура.НаименованиеПолное %ВидСравнения% &СтрокаПоиска
		|			ИЛИ СправочникНоменклатура.Артикул %ВидСравнения% &СтрокаПоиска)";
		
	КонецЕсли;
		
	Если ОбластьПоиска = Метаданные.Справочники.ХарактеристикиНоменклатуры Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ ПЕРВЫЕ %МаксКоличество%
		|	ХарактеристикиНоменклатуры.Ссылка КАК Значение,
		|	""ХарактеристикиНоменклатуры"" КАК Метаданные
		|ИЗ
		|	Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры
		|ГДЕ
		|	ХарактеристикиНоменклатуры.Наименование %ВидСравнения% &СтрокаПоиска
		|	ИЛИ ХарактеристикиНоменклатуры.НаименованиеПолное %ВидСравнения% &СтрокаПоиска";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%МаксКоличество%", Формат(МаксКоличество, "ЧЦ=10; ЧГ=0"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидСравнения%", ?(ТочноеСоответствие, "=", "ПОДОБНО"));
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает фоматированную строку поиска - строку с добавлением
// служебных символов. Используется при неполнотекстовом поиске.
//
// Параметры:
//	СтрокаПоиска - Строка - строка поиска,
//	ТочноеСоответствие - Булево - признак поиска по точному соответствию.
//
// Возвращаемое значение:
//	Строка. Форматированная строка поиска.
//
Функция ФорматироватьСтрокуПоиска(Знач СтрокаПоиска, ТочноеСоответствие)
	
	Если Не ЗначениеЗаполнено(СтрокаПоиска) Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если ТочноеСоответствие Тогда
		Возврат СтрокаПоиска;
	КонецЕсли;
	
	Если Лев(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = "%" + СтрокаПоиска;
	КонецЕсли;
	
	Если Прав(СтрокаПоиска, 1) <> "%" Тогда
		СтрокаПоиска = СтрокаПоиска + "%";
	КонецЕсли;
	
	Возврат СтрокаПоиска;
	
КонецФункции

// Устанавливает код ошибки расширенного поиска в структуре результата поиска.
//
// Параметры:
//	СписокПоиска - СписокЗначений - список найденных элементов,
//	РезультатПоиска - Структура - структура результата поиска.
//
Функция УстановитьКодОшибкиРасширенногоПоиска(СписокПоиска, РезультатПоиска)
	
	Если СписокПоиска.СлишкомМногоРезультатов Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
	ИначеЕсли СписокПоиска.ПолноеКоличество = 0 Тогда
		РезультатПоиска.КодОшибки = "НичегоНеНайдено";
	ИначеЕсли СписокПоиска.ПолноеКоличество > МаксимальноеКоличествоЭлементовПоиска() Тогда
		РезультатПоиска.КодОшибки = "СлишкомМногоРезультатов";
	Иначе
		РезультатПоиска.КодОшибки = "";
	КонецЕсли;
	
КонецФункции

// Выполняет обрабтку списка результатов поиска. Вызывается функция определения принадлежности
// найденного элемента к разделу метаданных.
//
// Параметры:
//	СписокПоиска - СписокЗначений - список найденных элементов,
//	РезультатПоиска - Структура - структура результата поиска.
//
Процедура ОбработатьСписокПоиска(СписокПоиска, РезультатПоиска)
	
	// Если количество найденных элементов не превышает заданного ограничения,
	// то включить элементы из списка поиска в результаты поиска.
	ВГраница = СписокПоиска.Элементы.ВГраница();
	
	Для Сч = 0 По ВГраница Цикл
		ЭлементСписка = СписокПоиска.Элементы[Сч];
		ОбработатьЭлементСпискаПоиска(ЭлементСписка, РезультатПоиска);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииСохраненияИВосстановленияНастроек

// Возвращает структуру - значения настроек формы списка, формы выбора товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма выбора.
//
// Возвращаемое значение:
//	Структура. Значения настроек формы списка, формы выбора.
//
Функция НастройкиФормы(Форма)
	
	НастройкиФормы = Новый Структура;
	
	НастройкиФормы.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтры);
	НастройкиФормы.Вставить("ВариантНавигации", Форма.ВариантНавигации);
	НастройкиФормы.Вставить("ВидНоменклатуры", Форма.ВидНоменклатуры);
	НастройкиФормы.Вставить("ТекущаяИерархияНоменклатуры", Форма.ТекущаяИерархияНоменклатуры);
		
	// Сохранение параметров отбора.
	Если ПодборТоваровКлиентСервер.ЭтоФормаСпискаНоменклатуры(Форма)
		Или ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма) Тогда
		
		СохранитьПараметрыДереваОтбора(Форма, Истина);
		
		НастройкиФормы.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
		НастройкиФормы.Вставить("НоменклатураИсходногоКачества", Форма.НоменклатураИсходногоКачества);
		
		Если Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
			
			НастройкиФормы.Вставить("ВариантНавигации", Форма.ВариантНавигацииДоТДК);
			НастройкиФормы.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтрыДоТДК);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиФормы;
	
КонецФункции

// Возвращает структуру - значения настроек формы подбора товаров.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
// Возвращаемое значение:
//	Структура. Значения настроек формы подбора.
//
Функция НастройкиФормыПодбора(Форма)
	
	НастройкиФормыПодбора = НастройкиФормы(Форма);
	
	НастройкиФормыПодбора.Вставить("ЗапрашиватьКоличество", Форма.ЗапрашиватьКоличество);
	
	Если Не ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма) Тогда
		НастройкиФормыПодбора.Вставить("ПоказыватьПодобранныеТовары", Форма.ПоказыватьПодобранныеТовары);
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма) Тогда
		НастройкиФормыПодбора.Вставить("ИспользоватьФильтрНоменклатураПоставщика", Форма.ИспользоватьФильтрНоменклатураПоставщика);
		НастройкиФормыПодбора.Вставить("ТекущаяИерархияНоменклатурыПоставщика", Форма.ТекущаяИерархияНоменклатурыПоставщика);
	КонецЕсли;
	
	НастройкиФормыПодбора.Вставить("ОтображатьОстатки", Форма.ОтображатьОстатки);
	
	Если ЗначениеЗаполнено(Форма.Объект.Склад) Тогда
		НастройкиФормыПодбора.Вставить("ТолькоВНаличии", Форма.ТолькоВНаличии);
	Иначе
		НастройкиФормыПодбора.Вставить("ТолькоВНаличии", Форма.ТолькоВНаличииИзПараметров);
	КонецЕсли;
	
	Если Форма.ВариантНавигации = "Совместно" Тогда
		НастройкиФормыПодбора.Вставить("ВариантНавигации", "ПоИерархии");
	КонецЕсли;
	
	Если ПодборТоваровКлиентСервер.ЭтоФормаПодбора(Форма) Тогда
		
		СохранитьПараметрыДереваОтбора(Форма, Истина);
		
		НастройкиФормыПодбора.Вставить("ТаблицаПараметровОтбора", Форма.ТаблицаПараметровОтбора.Выгрузить());
		НастройкиФормыПодбора.Вставить("НоменклатураИсходногоКачества", Форма.НоменклатураИсходногоКачества);
		
		Если Форма.ВариантНавигации = "ПоТоварамДругогоКачества" Тогда
			
			НастройкиФормыПодбора.Вставить("ВариантНавигации", Форма.ВариантНавигацииДоТДК);
			НастройкиФормыПодбора.Вставить("ИспользоватьФильтры", Форма.ИспользоватьФильтрыДоТДК);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат НастройкиФормыПодбора;
	
КонецФункции

// Сохраняет значения списков выбора на формах списков, формах подборов.
//
// Параметры:
//	Форма - УправляемаяФорма - форма списка, форма подбора.
//
Процедура СохранитьСпискиВыбора(Форма)
		
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияФормПоПараметрам

// Устанавливает заголовки элементов на форме подбора.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьЗаголовкиЭлементовФормыПоПараметрам(Форма) Экспорт
	
	ЭтоФормаЧекаККМ = ПодборТоваровКлиентСервер.ЭтоФормаЧекаККМ(Форма);
	ЭтоФормаПомощникаПродаж = ПодборТоваровКлиентСервер.ЭтоФормаПомощникаПродаж(Форма);
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	ИмяСпискаХарактеристик = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма);
	
	// Установить заголовок полей цены.
	Если ЭтоФормаЧекаККМ Или ЭтоФормаПомощникаПродаж Тогда
		Валюта = Форма.Объект.Валюта;
		Склад = Форма.Объект.Склад;
	Иначе
		Валюта = Форма.Параметры.Валюта;
		Склад = Форма.Параметры.Склад;
	КонецЕсли;
	
	ТекстЗаголовка = НСтр("ru = 'Цена'");
	
	Если ЗначениеЗаполнено(Валюта) Тогда
		ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Цена (%1)'"), Валюта);
	КонецЕсли;
	
	Форма.Элементы[ИмяСпискаНоменклатуры].ПодчиненныеЭлементы[ИмяСпискаНоменклатуры+"Цена"].Заголовок = ТекстЗаголовка;
	Форма.Элементы[ИмяСпискаХарактеристик].ПодчиненныеЭлементы[ИмяСпискаХарактеристик+"Цена"].Заголовок = ТекстЗаголовка;
	
	Если ЭтоФормаЧекаККМ Или ЭтоФормаПомощникаПродаж Тогда
		Форма.Элементы.ТоварыЦена.Заголовок = ТекстЗаголовка;
		ВыбранаГруппаСкладов = Справочники.Склады.ЭтоГруппа(Форма.Объект.Склад);
	Иначе
		Форма.Элементы.КорзинаЦена.Заголовок = ТекстЗаголовка;
		ВыбранаГруппаСкладов = Справочники.Склады.ЭтоГруппа(Форма.Параметры.Склад);
	КонецЕсли;
	
	ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		?(ВыбранаГруппаСкладов,
		НСтр("ru = 'Только в наличии на группе складов ""%1""'"),
		?(ЗначениеЗаполнено(Склад), НСтр("ru = 'Только в наличии на складе ""%1""'"), НСтр("ru = 'Только в наличии'"))), 
		Склад);
	
	Если Форма.Параметры.Свойство("Документ") Тогда
		Если ТипЗнч(Форма.Параметры.Документ) <> Тип("ДокументСсылка.УстановкаЦенНоменклатуры") Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТолькоВНаличии", "Заголовок", ТекстЗаголовка);
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "ТолькоВНаличии", "Заголовок", ТекстЗаголовка);
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по типу номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоТипуНоменклатурыПоПараметрам(Форма) Экспорт
	
	ЭтоФормаПодбораВДокументыПродажи = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыПродажи(Форма);
	ЭтоФормаПодбораВДокументыЗакупки = ПодборТоваровКлиентСервер.ЭтоФормаПодбораВДокументыЗакупки(Форма);
	ЭтоФормаВыбораНоменклатуры = ПодборТоваровКлиентСервер.ЭтоФормаВыбораНоменклатуры(Форма);
	
	Если ЭтоФормаПодбораВДокументыПродажи Или ЭтоФормаПодбораВДокументыЗакупки Тогда
		
		Если Форма.Параметры.ОтборПоТипуНоменклатуры = Неопределено Тогда
			Возврат;
		Иначе
			ОтборПоТипуНоменклатуры = Форма.Параметры.ОтборПоТипуНоменклатуры;
		КонецЕсли;
		
	ИначеЕсли ЭтоФормаВыбораНоменклатуры Тогда
		
		Форма.Параметры.Отбор.Свойство("ТипНоменклатуры", ОтборПоТипуНоменклатуры);
		Форма.Параметры.Отбор.Удалить("ТипНоменклатуры");
		
		Если ОтборПоТипуНоменклатуры = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Параметр <ОтборПоТипуНоменклатуры> произвольного типа. Может быть передан как отдельный тип
	// номенклатуры, так и массив типов.
	ОтборыПоТипуНоменклатуры = Новый СписокЗначений;
	
	Если ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
		
		ОтборыПоТипуНоменклатуры.Добавить(ОтборПоТипуНоменклатуры);
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("ФиксированныйМассив") Тогда
		
		Для Каждого Значение Из ОтборПоТипуНоменклатуры Цикл
			ОтборыПоТипуНоменклатуры.Добавить(Значение);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОтборПоТипуНоменклатуры) = Тип("Массив") Тогда
		
		ОтборыПоТипуНоменклатуры.ЗагрузитьЗначения(ОтборПоТипуНоменклатуры);
		
	Иначе
		Возврат;
	КонецЕсли;
	
	// Установить отбор по типам номенклатуры для списка номенклатуры.
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Форма.СписокНоменклатура, "ТипНоменклатуры", ОтборыПоТипуНоменклатуры, 
		ВидСравненияКомпоновкиДанных.ВСписке, "ОтборПоТипуНоменклатуры", (ОтборыПоТипуНоменклатуры.Количество() > 0));
		
	// Установить параметры выбора у номенклатуры корзины.
	Если ОтборыПоТипуНоменклатуры.Количество() > 0
		И (ЭтоФормаПодбораВДокументыПродажи Или ЭтоФормаПодбораВДокументыЗакупки) Тогда
		
		ПараметрыВыбора = Новый Массив;
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры", ОтборыПоТипуНоменклатуры));
		
		Форма.Элементы.КорзинаНоменклатура.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
		Если ЭтоФормаПодбораВДокументыЗакупки Тогда
			
			ПараметрыВыбора = Новый Массив;
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ТипНоменклатуры", ОтборыПоТипуНоменклатуры));
			
			Форма.Элементы.НоменклатураПоставщика.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает переданное в параметрах формы значение для отбора списка номенклатуры по виду номенклатуры.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьОтборПоВидНоменклатурыПоПараметрам(Форма) Экспорт

	ОтборПоВидуНоменклатуры = Неопределено;
	Форма.Параметры.Отбор.Свойство("ВидНоменклатуры", ОтборПоВидуНоменклатуры);
	Форма.Параметры.Отбор.Удалить("ВидНоменклатуры");
	
	Если ОтборПоВидуНоменклатуры = Неопределено Или Не ЗначениеЗаполнено(ОтборПоВидуНоменклатуры) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.ИспользоватьФильтры = Истина; 
	Форма.ВариантНавигации = "ПоСвойствам";
	Форма.ВидНоменклатуры = ОтборПоВидуНоменклатуры;

	ЗаполнитьДеревоОтборовНоменклатуры(Форма);
	ЗаполнитьДеревоОтбораИзСохраненныхПараметров(Форма);	
	УстановитьСтраницуВариантаНавигации(Форма);
	ПриИзмененииВидаНоменклатуры(Форма);
	ПриИзмененииИспользованияФильтров(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

// Устанавливает активным элементом на форме список номенклатуры
// или список характеристик. Используется в случае изменения значений фильтров.
// В этом случае теряется фокус, установленный на списке, и при попытке выбора
// товара активизируется другой элемент.
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьАктивныйСписокНаФорме(Форма)
	
	ИмяСпискаНоменклатуры = ПодборТоваровКлиентСервер.ИмяСпискаНоменклатурыПоВариантуПоиска(Форма);
	ИмяСпискаХарактеристик = ПодборТоваровКлиентСервер.ИмяСпискаХарактеристикПоВариантуПоиска(Форма);
	
	ТекущийЭлемент = Форма.Элементы[ИмяСпискаНоменклатуры];
	Если Форма.НавигацияПоХарактеристикам Тогда
		ТекущийЭлемент = Форма.Элементы[ИмяСпискаХарактеристик];
	КонецЕсли;
	
	Форма.ТекущийЭлемент = ТекущийЭлемент;
	
КонецПроцедуры

// Устанавливает градации качества в списке
//
// Параметры:
//	Форма - УправляемаяФорма - форма подбора.
//
Процедура УстановитьЭлементыСпискаЗначенийКачества(Форма)
	
	Форма.СписокКачества.Очистить();

	Если Форма.НоменклатураИсходногоКачества.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТоварыДругогоКачества.ГрадацияКачества
	|ИЗ
	|	РегистрСведений.ТоварыДругогоКачества КАК ТоварыДругогоКачества
	|ГДЕ
	|	ТоварыДругогоКачества.Номенклатура = &Номенклатура
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТоварыДругогоКачества.ГрадацияКачества.Порядок";
	
	Запрос.УстановитьПараметр("Номенклатура", Форма.НоменклатураИсходногоКачества);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Форма.СписокКачества.Добавить(Выборка.ГрадацияКачества);
	КонецЦикла;
	
	УстановитьПометкуГрадацииКачества(Форма);
	
КонецПроцедуры


// Возвращает флаг наличия значений цен по списку видов цен дата которых превышает
// дату подбора товаров. Необходима для принятия решения о том следует
// ли устанавливать параметр "Период" при обращении к срезу последних регистра
// сведений "ЦеныНоменклатуры". Без установки параметра запрос будет выполняться быстрее.
//
// Параметры:
//	ДатаПодбора - Дата - дата подбора товаров,
//	ВидыЦен - Массив, СписокЗначений - список видов цен.
//
// Возвращаемое значение:
//	Булево - Истина - есть значения цен установленные будущей датой,
//		Ложь - нет.
//
Функция ЕстьЗначенияЦенПозжеДатыПодбора(ДатаПодбора, ВидыЦен)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ЦеныНоменклатурыСрезПоследних.Период) КАК Период
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(, ВидЦены В (&ВидыЦен)) КАК ЦеныНоменклатурыСрезПоследних";
	
	Запрос.УстановитьПараметр("ВидыЦен", ВидыЦен);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.Период = Null Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат (КонецДня(Выборка.Период) > КонецДня(ДатаПодбора));
	
КонецФункции

// Возвращает массив видов цен номенклатуры которые указаны в соглашении с клиентом.
//
// Параметры:
//	СоглашениеСКлиентом - СправочникСсылка.СоглашенияСКлиентами - соглашение с клиентом.
//
// Возвращаемое значение:
//	Массив - массив видов цен соглашения.
//
Функция ВидыЦенПоСоглашениюсКлиентом(СоглашениеСКлиентом)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СоглашениеШапка.ВидЦен КАК ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
	|ГДЕ
	|	СоглашениеШапка.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ВидЦены
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Соглашение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЦеновыеГруппы.ВидЦен
	|ИЗ
	|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК ЦеновыеГруппы
	|ГДЕ
	|	ЦеновыеГруппы.Ссылка = &Соглашение";
	
	Запрос.УстановитьПараметр("Соглашение", СоглашениеСКлиентом);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидЦен");
	
КонецФункции

	
	
#КонецОбласти

#КонецОбласти
