////////////////////////////////////////////////////////////////////////////////
// СотрудникиФормы: методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Сотрудника

Процедура СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		СотрудникиОбновитьЭлементыФормы(Форма);
		
	КонецЕсли;

	// Заполнение группы информационных ссылок
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ИнформационныйЦентр") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ИнформационныйЦентрСервер");
		Модуль.ВывестиКонтекстныеСсылки(Форма, Форма.Элементы.ИнформационныеСсылки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриЧтенииНаСервере(Форма, ТекущийОбъект);	Форма.ФизическоеЛицоСсылка = ТекущийОбъект.ФизическоеЛицо;
	
КонецПроцедуры

Процедура СотрудникиПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// Обработчик подсистемы "Контактная информация"
	Если Форма.КонтактнаяИнформацияФизическогоЛица <> Неопределено Тогда
		УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Форма.КонтактнаяИнформацияФизическогоЛица, Форма.ФизическоеЛицо);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущийОбъект.ФизическоеЛицо) Тогда
		ТекущийОбъект.ФизическоеЛицо = Форма.ФизическоеЛицоСсылка;
	КонецЕсли;
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
			ЗаписатьФизическоеЛицоСотрудника(Форма);
		КонецЕсли; 
		
		ТекущийОбъект.УстановитьСсылкуНового(Форма.СотрудникСсылка);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	СохранитьДанныеДополнительныхФорм(Форма, Отказ);
	
КонецПроцедуры

Процедура СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	СотрудникиФормыВнутренний.СотрудникиОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты);
		
КонецПроцедуры

Процедура ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ) Экспорт
	
	СотрудникиФормыВнутренний.ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, ФизическоеЛицоСсылка, Отказ);
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация = Неопределено) Экспорт
	
	СотрудникиФормыВнутренний.ЛичныеДанныеФизическогоЛицаПриЗаписи(Форма, ФизическоеЛицоСсылка, Организация);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Физического лица

Процедура ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		
		ФизическиеЛицаОбновитьЭлементыФормы(Форма);
		ОбновитьОтображениеФормыФизическогоЛица(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
    // СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриЧтенииНаСервере(Форма, ТекущийОбъект);
	ОбновитьОтображениеФормыФизическогоЛица(Форма);
	
КонецПроцедуры

Процедура ФизическиеЛицаПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	
	// Обработчик подсистемы "Контактная информация"
	УправлениеКонтактнойИнформацией.ПередЗаписьюНаСервере(Форма, ТекущийОбъект);
	
	// Для нового физического лица устанавливаем ссылку
	Если Форма.Параметры.Ключ.Пустая() Тогда
		ТекущийОбъект.УстановитьСсылкуНового(Форма.ФизическоеЛицоСсылка);
	КонецЕсли;
	
	ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, Форма.ФизическоеЛицоСсылка, "ФизическоеЛицо");
	
КонецПроцедуры

Процедура ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПриЗаписиНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);	
	СохранитьДанныеДополнительныхФорм(Форма, Отказ);
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ФизическиеЛицаОбработкаПроверкиЗаполненияНаСервере(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
	ЛичныеДанныеФизическихЛицОбработкаПроверкиЗаполненияВФорме(Форма, Форма.ФизическоеЛицоСсылка, Отказ);			
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		ПроверитьЗаписьВФорме(Форма, "ДокументыФизическихЛиц", Форма.ФизическоеЛицоСсылка, Отказ);
	КонецЕсли; 
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(Форма, Форма.ФизическоеЛицо, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация

КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация = Неопределено, ИзФормыСотрудника = Ложь) Экспорт
	
	СотрудникиФормыВнутренний.ПрочитатьДанныеСвязанныеСФизлицом(Форма, ДоступенПросмотрДанныхФизическихЛиц, Организация, ИзФормыСотрудника);
	ФизическиеЛицаОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПередЗаписью(Форма, ФизическоеЛицоСсылка, ПутьКДаннымФизическогоЛицаВФорме = "ФизическоеЛицо")
	
	ИзменяемыеПоля = ИзменяемыеПоляФизическогоЛица();
	
	Если ФизическоеЛицоСсылка = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			Форма[КлючИЗначение.Значение] = Ложь;
		КонецЦикла;
	Иначе
		СтарыеЛичныеДанные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФизическоеЛицоСсылка, ОбщегоНазначенияКлиентСервер.КлючиСтруктурыВСтроку(ИзменяемыеПоля));
		ФизическоеЛицоДанныеФормы = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымФизическогоЛицаВФорме);
		Для Каждого КлючИЗначение Из ИзменяемыеПоля Цикл
			Форма[КлючИЗначение.Значение] = (СтарыеЛичныеДанные[КлючИЗначение.Ключ] <> ФизическоеЛицоДанныеФормы[КлючИЗначение.Ключ]);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ФизическиеЛицаОбновитьЭлементыФормы(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ФизическиеЛицаОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Процедура ОбновитьОтображениеФормыФизическогоЛица(Форма)
	
	ОбновитьОтображениеЛичныхДанных(Форма);
	
КонецПроцедуры

Процедура ОбновитьОтображениеЛичныхДанных(Форма) Экспорт
	Форма.ФизическоеЛицоМестоРождения = ПредставлениеМестаРождения(Форма.ФизическоеЛицо.МестоРождения);
КонецПроцедуры

Процедура ОбновитьОтображениеПредупреждающихНадписей(Форма) Экспорт
	
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
		СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Серия ,Форма.Элементы.ДокументыФизическихЛицСерия, Форма);
		СотрудникиКлиентСервер.ОбработатьОтображениеНомерДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Номер ,Форма.Элементы.ДокументыФизическихЛицНомер, Форма);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив сотрудников физического лица
//
// Параметры:
//  ФизическоеЛицо 		- СправочникСсылка.ФизическиеЛица, сотрудников которого необходимо получить
//	ИсключаяСотрудника 	- СправочникСсылка.СотрудникиОрганизации, если задать, указанный сотрудник, будет исключен
//						из массива возвращаемых ссылок
//	Организация			- СправочникСсылка.Организации, если задать, то будут отобраны сотрудники, имеющие отношение к
//						соответствующей ГоловнойОрганизации.
//
// Возвращаемое значение:
//   Массив   - Массив ссылок на сотрудников физического лица. 
//
Функция СотрудникиФизическогоЛица(ФизическоеЛицо, ИсключаяСотрудника = Неопределено, Организация = Неопределено) Экспорт
	
	ОтбиратьВсехСотрудников = (ИсключаяСотрудника = Неопределено ИЛИ ИсключаяСотрудника = Справочники.Сотрудники.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ОтбиратьПоВсемГоловнымОрганизациям = Ложь;
	Иначе
		ОтбиратьПоВсемГоловнымОрганизациям = Истина;
		ГоловнаяОрганизация = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Сотрудники.Ссылка КАК Сотрудник
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И (&ОтбиратьВсехСотрудников
	|			ИЛИ Сотрудники.Ссылка <> &ИсключаяСотрудника)
	|	И (&ОтбиратьПоВсемГоловнымОрганизациям
	|			ИЛИ Сотрудники.ГоловнаяОрганизация = &ГоловнаяОрганизация)";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицо);
	Запрос.УстановитьПараметр("ОтбиратьВсехСотрудников", ОтбиратьВсехСотрудников);
	Запрос.УстановитьПараметр("ИсключаяСотрудника", ИсключаяСотрудника);
	Запрос.УстановитьПараметр("ОтбиратьПоВсемГоловнымОрганизациям", ОтбиратьПоВсемГоловнымОрганизациям);
	Запрос.УстановитьПараметр("ГоловнаяОрганизация", ГоловнаяОрганизация);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
	
КонецФункции

#Область ПроцедурыДругихМодулейERP

// Функция раскладывает строку с данными о месте рождения на элементы структуры
//
Функция РазложитьМестоРождения(Знач СтрокаМестоРождения, ВерхнийРегистр = Истина) Экспорт
	
	Особое = 0;НаселенныйПункт	= "";Район	= "";Область	= "";Страна	= "";
	
	МассивМестоРождения	= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(?(ВерхнийРегистр, Врег(СтрокаМестоРождения), СтрокаМестоРождения));
	
	ЭлементовВМассиве = МассивМестоРождения.Количество();   
	Если ЭлементовВМассиве > 0 Тогда
		Если СокрЛП(МассивМестоРождения[0]) = "1" тогда
			Особое = 1;
		КонецЕсли;
	КонецЕсли;
	Если ЭлементовВМассиве > 1 Тогда
		НаселенныйПункт = СокрЛП(МассивМестоРождения[1]);
	КонецЕсли;
	Если ЭлементовВМассиве > 2 Тогда
		Район = СокрЛП(МассивМестоРождения[2]);
	КонецЕсли;
	Если ЭлементовВМассиве > 3 Тогда
		Область = СокрЛП(МассивМестоРождения[3]);
	КонецЕсли;
	Если ЭлементовВМассиве > 4 Тогда
		Страна = СокрЛП(МассивМестоРождения[4]);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Особое",Особое);
	СтруктураВозврата.Вставить("НаселенныйПункт",НаселенныйПункт);
	СтруктураВозврата.Вставить("Район",Район);
	СтруктураВозврата.Вставить("Область",Область);
	СтруктураВозврата.Вставить("Страна",Страна);
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПроверитьЗаписьВФорме(Форма, ИмяРегистра, ВедущийОбъект, Отказ) Экспорт
	
	ИмяИзмерения = Метаданные.РегистрыСведений[ИмяРегистра].Измерения[0].Имя;
	
	СтруктураВедущихОбъектов = Новый Структура();
	СтруктураВедущихОбъектов.Вставить(ИмяИзмерения, ВедущийОбъект);
	
	ПроверитьЗаписьВФормеПоСтруктуре(Форма, ИмяРегистра, СтруктураВедущихОбъектов, Отказ);
	
КонецПроцедуры

Процедура ПроверитьЗаписьВФормеПоСтруктуре(Форма, ИмяРегистра, СтруктураВедущихОбъектов, Отказ) Экспорт
	 	
КонецПроцедуры

Функция ЗаполненыЗначенияПоУмолчаниюПоСтруктуре(Форма, ИмяРегистра, СтруктураВедущихОбъектов) Экспорт
	
	ЗначенияПоУмолчанию = Истина;
	Для Каждого КлючЗначение Из Форма[ИмяРегистра + "Прежняя"] Цикл
		// Допущение, что если значение поля - ведущий объект, то это - измерение регистра
		// Значит, что если даже в ресурсе содержится значение с тем же типом, что и ведущий объект, то 
		// такое значение ресурса является значением по умолчанию.
		ВедущийОбъект = Неопределено;
		СтруктураВедущихОбъектов.Свойство(КлючЗначение.Ключ, ВедущийОбъект);
		Если ВедущийОбъект = Форма[ИмяРегистра][КлючЗначение.Ключ] Тогда
			Продолжить;
		КонецЕсли;
		// Допущение, значения типа Булево невозможно проверить на заполненность
		Если ТипЗнч(Форма[ИмяРегистра][КлючЗначение.Ключ]) = Тип("Булево") Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(Форма[ИмяРегистра][КлючЗначение.Ключ]) Тогда
			ЗначенияПоУмолчанию = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗначенияПоУмолчанию;
	
КонецФункции

#КонецОбласти
 

////////////////////////////////////////////////////////////////////////////////
// Процедуры чтения / записи данных ФизическогоЛица

Процедура ИнициализироватьТекущиеДанныеСотрудника(Форма) Экспорт
	ТекущиеДанныеКакСтруктура = Новый Структура("ТекущаяОрганизация,ТекущееПодразделение,ТекущаяДолжность,ТекущийВидЗанятости,ТекущаяТарифнаяСтавка,ДатаПриема,ДатаУвольнения");
	Форма.ТекущиеДанныеПрежняя = Новый ФиксированнаяСтруктура(ТекущиеДанныеКакСтруктура);
КонецПроцедуры

Функция КлючиСтруктурыТекущихКадровыхДанныхСотрудника() Экспорт
	Возврат СотрудникиФормыВнутренний.КлючиСтруктурыТекущихКадровыхДанныхСотрудника();
КонецФункции

//////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ДОПОЛНЕНИЯ ФОРМЫ МЕСТАМИ РАБОТЫ	

// Процедура - Установить параметры инфо надписи формы физ лица
//
// Параметры:
//  Форма	 - УправляемаяФорма - Управляемая форма.
Процедура УстановитьПараметрыИнфоНадписиФормыФизЛица(Форма) Экспорт
	
	Если Форма.ИмеютсяАктуальныеСотрудники  Тогда
		
		Форма.ИнфоНадписьМестаРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 является нашим сотрудником. Ниже приведены места работы. Для перехода к полной информации о месте работы используйте соответствующую ссылку. Для заполнения информации о новом месте работы сотрудника используйте ссылку ""Новое место работы""'"),
			Форма.ФизическоеЛицоСсылка);
																							
		Форма.МестаРаботыИнфоКартинка = БиблиотекаКартинок.Информация;
			
	ИначеЕсли Форма.ИмеютсяАктуальныеСотрудникиНеОтображаемые Тогда
		
		Форма.ИнфоНадписьМестаРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 является нашим сотрудником. Для заполнения информации о месте работы, должности и окладе сотрудника используйте ссылку ""Новое место работы""'"),
			Форма.ФизическоеЛицоСсылка);
			
		Форма.МестаРаботыИнфоКартинка = БиблиотекаКартинок.Информация;
			
	Иначе
		
		Форма.ИнфоНадписьМестаРаботы = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 не является нашим сотрудником. Для заполнения информации о месте работы, должности и окладе сотрудника используйте ссылку ""Новое место работы""'"),
			Форма.ФизическоеЛицоСсылка);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Форма.Элементы, "НовоеМестоРаботы", "Видимость", Истина);
		Форма.МестаРаботыИнфоКартинка = БиблиотекаКартинок.Предупреждение;
		
	КонецЕсли;		
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Работа с дополнительными формами

Процедура ПрочитатьДанныеИзХранилищаВФорму(Форма, ОписаниеДополнительнойФормы, АдресВХранилище) Экспорт
	
	РедактируемыеДанные = ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	Для каждого ДанныеФормы Из РедактируемыеДанные.ДополнительныеДанные Цикл
		
		Если ТипЗнч(ДанныеФормы.Значение) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Форма[ДанныеФормы.Ключ], ДанныеФормы.Значение);
		ИначеЕсли ТипЗнч(ДанныеФормы.Значение) = Тип("Массив") Тогда
			Форма[ДанныеФормы.Ключ].Очистить();
			Для каждого ЗаписьДанных Из ДанныеФормы.Значение Цикл
				НоваяЗапись = Форма[ДанныеФормы.Ключ].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьДанных);
			КонецЦикла;
		Иначе
			Форма[ДанныеФормы.Ключ] = ДанныеФормы.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ДанныеФормы Из РедактируемыеДанные.РеквизитыОбъекта Цикл
		
		ПутьКДанным = "";
		Если ОписаниеДополнительнойФормы.РеквизитыОбъекта.Свойство(ДанныеФормы.Ключ, ПутьКДанным) Тогда
			
			Если ТипЗнч(ДанныеФормы.Значение) = Тип("Массив") Тогда
				
				Данные = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным);
				Данные.Очистить();
				Для каждого ЗаписьДанных Из ДанныеФормы.Значение Цикл
					НоваяЗапись = Данные.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ЗаписьДанных);
				КонецЦикла;
				
			Иначе
				ОбщегоНазначенияКлиентСервер.УстановитьРеквизитФормыПоПути(Форма, ПутьКДанным, ДанныеФормы.Значение);
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция АдресДанныхДополнительнойФормы(ОписаниеДополнительнойФормы, Форма) Экспорт
	
	ПомещаемыеДанные = Новый Структура;
	ПомещаемыеДанные.Вставить("ДополнительныеДанные", Новый Структура);
	ПомещаемыеДанные.Вставить("РеквизитыОбъекта", Новый Структура);
	
	Для каждого РедактируемыйРеквизит Из ОписаниеДополнительнойФормы.ДополнительныеДанные Цикл
		
		Если ТипЗнч(Форма[РедактируемыйРеквизит.Ключ]) = Тип("ДанныеФормыСтруктура") Тогда
			
			ПомещаемоеЗначение = ОбщегоНазначения.СтруктураПоМенеджеруЗаписи(
				Форма[РедактируемыйРеквизит.Ключ], Метаданные.РегистрыСведений[РедактируемыйРеквизит.Ключ]);
			
		ИначеЕсли ТипЗнч(Форма[РедактируемыйРеквизит.Ключ]) = Тип("ДанныеФормыСтруктураСКоллекцией") Тогда
			
			Таблица = Форма[РедактируемыйРеквизит.Ключ].Выгрузить();
			ПомещаемоеЗначение = ОбщегоНазначения.ТаблицаЗначенийВМассив(Таблица);
			
		Иначе
			ПомещаемоеЗначение = Форма[РедактируемыйРеквизит.Ключ];
		КонецЕсли;
		
		ПомещаемыеДанные.ДополнительныеДанные.Вставить(РедактируемыйРеквизит.Ключ, ПомещаемоеЗначение);
		
	КонецЦикла;
	
	Для каждого РедактируемыйРеквизит Из ОписаниеДополнительнойФормы.РеквизитыОбъекта Цикл
		
		Данные = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, РедактируемыйРеквизит.Значение);
		Если ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			РедактируемыеДанные = ОбщегоНазначения.ТаблицаЗначенийВМассив(Данные.Выгрузить());
		Иначе
			РедактируемыеДанные = Данные;
		КонецЕсли;
		
		ПомещаемыеДанные.РеквизитыОбъекта.Вставить(РедактируемыйРеквизит.Ключ, РедактируемыеДанные);
		
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ПомещаемыеДанные, Форма.УникальныйИдентификатор);
	
КонецФункции

Процедура СохранитьДанныеДополнительныхФорм(Форма, Отказ) Экспорт
	
	Если ТипЗнч(Форма.ПрочитанныеДанныеФорм) = Тип("ФиксированноеСоответствие") Тогда
		Для каждого ИмяФормы Из Форма.ПрочитанныеДанныеФорм Цикл
			СохранитьДанныеДополнительнойФормы(Форма,ИмяФормы.Ключ, Отказ); 
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Частный случай для форм сотрудника
Процедура СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ) Экспорт
	
	СотрудникиФормыВнутренний.СохранитьДанныеДополнительнойФормы(Форма, ИмяФормы, Отказ);
	
КонецПроцедуры

Функция ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор) Экспорт
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ФизическоеЛицоСсылка, ФизическоеЛицоВерсияДанных, ФормаУникальныйИдентификатор);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	Возврат Истина;
КонецФункции

// Возвращает список физлиц с похожим наименованием
// Параметры:
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое уже сопоставлено с сотрудником.
//
Функция ПодобратьСписокФизЛиц(ФизическоеЛицоСсылка, Знач Фамилия, Знач Имя, Знач Отчество, Знач Уточнение = Неопределено) Экспорт
	
	СтруктураВозврат = Новый Структура("ФизическоеЛицоУникально", Истина);
	
	СписокФизлиц = Новый СписокЗначений;
	Фамилия  = СОКРЛП(Фамилия);
	Имя 	 = СОКРЛП(Имя);
	Отчество = СОКРЛП(Отчество);
	Наименование = Фамилия +" "+ Имя +" "+ Отчество;
	
	Если ПустаяСтрока(Наименование) Тогда
		Возврат СтруктураВозврат;
	КонецЕсли;
	
	ПохожиеФизическиеЛица = ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, Фамилия, Имя, Отчество, Уточнение); 
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивФизлиц = ПохожиеФизическиеЛица.ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если МассивФизлиц.Количество() > 0 Тогда
		
		СтруктураВозврат.ФизическоеЛицоУникально = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка В(&МассивФизлиц)";
		
		Запрос.УстановитьПараметр("МассивФизлиц", МассивФизлиц);
		
		МассивДоступныхФизическихЛиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		
		Если МассивДоступныхФизическихЛиц.Количество() = МассивФизлиц.Количество() Тогда
			
			СтруктураВозврат.Вставить("ДанныеФизическихЛицДоступны", Истина);
			
			ДанныеФизическихЛиц = КадровыйУчет.КадровыеДанныеФизическихЛиц(
				Истина, 
				МассивФизлиц, 
				"ФИОПолные,ДатаРождения,ДокументПредставление", 
				ТекущаяДатаСеанса());
			
			СтруктураВозврат.Вставить("ДанныеФизическихЛиц", ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеФизическихЛиц));
			
		Иначе
			
			СтруктураВозврат.Вставить("ДанныеФизическихЛицДоступны", Ложь);
			СтруктураВозврат.Вставить("ВозможнаПроверкаПоИНН", Ложь);
			СтруктураВозврат.Вставить("ВозможнаПроверкаПоСНИЛС", Ложь);
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			
			УстановитьПривилегированныйРежим(Истина);
			
			КадровыйУчет.СоздатьНаДатуВТКадровыеДанныеФизическихЛиц(
				Запрос.МенеджерВременныхТаблиц,
				Ложь,
				МассивФизлиц,
				"ИНН,СтраховойНомерПФР",
				ТекущаяДатаСеанса());
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МИНИМУМ(КадровыеДанныеФизическихЛиц.ИНН) КАК ИНН,
			|	МИНИМУМ(КадровыеДанныеФизическихЛиц.СтраховойНомерПФР) КАК СНИЛС
			|ПОМЕСТИТЬ ВТМинимальныеИННИСНИЛС
			|ИЗ
			|	ВТКадровыеДанныеФизическихЛиц КАК КадровыеДанныеФизическихЛиц
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА МинимальныеИННИСНИЛС.ИНН = """"
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ВозможнаПроверкаПоИНН,
			|	ВЫБОР
			|		КОГДА МинимальныеИННИСНИЛС.СНИЛС = """"
			|			ТОГДА ЛОЖЬ
			|		ИНАЧЕ ИСТИНА
			|	КОНЕЦ КАК ВозможнаПроверкаПоСНИЛС
			|ИЗ
			|	ВТМинимальныеИННИСНИЛС КАК МинимальныеИННИСНИЛС";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			УстановитьПривилегированныйРежим(Ложь);
			
			Если Выборка.Следующий() Тогда
				
				ЗаполнитьЗначенияСвойств(СтруктураВозврат, Выборка);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат СтруктураВозврат;
	
КонецФункции

Процедура ОбновитьДанныеФизическогоЛица(Форма) Экспорт
	ПрочитатьДанныеСвязанныеССотрудником(Форма);
КонецПроцедуры

Процедура ПрочитатьДанныеСвязанныеССотрудником(Форма) Экспорт
	
	СотрудникиФормыВнутренний.ПрочитатьДанныеСвязанныеССотрудником(Форма);
	СотрудникиОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

Функция ИзменяемыеПоляФизическогоЛица() Экспорт
	
	ИзменяемыеПоля = Новый Структура;
	ИзменяемыеПоля.Вставить("Пол", "ИзмененПол");
	ИзменяемыеПоля.Вставить("ДатаРождения", "ИзмененаДатаРождения");
	
	Возврат ИзменяемыеПоля;
	
КонецФункции

Процедура СотрудникиПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если НЕ Форма.ИзмененыЛичныеДанные Тогда
		ПрочитатьДанныеСвязанныеССотрудником(Форма);
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаписатьФизическоеЛицоСотрудника(Форма) Экспорт
	
	// Запись физического лица
	Если Форма.ФизическоеЛицоЗаблокировано ИЛИ Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
		
		// проверим права на запись нового физлица
		ПравоНаДобавлениеИзменениеФизическихЛиц = Пользователи.РолиДоступны("ДобавлениеИзменениеДанныхФизическихЛицЗарплатаКадры,ДобавлениеИзменениеПерсональныхДанныхФизическихЛиц,ДобавлениеИзменениеФизическихЛиц");
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() И НЕ ПравоНаДобавлениеИзменениеФизическихЛиц Тогда
			ВызватьИсключение НСТР("ru = 'Нет прав на запись нового физического лица. Сотрудник не записан.'");
		КонецЕсли;
	
		ФизическоеЛицоОбъект = Форма.РеквизитФормыВЗначение("ФизическоеЛицо");
		Если ФизическоеЛицоОбъект.Ссылка.Пустая() Тогда
			ФизическоеЛицоОбъект.УстановитьСсылкуНового(Форма.ФизическоеЛицоСсылка);
		КонецЕсли;
		
		ФизическоеЛицоОбъект.Записать();
		Если Форма.ФизическоеЛицо.Ссылка.Пустая() Тогда
			
			Форма.ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
						
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(Сотрудник, ФизическоеЛицо, Организация, ВидЗанятости, ДатаПриема) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли;
	
	ТекстСообщенияОКонфликте = "";
	Если ЗначениеЗаполнено(ДатаПриема) И ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(ВидЗанятости) Тогда
		
		ГоловнаяОрганизация = Организация;
		
		ЕстьОсновноеМестоРаботы = Ложь;
		
		СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,ТабельныйНомер,Должность,ВидЗанятости,ДатаПриема,ДатаУвольнения";
		ТаблицаПоРабочимМестам = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФормы.СотрудникиФизическогоЛица(ФизическоеЛицо, Сотрудник), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
		
		МассивКонфликтныхРабочихМест = Новый Массив;
		Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
			
			Если НЕ (СтрокаТаблицаПоРабочимМестам.ДатаПриема <> '00010101000000' И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
				И (СтрокаТаблицаПоРабочимМестам.ДатаУвольнения > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаУвольнения = '00010101000000')) Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
				Если СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				ИначеЕсли СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство 
							И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				КонецЕсли; 
			ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда 
				Если (СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
						ИЛИ СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
						И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
					МассивКонфликтныхРабочихМест.Добавить(СтрокаТаблицаПоРабочимМестам);
				КонецЕсли;
			КонецЕсли;
			
			Если (СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы
					ИЛИ СтрокаТаблицаПоРабочимМестам.ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство)
					И СтрокаТаблицаПоРабочимМестам.ГоловнаяОрганизация = ГоловнаяОрганизация Тогда
				ЕстьОсновноеМестоРаботы = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивКонфликтныхРабочихМест.Количество() > 0 Тогда
			
			ТекстСообщенияОКонфликте = "";
			Для каждого СтрокаКонфликтногоСотрудника Из МассивКонфликтныхРабочихМест Цикл
				ТекстСообщенияОКонфликте = ТекстСообщенияОКонфликте + Символы.ПС +
					ТекстСообщенияОКонфликтеВидаЗанятости(
						ВидЗанятости,
						Организация,
						СтрокаКонфликтногоСотрудника.Организация,
						СтрокаКонфликтногоСотрудника.ВидЗанятости,
						СтрокаКонфликтногоСотрудника.ТабельныйНомер,
						СтрокаКонфликтногоСотрудника.Должность);
			КонецЦикла;	
					
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство И НЕ ЕстьОсновноеМестоРаботы Тогда
			ТекстСообщенияОКонфликте = ТекстСообщенияОКонфликтеВидаЗанятости(ВидЗанятости, Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстСообщенияОКонфликте;
	
КонецФункции

Функция ПолучитьВидЗанятостиДляНовогоСотрудника(Сотрудник, Организация, ФизическоеЛицо) Экспорт

	Если ФизическоеЛицо = Неопределено Тогда
		ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Сотрудник, "ФизическоеЛицо");
	КонецЕсли; 
	
	СписокНеобходимыхДанных = "ГоловнаяОрганизация,Организация,ВидЗанятости,ДатаПриема,ДатаУвольнения";
	ТаблицаПоРабочимМестамПредварительно = КадровыйУчет.КадровыеДанныеСотрудников(Истина, СотрудникиФизическогоЛица(ФизическоеЛицо), СписокНеобходимыхДанных, ТекущаяДатаСеанса());
	
	// Рассчитаем актуальность сотрудника
	ТаблицаПоРабочимМестамПредварительно.Колонки.Добавить("СотрудникАктуален", Новый ОписаниеТипов("Булево"));
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестамПредварительно Цикл
		СтрокаТаблицаПоРабочимМестам.СотрудникАктуален = СтрокаТаблицаПоРабочимМестам.ДатаПриема <> '00010101000000' И СтрокаТаблицаПоРабочимМестам.ДатаПриема < ТекущаяДатаСеанса()
			И (СтрокаТаблицаПоРабочимМестам.ДатаУвольнения > ТекущаяДатаСеанса() ИЛИ СтрокаТаблицаПоРабочимМестам.ДатаУвольнения = '00010101000000');
		
	КонецЦикла;
	
	// Оставим записи только для актуальных сотрудников
	ТаблицаПоРабочимМестам =  ТаблицаПоРабочимМестамПредварительно.Скопировать(ТаблицаПоРабочимМестамПредварительно.НайтиСтроки(Новый Структура("СотрудникАктуален", Истина)));	
	Если ТаблицаПоРабочимМестам.Количество() > 0 Тогда
		ГоловнаяОрганизация = Организация;
		// Есть актуальные рабочие места
		// Проверим есть ли рабочие места по основному месту работы.
		СтруктураОтбора = Новый Структура("ВидЗанятости", ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы"));
		АктуальныеСотрудникиПоОсновномуМестуРаботы = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
		Если АктуальныеСотрудникиПоОсновномуМестуРаботы.Количество() > 0 Тогда
			// Проверим актуальные рабочие места с основным рабочим местом в выбранной организации.
			СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы"));
			АктуальныеСотрудникиПоОсновномуМестуРаботыВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
			Если АктуальныеСотрудникиПоОсновномуМестуРаботыВыбраннойОрганизации.Количество() > 0 Тогда
				// Уже работает в этой организации по основному месту работы
				Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство");
			Иначе
				// Основное место работы в другой организации
				// Проверим рабочее места как внешнего совместителя в выбранной организации.
				СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство"));
				АктуальныеСотрудникиВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
				Если АктуальныеСотрудникиВыбраннойОрганизации.Количество() > 0 Тогда
					// Уже работает как внешний совместитель
					Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство");
				Иначе
					// Значит можно предложить внешнее совместительство
					Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство");
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Проверим вид занятости (внешнее совместительство) в выбранной организации
			СтруктураОтбора = Новый Структура("ГоловнаяОрганизация,ВидЗанятости", ГоловнаяОрганизация, ПредопределенноеЗначение("Перечисление.ВидыЗанятости.Совместительство"));
			АктуальныеСотрудникиВыбраннойОрганизации = ТаблицаПоРабочимМестам.НайтиСтроки(СтруктураОтбора);
			Если АктуальныеСотрудникиВыбраннойОрганизации.Количество() > 0 Тогда
				// Уже работает по совместительству
				Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ВнутреннееСовместительство");
			Иначе
				// Значит можно предложить основное место работы
				Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Актуальных рабочих мест нет, значит основное место работы
	Возврат ПредопределенноеЗначение("Перечисление.ВидыЗанятости.ОсновноеМестоРаботы");
КонецФункции

Функция ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение = Неопределено) Экспорт
	
	Возврат СотрудникиФормыВнутренний.ДругиеРабочиеМеста(ФизическоеЛицоСсылка, СотрудникИсключение);
	
КонецФункции

Процедура ЗаполнитьФормуМестамиРаботы(Форма, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "", СотрудникИсключение = Неопределено, ВыводитьПодробнуюИнформацию = Ложь) Экспорт
	
	ЧислоОтображаемыхМестРаботы = 4;
	
	СоответствиеКомандСотрудникам = Новый Соответствие;
	
	ТаблицаПоРабочимМестам = ДругиеРабочиеМеста(Форма.ФизическоеЛицоСсылка, СотрудникИсключение);
	
	// Удаляем записи с не заполненной организацией
	МассивСтрокСПустойОрганизацией = ТаблицаПоРабочимМестам.НайтиСтроки(Новый Структура("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка")));
	Для Каждого ЭлементМассивСтрокСПустойОрганизацией Из МассивСтрокСПустойОрганизацией Цикл
		ТаблицаПоРабочимМестам.Удалить(ЭлементМассивСтрокСПустойОрганизацией);
	КонецЦикла;
	
	Форма.КоличествоСотрудников = 0;
	Если ВыводитьПодробнуюИнформацию Тогда
		Форма.ИмеютсяСотрудники = Ложь;
	КонецЕсли;	
	
	Для Каждого СтрокаТаблицаПоРабочимМестам Из ТаблицаПоРабочимМестам Цикл
		Если Форма.КоличествоСотрудников >= ЧислоОтображаемыхМестРаботы Тогда
			Прервать;	
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицаПоРабочимМестам.Организация, "Наименование,НаименованиеСокращенное");
		УстановитьПривилегированныйРежим(Ложь);
		 
		Форма.КоличествоСотрудников = Форма.КоличествоСотрудников + 1;
		
		Если ВыводитьПодробнуюИнформацию Тогда
			ДобавитьЭлементыФормыДляМестаРаботыПодробно(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, Форма.КоличествоСотрудников, ИмяГруппы, ИмяПоследнегоЭлементаГруппы);
		Иначе
			Если Не ЗначениеЗаполнено(РеквизитыОрганизации.Наименование) Тогда
				Продолжить;
			КонецЕсли;	
			ДобавитьЭлементыФормыДляМестаРаботыКратко(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, "ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, ИмяГруппы);
		КонецЕсли;	
			
		СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, СтрокаТаблицаПоРабочимМестам.Сотрудник);
		
		Если ВыводитьПодробнуюИнформацию Тогда
			Форма.ИмеютсяАктуальныеСотрудники = (Форма.ИмеютсяАктуальныеСотрудники Или СтрокаТаблицаПоРабочимМестам.СотрудникАктуален);
			Форма.ИмеютсяСотрудники = Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Если ТаблицаПоРабочимМестам.Количество() > ЧислоОтображаемыхМестРаботы Тогда
		ДобавитьКомандуДругиеМестаРаботы(Форма, ИмяГруппы, ВыводитьПодробнуюИнформацию);
	КонецЕсли;	
	
	Форма.СоответствиеКомандСотрудникам = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам);
	
КонецПроцедуры	

Процедура ОбработкаИзмененияДанныхОРабочемМесте(Форма, Сотрудник, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "", ВыводитьПодробнуюИнформацию = Ложь) Экспорт 
	
	ФОИспользоватьНачислениеЗарплаты = Ложь;
	
	Если НЕ ФОИспользоватьНачислениеЗарплаты Тогда
		Возврат;
	КонецЕсли;	
	
	ЧислоОтображаемыхМестРаботы = 4;
	СоответствиеКомандСотрудникам = Новый Соответствие;
	
	ТаблицаРабочиеМеста = ДругиеРабочиеМеста(Форма.ФизическоеЛицоСсылка);
	
	ТаблицаПоРабочимМестам = ТаблицаРабочиеМеста.Скопировать(Новый Структура("Сотрудник", Сотрудник));
	
	
	Если ТаблицаПоРабочимМестам.Количество() > 0 Тогда
		
		СтрокаТаблицаПоРабочимМестам = ТаблицаПоРабочимМестам[0];
		
		ИмяКоманды = ПолучитьИмяКомандыОткрытияФормыСотрудника(Сотрудник, Форма.СоответствиеКомандСотрудникам);
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицаПоРабочимМестам.Организация) Тогда
			
			Если ИмяКоманды <> Неопределено Тогда
				
				УдалитьМестоРаботыВФорме(Форма, ИмяКоманды, ЧислоОтображаемыхМестРаботы, ВыводитьПодробнуюИнформацию);
				
			КонецЕсли;
			
		Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаТаблицаПоРабочимМестам.Организация, "Наименование,НаименованиеСокращенное");
			УстановитьПривилегированныйРежим(Ложь);
			
			Если ИмяКоманды = Неопределено Тогда
				
				СоответствиеКомандСотрудникам = Новый Соответствие;
				Если Форма.КоличествоСотрудников < ЧислоОтображаемыхМестРаботы Тогда 
					Форма.КоличествоСотрудников = Форма.КоличествоСотрудников + 1;
					
					Если ВыводитьПодробнуюИнформацию Тогда
						ДобавитьЭлементыФормыДляМестаРаботыПодробно(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, Форма.КоличествоСотрудников, ИмяГруппы, ИмяПоследнегоЭлементаГруппы);
					Иначе
						ДобавитьЭлементыФормыДляМестаРаботыКратко(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, "ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, ИмяГруппы);
					КонецЕсли;
					СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Форма.КоличествоСотрудников, СтрокаТаблицаПоРабочимМестам.Сотрудник);
					
				ИначеЕсли ВыводитьПодробнуюИнформацию Тогда
					СместитьМестаРаботыВФорме(Форма, СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, ЧислоОтображаемыхМестРаботы, Форма.СоответствиеКомандСотрудникам);
					Если Форма.Команды.Найти("ДругиеМестаРаботы") = Неопределено Тогда
						ДобавитьКомандуДругиеМестаРаботы(Форма, ИмяГруппы, ВыводитьПодробнуюИнформацию = Ложь);
					КонецЕсли;
				КонецЕсли;	
				
				Для Каждого КлючЗначение Из Форма.СоответствиеКомандСотрудникам Цикл
					СоответствиеКомандСотрудникам.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);		
				КонецЦикла;	
				
				Форма.СоответствиеКомандСотрудникам = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам);
				
			Иначе
				Форма.Элементы[ИмяКоманды].Заголовок = ЗаголовокКнопкиОткрытияСотрудника(СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), ВыводитьПодробнуюИнформацию);
				НомерСотрудника = СтрЗаменить(ИмяКоманды, "ОткрытьФормуСотрудника", "");
				Если ВыводитьПодробнуюИнформацию Тогда
					СтруктураИнфоНадписи = ПоясняющаяНадписьКМестуРаботыСотрудника(СтрокаТаблицаПоРабочимМестам, РеквизитыОрганизации, ТекущаяДатаСеанса());	
					Для Каждого КлючЗначение Из СтруктураИнфоНадписи Цикл
						Форма[КлючЗначение.Ключ + НомерСотрудника] = КлючЗначение.Значение;
					КонецЦикла;	
					Форма["СотрудникАктуален" + НомерСотрудника] = СтрокаТаблицаПоРабочимМестам.СотрудникАктуален;
				КонецЕсли;	
			КонецЕсли;	
			
			Если ВыводитьПодробнуюИнформацию Тогда
				Форма.ИмеютсяАктуальныеСотрудники = Ложь;
				Для Сч = 1 По Форма.КоличествоСотрудников Цикл
					Если Форма["СотрудникАктуален" + Сч] Тогда
						Форма.ИмеютсяАктуальныеСотрудники = Истина;
					КонецЕсли;	
				КонецЦикла;
				УстановитьПараметрыИнфоНадписиФормыФизЛица(Форма);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДата, ВыводитьПодробнуюИнформацию = Ложь) 
	
    Возврат СотрудникиФормыВнутренний.ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДата, ВыводитьПодробнуюИнформацию = Ложь);
	
КонецФункции

Функция ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации,ДатаСведений) 
	
	Возврат СотрудникиФормыВнутренний.ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ДатаСведений);
	
КонецФункции	

Процедура УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника)
	
	СотрудникиФормыВнутренний.УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника);
	
КонецПроцедуры

Процедура УдалитьМестоРаботыВФорме(Форма, ИмяКоманды, ЧислоОтображаемыхМестРаботы, ВыводитьПодробнуюИнформацию)

	НомерСотрудника = Число(СтрЗаменить(ИмяКоманды, "ОткрытьФормуСотрудника", ""));
	
	СоответствиеКомандСотрудникам = Новый Соответствие;
	Для Каждого КлючЗначение Из Форма.СоответствиеКомандСотрудникам Цикл
		НомерСотрудникаСоответствия = Число(СтрЗаменить(КлючЗначение.Ключ, "ОткрытьФормуСотрудника", ""));
		Если НомерСотрудникаСоответствия < НомерСотрудника Тогда
			СоответствиеКомандСотрудникам.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);		
		КонецЕсли; 
	КонецЦикла;	
	
	КоличествоСотрудников = Форма.КоличествоСотрудников;
	
	Если НомерСотрудника < КоличествоСотрудников Тогда
		
		Для Сч = НомерСотрудника По КоличествоСотрудников - 1 Цикл
			Если ВыводитьПодробнуюИнформацию Тогда
				Форма["ИнфоНадписьПериодРаботы" + Строка(Сч)] = Форма["ИнфоНадписьПериодРаботы" + Строка(Сч + 1)]; 
				Форма["ИнфоНадписьОрганизация" + Строка(Сч)]  = Форма["ИнфоНадписьОрганизация"+ Строка(Сч + 1)]; 
				Форма["ИнфоНадписьДолжность" + Строка(Сч)]	  = Форма["ИнфоНадписьДолжность" + Строка(Сч + 1)]; 
				Форма["ИнфоНадписьОклад" + Строка(Сч)]  = Форма["ИнфоНадписьОклад" + Строка(Сч + 1)]; 
				Форма["СотрудникАктуален" + Строка(Сч)] = Форма["СотрудникАктуален" + Строка(Сч + 1)];
			КонецЕсли;
			Форма.Элементы["ОткрытьФормуСотрудника" + Строка(Сч)].Заголовок = Форма.Элементы["ОткрытьФормуСотрудника" + Строка(Сч + 1)].Заголовок;
			СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Строка(Сч),  Форма.СоответствиеКомандСотрудникам["ОткрытьФормуСотрудника" + Строка(Сч + 1)]);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВыводитьПодробнуюИнформацию Тогда
		Форма.Элементы.Удалить(Форма.Элементы.Найти("ДанныеОРабочемМестеГруппа" + КоличествоСотрудников));
		Форма.Команды.Удалить(Форма.Команды.Найти("ОткрытьФормуСотрудника" + КоличествоСотрудников));
		
		МассивРеквизитов = Новый Массив;
		МассивРеквизитов.Добавить("СотрудникАктуален" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьПериодРаботы" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьОрганизация" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьДолжность" + КоличествоСотрудников);
		МассивРеквизитов.Добавить("ИнфоНадписьОклад" + КоличествоСотрудников);
		
		Форма.ИзменитьРеквизиты(,МассивРеквизитов);
		
	Иначе	
		Форма.Элементы.Удалить(Форма.Элементы.Найти("ОткрытьФормуСотрудника" + КоличествоСотрудников + "Группа"));
		Форма.Команды.Удалить(Форма.Команды.Найти("ОткрытьФормуСотрудника" + КоличествоСотрудников));
	КонецЕсли;
	
	Форма.КоличествоСотрудников = КоличествоСотрудников - 1;
	Форма.СоответствиеКомандСотрудникам = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам);
	Если Форма.КоличествоСотрудников < 4 и Форма.Команды.Найти("ДругиеМестаРаботы") <> Неопределено Тогда
		Если Форма.Команды.Найти("ДругиеМестаРаботы") Тогда
			Форма.Команды.Удалить("ДругиеМестаРаботы");
		КонецЕсли; 
		Если Форма.Элементы.Найти("ДругиеМестаРаботыКнопка") Тогда
			Форма.Элементы.Удалить("ДругиеМестаРаботыКнопка");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура СместитьМестаРаботыВФорме(Форма, ДанныеСотрудника, РеквизитыОрганизации, ЧислоОтображаемыхМестРаботы, СоответствиеКомандСотрудникамДанныеФормы)
	СоответствиеКомандСотрудникам = Новый Соответствие;
	Форма.ИмеютсяАктуальныеСотрудникиНеОтображаемые = Форма.ИмеютсяАктуальныеСотрудникиНеОтображаемые Или Форма["СотрудникАктуален" + Строка(ЧислоОтображаемыхМестРаботы)]; 
	Для Сч = 0 По ЧислоОтображаемыхМестРаботы - 2 Цикл
		НомерМестаРаботы = ЧислоОтображаемыхМестРаботы - Сч;
		Форма["ИнфоНадписьПериодРаботы" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьПериодРаботы" + Строка(НомерМестаРаботы - 1)]; 
		Форма["ИнфоНадписьОрганизация" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьОрганизация"+ Строка(НомерМестаРаботы - 1)]; 
		Форма["ИнфоНадписьДолжность" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьДолжность" + Строка(НомерМестаРаботы - 1)]; 
		Форма["ИнфоНадписьОклад" + Строка(НомерМестаРаботы)] = Форма["ИнфоНадписьОклад" + Строка(НомерМестаРаботы - 1)]; 
		Форма["СотрудникАктуален" + Строка(НомерМестаРаботы)] = Форма["СотрудникАктуален" + Строка(НомерМестаРаботы - 1)];
		Форма.Элементы["ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы)].Заголовок = Форма.Элементы["ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы - 1)].Заголовок;
		СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы),  СоответствиеКомандСотрудникамДанныеФормы["ОткрытьФормуСотрудника" + Строка(НомерМестаРаботы - 1)]);		
	КонецЦикла;	
	
	СтруктураИнфоНадписи = ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДатаСеанса());
	Форма.Элементы["ОткрытьФормуСотрудника1"].Заголовок = ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), Истина);

	Для Каждого КлючЗначение Из СтруктураИнфоНадписи Цикл
		Форма[КлючЗначение.Ключ + "1"] = КлючЗначение.Значение;
	КонецЦикла;
	Форма["СотрудникАктуален1"] = ДанныеСотрудника.СотрудникАктуален;
	СоответствиеКомандСотрудникам.Вставить("ОткрытьФормуСотрудника1", ДанныеСотрудника.Сотрудник);
	
	СоответствиеКомандСотрудникамДанныеФормы = Новый ФиксированноеСоответствие(СоответствиеКомандСотрудникам); 	
КонецПроцедуры	

Функция ПолучитьИмяКомандыОткрытияФормыСотрудника(Сотрудник, СоответствиеКомандСотрудникам)
	Для Каждого КлючЗначение Из СоответствиеКомандСотрудникам Цикл
		Если КлючЗначение.Значение = Сотрудник Тогда
			Возврат КлючЗначение.Ключ;
		КонецЕсли;	
	КонецЦикла;	
	Возврат Неопределено;
КонецФункции	

Процедура ДобавитьЭлементыФормыДляМестаРаботыПодробно(Форма, ДанныеСотрудника, РеквизитыОрганизации, НомерСотрудника, ИмяГруппы, ИмяПоследнегоЭлементаГруппы = "")
		
	МассивРеквизитов = Новый Массив;
	
	РеквизитСотрудникАктуален = Новый РеквизитФормы("СотрудникАктуален" + НомерСотрудника, Новый ОписаниеТипов("Булево"));
	МассивРеквизитов.Добавить(РеквизитСотрудникАктуален);
		
	РеквизитИнфоНадписьПериодРаботы = Новый РеквизитФормы("ИнфоНадписьПериодРаботы" + НомерСотрудника, Новый ОписаниеТипов("Строка"));
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьПериодРаботы);
	
	РеквизитИнфоНадписьОрганизация = Новый РеквизитФормы("ИнфоНадписьОрганизация" + НомерСотрудника, Новый ОписаниеТипов("Строка"));
	РеквизитИнфоНадписьОрганизация.Заголовок = НСтр("ru = 'Организация'");
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьОрганизация);
	
	РеквизитИнфоНадписьДолжность = Новый РеквизитФормы("ИнфоНадписьДолжность" + НомерСотрудника, Новый ОписаниеТипов("Строка"));
	РеквизитИнфоНадписьДолжность.Заголовок = НСтр("ru = 'Должность'");
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьДолжность);
	
	РеквизитИнфоНадписьОклад = Новый РеквизитФормы("ИнфоНадписьОклад" + НомерСотрудника, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	РеквизитИнфоНадписьОклад.Заголовок =  НСтр("ru = 'Оклад'");
	МассивРеквизитов.Добавить(РеквизитИнфоНадписьОклад);

	Форма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Форма[РеквизитСотрудникАктуален.Имя] = ДанныеСотрудника.СотрудникАктуален;
	
	Команда = Форма.Команды.Добавить("ОткрытьФормуСотрудника" + НомерСотрудника);
	Команда.Действие  = "Подключаемый_ОткрытьФормуСотрудника";
	Команда.Отображение  =  ОтображениеКнопки.Авто;
	
	ПоследнийЭлементГруппы = Форма.Элементы.Найти(ИмяПоследнегоЭлементаГруппы);
	
	ГруппаФормыДанныеОРабочемМесте = Форма.Элементы.Найти("ДанныеОРабочемМестеГруппаВертикальная" + НомерСотрудника);
	Если ГруппаФормыДанныеОРабочемМесте = Неопределено Тогда
		
		Если ПоследнийЭлементГруппы = Неопределено Тогда 
			ГруппаФормыДанныеОРабочемМесте = Форма.Элементы.Вставить("ДанныеОРабочемМестеГруппаВертикальная" + НомерСотрудника, Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы]);
		Иначе 	
			ГруппаФормыДанныеОРабочемМесте = Форма.Элементы.Вставить("ДанныеОРабочемМестеГруппаВертикальная" + НомерСотрудника, Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы], ПоследнийЭлементГруппы);
		КонецЕсли;
		
	КонецЕсли;
	
	ГруппаФормыДанныеОРабочемМесте.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормыДанныеОРабочемМесте.ОтображатьЗаголовок = Ложь;
	ГруппаФормыДанныеОРабочемМесте.Отображение = ОтображениеОбычнойГруппы.Нет;
	
	ПолеНадписи =  Форма.Элементы.Добавить("ИнфоНадписьПериодРаботы" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормыДанныеОРабочемМесте);
	ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьПериодРаботы.Имя;	
	ПолеНадписи.Вид = ВидПоляФормы.ПолеНадписи;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ПолеНадписи.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	ПолеНадписи.Шрифт = Новый Шрифт(,, Истина);
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	ГруппаФормыДанныеОРабочемМестеГоризонтальная = Форма.Элементы.Вставить("ДанныеОРабочемМестеГруппа" + НомерСотрудника, Тип("ГруппаФормы"), ГруппаФормыДанныеОРабочемМесте);
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.ОтображатьЗаголовок = Ложь;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.РастягиватьПоВертикали = Ложь;
	ГруппаФормыДанныеОРабочемМестеГоризонтальная.РастягиватьПоГоризонтали = Ложь;
	
	Кнопка = Форма.Элементы.Вставить(Команда.Имя, Тип("КнопкаФормы"), ГруппаФормыДанныеОРабочемМестеГоризонтальная);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Высота = 2;
	Кнопка.Заголовок = ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), Истина);
	
	ГруппаФормы = Форма.Элементы.Вставить("ГруппаИнфоНадписи" + НомерСотрудника, Тип("ГруппаФормы"), ГруппаФормыДанныеОРабочемМестеГоризонтальная, Кнопка);
	ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФормы.ОтображатьЗаголовок = Ложь;
	ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.РастягиватьПоВертикали = Ложь;
	ГруппаФормы.РастягиватьПоГоризонтали = Ложь;
	
	ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьОрганизация" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормы);
	ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьОрганизация.Имя;	
	ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
	ПолеНадписи.ТолькоПросмотр = Истина;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьДолжность" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормы);
	ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьДолжность.Имя;	
	ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
	ПолеНадписи.ТолькоПросмотр = Истина;
	ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
	ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	
	Если ДанныеСотрудника.Владелец().Колонки.Найти("ТекущаяТарифнаяСтавка") <> Неопределено Тогда
		ПолеНадписи =  Форма.Элементы.Вставить("ИнфоНадписьОклад" + НомерСотрудника, Тип("ПолеФормы"), ГруппаФормы);
		ПолеНадписи.ПутьКДанным = РеквизитИнфоНадписьОклад.Имя;	
		ПолеНадписи.Вид = ВидПоляФормы.ПолеВвода;
		ПолеНадписи.ТолькоПросмотр = Истина;
		ПолеНадписи.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
		ПолеНадписи.Ширина = 12;
		ПолеНадписи.РастягиватьПоГоризонтали = Истина;
	КонецЕсли;
	
	СтруктураИнфоНадписи = ПоясняющаяНадписьКМестуРаботыСотрудника(ДанныеСотрудника, РеквизитыОрганизации, ТекущаяДатаСеанса());
	
	Для Каждого КлючЗначение Из СтруктураИнфоНадписи Цикл
		Форма[КлючЗначение.Ключ + НомерСотрудника] = КлючЗначение.Значение;
	КонецЦикла;
	
	УстановитьВидимостьЭлементовФормыМестаРаботы(Форма, НомерСотрудника, ДанныеСотрудника);
	
КонецПроцедуры	

Процедура ДобавитьЭлементыФормыДляМестаРаботыКратко(Форма, ДанныеСотрудника, РеквизитыОрганизации, ИмяКоманды, ИмяГруппы)
	
	Команда = Форма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "Подключаемый_ОткрытьФормуСотрудника";
	Команда.Отображение  =  ОтображениеКнопки.Авто;
	 
	ГруппаФормы = Форма.Элементы.Вставить(Команда.Имя + "Группа", Тип("ГруппаФормы"), Форма.Элементы[ИмяГруппы]);
	ГруппаФормы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаФормы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаФормы.ОтображатьЗаголовок = Ложь;
	ГруппаФормы.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаФормы.РастягиватьПоВертикали = Ложь;
	ГруппаФормы.РастягиватьПоГоризонтали = Ложь;
	
	Кнопка = Форма.Элементы.Вставить(Команда.Имя, Тип("КнопкаФормы"), ГруппаФормы);
	Кнопка.ИмяКоманды = Команда.Имя;
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Высота = 2;
	Кнопка.ВысотаЗаголовка = 2;
	Кнопка.Заголовок = ЗаголовокКнопкиОткрытияСотрудника(ДанныеСотрудника, РеквизитыОрганизации, НачалоДня(ТекущаяДатаСеанса()), Ложь);
	
КонецПроцедуры	

Процедура ДобавитьКомандуДругиеМестаРаботы(Форма, ИмяГруппы, ВыводитьПодробнуюИнформацию = Ложь)
	Команда = Форма.Команды.Добавить("ДругиеМестаРаботы");
	Команда.Действие  = "Подключаемый_ДругиеМестаРаботы";
	Команда.Заголовок = НСтр("ru = 'Другие места работы'");
	Команда.Отображение  =  ОтображениеКнопки.Авто;	
	
	Если ВыводитьПодробнуюИнформацию Тогда 
		Кнопка = Форма.Элементы.Вставить("ДругиеМестаРаботыКнопка", Тип("КнопкаФормы"), Форма.Элементы[ИмяГруппы], Форма.Элементы.НовоеМестоРаботы);
	Иначе	
		Кнопка = Форма.Элементы.Вставить("ДругиеМестаРаботыКнопка", Тип("КнопкаФормы"), Форма.Элементы[ИмяГруппы]);
	КонецЕсли;	
	
	Кнопка.Вид = ВидКнопкиФормы.Гиперссылка;
	Кнопка.ИмяКоманды  = Команда.Имя;
КонецПроцедуры	


Функция ТекстСообщенияОКонфликтеВидаЗанятости(ВидЗанятости, Организация, КонфликтныйСотрудникОрганизация = Неопределено, КонфликтныйСотрудникВидЗанятости = Неопределено, КонфликтныйСотрудникТабельныйНомер = "", КонфликтныйСотрудникДолжность = Неопределено)
	ТекстСообщения = "";
	Если ВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы Тогда
		ТекстСообщения =  НСтр("ru = 'Нельзя оформить сотрудника по основному месту работы, так как он уже работает в %1 %2, Таб. номер: %3, %4.'");
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.Совместительство Тогда
		ТекстСообщения =  НСтр("ru = 'Нельзя оформить сотрудника на внешнее совместительство, так как он уже работает в %1 %2, Таб. номер: %3, %4.'");
	ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятости.ВнутреннееСовместительство Тогда
		ТекстСообщения = НСтр("ru = 'Нельзя оформить сотрудника на внутреннее совместительство, так как он не работает в %1.'");
	КонецЕсли;
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ТекстСообщения,
		?(Организация <> КонфликтныйСотрудникОрганизация И КонфликтныйСотрудникОрганизация <> Неопределено, КонфликтныйСотрудникОрганизация, НСтр("ru = 'нашей организации'")),
		?(КонфликтныйСотрудникВидЗанятости = Перечисления.ВидыЗанятости.ОсновноеМестоРаботы, НСтр("ru = 'по основному месту работы'"), НСтр("ru = 'как внешний совместитель'")),
		КонфликтныйСотрудникТабельныйНомер,
		КонфликтныйСотрудникДолжность,);
	КонецФункции

Процедура СотрудникиОбновитьЭлементыФормы(Форма)
	
	СотрудникиФормыВнутренний.СотрудникиОбновитьЭлементыФормы(Форма);
	
КонецПроцедуры

// Возвращает запрос для проверки физических лиц с похожими ФИО
// с установленными параметрами для текущей проверки.
// Параметры:
//		ФизическоеЛицоСсылка - СправочникСсылка.ФизическиеЛица, ссылка на физлицо
//								которое проверяем                             
//		Фамилия, Имя, Отчество, Уточнение - проверяемые ФИО и уточнение
//		ФИОПолностью - проверять полное совпадение ФИО (и возможно уточнения)					                             
//		ТочноеСовпадение - полное совпадение фамилии, имени и отчества.					                             
//
Функция ПохожиеФизическиеЛица(ФизическоеЛицоСсылка, Фамилия, Имя, Отчество, Уточнение = "", ФИОПолностью = Ложь, ТочноеСовпадение = Ложь)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка <> &ФизическоеЛицо
	|	И (ФизическиеЛица.Наименование ПОДОБНО &Фамилия СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмя СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмяОтчество СПЕЦСИМВОЛ ""~""
	|			ИЛИ ФизическиеЛица.Наименование ПОДОБНО &ФамилияИмяОтчествоУточнение СПЕЦСИМВОЛ ""~"")";
	
	Если НЕ ТочноеСовпадение Тогда
				
		Запрос.УстановитьПараметр("ФамилияИмяОтчество", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),"%"," %" + Отчество));		
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("ФизическоеЛицо", ФизическоеЛицоСсылка);
	Запрос.УстановитьПараметр("Фамилия", Фамилия);
	Запрос.УстановитьПараметр("ФамилияИмя", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя));
	Запрос.УстановитьПараметр("ФамилияИмяОтчествоУточнение", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),""," %" + Отчество) + ?(ПустаяСтрока(Отчество),""," %" + Уточнение));
		
	Если ФИОПолностью Тогда
		Запрос.УстановитьПараметр("Фамилия", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),""," %" + Отчество));
		Запрос.УстановитьПараметр("ФамилияИмя", Фамилия + ?(ПустаяСтрока(Имя),""," %" + Имя) + ?(ПустаяСтрока(Отчество),""," %" + Отчество));
	КонецЕсли;	

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает строковое представление места рождения
Функция ПредставлениеМестаРождения(Знач СтрокаМестоРождения)  
	
	СтруктураМестоРождения = РазложитьМестоРождения(СтрокаМестоРождения, Ложь);
	
	Если СтруктураМестоРождения.Особое = 1 Тогда
		
		Представление	=	"особое" +
		?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	"  "	+	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	"  "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
	Иначе
		
		Представление	= "" + ?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.НаселенныйПункт),		"",	СокрЛП(СтруктураМестоРождения.НаселенныйПункт))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Район),	"",	", " + СокрЛП(СтруктураМестоРождения.Район))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Область),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Область))
		+?(НЕ ЗначениеЗаполнено(СтруктураМестоРождения.Страна),	"",	", "	+	СокрЛП(СтруктураМестоРождения.Страна));
		
		Если Лев(Представление, 1) = ","  Тогда
			Представление = Сред(Представление, 2);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
КонецФункции

#КонецОбласти
