////////////////////////////////////////////////////////////////////////////////
// СотрудникиКлиент: методы, обслуживающие работу формы сотрудника
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Оформляет документ на основании сотрудника.
// Параметры:
//  Форма - УправляемаяФорма - форма.
//  СотрудникСсылка - СправочникСсылка.Сотрудники - сотрудник.
//  ПутьКФормеДокумента - Строка - путь к форме документа.
Процедура ОформитьДокументНаОсновании(Форма, СотрудникСсылка, ПутьКФормеДокумента) Экспорт
	
	Если ЗначениеЗаполнено(СотрудникСсылка) Тогда
		ПараметрыФормы = Новый Структура("Основание,РежимОткрытияОкна", СотрудникСсылка, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ПутьКФормеДокумента", ПутьКФормеДокумента);
		ДополнительныеПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ОписаниеОповещенияВводДокумента = Новый ОписаниеОповещения("ОткрытьФормуНовогоДокумента", ЭтотОбъект, ДополнительныеПараметры);
		ВвестиДокументЕслиРазрешено(Форма, ОписаниеОповещенияВводДокумента);
	КонецЕсли; 
	
КонецПроцедуры

// Оформляет кадровый перевод.
// Параметры:
//  Форма - УправляемаяФорма - форма.
//  СотрудникСсылка - СправочникСсылка.Сотрудники - сотрудник.
Процедура ОформитьКадровыйПеревод(Форма, СотрудникСсылка) Экспорт
	
	ОформитьДокументНаОсновании(Форма, СотрудникСсылка, "Документ.КадровыйПеревод.ФормаОбъекта");
	
КонецПроцедуры

// Оформляет прием на работу.
// Параметры:
//  Форма - УправляемаяФорма - форма.
//  СотрудникСсылка - СправочникСсылка.Сотрудники - сотрудник.
Процедура ОформитьПриемНаРаботу(Форма, СотрудникСсылка) Экспорт
	
	ОформитьДокументНаОсновании(Форма, СотрудникСсылка, "Документ.ПриемНаРаботу.ФормаОбъекта");
	
КонецПроцедуры

// Оформляет увольнение.
// Параметры:
//  Форма - УправляемаяФорма - форма.
//  СотрудникСсылка - СправочникСсылка.Сотрудники - сотрудник.
Процедура ОформитьУвольнение(Форма, СотрудникСсылка) Экспорт
	
	ОформитьДокументНаОсновании(Форма, СотрудникСсылка, "Документ.Увольнение.ФормаОбъекта");
	
КонецПроцедуры

// Выводит модальное окно, содержащее пояснение к предупреждающим полям.
// Параметры:
//  Элемент - Элемент - элемент формы.
//  СтандартнаяОбработка - Булево - стандартная обработка.
Процедура ПояснениеНажатие(Элемент, СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Подсказка = Элемент.Подсказка;
	
	Если Не ПустаяСтрока(Элемент.Заголовок) И Элемент.Заголовок <> "Ошибка" И Элемент.Заголовок <> "Почему?" И Элемент.Заголовок <> Подсказка Тогда
	
		Подсказка = СтрПолучитьСтроку(Элемент.Заголовок, 1) + Символы.ПС + Подсказка;
	
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Подсказка) Тогда
		ПоказатьПредупреждение(Неопределено,Подсказка);
	КонецЕсли; 
	
КонецПроцедуры

// Проверяет конфликты вида занятости.
// Параметры:
//  Сотрудник - СправочникСсылка.Сотрудники - сотрудник.
//  ФизическоеЛицо - СправочникСсылка.ФизическиеЛица - физ. лицо.
//  Организация - СправочникСсылка.Организации - организация.
//  ВидЗанятости - ПеречислениеСсылка.ВидыЗанятости - вид занятости.
//  ДатаПриема - Дата - дата приема.
//
Процедура ПроверитьКонфликтыВидаЗанятостиССуществующимиСотрудниками(Сотрудник, ФизическоеЛицо, Организация, ВидЗанятости, ДатаПриема) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Сотрудник)
		И ЗначениеЗаполнено(ФизическоеЛицо) Тогда
		
		ТекстСообщенияОКонфликте = СотрудникиВызовСервера.СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(Сотрудник, ФизическоеЛицо, Организация, ВидЗанятости, ДатаПриема);
		Если Не ПустаяСтрока(ТекстСообщенияОКонфликте) Тогда
			ПоказатьПредупреждение(Неопределено,ТекстСообщенияОКонфликте, , НСтр("ru = 'Внимание'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы Сотрудника

Процедура СотрудникиПриЗакрытии(Форма) Экспорт
	
	Если Форма.СозданиеНового И НЕ Форма.Параметры.Ключ.Пустая() Тогда
		Оповестить("СозданСотрудник", Форма.СотрудникСсылка, Форма.ВладелецФормы);
	КонецЕсли; 
	
КонецПроцедуры

Процедура СотрудникиПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	ЛичныеДанныеФизическогоЛицаПослеЗаписи(Форма, Форма.ФизическоеЛицоСсылка);
	ОповеститьОбИзмененииДанныхФизическогоЛица(Форма, Форма.ФизическоеЛицо);
	
	// оповестить об изменении физического лица при записи из формы Сотрудника
	ОповеститьОбИзменении(Форма.ФизическоеЛицоСсылка);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ФизическоеЛицо", Форма.ФизическоеЛицо.Ссылка);
	ПараметрыОповещения.Вставить("Сотрудник", Форма.Сотрудник.Ссылка);
	
	Оповестить("ИзменениеДанныхМестаРаботы", ПараметрыОповещения, Форма);
	
	Форма.ВыполненаКомандаСменыФИО = Ложь;
	Форма.ФИОФизическихЛицНоваяЗапись = Ложь;
	Форма.Элементы.ФИО.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

Процедура СотрудникиОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	СотрудникиКлиентВнутренний.СотрудникиОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура СотрудникиПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	СотрудникиКлиентВнутренний.СотрудникиПередЗаписью(Форма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы ФизическогоЛица

Процедура ФизическиеЛицаПриОткрытии(Форма) Экспорт
	
	Если Форма.Параметры.Ключ.Пустая()
		И НЕ ПустаяСтрока(Форма.ФизическоеЛицо.ФИО) Тогда

		ПриИзмененииФИОФизическогоЛица(Форма);

	КонецЕсли; 
	
КонецПроцедуры

Процедура ФизическиеЛицаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	СотрудникиКлиентВнутренний.ФизическиеЛицаОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

Процедура ФизическиеЛицаПередЗаписью(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	СотрудникиКлиентВнутренний.ФизическиеЛицаПередЗаписью(Форма, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

Процедура ФизическиеЛицаПослеЗаписи(Форма, ПараметрыЗаписи) Экспорт
	
	ЛичныеДанныеФизическогоЛицаПослеЗаписи(Форма, Форма.ФизическоеЛицоСсылка);
	
	ФизическоеЛицо = Форма.ФизическоеЛицо;
	ОповеститьОбИзмененииДанныхФизическогоЛица(Форма, ФизическоеЛицо);
	
	Форма.ВыполненаКомандаСменыФИО = Ложь;
	Форма.ФИОФизическихЛицНоваяЗапись = Ложь;
	Форма.Элементы.ФИО.ТолькоПросмотр = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры

Функция ЗаблокироватьФизическоеЛицоПриРедактировании(Форма, СообщатьОНевозможностиБлокировки = Истина) Экспорт
	Если НЕ Форма.ФизическоеЛицоЗаблокировано Тогда
		Если НЕ СотрудникиВызовСервера.ЗаблокироватьФизическоеЛицоПриРедактированииНаСервере(Форма.ФизическоеЛицоСсылка, Форма.ФизическоеЛицоВерсияДанных, Форма.УникальныйИдентификатор) Тогда
			Если СообщатьОНевозможностиБлокировки Тогда
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не удается внести изменения в личные данные сотрудника. Возможно, личные данные сотрудника редактируются другим пользователем.'"));
			КонецЕсли; 
			// заблокировать не удалось - обновить данные физлица
			СотрудникиВызовСервера.ПрочитатьДанныеСвязанныеССотрудником(Форма);
			Возврат Ложь;
		Иначе
			Форма.ФизическоеЛицоЗаблокировано = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура СформироватьНаименованиеСотрудника(Форма) Экспорт
	Форма.Сотрудник.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(Форма.ФИОФизическихЛиц.Фамилия, Форма.ФИОФизическихЛиц.Имя, Форма.ФИОФизическихЛиц.Отчество, "", "");
	Форма.СотрудникНаименование  = Форма.Сотрудник.Наименование;
	ИзменитьНаименованиеФизическогоЛица(Форма);
	Форма.Заголовок = СотрудникиКлиентСервер.ЗаголовокФормыСотрудника(Форма);
	Оповестить("ИзмененЗаголовокФормыСотрудника", Форма.Заголовок, Форма);
КонецПроцедуры

Процедура СформироватьНаименованиеФизическогоЛица(Форма) Экспорт
	ИзменитьНаименованиеФизическогоЛица(Форма);
	Форма.Заголовок = СотрудникиКлиентСервер.ЗаголовокФормыФизическогоЛица(Форма);
	Оповестить("ИзмененЗаголовокФормыСотрудника", Форма.ФизическоеЛицо.Наименование, Форма);
КонецПроцедуры

Процедура ДополнитьПредставлениеСотрудникаПриИзменении(Форма) Экспорт
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
	СформироватьНаименованиеСотрудника(Форма);
КонецПроцедуры

Процедура ДополнитьПредставлениеФизическогоЛицаПриИзменении(Форма) Экспорт
	СотрудникиКлиентСервер.УстановитьДоступностьУточненияНаименования(Форма);
	Если НЕ Форма.ДополнятьПредставление Тогда
		Форма.ФизическоеЛицо.УточнениеНаименования = "";
	КонецЕсли;
	СформироватьНаименованиеФизическогоЛица(Форма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции обслуживания личных данных физического лица

Процедура ЛичныеДанныеФизическогоЛицаОбработкаОповещения(ИмяСобытия, Параметр, Источник, Форма) Экспорт
	
	Если ИмяСобытия = "ИзменениеЛичныхДанных"
		И Параметр = Форма.ФизическоеЛицоСсылка
		И Источник <> Форма Тогда
		
		Форма.Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры	

Процедура СотрудникиИННПриИзменении(Форма, Элемент) Экспорт
	ЗаблокироватьФизическоеЛицоПриРедактировании(Форма); 
	ФизическиеЛицаИННПриИзменении(Форма, Элемент);
КонецПроцедуры

Процедура СотрудникиСтраховойНомерПФРПриИзменении(Форма, Элемент) Экспорт
	ЗаблокироватьФизическоеЛицоПриРедактировании(Форма); 
	ФизическиеЛицаСтраховойНомерПФРПриИзменении(Форма, Элемент);
КонецПроцедуры

Процедура ФизическиеЛицаИННПриИзменении(Форма, Элемент) Экспорт
	СотрудникиКлиентВнутренний.ФизическиеЛицаИННПриИзменении(Форма, Элемент);
КонецПроцедуры

Процедура ФизическиеЛицаСтраховойНомерПФРПриИзменении(Форма, Элемент) Экспорт
	СотрудникиКлиентВнутренний.ФизическиеЛицаСтраховойНомерПФРПриИзменении(Форма, Элемент);
КонецПроцедуры

Процедура ФизическиеЛицаМестоРожденияНачалоВыбора(Форма, Элемент, СтандартнаяОбработка, МестоРождения, ОповещениеЗавершения = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Элемент", Элемент);
	ДополнительныеПараметры.Вставить("ОповещениеЗавершения", ОповещениеЗавершения);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Представление", МестоРождения);
	
	Оповещение = Новый ОписаниеОповещения("ФизическиеЛицаМестоРожденияНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("ОбщаяФорма.ВводМестаРождения", ПараметрыФормы, , , , , Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ФизическиеЛицаМестоРожденияНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт	
	
	Если Результат <> Неопределено Тогда
		
		Форма = ДополнительныеПараметры.Форма;
		Элемент = ДополнительныеПараметры.Элемент;
		ОповещениеЗавершения = ДополнительныеПараметры.ОповещениеЗавершения;
		
		Форма.ФизическоеЛицо.МестоРождения = Результат;
		Форма[Элемент.Имя] = ПерсонифицированныйУчетКлиентСервер.ПредставлениеМестаРождения(Результат);
		Форма.Модифицированность = Истина;

		Если ОповещениеЗавершения <> Неопределено Тогда
			МестоРожденияИзменено = Результат <> Неопределено;
			ВыполнитьОбработкуОповещения(ОповещениеЗавершения, МестоРожденияИзменено);
		Иначе
			Форма.ОбновитьОтображениеДанных();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьДополнительнуюФорму(ОписаниеДополнительнойФормы, Форма) Экспорт
	
	ПараметрыФормы = ПараметрыДополнительнойФормы(ОписаниеДополнительнойФормы, Форма);
	ОткрытьФорму(ОписаниеДополнительнойФормы.ИмяФормы, ПараметрыФормы, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Ввод документов, справочников, открытие журналов (учет НДФЛ)

Процедура ВвестиДокументПрекращениеСтандартныхВычетовНДФЛ(ФизическоеЛицо, Организация) Экспорт
		
КонецПроцедуры

Процедура ВвестиНовоеЗаявлениеНаПредоставлениеСтандартныхВычетов(ФизическоеЛицо, Организация) Экспорт
	
КонецПроцедуры

Процедура ВвестиНовоеУведомлениеОПравеНаИмущественныйВычет(ФизическоеЛицо, Организация) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обслуживания данных о ФИО

Функция ИзменитьФИОФизическогоЛица(Форма, Отказ = Ложь) Экспорт
	Результат = ИзменитьФИО(Форма, Форма.ФизическоеЛицо.Наименование, Форма.ФИОФизическихЛиц, Форма.ФИОФизическихЛицНоваяЗапись, Отказ);	
	Если Результат <> Неопределено Тогда 
		Форма.ВыполненаКомандаСменыФИО = Истина;
	КонецЕсли;	
	Возврат Результат;
КонецФункции

Функция  ИзменитьФИОСотрудника(Форма, Отказ = Ложь) Экспорт
	Результат = ИзменитьФИОФизическогоЛица(Форма, Отказ);
	Если Результат <> НеОпределено Тогда 
		Если Форма.ФизическоеЛицо.ФИО <> Результат.НовоеНаименование Тогда
			Если НЕ Результат.ИзменениеЗаднимЧислом И ЗаблокироватьФизическоеЛицоПриРедактировании(Форма) Тогда
				Форма.ФизическоеЛицо.ФИО = Результат.НовоеНаименование;
				СформироватьНаименованиеСотрудника(Форма);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

Процедура ПриИзмененииФИОФизическогоЛица(Форма) Экспорт
	
	ПриИзмененииФИО(Форма, Форма.ФизическоеЛицо, Форма.ФИОФизическихЛиц);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		// При создании нового физического лица попробуем проверить по введенным ФИО
		// существующее физическое лицо.
		ПроверитьОднофамильцев(Форма, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииФИОСотрудника(Форма) Экспорт
	
	Если НЕ ЗаблокироватьФизическоеЛицоПриРедактировании(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииФИО(Форма, Форма.ФизическоеЛицо, Форма.ФИОФизическихЛиц);
	
	Если Форма.Параметры.Ключ.Пустая() Тогда
		// При создании нового сотрудника попробуем подобрать по введенным ФИО
		// существующее физическое лицо.
		ПроверитьОднофамильцев(Форма, Истина);
	КонецЕсли;
	
	СформироватьНаименованиеСотрудника(Форма);
	
КонецПроцедуры

Процедура УстановитьФизическоеЛицоВФормеСотрудника(Форма, ФизическоеЛицоСсылка) Экспорт
	Если ФизическоеЛицоСсылка <> Неопределено Тогда
		Если НЕ ФизическоеЛицоСсылка.Пустая() Тогда
			Форма.Сотрудник.ФизическоеЛицо = ФизическоеЛицоСсылка;
			Форма.ФизическоеЛицоСсылка     = ФизическоеЛицоСсылка;
			СотрудникиВызовСервера.ОбновитьДанныеФизическогоЛица(Форма);
			СформироватьНаименованиеСотрудника(Форма);
			СотрудникиКлиентСервер.УстановитьВидЗанятостиНовогоСотрудника(Форма);
			СотрудникиКлиентСервер.ЗаполнитьИнфоГруппыДоступа(Форма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьОднофамильцев(Форма, ИзФормыСотрудника)
		
	СтруктураПроверкиОднофамильцев = СотрудникиВызовСервера.ПодобратьСписокФизЛиц(
		Форма.ФизическоеЛицоСсылка,
		Форма.ФИОФизическихЛиц.Фамилия,
		Форма.ФИОФизическихЛиц.Имя,
		Форма.ФИОФизическихЛиц.Отчество);
		
	Если НЕ СтруктураПроверкиОднофамильцев.ФизическоеЛицоУникально Тогда
		
		Если СтруктураПроверкиОднофамильцев.ДанныеФизическихЛицДоступны Тогда
			
			ПараметрыОткрытия = Новый Структура("ЗаголовокФормы,ТекстИнформационнойНадписи,ДанныеФизическихЛиц");
			
			Если СтруктураПроверкиОднофамильцев.ДанныеФизическихЛиц.Количество() = 1 Тогда
				ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найден человек с похожим именем.'");
				ПараметрыОткрытия.ТекстИнформационнойНадписи = 
					НСтр("ru='Если вы принимаете на работу того же человека (например, при повторном приеме на работу) нажмите ""Да, это тот, кто мне нужен"".
						|Если это однофамилец, нажмите ""Нет, это другой человек"".'");
			Иначе
				ПараметрыОткрытия.ЗаголовокФормы = НСтр("ru='Найдены люди с похожими именами.'");
				ПараметрыОткрытия.ТекстИнформационнойНадписи = 
					НСтр("ru='Если вы принимаете на работу одного из приведенных в списке людей (например, при повторном приеме на работу), выберите его и нажмите ""Отмеченный человек тот, кто мне нужен"".
						|Если это однофамилец, нажмите ""Нет, это другой человек"".'");
			КонецЕсли;
			
			ПараметрыОткрытия.ДанныеФизическихЛиц = СтруктураПроверкиОднофамильцев.ДанныеФизическихЛиц;
			
						
		Иначе
			
			Если СтруктураПроверкиОднофамильцев.ВозможнаПроверкаПоИНН
				ИЛИ СтруктураПроверкиОднофамильцев.ВозможнаПроверкаПоСНИЛС Тогда
				
				ПараметрыОткрытия = Новый Структура("Фамилия,Имя,Отчество,ВозможнаПроверкаПоИНН,ВозможнаПроверкаПоСНИЛС");
				
				ЗаполнитьЗначенияСвойств(ПараметрыОткрытия, СтруктураПроверкиОднофамильцев);
				
				ПараметрыОткрытия.Фамилия = Форма.ФИОФизическихЛиц.Фамилия;
				ПараметрыОткрытия.Имя = Форма.ФИОФизическихЛиц.Имя;
				ПараметрыОткрытия.Отчество = Форма.ФИОФизическихЛиц.Отчество;
				
						
				
			Иначе
				
				ТекстПредупреждения = НСтр("ru='Найден человек с похожим именем.
					|Обратитесь к администратору информационной системы для устранения проблемы.'");
					
				ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
				Форма.Модифицированность = Ложь;
				Форма.Закрыть();
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СотрудникИзменилФИОНажатие(Форма) Экспорт
	Результат = ИзменитьФИОСотрудника(Форма);
	Если Результат <> Неопределено Тогда 
		УстановитьТолькоПросмотрФИО(Форма.Элементы.ФИО, Результат.ИзменениеЗаднимЧислом, Форма.ФИОФизическихЛиц.Период, Результат.ДатаТекущейЗаписи);
	КонецЕсли;	
КонецПроцедуры

Процедура ФизическоеЛицоИзменилФИОНажатие(Форма) Экспорт
	Результат = ИзменитьФИОФизическогоЛица(Форма);
	Если Результат <> Неопределено Тогда
		Если НЕ Результат.ИзменениеЗаднимЧислом Тогда
			Форма.ФизическоеЛицо.ФИО = Результат.НовоеНаименование;
			СформироватьНаименованиеФизическогоЛица(Форма);
		КонецЕсли; 
		УстановитьТолькоПросмотрФИО(Форма.Элементы.ФИО, Результат.ИзменениеЗаднимЧислом, Форма.ФИОФизическихЛиц.Период, Результат.ДатаТекущейЗаписи);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление отображением и доступностью документа удостоверяющего личность

// Обработчик события "ПриИзменении".
// Параметры:
//		Форма - УправляемаяФорма - форма документа.
Процедура ДокументыФизическихЛицВидДокументаПриИзменении(Форма) Экспорт
	СотрудникиКлиентВнутренний.ДокументыФизическихЛицВидДокументаПриИзменении(Форма);
КонецПроцедуры

// Обработчик события "ПриИзменении".
// Параметры:
//		Форма - УправляемаяФорма - форма документа.
//		Элемент - ПолеВвода - элемент формы.
Процедура ДокументыФизическихЛицСерияПриИзменении(Форма, Элемент) Экспорт
	
	СотрудникиКлиентСервер.ОбработатьОтображениеСерияДокументаФизическогоЛица(Форма.ДокументыФизическихЛиц.ВидДокумента, Форма.ДокументыФизическихЛиц.Серия, Элемент,  Форма);
	
КонецПроцедуры

// Обработчик события "ПриИзменении".
// Параметры:
//		Форма - УправляемаяФорма - форма документа.
//		Элемент - ПолеВвода - элемент формы.
Процедура ДокументыФизическихЛицНомерПриИзменении(Форма, Элемент) Экспорт
	СотрудникиКлиентВнутренний.ДокументыФизическихЛицНомерПриИзменении(Форма, Элемент);
КонецПроцедуры

// Обработчик события "ПриИзменении".
// Параметры:
//		Форма - УправляемаяФорма - форма документа.
//		Элемент - ПолеВвода - элемент формы.
//		СтандартнаяОбработка - Булево - признак стандартной обработки события.
Процедура ДокументыФизическихЛицВидДокументаНачалоВыбора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	Если НЕ ЗначениеЗаполнено(Форма.ДокументыФизическихЛиц.ВидДокумента) Тогда
		Форма.ДокументыФизическихЛиц.ВидДокумента = ПредопределенноеЗначение("Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ");
	КонецЕсли; 
КонецПроцедуры

Процедура ОткрытьСписокВсехДокументовФизическогоЛица(Форма, ФизическоеЛицоСсылка) Экспорт
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Физлицо", ФизическоеЛицоСсылка);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	ОткрытьФорму("РегистрСведений.ДокументыФизическихЛиц.Форма.ДокументыФизическогоЛица", ПараметрыОткрытияФормы, Форма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Проверка модифицированности гражданства, инвалидности, удостоверения личности

Процедура ЗапроситьРежимИзмененияГражданства(ФормаИсточник, ДатаИзменения, Отказ) Экспорт
КонецПроцедуры

Процедура ЗапроситьРежимИзмененияУдостоверенияЛичности(ФормаИсточник, ДатаИзменения, Отказ, ОповещениеЗавершения = Неопределено) Экспорт
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Просмотр истории

Процедура СотрудникиОткрытьФормуРедактированияИстории(ИмяРегистра, Форма) Экспорт

КонецПроцедуры

Процедура ОткрытьФормуРедактированияИстории(ИмяРегистра, ВедущийОбъект, Форма) Экспорт

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки контактной информации

Процедура КонтактнаяИнформацияПриИзменении(Форма, Элемент) Экспорт
	
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(Форма, Элемент);

КонецПроцедуры

Процедура КонтактнаяИнформацияНачалоВыбора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Результат = УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(Форма, Элемент, Форма.Модифицированность, СтандартнаяОбработка);
	Форма.Подключаемый_ОбновитьКонтактнуюИнформацию(Результат);
	
	КоллекцияПолейКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	МассивЭлементовКОбновлению = Новый Массив;
	МассивЭлементовКОбновлению.Добавить(Элемент);
	
	Если КоллекцияПолейКонтактнойИнформации <> Неопределено Тогда
		
		СтруктураПоиска = Новый Структура("ИмяРеквизита", Элемент.Имя);
		СтрокаТекущегоАдреса = КоллекцияПолейКонтактнойИнформации.НайтиСтроки(СтруктураПоиска)[0];
		
		Если НЕ ПустаяСтрока(СтрокаТекущегоАдреса.ЗначенияПолей) 
			И СтрокаТекущегоАдреса.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица")
			ИЛИ СтрокаТекущегоАдреса.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица") Тогда
			
			Для каждого ЭлементКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
				
				Если ЭлементКонтактнойИнформации.Тип <> ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") 
					ИЛИ НЕ ПустаяСтрока(ЭлементКонтактнойИнформации.ЗначенияПолей)
					ИЛИ ЭлементКонтактнойИнформации.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если ЭлементКонтактнойИнформации.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица") Тогда
					
					Если СтрокаТекущегоАдреса.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица") Тогда
						ЭлементКонтактнойИнформации.ЗначенияПолей = СтрокаТекущегоАдреса.ЗначенияПолей;
						Форма[ЭлементКонтактнойИнформации.ИмяРеквизита] = Форма[СтрокаТекущегоАдреса.ИмяРеквизита];
						МассивЭлементовКОбновлению.Добавить(Форма.Элементы[ЭлементКонтактнойИнформации.ИмяРеквизита]);
					КонецЕсли; 
					
				ИначеЕсли ЭлементКонтактнойИнформации.Вид = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица") Тогда
					
					ЭлементКонтактнойИнформации.ЗначенияПолей = СтрокаТекущегоАдреса.ЗначенияПолей;
					Форма[ЭлементКонтактнойИнформации.ИмяРеквизита] = Форма[СтрокаТекущегоАдреса.ИмяРеквизита];
					МассивЭлементовКОбновлению.Добавить(Форма.Элементы[ЭлементКонтактнойИнформации.ИмяРеквизита]);
					
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры обработки информации о местах работы

Процедура ОткрытьФормуСпискаМестРаботыФизическогоЛица(ФизическоеЛицо, Владелец) Экспорт
	
	Отбор = Новый Структура("ФизическоеЛицо", ФизическоеЛицо);
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаСписка", Новый Структура("Отбор", Отбор), Владелец); 
	
КонецПроцедуры	

Процедура ОткрытьМестоРаботы(Форма) Экспорт
	
	ПараметрыСотрудника = Новый Структура("ФизическоеЛицо", Форма.ФизическоеЛицоСсылка);
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", ПараметрыСотрудника);
	
КонецПроцедуры

Процедура ОткрытьФормуСотрудника(Форма, Команда) Экспорт 
	
	СоответствиеКомандСотрудникам = Форма.СоответствиеКомандСотрудникам;
	
	Сотрудник = СоответствиеКомандСотрудникам.Получить(Команда.Имя);
	Если Сотрудник <> Неопределено Тогда 
		
		Параметры = Новый Структура("Ключ", Сотрудник);
		ОткрытьФорму("Справочник.Сотрудники.ФормаОбъекта", Параметры);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Механизм встраивания форм

Процедура ЗарегистрироватьОткрытиеФормы(Форма, ИмяФормы) Экспорт
	
	Если ТипЗнч(Форма.ВладелецФормы.ОткрытыеФормы) <> Тип("Соответствие") Тогда
		Форма.ВладелецФормы.ОткрытыеФормы = Новый Соответствие;
	КонецЕсли; 
	
	Форма.Заголовок = Форма.ВладелецФормы.Заголовок;
	Форма.ВладелецФормы.ОткрытыеФормы.Вставить(ИмяФормы, Форма);
	
КонецПроцедуры

Процедура ОбработкаОповещения(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	
	Если Источник = Форма.ВладелецФормы Тогда
		
		Если ИмяСобытия = "ИзмененЗаголовокФормыСотрудника" Тогда
			
			Форма.Заголовок = Параметр;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с дополнительными формами

Процедура УстановитьПризнакРедактированияДанныхВДополнительнойФорме(ИмяДополнительнойФормы, Форма) Экспорт
	
	ПрочитанныеДанные = Новый Соответствие;
	
	Если ТипЗнч(Форма.ПрочитанныеДанныеФорм) = Тип("ФиксированноеСоответствие") Тогда
		
		Для каждого ЭлементСтруктуры Из Форма.ПрочитанныеДанныеФорм Цикл
			ПрочитанныеДанные.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	ПрочитанныеДанные.Вставить(ИмяДополнительнойФормы, Истина);
	
	Форма.ПрочитанныеДанныеФорм = Новый ФиксированноеСоответствие(ПрочитанныеДанные);
	Форма.Модифицированность = Истина;
	
КонецПроцедуры




Процедура ОповеститьОбИзмененииДанныхФизическогоЛица(Форма, ФизическоеЛицо)
	
	ДанныеФизическогоЛица = Новый Структура;
	ДанныеФизическогоЛица.Вставить("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
	ДанныеФизическогоЛица.Вставить("Фамилия", "");
	ДанныеФизическогоЛица.Вставить("Имя", "");
	ДанныеФизическогоЛица.Вставить("Отчество", "");
	ДанныеФизическогоЛица.Вставить("Пол", ФизическоеЛицо.Пол);

										
	Если Форма.ДоступенПросмотрДанныхФизическихЛиц Тогда
											
		ДанныеФизическогоЛица.Фамилия 		= Форма.ФИОФизическихЛиц.Фамилия;
		ДанныеФизическогоЛица.Имя 			= Форма.ФИОФизическихЛиц.Имя;
		ДанныеФизическогоЛица.Отчество 		= Форма.ФИОФизическихЛиц.Отчество;
		
	КонецЕсли;
										

	Оповестить("ИзменениеДанныхФизическогоЛица", ДанныеФизическогоЛица, ФизическоеЛицо.Ссылка);
	
КонецПроцедуры

Процедура ВвестиДокументЕслиРазрешено(Форма, ОписаниеОповещенияПриЗавершении)
	
	РазрешеноВвестиНовыйДокумент = Истина;
	
	// Если данные сотрудника еще не записаны, предложим записать
	Если Форма.Модифицированность ИЛИ  Форма.Параметры.Свойство("Ключ") И Форма.Параметры.Ключ.Пустая() Тогда
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОписаниеОповещенияПриЗавершении", ОписаниеОповещенияПриЗавершении);
		ДополнительныеПараметры.Вставить("РазрешеноВвестиНовыйДокумент", РазрешеноВвестиНовыйДокумент);
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ВвестиДокументЕслиРазрешеноПослеВопросаОЗаписи", ЭтотОбъект, ДополнительныеПараметры);
		
		ТекстВопроса = НСтр("ru = 'Сотрудник еще не записан.
			|Записать и продолжить?'");
			
		ПоказатьВопрос(ОписаниеОповещенияВопрос, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = '1С:Предприятие'"));
	Иначе
		ВыполнитьОбработкуОповещения(ОписаниеОповещенияПриЗавершении, РазрешеноВвестиНовыйДокумент);
	КонецЕсли; 
		
КонецПроцедуры

Процедура ВвестиДокументЕслиРазрешеноПослеВопросаОЗаписи(Результат, ДополнительныеПараметры) Экспорт
	
	РазрешеноВвестиНовыйДокумент = ДополнительныеПараметры.РазрешеноВвестиНовыйДокумент;
	Форма = ДополнительныеПараметры.Форма;
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		РазрешеноВвестиНовыйДокумент = Ложь;
	КонецЕсли;
	
	// Если получено разрешение на запись данных сотрудника, запишем их
	Если РазрешеноВвестиНовыйДокумент Тогда
		
		Если НЕ Форма.Записать() Тогда
			
			// Запись не состоялась
			РазрешеноВвестиНовыйДокумент = Ложь;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОписаниеОповещенияПриЗавершении, РазрешеноВвестиНовыйДокумент);
	
КонецПроцедуры

Процедура ОткрытьФормуНовогоДокумента(РазрешеноВвестиНовыйДокумент, ДополнительныеПараметры) Экспорт
	
	Если РазрешеноВвестиНовыйДокумент Тогда
		ОткрытьФорму(ДополнительныеПараметры.ПутьКФормеДокумента, ДополнительныеПараметры.ПараметрыФормы, ДополнительныеПараметры.Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьНаименованиеФизическогоЛица(Форма)
	Форма.ФизическоеЛицо.Наименование = КадровыйУчетКлиентСервер.ПолноеНаименованиеСотрудника(Форма.ФИОФизическихЛиц.Фамилия, Форма.ФИОФизическихЛиц.Имя, Форма.ФИОФизическихЛиц.Отчество, "");
КонецПроцедуры

Процедура ЛичныеДанныеФизическогоЛицаПослеЗаписи(Форма, ФизическоеЛицоСсылка)
	
	Если Форма.ИзмененыЛичныеДанные Тогда
		
		Оповестить("ИзменениеЛичныхДанных", ФизическоеЛицоСсылка, Форма);
		Форма.ИзмененыЛичныеДанные = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры	

Функция ИзменитьФИО(Форма, ТекущееФИО, МенеджерЗаписиФИО, НоваяЗапись, Отказ)
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ТекущееФИО);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Фамилия", ?(СтруктураФИО.Фамилия = Неопределено, "", СтруктураФИО.Фамилия));
	ПараметрыФормы.Вставить("Имя", ?(СтруктураФИО.Имя = Неопределено, "", СтруктураФИО.Имя));
	ПараметрыФормы.Вставить("Отчество", ?(СтруктураФИО.Отчество = Неопределено, "", СтруктураФИО.Отчество));
	ПараметрыФормы.Вставить("ДатаИзменения", ТекущаяДата());

	Результат = ОткрытьФормуМодально("ОбщаяФорма.СменаФИО", ПараметрыФормы, Форма);
	
	Если Результат <> НеОпределено Тогда
		// нажали ОК
		Если Результат.ДатаИзменения >= МенеджерЗаписиФИО.Период Тогда
			// изменим имя только если это - хронологически последняя запись регистра ФИО
			НовоеНаименование = Результат.Фамилия + " " + Результат.Имя + " " + Результат.Отчество;
		Иначе
			// Вернем прежнее имя если это - ввод хронологически не последней записи регистра ФИО.
			НовоеНаименование = МенеджерЗаписиФИО.Фамилия + " " + МенеджерЗаписиФИО.Имя + " " + МенеджерЗаписиФИО.Отчество;
		КонецЕсли;
		
		Результат.Вставить("НовоеНаименование", НовоеНаименование);
		Результат.Вставить("ИзменениеЗаднимЧислом", Результат.ДатаИзменения < МенеджерЗаписиФИО.Период);
		Результат.Вставить("ДатаТекущейЗаписи", МенеджерЗаписиФИО.Период);
		
		МенеджерЗаписиФИО.Фамилия = Результат.Фамилия;
		МенеджерЗаписиФИО.Имя = Результат.Имя;
		МенеджерЗаписиФИО.Отчество = Результат.Отчество;
		МенеджерЗаписиФИО.Период = Результат.ДатаИзменения;
		
		Форма.ВыполненаКомандаСменыФИО = Истина;
		Форма.ФИОФизическихЛицНоваяЗапись = Истина;
		Форма.Модифицированность = Истина;

	Иначе
		ФИОФизическихЛицНоваяЗапись = Ложь;
		Отказ = Истина
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ПриИзмененииФИО(Форма, ФизическоеЛицо, МенеджерЗаписиФИО)
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизическоеЛицо.ФИО);
	Если СтруктураФИО.Фамилия <> Неопределено Тогда
		МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
		Если СтруктураФИО.Имя <> Неопределено Тогда
			МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
		КонецЕсли;
		Если СтруктураФИО.Отчество <> Неопределено Тогда
			МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(МенеджерЗаписиФИО.Период) Тогда
			Если ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения) Тогда
				МенеджерЗаписиФИО.Период = ФизическоеЛицо.ДатаРождения;
			Иначе
				МенеджерЗаписиФИО.Период = '18991231000000';
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МенеджерЗаписиФИО.Отчество) И Не ЗначениеЗаполнено(ФизическоеЛицо.Пол) Тогда
			ФизическоеЛицо.Пол = ФизическиеЛицаКлиентСервер.ОпределитьПолПоОтчеству(МенеджерЗаписиФИО.Отчество);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьНаименованиеФизическогоЛица(Форма);
	
	СотрудникиКлиентСервер.УстановитьВидимостьПолейФИО(Форма);
	
КонецПроцедуры

Процедура УстановитьТолькоПросмотрФИО(Элемент, ИзменениеЗаднимЧислом, ПериодНачалаДействия, ПериодОкончанияДействия) 
	Если ИзменениеЗаднимЧислом Тогда 
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСТР("ru = 'Изменение ФИО выполнено ""задним числом"". Введенное данные действуют с %1 по %2.
                                                                                            |Редактирование ФИО непосредственно в форме сейчас недоступно и будет доступно только после записи.'"),
																					  Формат(ПериодНачалаДействия, "ДФ=дд.ММ.гггг"),
																					  Формат(ПериодОкончанияДействия, "ДФ=дд.ММ.гггг"));
		ПоказатьПредупреждение(Неопределено,ТекстПредупреждения);
		
		Элемент.ТолькоПросмотр = Истина;
		
	КонецЕсли;	
КонецПроцедуры	

Функция ПараметрыДополнительнойФормы(ОписаниеДополнительнойФормы, Форма)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресВХранилище", "");
	
	Для каждого КлючевойРеквизит Из ОписаниеДополнительнойФормы.КлючевыеРеквизиты Цикл
		ПараметрыФормы.Вставить(КлючевойРеквизит.Ключ);
		Попытка
			Если ЗначениеЗаполнено(КлючевойРеквизит.Значение) Тогда
				Данные = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, КлючевойРеквизит.Значение);
				ПараметрыФормы[КлючевойРеквизит.Ключ] = Данные;
			КонецЕсли; 
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Форма);
	
	ПараметрыФормы.Вставить(
		"АдресВХранилище",
		СотрудникиВызовСервера.АдресДанныхДополнительнойФормы(ОписаниеДополнительнойФормы, Форма));
	
	Возврат ПараметрыФормы;
	
КонецФункции

Процедура ОбработкаВводаМестаРождения(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДопПараметры.ФизическоеЛицоМестоРождения = Результат;
		ДопПараметры.Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры
#КонецОбласти
