///////////////////////////////////////////////////////////////////////////////////
// Процедуры для подготовки и записи движений документа.

#Область ПрограммныйИнтерфейс

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
// Параметры:
//		ДокументСсылка - ДокументСсылка - ссылка на документ.
//		ДополнительныеСвойства - Структура - дополнительные свойства.
//		РежимПроведения - РежимПроведенияДокумента - режим проведения.
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц",
	// в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы)
	// и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);

КонецПроцедуры

// Очищает дополнительные свойства.
//
// Параметры:
//		ДополнительныеСвойства - Структура - дополнительные свойства.
Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
// Параметры:
//		Регистратор - ДокументОбъект - регистратор.
//		Движения - Движения - коллекция движений документа.
//		МассивИсключаемыхРегистров - Массив - массив имен исключаемых регистров.
//
// Возвращаемое значение:
//		Массив - массив имен регистров.
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет пордготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
// Вызывается из модуля документов при проведении.
//
// Параметры:
//		Объект - ДокументОбъект - объект.
//		ЭтоНовый - Булево - это новый объект.
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь) Экспорт
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		ИсключаемыеРегистры.Добавить("ГрафикДвиженияТоваров");
		// {УП} 
		ИсключаемыеРегистры.Добавить("ГрафикЭтаповПроизводства");
		// {/УП} 
		
		// Регистры, движения по которым формируются не из модуля менеджера документа,
		// но должны удаляться при отмене проведения документа.
		Если Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
		 И НЕ Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			ИсключаемыеРегистры.Добавить("РасчетыСКлиентамиПоДокументам");
			ИсключаемыеРегистры.Добавить("РасчетыСПоставщикамиПоДокументам");
			// {УП}
			ИсключаемыеРегистры.Добавить("Хозрасчетный");
			ИсключаемыеРегистры.Добавить("ОтражениеДокументовВМеждународномУчете");
			ИсключаемыеРегистры.Добавить("Международный");
			// {/УП}
						
		КонецЕсли;
		
		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
			Объект.Ссылка,
			МетаданныеДвижения,
			ИсключаемыеРегистры);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
// Параметры:
//		Объект - ДокументОбъект - объект.	
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля;

	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда

				// Установка флага регистрации изменений в наборе записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", Истина);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

				// Структура для передачи данных в модули наборов записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
						Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Для отработки случаев, когда документ перестает делать движения по регистру
	// (при изменении вида операции). Очистим оффлайновые регистры.
	Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Если Объект.Движения.Найти("РасчетыСКлиентами") <> Неопределено Тогда

			Если Объект.Движения.РасчетыСКлиентами.Количество() = 0 И Объект.Движения.РасчетыСКлиентами.Записывать Тогда
				Объект.Движения.РасчетыСКлиентамиПоДокументам.Записывать = Истина;
			КонецЕсли;

		КонецЕсли;

		Если Объект.Движения.Найти("РасчетыСПоставщиками") <> Неопределено Тогда

			Если Объект.Движения.РасчетыСПоставщиками.Количество() = 0 И Объект.Движения.РасчетыСПоставщиками.Записывать Тогда
				Объект.Движения.РасчетыСПоставщикамиПоДокументам.Записывать = Истина;
			КонецЕсли;

		КонецЕсли;
		
		Если Объект.Движения.Найти("ПроизводственныеЗатраты") <> Неопределено Тогда
			Если Объект.Движения.ПроизводственныеЗатраты.Количество() = 0 И Объект.Движения.ПроизводственныеЗатраты.Записывать Тогда
				Объект.Движения.ПартииПроизводственныхЗатрат.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	// Перед записью движений РасчетыСКлиентами используется дата регистратора.
	Если Объект.Движения.Найти("РасчетыСКлиентами") <> Неопределено Тогда

		Объект.Движения.РасчетыСКлиентами.ДополнительныеСвойства.Вставить("ДатаРегистратора", Объект.Дата);

	КонецЕсли;
	
	Если Объект.Движения.Найти("РасчетыСКлиентамиПоДокументам") <> Неопределено Тогда

		Объект.Движения.РасчетыСКлиентамиПоДокументам.ДополнительныеСвойства.Вставить("РежимЗаписи", Объект.ДополнительныеСвойства.РежимЗаписи);

	КонецЕсли;
	
	Если Объект.Движения.Найти("РасчетыСПоставщикамиПоДокументам") <> Неопределено Тогда

		Объект.Движения.РасчетыСПоставщикамиПоДокументам.ДополнительныеСвойства.Вставить("РежимЗаписи", Объект.ДополнительныеСвойства.РежимЗаписи);

	КонецЕсли;

	Объект.Движения.Записать();

КонецПроцедуры

// Процедура переписывает строки таблицы в указанные движения документа.
//
// Параметры:
// 	Таблица - ТаблицаЗначений - Таблица, строки которой должны быть помещены в движения документа.
// 	Движения - Движения - Элемент коллекции движений документа, набор записей регистра.
// 	Отказ - Булево - Признак отказа выполнения транзакции.
//
Процедура ОтразитьДвижения(Таблица, Движения, Отказ) Экспорт
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Записывать = Истина;
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Процедуры контроля движений документов по регистрам.

// Процедура компонует текст запроса, выполняет запрос и выгружает результаты запроса в таблицы.
//
// Параметры:
//		Запрос - Запрос - запрос, параметры которого предварительно установлены.
//		ТекстыЗапроса - СписокЗначений - список значений, значениями которого являются блоки запроса,
//	                                  синонимами - имена таблиц в которые необходимо поместить
//	                                  результат выполнения каждого отдельного блока запроса.
//		Таблицы - Структура - структура в которую будут помещены полученные таблицы для движений.
//
Процедура ИницализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы) Экспорт

	// Формирование текст запроса.
	Запрос.Текст = "";
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл
		Запрос.Текст = Запрос.Текст + ТекстЗапроса.Значение;
	КонецЦикла;

	// Выполнение запроса.
	Результат = Запрос.ВыполнитьПакет();

	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) Тогда

			Индекс = ТекстыЗапроса.Индекс(ТекстЗапроса);
			Таблицы.Вставить(ИмяТаблицы, Результат[Индекс].Выгрузить());

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
// Прочие процедуры

// Процедура получение данных для блокировки регистров при контрле остатков.
//
// Параметры:
//		НаборЗаписей - НаборЗаписей - набор записей.
// Возвращаемое значение:
//		Структура - Структура данных для блокировки.
Функция ПолучитьДанныеДляБлокировки(НаборЗаписей) Экспорт 

	НеобходимКонтрольОстатков = Ложь; // показывает, нужен ли вообще контроль.
	НеобходимКонтрольГрафика  = Ложь; // показывает, есть ли в наборе записи с контролем графика.
	ЕстьБезКонтроля           = Ложь; // показывает, есть ли в наборе записи без контроля.

	// Массивы строк для блокировки наборов.
	МассивСтрокБлокировкиГрафика  = Новый Массив;
	МассивСтрокБлокировкиОстатков = Новый Массив;
	
	ЭтоДвижениеТоваров = Ложь;
	
	Если ЭтоДвижениеТоваров Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.НомерСтроки - 1                       КАК Индекс,
		|	Т.Номенклатура                          КАК Номенклатура,
		|	Т.Характеристика                        КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Склад КАК Справочник.Склады) КАК Склад,
		|	ВЫБОР
		|		КОГДА Т.ПланируемаяОтгрузка > 0 ТОГДА
		|			ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК ПланируемаяОтгрузка
		|
		|ПОМЕСТИТЬ НаборЗаписей
		|
		|ИЗ
		|	&НаборЗаписей КАК Т
		|ГДЕ
		|	Т.ПланируемаяОтгрузка <> 0 ИЛИ (Т.ПланируемаяОтгрузкаСоСклада > 0)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборЗаписей.Индекс КАК Индекс,
		|	НаборЗаписей.Номенклатура КАК Номенклатура,
		|	НаборЗаписей.Характеристика КАК Характеристика,
		|	НаборЗаписей.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА НаборЗаписей.ПланируемаяОтгрузка
		|					И ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля,
		|						ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) В (ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомРезерва),
		|																										ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика))
		|				ИЛИ (НЕ НаборЗаписей.ПланируемаяОтгрузка)
		|					И ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля,
		|							ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) <> ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.НеКонтролировать)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ
		|			ЛОЖЬ
		|	КОНЕЦ КАК КонтрольОстатков,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля,
		|					ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.ОстаткиСУчетомГрафика)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтрольГрафика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НастройкаХарактеристика.ВариантКонтроля,
		|					ЕСТЬNULL(НастройкаНоменклатура.ВариантКонтроля, НастройкаСклад.ВариантКонтроля)) = ЗНАЧЕНИЕ(Перечисление.ВариантыКонтроля.НеКонтролировать)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК БезКонтроля
		|ИЗ
		|	НаборЗаписей КАК НаборЗаписей
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаХарактеристика
		|		ПО НаборЗаписей.Склад = НастройкаХарактеристика.Склад
		|			И НаборЗаписей.Номенклатура = НастройкаХарактеристика.Номенклатура
		|			И НаборЗаписей.Характеристика = НастройкаХарактеристика.Характеристика
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаНоменклатура
		|		ПО НаборЗаписей.Склад = НастройкаНоменклатура.Склад
		|			И НаборЗаписей.Номенклатура = НастройкаНоменклатура.Номенклатура
		|			И (НастройкаНоменклатура.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаКонтроляОстатков КАК НастройкаСклад
		|		ПО (НаборЗаписей.Склад = НастройкаСклад.Склад)
		|			И (НастройкаСклад.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка))
		|			И (НастройкаСклад.Характеристика = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка))
		|			И (НастройкаХарактеристика.Склад ЕСТЬ NULL)
		|			И (НастройкаНоменклатура.Склад ЕСТЬ NULL)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Индекс
		|");
		Запрос.УстановитьПараметр("НаборЗаписей", НаборЗаписей.Выгрузить( , "НомерСтроки, Номенклатура, Характеристика, Склад, ПланируемаяОтгрузка, ПланируемаяОтгрузкаСоСклада"));
		
	Иначе
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.НомерСтроки - 1                       КАК Индекс,
		|	Т.Номенклатура                          КАК Номенклатура,
		|	Т.Характеристика                        КАК Характеристика,
		|	ВЫРАЗИТЬ(Т.Склад КАК Справочник.Склады) КАК Склад
		|
		|ПОМЕСТИТЬ НаборЗаписей
		|
		|ИЗ
		|	&НаборЗаписей КАК Т
		|ГДЕ
		|	(Т.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
		|				И Т.ВНаличии > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаборЗаписей.Индекс КАК Индекс,
		|	НаборЗаписей.Номенклатура КАК Номенклатура,
		|	НаборЗаписей.Характеристика КАК Характеристика,
		|	НаборЗаписей.Склад КАК Склад,
		|	ИСТИНА КАК КонтрольОстатков
		|ИЗ
		|	НаборЗаписей КАК НаборЗаписей
		|
		|УПОРЯДОЧИТЬ ПО
		|	Индекс");
		
		Запрос.УстановитьПараметр("НаборЗаписей", НаборЗаписей.Выгрузить( , "НомерСтроки, ВидДвижения, Номенклатура, Характеристика, Склад, ВНаличии"));
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Если хотя бы одна запись нуждается в контроле - флаг взводится.
			НеобходимКонтрольОстатков = НеобходимКонтрольОстатков ИЛИ Выборка.КонтрольОстатков;
			
			// Массив для блокировки строк набора свободных остатков.
			Если Выборка.КонтрольОстатков Тогда
				
				МассивСтрокБлокировкиОстатков.Добавить(НаборЗаписей.Получить(Выборка.Индекс));
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Новый Структура("СтруктураКонтроляОстатков, МассивСтрокБлокировкиГрафика, МассивСтрокБлокировкиОстатков",
						Новый Структура("НеобходимКонтрольОстатков, НеобходимКонтрольГрафика, ЕстьБезКонтроля",
										НеобходимКонтрольОстатков, НеобходимКонтрольГрафика, ЕстьБезКонтроля),
						МассивСтрокБлокировкиГрафика,
						МассивСтрокБлокировкиОстатков);
КонецФункции
					
// Функция вызывается из модулей наборов записей для проверки необходимости
// контроля изменений движений в регистре.
//
// Параметры:
//		ДополнительныеСвойстваНабораЗаписей - Структура - структура доп. свойств.
// Возвращаемое значение:
//		Булево - необходимо рассчитывать изменения.
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем РассчитыватьИзменения;

	Возврат ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения", РассчитыватьИзменения)
		И РассчитыватьИзменения;

КонецФункции

// Устанавливает режим проведения документа.
// Параметры:
//		ДокументОбъект - ДокументОбъект - документ.
//		РежимЗаписи - РежимЗаписиДокумента - режим записи документа.
//		РежимПроведения - РежимПроведенияДокумента - режим проведения.
Процедура УстановитьРежимПроведения(ДокументОбъект, РежимЗаписи, РежимПроведения) Экспорт

	Если ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
// Параметры:
//		Объект - ДокументОбъект - документ.
//		ВыборочноОчищатьРегистры - Булево - выборочная очистка регистров.
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	Для каждого НаборЗаписей Из Объект.Движения Цикл
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;
	КонецЦикла;

	Если Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	// Регистры, требующие принудительной очистки:
	МассивИменРегистровПринудительнойОчистки = Новый Массив;
	МассивИменРегистровПринудительнойОчистки.Добавить("РасходыПриУСН");
	МассивДвиженийДляПринудительнойОчистки = Новый Массив;
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
		Если МассивИменРегистровПринудительнойОчистки.Найти(ИмяРегистра) <> Неопределено
			ИЛИ НЕ ВыборочноОчищатьРегистры Тогда
			МассивДвиженийДляПринудительнойОчистки.Добавить(Объект.Движения[ИмяРегистра]);
		КонецЕсли; 
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Истина);
		КонецЦикла;
		ТекстСообщения = НСтр("ru = 'Движения документа отредактированы вручную и не могут быть автоматически актуализированы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);
		
	ИначеЕсли НЕ Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		
		Для каждого НаборЗаписей Из МассивДвиженийДляПринудительнойОчистки Цикл
			НаборЗаписей.Записать();
			НаборЗаписей.Записывать = Ложь;
		КонецЦикла; 
		
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.ДатаДокументаСдвинутаВперед Тогда
		Объект.Движения.Записать();
	КонецЕсли;

КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
// Параметры:
//		Объект - ДокументОбъект - документ.
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
	
	РучнаяКорректировка = МетаданныеОбъекта.Реквизиты.Найти("РучнаяКорректировка") <> Неопределено
		И Объект.РучнаяКорректировка;
	
	Если РучнаяКорректировка Тогда
		Для каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Прочитать();
			Объект.Движения[ИмяРегистра].УстановитьАктивность(Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти