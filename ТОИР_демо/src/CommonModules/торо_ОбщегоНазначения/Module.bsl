////////////////////////////////////////////////////////////////////////////////
// торо_ОбщегоНазначения: общие методы
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
// Функция устанавливает ссылку нового документа, лишь в том случае, если 
// ссылка не установлена.
//
// Параметры:
// 	ЭтотОбъект - Объект - объект.
// Возвращаемое значение:
//		Ссылка - ссылка объекта.
Функция ПолучитьСсылкуНаОбъект(ЭтотОбъект) Экспорт
	// Получаем тип объекта
	
	ТипДокумента = ЭтотОбъект.Метаданные().Имя;	
	Ссылка = Неопределено;
	Если ЭтотОбъект.Ссылка.Пустая() Тогда
	
		ИмяОбъекта = ЭтотОбъект.Метаданные().Имя;
		Если Не Метаданные.Документы.Найти(ИмяОбъекта) = Неопределено Тогда
				Ссылка = Документы[ТипДокумента].ПолучитьСсылку();
		ИначеЕсли Не Метаданные.Справочники.Найти(ИмяОбъекта) = Неопределено Тогда
			Ссылка = Справочники[ТипДокумента].ПолучитьСсылку();
		КонецЕсли;
			
		ЭтотОбъект.УстановитьСсылкуНового(Ссылка);
		Ссылка = ЭтотОбъект.ПолучитьСсылкуНового();
	Иначе
		Ссылка = ЭтотОбъект.Ссылка;
	КонецЕсли;
	
	Если Ссылка = Неопределено Тогда
		Ссылка = Документы[ТипДокумента].ПустаяСсылка();
	КонецЕсли;

	Возврат Ссылка;
КонецФункции

// Функция получает положение в иерархии объектов ремонтных работ.
//
// Параметры:
//		СписокОбъектовРемРабот - Коллекция - коллекция, для которой доступен обход с помощью цикла Для каждого ... из.
//		СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//		Дата - Дата - дата среза.
//
// Возвращаемое значение:
//		Соответствие - соответствие объектов ремонта и их положений.
//
Функция ПолучитьПоложенияВИерархииОбъектовРемРабот(СписокОбъектовРемРабот, СтруктураИерархии, Дата = '00010101') Экспорт

	Запрос = Новый Запрос;
	
	Если СтруктураИерархии.СтроитсяАвтоматически Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					   |	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
		               |	торо_ОбъектыРемонта." + СтруктураИерархии.РеквизитОР + " КАК Положение
		               |ИЗ
		               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |ГДЕ
		               |	торо_ОбъектыРемонта.Ссылка В (&СписокОбъектов)";
	Иначе
		Если СтруктураИерархии.ИзменяетсяДокументами Тогда
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК Положение,
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
			|			&Дата,
			|			СтруктураИерархии = &СтруктураИерархии
			|				И ОбъектИерархии В (&СписокОбъектов)) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			|ГДЕ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ";
			
			Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Дата), Дата, Дата(3999, 12, 31, 23, 59, 59)));				
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураИерархии) Тогда
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Положение,
			|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			|	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии В(&СписокОбъектов)";
			
		Иначе
			
			СтруктураПоложений = Новый Соответствие;
			
			Для Каждого ЭлементСписка Из СписокОбъектовРемРабот Цикл
				
				Попытка
					СтруктураПоложений.Вставить(ЭлементСписка.Значение, ЭлементСписка.Значение.Родитель);
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
			Возврат СтруктураПоложений;
			
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);				
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектовРемРабот);				
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	СтруктураПоложений = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоложений.Вставить(Выборка.ОбъектИерархии, Выборка.Положение);
		
	КонецЦикла;
	
    Возврат СтруктураПоложений;
	
КонецФункции

// Добавляет в таблицу значений строки из другой таблицы значений и 
// в них значения колонок с совпадающими наименованиями.
//
// Параметры:
//  ТаблицаИсточник - ТаблицаЗначений - таблица значений, откуда берутся значения.
//  ТаблицаПриемник - ТаблицаЗначений - таблица значений, куда добавляются строки.
//  ЗаполнятьНомераСтрокПоИсточнику - Булево - заполнять реквизит НомерСтроки по номеру строки источника.
//
Процедура ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПриемник, ЗаполнятьНомераСтрокПоИсточнику = Ложь) Экспорт

	// Заполним значения в совпадающих колонках.
	Для каждого СтрокаТаблицыИсточника Из ТаблицаИсточник Цикл

		СтрокаТаблицыПриемника = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПриемника, СтрокаТаблицыИсточника);
		
		Если ЗаполнятьНомераСтрокПоИсточнику Тогда
			СтрокаТаблицыПриемника.НомерСтроки = СтрокаТаблицыИсточника.Владелец().Индекс(СтрокаТаблицыИсточника);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Устанавливает отбор по заданному полю в списке документов.
//
// Параметры:
//		ЭлементДляОтбора - ДинамическийСписок - список документов.
//		ПолеОтбора - Строка - наименование поля для отбора.
//		ЗначениеОтбора - Произвольный - значение отбора.
//		ЗначениеВидаСравнения - ВидСравненияКомпоновкиДанных - вид сравнения.
//
Процедура УстановитьОтборВСпискеДокументов(ЭлементДляОтбора, ПолеОтбора, ЗначениеОтбора, ЗначениеВидаСравнения) Экспорт
	
	ЭлементОтбора = ЭлементДляОтбора.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ЗначениеВидаСравнения;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПолеОтбора);
	ЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
	ЭлементОтбора.Использование = Истина;
	
КонецПроцедуры

// Возвращает строку продолжительности в часах.
// Параметры:
//		ПродолжительностьВСекундах - Число - продолжительность в секундах.
//
// Возвращаемое значение:
//		Строка - продолжительность в часах.
Функция ПродолжительностьВЧасах(ПродолжительностьВСекундах) Экспорт
	
	Если ТипЗнч(ПродолжительностьВСекундах) <> Тип("Число") Тогда
		Возврат "0 с.";
	КонецЕсли;
	
	Часы    = Цел(ПродолжительностьВСекундах / 3600);
	Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
	Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
	
	Возврат "" + Часы + " ч. " + Минуты + " мин. " + Секунды + " с.";
	
КонецФункции

// Формирует строку представления документа для сообщений при проведении.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на проводимый документ.
//
// Возвращаемое значение:
//  Строка - Строка с представлением документа.
//
Функция ПредставлениеДокументаПриПроведении(Документ) Экспорт

	МетаданныеДокумента = Документ.Метаданные();

	ВидОперацииСтр = "";
	Если МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено Тогда
		ВидОперацииСтр = " (" + Документ.ВидОперации + ")";
	КонецЕсли;

	Возврат НСтр("ru = 'Проведение документа: '") + СокрЛП(Документ) + ВидОперацииСтр;

КонецФункции // ПредставлениеДокументаПриПроведении()

// Проверяет, что открыто несколько сеансов у этого пользователя.
// Возвращаемое значение:
//		Булево - открыто несколько сеансов.
Функция ПроверитьОткрытиеНесколькихСеансов() Экспорт
	
	ТекущийНомерСоединения = НомерСоединенияИнформационнойБазы();
	УникальныйИдентификаторПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().УникальныйИдентификатор;
	
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	Для Каждого ТекСоединение Из МассивСоединений Цикл
		Если (ТекСоединение.ИмяПриложения = "1CV8C") 
			И (НЕ ТекСоединение.НомерСоединения = ТекущийНомерСоединения)
			И (НЕ ТекСоединение.Пользователь = неопределено)
			И (ТекСоединение.Пользователь.УникальныйИдентификатор = УникальныйИдентификаторПользователя)
			//
			И ТекСоединение.НомерСеанса <> 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Осуществляет проверку заполненности проверяемых реквизитов.
// Процедура перенесена из УП. Не допилена, появились более актуальные задачи.
//
// Параметры:
//		Отказ - Булево - отказ от выполнения операции.
//		Документ - ДокументСсылка - Документ, на основании которого осуществляется ввод
//		Статус - СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот - Статус документа, 
//					на основании которого осуществляется ввод.
//
Процедура ПроверитьВозможностьВводаНаОсновании(Отказ,Документ, Статус = Неопределено) Экспорт
		
КонецПроцедуры // ПроверитьВозможностьВводаНаОсновании()

// Функция помещает результат запроса в массив структур.
// Применима, когда необходимо передать данные с сервера на клиент.
//
// Параметры:
//		РезультатЗапроса - РезультатЗапроса - результат запроса.
//
// Возвращаемое значение:
//		Массив - массив структур.
Функция РезультатЗапросаВМассивСтруктур(РезультатЗапроса) Экспорт
	
	МассивВозврата = Новый Массив;
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		СтрокаИменКолонок = "";
		Для Каждого Колонка ИЗ РезультатЗапроса.Колонки Цикл
			СтрокаИменКолонок = ?(СтрокаИменКолонок="", "", СтрокаИменКолонок+",")+Колонка.Имя;
		КонецЦикла;
		
		Если СтрокаИменКолонок = "" Тогда
			Возврат МассивВозврата;
		КонецЕсли;
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураДанных = Новый Структура(СтрокаИменКолонок);
			ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
			МассивВозврата.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

// Функция проверят наличие ролей с префиксом "торо", если отсутствует роль "Базовые права ТОиР".
// Возвращаемое значение:
//		Булево - доступна ли роль.
Функция ДоступностьРолиТОиРБазовыеПрава() Экспорт
	
	Если НЕ РольДоступна("торо_БазовыеПрава") Тогда	
		Для Каждого Роль Из ПользователиИнформационнойБазы.ТекущийПользователь().Роли Цикл
			Если Найти(Роль.Имя, "торо_") > 0 Тогда
				Возврат Ложь;	
			КонецЕсли;
		КонецЦикла;
	КонецЕслИ;
	Возврат Истина;
КонецФункции

// Функция проверяет заполненность табличных частей в документе.
// 
// Параметры:
//		Док - ДокументОбъект - документ объект.
//		СписокТЧ - Структура - список табличных частей для проверки.
//		Отказ - Булево - признак ошибки.
//
Процедура ПроверитьЗаполненностьТабличныхЧастей(Док, СписокТЧ, Отказ) Экспорт
	
	ЕстьОшибки = Ложь;
	
	СписокТЧМетаданных = Док.Метаданные().ТабличныеЧасти;
	
	Для каждого текТЧ из СписокТЧ Цикл
		Если Док[ТекТЧ.Ключ].Количество() = 0 Тогда
			ЕстьОшибки = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В табличной части ""%1"" нет строк.'"),СписокТЧМетаданных[ТекТЧ.Ключ].Синоним));
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьОшибки тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе есть ошибки, проведение невозможно! Для проведения документа необходимо исправить ошибки.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Извлекает временную таблицу из запроса.
// Параметры:
//		Запрос - Запрос - запрос с установленным менеджером временных таблиц.
//		ИмяВнутреннейТаблицы - Строка - имя таблицы для извлечения.
// Возвращаемое значение: 
//		ТаблицаЗначений - таблица значений из запроса.
 Функция  ИзвлечьВТ(Запрос, ИмяВнутреннейТаблицы) Экспорт
	
	Перем ЗапросТМП, Результат;
	
	// Получаем таблицу из менеджера временных таблиц запроса.
	ЗапросТМП =	Новый Запрос("ВЫБРАТЬ * ИЗ " + ИмяВнутреннейТаблицы);
	ЗапросТМП.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц; 
	Результат = ЗапросТМП.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

// Получается таблицу всех родителей элемента иерархического справочника.
//
// Параметры:
//		Ссылка - Ссылка - ссылка на объект.
//		ВключатьСамОбъект - Булево - включать сам объект в таблицу.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица с колонками
//  		* Родитель - Ссылка - ссылка на родителя или объект,
//  		* Уровень - Число - Удаленность родителя от объекта (0 - сам объект, 1 - ближайший родитель и т.д.).
//
Функция ПолучитьТаблицуРодителейОбъекта(Ссылка, ВключатьСамОбъект = Истина) Экспорт
	
	ТипСсылки = ТипЗнч(Ссылка);
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипСсылки);
	
	ОбъектыРемонтаРодители = Новый ТаблицаЗначений;
	ОбъектыРемонтаРодители.Колонки.Добавить("Родитель", Новый ОписаниеТипов(МассивТипов));
	ОбъектыРемонтаРодители.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат ОбъектыРемонтаРодители;
	КонецЕсли;
	
	Если ВключатьСамОбъект Тогда
		ТекСтр = ОбъектыРемонтаРодители.Добавить();
		ТекСтр.Родитель = Ссылка;
		ТекСтр.Уровень=0;
	КонецЕсли;
	
	Уровень = 1;
	РодительОбъекта = Ссылка;
	
	Пока ЗначениеЗаполнено(РодительОбъекта.Родитель) цикл
		РодительОбъекта=РодительОбъекта.Родитель;
		
		ТекСтр = ОбъектыРемонтаРодители.Добавить();
		ТекСтр.Родитель = РодительОбъекта;
		ТекСтр.Уровень = Уровень;

		Уровень = Уровень + 1;
	КонецЦикла;
	
	Возврат ОбъектыРемонтаРодители;
	
КонецФункции

// Получается таблицу всех родителей списка элементов иерархического справочника.
//
// Параметры:
//		СписокОбъектов - Массив - список объектов.
//		ВключатьСамОбъект - Булево - включать сам объект в таблицу.
//		ТипСсылки - Тип - тип ссылок в массиве для добавления колонки в таблицу значений.
//
// Возвращаемое значение:
// 	ТаблицаЗначений - с колонками:
//  		Родитель - ссылка на родителя или объект,
//  		Уровень - Удаленность родителя от объекта (0 - сам объект, 1 - ближайший родитель и т.д.).
//  		Объект - элемент исходного списка.
Функция ПолучитьТаблицуРодителейСпискаОбъектов(СписокОбъектов, ВключатьСамОбъект = Истина, ТипСсылки) Экспорт
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипСсылки);
	
	ОбъектыРемонтаРодители = Новый ТаблицаЗначений;
	ОбъектыРемонтаРодители.Колонки.Добавить("Родитель", Новый ОписаниеТипов(МассивТипов));
	ОбъектыРемонтаРодители.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
	ОбъектыРемонтаРодители.Колонки.Добавить("Объект", Новый ОписаниеТипов(МассивТипов));
	
	Для каждого Ссылка из СписокОбъектов Цикл
		РодителиОбъекта = ПолучитьТаблицуРодителейОбъекта(Ссылка, ВключатьСамОбъект);
		Для каждого СтрокаТаблицы из РодителиОбъекта Цикл
			НовСтр = ОбъектыРемонтаРодители.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТаблицы);
			НовСтр.Объект = Ссылка;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОбъектыРемонтаРодители;
	
КонецФункции

#КонецОбласти
