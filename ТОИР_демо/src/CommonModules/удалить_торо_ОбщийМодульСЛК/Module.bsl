//////////////////////////////////////////////////////////////////////////////////
//// торо_ОбщийМодульСЛК: функции работы с СЛК
////
//////////////////////////////////////////////////////////////////////////////////
//#Область ПрограммныйИнтерфейс

//// Серия используемых ключей
//Функция Серия() Экспорт
//	Возврат "28DD";
//КонецФункции

//// Тип контроля лицензий
//Функция ТолькоНаличиеКлюча() Экспорт
//	
//	Возврат Ложь;
//КонецФункции

//// 
//// Подключение компоненты СЛК. Для отладки реализована загрузка из 
//// файла на диске - в реальной работе рекомендуется использовать загрузку 
//// из макета
////
//Процедура ПодключитьКомпоненту() Экспорт
//	
//	Если НЕ ПодключитьВнешнююКомпоненту("ОбщийМакет.торо_КомпонентаСЛК_2_0_Session", "Licence",ТипВнешнейКомпоненты.Native) Тогда
//		СисИнфо = Новый СистемнаяИнформация;
//		ВызватьИсключение "Ошибка подключения компоненты СЛК " + СисИнфо.ТипПлатформы;
//	КонецЕсли;
//	Возврат;

//КонецПроцедуры

//// Получение менеджера защищенных объектов СЛК
//Функция МенеджерОбъектов(Режим = Ложь) Экспорт
//	
//	//
//	// Для оптимизации получаем менеджер объектов из специального модуля, у которого
//	// установлен режим повторного использования возращаемых объектов "на время сеанса" 
//	// (см. МенеджерОбъектовСЛК.Получить).
//	//
//	Возврат торо_СЛКСервер.Получить();
//КонецФункции

//// Возврат версии компоненты СЛК
//Функция Версия() Экспорт
//	ПодключитьКомпоненту();
//	МенеджерЛицензий = Новый("AddIn.Licence.LicenceExtension20");
//	
//	СисИнфо = Новый СистемнаяИнформация;
//	Возврат МенеджерЛицензий.Версия + " (" + СисИнфо.ТипПлатформы + ")";
//КонецФункции

//// Проверка версии компоненты СЛК
//Функция ПроверитьВерсию(Версия) Экспорт
//	ПодключитьКомпоненту();
//	МенеджерЛицензий = Новый("AddIn.Licence.LicenceExtension20");
//	
//	Попытка
//		Возврат МенеджерЛицензий.ПроверитьВерсию(Версия);
//	Исключение
//		Возврат Ложь;
//	КонецПопытки;
//КонецФункции

//// Информация о текущем сеансе работы
//Функция ДанныеСеанса() Экспорт
//	НомерСеанса = НомерСеансаИнформационнойБазы();
//	УстановитьПривилегированныйРежим(Истина);
//	Сеансы = ПолучитьСеансыИнформационнойБазы();
//	Для Каждого С Из Сеансы Цикл
//		Если С.НомерСеанса = НомерСеанса Тогда
//			Сеанс = С;
//			Прервать;
//		КонецЕсли;
//	КонецЦикла;
//	УстановитьПривилегированныйРежим(Ложь);
//	Возврат Строка(Сеанс.НомерСеанса) + "," + Сеанс.ИмяКомпьютера + "," + Сеанс.ИмяПриложения + "," + Сеанс.Пользователь;
//КонецФункции

//// Запуск СЛК
//Процедура Запуск() Экспорт
//	Менеджер = МенеджерОбъектов();
//	Менеджер.ПроверитьЛицензиюСеанса(ТолькоНаличиеКлюча());
//КонецПроцедуры

//// Проверка лицензии сеанса
//Процедура ПроверитьЛицензию() Экспорт
//	МенеджерОбъектов().ПроверитьЛицензиюСеанса(ТолькоНаличиеКлюча());
//КонецПроцедуры

//// Отладочная информация
//Функция ПолучитьОтладочнуюСтроку() Экспорт
//	Возврат МенеджерОбъектов().ПолучитьОтладочнуюСтроку();
//КонецФункции

//// Создание объекта по его имени в файле данных
//Функция СоздатьОбъект(Имя) Экспорт
//	
//	// Если необходимо оптимизировать обращение к защищенному объекту, 
//	// то функции получения объекта нужно поместить в модуль, у которого
//	// установлен режим повторного использования возращаемых объектов "на время сеанса" 
//	// (аналогично получению менеджера объектов).
//	
//	Возврат торо_СЛКСервер.СоздатьОбъект(Имя);
//	
//КонецФункции

////  Получение значений лицензионных параметров
//Функция ПолучитьЗначениеПараметра(Имя) Экспорт
//	Возврат МенеджерОбъектов().ПолучитьЗначениеПараметра(Имя);
//КонецФункции

//// Чтение памяти ключа защиты
//Функция ПрочитатьПамятьКлюча(Пароль) Экспорт
//	Возврат МенеджерОбъектов().ПрочитатьПамятьКлюча(Пароль);
//КонецФункции

//// Запись памяти ключа защиты
//Процедура ЗаписатьПамятьКлюча(Пароль, Данные) Экспорт
//	МенеджерОбъектов().ЗаписатьПамятьКлюча(Пароль, Данные);
//КонецПроцедуры

//// Установка паролей на память ключа
//Процедура УстановитьПаролиНаПамятьКлюча(НаЧтениеСтарый, НаЗаписьСтарый, НаЧтениеНовый, НаЗаписьНовый) Экспорт
//	МенеджерОбъектов().УстановитьПаролиНаПамятьКлюча(НаЧтениеСтарый, НаЗаписьСтарый, НаЧтениеНовый, НаЗаписьНовый);
//КонецПроцедуры

//// Обнуление памяти ключа защиты и сброс паролей
//Процедура ОбнулитьПамятьКлюча() Экспорт
//	МенеджерОбъектов().ОбнулитьПамятьКлюча();
//КонецПроцедуры

//// Получение списка ключей на сервере СЛК
//Функция ПолучитьСписокКлючей() Экспорт
//	Возврат МенеджерОбъектов().ПолучитьСписокКлючей();
//КонецФункции

//// Получение общего количество лицензий на сервере СЛК
//Функция ПолучитьОбщееКоличествоЛицензий(Тип = 0) Экспорт
//	Возврат МенеджерОбъектов().ПолучитьОбщееКоличествоЛицензий(Тип);
//КонецФункции

//// Получение номера ключа, лицензию которого занял сеанс
//Функция ПолучитьНомерКлюча() Экспорт
//	Возврат МенеджерОбъектов().ПолучитьНомерКлюча();
//КонецФункции

//#КонецОбласти
