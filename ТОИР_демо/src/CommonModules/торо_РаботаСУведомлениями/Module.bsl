////////////////////////////////////////////////////////////////////////////////
// торо_РаботаСУведомлениями: методы, для работы с уведомлениями и оповещениями
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс
#Область ПодпискиНаСобытия
// Регистрация уведомлений перед записью документа.
// Параметры:
//  Источник - ДокументОбъект - документ.
//  Отказ - Булево - отказ.
//  РежимЗаписи - РежимЗаписиДокумента - режим записи.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения.
Процедура торо_Обработка_ПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	мИспользоватьСогласованиеДокументов	 = Ложь;
	Регламентный = Ложь;
	Источник.СтруктураДанных = Новый Структура;
	
	Источник.СтруктураДанных.Вставить("РежимЗаписи", РежимЗаписи);
	
	ВидДокумента = Метаданные.Перечисления.торо_ВидыДокументовСогласованияРемонтов.ЗначенияПеречисления.Найти(Источник.Метаданные().Имя);
	
	Если ВидДокумента = Неопределено Тогда
		
		ВидДокумента = Метаданные.Перечисления.торо_ВидыДокументовСогласованияМероприятий.ЗначенияПеречисления.Найти(Источник.Метаданные().Имя);
		Регламентный = Истина;
		
	КонецЕсли;
	
	Если ВидДокумента <> Неопределено Тогда
		ЗначениеПеречисления = ?(НЕ Регламентный,Перечисления.торо_ВидыДокументовСогласованияРемонтов[ВидДокумента.Имя],Перечисления.торо_ВидыДокументовСогласованияМероприятий[ВидДокумента.Имя]);
		мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ЗначениеПеречисления, Регламентный);
	КонецЕсли;
	
	Если мИспользоватьСогласованиеДокументов Тогда
		
		Источник.СтруктураДанных.Вставить("ПредыдущийСтатусДокумента", Источник.Ссылка.СтатусДокумента);
		Источник.СтруктураДанных.Вставить("ИспользоватьСогласование",  Истина);
		
	КонецЕсли;
	
	
КонецПроцедуры

// Регистрация уведомлений при записи документа.
// Параметры:
//  Источник - ДокументОбъект - документ.
//  Отказ - Булево - отказ.
Процедура торо_ОбработкаФормированияУведомленийПриЗаписиДокументаПриЗаписи(Источник, Отказ) Экспорт
	
	СтруктураДанных = Источник.СтруктураДанных;
	ЗаполнитьСтруктуруДанныхДокумента(СтруктураДанных, Источник);
	СтруктураДанных.Вставить("ВидДокумента",СокрЛП(Источник.Метаданные().Имя));
	ЗаписатьНеобходимыеУведомленияВРегистры(СтруктураДанных, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаИВыводУведомлений

// Возвращает неотправленные уведомления.
// Параметры:
//  СпособУведомления - ПеречислениеСсылка.торо_СпособыУведомленияПользователей - жеаемый способ уведомления.
//  Пользователь - СправочникСсылка.Пользователи - пользователь, для которого получаются уведомления.
// Возвращаемое значение:
//  Массив, ТаблицаЗначений - неотправленные уведомления.
Функция ПолучитьНеСформированныеУведомления(СпособУведомления, Пользователь = Неопределено) Экспорт
	
	тзУведомления = РегистрыСведений.торо_ОчередьУведомлений.ПолучитьНеОтправленныеУведомления(СпособУведомления, Пользователь);
	
	Если СпособУведомления = Перечисления.торо_СпособыУведомленияПользователей.УведомлениеВВидеВсплывающейПодсказки Тогда
		
		МассивВозврата = Новый Массив;
		
		Для Каждого Строка Из тзУведомления Цикл
			
			СтруктураУведомления = Новый Структура();
			
			Для каждого Колонка Из тзУведомления.Колонки Цикл
				
				СтруктураУведомления.Вставить(Колонка.Имя,Строка[Колонка.Имя]);
				
			КонецЦикла;
													
			МассивВозврата.Добавить(СтруктураУведомления);
			
		КонецЦикла;
		
		Возврат МассивВозврата;
		
	Иначе
		
		Возврат тзУведомления;
		
	КонецЕсли;
	
КонецФункции

// Отправляет неотправленные уведомления.
Процедура ОтправитьПочтовыеУведомления() Экспорт
	
	НеСформированныеУведомления = ПолучитьНеСформированныеУведомления(Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте);	
	
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	
	Если Не УчетнаяЗапись.ИспользоватьДляОтправки Тогда
		
		ТекстСообщения = НСтр("ru = 'Не обнаружены доступные учетные записи электронной почты, обратитесь к администратору системы.'");
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	УчетнаяЗаписьПароль = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль");
	ПарольЗадан = ЗначениеЗаполнено(УчетнаяЗаписьПароль);
	
	МассивНеОтправленных    = Новый Массив;
	МассивОтправленных = Новый Массив; 	
	
	Для каждого Уведомление Из НеСформированныеУведомления Цикл
		
		ПараметрыПисьма = Новый Структура;
		
		Если ЗначениеЗаполнено(УчетнаяЗаписьПароль) Тогда
			ПараметрыПисьма.Вставить("Пароль", УчетнаяЗаписьПароль);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Уведомление.АдресОтправления) Тогда
			ПараметрыПисьма.Вставить("Кому", Уведомление.АдресОтправления);
		Иначе
			МассивНеОтправленных.Добавить(Новый Структура("ID_уведомления, Пользователь, Ошибка, ОписаниеОшибки, СпособУведомления, Источник, ТелоПисьма, ТемаПисьма", 
			Уведомление.ID_уведомления, 
			Уведомление.Пользователь, 
			Истина, 
			"У пользователя " + Уведомление.Пользователь + " не указано ни одного адреса электронной почты.",
			Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте,
			Уведомление.Источник, 
			Уведомление.ТелоПисьма, 
			Уведомление.ТемаПисьма));
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Уведомление.ТемаПисьма) Тогда
			ПараметрыПисьма.Вставить("Тема", Уведомление.ТемаПисьма);
		Иначе
			ПараметрыПисьма.Вставить("Тема", "");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Уведомление.ТелоПисьма) Тогда
			ПараметрыПисьма.Вставить("Тело", Уведомление.ТелоПисьма);
		Иначе
			ПараметрыПисьма.Вставить("Тело", "");
		КонецЕсли;
		
		ПараметрыПисьма.Вставить("ID_уведомления", Уведомление.ID_уведомления);
		ПараметрыПисьма.Вставить("Пользователь"  , Уведомление.Пользователь);
		ПараметрыПисьма.Вставить("Источник"      , Уведомление.Источник);				
		
		Профиль = РаботаСПочтовымиСообщениямиСлужебный.ИнтернетПочтовыйПрофиль(УчетнаяЗапись);
		Соединение = Новый ИнтернетПочта;
		Соединение.Подключиться(Профиль);  
		
		
		Если РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись,ПараметрыПисьма, Соединение) = Неопределено Тогда
			
			МассивНеОтправленных.Добавить(Новый Структура("ID_уведомления, Пользователь, СпособУведомления, ОписаниеОшибки, Источник, ТелоПисьма, ТемаПисьма", 
			ПараметрыПисьма.ID_уведомления, 
			ПараметрыПисьма.Пользователь,
			Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте,
			"Ошибка: " + ОписаниеОшибки(),
			ПараметрыПисьма.Источник,
			ПараметрыПисьма.Тело,
			ПараметрыПисьма.Тема));
		Иначе
			
			МассивОтправленных.Добавить(Новый Структура("ID_уведомления, Пользователь, СпособУведомления, Источник, ТелоПисьма, ТемаПисьма",
			ПараметрыПисьма.ID_уведомления, 
			ПараметрыПисьма.Пользователь,
			Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте,
			ПараметрыПисьма.Источник,
			ПараметрыПисьма.Тело,
			ПараметрыПисьма.Тема));								
			
		КонецЕсли;   		
		
	КонецЦикла;
	// указание ошибок для неотправленных
	РегистрыСведений.торо_ОчередьУведомлений.ЗаполнитьОписаниеОшибки(МассивНеОтправленных);
	ОтметитьУведомленияПользователя(МассивОтправленных); 
	
КонецПроцедуры

// Заполняет шаблон письма данными.
// Параметры:
//  Шаблон - СправочникСсылка.торо_ШаблоныСообщенийИУведомлений - шаблон письма.
//  Адресат - Строка - представление получателя.
//  СтруктураДанных - Структура - Структура параметров для подстановки.
// Возвращаемое значение:
//  Структура - структура письма с полями ТемаУведомления, ТелоУведомления.
Функция ПолучитьСодержимоеПисьмаПоШаблону(Шаблон, Адресат, СтруктураДанных) Экспорт
	
	СтруктураПисьма = Новый Структура;
	
	ТемаПисьма = Шаблон.ТемаПисьма;
	ЗаменитьТегиНаДанные(ТемаПисьма,СтруктураДанных,Адресат);
	
	СтруктураПисьма.Вставить("ТемаУведомления", ТемаПисьма);
	
	ТелоПисьма = Шаблон.ТелоПисьма;
	ЗаменитьТегиНаДанные(ТелоПисьма,СтруктураДанных,Адресат);
	
	СтруктураПисьма.Вставить("ТелоУведомления", ТелоПисьма);
	
	Возврат СтруктураПисьма;
	
КонецФункции

// Отправляет уведомления для пользователя.
// Параметры:
//  МассивУведомлений - Массив - массив уведомлений.
// Возвращаемое значение:
//  Неопределено - ничего не возвращает.
Функция ОтметитьУведомленияПользователя(МассивУведомлений) Экспорт
	
	Если МассивУведомлений.Количество() > 0 Тогда
		РегистрыСведений.торо_УведомленияПользователей.ЗаписатьУведомления(МассивУведомлений);
		РегистрыСведений.торо_ИсторияУведомленийПользователей.ЗаписатьУведомления(МассивУведомлений);
		РегистрыСведений.торо_ОчередьУведомлений.УдалитьУведомления(МассивУведомлений);
	КонецЕсли; 	
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОтправкаИВыводУведомлений
Процедура ЗаменитьТегиНаДанные(Строка, СтруктураДанных, Адресат)
	
	Для каждого ЭлементСтруктуры Из СтруктураДанных Цикл
		Строка = СтрЗаменить(Строка,"%" + ЭлементСтруктуры.Ключ + "%", ЭлементСтруктуры.Значение);
	КонецЦикла; 
	
	Строка = СтрЗаменить(Строка, "%Адресат%",Адресат);
	
КонецПроцедуры

Процедура СформироватьВсплывающееУведомление(НаборЗаписей,СтруктураДанных,Событие,МассивОповещаемых,МассивЗаполнен)
				
	СсылкаНаИсточник = СтруктураДанных.Ссылка;
	Для каждого Строка из Событие.Оповещаемые Цикл
		
		ДополнитьСтруктуруДанныхПоТипуДокумента(СтруктураДанных);
		
		ID_уведомления = Новый  УникальныйИдентификатор;
		
		Если ТипЗнч(Строка.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
			НС = НаборЗаписей.Добавить();
			
			СтруктураПисьма = ПолучитьСодержимоеПисьмаПоШаблону(Событие.ШаблонСообщения, Строка.Пользователь, СтруктураДанных);
			
			НС.ТемаПисьма        = СтруктураПисьма.ТемаУведомления;
			НС.ТелоПисьма        = СтруктураПисьма.ТелоУведомления;
			
			НС.ID_уведомления    = ID_уведомления;
			НС.Источник          = СсылкаНаИсточник;
			НС.Пользователь      = Строка.Пользователь;
			НС.СпособУведомления = Перечисления.торо_СпособыУведомленияПользователей.УведомлениеВВидеВсплывающейПодсказки;
			
		ИначеЕсли ТипЗнч(Строка.Пользователь) = Тип("Строка") Тогда
			
			МассивОповещаемых = ПолучитьСписокОповещаемых(Строка.Пользователь, СсылкаНаИсточник, СтруктураДанных);
			МассивЗаполнен = Истина;
			
			Если МассивОповещаемых = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Если МассивОповещаемых.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
				
			Для Каждого Оповещаемый Из МассивОповещаемых Цикл
				
				Если ТипЗнч(Оповещаемый) = Тип("Структура") Тогда
					
					Если СтруктураДанных.Свойство("СледующийСтатусДокумента") Тогда
						СтруктураДанных.СледующийСтатусДокумента = Оповещаемый.СледующийСтатусДокумента;
					Иначе
						СтруктураДанных.Вставить("СледующийСтатусДокумента", Оповещаемый.СледующийСтатусДокумента);
					КонецЕсли;
					
					Адресат = Оповещаемый.Пользователь;
					
				Иначе
					
					Адресат = Оповещаемый;
					
				КонецЕсли;
				
				НС = НаборЗаписей.Добавить();

				СтруктураПисьма = ПолучитьСодержимоеПисьмаПоШаблону(Событие.ШаблонСообщения, Адресат, СтруктураДанных);
				
				НС.ТемаПисьма        = СтруктураПисьма.ТемаУведомления;
				НС.ТелоПисьма        = СтруктураПисьма.ТелоУведомления;
				
				НС.ID_уведомления    = ID_уведомления;
				НС.Источник          = СсылкаНаИсточник;
				НС.Пользователь      = Адресат;
				НС.СпособУведомления = Перечисления.торо_СпособыУведомленияПользователей.УведомлениеВВидеВсплывающейПодсказки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура СформироватьПочтовоеУведомление(НаборЗаписей,СтруктураДанных,Событие,МассивОповещаемых,МассивЗаполнен)
	СсылкаНаИсточник = СтруктураДанных.Ссылка;
	Для каждого Строка из Событие.Оповещаемые Цикл
		Если СтруктураДанных.ВидДокумента = "торо_ВыявленныеДефекты" Тогда  // Проверим на уведомление по видам дефекта
			
			СтрокаУведомления = "";
			
			Для Каждого СтрокаТаблицы Из СсылкаНаИсточник.СписокДефектов Цикл
				
				СтрокаУведомления = СтрокаУведомления + "
				| " + СтрокаТаблицы.ОбъектРемонта + "	|	" + СтрокаТаблицы.ОтказавшийЭлемент + "	|	"  + СтрокаТаблицы.КритичностьДефекта;
				
				Если Не СтруктураДанных.Свойство("ВидДефекта") Тогда
					
					СтруктураДанных.Вставить("ВидДефекта");
					
				КонецЕсли;
				
			КонецЦикла;
			
			
			Если НЕ СтрокаУведомления = "" Тогда
								
				СтруктураДанных.Вставить("ДефектныеОбъектыРемонта", СтрокаУведомления);
				
			КонецЕсли;
			
		КонецЕсли;

		ID_уведомления = Новый  УникальныйИдентификатор;
		
		Если ТипЗнч(Строка.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
			НС = НаборЗаписей.Добавить();
			
			СтруктураПисьма = ПолучитьСодержимоеПисьмаПоШаблону(Событие.ШаблонСообщения, Строка.Пользователь, СтруктураДанных);
			
			НС.ТемаПисьма        = СтруктураПисьма.ТемаУведомления;
			НС.ТелоПисьма        = СтруктураПисьма.ТелоУведомления;
			
			НС.ID_уведомления    = ID_уведомления;
			НС.Источник          = СсылкаНаИсточник;
			НС.Пользователь      = Строка.Пользователь;
			НС.СпособУведомления = Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте;
			
		ИначеЕсли ТипЗнч(Строка.Пользователь) = Тип("Строка") Тогда
			
			Если Не МассивЗаполнен Тогда
				МассивОповещаемых = ПолучитьСписокОповещаемых(Строка.Пользователь, СсылкаНаИсточник, СтруктураДанных, Ложь);
			КонецЕсли;
			
			Если МассивОповещаемых = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Для Каждого Оповещаемый Из МассивОповещаемых Цикл
				
				Если ТипЗнч(Оповещаемый) = Тип("Структура") Тогда
					
					Если СтруктураДанных.Свойство("СледующийСтатусДокумента") Тогда
						СтруктураДанных.СледующийСтатусДокумента = Оповещаемый.СледующийСтатусДокумента;
					Иначе
						СтруктураДанных.Вставить("СледующийСтатусДокумента", Оповещаемый.СледующийСтатусДокумента);
					КонецЕсли;
					
					Адресат = Оповещаемый.Пользователь;
					
				Иначе
					
					Адресат = Оповещаемый;
					
				КонецЕсли;
				
				СтруктураПисьма = ПолучитьСодержимоеПисьмаПоШаблону(Событие.ШаблонСообщения, Адресат, СтруктураДанных);
				
				// Была проблема с возможным созданием записей с одинаковыми измерениями, что вело к ошибке
				// Исправлено следующим костылем:
				ИзмеренияРегистраСтрокой = "Пользователь, ID_уведомления, СпособУведомления, Источник";
				НайденныеСтрокиССовпадающимиИзмерениями = НаборЗаписей.Выгрузить().НайтиСтроки(Новый Структура(ИзмеренияРегистраСтрокой, Адресат, Строка(ID_уведомления), Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте, СсылкаНаИсточник));
				Если НайденныеСтрокиССовпадающимиИзмерениями.Количество() > 0 Тогда
					УжеЗаписаныТемаИТекстПисьма = Ложь;
					Для Каждого НайденнаяСтрока Из НайденныеСтрокиССовпадающимиИзмерениями Цикл
						Если НайденнаяСтрока.ТемаПисьма = СтруктураПисьма.ТемаУведомления И НайденнаяСтрока.ТелоПисьма = СтруктураПисьма.ТелоУведомления Тогда
							УжеЗаписаныТемаИТекстПисьма = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если УжеЗаписаныТемаИТекстПисьма Тогда
						Продолжить;
					Иначе
						ID_уведомления = Новый УникальныйИдентификатор;
					КонецЕсли;
				КонецЕсли;
				//
				
				НС = НаборЗаписей.Добавить();

				НС.ТемаПисьма        = СтруктураПисьма.ТемаУведомления;
				НС.ТелоПисьма        = СтруктураПисьма.ТелоУведомления;
				
				НС.ID_уведомления    = ID_уведомления;
				НС.Источник          = СсылкаНаИсточник;
				НС.Пользователь      = Адресат;
				НС.СпособУведомления = Перечисления.торо_СпособыУведомленияПользователей.УведомлениеПоЭлектроннойПочте;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные
Процедура ЗаписатьНеобходимыеУведомленияВРегистры(СтруктураДанных, Источник, ТолькоСогласование = Ложь)  Экспорт
	
	Если ЗначениеЗаполнено(СтруктураДанных) Тогда
		
		// получаем все события уведомлений
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_НастройкиУведомлений.СобытиеПоДокументу,
		               |	торо_НастройкиУведомлений.Событие
		               |ИЗ
		               |	РегистрСведений.торо_НастройкиУведомлений КАК торо_НастройкиУведомлений
		               |ГДЕ
		               |	торо_НастройкиУведомлений.ВидДокумента = &ВидДокумента";
		
		Запрос.УстановитьПараметр("ВидДокумента", СтруктураДанных.ВидДокумента);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Событие = Выборка.СобытиеПоДокументу;
			СобытиеУведомления = Выборка.Событие;
			
			// формируем уведомления
			НаборЗаписей = РегистрыСведений.торо_ОчередьУведомлений.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать(); // отборов нет
			
			// При записи регистра срабатывает согласование.
			// При записи документа - остальыне события.
			// Т.е. срабатывает либо только согласование, либо только остальные события.
			Если (ТолькоСогласование	
				И СобытиеУведомления <> Перечисления.торо_СобытияУведомленийПользователей.СменаСтатусаСогласования) 
				
				ИЛИ (ТолькоСогласование = Ложь
					И СобытиеУведомления = Перечисления.торо_СобытияУведомленийПользователей.СменаСтатусаСогласования)	Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			// Дополняем значение структуры данных согласующим если происходит согласование.
			// Использовано наиболее простое решение, возможно стоит где то раньше в структуру данных документа добавлять.
			Если ТолькоСогласование И СобытиеУведомления = Перечисления.торо_СобытияУведомленийПользователей.СменаСтатусаСогласования Тогда

				Запрос = Новый Запрос("ВЫБРАТЬ
				|	торо_ИсторияСтатусовДокументовСрезПоследних.Пользователь КАК Согласующий
				|ИЗ
				|	РегистрСведений.торо_ИсторияСтатусовДокументов.СрезПоследних(, Документ = &Ссылка) КАК торо_ИсторияСтатусовДокументовСрезПоследних
				|
				|УПОРЯДОЧИТЬ ПО
				|	торо_ИсторияСтатусовДокументовСрезПоследних.Период УБЫВ");
				Запрос.УстановитьПараметр("Ссылка", СтруктураДанных.Ссылка);
				ВыборкаСогласующих = Запрос.Выполнить().Выбрать();
				Если ВыборкаСогласующих.Следующий() Тогда
					СтруктураДанных.Вставить("Согласующий", ВыборкаСогласующих.Согласующий);
				КонецЕсли;
			КонецЕсли;
			
			МассивОповещаемых = Новый Массив;
			МассивЗаполнен = Ложь;
			
			Если Событие.ФормироватьВсплывающиеУведомления Тогда
				СформироватьВсплывающееУведомление(НаборЗаписей,СтруктураДанных,Событие,МассивОповещаемых,МассивЗаполнен);
			КонецЕсли;
			
			Если Событие.ФормироватьПочтовыеУведомления Тогда
				СформироватьПочтовоеУведомление(НаборЗаписей,СтруктураДанных,Событие,МассивОповещаемых,МассивЗаполнен);
			КонецЕсли;
			// почтовые уведомления
			
			НаборЗаписей.Записать();
			
		КонецЦикла;
		
	КонецЕсли; 
		
КонецПроцедуры

Процедура ДополнитьСтруктуруДанныхПоТипуДокумента(СтруктураДанных)
	
	Если СтруктураДанных.ВидДокумента = "торо_ВыявленныеДефекты" Тогда  // Проверим на уведомление по видам дефекта
			
		СтрокаУведомления = "";
		
		Для Каждого СтрокаТаблицы Из СтруктураДанных.Ссылка.СписокДефектов Цикл
			
			СтрокаУведомления = СтрокаУведомления + "
			| " + СтрокаТаблицы.ОбъектРемонта + "	|	" + СтрокаТаблицы.ОтказавшийЭлемент + "	|	"  + СтрокаТаблицы.КритичностьДефекта;
			
			Если Не СтруктураДанных.Свойство("ВидДефекта") Тогда
				
				СтруктураДанных.Вставить("ВидДефекта");
				
			КонецЕсли;
			
		КонецЦикла;
				
		Если НЕ СтрокаУведомления = "" Тогда
				
			СтруктураДанных.Вставить("ДефектныеОбъектыРемонта", СтрокаУведомления);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокОповещаемых(СтрокаОповещаемых, Источник, СтруктураДанных, ТолькоПользователей = Истина)
	
	МассивОповещаемых = Новый Массив;
	
	Если СтрокаОповещаемых = "Ответственный по документу" Тогда
		
		МассивОповещаемых.Добавить(СтруктураДанных.Ответственный);
		
		Возврат МассивОповещаемых;
		
	ИначеЕсли СтрокаОповещаемых = "Согласующие" Тогда
		
		РегламентныйДокумент = (СтруктураДанных.ВидДокумента = "торо_ГрафикРегламентныхМероприятийТОиР"
										ИЛИ СтруктураДанных.ВидДокумента = "торо_НарядНаРегламентноеМероприятие"
										ИЛИ СтруктураДанных.ВидДокумента = "торо_АктОВыполненииРегламентногоМероприятия");
		
		Если торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(СтруктураДанных.ВидДокумента, РегламентныйДокумент)
			И СтруктураДанных.Свойство("СпособСогласования") И ЗначениеЗаполнено(СтруктураДанных.СпособСогласования)
			И СтруктураДанных.Свойство("СтатусДокумента") Тогда
			
			Если Не ЗначениеЗаполнено(СтруктураДанных.СтатусДокумента) Тогда
				 СтруктураДанных.СтатусДокумента = торо_Ремонты.ПолучитьНачальныйСтатус(СтруктураДанных.СпособСогласования);
			КонецЕсли;
			 
			СписокСледующихСтатусов = торо_Ремонты.ПолучитьСписокСледующихСтатусовДокумента(СтруктураДанных.СпособСогласования, СтруктураДанных.СтатусДокумента);
			
			
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	торо_СпособыСогласованияДокументовПорядокСогласования.Пользователь,
				               |	торо_СпособыСогласованияДокументовПорядокСогласования.ТекущийСтатус
				               |ИЗ
				               |	Справочник.торо_СпособыСогласованияДокументов.ПорядокСогласования КАК торо_СпособыСогласованияДокументовПорядокСогласования
				               |ГДЕ
				               |	торо_СпособыСогласованияДокументовПорядокСогласования.Ссылка = &Ссылка
				               |	И торо_СпособыСогласованияДокументовПорядокСогласования.ТекущийСтатус В(&СписокСледующихСтатусов)";
				
				
				Запрос.УстановитьПараметр("Ссылка"                  , СтруктураДанных.СпособСогласования);
				Запрос.УстановитьПараметр("СписокСледующихСтатусов" , СписокСледующихСтатусов);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					МассивОповещаемых.Добавить(Новый Структура("СледующийСтатусДокумента, Пользователь", Выборка.ТекущийСтатус, Выборка.Пользователь));
					
				КонецЦикла;
				
						
			Возврат МассивОповещаемых;
			
		КонецЕсли;
	// Ветка для получения e-mail адресов со вкладки "Оповещаемые лица" настройки способа согласования.
	// Получаем адреса всех оповещаемых лиц следующих статусов документа. Так как указаны не пользователи,
	// имеет смысл только для уведомлений на почту.
	ИначеЕсли СтрокаОповещаемых = "Оповещаемые" И Не ТолькоПользователей Тогда
		
		РегламентныйДокумент = (СтруктураДанных.ВидДокумента = "торо_ГрафикРегламентныхМероприятийТОиР"
										ИЛИ СтруктураДанных.ВидДокумента = "торо_НарядНаРегламентноеМероприятие"
										ИЛИ СтруктураДанных.ВидДокумента = "торо_АктОВыполненииРегламентногоМероприятия");
		
		Если торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(СтруктураДанных.ВидДокумента, РегламентныйДокумент)
			И СтруктураДанных.Свойство("СпособСогласования") И ЗначениеЗаполнено(СтруктураДанных.СпособСогласования)
			И СтруктураДанных.Свойство("СтатусДокумента") Тогда
			
			Если Не ЗначениеЗаполнено(СтруктураДанных.СтатусДокумента) Тогда
				СтруктураДанных.СтатусДокумента = торо_Ремонты.ПолучитьНачальныйСтатус(СтруктураДанных.СпособСогласования);
			КонецЕсли;
			
			Запрос = Новый Запрос("ВЫБРАТЬ
			|	торо_СпособыСогласованияДокументовОповещаемыеЛица.АдресЭлектроннойПочты КАК Пользователь,
			|	торо_СпособыСогласованияДокументовОповещаемыеЛица.ТекущийСтатус
			|ИЗ
			|	Справочник.торо_СпособыСогласованияДокументов.ОповещаемыеЛица КАК торо_СпособыСогласованияДокументовОповещаемыеЛица
			|ГДЕ
			|	торо_СпособыСогласованияДокументовОповещаемыеЛица.Ссылка = &Ссылка
			|	И торо_СпособыСогласованияДокументовОповещаемыеЛица.ТекущийСтатус В(&СписокСледующихСтатусов)");
			
			
			Запрос.УстановитьПараметр("Ссылка"                  , СтруктураДанных.СпособСогласования);
			Запрос.УстановитьПараметр("СписокСледующихСтатусов" , СтруктураДанных.СтатусДокумента);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				МассивОповещаемых.Добавить(Новый Структура("СледующийСтатусДокумента, Пользователь", Выборка.ТекущийСтатус, Выборка.Пользователь));
				
			КонецЦикла;
			
			
			Возврат МассивОповещаемых;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Возвращаем пустой массив если не попали ни в одну ветку, для избежания ошибок.
	Возврат МассивОповещаемых;
	
КонецФункции

// Добавляет в структуру данных значения всех реквизитов документа.
Процедура ЗаполнитьСтруктуруДанныхДокумента(СтруктураДанных, Документ, ПередЗаписью = Ложь) Экспорт
	
	МетаданныеДокумента = Документ.Метаданные();
	
	Для каждого Реквизит Из МетаданныеДокумента.Реквизиты Цикл
		
		Если СтруктураДанных.Свойство(?(ПередЗаписью, "ПередЗаписью_", "") + Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураДанных.Вставить(?(ПередЗаписью, "ПередЗаписью_", "") + Реквизит.Имя, Документ[Реквизит.Имя]);
		
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеДокумента.СтандартныеРеквизиты Цикл
		Если СтруктураДанных.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли; 
		СтруктураДанных.Вставить(Реквизит.Имя, Документ[Реквизит.Имя]);
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные
Функция ПолучитьТекущегоПользователя() Экспорт
	
	Возврат Пользователи.ТекущийПользователь();
	
КонецФункции

#КонецОбласти 
#КонецОбласти