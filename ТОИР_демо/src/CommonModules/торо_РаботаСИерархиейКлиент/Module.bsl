////////////////////////////////////////////////////////////////////////////////
// торо_РаботаСИерархиейКлиент: методы, для работы с иерархиями.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обновляет данные в строке таблицы объектов ремонта.
//
// Параметры:
//  Строка - СтрокаТаблицы - строка таблицы объектов ремонта.
//  Дерево - ДанныеФормыДерево - дерево объекитов ремонта.
//  СтруктураИерархии - СправочникСсылка.торо_СтуктурыОР - структура иерархии.
//  СтруктураПараметровФормы - Структура - структура параметров.
//
Процедура ОбновитьИнформациюПоОбъектуРемонта(Строка, Дерево, СтруктураИерархии, СтруктураПараметровФормы) Экспорт
		
	СтруктураДанных = торо_РаботаСИерархией.ПолучитьСтруктуруДанныхПоОбъектуРемонта(Строка.Ссылка, СтруктураИерархии, СтруктураПараметровФормы);
	
	Если НЕ СтруктураДанных = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Строка, СтруктураДанных);
	КонецЕсли; 
	
	МассивРодителей = Новый Массив;
	
	Если СтруктураДанных.Свойство("МассивРодителей", МассивРодителей) Тогда
		
		СтрокаВДереве = ПолучитьСтрокуСОбъектомРемонтаИзДерева(МассивРодителей, Дерево, Строка.Ссылка);
		
		Если Не СтрокаВДереве = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаВДереве, СтруктураДанных);
            СтрокаВДереве.Ссылка                    = СтруктураДанных.ОбъектИерархии;
            СтрокаВДереве.Картинка                  = СтруктураДанных.ИндексКартинки;
            СтрокаВДереве.РеквизитДопУпорядочивания = СтруктураДанных.РеквизитДопУпорядочиванияОР;
		КонецЕсли; 
	КонецЕсли; 
	 

КонецПроцедуры
// Устанавливает отбор в списке ОР.
//
// Параметры:
//  Форма - УправляемаяФорма - форма списка ОР.
//  РодительИерархии - СправочникСсылка - текущий выделенный элемент в дереве.
//  Перезаполнить - Булево - Необходимо перезаполнить список.
//
Процедура УстановитьОтборВСписке(Форма,РодительИерархии,Перезаполнить = Ложь) Экспорт
	
	СписокОбъектов = Форма.СписокОбъектов;
	ПометкаКнопки = Форма.Элементы.ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр.Пометка;
	Если НЕ ПометкаКнопки И Перезаполнить Тогда
		
		СписокОбъектов.Очистить();
		
		СтруктураПараметровИерархии = Новый Структура(
		"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник",
		Форма.ТекСтруктураИерархии, Форма.ИзменяетсяДокументами, Форма.СтроитсяАвтоматически, Форма.ИерархияРеквизитОР, Форма.ИерархияТипРеквизитаОР,Форма.ИерархическийСправочник);
		
		СтруктураПараметровФормы = Новый Структура("ИмяФормы,Перезаполнить,ИерархическийПросмотр,СписокСтатусов,ВидПодбора");
		ЗаполнитьЗначенияСвойств(СтруктураПараметровФормы, Форма);
		СтруктураПараметровФормы.Перезаполнить = Перезаполнить;
		СтруктураПараметровФормы.ИерархическийПросмотр = ПометкаКнопки;
		
		МассивОбъектов = торо_РаботаСИерархией.ПолучитьСписокПодчиненныхОбъектов(СтруктураПараметровИерархии,,СтруктураПараметровФормы);
		
		ВыделитьДаннуюСтроку = Неопределено;
		Для Каждого СтрокаОР Из МассивОбъектов Цикл
			НС = СписокОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаОР);
			НС.Наименование = Строка(СтрокаОР.ОбъектИерархии);
			НС.Ссылка = СтрокаОР.ОбъектИерархии;
			НС.СсылкаОР = СтрокаОР.ОбъектИерархии;
			Если НС.Ссылка = РодительИерархии Тогда
				ВыделитьДаннуюСтроку = НС;
			КонецЕсли;
			Если НС.Свойство("ЭтоГруппа") Тогда
				НС.ЭтоГруппа = НС.Картинка = 5 Или НС.Картинка = 6;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыделитьДаннуюСтроку <> Неопределено Тогда
			Форма.Элементы.СписокОбъектов.ТекущаяСтрока = ВыделитьДаннуюСтроку.ПолучитьИдентификатор();
		КонецЕсли;
		
	ИначеЕсли ПометкаКнопки Тогда
	
		СписокОбъектов.Очистить();
		
		МассивИерархии = Новый Массив;
		
		ЗаполнитьМассивРодителейСтрокиДерева(МассивИерархии, Форма.Элементы.Дерево.ТекущиеДанные);
		
		МассивДобавленныхСтрок = Новый Массив;
		
		ВыделитьДаннуюСтроку = Неопределено;
		
		Сч = МассивИерархии.Количество()-1;
		СтрокаРодитель =  СписокОбъектов;
		ПодчиненныеЭлементы = Форма.Элементы.Дерево.ТекущиеДанные.ПолучитьЭлементы();
		КоличествоПодчиненных = ПодчиненныеЭлементы.Количество();
		Пока Сч >= 0 Цикл

			НовСтрокаДереваОР = СтрокаРодитель.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаДереваОР, МассивИерархии[Сч]);
			НовСтрокаДереваОР.Наименование = Строка(МассивИерархии[Сч].Ссылка);
			НовСтрокаДереваОР.СсылкаОР = МассивИерархии[Сч].Ссылка;
			
			Если НовСтрокаДереваОР.Свойство("ЭтоРодитель") Тогда
				НовСтрокаДереваОР.ЭтоРодитель = Истина;
			КонецЕсли;
			Если НовСтрокаДереваОР.Свойство("ЭтоГруппа") Тогда
				Если МассивИерархии[Сч].Картинка = 5 ИЛИ МассивИерархии[Сч].Картинка = 6 Тогда
					НовСтрокаДереваОР.ЭтоГруппа = Истина;
				КонецЕслИ;
			КонецЕсли;
			МассивДобавленныхСтрок.Добавить(НовСтрокаДереваОР);
			Сч = Сч - 1;
		КонецЦикла;
		
		Если КоличествоПодчиненных = 0 Тогда
			ВыделитьДаннуюСтроку = НовСтрокаДереваОР;
		КонецЕсли;
		Для Каждого СтрокаОР Из ПодчиненныеЭлементы Цикл
			НС = СписокОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаОР);
			НС.Наименование = Строка(СтрокаОР.Ссылка);
			НС.СсылкаОР = НС.Ссылка;
			Если ВыделитьДаннуюСтроку = Неопределено Тогда
				ВыделитьДаннуюСтроку = НС;
			КонецЕсли;
			Если НС.Свойство("ЭтоГруппа") Тогда
				Если СтрокаОР.Картинка = 5 ИЛИ СтрокаОР.Картинка = 6 Тогда
					НС.ЭтоГруппа = Истина;
				КонецЕслИ;
			КонецЕсли;
			
			Если НС.Ссылка = РодительИерархии Тогда
				ВыделитьДаннуюСтроку = НС;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыделитьДаннуюСтроку <> Неопределено Тогда
			Форма.Элементы.СписокОбъектов.ТекущаяСтрока = ВыделитьДаннуюСтроку.ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево ОР на форме.
//
// Параметры:
//  Форма - УправляемаяФорма - форма.
//  ИмяДереваЭлемент - Строка - имя заполняемого элемента формы.
//  ИмяДереваРеквизит - Строка - имя заполняемого реквизита формы.
//  СтруктураПараметровИерархии - Структура - структура информации об иерархии.
//
Процедура ЗаполнитьДеревоНаКлиенте(Форма,ИмяДереваЭлемент,ИмяДереваРеквизит,СтруктураПараметровИерархии = Неопределено) Экспорт
	
	ДеревоЭлемент  = Форма.Элементы[ИмяДереваЭлемент];
	ДеревоРеквизит = Форма[ИмяДереваРеквизит];
	
	Если СтруктураПараметровИерархии = Неопределено Тогда
		СтруктураПараметровИерархии = Новый Структура(
		"СтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, РеквизитОР, ТипРеквизитаОР, ИерархическийСправочник,РодительИерархии",
		Форма.ТекСтруктураИерархии, Форма.ИзменяетсяДокументами, Форма.СтроитсяАвтоматически, Форма.ИерархияРеквизитОР, Форма.ИерархияТипРеквизитаОР,Форма.ИерархическийСправочник);	
	КонецЕсли;
	
	СостояниеДереваОР = ПолучитьСостояниеДерева(Форма,Форма.Элементы[ИмяДереваЭлемент],Форма[ИмяДереваРеквизит],СтруктураПараметровИерархии.СтруктураИерархии);
	ДеревоРеквизит.ПолучитьЭлементы().Очистить();
	
	ИмяФормы = Форма.ИмяФормы;
	
	СтруктураПараметровФормы = Новый Структура(
	"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
	 ИмяФормы, СостояниеДереваОР, Неопределено);
	
	
	Если (ИмяФормы = "Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР"
		ИЛИ ИмяФормы = "Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовИЦепочекДляПланаГрафикаППР") Тогда
		
		СтруктураПараметровФормы.Вставить("ВидПодбора", Форма.ВидПодбора);
	ИначеЕсли ИмяФормы = "Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора"  Тогда 
		СтруктураПараметровФормы.Вставить("СписокСтатусов", Форма.СписокСтатусов);
	КонецЕсли;
	
	
	МассивСтрок = торо_РаботаСИерархией.ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии,СтруктураПараметровФормы);
	торо_РаботаСИерархией.ЗаполнитьДопПоляСпискаОбъектовСервере(МассивСтрок);
	
	
	ПостроитьДеревоПоМассивуСтрок(МассивСтрок,ДеревоРеквизит,СтруктураПараметровИерархии);
	
	ВосстановитьСостояниеДереваНаКлиенте(СостояниеДереваОР,Форма[ИмяДереваРеквизит],Форма.Элементы[ИмяДереваЭлемент]);
	
	
КонецПроцедуры

// Обработка выбора ОР в дереве.
//
// Параметры:
//  Форма - УправляемаяФорма - форма.
//  ВыбранноеЗначение - Массив, Структура, СправочникСсылка - выбранное значение.
//
Процедура ОбработатьВыборОРДляДерева(Форма,ВыбранноеЗначение) Экспорт
	
	ТекДанные = Форма.Элементы.Дерево.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Если Форма.ИзменяетсяДокументами Тогда
			
			ПараметрыОткрытия = Новый Структура();
			ПараметрыОткрытия.Вставить("СтруктураИерархии",Форма.ТекСтруктураИерархии);
			ПараметрыОткрытия.Вставить("ОбъектИерархии",ВыбранноеЗначение);
			ПараметрыОткрытия.Вставить("РодительИерархии",ТекДанные.Ссылка);
			
			ОткрытьФорму("Документ.торо_ИзменениеПоложенияВСтруктуреИерархии.ФормаОбъекта",ПараметрыОткрытия,Форма);
		Иначе
			ДобавитьСтрокуДерева(Форма ,ВыбранноеЗначение, ТекДанные);
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если Форма.ИзменяетсяДокументами Тогда
			
			ПараметрыОткрытия = Новый Структура();
			ПараметрыОткрытия.Вставить("СтруктураИерархии",Форма.ТекСтруктураИерархии);
			ПараметрыОткрытия.Вставить("ОбъектИерархии",ВыбранноеЗначение);
			ПараметрыОткрытия.Вставить("РодительИерархии",ТекДанные.Ссылка);
			
			ОткрытьФорму("Документ.торо_ИзменениеПоложенияВСтруктуреИерархии.ФормаОбъекта",ПараметрыОткрытия,Форма);
		Иначе
			ДобавитьСтрокуДерева(Форма, ВыбранноеЗначение, ТекДанные);
		КонецЕсли;	
		
	Иначе
		Если Форма.ИзменяетсяДокументами Тогда
			
			ПараметрыОткрытия = Новый Структура("СтруктураИерархии,РодительИерархии,ОбъектИерархии",Форма.ТекСтруктураИерархии,ТекДанные.Ссылка,ВыбранноеЗначение);
			ОткрытьФорму("Документ.торо_ИзменениеПоложенияВСтруктуреИерархии.ФормаОбъекта",ПараметрыОткрытия,Форма); 
			
		Иначе
			
			ВыбЗнач = ВыбранноеЗначение;
			соотвествиеРодительДобавляемогоЭлемента = торо_РаботаСИерархией.ПроверитьЕстьЛиВыбранныеЗначенияВИерархии(ВыбранноеЗначение, Форма.ТекСтруктураИерархии);
			РодительДобавляемогоЭлемента = соотвествиеРодительДобавляемогоЭлемента[ВыбЗнач];
			
			Если НЕ РодительДобавляемогоЭлемента = Неопределено Тогда
				
				ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоОбработкаВыбораОдногоЗавершение", ЭтотОбъект, Новый Структура("ВыбЗнач, РодительДобавляемогоЭлемента, ТекДанные, Форма", ВыбранноеЗначение, соотвествиеРодительДобавляемогоЭлемента, ТекДанные, Форма)), НСтр("ru = 'Выбранное значение уже находится в иерархии. Изменить его положение?'"),
					РежимДиалогаВопрос.ДаНет, 60); 
				
			Иначе
				
				торо_РаботаСИерархией.ОбработатьВыборОРНаСервере(ВыбранноеЗначение, ТекДанные.Ссылка, Форма.ТекСтруктураИерархии);
				торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(Форма,"Дерево","Дерево");
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Завершение процедуры выбора одного ОР.
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - ответ на вопрос.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ДеревоОбработкаВыбораОдногоЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбЗнач 					 = ДополнительныеПараметры.ВыбЗнач;
    РодительДобавляемогоЭлемента = ДополнительныеПараметры.РодительДобавляемогоЭлемента;
    ТекДанные 					 = ДополнительныеПараметры.ТекДанные;
    Форма		 				 = ДополнительныеПараметры.Форма;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		торо_РаботаСИерархией.ОбработатьВыборОРНаСервере(ВыбЗнач, ТекДанные.Ссылка, Форма.ТекСтруктураИерархии,ТекДанные.РодительИерархии,РодительДобавляемогоЭлемента);
		торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(Форма,"Дерево","Дерево");
    КонецЕсли;

КонецПроцедуры

// Завершщение процедуры выбора нескольких ОР.
//
// Параметры:
//  РезультатВопроса - КодВозвратаДиалога - ответ на вопрос.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ДеревоОбработкаВыбораНесколькихЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	МассивОР = ДополнительныеПараметры.ВыбЗнач;
    СоответствиеОРСуществующихВТекИеррархии = ДополнительныеПараметры.РодительДобавляемогоЭлемента;
    ТекДанные = ДополнительныеПараметры.ТекДанные;
	Форма = ДополнительныеПараметры.Форма;
	ИерархияИсточник = ДополнительныеПараметры.ИерархияИсточник;
	КореньВетки = ДополнительныеПараметры.КореньВетки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		торо_РаботаСИерархией.ОбработатьВыборОРНаСервере(МассивОР, ТекДанные.Ссылка, Форма.ТекСтруктураИерархии,ТекДанные.РодительИерархии,СоответствиеОРСуществующихВТекИеррархии, ИерархияИсточник, КореньВетки);
		
	Иначе
		
		МассивОРБезСуществующих = Новый Массив;
		Для Каждого ОР Из МассивОР Цикл
			Если СоответствиеОРСуществующихВТекИеррархии[ОР] = Неопределено Тогда
				МассивОРБезСуществующих.Добавить(ОР);
			КонецЕсли;
		КонецЦикла;
		
		торо_РаботаСИерархией.ОбработатьВыборОРНаСервере(МассивОРБезСуществующих, ТекДанные.Ссылка, Форма.ТекСтруктураИерархии,ТекДанные.РодительИерархии,СоответствиеОРСуществующихВТекИеррархии, ИерархияИсточник, КореньВетки);
        
	КонецЕсли;
	
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(Форма,"Дерево","Дерево");

КонецПроцедуры

// Проверка зацикливания в иерархии.
//
// Параметры:
//  ТекущаяСтрокаДереваОбъектов - СтрокаДерева - выбранная строка дерева ОР.
//  СсылкаБудущегоРодителя - СправочникСсылка.торо_ОбъектыРемонта - ссылка на элемент, 
//                            в который выполняется перемещение.
//
// Возвращаемое значение:
//  Булево - Истина, если есть цикливание, иначе - ложь.
Функция ПеремещениеПриведетКЗацикливанию(ТекущаяСтрокаДереваОбъектов, СсылкаБудущегоРодителя) Экспорт
	
	Если ТекущаяСтрокаДереваОбъектов.Ссылка = СсылкаБудущегоРодителя Тогда
		Возврат Истина;
	КонецЕсли;
		
	ЭлементыСтроки = ТекущаяСтрокаДереваОбъектов.ПолучитьЭлементы();
	
	Для каждого Элемент Из ЭлементыСтроки Цикл
		Если ПеремещениеПриведетКЗацикливанию(Элемент, СсылкаБудущегоРодителя) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Процедура обработки перетаскивания элементов справочника.
//
// Параметры:
//  Элемент - ТаблицаФормы - элемент, в котором выполняется перетаскивание.
//  ПараметрыПеретаскивания - ПараметрыПеретаскивания - параметры перетаскивания.
//  СтандартнаяОбработка - Булево - признак стандартной обработки события.
//  Строка - Число - идентификатор строки, в которую выполняется перетаскивание.
//  Поле - Строка - колонка, в которую выполняется перетаскивание.
//  ЭтаФорма - УправляемаяФорма - форма.
//  ИзменяетсяДокументами - Булево - структура иерархии изменяется документами.
//  ТекСтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//
Процедура ОбработкаПеретаскиванияВДереве(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, ЭтаФорма, ИзменяетсяДокументами, ТекСтруктураИерархии) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЭтоПеретаскиваниеВДерево = (Элемент.Имя = "Дерево"); // ИСТИНА - если перетаскиваем в левую часть (Дерево), ЛОЖЬ - если в правую (СписокОбъектов)
	
	Если ИзменяетсяДокументами Тогда
		
		Источник = ЭтаФорма[?(ЭтоПеретаскиваниеВДерево,"Дерево","СписокОбъектов")];
		Если Строка = Неопределено И ЭтоПеретаскиваниеВДерево Тогда 
			НовоеПоложение = Источник.ПолучитьЭлементы()[0];
		ИначеЕсли Строка = Неопределено И Не ЭтоПеретаскиваниеВДерево Тогда
			Возврат;
		Иначе
			НовоеПоложение = Источник.НайтиПоИдентификатору(Строка);
		КонецЕсли;
		
		МассивПеретаскиваемыхСсылок = Новый Массив;
		Для Каждого ПеретаскиваемыйЭлемент Из ПараметрыПеретаскивания.Значение Цикл
		
			Если ТипЗнч(ПеретаскиваемыйЭлемент) = Тип("Число") Тогда
				ТекСсылка = Источник.НайтиПоИдентификатору(ПеретаскиваемыйЭлемент).Ссылка;
			Иначе
				ТекСсылка = ПеретаскиваемыйЭлемент.Ссылка;
			КонецЕсли;
			
			МассивПеретаскиваемыхСсылок.Добавить(ТекСсылка);
			
		КонецЦикла;
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
		ПараметрыОткрытия.Вставить("ОбъектИерархии"   , МассивПеретаскиваемыхСсылок);
		ПараметрыОткрытия.Вставить("РодительИерархии" , НовоеПоложение.Ссылка);
		
		ОткрытьФорму("Документ.торо_ИзменениеПоложенияВСтруктуреИерархии.ФормаОбъекта",ПараметрыОткрытия,ЭтаФорма);
		
	Иначе
		
		Дерево				= ЭтаФорма["Дерево"];
		МассивСтрокДерева	= Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, Дерево.ПолучитьЭлементы());
		
		

		Если ЭтоПеретаскиваниеВДерево Тогда
			Если Строка = Неопределено Тогда 
				НовоеПоложение = Дерево.ПолучитьЭлементы()[0];
			Иначе
				НовоеПоложение = Дерево.НайтиПоИдентификатору(Строка);
			КонецЕсли;
		Иначе
			СписокОбъектов		= ЭтаФорма["СписокОбъектов"];
			Если Строка = Неопределено Тогда
				Возврат;
			КонецЕсли;
			НовоеПоложение = НайтиВМассивеСтрокПоРеквизиту(МассивСтрокДерева, "Ссылка", СписокОбъектов.НайтиПоИдентификатору(Строка).Ссылка);
			Если НовоеПоложение = Неопределено Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не удалось найти новое положение для ОР в дереве!. Перемещение невозможно.'");
				Сообщение.Сообщить(); 
				Возврат;
			КонецЕсли;
		КонецЕсли;
	
		МассивПеретаскиваемыхДанных = Новый Массив;
		Для Каждого ПеретаскиваемыйЭлемент Из ПараметрыПеретаскивания.Значение Цикл
		
			Если ТипЗнч(ПеретаскиваемыйЭлемент) = Тип("Число") Тогда
				ТекДанные = ?(ЭтоПеретаскиваниеВДерево,
							Дерево.НайтиПоИдентификатору(ПеретаскиваемыйЭлемент),
							НайтиВМассивеСтрокПоРеквизиту(МассивСтрокДерева, "Ссылка", СписокОбъектов.НайтиПоИдентификатору(ПеретаскиваемыйЭлемент).Ссылка)
							);
			Иначе
				ТекДанные = НайтиВМассивеСтрокПоРеквизиту(МассивСтрокДерева, "Ссылка", ПеретаскиваемыйЭлемент.Ссылка);
			КонецЕсли;
			Если ТекДанные = Неопределено Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не удалось найти ОР в дереве!. Перемещение невозможно.'");
				Сообщение.Сообщить(); 
				Возврат;
			КонецЕсли;
			
			МассивПеретаскиваемыхДанных.Добавить(ТекДанные);
			
		КонецЦикла;
		
		Для Каждого ТекДанные Из МассивПеретаскиваемыхДанных Цикл
		
			Если ПеремещениеПриведетКЗацикливанию(ТекДанные,НовоеПоложение.Ссылка) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Перемещение объекта ремонта приведет к зацикливанию. Перемещение невозможно.'");
				Сообщение.Сообщить(); 
				Возврат;
			КонецЕсли; 
			
		КонецЦикла;

		Для Каждого ТекДанные Из МассивПеретаскиваемыхДанных Цикл
		
			РодительИерархии = ?(ТекДанные = Неопределено, ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"), ТекДанные.РодительИерархии);
			
			СтрокаРодитель = РодительИерархии;
			
			Если СтрокаРодитель = НовоеПоложение.Ссылка Тогда
				РодительДляГруппы = Неопределено;
			Иначе
				РодительДляГруппы = СтрокаРодитель;
			КонецЕсли;
			
			торо_РаботаСИерархией.ИзменитьПоложениеВИерархии(ТекДанные.Ссылка, ТекСтруктураИерархии, НовоеПоложение.Ссылка, РодительДляГруппы);
			
		КонецЦикла;

		торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает на форме признак возможности создания ОР в выбранной иерархии.
//
// Параметры:
//  Форма - УправляемаяФорма - форма.
Процедура УстановитьДоступностьСозданияНовыхОР(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Если Форма.ИмяФормы = "Справочник.торо_ОбъектыРемонта.Форма.ФормаСписка" Тогда
		
		РазрешенВводНовыхОР = Форма.РазрешенВводНовыхОР;
		СтроитсяАвтоматически = Форма.СтроитсяАвтоматически;
		ПравоИнтерактивноеДобавление = Форма.ПравоИнтерактивноеДобавление;
		ПравоИнтерактивнаяПометкаУдаления = Форма.ПравоИнтерактивнаяПометкаУдаления;
		ПравоРедактирование = Форма.ПравоРедактирование;
		
		Если Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаСоздатьЭлемент") <> Неопределено Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаСоздатьЭлемент.Доступность                                     = НЕ СтроитсяАвтоматически И ПравоИнтерактивноеДобавление;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаСоздатьЭлемент.Доступность                     = НЕ СтроитсяАвтоматически И ПравоИнтерактивноеДобавление;
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаСоздатьЭлемент.Доступность             = НЕ СтроитсяАвтоматически И ПравоИнтерактивноеДобавление;
		КонецЕсли;
		
		Если Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаСкопировать") <> Неопределено Тогда    
			Элементы.ФормаСправочникторо_ОбъектыРемонтаСкопировать.Доступность                                        = РазрешенВводНовыхОР И ПравоИнтерактивноеДобавление;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаСкопировать.Доступность                        = РазрешенВводНовыхОР И ПравоИнтерактивноеДобавление;
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаСкопировать.Доступность                = РазрешенВводНовыхОР И ПравоИнтерактивноеДобавление;
		КонецЕсли;
		
		// Удаление из иерархии и добавлении в иерархию имеет смысл только 
		// для "неосновных" иерархий, соответственно меняем подсказку кнопки.
		Если Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаПометкаУдаления") <> Неопределено Тогда    
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПометкаУдаления.Доступность                                    = ПравоИнтерактивнаяПометкаУдаления И Не СтроитсяАвтоматически;
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПометкаУдаления.РасширеннаяПодсказка.Заголовок                 = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПометкаУдаления.Заголовок                                      = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.Доступность                    = ПравоИнтерактивнаяПометкаУдаления И Не СтроитсяАвтоматически;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.РасширеннаяПодсказка.Заголовок = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.Заголовок                      = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.Доступность            = ПравоИнтерактивнаяПометкаУдаления И Не СтроитсяАвтоматически;
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.РасширеннаяПодсказка.Заголовок= ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.Заголовок              = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
		КонецЕсли;
		
		Если Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаИзменитьПоложениеВИерархии") <> Неопределено Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаИзменитьПоложениеВИерархии.Доступность                         = Не СтроитсяАвтоматически И ПравоРедактирование;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаИзменитьПоложениеВИерархии.Доступность         = Не СтроитсяАвтоматически И ПравоРедактирование;
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаИзменитьПоложениеВИерархии.Доступность = Не СтроитсяАвтоматически И ПравоРедактирование;
		КонецЕсли;
		
		Если Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаСоздатьГруппу") <> Неопределено Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаСоздатьГруппу.Доступность = Не СтроитсяАвтоматически И ПравоРедактирование;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаСоздатьГруппу.Доступность = Не СтроитсяАвтоматически И ПравоРедактирование;
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаСоздатьГруппу.Доступность = Не СтроитсяАвтоматически И ПравоРедактирование;
		КонецЕсли;
		
	ИначеЕсли Форма.ИмяФормы = "Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора" Тогда
		
		РазрешенВводНовыхОР = Форма.РазрешенВводНовыхОР;
		СтроитсяАвтоматически = Форма.СтроитсяАвтоматически;
		ПравоИнтерактивноеДобавление = Форма.ПравоИнтерактивноеДобавление;
		ПравоИнтерактивнаяПометкаУдаления = Форма.ПравоИнтерактивнаяПометкаУдаления;
		ПравоРедактирование = Форма.ПравоРедактирование;
		
		// Добавлять ОР (в т.ч. копированием), помечать их на удаление можно только в "основной" иерархии.
		Если Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаСоздатьЭлемент") <> Неопределено Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаСоздатьЭлемент.Доступность                                     = НЕ СтроитсяАвтоматически И ПравоИнтерактивноеДобавление;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаСоздатьЭлемент.Доступность                     = НЕ СтроитсяАвтоматически И ПравоИнтерактивноеДобавление;
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаСоздатьЭлемент.Доступность             = НЕ СтроитсяАвтоматически И ПравоИнтерактивноеДобавление;
		КонецЕсли;
		
		Если Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаСкопировать") <> Неопределено Тогда    
			Элементы.ФормаСправочникторо_ОбъектыРемонтаСкопировать.Доступность                                        = РазрешенВводНовыхОР И ПравоИнтерактивноеДобавление;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаСкопировать.Доступность                        = РазрешенВводНовыхОР И ПравоИнтерактивноеДобавление;
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаСкопировать.Доступность                = РазрешенВводНовыхОР И ПравоИнтерактивноеДобавление;
		КонецЕсли;
		
		Если Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаПометкаУдаления") <> Неопределено Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПометкаУдаления.Доступность                                    = ПравоИнтерактивнаяПометкаУдаления И Не СтроитсяАвтоматически;
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПометкаУдаления.РасширеннаяПодсказка.Заголовок                 = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПометкаУдаления.Заголовок                                      = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.Доступность                    = ПравоИнтерактивнаяПометкаУдаления И Не СтроитсяАвтоматически;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.РасширеннаяПодсказка.Заголовок = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.Заголовок                      = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.Доступность            = ПравоИнтерактивнаяПометкаУдаления И Не СтроитсяАвтоматически;
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.РасширеннаяПодсказка.Заголовок= ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаПометкаУдаления.Заголовок              = ?(Не (РазрешенВводНовыхОР Или СтроитсяАвтоматически), НСтр("ru = 'Удалить из иерархии'"), НСтр("ru = 'Пометить на удаление / Снять пометку'"));
		КонецЕсли;
		
		Если Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаИзменитьПоложениеВИерархии") <> Неопределено Тогда    
			Элементы.ФормаСправочникторо_ОбъектыРемонтаИзменитьПоложениеВИерархии.Доступность                         = Не СтроитсяАвтоматически И ПравоРедактирование;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаИзменитьПоложениеВИерархии.Доступность         = Не СтроитсяАвтоматически И ПравоРедактирование;
			Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаИзменитьПоложениеВИерархии.Доступность = Не СтроитсяАвтоматически И ПравоРедактирование;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// ОбработчикиСобытийЭлементовФормИерархийОР

// Обработкик перед началом добавления ОР.
//
// Параметры:
//  Отказ - Булево - отказ от выполнения операции.
//  Копирование - Булево - это копирование.
//  Форма - УправляемаяФорма - форма.
//  Группа - Булево - признак добавления группы.
//  Элемент - ТаблицаФормы - текущий элемнт формы (список или дерево).
//
Процедура ПередНачаломДобавления(Отказ, Копирование, Форма, Группа, Элемент = неопределено) Экспорт
	
	Отказ = Истина;
	
	Если Форма.СтроитсяАвтоматически Или Копирование И НЕ Форма.РазрешенВводНовыхОР Тогда
		Возврат;
	КонецЕсли; 
	
	Если Форма.РазрешенВводНовыхОР Или Группа Тогда
		Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
			Если Не Копирование Тогда
				Если Не Группа Тогда
					ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", Новый Структура("СтруктураИерархии, РодительИерархии", Форма.ТекСтруктураИерархии, ?(Форма.Элементы.Дерево.ТекущиеДанные = Неопределено, Неопределено, Форма.Элементы.Дерево.ТекущиеДанные.Ссылка)), Форма);
					
				Иначе
					ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаГруппы",
					Новый Структура("ЭтоГруппа, СтруктураИерархии, РодительИерархии", Истина, Форма.ТекСтруктураИерархии, ?(Форма.Элементы.Дерево.ТекущиеДанные = Неопределено, Неопределено, Форма.Элементы.Дерево.ТекущиеДанные.Ссылка)),
					Форма);
				КонецЕсли;
			Иначе 
				Если Форма.ТекущийЭлемент = Форма.Элементы.СписокОбъектов Тогда
					ТекДанные = Форма.Элементы.СписокОбъектов.ТекущиеДанные;
					РодительИерархии = ?(Форма.Элементы.Дерево.ТекущиеДанные = Неопределено,ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"),Форма.Элементы.Дерево.ТекущиеДанные.Ссылка);
				Иначе
					ТекДанные = Форма.Элементы.Дерево.ТекущиеДанные;
					РодительИерархии = ?(ТекДанные = Неопределено,ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"),ТекДанные.РодительИерархии);
				КонецЕсли;
				
				Если НЕ ТекДанные = Неопределено и ТипЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
					
					Если (ТекДанные.Картинка = 2) ИЛИ (ТекДанные.Картинка = 5) Тогда
						ПоказатьВопрос(Новый ОписаниеОповещения("СкопироватьЗавершение", ЭтотОбъект, Новый Структура("Форма, РодительИерархии, ТекДанные", Форма,РодительИерархии, ТекДанные)), НСтр("ru = 'Скопировать какие-либо объекты ремонта, входящие в состав выбранного?'"), РежимДиалогаВопрос.ДаНет);
					Иначе 
						СоздатьОбъектРемонтаКопированием(Форма,ТекДанные,РодительИерархии);
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		ТекСтруктураИерархии = Форма.ТекСтруктураИерархии;
		Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("Редактирование", "Справочники", "торо_ОбъектыРемонта") Тогда
			СписокИерархийОР = торо_РаботаСИерархией.ПолучитьСписокИерархий(ТекСтруктураИерархии);
			КолЭлемВСписке = СписокИерархийОР.Количество();
			Если КолЭлемВСписке > 1 Тогда
				ПараметрыОткрытия = Новый Структура("СписокИерархийОР,ТекСтруктураИерархии",СписокИерархийОР,ТекСтруктураИерархии);
				ПараметрыОповещения = Новый Структура("Форма, текЭлемент", Форма, Элемент);
				ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаНастройкиВидаИерархии",ПараметрыОткрытия,Форма,,,,
				Новый ОписаниеОповещения("ДобавитьВИерархиюЗавершение",ЭтотОбъект,ПараметрыОповещения),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				Возврат;
			ИначеЕсли КолЭлемВСписке = 1 Тогда
				ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора", 
					Новый Структура("СтруктураИерархии, КлючНазначенияИспользования, РазрешитьВыборГрупп, ИсходнаяСтруктураИерархии, текЭлемент", 
						СписокИерархийОР[0].Значение, "ДобавлениеВИерархию", Истина, ТекСтруктураИерархии, Элемент),
					Форма.Элементы.Дерево);
			Иначе
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нет других иерархий для добавления из них объектов ремонта!'"));
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик завершения добавления в иерархию. 
// Открывает форму выбора ОР с иерархией, из которой будет перенесен ОР.
//
// Параметры:
//  РезультатЗакрытия - Структура - содержащая выбранную структуру иерархии.
//  ДополнительныеПараметры - Структура - дополнительные параметры.
//
Процедура ДобавитьВИерархиюЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Если НЕ РезультатЗакрытия = Неопределено Тогда
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора", 
			Новый Структура("СтруктураИерархии, КлючНазначенияИспользования, РазрешитьВыборГрупп, ИсходнаяСтруктураИерархии, текЭлемент", 
				РезультатЗакрытия.СтруктураИерархии, "ДобавлениеВИерархию", Истина, ДополнительныеПараметры.Форма.ТекСтруктураИерархии, ДополнительныеПараметры.текЭлемент),
			ДополнительныеПараметры.Форма.Элементы.Дерево);
	КонецЕсли;
КонецПроцедуры

// Обработчик удаления ОР.
//
// Параметры:
//  Отказ - Булево - отказ от выполнения операции.
//  Форма - УправляемаяФорма - форма.
//  РазрешенВводНовыхОР - Булево - в иерархии разрешен ввод новых ОР.
// 
Процедура ПередУдалением(Отказ, Форма, РазрешенВводНовыхОР) Экспорт
	
	Отказ = Истина;
	Если Форма.СтроитсяАвтоматически Тогда
		Возврат;
	КонецЕсли;

	
	Элементы = Форма.Элементы;

	МассивДанныхСтрок = Новый массив;
	Если Форма.ТекущийЭлемент = Элементы.СписокОбъектов Тогда
		ВыделенныеСтроки = Элементы.СписокОбъектов.ВыделенныеСтроки;
		Для каждого ИДВыделеннойСтроки из ВыделенныеСтроки Цикл
			ДанныеВыделеннойСтроки = Форма.СписокОбъектов.НайтиПоИдентификатору(ИДВыделеннойСтроки);
			МассивДанныхСтрок.Добавить(ДанныеВыделеннойСтроки);
		КонецЦикла;
	Иначе
		ВыделенныеСтроки = Элементы.Дерево.ВыделенныеСтроки;
		Для каждого ИДВыделеннойСтроки из ВыделенныеСтроки Цикл
			ДанныеВыделеннойСтроки = Форма.Дерево.НайтиПоИдентификатору(ИДВыделеннойСтроки);
			МассивДанныхСтрок.Добавить(ДанныеВыделеннойСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если МассивДанныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если РазрешенВводНовыхОР Тогда
		
		Если ПроверитьПравоНаКлиенте("ИнтерактивнаяПометкаУдаления") Тогда

			ЕстьПомеченныеНаУдаление = Ложь;
			Для каждого ДанныеСтроки из МассивДанныхСтрок Цикл
				Если ДанныеСтроки.ПометкаУдаления Тогда
					ЕстьПомеченныеНаУдаление = Истина;
					Прервать;

				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьПомеченныеНаУдаление Тогда
				ТекстВопроса = НСтр("ru = 'Снять с элементов пометку на удаление?'");
			Иначе
				ТекстВопроса = НСтр("ru = 'Пометить элементы на удаление?'");
			КонецЕсли;
			ПоказатьВопрос(Новый ОписаниеОповещения("ПометкаУдаленияОтветНаВопрос", ЭтотОбъект, Новый Структура("МассивДанныхСтрок, ЭтаФорма, НовоеЗначениеПометки", МассивДанныхСтрок, Форма, НЕ ЕстьПомеченныеНаУдаление)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
		КонецЕсли;
	Иначе
		
		Если ПроверитьПравоНаКлиенте("Редактирование") Тогда
			Ответ = Неопределено;
			
			ЕстьГруппы = Ложь;
			ЕстьЭлементы = Ложь;




			
			Для каждого ТекДанные из МассивДанныхСтрок Цикл
				Если ТекДанные.Картинка = 5 ИЛИ ТекДанные.Картинка = 6 Тогда
					ЕстьГруппы = Истина;
				Иначе
					ЕстьЭлементы = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьГруппы И ЕстьЭлементы Тогда
				НСтр("ru = 'Вы уверены что хотите удалить группы и объекты ремонта из иерархии?'");
			ИначеЕсли ЕстьГруппы Тогда
				Если МассивДанныхСтрок.Количество() > 1 Тогда
					ТекстСообщения = НСтр("ru = 'Вы уверены что хотите удалить группы из иерархии?'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Вы уверены что хотите удалить группу из иерархии?'");
				КонецЕсли;
			Иначе
				Если МассивДанныхСтрок.Количество() > 1 Тогда
					ТекстСообщения = НСтр("ru = 'Вы уверены что хотите удалить объекты ремонта из иерархии?'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Вы уверены что хотите удалить объект ремонта из иерархии?'");
				КонецЕсли;
			КонецЕсли;
			
			ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьЗавершение", ЭтотОбъект, Новый Структура("Форма, МассивДанныхСтрок", Форма, МассивДанныхСтрок)), ТекстСообщения, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

// Обработчик открытия формы ОР.
//
// Параметры:
//  Отказ - Булево - отказ от выполнения операции.
//  Форма - УправляемаяФорма - форма.
//
Процедура ПередНачаломИзменения(Отказ, Форма) Экспорт
	
	Отказ = Истина;
	
	ТекЭлементФормы = Форма.ТекущийЭлемент;
	
	Если ТекЭлементФормы.Имя = "Дерево"
		ИЛИ  ТекЭлементФормы.Имя = "СписокОбъектов" Тогда
		ТекДанные = Форма.Элементы[ТекЭлементФормы.Имя].ТекущиеДанные;
		
		Если НЕ ТекДанные = Неопределено Тогда
			
			Если типЗнч(ТекДанные.Ссылка) = тип("СправочникСсылка.торо_ОбъектыРемонта") тогда
				Если торо_РаботаСИерархией.ЯвляетсяГруппой(ТекДанные.Ссылка) Тогда
				ФормаГруппы = ПолучитьФорму("Справочник.торо_ОбъектыРемонта.ФормаГруппы", Новый Структура("Ключ, СтруктураИерархии", ТекДанные.Ссылка, Форма.ТекСтруктураИерархии), , ТекДанные.Ссылка);
				ФормаГруппы.Открыть();
				Иначе
					ФормаЭлемента = ПолучитьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", Новый Структура("Ключ, СтруктураИерархии", ТекДанные.Ссылка, Форма.ТекСтруктураИерархии), , ТекДанные.Ссылка);
					ФормаЭлемента.Открыть();
				КонецЕсли;
			Иначе
				ПоказатьЗначение(,ТекДанные.Ссылка);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли; 
	
КонецПроцедуры

// Обработчик кнопки "Изменить положение в иерархии".
//
// Параметры:
//  ЭтаФорма - УправляемаяФорма - форма.
//
Процедура ИзменитьПоложениеВИерархии(ЭтаФорма)Экспорт
	
	Элементы = ЭтаФорма.Элементы;
	
	Если Элементы.найти("СписокОбъектов") <> Неопределено
		И ЭтаФорма.ТекущийЭлемент = Элементы.СписокОбъектов Тогда
		
		ТекДанные          = Неопределено;
		РодительскаяСтрока = ?(Элементы.Дерево.ТекущиеДанные = Неопределено, Неопределено, Элементы.Дерево.ТекущиеДанные);

		Если РодительскаяСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СсылкаНаТекущийОбъект = Элементы.СписокОбъектов.ТекущиеДанные.Ссылка;
		
		Для каждого Строка Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			Если Строка.Ссылка = СсылкаНаТекущийОбъект Тогда
				ТекДанные = Строка;
				Прервать;
			КонецЕсли; 
		КонецЦикла; 
		
	Иначе
		ТекДанные = Элементы.Дерево.ТекущиеДанные;
	КонецЕсли;
	
	Если ПроверитьПравоНаКлиенте("Редактирование") Тогда
		
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыДляОповещения = Новый Структура("ЭтаФорма", ЭтаФорма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПоложениеВИерархииЗавершение", ЭтотОбъект, ПараметрыДляОповещения);
		
		ПараметрыФормы = Новый Структура("Ключ, ТекущийОбъект, СтруктураИерархии", ЭтаФорма.Дерево, ТекДанные.Ссылка, ЭтаФорма.ТекСтруктураИерархии);
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаДереваИерархии", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтрокуСОбъектомРемонтаИзДерева(МассивРодителей, Дерево, ОбъектРемонта)
	
	Если МассивРодителей.Количество() = 0 Тогда
		
		СтрокаРодителя = Дерево.ПолучитьЭлементы()[0];

		ЭлементыДерева = СтрокаРодителя.ПолучитьЭлементы();
		
		Для каждого ЭлемДерева из ЭлементыДерева Цикл 
			
			Если ОбъектРемонта = ЭлемДерева.Ссылка Тогда
				
				Возврат ЭлемДерева;
				
			КонецЕсли;
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИндексРодителя = МассивРодителей.Количество() - 1;
	СтрокиДерева = Дерево.ПолучитьЭлементы()[0].ПолучитьЭлементы();
		
	СтрокаРодителя = Неопределено;	
	
	Пока ИндексРодителя >= 0 Цикл
		
		Для каждого ТекСтрокаДерева из СтрокиДерева Цикл 
			Если ТекСтрокаДерева.Ссылка = МассивРодителей[ИндексРодителя] Тогда
				СтрокаРодителя = ТекСтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаРодителя <> Неопределено Тогда
			
			Если Не ИндексРодителя = 0 Тогда
				СтрокиДерева = СтрокаРодителя.ПолучитьЭлементы();
			КонецЕсли;
		КонецЕсли;
		
		ИндексРодителя = ИндексРодителя-1;
		
	КонецЦикла;
	
	Если Не СтрокаРодителя = Неопределено Тогда
		
		ЭлементыДерева = СтрокаРодителя.ПолучитьЭлементы();
		
		Для каждого ЭлемДерева из ЭлементыДерева Цикл 
			
			Если ЭлемДерева.Ссылка = ОбъектРемонта Тогда
				
				Возврат ЭлемДерева;
				
			КонецЕсли;
		КонецЦикла;

	КонецЕсли; 

	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСостояниеДерева(Форма,ДеревоЭлемент,ДеревоРеквизит,СтруктураИерархии = Неопределено)
	
	ТекущиеДанные = ДеревоЭлемент.ТекущиеДанные;
	
	Если СтруктураИерархии = Неопределено Тогда
		СтруктураИерархии = Форма.ТекСтруктураИерархии;
	КонецЕсли;
	
	СостояниеДереваОР = Новый Структура;
	СостояниеДереваОР.Вставить("СтруктураИерархии",СтруктураИерархии);
	СостояниеДереваОР.Вставить("ТекОР",?(ТекущиеДанные = Неопределено, ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"),ТекущиеДанные.Ссылка));
	МассивОткрытыхОР = Новый Массив;
	МассивОткрытыхОР.Добавить(ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"));
	
	ЭлементыДерева = ДеревоРеквизит.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		ПолучитьМассивРазвернутыхОР(ДеревоЭлемент,МассивОткрытыхОР,СтрокаДерева);
	КонецЦикла;
	СостояниеДереваОР.Вставить("МассивОткрытыхОР",МассивОткрытыхОР);
	Возврат СостояниеДереваОР;
	
КонецФункции

Процедура ПолучитьМассивРазвернутыхОР(ДеревоЭлемент,МассивОткрытыхОР,Строка)
	
	Если ДеревоЭлемент.Развернут(Строка.ПолучитьИдентификатор()) Тогда
		МассивОткрытыхОР.Добавить(Строка.Ссылка);
		Для Каждого СтрокаПодчиненная Из Строка.ПолучитьЭлементы() Цикл
			ПолучитьМассивРазвернутыхОР(ДеревоЭлемент,МассивОткрытыхОР,СтрокаПодчиненная);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВосстановитьСостояниеДереваНаКлиенте(СостояниеДереваОР,ДеревоРеквизит,ДеревоЭлемент)
	
	МассивОткрытыхОР = СостояниеДереваОР.МассивОткрытыхОР;
	Для Каждого Строка Из ДеревоРеквизит.ПолучитьЭлементы() Цикл
		
		РазвернутьВетвиДерева(МассивОткрытыхОР,Строка,ДеревоЭлемент,СостояниеДереваОР.ТекОР);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьМассивРодителейСтрокиДерева(МассивИерархии, СтрокаДерева)
	
	Если Не СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
		
		МассивИерархии.Добавить(СтрокаДерева);
		ЗаполнитьМассивРодителейСтрокиДерева(МассивИерархии, СтрокаДерева.ПолучитьРодителя());
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура РазвернутьВетвиДерева(МассивОР,СтрокаДерева,ДеревоЭлемент,ТекОР)
	
	Если МассивОР.Найти(СтрокаДерева.Ссылка) <> Неопределено Тогда
		
		ДеревоЭлемент.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	Если СтрокаДерева.Ссылка = ТекОР Тогда 
		ДеревоЭлемент.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	КонецЕсли;
	
	Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		РазвернутьВетвиДерева(МассивОР,СтрокаДереваПодчиненная,ДеревоЭлемент,ТекОР);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПостроитьДеревоПоМассивуСтрок(МассивСтрок,ДеревоРеквизит,СтруктураПараметровИерархии) 
		
	Если Тип(ДеревоРеквизит) = Тип("ДанныеФормыДерево") Тогда
		НС = ДеревоРеквизит.ПолучитьЭлементы().Добавить();
		НС.Ссылка = СтруктураПараметровИерархии.СтруктураИерархии;
		НС.Картинка = 4;
		НС.СвязиОбновлялись = Истина;
		
		РодительИерархии = СтруктураПараметровИерархии.РодительИерархии;
			
	Иначе // строка дерева
		НС = ДеревоРеквизит;
		РодительИерархии = ДеревоРеквизит.ОбъектИерархии;
	КонецЕсли;
	
	Для Каждого ЭлементКорневой Из МассивСтрок Цикл
		Если ЭлементКорневой.РодительИерархии = РодительИерархии Тогда
			
			НСКорневая = НС.ПолучитьЭлементы().Добавить();
			
			ЗаполнитьЗначенияСвойств(НСКорневая,ЭлементКорневой);
			
			НСКорневая.Ссылка                    = ЭлементКорневой.ОбъектИерархии;
            НСКорневая.Картинка                  = ЭлементКорневой.ИндексКартинки;
            НСКорневая.РеквизитДопУпорядочивания = ЭлементКорневой.РеквизитДопУпорядочиванияОР;
			
			Для Каждого ЭлементПодчиненный Из МассивСтрок Цикл
				Если ЭлементПодчиненный.РодительИерархии = ЭлементКорневой.ОбъектИерархии Тогда
					
					НСПодчиненная = НСКорневая.ПолучитьЭлементы().Добавить();
					
					ЗаполнитьЗначенияСвойств(НСПодчиненная,ЭлементПодчиненный);
					
                    НСПодчиненная.Ссылка                    = ЭлементПодчиненный.ОбъектИерархии;
                    НСПодчиненная.Картинка                  = ЭлементПодчиненный.ИндексКартинки;
                    НСПодчиненная.РеквизитДопУпорядочивания = ЭлементПодчиненный.РеквизитДопУпорядочиванияОР;
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция НайтиВМассивеСтрокПоРеквизиту(МассивСтрок, ИмяРеквизита, ЗначениеРеквизита)
	Для Каждого Стр Из МассивСтрок Цикл
		Если Стр[ИмяРеквизита] = ЗначениеРеквизита Тогда
			Возврат Стр;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

Процедура ДобавитьСтрокуДерева(Форма, МассивВыбранныхОР, ТекДанные)
	
	ТекОР = ТекДанные.Ссылка;
	ИерархияИсточник = Неопределено;
	КореньВетки = Неопределено;
	Если ТипЗнч(МассивВыбранныхОР) = Тип("Структура") тогда
		ИерархияИсточник = МассивВыбранныхОР.Иерархия;
		КореньВетки = МассивВыбранныхОР.КореньВетки;
		МассивВыбранныхОР = МассивВыбранныхОР.МассивОР;
	КонецЕсли;
	
	СоответствиеОРСуществующихВТекИеррархии = торо_РаботаСИерархией.ПроверитьЕстьЛиВыбранныеЗначенияВИерархии(МассивВыбранныхОР,Форма.ТекСтруктураИерархии);
	Если СоответствиеОРСуществующихВТекИеррархии.Количество() > 0 Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоОбработкаВыбораНесколькихЗавершение", 
						ЭтотОбъект, Новый Структура("Форма ,ВыбЗнач, РодительДобавляемогоЭлемента, ТекДанные, ИерархияИсточник, КореньВетки", 
													Форма, МассивВыбранныхОР, СоответствиеОРСуществующихВТекИеррархии, ТекДанные, ИерархияИсточник, КореньВетки)),
		НСтр("ru = 'Некоторые из выбранных значений уже находится в иерархии. Изменить их положение?'"), РежимДиалогаВопрос.ДаНетОтмена);
		
	Иначе
		
		торо_РаботаСИерархией.ОбработатьВыборОРНаСервере(МассивВыбранныхОР, ТекОР, Форма.ТекСтруктураИерархии,ТекДанные.РодительИерархии,СоответствиеОРСуществующихВТекИеррархии, ИерархияИсточник, КореньВетки);
		торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(Форма,"Дерево","Дерево");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьПравоНаКлиенте(Право)
	
	Возврат торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво(Право,"Справочники","торо_ОбъектыРемонта");	
	
КонецФункции

// СозданиеКопированием++

Процедура СкопироватьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	РодительИерархии = ДополнительныеПараметры.РодительИерархии;
	ТекДанные        = ДополнительныеПараметры.ТекДанные;
	Форма            = ДополнительныеПараметры.Форма;
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
		Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаДерева", Новый Структура("ОРВерхнегоУровня, ТекСтруктураИерархии, РодительОР", ТекДанные.Ссылка, Форма.ТекСтруктураИерархии, РодительИерархии), Форма, Форма);
		Иначе 
			СоздатьОбъектРемонтаКопированием(Форма,ТекДанные,РодительИерархии);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОбъектРемонтаКопированием(Форма, ТекДанные, РодительИерархии)
	
	Если ТипЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		СтруктураЗначений = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ТекДанные.Ссылка,"ЭтоГруппа");
	    Если СтруктураЗначений.Свойство("ЭтоГруппа") Тогда
			ЭтоГруппа = СтруктураЗначений.ЭтоГруппа;
		Иначе
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	Если Не ЭтоГруппа Тогда
		
		СписокПараметровКопирования = Новый СписокЗначений;
		
		Если Форма.ФОУчетКонтролируемыхПоказателей Тогда
			СписокПараметровКопирования.Добавить("Контролируемые показатели");
		КонецЕсли;
		
		Если Форма.ФОУчетНаработкиОборудования Тогда
			СписокПараметровКопирования.Добавить("Параметры наработки (только действующие значения)");
			СписокПараметровКопирования.Добавить("Параметры наработки (история изменения)");
		КонецЕсли;
		
		Если Форма.ФОУчетЗапчастей Тогда
			СписокПараметровКопирования.Добавить("Запчасти");
		КонецЕсли;
		
		Если СписокПараметровКопирования.Количество() Тогда
			
			СписокПараметровКопирования.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("СоздатьОбъектРемонтаКопированиемЗавершение", ЭтотОбъект, Новый Структура("Форма, РодительИерархии, СписокПараметровКопирования, ТекДанные, ЭтоГруппа", Форма, РодительИерархии, СписокПараметровКопирования, ТекДанные, ЭтоГруппа)), НСтр("ru = 'Переносить при копировании'"));
			Возврат;
			
		КонецЕсли;
		
		СоздатьОбъектРемонтаКопированиемФрагмент(Форма, РодительИерархии, СписокПараметровКопирования, ТекДанные, ЭтоГруппа);
	Иначе
		
		СписокПараметровКопирования = Новый СписокЗначений;
		СоздатьОбъектРемонтаКопированиемФрагмент(Форма, РодительИерархии, СписокПараметровКопирования, ТекДанные, ЭтоГруппа);
		
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьОбъектРемонтаКопированиемЗавершение(Список1, ДополнительныеПараметры) Экспорт
    
    РодительИерархии            = ДополнительныеПараметры.РодительИерархии;
    СписокПараметровКопирования = ДополнительныеПараметры.СписокПараметровКопирования;
    ТекДанные                   = ДополнительныеПараметры.ТекДанные;
    Форма                       = ДополнительныеПараметры.Форма;
    ЭтоГруппа                   = ДополнительныеПараметры.ЭтоГруппа;
	
	Если Список1 = Неопределено Тогда
		Возврат;
	Иначе
        СписокОбхода = СписокПараметровКопирования.Скопировать();
        Для каждого ЭлементСписка Из СписокОбхода Цикл
            Если НЕ ЭлементСписка.Пометка Тогда
                СписокПараметровКопирования.Удалить(СписокПараметровКопирования.НайтиПоЗначению(ЭлементСписка.Значение));
            КонецЕсли;
        КонецЦикла;

    КонецЕсли;
    
    СоздатьОбъектРемонтаКопированиемФрагмент(Форма, РодительИерархии, СписокПараметровКопирования, ТекДанные, ЭтоГруппа);

КонецПроцедуры

Процедура СоздатьОбъектРемонтаКопированиемФрагмент(Форма, Знач РодительИерархии, Знач СписокПараметровКопирования, Знач ТекДанные, ЭтоГруппа)
    
    Перем Инф;
    
    Если СписокПараметровКопирования.Количество() Тогда 
		ТекстВопроса = НСтр("ru = 'Для копирования выбранных параметров необходимо записать новый объект ремонта. Записать?
			|(В случае отказа параметры не будут скопированы.)'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьОбъектРемонтаКопированиемФрагментЗавершение", ЭтотОбъект, Новый Структура("Форма, РодительИерархии, СписокПараметровКопирования, ТекДанные, ЭтоГруппа", Форма, РодительИерархии, СписокПараметровКопирования, ТекДанные, ЭтоГруппа)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
    КонецЕсли;
    СоздатьОбъектРемонтаКопированиемФрагментФрагмент(Форма,РодительИерархии, СписокПараметровКопирования, ТекДанные, ЭтоГруппа);
КонецПроцедуры

Процедура СоздатьОбъектРемонтаКопированиемФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    РодительИерархии            = ДополнительныеПараметры.РодительИерархии;
    СписокПараметровКопирования = ДополнительныеПараметры.СписокПараметровКопирования;
    ТекДанные                   = ДополнительныеПараметры.ТекДанные;
    Форма                       = ДополнительныеПараметры.Форма;
    ЭтоГруппа                   = ДополнительныеПараметры.ЭтоГруппа;
	
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        СписокПараметровКопирования.Очистить();
    КонецЕсли;
    
    СоздатьОбъектРемонтаКопированиемФрагментФрагмент(Форма, РодительИерархии, СписокПараметровКопирования, ТекДанные, ЭтоГруппа);

КонецПроцедуры

Процедура СоздатьОбъектРемонтаКопированиемФрагментФрагмент(Форма, Знач РодительИерархии, Знач СписокПараметровКопирования, Знач ТекДанные, ЭтоГруппа)
	
	Перем Инф;
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
		Если Не ЭтоГруппа Тогда
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", Новый Структура("СписокПараметровКопирования, ПараметрКопирования, СтруктураИерархии, РодительИерархии, СозданКопированием", СписокПараметровКопирования, ТекДанные.Ссылка, Форма.ТекСтруктураИерархии, РодительИерархии, Истина), Форма);
		Иначе
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаГруппы", Новый Структура("ЭтоГруппа, СтруктураИерархии, РодительИерархии, Копирование", Истина, Форма.ТекСтруктураИерархии, РодительИерархии, ТекДанные.Ссылка), Форма);
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

// СозданиеКопированием--


// ПометкаНаУдаление++

Процедура ПометкаУдаленияОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	МассивДанныхСтрок = ДополнительныеПараметры.МассивДанныхСтрок;
	НовоеЗначениеПометки = ДополнительныеПараметры.НовоеЗначениеПометки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		
		ПерестроитьДерево = Ложь;
		
		Если НовоеЗначениеПометки = Истина Тогда
			
			НуженВопрос = Ложь;
			МассивСтруктурИерархий = Новый массив;
			ИерархииСтрокой = "";
			ОбъединеннаяКоллецияЭлементов = Новый Соответствие;
			
			Для каждого ТекДанные из МассивДанныхСтрок Цикл
				Если ТекДанные.ПометкаУдаления = НовоеЗначениеПометки Тогда
					Продолжить;
				КонецЕсли;
				
				КоллекцияЭлементов = ПолучитьМассивПодчиненных(ЭтаФорма,ТекДанные, Истина);
				Если КоллекцияЭлементов.Количество() > 0 Тогда
					НуженВопрос = Истина;
					Для каждого КлючИЗначение из КоллекцияЭлементов Цикл
						Если ТипЗнч(КлючИЗначение.Ключ) <> Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
							Продолжить;
						КонецЕсли;
						
						Если МассивСтруктурИерархий.Найти(КлючИЗначение.Ключ) = Неопределено Тогда
							МассивСтруктурИерархий.Добавить(КлючИЗначение.Ключ);
							Если КлючИЗначение.Ключ <> ЭтаФорма.ТекСтруктураИерархии Тогда
								ИерархииСтрокой = ?(ИерархииСтрокой="", "", ИерархииСтрокой+", ")+КлючИЗначение.Ключ;
							КонецЕсли;
						КонецЕсли;
						
						ЗначениеОбъед = ОбъединеннаяКоллецияЭлементов.Получить(КлючИЗначение.Ключ);
						Если ЗначениеОбъед = Неопределено Тогда
							ОбъединеннаяКоллецияЭлементов.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
						Иначе
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗначениеОбъед, КлючИЗначение.Значение, Истина);
							ОбъединеннаяКоллецияЭлементов.Вставить(КлючИЗначение.Ключ, ЗначениеОбъед);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Если НуженВопрос И МассивСтруктурИерархий.Количество() > 0 Тогда
				
				Кол = МассивСтруктурИерархий.Количество();
				Если МассивСтруктурИерархий.Найти(ЭтаФорма.ТекСтруктураИерархии) <> Неопределено Тогда
					Если Кол = 1 Тогда
						ТекстВопроса = НСтр("ru = 'Все подчиненные объекты ремонта в текущей иерархии переместятся в корень иерархии. Продолжить?'");
					ИначеЕсли Кол = 2 Тогда
						ТекстВопроса = НСтр("ru = 'Все подчиненные объекты ремонта в текущей иерархии, 
						|а так же в иерархии %1, 
						|переместятся в корень соответствующей иерархии. Продолжить?'");
						ТекстВопроса = СтрШаблон(ТекстВопроса,ИерархииСтрокой);
					Иначе
						ТекстВопроса = НСтр("ru = 'Все подчиненные объекты ремонта в текущей иерархии, 
						|а так же в иерархиях %1, 
						|переместятся в корень соответствующей иерархии. Продолжить?'");
						ТекстВопроса = СтрШаблон(ТекстВопроса,ИерархииСтрокой);
					КонецЕсли;
				Иначе
					Если Кол = 1 Тогда
						ТекстВопроса = НСтр("ru = 'Все подчиненные объекты ремонта в иерархии
						|%1, 
						|переместятся в корень соответствующей иерархии. Продолжить?'");
					Иначе
						ТекстВопроса = НСтр("ru = 'Все подчиненные объекты ремонта в иерархиях
						|%1, 
						|переместятся в корень соответствующей иерархии. Продолжить?'");
					КонецЕсли;
					ТекстВопроса = СтрШаблон(ТекстВопроса,ИерархииСтрокой);
				КонецЕсли;
				
				ПоказатьВопрос(Новый ОписаниеОповещения("ПометкаУдаленияЗавершение", ЭтотОбъект, Новый Структура("КоллекцияЭлементов, МассивДанныхСтрок, ЭтаФорма", ОбъединеннаяКоллецияЭлементов, МассивДанныхСтрок, ЭтаФорма)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
			Иначе
				
				Для каждого ТекДанные из МассивДанныхСтрок Цикл
					Если ТекДанные.ПометкаУдаления = НовоеЗначениеПометки Тогда
						Продолжить;
					КонецЕсли;
					
					ПерестроитьДерево = Истина;
					ПометитьНаУдалениеНаКлиенте(ЭтаФорма,ТекДанные, Ложь);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			
			Для каждого ТекДанные из МассивДанныхСтрок Цикл
				Если ТекДанные.ПометкаУдаления = НовоеЗначениеПометки Тогда
					Продолжить;
				КонецЕсли;
				
				КоллекцияЭлементов = ПолучитьМассивПодчиненных(ЭтаФорма,ТекДанные,Ложь);
				ПерестроитьДерево = Истина;
				ПометитьНаУдалениеНаКлиенте(ЭтаФорма,ТекДанные, КоллекцияЭлементов.Количество() > 0);
			КонецЦикла;
			
		КонецЕсли;
			
		Если ПерестроитьДерево Тогда
			торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПометкаУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КоллекцияЭлементов = ДополнительныеПараметры.КоллекцияЭлементов;
    МассивДанныхСтрок 		   = ДополнительныеПараметры.МассивДанныхСтрок;
    ЭтаФорма 		   = ДополнительныеПараметры.ЭтаФорма;
    
    Ответ = РезультатВопроса;
	 
	 Если Ответ = КодВозвратаДиалога.Да Тогда
		 
		 торо_РаботаСИерархией.ПеренестиЭлементыВКореньИерархии(КоллекцияЭлементов,ЭтаФорма.ТекСтруктураИерархии,ЭтаФорма.ИзменяетсяДокументами);
		 Для каждого ТекДанные из МассивДанныхСтрок Цикл
			 ПометитьНаУдалениеНаКлиенте(ЭтаФорма,ТекДанные, Ложь);
		 КонецЦикла;
		 
		 торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
		 
	 КонецЕсли;

КонецПроцедуры


Процедура ПометитьНаУдалениеНаКлиенте(ЭтаФорма, ТекСтрока, ЕстьПодчиненные = Ложь)
	
	ТекСтрока.ПометкаУдаления = НЕ ТекСтрока.ПометкаУдаления;
	торо_РаботаСИерархией.ПометитьНаУдалениеНаСервере(ТекСтрока.Ссылка,ЕстьПодчиненные,ТекСтрока.ПометкаУдаления,ЭтаФорма.ТекСтруктураИерархии);
	
КонецПроцедуры

Функция ПолучитьМассивПодчиненных(ЭтаФорма,ТекДанные, ПоВсемИерархиям)
	
	Если ПоВсемИерархиям Тогда
		Массив = Новый Соответствие;
		торо_РаботаСИерархией.ПолучитьМассивПодчиненныхНаСервере(ТекДанные.Ссылка,Массив,ЭтаФорма.ТекСтруктураИерархии,ЭтаФорма.ИзменяетсяДокументами, ПоВсемИерархиям);
	Иначе 
		Массив = Новый Массив;
		Если ТипЗнч(ТекДанные) = Тип("ДанныеФормыЭлементДерева") Тогда
			Для Каждого Элемент Из ТекДанные.ПолучитьЭлементы() Цикл
				Массив.Добавить(Элемент.Ссылка);
			КонецЦикла;
		Иначе
			торо_РаботаСИерархией.ПолучитьМассивПодчиненныхНаСервере(ТекДанные.Ссылка,Массив,ЭтаФорма.ТекСтруктураИерархии,ЭтаФорма.ИзменяетсяДокументами, ПоВсемИерархиям);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

// ПометкаНаУдаление--


// УдалениеИзИерархии++

Процедура УдалитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Форма = ДополнительныеПараметры.Форма;
	МассивДанныхСтрок = ДополнительныеПараметры.МассивДанныхСтрок;
	ТекСтруктураИерархии = Форма.ТекСтруктураИерархии;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЭтоОсновнаяИерархия = торо_РаботаСИерархией.ЭтоОсновнаяИерархия(ТекСтруктураИерархии);
		
		ТаблицаДляОбработки = Новый Массив;
		//ТаблицаДляОбработки.Колонки.Добавить("ТекДанные");
		//ТаблицаДляОбработки.Колонки.Добавить("МожноУдалять");
		//ТаблицаДляОбработки.Колонки.Добавить("Пропустить");
		
		Отказ = Ложь;
		
		Для каждого ТекущиеДанные из МассивДанныхСтрок Цикл
			
			ТекДанные = Неопределено;
			Если Форма.ТекущийЭлемент.Имя = "СписокОбъектов" Тогда
				
				Если ТекущиеДанные.ЭтоРодитель тогда
					ТекДанные = Форма.Элементы.Дерево.ТекущиеДанные;
					ПолучитьТекстрокуДереваПоТекСтрокеСписка(ТекДанные, ТекущиеДанные.Ссылка);	 								
				Иначе;
					КоллекцияЭлементов =  Форма.Элементы.Дерево.ТекущиеДанные.ПолучитьЭлементы();
					Для Каждого ЭлементКоллекции из КоллекцияЭлементов Цикл
						Если ЭлементКоллекции.Ссылка = ТекущиеДанные.Ссылка Тогда
							ТекДанные = ЭлементКоллекции; 
						КонецЕсли;    					
					КонецЦикла; 
				КонецЕсли;
				
			Иначе                  					
				ТекДанные = ТекущиеДанные;
			КонецЕсли;
			
			Если ТекДанные <> Неопределено Тогда
				
				МожноУдалять = торо_РаботаСИерархией.ПолучитьМассивИерархийОР(ТекДанные.Ссылка,ТекСтруктураИерархии).Количество() > 0;
				НовСтрДляОбработки = Новый Структура("ТекДанные, МожноУдалять, Пропустить", ТекДанные, МожноУдалять, Ложь);
				ТаблицаДляОбработки.Добавить(НовСтрДляОбработки);
				
				Если НЕ НовСтрДляОбработки.МожноУдалять И ЭтоОсновнаяИерархия Тогда
					ШаблонСообщения = НСтр("ru = 'Объект ремонта ""%1"" не может быть удалён из данной иерархии так как используется только в ней.
					|	Для удаления пометьте этот объект ремонта на удаление или добавьте его в другую иерархию.'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.Ссылка);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
				КонецЕсли;
			КонецЕсли; 
			
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		
		МассивУдаляемых = Новый Массив;
		МассивПеремещаемых = Новый Массив;
		
		Для каждого СтрокаДляОбработки из ТаблицаДляОбработки Цикл
			ТекДанные = СтрокаДляОбработки.ТекДанные;
			
			Если СтрокаДляОбработки.МожноУдалять ИЛИ Форма.ИзменяетсяДокументами ИЛИ торо_РаботаСИерархией.ПометитьОбъектРемонтаНаСервере(ТекДанные.Ссылка) Тогда
				КоллекцияЭлементов = ТекДанные.ПолучитьЭлементы();
				
				Если МассивУдаляемых.Найти(ТекДанные.Ссылка) = Неопределено Тогда
					МассивУдаляемых.Добавить(ТекДанные.Ссылка);
				КонецЕсли;
				
				Если МассивПеремещаемых.Найти(ТекДанные.Ссылка) = Неопределено Тогда
					МассивПеремещаемых.Добавить(ТекДанные.Ссылка);
				КонецЕсли;
				Для каждого Элем Из КоллекцияЭлементов Цикл
					Если МассивПеремещаемых.Найти(Элем.Ссылка) = Неопределено Тогда
						МассивПеремещаемых.Добавить(Элем.Ссылка);
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				СтрокаДляОбработки.Пропустить = Истина;
			КонецЕсли;		
			
		КонецЦикла;
		
		торо_РаботаСИерархией.ПеренестиЭлементыВКореньИерархии(МассивПеремещаемых, ТекСтруктураИерархии, Форма.ИзменяетсяДокументами, МассивУдаляемых);
		
		Для каждого СтрокаДляОбработки из ТаблицаДляОбработки Цикл
			ТекДанные = СтрокаДляОбработки.ТекДанные;
				
			Если СтрокаДляОбработки.Пропустить <> Истина Тогда
				торо_РаботаСИерархией.УдалитьПорядокЭлементаИзРегистра(ТекДанные.Ссылка,ТекСтруктураИерархии);
				торо_РаботаСИерархией.ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекДанные.Ссылка, ТекСтруктураИерархии, Ложь);
				торо_РаботаСИерархией.ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекДанные.РодительИерархии, ТекСтруктураИерархии, Неопределено);
			КонецЕсли; 
			
		КонецЦикла;
	
		торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(Форма,"Дерево","Дерево");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьТекстрокуДереваПоТекСтрокеСписка(ТекСтрокаДерева, Ссылка)
	
	Если ТекСтрокаДерева.Ссылка = Ссылка Тогда 
		Возврат;
	Иначе
		ТекСтрокаДерева = ТекСтрокаДерева.ПолучитьРодителя();
		ПолучитьТекстрокуДереваПоТекСтрокеСписка(ТекСтрокаДерева, Ссылка);
	КонецЕсли;		
	
КонецПроцедуры

// УдалениеИзИерархии--

// ИзменениеПоложенияВИерархии++

Процедура ИзменитьПоложениеВИерархииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеЗначение = Результат;
		
	ЭтаФорма = ДополнительныеПараметры.ЭтаФорма;
	Элементы = ЭтаФорма.Элементы;
	
	МассивВыбранныхСтрокВДереве = Новый Массив;
	
	Если Элементы.найти("СписокОбъектов") <> Неопределено
		И ЭтаФорма.ТекущийЭлемент = Элементы.СписокОбъектов Тогда
		
		МассивСтрокДерева = Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, ЭтаФорма.Дерево.ПолучитьЭлементы());
		
		Для каждого ТекИдентификатор из Элементы.СписокОбъектов.ВыделенныеСтроки Цикл
			ПеретаскиваемыйЭлемент = ЭтаФорма.СписокОбъектов.НайтиПоИдентификатору(ТекИдентификатор);
			Если ПеретаскиваемыйЭлемент <> Неопределено Тогда
				ТекДанные = НайтиВМассивеСтрокПоРеквизиту(МассивСтрокДерева, "Ссылка", ПеретаскиваемыйЭлемент.Ссылка);
				Если ТекДанные = Неопределено Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не удалось найти ОР в дереве!. Перемещение невозможно.'");
					Сообщение.Сообщить(); 
					Возврат;
				КонецЕсли;
				МассивВыбранныхСтрокВДереве.Добавить(ТекДанные);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для каждого ТекИдентификатор из Элементы.Дерево.ВыделенныеСтроки Цикл 
			СтрокаДерева = ЭтаФорма.Дерево.НайтиПоИдентификатору(ТекИдентификатор);
			Если СтрокаДерева <> Неопределено Тогда
				МассивВыбранныхСтрокВДереве.Добавить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	
	Если ЭтаФорма.ИзменяетсяДокументами Тогда
		
		МассивОбъектов = Новый Массив;
		Для каждого ТекДанные из МассивВыбранныхСтрокВДереве Цикл
      	МассивОбъектов.Добавить(ТекДанные.Ссылка);
		КонецЦикла;
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("СтруктураИерархии", ЭтаФорма.ТекСтруктураИерархии);
		ПараметрыОткрытия.Вставить("ОбъектИерархии"   , МассивОбъектов);
		ПараметрыОткрытия.Вставить("РодительИерархии" , ВыбранноеЗначение);
				
		ОткрытьФорму("Документ.торо_ИзменениеПоложенияВСтруктуреИерархии.ФормаОбъекта",ПараметрыОткрытия,ЭтаФорма);
		
	Иначе
		
		Для каждого ТекДанные из МассивВыбранныхСтрокВДереве Цикл
			
			Если ПеремещениеПриведетКЗацикливанию(ТекДанные, ВыбранноеЗначение) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Перемещение объекта ремонта приведет к зацикливанию. Перемещение невозможно.'");
				Сообщение.Сообщить(); 
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ТекДанные из МассивВыбранныхСтрокВДереве Цикл
			РодительИерархии = ТекДанные.РодительИерархии;
			торо_РаботаСИерархией.ИзменитьПоложениеВИерархииЗавершениеНаСервере(ТекДанные.Ссылка, ЭтаФорма.ТекСтруктураИерархии, ВыбранноеЗначение, РодительИерархии);
		КонецЦикла;
		
		ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
		
	КонецЕсли;
	
КонецПроцедуры

// ИзменениеПоложенияВИерархии--

#КонецОбласти