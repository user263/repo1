
#Область ПрограммныйИнтерфейс

#Область ПроцедурыИФункцииУстановкиСтатусовДляМассиваДокументов

// Устанавливает статус для списка документов
//
// ВАЖНО. При использования процедуры для каждого типа документа из массива должны быть объявлены функции.
// В модуле менеджера документа
// 		Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
// 		Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
// В модуле объекта документа
// 		Функция УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Экспорт.
//
// Параметры:
// 		МассивДокументов - Массив - Массив документов
// 		НовыйСтатус - Строка - Имя нового статуса для документов
// 		ДополнительныеПараметры - Структура - Структура дополнительных параметров.
//
// Возвращаемое значение:
// 		Число - Количество документов у которых был изменен статус.
//
Функция УстановитьСтатусДокументов(Знач МассивДокументов, Знач НовыйСтатус, Знач ДополнительныеПараметры=Неопределено) Экспорт
	
	// Получение шаблонов сообщений стандартных ошибок
	ШаблонОшибкиСтатусСовпадает   = НСтр("ru='Документу %Документ% уже присвоен статус ""%Статус%""'");
	ШаблонОшибкиНеПроведен        = НСтр("ru='Документ %Документ% не проведен. Невозможно изменить статус'");
	ШаблонОшибкиПомеченНаУдаление = НСтр("ru='Документ %Документ% помечен на удаление. Невозможно изменить статус'");
	ШаблонОшибкиЗаблокировать     = НСтр("ru='Не удалось заблокировать %Документ%. %ОписаниеОшибки%'");
	ШаблонОшибкиЗаписать          = НСтр("ru='Не удалось записать %Документ%. %ОписаниеОшибки%'");
	
	// Получение соответствие типов документов из массива документов разных типов
	СоответствиеТипов = ОбщегоНазначенияУТ.РазложитьМассивСсылокПоТипам(МассивДокументов);
	
	КоличествоОбработанных = 0;
	Для Каждого СоставДокументов Из СоответствиеТипов Цикл
		
		// Получение менеджера документов данного типа
		МенеджерДокументов = Документы[Метаданные.НайтиПоТипу(СоставДокументов.Ключ).Имя];
		
		// Получение массива ссылок документов данного типа
		МассивСсылок = СоставДокументов.Значение;
		
		// Формирование запроса
		Запрос = МенеджерДокументов.СформироватьЗапросПроверкиПриСменеСтатуса(МассивСсылок, НовыйСтатус, ДополнительныеПараметры);
		УстановитьПривилегированныйРежим(Истина);
		Результат = Запрос.Выполнить();
		УстановитьПривилегированныйРежим(Ложь);
		Если Результат.Пустой() Тогда
			Возврат 0;
		КонецЕсли;
		
		// Цикл обхода выборки
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			// Универсальные проверки
			Если Выборка.ПометкаУдаления Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиПомеченНаУдаление, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;

			Если Не Выборка.Проведен Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрЗаменить(ШаблонОшибкиНеПроведен, "%Документ%", Выборка.Представление), Выборка.Ссылка);
				Продолжить;
			КонецЕсли;

			Если Выборка.СтатусСовпадает Тогда

				ТекстОшибки = СтрЗаменить(ШаблонОшибкиСтатусСовпадает, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Статус%", Выборка.ПредставлениеНовогоСтатуса);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;

			КонецЕсли;
			
			// Проверки уникальные для каждого из типов документов
			Если Не МенеджерДокументов.ПроверкаПередСменойСтатуса(Выборка, НовыйСтатус, ДополнительныеПараметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Захват объекта для редактирования
			Попытка
				ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаблокировать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
				Продолжить;
			КонецПопытки;
			
			// Получение объекта документа
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			
			// Установка статуса документа
			Если Не Объект.УстановитьСтатус(НовыйСтатус, ДополнительныеПараметры) Тогда
				Продолжить;
			КонецЕсли;
			
			// Запись документа
			Попытка
				Объект.Записать(?(Выборка.ЗаписьПроведением, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
				КоличествоОбработанных = КоличествоОбработанных + 1;
			Исключение
				ТекстОшибки = СтрЗаменить(ШаблонОшибкиЗаписать, "%Документ%", Выборка.Представление);
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ссылка);
			КонецПопытки
			
		КонецЦикла; // выборки документов данного типа
		
	КонецЦикла; // обхода соответствия типов
	
	Возврат КоличествоОбработанных;
	
КонецФункции // УстановитьСтатусДокументов()

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗначенияРеквизитовОбъекта

// см. ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
//
Функция ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты) Экспорт
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Реквизиты);
	
КонецФункции

// см. ОбщегоНазначения.ЗначениеРеквизитаОбъекта()
//
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#Область ПраваПользователей

Функция ЭтоПолноправныйПользователь(Пользователь = Неопределено,
                                    ПроверятьПраваАдминистрированияСистемы = Ложь,
                                    УчитыватьПривилегированныйРежим = Истина) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(
		Пользователь,
		ПроверятьПраваАдминистрированияСистемы,
		УчитыватьПривилегированныйРежим);
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

// Актуализирует значения полей КИ из ее представления.
//
//  Параметры:
//		АдресПредставление - представление КИ
//		АдресЗначенияПолей - служебная информация, значения полей КИ
//		ТипКИ			   - тип контактной информации (Перечисления.ТипыКонтактнойИнформации).
//
Процедура ЗаполнитьЗначенияПолейКИПоПредставлению(Представление, ЗначенияПолей, ТипКИ = Неопределено) Экспорт
	
	ОбщегоНазначенияУТ.ЗаполнитьЗначенияПолейКИПоПредставлению(Представление, ЗначенияПолей, ТипКИ);
	
КонецПроцедуры

#КонецОбласти

#Область ПолнотекствовыйПоиск
// Определяет признак использования полнотекстового поиска, исходя из значения переданной ФО
// и настройки использования для базы данных в целом.
//
// Параметры:
//	ИмяФОИспользованияППД - Строка - имя учитваемой функциональной опции.
//
// Возвращаемое значение:
//	Булево - Истина, если используется, Ложь в обратном случае.
//
Функция ИспользуетсяПолнотекстовыйПоиск(ИмяФОИспользованияППД) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяФОИспользованияППД)
		И ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
	
КонецФункции

#КонецОбласти

#Область СпискиВыбора

Процедура ПолучитьСписокВыбораПеречисления(ИмяПеречисления, ДанныеВыбора, Параметры, ИсключаемыеЗначения) Экспорт
	
	ОбщегоНазначенияУТ.ПолучитьСписокВыбораПеречисления(
			ИмяПеречисления,
			ДанныеВыбора,
			Параметры,
			ИсключаемыеЗначения);
			
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхВыбора


Процедура ОбработкаПолученияДанныхВыбораПВХСтатьиРасходов(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Отбор.Свойство("ХозяйственнаяОперация")
	 И ЗначениеЗаполнено(Параметры.СтрокаПоиска) Тогда
	 
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиРасходов.Ссылка КАК Ссылка,
		|	СтатьиРасходов.Наименование КАК Представление
		|ИЗ
		|	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
		|ГДЕ
		|	СтатьиРасходов.Наименование ПОДОБНО &СтрокаПоиска
		|	И СтатьиРасходов.Ссылка <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.СебестоимостьПродаж)
		|	И (Не СтатьиРасходов.ОграничитьИспользование
		|	ИЛИ СтатьиРасходов.Ссылка В (
		|		ВЫБРАТЬ
		|			ДоступныеОперации.Ссылка
		|		ИЗ
		|			ПланВидовХарактеристик.СтатьиРасходов.ДоступныеХозяйственныеОперации КАК ДоступныеОперации
		|		ГДЕ
		|			ДоступныеОперации.ХозяйственнаяОперация = &ХозяйственнаяОперация
		|		)
		|	)
		|");
		Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
		Запрос.УстановитьПараметр("ХозяйственнаяОперация", Параметры.Отбор.ХозяйственнаяОперация);
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Представление);
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
