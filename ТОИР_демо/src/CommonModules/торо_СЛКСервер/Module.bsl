////////////////////////////////////////////////////////////////////////////////
// торо_СЛКСервер: методы, для работы с защищенными обработками
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Функция, возвращает менеджер объектов. 
//
// У модуля установлен режим повторного использования возращаемых объектов 
// "на время сеанса". Это значит, что  в рамках текущего сеанса после первого 
// вызова функции менеджер объектов будет сохранен и при повторных вызовах функции 
// будет возвращаться его сохраненнное значение.
//
// Код функции при этом выполняться не будет.
//
// Возвращаемое значение:
//		ВнешняяОбработка - менеджер объектов.
//Функция Получить() Экспорт
//	
//	Возврат торо_СЛКПовторноеИспользование.ПолучитьМенеджерОбъектов();
//		
//КонецФункции

 // Функция предназначена для получения номера версии обработки.
 //
 // Параметры:
 //  Имя		 - Строка - Имя обработки
 //  Серия	 - Строка - Серия ключа защиты.
 // Возвращаемое значение:
 //  Строка - Версия защищенной обработки.
Функция Версия_Session(Имя,Серия = "28DD") Экспорт

	Обработка = слкМенеджерЗащиты.СоздатьОбъект(Серия, Имя);
	Если Обработка = неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Обработка.Версия();
	
КонецФункции


// Функция создания защищенного объекта.
//
// Параметры:
//		Имя - Строка - Имя объекта.
// Возвращаемое значение:
//		ВнешняяОбработка - объект обработки.
//Функция СоздатьОбъект(Имя) Экспорт
//	Возврат удалить_торо_ОбщийМодульСЛК.МенеджерОбъектов().СоздатьОбъект(Имя);
//КонецФункции

// Функция подключает защищенную обработку.
//
// Возвращаемое значение:
//		ВнешняяОбработка - обработка работы с мнемосхемами.
Функция ПодключитьЗащищеннуюОбработку_Session() Экспорт
	
	ОбработкаЗащита = слкМенеджерЗащиты.СоздатьОбъект("28DD", "торо_ЗащитаРаботаСМнемосхемами");
	Если ОбработкаЗащита = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ОбработкаЗащита;
	
КонецФункции

// Функция выполняет заполнение таблицы данных плана-графика ППР.
//
// Параметры:
//		Имя - Строка - Имя внешней обработки.
//		СтруктураДанных - Структура - Структура данных.
//		Серия - Строка - серия ключа защиты.
//		СсылкаНаППР - ДокументСсылка.торо_ПланГрафикППР - ссылка на документ ППР.
//		ВидРемонта - СправочникСсылка.торо_ВидыРемонта - вид ремонта.
//		ТаблицаНормативов - ТаблицаЗначений - таблица нормативов.
//
//	Возвращаемое значение:
//		ТаблицаЗначений - таблица ремонтов.
Функция ЗаполнитьПланГрафикППР_Session(Имя, СтруктураДанных, Серия = "28DD", СсылкаНаППР = Неопределено,ВидРемонта = Неопределено,ТаблицаНормативов = Неопределено) Экспорт

	Обработка = Неопределено;
	
	Если Метаданные.Отчеты.Найти(Имя) <> Неопределено Тогда
		Обработка = Отчеты[Имя].Создать();
	ИначеЕсли Метаданные.Обработки.Найти(Имя) <> Неопределено Тогда
		Обработка = Обработки[Имя].Создать();
	Иначе
		Обработка = слкМенеджерЗащиты.СоздатьОбъект(Серия, имя);
		Если Обработка = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли; 
		
	Если ТипЗнч(СсылкаНаППР) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		
		Возврат Обработка.ЗаполнитьПланГрафикРегламентныхМероприятий(СтруктураДанных.ТаблицаПланРемонтов,
		СтруктураДанных.ТаблицаОбъектыРемонта, СтруктураДанных.ДатаПланирования,
		СтруктураДанных.ПериодичностьДетализации, СтруктураДанных.КоличествоПериодов,,, СсылкаНаППР);

	ИначеЕсли СсылкаНаППР = Неопределено Тогда
		                  
		Возврат Обработка.ЗаполнитьПланГрафикППР(СтруктураДанных.ТаблицаПланРемонтов,
						СтруктураДанных.ТаблицаОбъектыРемонта, СтруктураДанных.ТаблицаЦепочки, СтруктураДанных.ДатаПланирования,
						СтруктураДанных.ПериодичностьДетализации, СтруктураДанных.КоличествоПериодов,,,
						Неопределено, СтруктураДанных.ВРНачалоЦикла, СтруктураДанных.ТаблицаНормативов,,,,,
						СтруктураДанных.ТабПараметрыНаработкиОбъектовРемонта,,,, СтруктураДанных.ВизуализацияТипОР, СтруктураДанных.ДатаОкончанияВизуализации);
		
	Иначе
						  // ЗаполнитьПланГрафикППР
		Возврат Обработка.ЗаполнитьПланГрафикППР(СтруктураДанных.ТаблицаПланРемонтов,
		СтруктураДанных.ТаблицаОбъектыРемонта, СтруктураДанных.ТаблицаЦепочки, СтруктураДанных.ДатаПланирования,
		СтруктураДанных.ПериодичностьДетализации, СтруктураДанных.КоличествоПериодов,,, СсылкаНаППР);
		
	КонецЕсли;
	
						
КонецФункции

#КонецОбласти