
#Область ПрограммныйИнтерфейс

// Возвращает свойства типов анализа - доступные типы диаграмм, 
// доступность объекта анализа, требуется ли оформление типа анализа.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица с колонками ТипАнализа, ТипДиаграммы.
Функция ПолучитьТаблицуСоответствиТиповАнализаИТиповДиаграмм() Экспорт
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("ТипАнализа");
	ТаблицаСоответствий.Колонки.Добавить("ТипДиаграммы");
	
	ТипыСравнений = Перечисления.торо_ТипыАнализа;
	ТипыДиаграмм = Перечисления.торо_ТипыДиаграммПоказателей;
	
	// Динамика изменений
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.График;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикПоШагам;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ДинамикаИзменения;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	
	// Покомпонентное сравнение (динамика)
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.График;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСНакоплением;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСОбластями;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСОбластямиИНакоплением;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикСОбластямиНормированный;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГрафикПоШагам;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяОбъемная;

	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплением;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеДинамика;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемОбъемная;
	
	// Покомпонентное сравнение (структура)
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяОбъемная;

	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплением;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаГоризонтальнаяОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаНормированнаяГоризонтальнаяОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаСНакоплениемГоризонтальнаяОбъемная;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ПокомпонентноеСравнениеСтруктура;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Круговая;
	
	// Текущее состояние
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.ИзмерениеТекущегоСостояния;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Измерительная;
	
	// Сравнение с прошлым периодом
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.Гистограмма;
	
	НовоеСравнение = ТаблицаСоответствий.Добавить();
	НовоеСравнение.ТипАнализа = ТипыСравнений.СравнениеСПрошлымПериодом;
	НовоеСравнение.ТипДиаграммы = ТипыДиаграмм.ГистограммаОбъемная;
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

// Выделяет доступные аналитики и ресурсы из показателей
// Параметры:
//  Показатель - СправочникСсылка.торо_ПоказателиKPI - показатель KPI.
//  ДоступныеЗначенияАнализа - СписокЗначений - выходной параметр, список доступных значений анализа.
//  ДоступныеОбъектыАнализа - СписокЗначений - выходной параметр, список доступных объектов анализа.
Процедура ЗаполнитьДоступныеЗначенияИОбъектыАнализа(Показатель, ДоступныеЗначенияАнализа, ДоступныеОбъектыАнализа)  Экспорт
	
	Если Показатель.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.ВнешнийПоказатель Тогда
		ДобавитьЗначениеВСписокБезДублей(ДоступныеОбъектыАнализа, "Организация", "Организация");
		Если Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения 
			ИЛИ Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
			ДобавитьЗначениеВСписокБезДублей(ДоступныеОбъектыАнализа, "Подразделение", "Подразделение");
		КонецЕсли;
		
		Если Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
			ДобавитьЗначениеВСписокБезДублей(ДоступныеОбъектыАнализа, "ОбъектРемонта", "ОбъектРемонта");
		КонецЕсли;
		
		ДобавитьЗначениеВСписокБезДублей(ДоступныеЗначенияАнализа, "ЗначениеОборот", "ЗначениеОборот");
		ДобавитьЗначениеВСписокБезДублей(ДоступныеЗначенияАнализа, "ЗначениеКонечныйОстаток", "ЗначениеКонечныйОстаток");
		
	ИначеЕсли Показатель.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.СКД Тогда
		
		СКД = Показатель.СхемаКомпоновкиДанных.Получить();
		Если ТипЗнч(СКД) = Тип("СхемаКомпоновкиДанных") Тогда
			КоллекцияВыбранныхПолей = СКД.ВариантыНастроек.Основной.Настройки.Выбор.Элементы;
			Для каждого ВыбранноеПоле из КоллекцияВыбранныхПолей Цикл
				ИмяПоля = Строка(ВыбранноеПоле.Поле);
				ПолеИтога = СКД.ПоляИтога.Найти(ИмяПоля);
				Если ПолеИтога <> Неопределено Тогда
					ДобавитьЗначениеВСписокБезДублей(ДоступныеЗначенияАнализа, ИмяПоля, ИмяПоля);
				Иначе
					ДобавитьЗначениеВСписокБезДублей(ДоступныеОбъектыАнализа, ИмяПоля, ИмяПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Показатель.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.Формула Тогда
		
		ДобавитьЗначениеВСписокБезДублей(ДоступныеЗначенияАнализа, "Значение", "Значение");
		
	КонецЕсли;	
	
КонецПроцедуры

// Заполняет таблицу значений операндами из формулы.
//
// Параметры:
//  ПоказательРодитель - СправочникСсылка.торо_ПоказателиKPI - показатель, к которму относится формула.
//  ТекстФормулы - Строка - текст формулы.
//  Рекурсивно - Булево - разбирать вложенные формулы.
//  Уровень - Число - текущий уровень рекурсии.
//  ТаблицаОперандов - ТаблицаЗначений - см. возвращаемое значение.
//
// Возвращаемое значение:
//	 ТаблицаЗначений - с колонками
//   - ПоказательРодитель - СправочникСсылка.торо_ПоказателиKPI, показатель, формула которого разбирается.
//   - Уровень - 1 для операнда из переданного текста формулы; 2,3 и т.д. для операндов, 
//		полученных из вложенных формул при рекурсивной обработке.
//	  - ТекстОперанда - строка, представление операнда, включая квадратные скобки (Например, "[НаработкаОР.ЗначениеОборот]");
//   - ИмяПоказателя - строка, значение реквизита ИдентификаторДляФормул, выделенное из операнда ("НаработкаОР");
//   - ИмяРесурса - строка, значение ресурса, выделенное из операнда, если оно есть ("ЗначениеОборот");
//   - Показатель - СправочникСсылка.торо_ПоказателиKPI, элемент, найденный по значению ИмяПоказателя.
//
Функция ПолучитьТаблицуОперандовФормулы(ПоказательРодитель, Знач ТекстФормулы, Рекурсивно = Ложь, Уровень = 1, ТаблицаОперандов = Неопределено) Экспорт
	
	Если ТаблицаОперандов = Неопределено Тогда
		ТаблицаОперандов = Новый ТаблицаЗначений;
		ТаблицаОперандов.Колонки.Добавить("ПоказательРодитель", Новый ОписаниеТипов("СправочникСсылка.торо_ПоказателиKPI"));
		ТаблицаОперандов.Колонки.Добавить("Уровень", Новый ОписаниеТипов("Число"));
		ТаблицаОперандов.Колонки.Добавить("ТекстОперанда", Новый ОписаниеТипов("Строка"));
		ТаблицаОперандов.Колонки.Добавить("ИмяПоказателя", Новый ОписаниеТипов("Строка"));
		ТаблицаОперандов.Колонки.Добавить("ИмяРесурса", Новый ОписаниеТипов("Строка"));
		ТаблицаОперандов.Колонки.Добавить("Показатель", Новый ОписаниеТипов("СправочникСсылка.торо_ПоказателиKPI"));
	КонецЕсли;
	
	НачальнаяПозицияПоиска = 1;
	Пока НачальнаяПозицияПоиска < СтрДлина(ТекстФормулы) Цикл
		ПозицияОткрывающейСкобки = СтрНайти(ТекстФормулы, "[", НаправлениеПоиска.СНачала, НачальнаяПозицияПоиска);
		Если ПозицияОткрывающейСкобки = 0 Тогда
			Прервать;
		КонецЕсли;
		
		ПозицияЗакрывающейСкобки = СтрНайти(ТекстФормулы, "]", НаправлениеПоиска.СНачала, ПозицияОткрывающейСкобки);
		Если ПозицияЗакрывающейСкобки = 0 Тогда
			Прервать;
		КонецЕсли;
		
		НачальнаяПозицияПоиска = ПозицияЗакрывающейСкобки + 1;
				
		ТекстОперанда = Сред(ТекстФормулы, ПозицияОткрывающейСкобки, ПозицияЗакрывающейСкобки-ПозицияОткрывающейСкобки+1);
		ТекстОперандаБезСкобок = Сред(ТекстФормулы, ПозицияОткрывающейСкобки+1, ПозицияЗакрывающейСкобки-ПозицияОткрывающейСкобки-1);
		
		Если СтрДлина(ТекстОперандаБезСкобок) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияТочки = СтрНайти(ТекстОперандаБезСкобок, ".");
		Если ПозицияТочки = 0 Тогда
			ИмяПоказателя = ТекстОперандаБезСкобок;
			ИмяРесурса = "";
		Иначе
			ИмяПоказателя = Лев(ТекстОперандаБезСкобок, ПозицияТочки-1);
			ИмяРесурса = Сред(ТекстОперандаБезСкобок, ПозицияТочки+1, СтрДлина(ТекстОперандаБезСкобок)-ПозицияТочки);
		КонецЕсли;
		
		НоваяСтрока = ТаблицаОперандов.Добавить();
		НоваяСтрока.ПоказательРодитель = ПоказательРодитель;
		НоваяСтрока.Уровень = Уровень;
		НоваяСтрока.ТекстОперанда = ТекстОперанда;
		НоваяСтрока.ИмяПоказателя = ИмяПоказателя;
		НоваяСтрока.ИмяРесурса = ИмяРесурса;
		НоваяСтрока.Показатель = ПолучитьПоказательПоИдентификаторуДляФормул(ИмяПоказателя);
		
		Если Рекурсивно И ЗначениеЗаполнено(НоваяСтрока.Показатель) 
			И НоваяСтрока.Показатель.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.Формула Тогда
			ПолучитьТаблицуОперандовФормулы(НоваяСтрока.Показатель, НоваяСтрока.Показатель.ТекстФормулы, Рекурсивно, Уровень+1, ТаблицаОперандов);
		КонецЕсли;

	КонецЦикла;
	
	Возврат ТаблицаОперандов;
	
КонецФункции

// Устанавливает параметры, которые передавались в отчет-расшифровку (актуально для универсального отчета).
//
// Параметры:
//  ОтчетОбъект - ОтчетОбъект - отчет.
//  Форма - УправляемаяФорма - форма отчета.
//  НовыеПользовательскиеНастройкиКД - НастройкиКомпоновкиДанных - настройки отчета.
//
Процедура ОтчетРасшифровка_ПриЗагрузкеПользовательскихНастроекНаСервере(ОтчетОбъект, Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	
	Если Строка(ОтчетОбъект) = "ОтчетОбъект.УниверсальныйОтчет" Тогда
		
		НастройкиОтчета = Форма.НастройкиОтчета;
		НастройкиКомпоновщика = Форма.Отчет.КомпоновщикНастроек.Настройки;
		
		Если НастройкиОтчета.Свойство("ПараметрыОтчета") Тогда
			Для каждого Элемент из НовыеПользовательскиеНастройкиКД.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если НастройкиОтчета.ПараметрыОтчета.Свойство(ИмяПараметра) Тогда
						Значение = НастройкиОтчета.ПараметрыОтчета[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Элемент из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если НастройкиОтчета.ПараметрыОтчета.Свойство(ИмяПараметра) Тогда
						Значение = НастройкиОтчета.ПараметрыОтчета[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			Если НастройкиОтчета.ПараметрыОтчета.Свойство("ПараметрыОтбора") 
				И ТипЗнч(НастройкиОтчета.ПараметрыОтчета.ПараметрыОтбора) = Тип("Структура") Тогда
				ОтчетыСервер.УстановитьФиксированныеОтборы(НастройкиОтчета.ПараметрыОтчета.ПараметрыОтбора, НастройкиКомпоновщика, Форма.НастройкиОтчета);
			КонецЕсли;
			
		КонецЕсли;
		
		НовыеПользовательскиеНастройкиКД.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
		НастройкиКомпоновщика.ДополнительныеСвойства.Вставить("ОтчетИнициализирован", Ложь);
		
		Попытка
			НовыеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НастройкиКомпоновщика);
		Исключение
			НовыеНастройкиXML = Неопределено;
		КонецПопытки;
		Форма.НастройкиОтчета.Вставить("НовыеНастройкиXML", НовыеНастройкиXML);
		
		Попытка
			НовыеПользовательскиеНастройкиXML = ОбщегоНазначения.ЗначениеВСтрокуXML(НовыеПользовательскиеНастройкиКД);
		Исключение
			НовыеПользовательскиеНастройкиXML = Неопределено;
		КонецПопытки;
		Форма.НастройкиОтчета.Вставить("НовыеПользовательскиеНастройкиXML", НовыеПользовательскиеНастройкиXML);
		
	Иначе
		
		НастройкиОтчета = Форма.НастройкиОтчета;
		НастройкиКомпоновщика = Форма.Отчет.КомпоновщикНастроек.Настройки;
		ПользовательскиеНастройкиКомпоновщика = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		
		Если НастройкиОтчета.Свойство("ПараметрыОтчета")
			И НастройкиОтчета.ПараметрыОтчета.Свойство("ПараметрыОтбора") Тогда
			ПараметрыОтбора = НастройкиОтчета.ПараметрыОтчета.ПараметрыОтбора;
			
			Для каждого Элемент из НовыеПользовательскиеНастройкиКД.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
						Значение = ПараметрыОтбора[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Элемент из ПользовательскиеНастройкиКомпоновщика.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
						Значение = ПараметрыОтбора[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для каждого Элемент из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
				Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					ИмяПараметра = Строка(Элемент.Параметр);
					Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
						Значение = ПараметрыОтбора[ИмяПараметра];
						
						Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
							Значение = Новый Массив(Значение);
						КонецЕсли;
						Если ТипЗнч(Значение) = Тип("Массив") Тогда
							Список = Новый СписокЗначений;
							Список.ЗагрузитьЗначения(Значение);
							Значение = Список;
						КонецЕсли;
						
						Элемент.Использование = Истина;
						Элемент.Значение = Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			торо_ПоказателиKPI.УстановитьФиксированныеОтборы(ПараметрыОтбора, НастройкиКомпоновщика, Форма.НастройкиОтчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает параметры, которые передавались в отчет-расшифровку. 
//
// Параметры:
//  ОтчетОбъект - ОтчетОбъект - отчет.
//  Форма - УправляемаяФорма - форма отчета.
//  НовыеНастройкиКД - НастройкиКомпоновкиДанных - настройки отчета.
//
Процедура ОтчетРасшифровка_ПриЗагрузкеВариантаНаСервере(ОтчетОбъект, Форма, НовыеНастройкиКД) Экспорт
	
	НастройкиОтчета = Форма.НастройкиОтчета;
	НастройкиКомпоновщика = Форма.Отчет.КомпоновщикНастроек.Настройки;
	НовыеПользовательскиеНастройкиКД = Форма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Если НастройкиОтчета.Свойство("ПараметрыОтчета")
		И НастройкиОтчета.ПараметрыОтчета.Свойство("ПараметрыОтбора") Тогда
		ПараметрыОтбора = НастройкиОтчета.ПараметрыОтчета.ПараметрыОтбора;
		
		Для каждого Элемент из НовыеПользовательскиеНастройкиКД.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ИмяПараметра = Строка(Элемент.Параметр);
				Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
					Значение = ПараметрыОтбора[ИмяПараметра];
					
					Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
						Значение = Новый Массив(Значение);
					КонецЕсли;
					Если ТипЗнч(Значение) = Тип("Массив") Тогда
						Список = Новый СписокЗначений;
						Список.ЗагрузитьЗначения(Значение);
						Значение = Список;
					КонецЕсли;
					
					Элемент.Использование = Истина;
					Элемент.Значение = Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Элемент из НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
				ИмяПараметра = Строка(Элемент.Параметр);
				Если ПараметрыОтбора.Свойство(ИмяПараметра) Тогда
					Значение = ПараметрыОтбора[ИмяПараметра];
					
					Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
						Значение = Новый Массив(Значение);
					КонецЕсли;
					Если ТипЗнч(Значение) = Тип("Массив") Тогда
						Список = Новый СписокЗначений;
						Список.ЗагрузитьЗначения(Значение);
						Значение = Список;
					КонецЕсли;
					
					Элемент.Использование = Истина;
					Элемент.Значение = Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		торо_ПоказателиKPI.УстановитьФиксированныеОтборы(ПараметрыОтбора, НастройкиКомпоновщика, Форма.НастройкиОтчета);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет справочники "Показатели KPI", "Варианты анализа показателей KPI"
// по заданному шаблону.
// Если ранее демонстрационные показатели уже были созданы, то восстанавливаются стандартные настройки.
// Процедура используется только при обновлении информационной базы, первом запуске
// и может быть вызвана из формы списка справочника "Показатели KPI".
//
Процедура ВосстановитьПоставляемуюМодельПоказателей() Экспорт
	
	КаталогВременныхФайлов = СтандартныеПодсистемыСервер.СоздатьКаталогВременныхФайлов("toir_kpitmp");
	
	// Извлечение файла модели
	АрхивПолноеИмя = КаталогВременныхФайлов + "KPIModelData.zip";
	Попытка
		ДвоичныеДанные = ПолучитьОбщийМакет("торо_ПоставляемаяМодельПоказателейKPI");
		ДвоичныеДанные.Записать(АрхивПолноеИмя);
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Загрузка поставляемой модели показателей KPI'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(АрхивПолноеИмя);
	ЧтениеZipФайла.ИзвлечьВсе(КаталогВременныхФайлов, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	
	УдалитьФайлы(АрхивПолноеИмя);
	
	КореньПоставляемойМодели = ПолучитьКореньПоставляемойМоделиПоказателей();
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(КаталогВременныхФайлов + "KPIModelData.xml");

	НачатьТранзакцию();
	ПоказательОбъект = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл  // ПоставляемаяМодельПоказателей
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			ЛокальноеИмя = ЧтениеXML.ЛокальноеИмя;
			Если ЛокальноеИмя = "Показатель" Тогда
				
				ПоказательОбъект = Неопределено;
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.ЛокальноеИмя = "ИДПоставляемойМодели" Тогда
						ПоказательОбъект = ПолучитьСоздатьПоказательПоставляемойМодели(ЧтениеXML.Значение, КореньПоставляемойМодели);
					Иначе
						Если ПоказательОбъект = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЧтениеXML.ЛокальноеИмя = "Наименование" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "Описание"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ИдентификаторДляФормул"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "Отчет"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ТекстФормулы"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ИдентификаторВнешнегоПоказателя" Тогда
							ПоказательОбъект[ЧтениеXML.ЛокальноеИмя] = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ТипПоказателя" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ВариантЗаполнения" Тогда	
							ПоказательОбъект[ЧтениеXML.ЛокальноеИмя] = ЗначениеИзСтрокиВнутр(ЧтениеXML.Значение);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ЛокальноеИмя = "ВариантАнализа" Тогда
				
				ВариантОбъект = Неопределено;
				ИДВладельца = "";
				
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					Если ЧтениеXML.ЛокальноеИмя = "ИДВладельца" Тогда
               	ИДВладельца = ЧтениеXML.Значение;
					ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ИДПоставляемойМодели" Тогда
						ВариантОбъект = ПолучитьСоздатьВариантАнализаПоставляемойМодели(ЧтениеXML.Значение, ИДВладельца, КореньПоставляемойМодели);
					Иначе
						Если ВариантОбъект = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
						Если ЧтениеXML.ЛокальноеИмя = "Наименование" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ЗначениеАнализа"	Тогда
							ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = ЧтениеXML.Значение;
						ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ТипАнализа" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "АгрегацияДанных"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ВыбратьСортировку"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ВариантОтображенияПоУмолчанию"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ТипДиаграммы" Тогда	
							ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = ЗначениеИзСтрокиВнутр(ЧтениеXML.Значение);
						ИначеЕсли ЧтениеXML.ЛокальноеИмя = "КоличествоВыбираемыхЭлементов" 
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ОкруглениеДробнойЧасти"	Тогда
							Попытка
								ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = Число(ЧтениеXML.Значение);
							Исключение
								ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = 0;
							КонецПопытки;
						ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ВыполнитьНормализацию"
							ИЛИ ЧтениеXML.ЛокальноеИмя = "ОтображатьНулевыеЗначения" Тогда
							ВариантОбъект[ЧтениеXML.ЛокальноеИмя] = (ЧтениеXML.Значение = "1");
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
				
				Если ВариантОбъект <> Неопределено Тогда
					ВариантОбъект.Записать();
				КонецЕсли;
				
			ИначеЕсли ЛокальноеИмя = "ЕдиницаИзмерения" Тогда
				
				СтруктураЕИ = Новый Структура; 
				Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
					
					Если ЧтениеXML.ЛокальноеИмя = "Код" 
						ИЛИ ЧтениеXML.ЛокальноеИмя = "Наименование"
						ИЛИ ЧтениеXML.ЛокальноеИмя = "НаименованиеПолное"
						ИЛИ ЧтениеXML.ЛокальноеИмя = "МеждународноеСокращение" Тогда
						СтруктураЕИ.Вставить(ЧтениеXML.ЛокальноеИмя, ЧтениеXML.Значение);
					ИначеЕсли ЧтениеXML.ЛокальноеИмя = "ТипЕдиницыИзмерения" Тогда	
						СтруктураЕИ.Вставить(ЧтениеXML.ЛокальноеИмя, ЗначениеИзСтрокиВнутр(ЧтениеXML.Значение));
					КонецЕсли;
					
				КонецЦикла;
				
				Если ПоказательОбъект <> Неопределено Тогда
					ПоказательОбъект["ЕдиницаИзмерения"] = НайтиСоздатьЕдиницуИзмерения(СтруктураЕИ);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			
			Если ЛокальноеИмя = "СхемаКомпоновкиДанных" Тогда
				Если ПоказательОбъект = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ХранилищеСКД = XMLЗначение(Тип("ХранилищеЗначения"), ЧтениеXML.Значение);
				ДанныеСКД = ХранилищеСКД.Получить();
				ПоказательОбъект["СхемаКомпоновкиДанных"] = Новый ХранилищеЗначения(ДанныеСКД, Новый СжатиеДанных(9));
			КонецЕсли;
			
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			ЛокальноеИмя = ЧтениеXML.ЛокальноеИмя;
			
			Если ЛокальноеИмя = "Показатель" Тогда
				Если ПоказательОбъект <> Неопределено Тогда
					ПоказательОбъект.Записать();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	ЧтениеXML.Закрыть();
	
КонецПроцедуры

// Формирует стандартный отчет-расшифровку для показателя KPI.
//
// Параметры:
//  Результат - ТабличныйДокумент - результат отчета.
//  Макет - ТабличныйДокумент - макет отчета.
//  СКД - СхемаКомпоновкиДанных - подготовленная СКД отчета.
//  ТабДанных - ТаблицаЗначений - таблица данных.
//  НастройкиКомпоновщика - НастройкиКомпоновкиДанных - настройки СКД.
//  ВариантАнализа - СправочникСсылка.торо_ВариантыАнализаПоказателейKPI - вариант анализа.
//  ПредставлениеПараметров - Строка - строковое представление параметров отчета.
//
Процедура СформироватьУниверсальныйОтчетРасшифровкуПоказателя(Результат, Макет, СКД, ТабДанных, НастройкиКомпоновщика, ВариантАнализа, ПредставлениеПараметров) Экспорт
	
	ПараметрыШапки = Новый Структура("ВариантАнализа, ЕдиницаИзмерения, ЗначениеПараметров", 
		ВариантАнализа, ВариантАнализа.Владелец.ЕдиницаИзмерения, ПредставлениеПараметров);
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
	Результат.Вывести(ОбластьШапка);
		
	Если ТипЗнч(СКД) <> Тип("СхемаКомпоновкиДанных") Тогда
		Возврат;
	КонецЕсли;
			
	ВнешниеНаборыДанных = Новый Структура("ТабДанных", ТабДанных);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, НастройкиКомпоновщика,,,Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
		
	ОбластьРезультатЗаголовок = Макет.ПолучитьОбласть("РезультатЗаголовок");
	Результат.Вывести(ОбластьРезультатЗаголовок);
	
	ПроцессорВыводаТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаТЗ.УстановитьДокумент(Результат);
	ПроцессорВыводаТЗ.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

// Функция сравнивает два элемента перечисления торо_ТипыПоказателейKPI. 
// Самый маленький - ПоказательОбъектаРемонта, самый большой - ПоказательОрганизации.
//
// Параметры:
//  Тип1 - ПеречислениеСсылка.торо_ТипыПоказателейKPI - тип для сравнения.
//  Тип2 - ПеречислениеСсылка.торо_ТипыПоказателейKPI - тип для сравнения.
//
// Возвращаемое значение: 
// 	Число -  1, если Тип1 > Тип2;
// 	         0, если Тип1 = Тип2;
// 	         -1, если Тип1 < Тип2;
//
Функция СравнитьТипыПоказателей(Тип1, Тип2) Экспорт
	
	Если Тип1 = Тип2 Тогда
		Возврат 0;
	ИначеЕсли Тип1 = Перечисления.торо_ТипыПоказателейKPI.ПоказательОрганизации Тогда
		Возврат 1;
	ИначеЕсли Тип2 = Перечисления.торо_ТипыПоказателейKPI.ПоказательОрганизации Тогда
		Возврат -1;
	ИначеЕсли  Тип1 = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		// Выше уже проверили, Тип2 - не организация и Тип2 <> Тип1. Значит Тип2 = объекты ремонта.
		Возврат 1;
	ИначеЕсли  Тип2 = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		Возврат -1;
	ИначеЕсли  Тип1 = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		Возврат 1;
	Иначе
		Возврат -1;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЗначениеВСписокБезДублей(СписокЗначений, Значение, Представление)
	
	Если СписокЗначений.НайтиПоЗначению(Значение) = Неопределено Тогда
		СписокЗначений.Добавить(Значение, Представление);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив ссылок на элементы справочника торо_ПоказателиKPI
Функция ПолучитьСписокПоказателейИзФормулы(Показатель, Знач ТекстФормулы) Экспорт
	
	МассивПоказателей = Новый Массив;
	
	ТаблицаОперандов = ПолучитьТаблицуОперандовФормулы(Показатель, ТекстФормулы, Истина);
	Для каждого СтрокаТаблицы из ТаблицаОперандов Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Показатель) 
			И МассивПоказателей.Найти(СтрокаТаблицы.Показатель) = Неопределено Тогда
			МассивПоказателей.Добавить(СтрокаТаблицы.Показатель);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПоказателей;
	
КонецФункции

Функция ПолучитьПоказательПоИдентификаторуДляФормул(ИдентификаторДляФормул)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторДляФормул) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.ИдентификаторДляФормул = &ИдентификаторДляФормул
	|	И НЕ торо_ПоказателиKPI.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИдентификаторДляФормул", ИдентификаторДляФормул);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьФиксированныеОтборы(СтруктураОтборов, НастройкиКД, НастройкиОтчета) Экспорт
	ПараметрыКД = НастройкиКД.ПараметрыДанных;
	ОтборыКД = НастройкиКД.Отбор;
	Недоступный = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Для Каждого КлючИЗначение Из СтруктураОтборов Цикл
		Имя = КлючИЗначение.Ключ;
		Значение = КлючИЗначение.Значение;
		Если ТипЗнч(Значение) = Тип("ФиксированныйМассив") Тогда
			Значение = Новый Массив(Значение);
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(Значение);
			Значение = Список;
		КонецЕсли;
		ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
		Если ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если ПараметрКД.ИдентификаторПользовательскойНастройки = "" Тогда 
				ПараметрКД.Использование    = Истина;
				ПараметрКД.Значение         = Значение;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ОтборыКД, Имя, Значение, ВидСравненияКД, , Истина, Недоступный, "");
	КонецЦикла;
КонецПроцедуры

Функция ОбъединитьТаблицыДанныхИзПараметров(Параметры) Экспорт
	
	Если НЕ Параметры.Свойство("АдресТаблицыДанных") ИЛИ НЕ ЭтоАдресВременногоХранилища(Параметры.АдресТаблицыДанных) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабИсходная = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыДанных);
	Если ТипЗнч(ТабИсходная) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТабДанных = ТабИсходная.Скопировать();
	
	Если Параметры.Свойство("АдресТаблицыДанныхПрошлогоПериода") И ЭтоАдресВременногоХранилища(Параметры.АдресТаблицыДанныхПрошлогоПериода) Тогда
		ТабИсходная2 = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыДанныхПрошлогоПериода);
		Если ТипЗнч(ТабИсходная2) = Тип("ТаблицаЗначений") Тогда
			торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабИсходная2, ТабДанных);
		КонецЕсли;
	КонецЕсли;

	Возврат ТабДанных;
	
КонецФункции

Функция ПодготовитьСКДДляВыводаТаблицыДанных(ТабДанных) Экспорт
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.Имя = "ТабДанных";
	НаборДанных.ИмяОбъекта = "ТабДанных";
	
	Для каждого КолонкаТаблицы из ТабДанных.Колонки Цикл
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Поле = КолонкаТаблицы.Имя;
		Поле.ПутьКДанным = КолонкаТаблицы.Имя;
		Поле.ТипЗначения = КолонкаТаблицы.ТипЗначения;
		Поле.Заголовок = КолонкаТаблицы.Заголовок;
	КонецЦикла;
	
	СКД.НастройкиПоУмолчанию.Структура.Очистить();
	ЭлементСтруктуры = СКД.НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЭлементСтруктуры.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Для каждого КолонкаТаблицы из ТабДанных.Колонки Цикл
		Поле = СКД.НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Поле.Использование = Истина;
		Поле.Поле = Новый ПолеКомпоновкиДанных(КолонкаТаблицы.Имя);
	КонецЦикла;
	
	Возврат СКД;
	
КонецФункции

#Область ПоставляемаяМодель

Функция ПолучитьКореньПоставляемойМоделиПоказателей()
	
	Наименование = "Поставляемая модель показателей";
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.ЭтоГруппа
	|	И торо_ПоказателиKPI.Наименование = &Наименование
	|	И НЕ торо_ПоказателиKPI.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		НовГруппа = Справочники.торо_ПоказателиKPI.СоздатьГруппу();
		НовГруппа.Наименование = Наименование;
		НовГруппа.Записать();
		Возврат НовГруппа.Ссылка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоздатьПоказательПоставляемойМодели(ИДПоставляемойМодели, КореньПоставляемойМодели)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.Родитель = &Родитель
	|	И торо_ПоказателиKPI.ИДПоставляемойМодели = &ИДПоставляемойМодели";
	
	Запрос.УстановитьПараметр("Родитель", КореньПоставляемойМодели);
	Запрос.УстановитьПараметр("ИДПоставляемойМодели", ИДПоставляемойМодели);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка.ПолучитьОбъект();
	Иначе
		НовОбъект = Справочники.торо_ПоказателиKPI.СоздатьЭлемент();
		НовОбъект.Родитель = КореньПоставляемойМодели;
		НовОбъект.ИДПоставляемойМодели = ИДПоставляемойМодели;
		Возврат НовОбъект;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоздатьВариантАнализаПоставляемойМодели(ИДПоставляемойМодели, ИДВладельца, КореньПоставляемойМодели)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.Родитель = &Родитель
	|	И торо_ПоказателиKPI.ИДПоставляемойМодели = &ИДВладельца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.ИДПоставляемойМодели = &ИДПоставляемойМодели
	|	И торо_ВариантыАнализаПоказателейKPI.Владелец.Родитель = &Родитель
	|	И торо_ВариантыАнализаПоказателейKPI.Владелец.ИДПоставляемойМодели = &ИДВладельца";
	
	Запрос.УстановитьПараметр("ИДПоставляемойМодели", ИДПоставляемойМодели);
	Запрос.УстановитьПараметр("Родитель", КореньПоставляемойМодели);
	Запрос.УстановитьПараметр("ИДВладельца", ИДВладельца);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаВладельца = Результат[0].Выбрать();
	ВыборкаВариантов = Результат[1].Выбрать();

	Если ВыборкаВариантов.Следующий() Тогда
		Возврат ВыборкаВариантов.Ссылка.ПолучитьОбъект();
	Иначе
		НовОбъект = Справочники.торо_ВариантыАнализаПоказателейKPI.СоздатьЭлемент();
		НовОбъект.ИДПоставляемойМодели = ИДПоставляемойМодели;
		Если ВыборкаВладельца.Следующий() Тогда
			НовОбъект.Владелец = ВыборкаВладельца.Ссылка;
		КонецЕсли;
		Возврат НовОбъект;
	КонецЕсли;
	
КонецФункции

Функция НайтиСоздатьЕдиницуИзмерения(СтруктураЕИ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕдиницыИзмерения.Ссылка
	|ИЗ
	|	Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|ГДЕ
	|	ЕдиницыИзмерения.Код = &Код
	|	И НЕ ЕдиницыИзмерения.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Код", СтруктураЕИ.Код);
	
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		
		Попытка
			СправочникОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(СправочникОбъект, СтруктураЕИ);
			СправочникОбъект.Записать();
			Возврат СправочникОбъект.Ссылка;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область МониторKPI

/////////////////////////////////////////////////////////////////////////////
// Расчет показателей

Процедура ПолучитьДанныеПоказателей(СписокВариантовАнализа, ЭтаФорма) Экспорт
	
	ЭтаФорма.ДанныеПоказателей.Очистить();
	ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Очистить();
	
	ЗаполнитьТаблицыДат(ЭтаФорма);
	
	// Получим все различные показатели
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВариантыАнализаПоказателейKPI.Владелец КАК Показатель,
	|	ИСТИНА КАК ПолучатьДанныеПрошлогоПериода
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Показатели.Показатель,
	|	ВТ_Показатели.ПолучатьДанныеПрошлогоПериода,
	|	ВТ_Показатели.Показатель.ТипПоказателя КАК ТипПоказателя,
	|	ВТ_Показатели.Показатель.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|	ВТ_Показатели.Показатель.ВариантЗаполнения КАК ВариантЗаполнения,
	|	ВТ_Показатели.Показатель.ТекстФормулы КАК ТекстФормулы,
	|	ВТ_Показатели.Показатель.СхемаКомпоновкиДанных КАК СхемаКомпоновкиДанных
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтаФорма.СписокВариантовАнализа);
	
	ВыборкаПоказателей = Запрос.Выполнить().Выбрать();
	
	ОтборПоПериоду = ЭтаФорма.ОтборПоПериоду;
	ОтборПоПериодуСравнения = ЭтаФорма.ОтборПоПериодуСравнения;
	
	// Вначале обработаем внешние показатели и СКД, потом отдельно формулы
	Пока ВыборкаПоказателей.Следующий() Цикл
		Попытка
			Если ВыборкаПоказателей.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.ВнешнийПоказатель Тогда
				НовСтр = ЭтаФорма.ДанныеПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
				
				ДанныеПоказателя = ПолучитьДанныеВнешнегоПоказателя(ВыборкаПоказателей.Показатель, ОтборПоПериоду, Ложь, ЭтаФорма);
				НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
				
				ДанныеПоказателяСПериодами = ПолучитьДанныеВнешнегоПоказателя(ВыборкаПоказателей.Показатель, ОтборПоПериоду, Истина, ЭтаФорма);
				НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
				
				Если ВыборкаПоказателей.ПолучатьДанныеПрошлогоПериода Тогда
					
					НовСтр = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
					
					ДанныеПоказателя = ПолучитьДанныеВнешнегоПоказателя(ВыборкаПоказателей.Показатель, ОтборПоПериодуСравнения, Ложь, ЭтаФорма);
					НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
					
					ДанныеПоказателяСПериодами = ПолучитьДанныеВнешнегоПоказателя(ВыборкаПоказателей.Показатель, ОтборПоПериодуСравнения, Истина, ЭтаФорма);
					НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
					
				КонецЕсли;
				
			ИначеЕсли ВыборкаПоказателей.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.СКД Тогда
				НовСтр = ЭтаФорма.ДанныеПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
				
				ДанныеПоказателя = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.СхемаКомпоновкиДанных, ОтборПоПериоду, Ложь);
				НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
				
				ДанныеПоказателяСПериодами = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.СхемаКомпоновкиДанных, ОтборПоПериоду, Истина);
				НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
				
				Если ВыборкаПоказателей.ПолучатьДанныеПрошлогоПериода Тогда
					
					НовСтр = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
					
					ДанныеПоказателя = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.СхемаКомпоновкиДанных, ОтборПоПериодуСравнения, Ложь, Истина);
					НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
					
					ДанныеПоказателяСПериодами = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.СхемаКомпоновкиДанных, ОтборПоПериоду, Истина, Истина);
					НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
					
				КонецЕсли;

			КонецЕсли;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонОшибки = НСтр("ru='При получении данных показателя ""%1"" произошла ошибка: %2'");
			ТекстСообщения = СтрШаблон(ШаблонОшибки, ВыборкаПоказателей.Показатель, ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	// Обработка формул
	ВыборкаПоказателей.Сбросить();
	Пока ВыборкаПоказателей.Следующий() Цикл
		Попытка
			Если ВыборкаПоказателей.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.Формула Тогда
				НовСтр = ЭтаФорма.ДанныеПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
				
				ДанныеПоказателя = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.ИдентификаторДляФормул, ВыборкаПоказателей.ТекстФормулы, Ложь);
				НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
				
				ДанныеПоказателяСПериодами = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.ИдентификаторДляФормул, ВыборкаПоказателей.ТекстФормулы, Истина);
				НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
				
				Если ВыборкаПоказателей.ПолучатьДанныеПрошлогоПериода Тогда
					
					НовСтр = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПоказателей);
					
					ДанныеПоказателя = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.ИдентификаторДляФормул, ВыборкаПоказателей.ТекстФормулы, Ложь, Истина);
					НовСтр.АдресХранилищаДанных = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
					
					ДанныеПоказателяСПериодами = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, ВыборкаПоказателей.Показатель, ВыборкаПоказателей.ИдентификаторДляФормул, ВыборкаПоказателей.ТекстФормулы, Истина, Истина);
					НовСтр.АдресХранилищаДанныхСПериодами = ПоместитьВоВременноеХранилище(ДанныеПоказателяСПериодами, ЭтаФорма.УникальныйИдентификатор);
					
				КонецЕсли;

			КонецЕсли;
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонОшибки = НСтр("ru='При получении данных показателя ""%1"" произошла ошибка: %2'");
			ТекстСообщения = СтрШаблон(ШаблонОшибки, ВыборкаПоказателей.Показатель, ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДанныеВнешнегоПоказателя(Показатель, ПериодДляОтбора, СУчетомПериодичности, ЭтаФорма)
	
	БазовыйТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗначенияВнешнихПоказателей.Организация,
	|	ЗначенияВнешнихПоказателей.Подразделение,
	|	ЗначенияВнешнихПоказателей.ОбъектРемонта,
	|	ЗначенияВнешнихПоказателей.ЗначениеОборот,
	|	ЗначенияВнешнихПоказателей.ЗначениеКонечныйОстаток
	|ИЗ
	|	РегистрНакопления.торо_ЗначенияВнешнихПоказателейKPI.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , Движения, Показатель = &Показатель) КАК ЗначенияВнешнихПоказателей";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(БазовыйТекстЗапроса);
	
	ЗапросСхемыЗапроса = СхемаЗапроса.ПакетЗапросов.Получить(0);
	ОператорВыбратьСхемыЗапроса = ЗапросСхемыЗапроса.Операторы.Получить(0);
	ТаблицаОборотовСхемыЗапроса = ОператорВыбратьСхемыЗапроса.Источники.Получить(0);
	ПараметрыТаблицыОборотов = ТаблицаОборотовСхемыЗапроса.Источник.Параметры;
	
	Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
		ПараметрыТаблицыОборотов[2].Выражение = Новый ВыражениеСхемыЗапроса(Строка(ЭтаФорма.ДетализацияПоПериоду));
		ДоступноеПолеПериод = ТаблицаОборотовСхемыЗапроса.Источник.ДоступныеПоля.Найти("Период");
		ВыбираемоеПолеПериод = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Добавить(ДоступноеПолеПериод);
	КонецЕсли;
	
	ДоступенОбъектРемонта = Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта;
	ДоступноПодразделение = (Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта
									ИЛИ Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения);
									
	Если НЕ ДоступенОбъектРемонта Тогда
		ВыбираемоеПолеОбъектРемонта = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Найти("ЗначенияВнешнихПоказателей.ОбъектРемонта");
		Если ВыбираемоеПолеОбъектРемонта <> Неопределено Тогда
			ИндексПоля = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Индекс(ВыбираемоеПолеОбъектРемонта);
			ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Удалить(ИндексПоля);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДоступноПодразделение Тогда
		ВыбираемоеПолеПодразделение = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Найти("ЗначенияВнешнихПоказателей.Подразделение");
		Если ВыбираемоеПолеПодразделение <> Неопределено Тогда
			ИндексПоля = ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Индекс(ВыбираемоеПолеПодразделение);
			ОператорВыбратьСхемыЗапроса.ВыбираемыеПоля.Удалить(ИндексПоля);
		КонецЕсли;
	КонецЕсли;
									
	Если ЭтаФорма.ИспользоватьОтборПоОрганизации Тогда
		ПараметрыТаблицыОборотов[4].Выражение = Новый ВыражениеСхемыЗапроса(Строка(ПараметрыТаблицыОборотов[4].Выражение) 
																	+ " И Организация В(&СписокОрганизаций)");
	КонецЕсли;

	Если ЭтаФорма.ИспользоватьОтборПоПодразделению И ДоступноПодразделение Тогда
		ПараметрыТаблицыОборотов[4].Выражение = Новый ВыражениеСхемыЗапроса(Строка(ПараметрыТаблицыОборотов[4].Выражение) 
																	+ " И Подразделение В(&СписокПодразделений)");
	КонецЕсли;

	Если ЭтаФорма.ИспользоватьОтборПоОР И ДоступенОбъектРемонта Тогда
		ПараметрыТаблицыОборотов[4].Выражение = Новый ВыражениеСхемыЗапроса(Строка(ПараметрыТаблицыОборотов[4].Выражение) 
																	+ " И ОбъектРемонта В(&СписокОР)");
	КонецЕсли;
	
	ИтоговыйЗекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	Запрос = Новый Запрос(ИтоговыйЗекстЗапроса);
	Запрос.УстановитьПараметр("НачалоПериода", ПериодДляОтбора.ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ПериодДляОтбора.ДатаОкончания);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	Если ЭтаФорма.ИспользоватьОтборПоОрганизации Тогда
		Запрос.УстановитьПараметр("СписокОрганизаций", ЭтаФорма.ОтборПоОрганизации);
	КонецЕсли;
	Если ЭтаФорма.ИспользоватьОтборПоПодразделению Тогда
		Запрос.УстановитьПараметр("СписокПодразделений", ЭтаФорма.ОтборПоПодразделению);
	КонецЕсли;
	Если ЭтаФорма.ИспользоватьОтборПоОР Тогда
		Запрос.УстановитьПараметр("СписокОР", ЭтаФорма.ОтборПоОР);
	КонецЕсли;
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТабРезультат;
	
КонецФункции


Функция ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, Показатель, ХранилищеСКД, ПериодДляОтбора, СУчетомПериодичности, ЗаПрошлыйПериод = Ложь)
	
	ТабРезультат = Новый ТаблицаЗначений;
	
	СКД = ХранилищеСКД.Получить(); 
	
	Если СКД <> Неопределено Тогда
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
		КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
		Настройки = КомпоновщикНастроек.ПолучитьНастройки();
		
		Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
		
		Если Настройки.Структура.Количество() = 0 Тогда
			Группировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			Группировка.Использование = Истина;
		КонецЕсли;
		
		УстановитьОтборыИПараметрыВСКД(Настройки, ПериодДляОтбора, Показатель, ЭтаФорма);
			
		// добавление периодичности
		ВнешниеНаборыДанных = Новый Структура;
		ДобавитьНастройкиПериодичностиВСКД(СКД, Настройки, ПериодДляОтбора, СУчетомПериодичности, ВнешниеНаборыДанных, ЗаПрошлыйПериод, ЭтаФорма);
			
		
		// выполнение СКД
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки,,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
				
		ДеревоРезультат = Новый ДеревоЗначений;
		
		ПроцессорВыводаТЗ = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВыводаТЗ.УстановитьОбъект(ДеревоРезультат);
		ПроцессорВыводаТЗ.Вывести(ПроцессорКомпоновкиДанных);
		
		// Сделаем колонке "ПериодДень" и т.п., если такая есть, имя "Период". 
		// Предварительно удалим "Период", если вдруг он уже есть.
		Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
			ИмяПоляПериода = "Период"+Строка(ЭтаФорма.ДетализацияПоПериоду);
			КолонкаПериодПоПериодичности = ДеревоРезультат.Колонки.Найти(ИмяПоляПериода);
			КолонкаПериод = ДеревоРезультат.Колонки.Найти("Период");
			Если КолонкаПериодПоПериодичности <> Неопределено Тогда
				Если КолонкаПериод <> Неопределено Тогда
					ДеревоРезультат.Колонки.Удалить(КолонкаПериод);
				КонецЕсли;
				КолонкаПериодПоПериодичности.Имя = "Период";
			КонецЕсли;
		КонецЕсли;
		
		// формирование структуры результата
		МассивКолонокРесурсов = Новый Массив;
		Для каждого ДоступноеПолеВыбора ИЗ Настройки.ДоступныеПоляВыбора.Элементы Цикл
			ИмяПоля = Строка(ДоступноеПолеВыбора.Поле);
			Если ДоступноеПолеВыбора.Ресурс И ДеревоРезультат.Колонки.Найти(ИмяПоля) <> Неопределено Тогда
				МассивКолонокРесурсов.Добавить(ИмяПоля);
			КонецЕсли;
		КонецЦикла;
		
		РазвернутьДеревоВТаблицуЗначений(ДеревоРезультат, ТабРезультат, МассивКолонокРесурсов);
	КонецЕсли;
	
	Возврат ТабРезультат;
	
КонецФункции

Процедура УстановитьОтборыИПараметрыВСКД(Настройки, ПериодДляОтбора, Показатель, ЭтаФорма)
	
	// установка параметров и отбор по периоду
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Показатель"));
	Если Параметр <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Показатель", Показатель);
	КонецЕсли;
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	Если Параметр <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("НачалоПериода", ПериодДляОтбора.ДатаНачала);
	КонецЕсли;
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	Если Параметр <> Неопределено Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("КонецПериода", ПериодДляОтбора.ДатаОкончания);
	КонецЕсли;
	
	Параметр = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	Если Параметр <> Неопределено И ТипЗнч(Параметр.Значение) = Тип("СтандартныйПериод") Тогда
		Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", ПериодДляОтбора);
	КонецЕсли;
	
	ИмяПоля = "Период";
	ДоступноеПолеОтбора = Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	Если ДоступноеПолеОтбора <> Неопределено Тогда
		Если ЗначениеЗаполнено(ПериодДляОтбора.ДатаНачала) Тогда
			Отбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			Отбор.ПравоеЗначение = ПериодДляОтбора.ДатаНачала;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПериодДляОтбора.ДатаОкончания) Тогда
			Отбор = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			Отбор.Использование = Истина;
			Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
			Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			Отбор.ПравоеЗначение = ПериодДляОтбора.ДатаОкончания;
		КонецЕсли;
	КонецЕсли;
	
	// отборы
	Если ЭтаФорма.ИспользоватьОтборПоОрганизации Тогда
		УстановитьОтборСКДПоСпискуЗначений(Настройки, "Организация", ЭтаФорма.ОтборПоОрганизации);
	КонецЕсли;
	
	Если ЭтаФорма.ИспользоватьОтборПоПодразделению Тогда
		УстановитьОтборСКДПоСпискуЗначений(Настройки, "Подразделение", ЭтаФорма.ОтборПоПодразделению);
	КонецЕсли;
	
	Если ЭтаФорма.ИспользоватьОтборПоОР Тогда
		УстановитьОтборСКДПоСпискуЗначений(Настройки, "ОбъектРемонта", ЭтаФорма.ОтборПоОР);
	КонецЕсли;
		
КонецПроцедуры

Процедура ДобавитьНастройкиПериодичностиВСКД(СКД, Настройки, ПериодДляОтбора, СУчетомПериодичности, ВнешниеНаборыДанных, ЗаПрошлыйПериод, ЭтаФорма)
	
	Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
		
		ИмяПоляПериода = "Период"+Строка(ЭтаФорма.ДетализацияПоПериоду);
		ДоступноеПолеВыбораПериода = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПериода));
		Если ДоступноеПолеВыбораПериода <> Неопределено Тогда
			ПолеВыбораПериода = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбораПериода.Использование = Истина;
			ПолеВыбораПериода.Заголовок = "Период";
			ПолеВыбораПериода.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПериода);
			
			// удалить другое поле Период, если есть
			ПолеПериодБезПериодичности = Неопределено;
			Для каждого ПолеВыбора из Настройки.Выбор.Элементы Цикл
				Если ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Период") Тогда
					ПолеПериодБезПериодичности = ПолеВыбора;
				КонецЕсли;
			КонецЦикла;
			Если ПолеПериодБезПериодичности <> Неопределено Тогда
				Настройки.Выбор.Элементы.Удалить(ПолеПериодБезПериодичности);
			КонецЕсли;
			
			// Создать группировку с дополнением по периоду
			ГруппировкаОсновная = Настройки.Структура.Получить(0);
			ГруппировкаОсновная.ПоляГруппировки.Элементы.Очистить();
			Для каждого ПолеВыбора из Настройки.Выбор.Элементы Цикл
				ДоступноеПолеВыбора = Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеВыбора.Поле);
				Если НЕ ДоступноеПолеВыбора.Ресурс Тогда
					Если ПолеВыбора.Поле <> Новый ПолеКомпоновкиДанных(ИмяПоляПериода) Тогда
						ПолеГруппировки = ГруппировкаОсновная.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
						ПолеГруппировки.Использование = Истина;
						ПолеГруппировки.Поле = ПолеВыбора.Поле;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ГруппировкаПериода = ГруппировкаОсновная.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаПериода.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ГруппировкаПериода.Использование = Истина;
			Для каждого ПолеВыбора из Настройки.Выбор.Элементы Цикл
				Если ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПериода) Тогда
					ПолеГруппировки = ГруппировкаПериода.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
					ПолеГруппировки.Использование = Истина;
					ПолеГруппировки.Поле = ПолеВыбора.Поле;
					ПолеГруппировки.ТипДополнения = ТипДополненияПериодаКомпоновкиДанных[Строка(ЭтаФорма.ДетализацияПоПериоду)];
					ПолеГруппировки.НачалоПериода = ПериодДляОтбора.ДатаНачала;
					ПолеГруппировки.КонецПериода = ПериодДляОтбора.ДатаОкончания;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	// выполним поиск набора данных ТаблицаДат
	ЕстьНаборДанныхТаблицаДат = Ложь;
	
	Для каждого НаборДанных из СКД.НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектСхемыКомпоновкиДанных") 
			И НаборДанных.ИмяОбъекта = "ТаблицаДат" Тогда
			ЕстьНаборДанныхТаблицаДат = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;	
	
	Если ЕстьНаборданныхТаблицаДат Тогда
		ИмяПоляПериода = "Период";
		ДоступноеПолеВыбораПериода = Настройки.ДоступныеПоляВыбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоляПериода));
		Если ДоступноеПолеВыбораПериода <> Неопределено Тогда
			ПолеВыбораПериода = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбораПериода.Использование = Истина;
			ПолеВыбораПериода.Заголовок = "Период";
			ПолеВыбораПериода.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПериода);
		КонецЕсли;
		
		Если ЗаПрошлыйПериод Тогда
			Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
				ВнешниеНаборыДанных.Вставить("ТаблицаДат", ПолучитьКопиюТаблицыФормы(ЭтаФорма.ТаблицаДатЗаПрошлыйПериод));
			Иначе
				ВнешниеНаборыДанных.Вставить("ТаблицаДат", ПолучитьКопиюТаблицыФормы(ЭтаФорма.ТаблицаДатНаТекДатуЗаПрошлыйПериод));
			КонецЕсли;
		Иначе
			Если СУчетомПериодичности И ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду) Тогда
				ВнешниеНаборыДанных.Вставить("ТаблицаДат", ПолучитьКопиюТаблицыФормы(ЭтаФорма.ТаблицаДат));
			Иначе
				ВнешниеНаборыДанных.Вставить("ТаблицаДат", ПолучитьКопиюТаблицыФормы(ЭтаФорма.ТаблицаДатНаТекДату));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры


Функция ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, Показатель, ИдентификаторДляФормул, Знач ИсходныйТекстФормулы, СУчетомПериодичности, ЗаПрошлыйПериод = Ложь) 
	
	ТабРезультат = Новый ТаблицаЗначений;
	
	Если СУчетомПериодичности Тогда
		ТабРезультат.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	КонецЕсли;
		
	ТабРезультат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения 
		ИЛИ Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		ТабРезультат.Колонки.Добавить("Подразделение", Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"));
	КонецЕсли;
	Если Показатель.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		ТабРезультат.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	КонецЕсли;
	
	ТабРезультат.Колонки.Добавить("Значение", Новый ОписаниеТипов("Число"));
	
	СтрокаАналитикПоказателя = ПолучитьСтрокуАналитикПоТипуПоказателя(Показатель.ТипПоказателя, СУчетомПериодичности);
	ТабРезультат.Индексы.Добавить(СтрокаАналитикПоказателя);
	
	ИмяРеквизитаАдресХранилища = ?(СУчетомПериодичности, "АдресХранилищаДанныхСПериодами", "АдресХранилищаДанных");
	ИспользуемыйПериод = ?(ЗаПрошлыйПериод, ЭтаФорма.ОтборПоПериодуСравнения, ЭтаФорма.ОтборПоПериоду);

	ТаблицаОперандов = торо_ПоказателиKPI.ПолучитьТаблицуОперандовФормулы(Показатель, ИсходныйТекстФормулы, Ложь);
	
	ТаблицаОперандов.Колонки.Добавить("ВариантЗаполнения");
	ТаблицаОперандов.Колонки.Добавить("ТипПоказателя");
	ТаблицаОперандов.Колонки.Добавить("ПорядокСортировки", Новый ОписаниеТипов("Число"));
	ТаблицаОперандов.Колонки.Добавить("ИдентификаторДляФормул");
	ТаблицаОперандов.Колонки.Добавить("ТекстФормулы");
	ТаблицаОперандов.Колонки.Добавить("ИмяКолонки");
	
	Для каждого СтрокаОперанда из ТаблицаОперандов Цикл
		СтрокаОперанда.ВариантЗаполнения = СтрокаОперанда.Показатель.ВариантЗаполнения;
		СтрокаОперанда.ТипПоказателя = СтрокаОперанда.Показатель.ТипПоказателя;
		СтрокаОперанда.ИдентификаторДляФормул = СтрокаОперанда.Показатель.ИдентификаторДляФормул;
		СтрокаОперанда.ТекстФормулы = СтрокаОперанда.Показатель.ТекстФормулы;
		
		Если СтрокаОперанда.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОрганизации Тогда
			СтрокаОперанда.ПорядокСортировки = 3;
		ИначеЕсли СтрокаОперанда.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
			СтрокаОперанда.ПорядокСортировки = 2;
		ИначеЕсли СтрокаОперанда.ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
			СтрокаОперанда.ПорядокСортировки = 1;
		КонецЕсли;
		
		ИмяКолонки = СтрокаОперанда.ИмяПоказателя+"_"+СтрокаОперанда.ИмяРесурса;
		СтрокаОперанда.ИмяКолонки = ИмяКолонки;
		ТабРезультат.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Число"), СтрокаОперанда.ИмяПоказателя+"."+СтрокаОперанда.ИмяРесурса);
	КонецЦикла;
	
	ТаблицаОперандов.Сортировать("ПорядокСортировки");
	
	// Получим данные всех операндов для расчета
	Для каждого СтрокаОперанда из ТаблицаОперандов Цикл
		Если ЗаПрошлыйПериод Тогда
			СтрокаПоказателяОперанда = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.НайтиСтроки(Новый Структура("Показатель", СтрокаОперанда.Показатель));
		Иначе
			СтрокаПоказателяОперанда = ЭтаФорма.ДанныеПоказателей.НайтиСтроки(Новый Структура("Показатель", СтрокаОперанда.Показатель));
		КонецЕсли;
				
		НовСтр = Неопределено;
		Если СтрокаПоказателяОперанда.Количество() > 0 Тогда
			НовСтр = СтрокаПоказателяОперанда[0];
			Если ЭтоАдресВременногоХранилища(НовСтр[ИмяРеквизитаАдресХранилища]) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НовСтр = Неопределено Тогда
			Если ЗаПрошлыйПериод Тогда
				НовСтр = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.Добавить();
			Иначе
				НовСтр = ЭтаФорма.ДанныеПоказателей.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НовСтр, СтрокаОперанда);
		
		Если СтрокаОперанда.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.ВнешнийПоказатель Тогда
			ДанныеПоказателя = ПолучитьДанныеВнешнегоПоказателя(СтрокаОперанда.Показатель, ИспользуемыйПериод, СУчетомПериодичности, ЭтаФорма);
		ИначеЕсли СтрокаОперанда.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.СКД Тогда
			ДанныеПоказателя = ПолучитьДанныеПоказателяИзСКД(ЭтаФорма, СтрокаОперанда.Показатель, СтрокаОперанда.Показатель.СхемаКомпоновкиДанных, ИспользуемыйПериод, СУчетомПериодичности, ЗаПрошлыйПериод);
		ИначеЕсли СтрокаОперанда.ВариантЗаполнения = Перечисления.торо_ВариантыЗаполненияПоказателяKPI.СКД Тогда
			ДанныеПоказателя = ПолучитьДанныеПоказателяПоФормуле(ЭтаФорма, СтрокаОперанда.Показатель, СтрокаОперанда.СхемаКомпоновкиДанных, СтрокаОперанда.ТекстФормулы, СУчетомПериодичности, ЗаПрошлыйПериод);
		КонецЕсли;
		
		НовСтр[ИмяРеквизитаАдресХранилища] = ПоместитьВоВременноеХранилище(ДанныеПоказателя, ЭтаФорма.УникальныйИдентификатор);
			
	КонецЦикла;
	
	// Заполним таблицу для расчета формулы
	Для каждого СтрокаОперанда из ТаблицаОперандов Цикл
		Если ЗаПрошлыйПериод Тогда
			СтрокаПоказателяОперанда = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.НайтиСтроки(Новый Структура("Показатель", СтрокаОперанда.Показатель));
		Иначе
			СтрокаПоказателяОперанда = ЭтаФорма.ДанныеПоказателей.НайтиСтроки(Новый Структура("Показатель", СтрокаОперанда.Показатель));
		КонецЕсли;
				
		Если СтрокаПоказателяОперанда.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПоказателяОперанда = СтрокаПоказателяОперанда[0];
		Если ЭтоАдресВременногоХранилища(СтрокаПоказателяОперанда[ИмяРеквизитаАдресХранилища]) Тогда
			ДанныеОперандаИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателяОперанда[ИмяРеквизитаАдресХранилища]);
			Если ДанныеОперандаИсх = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ДанныеОперанда = ДанныеОперандаИсх.Скопировать();
		СтруктураПоискаДанныхОперанда = Новый Структура(СтрокаАналитикПоказателя);
		СравнениеТипов = торо_ПоказателиKPI.СравнитьТипыПоказателей(Показатель.ТипПоказателя, СтрокаОперанда.ТипПоказателя);
		Если СравнениеТипов > 0 Тогда
			ДанныеОперанда.Свернуть(СтрокаАналитикПоказателя, СтрокаОперанда.ИмяРесурса);
		ИначеЕсли СравнениеТипов = 0 Тогда	
			ДанныеОперанда.Индексы.Добавить(СтрокаАналитикПоказателя);
			ТабРезультат.Индексы.Добавить(СтрокаАналитикПоказателя);
		ИначеЕсли СравнениеТипов < 0 Тогда
			СтрокаАналитикОперанда = ПолучитьСтрокуАналитикПоТипуПоказателя(СтрокаОперанда.ТипПоказателя, СУчетомПериодичности);
			СтруктураПоискаДанныхОперанда = Новый Структура(СтрокаАналитикОперанда);
			ДанныеОперанда.Индексы.Добавить(СтрокаАналитикОперанда);
		КонецЕсли;
		
		Для каждого СтрокаТабРезультат из ТабРезультат Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоискаДанныхОперанда, СтрокаТабРезультат);
			НайденныеСтроки = ДанныеОперанда.НайтиСтроки(СтруктураПоискаДанныхОперанда);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
				СтрокаТабРезультат[СтрокаОперанда.ИмяКолонки] = НайденнаяСтрока[СтрокаОперанда.ИмяРесурса];
			КонецЕсли;	
		КонецЦикла;
		
		Если СравнениеТипов >=0 Тогда
			Для каждого СтрокаДанныеОперанда из ДанныеОперанда Цикл
				ЗаполнитьЗначенияСвойств(СтруктураПоискаДанныхОперанда, СтрокаДанныеОперанда);
				НайденныеСтроки = ТабРезультат.НайтиСтроки(СтруктураПоискаДанныхОперанда);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НовСтр = ТабРезультат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтруктураПоискаДанныхОперанда);
					НовСтр[СтрокаОперанда.ИмяКолонки] = СтрокаДанныеОперанда[СтрокаОперанда.ИмяРесурса];
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
			
	КонецЦикла;
	
	// Расчет формулы в каждой строке
	Для каждого СтрокаРезультата из ТабРезультат Цикл
		ТекстФормулы = ИсходныйТекстФормулы;
		
		Для каждого СтрокаОперанда из ТаблицаОперандов Цикл
			ЗначениеОперанда = СтрокаРезультата[СтрокаОперанда.ИмяКолонки];
			ЗначениеОперандаСтрокой = Формат(ЗначениеОперанда, "ЧРД=.; ЧН=0; ЧГ=0");
			ТекстФормулы = СтрЗаменить(ТекстФормулы, СтрокаОперанда.ТекстОперанда, ЗначениеОперандаСтрокой);
		КонецЦикла;
		
		Попытка
			СтрокаРезультата.Значение = Вычислить(ТекстФормулы);
		Исключение
			СтрокаРезультата.Значение = 0;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат ТабРезультат;
	
КонецФункции

Функция ПолучитьЦелевыеЗначенияПоказателей(СписокВариантовАнализа, ЭтаФорма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВариантыАнализаПоказателейKPI.Владелец КАК Показатель
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка В(&Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Показатель,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Организация,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Подразделение,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.ОбъектРемонта,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.Значение КАК ЦелевоеЗначение,
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.КритическоеЗначение
	|ИЗ
	|	РегистрСведений.торо_ЦелевыеЗначенияKPI.СрезПоследних(
	|			&Период,
	|			Показатель В
	|					(ВЫБРАТЬ
	|						ВТ_Показатели.Показатель
	|					ИЗ
	|						ВТ_Показатели КАК ВТ_Показатели)
	|				И Организация В (&СписокОрганизаций, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяССылка))
	|				И Подразделение В (&СписокПодразделений, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяССылка))
	|				И ОбъектРемонта В (&СписокОР, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяССылка))) КАК торо_ЦелевыеЗначенияKPIСрезПоследних
	|ГДЕ
	|	торо_ЦелевыеЗначенияKPIСрезПоследних.ДатаПО >= &Период";
	
	Запрос.УстановитьПараметр("Ссылка", ЭтаФорма.СписокВариантовАнализа);
	Запрос.УстановитьПараметр("Период", ЭтаФорма.ОтборПоПериоду.ДатаОкончания);
	Если ЭтаФорма.ИспользоватьОтборПоОрганизации Тогда
		Запрос.УстановитьПараметр("СписокОрганизаций", ЭтаФорма.ОтборПоОрганизации);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Организация В (&СписокОрганизаций, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяССылка))", "Истина");
	КонецЕсли;
	
	Если ЭтаФорма.ИспользоватьОтборПоПодразделению Тогда
		Запрос.УстановитьПараметр("СписокПодразделений", ЭтаФорма.ОтборПоПодразделению);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Подразделение В (&СписокПодразделений, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяССылка))", "Истина");
	КонецЕсли;

	Если ЭтаФорма.ИспользоватьОтборПоОР Тогда
		Запрос.УстановитьПараметр("СписокОР", ЭтаФорма.ОтборПоОР);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОбъектРемонта В (&СписокОР, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяССылка))", "Истина");
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции


Процедура РазвернутьДеревоВТаблицуЗначений(ДеревоРезультат, ТабРезультат, МассивКолонокРесурсов)
	
	Для каждого КолонкаДерева из ДеревоРезультат.Колонки Цикл
		ТабРезультат.Колонки.Добавить(КолонкаДерева.Имя, КолонкаДерева.ТипЗначения, КолонкаДерева.Заголовок);
	КонецЦикла;

	ДобавитьКонечныеСтрокиДереваВТаблицуЗначений(ДеревоРезультат.Строки, ТабРезультат, МассивКолонокРесурсов);

КонецПроцедуры

Процедура ДобавитьКонечныеСтрокиДереваВТаблицуЗначений(НаборСтрокДерева, ТабРезультат, МассивКолонокРесурсов)
	
	Для каждого СтрокаДерева из НаборСтрокДерева Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ДобавитьКонечныеСтрокиДереваВТаблицуЗначений(СтрокаДерева.Строки, ТабРезультат, МассивКолонокРесурсов);
		Иначе
			СтрокаТаблицы = ТабРезультат.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
			Для каждого ИмяКолонки из МассивКолонокРесурсов Цикл
				Если СтрокаТаблицы[ИмяКолонки] = Null Тогда
					СтрокаТаблицы[ИмяКолонки] = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицыДат(ЭтаФорма)
	
	ДетализацияПоПериоду = ЭтаФорма.ДетализацияПоПериоду;
	ОтборПоПериоду = ЭтаФорма.ОтборПоПериоду;
	ОтборПоПериодуСравнения = ЭтаФорма.ОтборПоПериодуСравнения;
	
	ЭтаФорма.ТаблицаДатНаТекДату.Очистить();
	НовСтр = ЭтаФорма.ТаблицаДатНаТекДату.Добавить();
	НовСтр.Период = ОтборПоПериоду.ДатаОкончания;
	НовСтр.НачалоПериода = ОтборПоПериоду.ДатаНачала;
	НовСтр.КонецПериода = ОтборПоПериоду.ДатаОкончания;
	
	ЭтаФорма.ТаблицаДатНаТекДатуЗаПрошлыйПериод.Очистить();
	НовСтр = ЭтаФорма.ТаблицаДатНаТекДатуЗаПрошлыйПериод.Добавить();
	НовСтр.Период = ОтборПоПериодуСравнения.ДатаОкончания;
	НовСтр.НачалоПериода = ОтборПоПериодуСравнения.ДатаНачала;
	НовСтр.КонецПериода = ОтборПоПериодуСравнения.ДатаОкончания;
	
	ЭтаФорма.ТаблицаДат.Очистить();
	ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Очистить();
	Если ЭтаФорма.ИспользоватьДетализациюПоПериоду И ЗначениеЗаполнено(ДетализацияПоПериоду) Тогда
		Если ДетализацияПоПериоду <> Перечисления.Периодичность.Декада
			И ДетализацияПоПериоду <> Перечисления.Периодичность.Полугодие Тогда
			
			текДата = ОтборПоПериоду.ДатаНачала;
			Пока текДата < ОтборПоПериоду.ДатаОкончания Цикл
				НовСтр = ЭтаФорма.ТаблицаДат.Добавить();
				НовСтр.Период = НачалоПериода(текДата, ДетализацияПоПериоду);
				НовСтр.НачалоПериода = Макс(ОтборПоПериоду.ДатаНачала, НачалоПериода(текДата, ДетализацияПоПериоду));
				НовСтр.КонецПериода = Мин(ОтборПоПериоду.ДатаОкончания, КонецПериода(текДата, ДетализацияПоПериоду));
				текДата = КонецПериода(текДата, ДетализацияПоПериоду)+1;
			КонецЦикла;

			текДата = ОтборПоПериодуСравнения.ДатаНачала;
			Пока текДата < ОтборПоПериодуСравнения.ДатаОкончания Цикл
				НовСтр = ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Добавить();
				НовСтр.Период = НачалоПериода(текДата, ДетализацияПоПериоду);
				НовСтр.НачалоПериода = Макс(ОтборПоПериодуСравнения.ДатаНачала, НачалоПериода(текДата, ДетализацияПоПериоду));
				НовСтр.КонецПериода = Мин(ОтборПоПериодуСравнения.ДатаОкончания, КонецПериода(текДата, ДетализацияПоПериоду));
				текДата = КонецПериода(текДата, ДетализацияПоПериоду)+1;
			КонецЦикла;
			
		Иначе // Используем запрос к производственному календарю, т.к. нет функций НачалоДекады и НачалоПолугодия
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА) КАК Период,
			|	ВЫБОР
			|		КОГДА НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА) < &ДатаНачала
			|			ТОГДА &ДатаНачала
			|		ИНАЧЕ НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА)
			|	КОНЕЦ КАК НачалоПериода,
			|	ВЫБОР
			|		КОГДА КОНЕЦПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА) > &ДатаОкончания
			|			ТОГДА &ДатаОкончания
			|		ИНАЧЕ КОНЕЦПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, ДЕКАДА)
			|	КОНЕЦ КАК КонецПериода
			|ИЗ
			|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
			|ГДЕ
			|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
			|	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период";
			
			Если ДетализацияПоПериоду = Перечисления.Периодичность.Полугодие Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст,"ДЕКАДА","ПОЛУГОДИЕ");
			КонецЕсли;
			
			ПроизводственныйКалендарь = КалендарныеГрафики.ПроизводственныйКалендарьРоссийскойФедерации();
			Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПроизводственныйКалендарь);
			
			Запрос.УстановитьПараметр("ДатаНачала", ОтборПоПериоду.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ОтборПоПериоду.ДатаОкончания);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрРезультат из РезультатЗапроса Цикл
				НовСтр = ЭтаФорма.ТаблицаДат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрРезультат);
			КонецЦикла;
			
			Запрос.УстановитьПараметр("ДатаНачала", ОтборПоПериодуСравнения.ДатаНачала);
			Запрос.УстановитьПараметр("ДатаОкончания", ОтборПоПериодуСравнения.ДатаОкончания);
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			Для каждого СтрРезультат из РезультатЗапроса Цикл
				НовСтр = ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрРезультат);
			КонецЦикла;
			
			ШаблонСообщения = НСтр("ru='Проверьте заполнение производственного календаря на период с %1 по %2.'");
			Если ЭтаФорма.ТаблицаДат.Количество() = 0 И НачалоДня(ОтборПоПериоду.ДатаНачала) < НачалоДня(ОтборПоПериоду.ДатаОкончания) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(ОтборПоПериоду.ДатаНачала, "ДЛФ=DD"), Формат(ОтборПоПериоду.ДатаОкончания, "ДЛФ=DD"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			Если ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Количество() = 0 И НачалоДня(ОтборПоПериодуСравнения.ДатаНачала) < НачалоДня(ОтборПоПериодуСравнения.ДатаОкончания) Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(ОтборПоПериодуСравнения.ДатаНачала, "ДЛФ=DD"), Формат(ОтборПоПериодуСравнения.ДатаОкончания, "ДЛФ=DD"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Для каждого СтрРезультат из ЭтаФорма.ТаблицаДатНаТекДату Цикл
			НовСтр = ЭтаФорма.ТаблицаДат.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрРезультат);
		КонецЦикла;
		
		Для каждого СтрРезультат из ЭтаФорма.ТаблицаДатНаТекДатуЗаПрошлыйПериод Цикл
			НовСтр = ЭтаФорма.ТаблицаДатЗаПрошлыйПериод.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрРезультат);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Преобразование данных

Функция ПолучитьСтруктураДанныхДляВыводаВМонитор(Знач ТабДанных, Знач ТабДанныхСПериодами, ВариантАнализа, ЭтаФорма) Экспорт
	
	СтруктураВозврата = Новый Структура;
	
	Показатель = ВариантАнализа.Владелец;
	ТипАнализа = ВариантАнализа.ТипАнализа;
	ИмяКолонкиРесурса = ВариантАнализа.ЗначениеАнализа;
	
	МасАналитикДляПроверки = Новый массив;
	Если ЭтаФорма.ТипПоказателей = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		ИмяКолонкиАналитики = "ОбъектРемонта";
		МасАналитикДляПроверки.Добавить("ОбъектРемонта");
		МасАналитикДляПроверки.Добавить("Подразделение");
		МасАналитикДляПроверки.Добавить("Организация");
	ИначеЕсли ЭтаФорма.ТипПоказателей = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		ИмяКолонкиАналитики = "Подразделение";
		МасАналитикДляПроверки.Добавить("Подразделение");
		МасАналитикДляПроверки.Добавить("Организация");
	Иначе
		ИмяКолонкиАналитики = "Организация";
		МасАналитикДляПроверки.Добавить("Организация");
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ТипАнализа", ТипАнализа);
	СтруктураВозврата.Вставить("ИмяКолонкиРесурса", ИмяКолонкиРесурса);
	СтруктураВозврата.Вставить("ИмяКолонкиАналитики", ИмяКолонкиАналитики);
	
	// Динамика изменения
	Если ТипАнализа = Перечисления.торо_ТипыАнализа.ДинамикаИзменения Тогда

		Если НЕ ЕстьПериодИПериодичность(ЭтаФорма, ВариантАнализа, ТабДанныхСПериодами) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанныхСПериодами, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить("Период");
		
		ТабДанныхСПериодами = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанныхСПериодами);
		
	// Покомпонентное сравнение (структура)	
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеСтруктура Тогда

		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить(ИмяКолонкиАналитики);
		
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанных);
		
	// Покомпонентное сравнение (динамика)
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
		
		Если НЕ ЕстьПериодИПериодичность(ЭтаФорма, ВариантАнализа, ТабДанныхСПериодами) Тогда
			Возврат Неопределено;
		КонецЕсли;
			
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанныхСПериодами, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТабПериодов = ТабДанныхСПериодами.Скопировать();
		ТабПериодов.Свернуть("Период");
		ТабПериодов.Сортировать("Период");
		СтруктураВозврата.Вставить("ТаблицаПериодов", ТабПериодов);
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить("Период");
		МассивКолонокАналитик.Добавить(ИмяКолонкиАналитики);
				
		ТабДанныхСПериодами = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанныхСПериодами);
			
	// Сравнение с прошлым периодом
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.СравнениеСПрошлымПериодом Тогда
		
		СтрокаПоказателя = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.НайтиСтроки(Новый Структура("Показатель", Показатель));
		Если СтрокаПоказателя.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаПоказателя = СтрокаПоказателя[0];
		
		Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных) Тогда
			ТабДанныхПрошлогоПериодаИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных);
			ТабДанныхПрошлогоПериода = ТабДанныхПрошлогоПериодаИсх.Скопировать();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса);
		
		МассивКолонокАналитик = Новый Массив;
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ТабДанныхПрошлогоПериода = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		ПрименитьОкруглениеКТаблице(ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса);
		
		Значение = ?(ТабДанных.Количество() > 0, ТабДанных.Итог(ИмяКолонкиРесурса), 0);
		ЗначениеПрошлогоПериода = ?(ТабДанных.Количество() > 0, ТабДанныхПрошлогоПериода.Итог(ИмяКолонкиРесурса), 0); 
		
		СтруктураВозврата.Вставить("Значение", Значение);
		СтруктураВозврата.Вставить("ЗначениеПрошлогоПериода", ЗначениеПрошлогоПериода);
			
	// Измерение текущего состояния
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ТабДанных.Колонки.Добавить("ЦелевоеЗначение", Новый ОписаниеТипов("Число"));
		ТабДанных.Колонки.Добавить("КритическоеЗначение", Новый ОписаниеТипов("Число"));
		
		МассивДопРесурсов = Новый Массив;
		МассивДопРесурсов.Добавить("ЦелевоеЗначение");
		МассивДопРесурсов.Добавить("КритическоеЗначение");
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, Истина);
		
		МассивКолонокАналитик = Новый Массив;
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик, МассивДопРесурсов);
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивДопРесурсов);
			
		ТекЗначение = ТабДанных.Итог(ИмяКолонкиРесурса);
		ЦелевоеЗначение = ТабДанных.Итог("ЦелевоеЗначение");
		КритическоеЗначение = ТабДанных.Итог("КритическоеЗначение");
		
		СтруктураВозврата.Вставить("Значение", ТекЗначение);
		СтруктураВозврата.Вставить("ЦелевоеЗначение", ЦелевоеЗначение);
		СтруктураВозврата.Вставить("КритическоеЗначение", КритическоеЗначение);

	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки)
	
	ШаблонСообщенияНетРесурса = НСтр("ru='В таблице данных для варианта анализа ""%1"" не найдено поле ""%2"".'");
	
	ЕстьРесурс = ТабДанных.Колонки.Найти(ИмяКолонкиРесурса) <> Неопределено;
	Если НЕ ЕстьРесурс Тогда
		ТекстСообщения = СтрШаблон(ШаблонСообщенияНетРесурса, ВариантАнализа, ИмяКолонкиРесурса);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Для каждого ИмяКолонкиАналитики из МасАналитикДляПроверки Цикл
		ЕстьАналитика = ТабДанных.Колонки.Найти(ИмяКолонкиАналитики) <> Неопределено;
		Если НЕ ЕстьАналитика Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщенияНетРесурса, ВариантАнализа, ИмяКолонкиАналитики);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

Функция ЕстьПериодИПериодичность(ЭтаФорма, ВариантАнализа, ТабДанных, ДляИнтегральнойОценки = Ложь)
	
	ШаблонСообщенияНетОбязательногоПоля = НСтр("ru='В таблице данных для варианта анализа ""%1"" отсутствует обязательное поле ""%2"" (Тип анализа ""%3"")'");
	ШаблонСообщенияНеЗаданаПериодичность = НСтр("ru='В  настройках монитора KPI не задана периодичность. Данные по варианту анализа ""%1"" выведены не будут (Тип анализа ""%2"")'");
	ШаблонСообщенияДляИнтегральнойОценки = НСтр("ru='В  настройках монитора KPI не задана периодичность. Данные в интегральную оценку выведены не будут'");
	
	ЕстьПериод = ТабДанных.Колонки.Найти("Период") <> Неопределено;
	Если НЕ ЕстьПериод Тогда
		
		Если ДляИнтегральнойОценки Тогда
			
			ТекстСообщения = ШаблонСообщенияДляИнтегральнойОценки;
			
		ИначеЕсли (НЕ ЭтаФорма.ИспользоватьДетализациюПоПериоду	ИЛИ НЕ ЗначениеЗаполнено(ЭтаФорма.ДетализацияПоПериоду)) Тогда
			
			Если ВариантАнализа.ТипАнализа = Перечисления.торо_ТипыАнализа.ДинамикаИзменения 
				ИЛИ ВариантАнализа.ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
				ТекстСообщения = СтрШаблон(ШаблонСообщенияНеЗаданаПериодичность, ВариантАнализа, ВариантАнализа.ТипАнализа);
			Иначе
				ТекстСообщения = СтрШаблон(ШаблонСообщенияНетОбязательногоПоля, ВариантАнализа, "Период", ВариантАнализа.ТипАнализа);
			КонецЕсли;
			
		Иначе
			ТекстСообщения = СтрШаблон(ШаблонСообщенияНетОбязательногоПоля, ВариантАнализа, "Период", ВариантАнализа.ТипАнализа);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции


Функция СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик, МассивДопРесурсов = Неопределено)
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	// запрос помещения во временную таблицу
	ЗапросВыбораСхемыЗапроса = СхемаЗапроса.ПакетЗапросов.Получить(0);
	ОператорВыбора = ЗапросВыбораСхемыЗапроса.Операторы.Получить(0);
	
	Источник = ОператорВыбора.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"), "&ТабДанных", "ТабДанных");
	ЗапросВыбораСхемыЗапроса.ТаблицаДляПомещения = "ТабДанных";
	
	Для каждого ИмяКолонкиАналитики из МассивКолонокАналитик Цикл
		ТекстВыражения = "ТабДанных."+ИмяКолонкиАналитики;
		ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
		ОператорВыбора.Группировка.Добавить(Новый ВыражениеСхемыЗапроса(ТекстВыражения));
	КонецЦикла;

	ТекстВыражения = "ТабДанных."+ИмяКолонкиРесурса;
	ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
	
	Если МассивДопРесурсов <> Неопределено Тогда
		Для каждого ИмяДопРесурса из МассивДопРесурсов Цикл
			ТекстВыражения = "ТабДанных."+ИмяДопРесурса;
			ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
		КонецЦикла;
	КонецЕсли;
	
	// запрос группировки и сортировки
	ЗапросВыбораСхемыЗапроса = СхемаЗапроса.ПакетЗапросов.Добавить(Тип("ЗапросВыбораСхемыЗапроса"));
	ОператорВыбора = ЗапросВыбораСхемыЗапроса.Операторы.Получить(0);
	
	Источник = ОператорВыбора.Источники.Добавить("ТабДанных");
	
	Для каждого ИмяКолонкиАналитики из МассивКолонокАналитик Цикл
		ТекстВыражения = "ТабДанных."+ИмяКолонкиАналитики;
		ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
		ОператорВыбора.Группировка.Добавить(Новый ВыражениеСхемыЗапроса(ТекстВыражения));
	КонецЦикла;

	АгрегатнаяФункция = "СУММА";
	Если ВариантАнализа.АгрегацияДанных = Перечисления.торо_АгрегацияДанных.Максимум Тогда
		АгрегатнаяФункция = "МАКСИМУМ";
	ИначеЕсли ВариантАнализа.АгрегацияДанных = Перечисления.торо_АгрегацияДанных.Минимум Тогда
		АгрегатнаяФункция = "МИНИМУМ";
	ИначеЕсли ВариантАнализа.АгрегацияДанных = Перечисления.торо_АгрегацияДанных.Среднее Тогда
		АгрегатнаяФункция = "СРЕДНЕЕ";
	КонецЕсли;
	ТекстВыражения = АгрегатнаяФункция+"(ТабДанных."+ИмяКолонкиРесурса+")";
	ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
	
	Если МассивДопРесурсов <> Неопределено Тогда
		Для каждого ИмяДопРесурса из МассивДопРесурсов Цикл
			ТекстВыражения = АгрегатнаяФункция+"(ТабДанных."+ИмяДопРесурса+")";
			ОператорВыбора.ВыбираемыеПоля.Добавить(ТекстВыражения);
		КонецЦикла;
	КонецЕсли;
	
	// сортировка

	ТабЛучшихХудших = Неопределено;
	
	Если ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.ПоВозрастанию Тогда
		ПолеПорядка = ЗапросВыбораСхемыЗапроса.Порядок.Добавить(ИмяКолонкиРесурса);
		ПолеПорядка.Направление = НаправлениеПорядкаСхемыЗапроса.ПоВозрастанию;
		
	ИначеЕсли ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.ПоУбыванию Тогда
		ПолеПорядка = ЗапросВыбораСхемыЗапроса.Порядок.Добавить(ИмяКолонкиРесурса);
		ПолеПорядка.Направление = НаправлениеПорядкаСхемыЗапроса.ПоУбыванию;
		
	ИначеЕсли ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.Лучшие 
		ИЛИ ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.Худшие Тогда
		
		Если МассивКолонокАналитик.Количество() <= 1 Тогда
			
			ПолеПорядка = ЗапросВыбораСхемыЗапроса.Порядок.Добавить(ИмяКолонкиРесурса);
			Если ВариантАнализа.ВыбратьСортировку = Перечисления.торо_ВариантыСортировки.Лучшие Тогда
				ПолеПорядка.Направление = НаправлениеПорядкаСхемыЗапроса.ПоУбыванию;
			Иначе
				ПолеПорядка.Направление = НаправлениеПорядкаСхемыЗапроса.ПоВозрастанию;
			КонецЕсли;
			ОператорВыбора.КоличествоПолучаемыхЗаписей = ВариантАнализа.КоличествоВыбираемыхЭлементов;
			
		Иначе
			
			МассивКолонокАналитикКопия = Новый Массив;
			ОснАналитика = МассивКолонокАналитик[1];
			МассивКолонокАналитикКопия.Добавить(ОснАналитика);
			ТабЛучшихХудших = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитикКопия, МассивДопРесурсов);
			
			ОператорВыбора.Отбор.Добавить("ТабДанных."+ОснАналитика+" В(&СписокОтбора)");
			
		КонецЕсли;
		
	Иначе // не используется, сортируем по умолчанию
		ЗапросВыбораСхемыЗапроса.Автопорядок = Истина;
	КонецЕсли;
	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТабДанных", ТабДанных);
	Если ТабЛучшихХудших <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокОтбора", ТабЛучшихХудших.ВыгрузитьКолонку(ОснАналитика));
	КонецЕсли;
	
	РезультатСвертки = Запрос.Выполнить().Выгрузить();
	
	Если ТабДанных.Количество() = 0 Тогда
		РезультатСвертки.Очистить();
	КонецЕсли;
	
	Возврат РезультатСвертки;
	
КонецФункции              

Процедура ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивДопРесурсов = Неопределено)
	
	Разрядность = ВариантАнализа.ОкруглениеДробнойЧасти;
	
	Для каждого СтрокаТаблицы из ТабДанных Цикл
		СтрокаТаблицы[ИмяКолонкиРесурса] = Окр(СтрокаТаблицы[ИмяКолонкиРесурса], Разрядность);
		Если МассивДопРесурсов <> Неопределено Тогда
			Для каждого ИмяДопРесурса из МассивДопРесурсов Цикл
				СтрокаТаблицы[ИмяДопРесурса] = Окр(СтрокаТаблицы[ИмяДопРесурса], Разрядность);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры              

Процедура ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, ЗаписыватьЦелевыеЗначеничВТаблицу = Ложь, ПринудительнаяНормализация = Ложь)
	
	Показатель = ВариантАнализа.Владелец;
	
	Если ПринудительнаяНормализация ИЛИ ВариантАнализа.ВыполнитьНормализацию Тогда
		
		Для каждого СтрокаТаблицы из ТабДанных Цикл
			СтруктураЦелевыхЗначений = ПолучитьЦелевыеЗначенияДляСтрокиТаблицы(ЭтаФорма, Показатель, СтрокаТаблицы, ТабДанных.Колонки);
			
			Если СтруктураЦелевыхЗначений.ЦелевоеЗначение <> Неопределено И СтруктураЦелевыхЗначений.КритическоеЗначение <> Неопределено Тогда
				МинимальнаяЦель = Мин(СтруктураЦелевыхЗначений.ЦелевоеЗначение, СтруктураЦелевыхЗначений.КритическоеЗначение);
				МаксимальнаяЦель = Макс(СтруктураЦелевыхЗначений.ЦелевоеЗначение, СтруктураЦелевыхЗначений.КритическоеЗначение);
				
				Если МаксимальнаяЦель = МинимальнаяЦель Тогда
					Если МаксимальнаяЦель <> 0 Тогда
						СтрокаТаблицы[ИмяКолонкиРесурса] = СтрокаТаблицы[ИмяКолонкиРесурса]*100/МаксимальнаяЦель;
					КонецЕсли;
				Иначе
					СтрокаТаблицы[ИмяКолонкиРесурса] = (СтрокаТаблицы[ИмяКолонкиРесурса] - МинимальнаяЦель)*100/(МаксимальнаяЦель - МинимальнаяЦель);
				КонецЕсли;
				
				Если ЗаписыватьЦелевыеЗначеничВТаблицу Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураЦелевыхЗначений);
					Если МаксимальнаяЦель = МинимальнаяЦель Тогда
						Если МаксимальнаяЦель <> 0 Тогда
							СтрокаТаблицы["ЦелевоеЗначение"] = СтрокаТаблицы["ЦелевоеЗначение"]*100/МаксимальнаяЦель;
							СтрокаТаблицы["КритическоеЗначение"] = СтрокаТаблицы["КритическоеЗначение"]*100/МаксимальнаяЦель;
						КонецЕсли;
					Иначе
						СтрокаТаблицы["ЦелевоеЗначение"] = (СтрокаТаблицы["ЦелевоеЗначение"] - МинимальнаяЦель)*100/(МаксимальнаяЦель - МинимальнаяЦель);
						СтрокаТаблицы["КритическоеЗначение"] = (СтрокаТаблицы["КритическоеЗначение"] - МинимальнаяЦель)*100/(МаксимальнаяЦель - МинимальнаяЦель);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ЗаписыватьЦелевыеЗначеничВТаблицу Тогда
		
		Для каждого СтрокаТаблицы из ТабДанных Цикл
			СтруктураЦелевыхЗначений = ПолучитьЦелевыеЗначенияДляСтрокиТаблицы(ЭтаФорма, Показатель, СтрокаТаблицы, ТабДанных.Колонки);
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураЦелевыхЗначений);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры 

Функция ПолучитьЦелевыеЗначенияДляСтрокиТаблицы(ЭтаФорма, Показатель, СтрокаТаблицы, КолонкиТаблицы)
	
	ЦелевыеЗначенияПоказателей = ЭтаФорма.ЦелевыеЗначенияПоказателей;
	
	СтруктураЦелевыхЗначений = Новый Структура("ЦелевоеЗначение, КритическоеЗначение");
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Показатель", Показатель);
	
	Если КолонкиТаблицы.Найти("ОбъектРемонта") <> Неопределено Тогда
		
		СтруктураПоиска.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		СтруктураПоиска.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		СтруктураПоиска.Вставить("ОбъектРемонта", СтрокаТаблицы.ОбъектРемонта);
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;
		
		СтруктураПоиска.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
		СтруктураПоиска.Вставить("ОбъектРемонта", СтрокаТаблицы.ОбъектРемонта);
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;


		СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураПоиска.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
		СтруктураПоиска.Вставить("ОбъектРемонта", СтрокаТаблицы.ОбъектРемонта);
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;
		
		СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
		СтруктураПоиска.Вставить("ОбъектРемонта", СтрокаТаблицы.ОбъектРемонта);
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	Если КолонкиТаблицы.Найти("Подразделение") <> Неопределено Тогда
		
		СтруктураПоиска.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
		СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
		СтруктураПоиска.Вставить("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;

		СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
		СтруктураПоиска.Вставить("Подразделение", СтрокаТаблицы.Подразделение);
		СтруктураПоиска.Вставить("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
		НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
			Возврат СтруктураЦелевыхЗначений;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПоиска.Вставить("Организация", СтрокаТаблицы.Организация);
	СтруктураПоиска.Вставить("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	СтруктураПоиска.Вставить("ОбъектРемонта", Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
	НайденныеСтроки = ЦелевыеЗначенияПоказателей.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЦелевыхЗначений, НайденныеСтроки[0]);
		Возврат СтруктураЦелевыхЗначений;
	КонецЕсли;
	
	Возврат СтруктураЦелевыхЗначений;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// Вывод данных

Процедура ВывестиДанныеПоказателяВДиаграмму(СтруктураДанныхДляВывода, ВариантАнализа,  Диаграмма, ЭтаФорма) Экспорт

	Показатель = ВариантАнализа.Владелец;
	ТипАнализа = СтруктураДанныхДляВывода.ТипАнализа;
	ИмяКолонкиРесурса = СтруктураДанныхДляВывода.ИмяКолонкиРесурса;
	ИмяКолонкиАналитики = СтруктураДанныхДляВывода.ИмяКолонкиАналитики;
	ЕдИзм = Показатель.ЕдиницаИзмерения;
	СтрокаЕдИзм = ?(ЗначениеЗаполнено(ЕдИзм), " "+ЕдИзм, "");
	
	// Динамика изменения
	Если ТипАнализа = Перечисления.торо_ТипыАнализа.ДинамикаИзменения Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		ТабДанных.Сортировать("Период");
		
		Диаграмма.ОтображатьЛегенду = Ложь;
		Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Значение;
		Диаграмма.ПропускатьБазовоеЗначение = НЕ ВариантАнализа.ОтображатьНулевыеЗначения;
		Диаграмма.БазовоеЗначение = 0;
		ФорматДаты = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
		
		Для Каждого Стр Из ТабДанных Цикл
			ТекущаяТочка = Диаграмма.УстановитьТочку(Стр.Период);
			ТекущаяТочка.Текст = Формат(Стр.Период, ФорматДаты);
			ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(1);
			ТекущаяСерияДиаграммы.Текст = "";
			ТекстЗначения = ТекущаяТочка.Текст + " / " + Строка(Стр[ИмяКолонкиРесурса])+СтрокаЕдИзм;
			Диаграмма.УстановитьЗначение(ТекущаяТочка,ТекущаяСерияДиаграммы,Стр[ИмяКолонкиРесурса],,ТекстЗначения);
		КонецЦикла;
		
		// Покомпонентное сравнение (структура)	
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеСтруктура Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		
		Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Значение;
		
		ТекущаяТочка = Диаграмма.УстановитьТочку(1);
		ТекущаяТочка.Текст = " ";
		Для Каждого Стр Из ТабДанных Цикл
			Аналитика = Стр[ИмяКолонкиАналитики];
			ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(Аналитика);
			ТекущаяСерияДиаграммы.Значение = Аналитика;
			ТекущаяСерияДиаграммы.Текст = Аналитика;
			ТекстЗначения = ТекущаяСерияДиаграммы.Текст + " / " + Строка(Стр[ИмяКолонкиРесурса])+СтрокаЕдИзм;
			Диаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерияДиаграммы, Стр[ИмяКолонкиРесурса],,ТекстЗначения);
		КонецЦикла;
		
		// Покомпонентное сравнение (динамика)
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		ТабПериодов = СтруктураДанныхДляВывода.ТаблицаПериодов;
		
		СтрокаСвертки = "Период,"+ИмяКолонкиАналитики;
		ТабДанных.Индексы.Добавить(СтрокаСвертки);
		
		ТабАналитик = ТабДанных.Скопировать();
		ТабАналитик.Свернуть(ИмяКолонкиАналитики);
		
		Диаграмма.ПропускатьБазовоеЗначение = НЕ ВариантАнализа.ОтображатьНулевыеЗначения;
		Диаграмма.БазовоеЗначение = 0;
		
		ФорматДаты = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
		
		Для каждого Стр Из ТабПериодов Цикл
			ТекущаяТочка = Диаграмма.УстановитьТочку(Стр.Период);
			ТекущаяТочка.Текст = Формат(Стр.Период, ФорматДаты);
			Для Каждого СтрАналитика Из ТабАналитик Цикл
				Аналитика = СтрАналитика[ИмяКолонкиАналитики];
				Значение = ТабДанных.НайтиСтроки(Новый Структура(СтрокаСвертки,Стр.Период, Аналитика));
				Если Значение.Количество() > 0 Тогда
					Если НЕ ЗначениеЗаполнено(Аналитика) И Значение[0][ИмяКолонкиРесурса] = 0 Тогда
						Продолжить;
					КонецЕсли;
					ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию(Аналитика);
					ТекущаяСерияДиаграммы.Значение = Аналитика;
					ТекущаяСерияДиаграммы.Текст = Аналитика;
					
					ТекстЗначения = ТекущаяСерияДиаграммы.Текст+" "+ТекущаяТочка.Текст + " / " + Строка(Значение[0][ИмяКолонкиРесурса])+СтрокаЕдИзм;
					Диаграмма.УстановитьЗначение(ТекущаяТочка,ТекущаяСерияДиаграммы,Значение[0][ИмяКолонкиРесурса],,ТекстЗначения);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Сравнение с прошлым периодом
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.СравнениеСПрошлымПериодом Тогда
		
		Значение = СтруктураДанныхДляВывода.Значение;
		ЗначениеПрошлогоПериода = СтруктураДанныхДляВывода.ЗначениеПрошлогоПериода;
		
		Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Значение;
		
		ТекущаяТочка = Диаграмма.Точки.Добавить(1);
		ТекущаяТочка.Текст = "";
		
		ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию("Прошлый период");
		ТекущаяСерияДиаграммы.Значение = "Прошлый период";
		ТекущаяСерияДиаграммы.Текст = "Прошлый период";
		ТекстЗначения = Строка(ЗначениеПрошлогоПериода)+СтрокаЕдИзм;
		Диаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерияДиаграммы, ЗначениеПрошлогоПериода,,ТекстЗначения);
		
		ТекущаяСерияДиаграммы = Диаграмма.УстановитьСерию("Текущий период");
		ТекущаяСерияДиаграммы.Значение = "Текущий период";
		ТекущаяСерияДиаграммы.Текст = "Текущий период";
		ТекстЗначения = Строка(Значение)+СтрокаЕдИзм;
		Диаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерияДиаграммы, Значение,,ТекстЗначения);
		
		// Измерение текущего состояния
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		
		ЦелевоеЗначение = СтруктураДанныхДляВывода.ЦелевоеЗначение;
		КритическоеЗначение = СтруктураДанныхДляВывода.КритическоеЗначение;
		Значение = СтруктураДанныхДляВывода.Значение;
		
		Диаграмма.АвтоМинимальноеЗначение	= Истина;
		Диаграмма.АвтоМаксимальноеЗначение	= Истина;
		Диаграмма.ОтображатьЛегенду = Ложь;
		
		Если ЦелевоеЗначение <> Неопределено И КритическоеЗначение <> Неопределено Тогда
			
			МаксимальноеЗначениеЦели = Макс(ЦелевоеЗначение, КритическоеЗначение);
			МинимальноеЗначениеЦели = Мин(ЦелевоеЗначение, КритическоеЗначение);
			
			МинимальноеЗначение = Мин(Значение, МинимальноеЗначениеЦели);
			МаксимальноеЗначение = Макс(Значение, МаксимальноеЗначениеЦели);
			БазовоеЗначение = Мин(0, МинимальноеЗначение);
			
			// делаем зеленую полосочку хоть чуть-чуть видимой
			ДополнениеКМаксЗначению = (МаксимальноеЗначение-МинимальноеЗначение)*0.1;
			Если ДополнениеКМаксЗначению = 0 Тогда
				ДополнениеКМаксЗначению = 1;
			КонецЕсли;
			
			МаксимальноеЗначение = МаксимальноеЗначение + ДополнениеКМаксЗначению;
			
			Диаграмма.ВидПодписей = ВидПодписейКДиаграмме.Значение;
			Диаграмма.БазовоеЗначение = БазовоеЗначение;
			Диаграмма.АвтоМинимальноеЗначение	= Ложь;
			Диаграмма.МинимальноеЗначение		= МинимальноеЗначение;
			Диаграмма.АвтоМаксимальноеЗначение	= Ложь;
			Диаграмма.МаксимальноеЗначение		= МаксимальноеЗначение;
			
			Если ЦелевоеЗначение >= КритическоеЗначение Тогда
				Полоса = Диаграмма.ПолосыИзмерительнойДиаграммы.Добавить();
				Полоса.Начало = БазовоеЗначение;
				Полоса.Конец = КритическоеЗначение;
				Полоса.ЦветФона = WebЦвета.Красный;
				Полоса.Текст = "Ниже критического";
				
				Полоса = Диаграмма.ПолосыИзмерительнойДиаграммы.Добавить();
				Полоса.Начало = КритическоеЗначение;
				Полоса.Конец = ЦелевоеЗначение;
				Полоса.ЦветФона = WebЦвета.Оранжевый;
				Полоса.Текст = "";
				
				Полоса = Диаграмма.ПолосыИзмерительнойДиаграммы.Добавить();
				Полоса.Начало = ЦелевоеЗначение;
				Полоса.Конец = МаксимальноеЗначение;
				Полоса.ЦветФона = WebЦвета.Зеленый;
				Полоса.Текст = "Достигнуто целевое значение";
			Иначе
				Полоса = Диаграмма.ПолосыИзмерительнойДиаграммы.Добавить();
				Полоса.Начало = БазовоеЗначение;
				Полоса.Конец = ЦелевоеЗначение;
				Полоса.ЦветФона = WebЦвета.Зеленый;
				Полоса.Текст = "Достигнуто целевое значение";
				
				Полоса = Диаграмма.ПолосыИзмерительнойДиаграммы.Добавить();
				Полоса.Начало = ЦелевоеЗначение;
				Полоса.Конец = КритическоеЗначение;
				Полоса.ЦветФона = WebЦвета.Оранжевый;
				Полоса.Текст = "";
				
				Полоса = Диаграмма.ПолосыИзмерительнойДиаграммы.Добавить();
				Полоса.Начало = КритическоеЗначение;
				Полоса.Конец = МаксимальноеЗначение;
				Полоса.ЦветФона = WebЦвета.Красный;
				Полоса.Текст = "Выше критического";
			КонецЕсли;
		КонецЕсли;
		
		Диаграмма.ОтображениеЗначенияИзмерительнойДиаграммы = ОтображениеЗначенияИзмерительнойДиаграммы.Стрелка;
		текТочка = Диаграмма.Точки.Добавить(ЭтаФорма.ОтборПоПериоду.ДатаОкончания);
		текСерия = Диаграмма.Серии.Добавить(Показатель);
		ТекстЗначения = Строка(Значение)+СтрокаЕдИзм;
		Диаграмма.УстановитьЗначение(текТочка, текСерия, Значение,,ТекстЗначения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиДанныеПоказателяВКраткомВиде(СтруктураДанныхДляВывода, ВариантАнализа, СтрокаРезультат) Экспорт
	
	Показатель = ВариантАнализа.Владелец;
	ТипАнализа = СтруктураДанныхДляВывода.ТипАнализа;
	ИмяКолонкиРесурса = СтруктураДанныхДляВывода.ИмяКолонкиРесурса;
	ИмяКолонкиАналитики = СтруктураДанныхДляВывода.ИмяКолонкиАналитики;
	
	// Сравнение с прошлым периодом
	Если ТипАнализа = Перечисления.торо_ТипыАнализа.СравнениеСПрошлымПериодом Тогда
		
		Значение = СтруктураДанныхДляВывода.Значение;
		ЗначениеПрошлогоПериода = СтруктураДанныхДляВывода.ЗначениеПрошлогоПериода;
		ЕдиницаИзмерения = Показатель.ЕдиницаИзмерения;
		ПроцентИзменения = ОКР(?(ЗначениеПрошлогоПериода = 0, 100, (Значение-ЗначениеПрошлогоПериода)*100/ЗначениеПрошлогоПериода), ВариантАнализа.ОкруглениеДробнойЧасти);
		
		ТекстСтроки1 = Формат(Значение, "ЧН=0") + " " + ЕдиницаИзмерения;
		
		Если Значение > ЗначениеПрошлогоПериода Тогда
			СимволДельты = "▲";
			ЦветШрифта = WebЦвета.Зеленый;
		ИначеЕсли Значение = ЗначениеПрошлогоПериода Тогда
			СимволДельты = "";
			ЦветШрифта = WebЦвета.Черный;
		Иначе
			СимволДельты = "▼";
			ЦветШрифта = WebЦвета.Красный;
		КонецЕсли;
		
		ТекстСтроки2 = СимволДельты + " " + Формат(ПроцентИзменения, "ЧН=0") + "% / "
							+ Формат(ЗначениеПрошлогоПериода, "ЧН=0") + " " + ЕдиницаИзмерения;
							
		СтрокаЗначенияПоказателя = Новый ФорматированнаяСтрока(ТекстСтроки1,новый Шрифт("Arial",20,Истина),ЦветШрифта);
		СтрокаРасшифровкиПоказателя = Новый ФорматированнаяСтрока(ТекстСтроки2,новый Шрифт("Arial",10));
		
		СтрокаРезультат = Новый ФорматированнаяСтрока(СтрокаЗначенияПоказателя, Символы.ПС, СтрокаРасшифровкиПоказателя);
		
	// Измерение текущего состояния
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		
		Значение = СтруктураДанныхДляВывода.Значение;
		ЕдиницаИзмерения = Показатель.ЕдиницаИзмерения;
		РеквизитРезультат = Новый ФорматированнаяСтрока(Формат(Значение, "ЧН=0") + " " + ЕдиницаИзмерения, Новый Шрифт("Arial", 20, Истина)); 
		СтрокаРезультат = РеквизитРезультат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиДанныеПоказателяВТаблицу(СтруктураДанныхДляВывода, ВариантАнализа, РеквизитРезультат) Экспорт

	Показатель = ВариантАнализа.Владелец;
	ТипАнализа = СтруктураДанныхДляВывода.ТипАнализа;
	ИмяКолонкиРесурса = СтруктураДанныхДляВывода.ИмяКолонкиРесурса;
	ИмяКолонкиАналитики = СтруктураДанныхДляВывода.ИмяКолонкиАналитики;
	
	// Динамика изменения
	Если ТипАнализа = Перечисления.торо_ТипыАнализа.ДинамикаИзменения Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		
		Для каждого СтрокаТаблицы из ТабДанных Цикл
			НовСтр = РеквизитРезультат.Добавить();
			НовСтр.Период = СтрокаТаблицы.Период;
			НовСтр.Значение = СтрокаТаблицы[ИмяКолонкиРесурса];
		КонецЦикла;
		
	// Покомпонентное сравнение (структура)	
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеСтруктура Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		
		Для каждого СтрокаТаблицы из ТабДанных Цикл
			НовСтр = РеквизитРезультат.Добавить();
			НовСтр.Разрез = СтрокаТаблицы[ИмяКолонкиАналитики];
			НовСтр.Значение = СтрокаТаблицы[ИмяКолонкиРесурса];
		КонецЦикла;
		
	// Покомпонентное сравнение (динамика)
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ПокомпонентноеСравнениеДинамика Тогда
		
		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		
		Для каждого СтрокаТаблицы из ТабДанных Цикл
			НовСтр = РеквизитРезультат.Добавить();
			НовСтр.Период = СтрокаТаблицы.Период;
			НовСтр.Разрез = СтрокаТаблицы[ИмяКолонкиАналитики];
			НовСтр.Значение = СтрокаТаблицы[ИмяКолонкиРесурса];
		КонецЦикла;
			
	// Сравнение с прошлым периодом
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.СравнениеСПрошлымПериодом Тогда
		
		Значение = СтруктураДанныхДляВывода.Значение;
		ЗначениеПрошлогоПериода = СтруктураДанныхДляВывода.ЗначениеПрошлогоПериода;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Прошлый период";
		НовСтр.Значение = ЗначениеПрошлогоПериода;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Текущий период";
		НовСтр.Значение = Значение;
			
	// Измерение текущего состояния
	ИначеЕсли ТипАнализа = Перечисления.торо_ТипыАнализа.ИзмерениеТекущегоСостояния Тогда
		
		ЦелевоеЗначение = СтруктураДанныхДляВывода.ЦелевоеЗначение;
		КритическоеЗначение = СтруктураДанныхДляВывода.КритическоеЗначение;
		Значение = СтруктураДанныхДляВывода.Значение;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Текущее значение";
		НовСтр.Значение = Значение;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Целевое значение";
		НовСтр.Значение = ЦелевоеЗначение;
		
		НовСтр = РеквизитРезультат.Добавить();
		НовСтр.Разрез = "Критическое значение";
		НовСтр.Значение = КритическоеЗначение;

	КонецЕсли;
	
КонецПроцедуры
	
/////////////////////////////////////////////////////////////////////////////
// Интегральная оценка

Функция ПолучитьСписокПоказателейДляИнтегральнойОценки(СписокВариантовАнализа) Экспорт
	
	ЗапросСвернутогоСписка = Новый Запрос;
	ЗапросСвернутогоСписка.Текст =
	"ВЫБРАТЬ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка КАК ВариантАнализа,
	|	торо_ВариантыАнализаПоказателейKPI.Владелец КАК Показатель,
	|	торо_ВариантыАнализаПоказателейKPI.АгрегацияДанных,
	|	торо_ВариантыАнализаПоказателейKPI.ЗначениеАнализа,
	|	ВЫБОР
	|		КОГДА торо_ВариантыАнализаПоказателейKPI.ВыбратьСортировку = ЗНАЧЕНИЕ(Перечисление.торо_ВариантыСортировки.Лучшие)
	|			ТОГДА ""Лучшие""
	|		КОГДА торо_ВариантыАнализаПоказателейKPI.ВыбратьСортировку = ЗНАЧЕНИЕ(Перечисление.торо_ВариантыСортировки.Худшие)
	|			ТОГДА ""Худшие""
	|		ИНАЧЕ ""По всем значениям""
	|	КОНЕЦ КАК Сортировка,
	|	торо_ВариантыАнализаПоказателейKPI.КоличествоВыбираемыхЭлементов
	|ПОМЕСТИТЬ ВТ_Показатели
	|ИЗ
	|	Справочник.торо_ВариантыАнализаПоказателейKPI КАК торо_ВариантыАнализаПоказателейKPI
	|ГДЕ
	|	торо_ВариантыАнализаПоказателейKPI.Ссылка В(&ВариантыАнализа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТ_Показатели.ВариантАнализа) КАК ВариантАнализа,
	|	ВТ_Показатели.Показатель КАК Показатель,
	|	ВТ_Показатели.АгрегацияДанных,
	|	ВТ_Показатели.ЗначениеАнализа,
	|	ВТ_Показатели.Сортировка,
	|	ВТ_Показатели.КоличествоВыбираемыхЭлементов
	|ИЗ
	|	ВТ_Показатели КАК ВТ_Показатели
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Показатели.Показатель,
	|	ВТ_Показатели.АгрегацияДанных,
	|	ВТ_Показатели.ЗначениеАнализа,
	|	ВТ_Показатели.Сортировка,
	|	ВТ_Показатели.КоличествоВыбираемыхЭлементов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Показатель";
	
	ЗапросСвернутогоСписка.УстановитьПараметр("ВариантыАнализа", СписокВариантовАнализа);
	СвернутаяТабВариантовАнализа = ЗапросСвернутогоСписка.Выполнить().Выгрузить();

	Возврат СвернутаяТабВариантовАнализа;
	
КонецФункции

Процедура ЗаполнитьИнтегральнуюОценку(ИнтегральнаяДиаграмма, СвернутаяТабВариантовАнализа, ЭтаФорма) Экспорт
	
	ИнтегральнаяДиаграмма.Очистить();

	Для каждого ЭлементСписка из СвернутаяТабВариантовАнализа Цикл
		ВариантАнализа = ЭлементСписка.ВариантАнализа;
		Показатель = ЭлементСписка.Показатель;
		
		СтрокаПоказателя = ЭтаФорма.ДанныеПоказателей.НайтиСтроки(Новый Структура("Показатель", Показатель));
		Если СтрокаПоказателя.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		СтрокаПоказателя = СтрокаПоказателя[0];
		
		Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных) Тогда
			ТабДанныхИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных);
			ТабДанных = ТабДанныхИсх.Скопировать();
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанныхСПериодами) Тогда
			ТабДанныхСПериодамиИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанныхСПериодами);
			ТабДанныхСПериодами = ТабДанныхСПериодамиИсх.Скопировать();
		Иначе
			Продолжить;
		КонецЕсли;
		
		Попытка
			СтруктураДанныхДляВывода = ПолучитьСтруктураДанныхДляВыводаВИнтегральнуюОценку(ТабДанных, ТабДанныхСПериодами, ВариантАнализа, ЭтаФорма);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонОшибки = НСтр("ru='При обработке данных показателя ""%1"" для вывода в интегральную оценку произошла ошибка: %2'");
			ТекстСообщения = СтрШаблон(ШаблонОшибки, ВариантАнализа, ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Продолжить;
		КонецПопытки;
		
		Если СтруктураДанныхДляВывода = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ШаблонПредставленияТочки = "%1, %2 (%3 / %4 / %5)";
		
		ПредставлениеСортировки = ?(ЭлементСписка.Сортировка="По всем значениям", 
			ЭлементСписка.Сортировка, 
			ЭлементСписка.Сортировка + " " + ЭлементСписка.КоличествоВыбираемыхЭлементов);
		
		ПредставлениеТочки = СтрШаблон(ШаблонПредставленияТочки,	Показатель, Показатель.ЕдиницаИзмерения, 
			ЭлементСписка.ЗначениеАнализа, ЭлементСписка.АгрегацияДанных, ПредставлениеСортировки);
		
		Попытка
			ВывестиДанныеПоказателяВИнтегральнуюОценку(ЭтаФорма, ИнтегральнаяДиаграмма, СтруктураДанныхДляВывода, ПредставлениеТочки);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			ШаблонОшибки = НСтр("ru='При выводе данных показателя ""%1"" в интегральную оценку произошла ошибка: %2'");
			ТекстСообщения = СтрШаблон(ШаблонОшибки, ВариантАнализа, ОписаниеОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецПопытки;
		
	КонецЦикла
	
КонецПроцедуры

Функция ПолучитьСтруктураДанныхДляВыводаВИнтегральнуюОценку(Знач ТабДанных, Знач ТабДанныхСПериодами, ВариантАнализа, ЭтаФорма) 
	
	СтруктураВозврата = Новый Структура;
	
	Показатель = ВариантАнализа.Владелец;
	ИмяКолонкиРесурса = ВариантАнализа.ЗначениеАнализа;
	
	МасАналитикДляПроверки = Новый массив;
	Если ЭтаФорма.ТипПоказателей = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		ИмяКолонкиАналитики = "ОбъектРемонта";
		МасАналитикДляПроверки.Добавить("ОбъектРемонта");
		МасАналитикДляПроверки.Добавить("Подразделение");
		МасАналитикДляПроверки.Добавить("Организация");
	ИначеЕсли ЭтаФорма.ТипПоказателей = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		ИмяКолонкиАналитики = "Подразделение";
		МасАналитикДляПроверки.Добавить("Подразделение");
		МасАналитикДляПроверки.Добавить("Организация");
	Иначе
		ИмяКолонкиАналитики = "Организация";
		МасАналитикДляПроверки.Добавить("Организация");
	КонецЕсли;
	
	СтруктураВозврата.Вставить("ИмяКолонкиРесурса", ИмяКолонкиРесурса);
	СтруктураВозврата.Вставить("ИмяКолонкиАналитики", ИмяКолонкиАналитики);
	
	// Сравнение с прошлым периодом
	Если ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.СравнениеСПрошлымПериодом Тогда
		
		СтрокаПоказателя = ЭтаФорма.ДанныеПоказателейЗаПрошлыйПериод.НайтиСтроки(Новый Структура("Показатель", Показатель));
		Если СтрокаПоказателя.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		СтрокаПоказателя = СтрокаПоказателя[0];
		
		Если ЭтоАдресВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных) Тогда
			ТабДанныхПрошлогоПериодаИсх = ПолучитьИзВременногоХранилища(СтрокаПоказателя.АдресХранилищаДанных);
			ТабДанныхПрошлогоПериода = ТабДанныхПрошлогоПериодаИсх.Скопировать();
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса,,Истина);
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса,,Истина);
		
		МассивКолонокАналитик = Новый Массив;
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ТабДанныхПрошлогоПериода = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		ПрименитьОкруглениеКТаблице(ТабДанныхПрошлогоПериода, ВариантАнализа, ИмяКолонкиРесурса);
		
		Значение = ?(ТабДанных.Количество() > 0, ТабДанных.Итог(ИмяКолонкиРесурса), 0);
		ЗначениеПрошлогоПериода = ?(ТабДанных.Количество() > 0, ТабДанныхПрошлогоПериода.Итог(ИмяКолонкиРесурса), 0); 
		
		СтруктураВозврата.Вставить("Значение", Значение);
		СтруктураВозврата.Вставить("ЗначениеПрошлогоПериода", ЗначениеПрошлогоПериода);

	ИначеЕсли ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.ПоЗаданнойПериодичности Тогда

		Если НЕ ЕстьПериодИПериодичность(ЭтаФорма, ВариантАнализа, ТабДанныхСПериодами, Истина) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса,,Истина);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить("Период");
		
		ТабДанныхСПериодами = СвернутьТаблицуЗначенийСАгрегацией(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанныхСПериодами, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанныхСПериодами);
		
	ИначеЕсли ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.ПоОбъектамАнализа Тогда
		
		Если НЕ ЕстьОбязательныеКолонки(ВариантАнализа, ТабДанных, ИмяКолонкиРесурса, МасАналитикДляПроверки) Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ПрименитьНормализациюКТаблице(ЭтаФорма, ТабДанных, ВариантАнализа, ИмяКолонкиРесурса,,Истина);
		
		МассивКолонокАналитик = Новый Массив;
		МассивКолонокАналитик.Добавить(ИмяКолонкиАналитики);
		
		ТабДанных = СвернутьТаблицуЗначенийСАгрегацией(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса, МассивКолонокАналитик);
		ПрименитьОкруглениеКТаблице(ТабДанных, ВариантАнализа, ИмяКолонкиРесурса);
		
		СтруктураВозврата.Вставить("ТаблицаДанных", ТабДанных);
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ВывестиДанныеПоказателяВИнтегральнуюОценку(ЭтаФорма, ИнтегральнаяДиаграмма, СтруктураДанныхДляВывода, ПредставлениеТочки)
	
	Если ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.СравнениеСПрошлымПериодом Тогда
		
		ТекущаяСерия = ИнтегральнаяДиаграмма.УстановитьСерию("Прошлый период");
		ТекущаяТочка = ИнтегральнаяДиаграмма.УстановитьТочку(ПредставлениеТочки);
		ИнтегральнаяДиаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, СтруктураДанныхДляВывода.ЗначениеПрошлогоПериода);
		
		ТекущаяСерия = ИнтегральнаяДиаграмма.УстановитьСерию("Текущий период");
		ТекущаяТочка = ИнтегральнаяДиаграмма.УстановитьТочку(ПредставлениеТочки);
		ИнтегральнаяДиаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, СтруктураДанныхДляВывода.Значение);
		
	ИначеЕсли ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.ПоЗаданнойПериодичности Тогда

		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		ИмяКолонкиРесурса = СтруктураДанныхДляВывода.ИмяКолонкиРесурса;
		ФорматДаты = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
		
		Для каждого Стр из ТабДанных Цикл
			ТекущаяСерия = ИнтегральнаяДиаграмма.УстановитьСерию(Стр.Период);
			ТекущаяСерия.Текст = Формат(Стр.Период, ФорматДаты);
			ТекущаяТочка = ИнтегральнаяДиаграмма.УстановитьТочку(ПредставлениеТочки);
			ИнтегральнаяДиаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, Стр[ИмяКолонкиРесурса]);
		КонецЦикла;
		
	ИначеЕсли ЭтаФорма.ТипСерийИнтегральнойОценки = Перечисления.торо_ТипыИнтегральнойОценкиПоказателейKPI.ПоОбъектамАнализа Тогда

		ТабДанных = СтруктураДанныхДляВывода.ТаблицаДанных;
		ИмяКолонкиРесурса = СтруктураДанныхДляВывода.ИмяКолонкиРесурса;
		ИмяКолонкиАналитики = СтруктураДанныхДляВывода.ИмяКолонкиАналитики;

		Для каждого Стр из ТабДанных Цикл
			ТекущаяСерия = ИнтегральнаяДиаграмма.УстановитьСерию(Стр[ИмяКолонкиАналитики]);
			ТекущаяТочка = ИнтегральнаяДиаграмма.УстановитьТочку(ПредставлениеТочки);
			ИнтегральнаяДиаграмма.УстановитьЗначение(ТекущаяТочка, ТекущаяСерия, Стр[ИмяКолонкиРесурса]);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Печать

Процедура ВывестиПоказательНаПечатьДиаграмма(ДокументРезультат, Макет, ДиаграммаИсточник) Экспорт

	Область = Макет.ПолучитьОбласть("ПоказательДиаграммаСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	// Вывод диаграммы
	Область = Макет.ПолучитьОбласть("ПоказательДиаграммаСтрока|ПоказательСтолбец");
	ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
	
	РисунокДиаграмма = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
	РисунокДиаграмма.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
	РисунокДиаграмма.ЦветЛинии = WebЦвета.СеребристоСерый;
	
	Диаграмма = РисунокДиаграмма.Объект;
	
	КопируемыеСвойства = Новый Структура("ТипДиаграммы, 
	|АвтоМаксимальноеЗначение, АвтоМинимальноеЗначение, МаксимальноеЗначение, МинимальноеЗначение,
	|АвтоУстановкаТекстаСерий, АвтоУстановкаТекстаТочек, 
	|БазовоеЗначение, ПропускатьБазовоеЗначение, ВидПодписей,  
	|ОтображатьЗаголовок, ОтображатьЛегенду, ОтображениеЗначенияИзмерительнойДиаграммы");
	
	Для каждого КлючИЗначение из КопируемыеСвойства Цикл
		Диаграмма[КлючИЗначение.Ключ] = ДиаграммаИсточник[КлючИЗначение.Ключ];					
	КонецЦикла;		
	
	Если ДиаграммаИсточник.ТипДиаграммы = ТипДиаграммы.Измерительная Тогда
		Для каждого ПолосаИсточник из ДиаграммаИсточник.ПолосыИзмерительнойДиаграммы Цикл
			Полоса = Диаграмма.ПолосыИзмерительнойДиаграммы.Добавить();
			Полоса.Начало = ПолосаИсточник.Начало;
			Полоса.Конец = ПолосаИсточник.Конец;
			Полоса.Подсказка = ПолосаИсточник.Подсказка;
			Полоса.Текст = ПолосаИсточник.Текст;
			Полоса.ЦветФона = ПолосаИсточник.ЦветФона;
		КонецЦикла;
	КонецЕсли;
	
	Диаграмма.ПрозрачныйФон = Истина;
	
	Для каждого СерияИсточник из ДиаграммаИсточник.Серии Цикл
		Серия = Диаграмма.УстановитьСерию(СерияИсточник.Значение);
		Серия.Текст = СерияИсточник.Текст;
		
		Для каждого ТочкаИсточник из ДиаграммаИсточник.Точки Цикл
			Точка = Диаграмма.УстановитьТочку(ТочкаИсточник.Значение);
			Точка.Текст = ТочкаИсточник.Текст;
			
			Попытка 
				ЗначениеИсточник = ДиаграммаИсточник.ПолучитьЗначение(ТочкаИсточник, СерияИсточник);
				Диаграмма.УстановитьЗначение(Точка, Серия, ЗначениеИсточник.Значение,,ЗначениеИсточник.Подсказка);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
	Индекс = ДокументРезультат.Рисунки.Индекс(РисунокДиаграмма);
	
	ОбластьМакетаСДиаграммой = ДокументРезультат.Область(ВыведеннаяОбласть.Верх, ВыведеннаяОбласть.Лево, ВыведеннаяОбласть.Низ, ВыведеннаяОбласть.Право);
	ДокументРезультат.Рисунки[Индекс].Расположить(ОбластьМакетаСДиаграммой);
	
КонецПроцедуры

Процедура ВывестиПоказательНаПечатьКратко(ДокументРезультат, Макет, СтрокаДляВывода) Экспорт
	
	Область = Макет.ПолучитьОбласть("ПоказательКраткоСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	// Вывод маркера состояния
	Область = Макет.ПолучитьОбласть("ПоказательКраткоСтрока|ПоказательСтолбец");
	
	СтрокаЗначения = СтрПолучитьСтроку(СтрокаДляВывода, 1);
	СтрокаРасшифровки = СтрПолучитьСтроку(СтрокаДляВывода, 2);
	
	Если СтрНачинаетсяС(СтрокаРасшифровки, "▲") Тогда
		ЦветШрифта = WebЦвета.Зеленый;
	ИначеЕсли СтрНачинаетсяС(СтрокаРасшифровки, "▼") Тогда
		ЦветШрифта = WebЦвета.Красный;
	Иначе
		ЦветШрифта = WebЦвета.Черный;
	КонецЕсли;
	
	Область.Область().ЦветТекста = ЦветШрифта;
	
	СвойстваОбласти = Новый Структура("Значение, Расшифровка", СтрокаЗначения, СтрокаРасшифровки);
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
	
КонецПроцедуры

Процедура ВывестиПоказательНаПечатьТаблица(ДокументРезультат, Макет, ВариантАнализа, ЭтаФорма, ТаблицаЗначений) Экспорт
	
	ОбластьОтступ = Макет.ПолучитьОбласть("ПоказательТаблицаЗаголовок|ОтступСтолбец");
	ДокументРезультат.Вывести(ОбластьОтступ);
	
	// Вывод шапки таблицы
	Область = Макет.ПолучитьОбласть("ПоказательТаблицаЗаголовок|ПоказательСтолбец");
	
	СвойстваОбласти = Новый Структура("ЗаголовокОбъектАнализа, ЗаголовокЗначение, Разделитель, Размерность",
		"Период/Разрез", "Значение", ", ", ВариантАнализа.Владелец.ЕдиницаИзмерения);
	
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
	
	// Вывод тела таблицы
	Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицы|ПоказательСтолбец");
	
	ОграничениеНаВыводСтрок = 12;
	КоличествоСтрок = ТаблицаЗначений.Количество();
	ЕстьПревышениеОграничения = (КоличествоСтрок > ОграничениеНаВыводСтрок);
	
	ФорматПериода = торо_ПоказателиKPIКлиентСервер.ПолучитьФорматнуюСтрокуДляДаты(ЭтаФорма);
	
	КоличествоВыведенныхСтрок = 0;
	ЗначениеОстальные = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаЗначений Цикл
		Если КоличествоВыведенныхСтрок < 10 Тогда
			ДокументРезультат.Вывести(ОбластьОтступ);
			
			ПредставлениеОбъектаАнализа = "";
			Если ЗначениеЗаполнено(СтрокаТаблицы.Период) Тогда
				ПредставлениеОбъектаАнализа = Формат(СтрокаТаблицы.Период, ФорматПериода);
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.Разрез) Тогда
				ПредставлениеОбъектаАнализа = ?(ПредставлениеОбъектаАнализа="", "", ПредставлениеОбъектаАнализа+" / ")+СтрокаТаблицы.Разрез;
			КонецЕсли;
			
			СвойстваОбласти = Новый Структура("ОбъектАнализа, ЗначениеАнализа", ПредставлениеОбъектаАнализа, СтрокаТаблицы.Значение);
			
			ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
			ДокументРезультат.Присоединить(Область);
			
			КоличествоВыведенныхСтрок = КоличествоВыведенныхСтрок + 1; 
		Иначе
			ЗначениеОстальные = ЗначениеОстальные + СтрокаТаблицы.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицыОтступ|ПоказательСтолбец");
	Если КоличествоСтрок < ОграничениеНаВыводСтрок Тогда
		КоличествоСтрокПустышек = ОграничениеНаВыводСтрок - КоличествоСтрок;
		Пока КоличествоСтрокПустышек > 0 Цикл 
			ДокументРезультат.Вывести(ОбластьОтступ);
			ДокументРезультат.Присоединить(Область);
			
			КоличествоСтрокПустышек = КоличествоСтрокПустышек - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПревышениеОграничения Тогда
		Область = Макет.ПолучитьОбласть("ПоказательТаблицаСтрокаТаблицыЕще|ПоказательСтолбец");
		
		ЗаголовокОстальные = НСтр("ru= 'Остальные'");
		СтрокСверхОграничения = КоличествоСтрок - ОграничениеНаВыводСтрок;
		
		СвойстваОбласти = Новый Структура("ЗаголовокОстальные, СтрокСверхОграничения, ЗначениеОстальные", 
		ЗаголовокОстальные, СтрокСверхОграничения, ЗначениеОстальные);
		
		ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
		
		ДокументРезультат.Вывести(ОбластьОтступ);
		ДокументРезультат.Присоединить(Область);
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ВывестиИнтегральнуюОценкуНаПечать(ДокументРезультат, Макет, ДиаграммаИсточник) Экспорт
	
	Область = Макет.ПолучитьОбласть("ДиаграммаСтрока|Отступ");
	ДокументРезультат.Вывести(Область);
	
	// Вывод диаграммы
	Область = Макет.ПолучитьОбласть("ДиаграммаСтрока|ДиаграммаСтолбец");
	ВыведеннаяОбласть = ДокументРезультат.Присоединить(Область);
	
	РисунокДиаграмма = ДокументРезультат.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Диаграмма);
	РисунокДиаграмма.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная);
	РисунокДиаграмма.ЦветЛинии = WebЦвета.СеребристоСерый;
	
	Диаграмма = РисунокДиаграмма.Объект;
	
	КопируемыеСвойства = Новый Структура("ТипДиаграммы, 
	|АвтоМаксимальноеЗначение, АвтоМинимальноеЗначение, МаксимальноеЗначение, МинимальноеЗначение,
	|АвтоУстановкаТекстаСерий, АвтоУстановкаТекстаТочек, 
	|БазовоеЗначение, ПропускатьБазовоеЗначение, ВидПодписей,  
	|ОтображатьЗаголовок, ОтображатьЛегенду");
	
	Для каждого КлючИЗначение из КопируемыеСвойства Цикл
		Диаграмма[КлючИЗначение.Ключ] = ДиаграммаИсточник[КлючИЗначение.Ключ];					
	КонецЦикла;		
	
	Диаграмма.ПрозрачныйФон = Истина;
	
	Для каждого СерияИсточник из ДиаграммаИсточник.Серии Цикл
		Серия = Диаграмма.УстановитьСерию(СерияИсточник.Значение);
		Серия.Текст = СерияИсточник.Текст;
		
		Для каждого ТочкаИсточник из ДиаграммаИсточник.Точки Цикл
			Точка = Диаграмма.УстановитьТочку(ТочкаИсточник.Значение);
			Точка.Текст = ТочкаИсточник.Текст;
			
			Попытка 
				ЗначениеИсточник = ДиаграммаИсточник.ПолучитьЗначение(ТочкаИсточник, СерияИсточник);
				Диаграмма.УстановитьЗначение(Точка, Серия, ЗначениеИсточник.Значение,,ЗначениеИсточник.Подсказка);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
	Индекс = ДокументРезультат.Рисунки.Индекс(РисунокДиаграмма);
	
	ОбластьМакетаСДиаграммой = ДокументРезультат.Область(ВыведеннаяОбласть.Верх, ВыведеннаяОбласть.Лево, ВыведеннаяОбласть.Низ, ВыведеннаяОбласть.Право);
	ДокументРезультат.Рисунки[Индекс].Расположить(ОбластьМакетаСДиаграммой);	
	
КонецПроцедуры


Процедура ВывестиЗаголовокПоказателяНаПечать(ДокументРезультат, Макет, ВариантАнализа) Экспорт
	
	Разделитель = " / ";
	
	Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|ОтступСтолбец");
	ДокументРезультат.Вывести(Область);
	
	// Вывод наименования показателя
	Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|ЗаголовокПоказателяСтолбец");
	
	СвойстваОбласти = Новый Структура("ЗаголовокПоказателя", ВариантАнализа);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
	
	// Вывод свойств показателя
	Область = Макет.ПолучитьОбласть("ЗаголовокПоказателяСтрока|СвойстваПоказателяСтолбец");
	СвойстваПоказателя = "";
	
	ЕдИзм = ВариантАнализа.Владелец.ЕдиницаИзмерения;
	Если ЗначениеЗаполнено(ЕдИзм) Тогда
		СвойстваПоказателя = СвойстваПоказателя + ЕдИзм;
	КонецЕсли;
	
	СвойстваОбласти = Новый Структура("СвойстваПоказателя", СвойстваПоказателя);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	ДокументРезультат.Присоединить(Область);
	
КонецПроцедуры

Процедура ВывестиОтступ(ДокументРезультат, Макет) Экспорт
	Область = Макет.ПолучитьОбласть("ОтступСтрока");
	ДокументРезультат.Вывести(Область);
КонецПроцедуры

Процедура ВывестиЗаголовок(ДокументРезультат, Макет) Экспорт
	
	Область = Макет.ПолучитьОбласть("Заголовок");
	
	СвойстваОбласти = Новый Структура("Заголовок", НСтр("ru= 'Монитор KPI'"));
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 
	
	ВывестиОтступ(ДокументРезультат, Макет);
	ДокументРезультат.Вывести(Область);
	ВывестиОтступ(ДокументРезультат, Макет);
	
КонецПроцедуры

Процедура ВывестиПараметры(ДокументРезультат, Макет, СтруктураПараметров) Экспорт
	
	Область = Макет.ПолучитьОбласть("Параметры");
	
	СтрокаЗначениеПараметров = торо_ПоказателиKPIКлиентСервер.СфомироватьСтрокуПараметров(СтруктураПараметров);
	
	СвойстваОбласти = Новый Структура("ЗначениеПараметров", СтрокаЗначениеПараметров);
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 

	ДокументРезультат.Вывести(Область);
		
КонецПроцедуры

Процедура ВывестиДатуВремяФормирования(ДокументРезультат, Макет)  Экспорт
	Область = Макет.ПолучитьОбласть("ДатаВремяФормирования");
	
	СвойстваОбласти = Новый Структура("ЗаголовокСформирован, ДатаВремяФормирования", 
		НСтр("ru= 'Сформирован'")+ ":",
		ТекущаяДатаСеанса());
	ЗаполнитьЗначенияСвойств(Область.Параметры, СвойстваОбласти); 

	ДокументРезультат.Вывести(Область);
КонецПроцедуры

Процедура ВывестиСообщениеНетДоступныхПоказателей(ДокументРезультат, Макет, Выводить) Экспорт
	Если Выводить Тогда
		Область = Макет.ПолучитьОбласть("НетДоступныхПоказателей");
		ДокументРезультат.Вывести(Область);
	КонецЕсли;
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// Мелкие

Функция ПолучитьКопиюТаблицыФормы(ТаблицаФормы)
	
	Если ТипЗнч(ТаблицаФормы) = Тип("ТаблицаЗначений") Тогда
		Возврат ТаблицаФормы.Скопировать();
	Иначе
		Возврат ТаблицаФормы.Выгрузить();
	КонецЕсли;
	
КонецФункции

Процедура УстановитьОтборСКДПоСпискуЗначений(НастройкиКД, ИмяПоля, СписокЗначенияДляОтбора)
	
	ДоступноеПолеОтбора = НастройкиКД.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПоля));
	Если ДоступноеПолеОтбора <> Неопределено Тогда
		Отбор = НастройкиКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Отбор.Использование = Истина;
		Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
		Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Отбор.ПравоеЗначение = СписокЗначенияДляОтбора;
	КонецЕсли;
	
КонецПроцедуры

Функция НачалоПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНедели(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода(Дата);
	КонецЕсли;
	
КонецФункции

Функция КонецПериода(Дата, Периодичность)
	
	Если Периодичность = Перечисления.Периодичность.День Тогда
		Возврат КонецДня(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала(Дата);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат КонецГода(Дата);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтрокуАналитикПоТипуПоказателя(Тип, СУчетомПериодичности)
	
	СтрокаАналитик = "Организация";
	Если Тип = Перечисления.торо_ТипыПоказателейKPI.ПоказательПодразделения Тогда
		СтрокаАналитик = "Организация, Подразделение";
	ИначеЕсли Тип = Перечисления.торо_ТипыПоказателейKPI.ПоказательОбъектаРемонта Тогда
		СтрокаАналитик = "Организация, Подразделение, ОбъектРемонта";
	КонецЕсли;
	
	Если СУчетомПериодичности Тогда
		СтрокаАналитик = "Период, "+СтрокаАналитик;
	КонецЕсли;
	
	Возврат СтрокаАналитик;
	
КонецФункции

#КонецОбласти

#КонецОбласти

