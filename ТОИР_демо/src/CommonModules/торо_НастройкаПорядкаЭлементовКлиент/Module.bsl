////////////////////////////////////////////////////////////////////////////////
// торо_НастройкаПорядкаЭлементовКлиент: методы, для работы с порядком элементов
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
// Обработчик команды "Переместить вверх" формы списка.
//
// Параметры:
//  РеквизитФормыДерево - ДинамическийСписок - реквизит формы, содержащий список;
//  ЭлементФормыДерево  - ТаблицаФормы       - элемент формы, содержащий список.
//  СтруктураИерархии - СправочникССылка.торо_СтруктурыОР - структура иерархии.
//
// Возвращаемое значение:
//  Структура - структура с параметрами сдвига.
Функция ПереместитьЭлементВверхВыполнить(РеквизитФормыДерево, ЭлементФормыДерево, СтруктураИерархии) Экспорт
	
	Возврат ПереместитьЭлемент(РеквизитФормыДерево, ЭлементФормыДерево, "Вверх", СтруктураИерархии);
	
КонецФункции

// Обработчик команды "Переместить вниз" формы списка.
//
// Параметры:
//  РеквизитФормыСписок - ДинамическийСписок - реквизит формы, содержащий список;
//  ЭлементФормыСписок  - ТаблицаФормы       - элемент формы, содержащий список.
//  СтруктураИерархии - СправочникССылка.торо_СтруктурыОР - структура иерархии.
//
// Возвращаемое значение:
//  Структура - структура с параметрами сдвига.
Функция ПереместитьЭлементВнизВыполнить(РеквизитФормыСписок, ЭлементФормыСписок, СтруктураИерархии) Экспорт
	
	Возврат ПереместитьЭлемент(РеквизитФормыСписок, ЭлементФормыСписок, "Вниз", СтруктураИерархии);
	
КонецФункции

// Визуально перемещает элемент на форме.
//
// Параметры:
//  ЭтаФорма - УправляемаяФорма - форма списка.
//  ИмяРеквизитаДерево - Строка - имя реквизита с деревом.
//  ИмяРеквизитаСписок - Строка - имя реквизита со списком.
//  СтруктураСдвига - Структура - структура с параметрами сдвига.
//
Процедура ВыполнитьСдвигЭлементаНаФорме(ЭтаФорма, ИмяРеквизитаДерево, ИмяРеквизитаСписок, СтруктураСдвига) Экспорт
	
	Если СтруктураСдвига = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВеличинаСдвига = 0;
	РеквизитДопУпорядочивания = Неопределено;
	
	СтруктураСдвига.Свойство("ВеличинаСдвига", ВеличинаСдвига);
	СтруктураСдвига.Свойство("РеквизитДопУпорядочивания", РеквизитДопУпорядочивания);
	
	Если ВеличинаСдвига = Неопределено ИЛИ ВеличинаСдвига = 0 
		ИЛИ РеквизитДопУпорядочивания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеСписка = Неопределено;
	ТекущиеДанныеДерева = Неопределено;
	
	// Если список есть, то нужно сдвинуть и в списке и в дереве
	Если ЗначениеЗаполнено(ИмяРеквизитаСписок) Тогда
		
		Если ЭтаФорма.ТекущийЭлемент = ЭтаФорма.Элементы[ИмяРеквизитаСписок] Тогда
			
			ТекущиеДанныеСписка = ЭтаФорма.Элементы[ИмяРеквизитаСписок].ТекущиеДанные;
						
			МассивСтрокДерева = Новый Массив;
			торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДерева, ЭтаФорма[ИмяРеквизитаДерево].ПолучитьЭлементы());
			Для каждого СтрокаДерева из МассивСтрокДерева Цикл
				Если СтрокаДерева.Ссылка = ТекущиеДанныеСписка.Ссылка Тогда
					ТекущиеДанныеДерева = СтрокаДерева;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
		
			ТекущиеДанныеДерева = ЭтаФорма.Элементы[ИмяРеквизитаДерево].ТекущиеДанные;
			
			// Строку списка сдвигать не надо, но значение реквизита упорядочивания лучше обновить.
			СтрокиСписка = ЭтаФорма[ИмяРеквизитаСписок].НайтиСтроки(Новый Структура("Ссылка", ТекущиеДанныеДерева.Ссылка));
			Если СтрокиСписка.Количество() > 0 Тогда
				СтрокиСписка[0].РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // есть только дерево, в нем и сдвигаем
		ТекущиеДанныеДерева = ЭтаФорма.Элементы[ИмяРеквизитаДерево].ТекущиеДанные;
	КонецЕсли;
	
	// Сдвиги
	Если ТекущиеДанныеСписка <> Неопределено Тогда
		ИндексСтрокиСписка = ЭтаФорма[ИмяРеквизитаСписок].Индекс(ТекущиеДанныеСписка);
		НовыйИндексСписка = ИндексСтрокиСписка + ВеличинаСдвига;

		ТекущиеДанныеСписка.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
		
		Если НовыйИндексСписка >= 0 И НовыйИндексСписка < ЭтаФорма[ИмяРеквизитаСписок].Количество() Тогда
			ЭтаФорма[ИмяРеквизитаСписок].Сдвинуть(ИндексСтрокиСписка, ВеличинаСдвига);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеДерева <> Неопределено Тогда
		Родитель = ТекущиеДанныеДерева.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			Родитель = ЭтаФорма[ИмяРеквизитаДерево];
		КонецЕсли;
		ЭлементыРодителя = Родитель.ПолучитьЭлементы();
		ИндексСтрокиДерева = ЭлементыРодителя.Индекс(ТекущиеДанныеДерева);
		НовыйИндексДерева = ИндексСтрокиДерева + ВеличинаСдвига;
		
		ТекущиеДанныеДерева.РеквизитДопУпорядочивания = РеквизитДопУпорядочивания;
		
		Если НовыйИндексДерева >= 0 И НовыйИндексДерева < ЭлементыРодителя.Количество() Тогда
			ЭлементыРодителя.Сдвинуть(ИндексСтрокиДерева, ВеличинаСдвига);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПереместитьЭлемент(ДеревоРеквизит, ДеревоЭлемент, Направление, СтруктураИерархии)
	
	Если ДеревоЭлемент.ТекущиеДанные = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтруктураСдвига = Новый Структура("ВеличинаСдвига, РеквизитДопУпорядочивания",0, Неопределено);
	
	ТекстОшибки = торо_НастройкаПорядкаЭлементовСлужебныйВызовСервера.ИзменитьПорядокЭлементов(
		ДеревоЭлемент.ТекущиеДанные.Ссылка, ДеревоЭлемент.ТекущиеДанные.РеквизитДопУпорядочивания, Направление, СтруктураИерархии, СтруктураСдвига);
		
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(Неопределено, ТекстОшибки);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтруктураСдвига;
	
КонецФункции

#КонецОбласти


