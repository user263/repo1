
////////////////////////////////////////////////////////////////////////////////
// торо_ЗаполнениеДокументов: процедуры и функции, получающие значения для подстановки в документы при их создании.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизтов шапки, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
// Проверяется также правильность заполнения реквизитов ссылочных полей документа.
// Проверка выполняется по объекту и по выборке из результата запроса по шапке.
//
// Параметры: 
//  ДокументОбъект             - ДокументОбъект - объект проводимого документа, 
//  СтруктураОбязательныхПолей - Структура - содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - Булево - флаг отказа в проведении.
//  Заголовок                  - Строка - заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеШапкиДокумента(ДокументОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок) Экспорт
	
	МетаданныеРеквизиты = ДокументОбъект.Метаданные().Реквизиты;
	
	Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
		
		Значение = ДокументОбъект[КлючЗначение.Ключ];
		Если НЕ ЗначениеЗаполнено(Значение) Тогда
			
			Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
				ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
				СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита ""%1""!'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,СокрЛП(ПредставлениеРеквизита));
			Иначе
				СтрокаСообщения = КлючЗначение.Значение;
			КонецЕсли;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Представление наименования ОР исходя из кастроек константы "торо_НаименованиеОРДляПечати".
//
// Параметры:
//  ОбъектРемонта - СправочникСсылка.торо_ОбъектыРемонта - объект ремонта.
//  Отказ - Булево - признак ошибки.
//
// Возвращаемое значение:
//  Строка - представление для печати.
Функция ПолучитьПредоставленияОРДляПечати (ОбъектРемонта,Отказ=Ложь) Экспорт 
	Попытка	
		ЗначениеКонстантыОР = Константы.торо_НаименованиеОРДляПечати.Получить();
		Если ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.НаименованиеОР  
			или ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.ПустаяСсылка() Тогда
			ОтказавшийОбъектРемонта = ОбъектРемонта;
		ИначеЕсли ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.НаименованиеОР_КодОР Тогда
			ОтказавшийОбъектРемонта = СокрЛП(ОбъектРемонта) + " (" + СокрЛП(ОбъектРемонта.Код) +")";
		ИначеЕсли ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.НаименованиеОР_ИнвНомОР Тогда
			ОтказавшийОбъектРемонта = СокрЛП(ОбъектРемонта) + " (" + СокрЛП(ОбъектРемонта.ИнвентарныйНомер) +")";
		ИначеЕсли ЗначениеКонстантыОР = Перечисления.торо_ПредставлениеОРДляПечати.ПолноеНаименованиеОР Тогда
			ОтказавшийОбъектРемонта = торо_РаботаСИерархией.ПолноеНаименованиеОР(ОбъектРемонта);
		КонецЕсли;
		
		Возврат ОтказавшийОбъектРемонта;
	Исключение
		#Если Клиент Тогда
			ПоказатьПредупреждение(Неопределено,ИнформацияОбОшибке().Причина.Описание);
		#КонецЕсли
		Отказ=Истина;
	КонецПопытки;
КонецФункции

// Представление наименования ОР исходя из кастроек константы "торо_НаименованиеОРДляПечати".
//
// Параметры:
//  ВидРемонта - СправочникСсылка.торо_ВидыРемонта - вид ремонта.
//  Отказ - Булево - признак ошибки.
//
// Возвращаемое значение:
//  Строка - представление для печати.
Функция ПолучитьПредоставленияВРДляПечати (ВидРемонта,Отказ=Ложь) Экспорт 
	Попытка	
		Если ЗначениеЗаполнено(ВидРемонта) Тогда
			ЗначениеКонстантыВР = Константы.торо_ПредставлениеВРДляПечати.Получить();
			Если ЗначениеКонстантыВР = Перечисления.торо_ВидыПредставленийВРДляПечати.КодВР
				или ЗначениеКонстантыВР = Перечисления.торо_ВидыПредставленийВРДляПечати.ПустаяСсылка() Тогда
				ВидРемонтаТекст = СокрЛП(ВидРемонта.Код);
			ИначеЕсли ЗначениеКонстантыВР = Перечисления.торо_ВидыПредставленийВРДляПечати.НаименованиеВР Тогда
				ВидРемонтаТекст = СокрЛП(ВидРемонта);
			ИначеЕсли ЗначениеКонстантыВР = Перечисления.торо_ВидыПредставленийВРДляПечати.НаименованиеВР_КодВР Тогда
				ВидРемонтаТекст = СокрЛП(ВидРемонта) + " (" + СокрЛП(ВидРемонта.Код) +")";
			КонецЕсли;	
			Возврат ВидРемонтаТекст;
		КонецЕсли;
	Исключение
		#Если Клиент Тогда
			ПоказатьПредупреждение(Неопределено,ОписаниеОшибки());
		#КонецЕсли
		Отказ=Истина;
	КонецПопытки;
КонецФункции

// Процедура выполняет проверку на возможность ввода документа, на основании документа,
// переданного в параметре "Основание".
// Параметры:
//		Основание - ДокументСсылка - документ основание,
//		Отказ     - Булево - параметр из обработчика события формы ПриСозданииНаСервере.
//		
Процедура ПроверитьВозможностьВводаНаОсновании (Основание, Отказ) Экспорт
	Если ЗначениеЗаполнено(Основание)
		И Не Основание.Проведен Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Создание документа возможно только на основании проведенного документа.'"));
		Отказ = Истина;
	КонецЕсли;	
КонецПроцедуры

// Заполняет документ на оснвании другого.
// Параметры:
//  Основание - ДокументСсылка - документ-основание.
//  ДокументОбъект - ДокументОбъект - заполняемый документ.
Процедура ЗаполнитьДокументНаОсновании(Основание, ДокументОбъект) Экспорт
	
	ТипЗначенияДокумента = ТипЗнч(ДокументОбъект.Ссылка);
	
	ЭтоРегламентныеМероприятия = Ложь;
	
	ЭтоЗаявка = Ложь;
	ЭтоНаряд  = Ложь;
	ЭтоАкт    = Ложь;
	
	СтрокаДляПодстановкиТипаВзапрос = "";
	
	
	Если ТипЗначенияДокумента = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда 
		
		ЭтоЗаявка = Истина;
		СтрокаДляПодстановкиТипаВзапрос = "Документ.торо_ЗаявкаНаРемонт";
		
	ИначеЕсли ТипЗначенияДокумента = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		ЭтоНаряд  = Истина;
		СтрокаДляПодстановкиТипаВзапрос = "Документ.торо_НарядНаВыполнениеРемонтныхРабот";
		
	ИначеЕсли ТипЗначенияДокумента = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		
		ЭтоАкт    = Истина;
		СтрокаДляПодстановкиТипаВзапрос = "Документ.торо_АктОВыполненииЭтапаРабот";	
		
		// РЕГЛАМЕНТНЫЕ
	ИначеЕсли ТипЗначенияДокумента = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		
		ЭтоНаряд  = Истина;
		ЭтоРегламентныеМероприятия = Истина;
		СтрокаДляПодстановкиТипаВзапрос = "Документ.торо_НарядНаРегламентноеМероприятие";
		
	ИначеЕсли ТипЗначенияДокумента = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
		ЭтоАкт    = Истина;
		ЭтоРегламентныеМероприятия = Истина;
		СтрокаДляПодстановкиТипаВзапрос = "Документ.торо_АктОВыполненииРегламентногоМероприятия";
		
	ИначеЕсли ТипЗначенияДокумента = Тип("ДокументСсылка.торо_АктПриемкиОборудования") И ТипЗнч(Основание) = Тип("Соответствие") Тогда
		
		Для каждого Элемент Из Основание Цикл
			ID = Элемент.Ключ;
			ДокОснование = Элемент.Значение;
		КонецЦикла; 
		ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(ДокОснование);
		РемонтыОборудования = ДокОснование[ИмяТЧ];
		НС = ДокументОбъект.РемонтыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, РемонтыОборудования[0]);
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
			НайденнаяСтрока = РемонтыОборудования.Найти(ID, "ID");
			ЗаполнитьЗначенияСвойств(НС, НайденнаяСтрока);
			НС.ОбъектРемонта = НайденнаяСтрока.ОбъектРемонтныхРабот;
			НС.ДатаНачала = НайденнаяСтрока.ДатаНач;
			НС.ДатаОкончания = НайденнаяСтрока.ДатаКон;
		ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			НС.ВидРемонтныхРабот = Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
			НС.ДатаНачала = РемонтыОборудования[0].ПлановаяДатаРемонта;
			НС.ДатаОкончания = РемонтыОборудования[0].ПлановаяДатаРемонта;
		ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
			НС.ВидРемонтныхРабот = РемонтыОборудования[0].ВидРемонтов;			
		КонецЕсли; 
		НС.ДокументИсточник = ДокОснование;
		
		Если ДокументОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ДокОснование)).Количество() = 0 Тогда
			ДокументОбъект.ДокументыОснования.Добавить().ДокументОснование = ДокОснование;
		КонецЕсли;
		Возврат;
		
	ИначеЕсли ТипЗначенияДокумента = Тип("ДокументСсылка.торо_ОстановочныеРемонты") И ТипЗнч(Основание) = Тип("Соответствие") Тогда
		Для каждого Элемент Из Основание Цикл
			ID = Элемент.Ключ;
			ДокОснование = Элемент.Значение;
		КонецЦикла;
		ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(ДокОснование);
		ДокументОбъект.ДокументОснование = ДокОснование;
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
			НайденнаяСтрока = ДокОснование[ИмяТЧ].Найти(ID, "ID");
			ДокументОбъект.IDОсновногоРемонта =  НайденнаяСтрока.ID;
			ДокументОбъект.ОбъектРемонта =  НайденнаяСтрока.ОбъектРемонтныхРабот;
			ДокументОбъект.ДатаНачалаРемонта =  НайденнаяСтрока.ДатаНач;
			ДокументОбъект.ДатаОкончанияРемонта =  НайденнаяСтрока.ДатаКон;
			ДокументОбъект.ДатаНачалаРемонтаСт = НайденнаяСтрока.ДатаНач;
			ДокументОбъект.ДатаОкончанияРемонтаСт = НайденнаяСтрока.ДатаКон;
			ДокументОбъект.ВидРемонта = НайденнаяСтрока.ВидРемонтныхРабот;
		Иначе
			ДокументОбъект.IDОсновногоРемонта =  ДокОснование[ИмяТЧ][0].ID;
			ДокументОбъект.ОбъектРемонта = ДокОснование[ИмяТЧ][0].ОбъектРемонта;
			ДокументОбъект.ДатаНачалаРемонта = ДокОснование[ИмяТЧ][0].ДатаНачала;
			ДокументОбъект.ДатаОкончанияРемонта = ДокОснование[ИмяТЧ][0].ДатаОкончания;
			ДокументОбъект.ДатаНачалаРемонтаСт = ДокОснование[ИмяТЧ][0].ДатаНачала;
			ДокументОбъект.ДатаОкончанияРемонтаСт = ДокОснование[ИмяТЧ][0].ДатаОкончания;
			ДокументОбъект.ВидРемонта = ДокОснование[ИмяТЧ][0].ВидРемонтныхРабот;
		КонецЕсли;
		Возврат;
	КонецЕсли; 	
	
	Если ТипЗнч(Основание) = Тип("Соответствие") Тогда
		
		Запрос = Новый Запрос;
		
		// Формирование списка документов оснований для получения данных из ТЧ и Реквизитов.
		
		СписокТиповДокументов = Новый СписокЗначений;
		
		ТаблицаДокументовОснований = Новый ТаблицаЗначений;
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Строка"));
		КвалификаторыСтроки = Новый КвалификаторыСтроки(36,ДопустимаяДлина.Переменная);
		
		ТаблицаДокументовОснований.Колонки.Добавить("Ключ",Новый ОписаниеТипов(МассивТипов,,КвалификаторыСтроки));
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
		МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
		МассивТипов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
		МассивТипов.Добавить(Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот"));
		МассивТипов.Добавить(Тип("ДокументСсылка.торо_ПланГрафикРемонта"));
		МассивТипов.Добавить(Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие"));
		МассивТипов.Добавить(Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР"));
		
		ТаблицаДокументовОснований.Колонки.Добавить("Значение",Новый ОписаниеТипов(МассивТипов));
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаДокументовОснований.Ключ КАК ID,
		|	ТаблицаДокументовОснований.Значение КАК Ссылка
		|ПОМЕСТИТЬ ТаблицаДокументовОснований
		|ИЗ
		|	&ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_Ремонты.ID КАК ID,
		|	торо_Ремонты.ОбъектРемонта КАК ОбъектРемонта,
		|	ВЫБОР 
		|		КОГДА торо_Ремонты.ВидРемонта = Значение(Справочник.торо_ВидыРемонтов.ПустаяСсылка) 
		|			ТОГДА &ВидРемонта 
		|		ИНАЧЕ торо_Ремонты.ВидРемонта 
		|	КОНЕЦ КАК ВидРемонтныхРабот,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_НарядНаВыполнениеРемонтныхРабот)
		|             ИЛИ ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_НарядНаРегламентноеМероприятие) 
		|			ТОГДА торо_Ремонты.ДатаНачалаФакт
		|		ИНАЧЕ торо_Ремонты.ДатаНачалаПлан
		|	КОНЕЦ КАК ДатаНачала,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_НарядНаВыполнениеРемонтныхРабот)
		|             ИЛИ ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_НарядНаРегламентноеМероприятие) 
		|			ТОГДА торо_Ремонты.ДатаОкончанияФакт
		|		ИНАЧЕ торо_Ремонты.ДатаОкончанияПлан
		|	КОНЕЦ КАК ДатаОкончания,
		|	торо_Ремонты.СпособВыполнения КАК СпособВыполнения,
		|	торо_Ремонты.ГарантийныйРемонт КАК ГарантийныйРемонт,
		|	ТаблицаДокументовОснований.Ссылка КАК ДокументИсточник,
		|	(ЕСТЬNULL (торо_ВыявленныеДефектыСписокДефектов.НаправлениеНаУстранение,"""")) КАК ОписаниеРемонта
		|ПОМЕСТИТЬ Ремонты
		|ИЗ
		|	ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		|		ПО ТаблицаДокументовОснований.Ссылка = торо_Ремонты.Регистратор
		|			И ТаблицаДокументовОснований.ID = торо_Ремонты.ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефектыСписокДефектов
		|		ПО ТаблицаДокументовОснований.ID = торо_ВыявленныеДефектыСписокДефектов.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Ремонты.ID КАК ID
		|ПОМЕСТИТЬ ДляРемонтовНеНужноПолучатьОперации 
		|ИЗ
		|	Ремонты КАК Ремонты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		|		ПО ТипЗначения(торо_Ремонты.Регистратор) = Тип(" + СтрокаДляПодстановкиТипаВзапрос + ")
		|				И торо_Ремонты.ID = Ремонты.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Ремонты.ID                КАК ID,
		|	Ремонты.ОбъектРемонта     КАК ОбъектРемонта,
		|	Ремонты.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	Ремонты.ДатаНачала        КАК ДатаНачала,
		|	Ремонты.ДатаОкончания     КАК ДатаОкончания,
		|	Ремонты.СпособВыполнения  КАК СпособВыполнения,
		|	Ремонты.ГарантийныйРемонт КАК ГарантийныйРемонт,
		|	Ремонты.ДокументИсточник  КАК ДокументИсточник,
		|	Ремонты.ДокументИсточник.Организация,
		|	Ремонты.ДокументИсточник.Подразделение,
		|	Ремонты.ОписаниеРемонта
		|ИЗ
		|	Ремонты КАК Ремонты";
		
		
		
		ЭтоПервыйЗапрос = Истина;
		ЕстьСписокОпераций = Ложь;
		// данные по операциям
		Для каждого Элемент Из Основание Цикл
			
			НС = ТаблицаДокументовОснований.Добавить();
			
			ЗаполнитьЗначенияСвойств(НС,Элемент);
			
			ТипЗначенияДокументаОснования = ТипЗнч(Элемент.Значение);
			
			Если Не СписокТиповДокументов.НайтиПоЗначению(ТипЗначенияДокументаОснования) = Неопределено Тогда
				Продолжить;
			Иначе
				СписокТиповДокументов.Добавить(ТипЗначенияДокументаОснования);
			КонецЕсли; 
			
			// Если в документе основании можно получить операци, то получаем из него.
			Если ТипЗначенияДокументаОснования = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
				
				ЕстьСписокОпераций = Истина;				
				
				Если ЭтоПервыйЗапрос Тогда
					Запрос.Текст = Запрос.Текст +"
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////";
					
					ЭтоПервыйЗапрос = Ложь;
				Иначе
					Запрос.Текст = Запрос.Текст +"
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + " 
				|ВЫБРАТЬ
				|	ТаблицаДокументовОснований.ID                          КАК РемонтыОборудования_ID,
				|	ТаблицаДокументовОснований.Ссылка                      КАК Ссылка,
				|	торо_ОперацииВнешнихОснованийДляРабот.РемонтнаяРабота  КАК РемонтнаяРабота,
				|	торо_ОперацииВнешнихОснованийДляРабот.ID               КАК ID,
				|	торо_ОперацииВнешнихОснованийДляРабот.Родитель_ID      КАК Родитель_ID,
				|	торо_ОперацииВнешнихОснованийДляРабот.Количество       КАК Количество,
				|	2                                                      КАК Картинка
				|ИЗ
				|	ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОперацииВнешнихОснованийДляРабот КАК торо_ОперацииВнешнихОснованийДляРабот
				|		ПО ТаблицаДокументовОснований.ID = торо_ОперацииВнешнихОснованийДляРабот.Предписание_ID
				|		И ТипЗначения(ТаблицаДокументовОснований.Ссылка) = Тип(Документ.торо_ВнешнееОснованиеДляРабот)
				|		ЛЕВОЕ СОЕДИНЕНИЕ ДляРемонтовНеНужноПолучатьОперации КАК ДляРемонтовНеНужноПолучатьОперации
				|		ПО ДляРемонтовНеНужноПолучатьОперации.ID = ТаблицаДокументовОснований.ID
				|ГДЕ
				|	ДляРемонтовНеНужноПолучатьОперации.ID ЕСТЬ NULL";
				
			ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
				
				ЕстьСписокОпераций = Истина;
				Если ЭтоПервыйЗапрос Тогда
					Запрос.Текст = Запрос.Текст +"
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////";
					
					ЭтоПервыйЗапрос = Ложь;
				Иначе
					Запрос.Текст = Запрос.Текст +"
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	ТаблицаДокументовОснований.ID                      КАК РемонтыОборудования_ID,
				|	ТаблицаДокументовОснований.Ссылка                  КАК Ссылка,
				|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
				|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID              КАК ID,
				|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID     КАК Родитель_ID,
				|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Количество      КАК Количество,
				|	ВЫБОР
				|		КОГДА ТипЗначения(торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота) = Тип(Справочник.торо_ТехнологическиеОперации)
				|			ТОГДА 2 
				|		ИНАЧЕ 0
				|	КОНЕЦ                                              КАК Картинка
				|ИЗ
				|	ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
				|		ПО ТаблицаДокументовОснований.ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID
				|			И ТаблицаДокументовОснований.Ссылка = торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ ДляРемонтовНеНужноПолучатьОперации КАК ДляРемонтовНеНужноПолучатьОперации
				|		ПО ДляРемонтовНеНужноПолучатьОперации.ID = ТаблицаДокументовОснований.ID
				|ГДЕ
				|	ДляРемонтовНеНужноПолучатьОперации.ID ЕСТЬ NULL";
				
			ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
				
				ЕстьСписокОпераций = Истина;
				Если ЭтоПервыйЗапрос Тогда
					Запрос.Текст = Запрос.Текст +"
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////";
					
					ЭтоПервыйЗапрос = Ложь;
				Иначе
					Запрос.Текст = Запрос.Текст +"
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	ТаблицаДокументовОснований.ID КАК РемонтыОборудования_ID,
				|	ТаблицаДокументовОснований.Ссылка,
				|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота,
				|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID КАК ID,
				|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Родитель_ID,
				|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Количество,
				|	ВЫБОР
				|		КОГДА ТипЗначения(торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота) = Тип(Справочник.торо_ТехнологическиеОперации)
				|			ТОГДА 2 
				|		ИНАЧЕ 0
				|	КОНЕЦ                                              КАК Картинка
				
				|ИЗ
				|	ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
				|		ПО ТаблицаДокументовОснований.ID = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID
				|			И ТаблицаДокументовОснований.Ссылка = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ ДляРемонтовНеНужноПолучатьОперации КАК ДляРемонтовНеНужноПолучатьОперации
				|		ПО ДляРемонтовНеНужноПолучатьОперации.ID = ТаблицаДокументовОснований.ID
				|ГДЕ
				|	ДляРемонтовНеНужноПолучатьОперации.ID ЕСТЬ NULL";
				
			ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
				
				ЕстьСписокОпераций = Истина;
				
				Если ЭтоПервыйЗапрос Тогда
					Запрос.Текст = Запрос.Текст +"
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////";
					
					ЭтоПервыйЗапрос = Ложь;
				Иначе
					Запрос.Текст = Запрос.Текст +"
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	ТаблицаДокументовОснований.ID КАК РемонтыОборудования_ID,
				|	ТаблицаДокументовОснований.Ссылка КАК Ссылка,
				|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК РемонтнаяРабота,
				|	"""" КАК ID,
				|	"""" КАК Родитель_ID,
				|	1 КАК Количество,
				|	0 КАК Картинка
				|ИЗ
				|	ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Ремонты КАК Ремонты
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
				|			ПО ТипЗначения(Ремонты.ДокументИсточник) = Тип(Документ.торо_ПланГрафикРемонта)
				|				И Ремонты.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
				|				И Ремонты.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
				|		ПО ТаблицаДокументовОснований.ID = Ремонты.ID
				|					И ТаблицаДокументовОснований.Ссылка = Ремонты.ДокументИсточник
				|		ЛЕВОЕ СОЕДИНЕНИЕ ДляРемонтовНеНужноПолучатьОперации КАК ДляРемонтовНеНужноПолучатьОперации
				|		ПО ДляРемонтовНеНужноПолучатьОперации.ID = ТаблицаДокументовОснований.ID
				|ГДЕ
				|	ДляРемонтовНеНужноПолучатьОперации.ID ЕСТЬ NULL";
				
				
			ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
				
				ЕстьСписокОпераций = Истина;
				
				Если ЭтоПервыйЗапрос Тогда
					Запрос.Текст = Запрос.Текст +"
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////";
					
					ЭтоПервыйЗапрос = Ложь;
				Иначе
					Запрос.Текст = Запрос.Текст +"
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	ТаблицаДокументовОснований.ID КАК РемонтыОборудования_ID,
				|	ТаблицаДокументовОснований.Ссылка КАК Ссылка,
				|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК РемонтнаяРабота,
				|	"""" КАК ID,
				|	"""" КАК Родитель_ID,
				|	1 КАК Количество,
				|	0 КАК Картинка
				|ИЗ
				|	ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Ремонты КАК Ремонты
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
				|			ПО ТипЗначения(Ремонты.ДокументИсточник) = Тип(Документ.торо_ВыявленныеДефекты)
				|				И Ремонты.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
				|				И Ремонты.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
				|		ПО ТаблицаДокументовОснований.ID = Ремонты.ID
				|					И ТаблицаДокументовОснований.Ссылка = Ремонты.ДокументИсточник
				|		ЛЕВОЕ СОЕДИНЕНИЕ ДляРемонтовНеНужноПолучатьОперации КАК ДляРемонтовНеНужноПолучатьОперации
				|		ПО ДляРемонтовНеНужноПолучатьОперации.ID = ТаблицаДокументовОснований.ID
				|ГДЕ
				|	ДляРемонтовНеНужноПолучатьОперации.ID ЕСТЬ NULL";
				
				
			ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
				
				ЕстьСписокОпераций = Истина;
				
				Если ЭтоПервыйЗапрос Тогда
					Запрос.Текст = Запрос.Текст +"
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////";
					
					ЭтоПервыйЗапрос = Ложь;
				Иначе
					Запрос.Текст = Запрос.Текст +"
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	ТаблицаДокументовОснований.ID КАК РемонтыОборудования_ID,
				|	ТаблицаДокументовОснований.Ссылка КАК Ссылка,
				|	торо_НормативныеРемонтыОборудования.НормативныйРемонт КАК РемонтнаяРабота,
				|	"""" КАК ID,
				|	"""" КАК Родитель_ID,
				|	1 КАК Количество,
				|	0 КАК Картинка
				|ИЗ
				|	ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Ремонты КАК Ремонты
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_НормативныеРемонтыОборудования
				|			ПО ТипЗначения(Ремонты.ДокументИсточник) = Тип(Документ.торо_ГрафикРегламентныхМероприятийТОиР)
				|				И Ремонты.ОбъектРемонта = торо_НормативныеРемонтыОборудования.СписокОбъектов
				|				И Ремонты.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидМероприятия
				|		ПО ТаблицаДокументовОснований.ID = Ремонты.ID
				|					И ТаблицаДокументовОснований.Ссылка = Ремонты.ДокументИсточник
				|					
				|		ЛЕВОЕ СОЕДИНЕНИЕ ДляРемонтовНеНужноПолучатьОперации КАК ДляРемонтовНеНужноПолучатьОперации
				|		ПО ДляРемонтовНеНужноПолучатьОперации.ID = ТаблицаДокументовОснований.ID
				|ГДЕ
				|	ДляРемонтовНеНужноПолучатьОперации.ID ЕСТЬ NULL";
				
				
			ИначеЕсли ТипЗначенияДокументаОснования = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
				
				ЕстьСписокОпераций = Истина;
				Если ЭтоПервыйЗапрос Тогда
					Запрос.Текст = Запрос.Текст +"
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////";
					
					ЭтоПервыйЗапрос = Ложь;
				Иначе
					Запрос.Текст = Запрос.Текст +"
					|ОБЪЕДИНИТЬ ВСЕ
					|";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + "
				|ВЫБРАТЬ
				|	ТаблицаДокументовОснований.ID КАК РемонтыОборудования_ID,
				|	ТаблицаДокументовОснований.Ссылка,
				|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота,
				|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID КАК ID,
				|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Родитель_ID,
				|	1 КАК Количество,
				|	ВЫБОР
				|		КОГДА ТипЗначения(торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтнаяРабота) = Тип(Справочник.торо_ТехнологическиеОперации)
				|			ТОГДА 2 
				|		ИНАЧЕ 0
				|	КОНЕЦ                                              КАК Картинка				
				|ИЗ
				|	ТаблицаДокументовОснований КАК ТаблицаДокументовОснований
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
				|		ПО ТаблицаДокументовОснований.ID = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID
				|			И ТаблицаДокументовОснований.Ссылка = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка
				|		ЛЕВОЕ СОЕДИНЕНИЕ ДляРемонтовНеНужноПолучатьОперации КАК ДляРемонтовНеНужноПолучатьОперации
				|		ПО ДляРемонтовНеНужноПолучатьОперации.ID = ТаблицаДокументовОснований.ID
				|ГДЕ
				|	ДляРемонтовНеНужноПолучатьОперации.ID ЕСТЬ NULL";
				
				
			КонецЕсли;
			
		КонецЦикла; 
		
		Запрос.УстановитьПараметр("ТаблицаДокументовОснований", ТаблицаДокументовОснований);
		Запрос.УстановитьПараметр("ВидРемонта"                , Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить());
		Результат = Запрос.ВыполнитьПакет();
		
		РемонтыОборудования = Результат[3].Выгрузить();
		
		Если РемонтыОборудования.Количество() > 0 Тогда
			
			ДокументОбъект.Организация   = РемонтыОборудования[0].ДокументИсточникОрганизация;
			ДокументОбъект.Подразделение = РемонтыОборудования[0].ДокументИсточникПодразделение;
			
			ТаблицаДокументовОснований.Свернуть("Значение");
			ТаблицаДокументовОснований.Колонки.Значение.Имя = "ДокументОснование";
			
			ДокументОбъект.ДокументыОснования.Загрузить(ТаблицаДокументовОснований);
			
			РемонтныеРаботы = ДокументОбъект.РемонтныеРаботы.Выгрузить().СкопироватьКолонки();
			
			Если ЕстьСписокОпераций Тогда
				
				Выборка = Результат[4].Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					ИД = ?(Выборка.ID = "", Новый УникальныйИдентификатор(), Выборка.ID);
					
					НСРР          = РемонтныеРаботы.Добавить();
					ЗаполнитьЗначенияСвойств(НСРР,Выборка);
					НСРР.ID = ИД;
				КонецЦикла;
				
				ДокументОбъект.РемонтныеРаботы.Загрузить(РемонтныеРаботы);
				
			КонецЕсли; 
			
			Если Не ЭтоРегламентныеМероприятия  Тогда
				// нормативы из заявок
				ТаблицаЗаявок = Новый ТаблицаЗначений;
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Строка"));
				КвалификаторыСтроки = Новый КвалификаторыСтроки(36,ДопустимаяДлина.Переменная);
				
				ТаблицаЗаявок.Колонки.Добавить("ID", Новый ОписаниеТипов(МассивТипов,,КвалификаторыСтроки));
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
				
				ТаблицаЗаявок.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(МассивТипов));
				
				
				ТаблицаППР = Новый ТаблицаЗначений;
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Строка"));
				КвалификаторыСтроки = Новый КвалификаторыСтроки(36,ДопустимаяДлина.Переменная);
				
				ТаблицаППР.Колонки.Добавить("ID", Новый ОписаниеТипов(МассивТипов,,КвалификаторыСтроки));
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("ДокументСсылка.торо_ПланГрафикРемонта"));
				
				ТаблицаППР.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(МассивТипов));
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Дата"));
				КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);;
				
				ТаблицаППР.Колонки.Добавить("ДатаНачала",Новый ОписаниеТипов(МассивТипов,,,,,КвалификаторыДаты));
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"));
				
				ТаблицаППР.Колонки.Добавить("ИдентификаторТехкарты",Новый ОписаниеТипов(МассивТипов));
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Строка"));
				КвалификаторыСтроки = Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная);
				
				ТаблицаППР.Колонки.Добавить("ID_Ремонта", Новый ОписаниеТипов(МассивТипов,,КвалификаторыСтроки));
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
				
				ТаблицаППР.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов(МассивТипов));
				
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Дата"));
				КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);;
				
				ТаблицаППР.Колонки.Добавить("ДатаОкончания",Новый ОписаниеТипов(МассивТипов,,,,,КвалификаторыДаты));
				
				
				
				ТаблицаДругихРемонтов = Новый ТаблицаЗначений;
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Строка"));
				КвалификаторыСтроки = Новый КвалификаторыСтроки(36,ДопустимаяДлина.Переменная);
				
				ТаблицаДругихРемонтов.Колонки.Добавить("ID", Новый ОписаниеТипов(МассивТипов,,КвалификаторыСтроки));
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот"));
				МассивТипов.Добавить(Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
				МассивТипов.Добавить(Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
				МассивТипов.Добавить(Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот"));
				МассивТипов.Добавить(Тип("ДокументСсылка.торо_ПланГрафикРемонта"));
				
				ТаблицаДругихРемонтов.Колонки.Добавить("Ссылка",Новый ОписаниеТипов(МассивТипов));
				
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Тип("Дата"));
				КвалификаторыДаты = Новый КвалификаторыДаты(ЧастиДаты.Дата);;
				
				ТаблицаДругихРемонтов.Колонки.Добавить("ДатаНачала",Новый ОписаниеТипов(МассивТипов,,,,,КвалификаторыДаты));
				
				Для каждого Ремонт Из РемонтыОборудования Цикл
					
					ТипЗначенияИсточника = ТипЗнч(Ремонт.ДокументИсточник);
					
					ИсточникЗаявка      = (ТипЗначенияИсточника = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт"));
					ИсточникППР         = (ТипЗначенияИсточника = Тип("ДокументСсылка.торо_ПланГрафикРемонта"));
					ИсточникДефект      = (ТипЗначенияИсточника = Тип("ДокументСсылка.торо_ВыявленныеДефекты"));
					
					
					Если ИсточникЗаявка Тогда
						
						НС = ТаблицаЗаявок.Добавить();
						НС.ID     = Ремонт.ID;
						НС.Ссылка = Ремонт.ДокументИсточник;
						
					ИначеЕсли ИсточникППР Или ИсточникДефект Тогда 
						
						НС = ТаблицаППР.Добавить();
						НС.ID            = Ремонт.ID;
						НС.Ссылка        = Ремонт.ДокументИсточник;
						НС.ДатаНачала    = Ремонт.ДатаНачала;
						
						Если ИсточникППР Тогда
							НС.ОбъектРемонта = Ремонт.ОбъектРемонта;
							НС.ДатаОкончания = Ремонт.ДатаОкончания;
						КонецЕсли;
						
					Иначе
						
						НС = ТаблицаДругихРемонтов.Добавить();
						НС.ID         = Ремонт.ID;
						НС.Ссылка     = Ремонт.ДокументИсточник;
						НС.ДатаНачала = Ремонт.ДатаНачала;
						
					КонецЕсли; 
					
				КонецЦикла; 
				
				ДокументОбъект.РемонтыОборудования.Загрузить(РемонтыОборудования);
				
			Иначе
				
				Если ЭтоНаряд Тогда
					
					ДокументОбъект.РегламентныеМероприятия.Загрузить(РемонтыОборудования);
					
				ИначеЕсли ЭтоАкт Тогда 
					
					ДокументОбъект.Мероприятия.Загрузить(РемонтыОборудования);
					
				КонецЕсли; 
				
			КонецЕсли;	
			
			Если ЭтоЗаявка
				ИЛИ ЭтоАкт Тогда
				
				Если ЭтоРегламентныеМероприятия Тогда
					
					МассивИдентификаторовТехКартПервогоУровня = РемонтныеРаботы.НайтиСтроки(Новый Структура("Родитель_ID", ""));
					
					Для каждого СтрокаМассива Из МассивИдентификаторовТехКартПервогоУровня Цикл
						
						МассивСтрокРемонта = РемонтыОборудования.НайтиСтроки(Новый Структура("ID", СтрокаМассива.РемонтыОборудования_ID));
						
						ДатаНачала = Неопределено;
						
						Если МассивСтрокРемонта.Количество() >  0 Тогда
							Если Не ТипЗнч(МассивСтрокРемонта[0].ДокументИсточник) = Тип("ДокументСсылка.торо_ПланГрафикРемонта")
								И Не ТипЗнч(МассивСтрокРемонта[0].ДокументИсточник) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
								Продолжить;
							Иначе
								ДатаНачала = МассивСтрокРемонта[0].ДатаНачала;
							КонецЕсли;
						Иначе
							Продолжить;
						КонецЕсли;
						
						ТехКартаСтруктура = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьПоследнее(ДатаНачала, Новый Структура("ИдентификаторТехКарты", СтрокаМассива.РемонтнаяРабота));
						
						СтруктураДанных = Новый Структура("ID_Родителя, РемонтнаяРабота, РемонтыОборудования_ID, Количество, ДатаРемонта"
						, СтрокаМассива.ID
						, ТехКартаСтруктура.ТехКарта
						, СтрокаМассива.РемонтыОборудования_ID
						, 1
						, ДатаНачала);
						
						ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект, ЭтоРегламентныеМероприятия);
					КонецЦикла;	
				Иначе
					
					ЗаполнитьСписокОперацийРемонтов(ДокументОбъект, ТаблицаППР, ТаблицаДругихРемонтов, РемонтныеРаботы, ЭтоЗаявка, ЭтоАкт);
					ТаблицаРР = ДокументОбъект.РемонтныеРаботы.Выгрузить();
					ДокументОбъект.РемонтныеРаботы.Очистить();
					ДокументОбъект.РемонтыОборудования.Очистить();
					
					ТаблицаРР.Индексы.Добавить("ID");
					ТаблицаРР.Колонки.Добавить("ТехКартаРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ИдентификаторыТехКарт"));
					Для каждого СтрокаРР из ТаблицаРР Цикл
						СтруктураПоиска = Новый Структура("ID", СтрокаРР.Родитель_ID);
						СтрокаРодителя = ТаблицаРР.НайтиСтроки(СтруктураПоиска);
						Если СтрокаРодителя.Количество() > 0 Тогда
							СтрокаРР.ТехКартаРемонта = СтрокаРодителя[0].РемонтнаяРабота;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаРО из РемонтыОборудования Цикл
						СтрокаРемонтовОборудования = Новый Структура("ID, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, ОбъектРемонта, ОписаниеРемонта");
						ЗаполнитьЗначенияСвойств(СтрокаРемонтовОборудования, СтрокаРО);
						
						СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", СтрокаРО.ID);
						МассивСтрок = ТаблицаРР.НайтиСтроки(СтруктураПоиска);
						
						МассивСтрокРемонтныхРабот = Новый Массив;
						Для каждого Элем Из МассивСтрок Цикл
							СтруктураДобавления = Новый Структура("РемонтнаяРабота, Количество, Родитель_ID, РемонтыОборудования_ID, ID, ТехКартаРемонта");
							ЗаполнитьЗначенияСвойств(СтруктураДобавления, Элем);
							МассивСтрокРемонтныхРабот.Добавить(СтруктураДобавления);
						КонецЦикла;
						
						ВыбранноеЗначение = Новый Структура;
						ВыбранноеЗначение.Вставить("СтрокаРемонтовОборудования", СтрокаРемонтовОборудования);
						ВыбранноеЗначение.Вставить("ДокументОснование", СтрокаРО.ДокументИсточник);
						ВыбранноеЗначение.Вставить("МассивСтрокРемонтныхРабот", МассивСтрокРемонтныхРабот);
						
						торо_Ремонты.ОбработкаВыбораРемонтаМодиф(ДокументОбъект.РемонтныеРаботы, ВыбранноеЗначение, ДокументОбъект, "РемонтыОборудования", "РемонтныеРаботы", "ДокументыОснования", Неопределено);
					КонецЦикла;
					
					
				КонецЕсли; 
				
			ИначеЕсли ЭтоНаряд Тогда
				
				МассивИдентификаторовТехКартПервогоУровня = РемонтныеРаботы.НайтиСтроки(Новый Структура("Родитель_ID", ""));
				
				Для каждого СтрокаМассива Из МассивИдентификаторовТехКартПервогоУровня Цикл
					
					МассивСтрокРемонта = РемонтыОборудования.НайтиСтроки(Новый Структура("ID", СтрокаМассива.РемонтыОборудования_ID));
					
					ДатаНачала = Неопределено;
					
					Если МассивСтрокРемонта.Количество() >  0 Тогда
						Если Не ТипЗнч(МассивСтрокРемонта[0].ДокументИсточник) = Тип("ДокументСсылка.торо_ПланГрафикРемонта")
							И Не ТипЗнч(МассивСтрокРемонта[0].ДокументИсточник) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") 
							И Не ТипЗнч(МассивСтрокРемонта[0].ДокументИсточник) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
							Продолжить;
						Иначе
							ДатаНачала = МассивСтрокРемонта[0].ДатаНачала;
						КонецЕсли;
					Иначе
						Продолжить;
					КонецЕсли;
					
					ТехКартаСтруктура = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьПоследнее(ДатаНачала, Новый Структура("ИдентификаторТехКарты", СтрокаМассива.РемонтнаяРабота));
					
					СтруктураДанных = Новый Структура("ID_Родителя, РемонтнаяРабота, РемонтыОборудования_ID, Количество, ДатаРемонта"
					, СтрокаМассива.ID
					, ТехКартаСтруктура.ТехКарта
					, СтрокаМассива.РемонтыОборудования_ID
					, 1
					, ДатаНачала);
					
					ДополнитьСписокОперацийДокументаБезЗатрат(СтруктураДанных, ДокументОбъект, ЭтоРегламентныеМероприятия);
					
					// Заполнение затрат по операциям
					ТаблицаРР = ДокументОбъект.РемонтныеРаботы.Выгрузить();
					ДокументОбъект.РемонтныеРаботы.Очистить();
					Если ЭтоРегламентныеМероприятия Тогда
						ИмяТЧРемонты = "РегламентныеМероприятия";
					Иначе 
						ИмяТЧРемонты = "РемонтыОборудования";
					КонецЕсли;
					ДокументОбъект[ИмяТЧРемонты].Очистить();


					
					ТаблицаРР.Индексы.Добавить("ID");
					ТаблицаРР.Колонки.Добавить("ТехКартаРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ИдентификаторыТехКарт"));
					Для каждого СтрокаРР из ТаблицаРР Цикл
						СтруктураПоиска = Новый Структура("ID", СтрокаРР.Родитель_ID);
						СтрокаРодителя = ТаблицаРР.НайтиСтроки(СтруктураПоиска);
						Если СтрокаРодителя.Количество() > 0 Тогда
							СтрокаРР.ТехКартаРемонта = СтрокаРодителя[0].РемонтнаяРабота;
						КонецЕсли;
					КонецЦикла;
					
					Для каждого СтрокаРО из РемонтыОборудования Цикл
						СтрокаРемонтовОборудования = Новый Структура("ID, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, ОбъектРемонта, ОписаниеРемонта");
						ЗаполнитьЗначенияСвойств(СтрокаРемонтовОборудования, СтрокаРО);
						
						СтруктураПоиска = Новый Структура("РемонтыОборудования_ID", СтрокаРО.ID);
						МассивСтрок = ТаблицаРР.НайтиСтроки(СтруктураПоиска);
						
						МассивСтрокРемонтныхРабот = Новый Массив;
						Для каждого Элем Из МассивСтрок Цикл
							СтруктураДобавления = Новый Структура("РемонтнаяРабота, Количество, Родитель_ID, РемонтыОборудования_ID, ID, ТехКартаРемонта");
							ЗаполнитьЗначенияСвойств(СтруктураДобавления, Элем);
							МассивСтрокРемонтныхРабот.Добавить(СтруктураДобавления);
						КонецЦикла;
						
						ВыбранноеЗначение = Новый Структура;
						ВыбранноеЗначение.Вставить("СтрокаРемонтовОборудования", СтрокаРемонтовОборудования);
						ВыбранноеЗначение.Вставить("ДокументОснование", СтрокаРО.ДокументИсточник);
						ВыбранноеЗначение.Вставить("МассивСтрокРемонтныхРабот", МассивСтрокРемонтныхРабот);
						
						торо_Ремонты.ОбработкаВыбораРемонтаМодиф(ДокументОбъект.РемонтныеРаботы, ВыбранноеЗначение, ДокументОбъект, ИмяТЧРемонты, "РемонтныеРаботы", "ДокументыОснования", Неопределено);
					КонецЦикла;
				КонецЦикла; 
				
				
			КонецЕсли;
						
		КонецЕсли;	
	КонецЕсли; 	
КонецПроцедуры

// Установка номера документа.
// Параметры:
//  Источник - ДокументОбъект - документ.
//  СтандартнаяОбработка - Булево - стандартная обработка события.
//  Префикс - Строка - префикс номера документа.
Процедура торо_УстановитьНомерДокументаПриУстановкеНовогоНомера(Источник, СтандартнаяОбработка, Префикс) Экспорт
	
	стр = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(стр, Источник);

	Префикс = ПолучитьПрефиксОрганизации(стр.Организация);

КонецПроцедуры

// Замена префикса в номере документа. 
// Параметры:
//  Источник - ДокументОбъект - документ.
//  Отказ - Булево - отказ от выполнения операции.
//  РежимЗаписи - РежимЗаписиДокумента - режим записи.
//  РежимПроведения - РежимПроведенияДокумента - режим проведения.
// 
Процедура торо_ЗаменитьПрефиксВДокументеПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.Номер = "" Тогда возврат; КонецЕсли; // Это новый документ, номер и так будет установлен правильно.
	
	стр = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(стр, Источник);

	Если стр.Организация <> Неопределено Тогда
		
		Если Источник.Организация = Источник.Ссылка.Организация Тогда возврат; КонецЕсли; // организация не изменилась
		
		НомерДок = Источник.Номер;
		пос = СтрНайти(НомерДок, "-");
		Если пос > 3 Тогда	
			// Номер не соответствует шаблону (скорее всего вводился руками).
			возврат; 
		КонецЕсли; 
		
		Префикс = ПолучитьПрефиксОрганизации(стр.Организация);
		Источник.УстановитьНовыйНомер(Префикс);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект, ЭтоРегламентныеМероприятия) Экспорт
	
	Родитель_ID            = СтруктураДанных.ID_Родителя;
	РемонтыОборудования_ID = СтруктураДанных.РемонтыОборудования_ID;
	ТехКарта               = СтруктураДанных.РемонтнаяРабота;
	ДатаНачала             = СтруктураДанных.ДатаРемонта;
	
	РезультатЗапросаПоОперациям = ПолучитьСписокОперацийТехкартыСНормативами(ТехКарта,ЭтоРегламентныеМероприятия);
	
	СписокОпераций      = РезультатЗапросаПоОперациям[1].Выгрузить();
	МатериальныеЗатраты = РезультатЗапросаПоОперациям[3].Выгрузить();
	ТрудовыеЗатраты     = РезультатЗапросаПоОперациям[4].Выгрузить();
		
	
	Если Не ЭтоРегламентныеМероприятия Тогда
		
		ИнструментыИТехника = РезультатЗапросаПоОперациям[5].Выгрузить();
		МерыБезопасности = РезультатЗапросаПоОперациям[6].Выгрузить();
		
	КонецЕсли;
	
	Для каждого СтрокаОперации Из СписокОпераций Цикл
		
		РемРабота = ДокументОбъект.РемонтныеРаботы.Добавить();
		РемРабота.Родитель_ID            = Родитель_ID;
		РемРабота.РемонтыОборудования_ID = РемонтыОборудования_ID;
		
		Если Не ЭтоРегламентныеМероприятия Тогда
			РемРабота.Количество         = СтрокаОперации.Количество * ?(СтруктураДанных.Свойство("Количество") И СтруктураДанных.Количество <> 0, СтруктураДанных.Количество, 1);
		КонецЕсли;
		
		МассивИмеющихсяID =  ДокументОбъект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", СтрокаОперации.ID));
		Если МассивИмеющихсяID.Количество() > 0 Тогда
			ИДРаботы = Новый УникальныйИдентификатор;
		Иначе
			ИДРаботы = СтрокаОперации.ID;
		КонецЕсли; 
		РемРабота.ID                     = ИДРаботы;
		РемРабота.РемонтнаяРабота        = СтрокаОперации.Операция;
		
		РемРабота.Картинка               = ?(ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);
		
		// процент выполнения пока не сделано
		Если ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда //заполняем нормативы
			
			МассивСтрок = МатериальныеЗатраты.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
			
			Для каждого СтрокаМатериалов Из МассивСтрок Цикл
				Если СтрокаМатериалов.КоличествоЕдиниц = 0 Тогда
					СтрокаМатериалов.КоличествоЕдиниц = (?(СтрокаМатериалов.Коэффициент = 0, 1, СтрокаМатериалов.Коэффициент)) * СтрокаМатериалов.Количество;
				КонецЕсли; 
				
				НСМатериалов = ДокументОбъект.МатериальныеЗатраты.Добавить();
				ЗаполнитьЗначенияСвойств(НСМатериалов,СтрокаМатериалов);
				НСМатериалов.РемонтыОборудования_ID = РемонтыОборудования_ID;
				НСМатериалов.ID                     = РемРабота.ID;
			КонецЦикла; 
			
			Если ТрудовыеЗатраты <> Неопределено Тогда
				
				МассивСтрок = ТрудовыеЗатраты.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
				
				Для каждого СтрокаТрудозатрат Из МассивСтрок Цикл
					
					НСТрудозатрат = ДокументОбъект.ТрудовыеЗатраты.Добавить();
					ЗаполнитьЗначенияСвойств(НСТрудозатрат,СтрокаТрудозатрат);
					НСТрудозатрат.РемонтыОборудования_ID = РемонтыОборудования_ID;
					
				КонецЦикла;	
			КонецЕсли;
			
			Если ИнструментыИТехника <> Неопределено Тогда
				МассивСтрок = ИнструментыИТехника.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
				Для каждого СтрокаИИТ Из МассивСтрок Цикл
					нс = ДокументОбъект.Инструменты.Добавить();
					ЗаполнитьЗначенияСвойств(нс,СтрокаИИТ);
					нс.РемонтыОборудования_ID = РемонтыОборудования_ID;
				КонецЦикла;	
			КонецЕсли;
			
			Если МерыБезопасности <> Неопределено Тогда
				МассивСтрок = МерыБезопасности.НайтиСтроки(новый Структура("ID",СтрокаОперации.ID));
				Для каждого СтрокаМБ Из МассивСтрок Цикл
					нс = ДокументОбъект.МерыБезопасности.Добавить();
					ЗаполнитьЗначенияСвойств(нс, СтрокаМБ);
					нс.РемонтыОборудования_ID = РемонтыОборудования_ID;
				КонецЦикла;	
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			ТехКартаСтруктура = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьПоследнее(Новый Граница(ТехКарта.ДатаПринятия, ВидГраницы.Включая),Новый Структура("ИдентификаторТехКарты", РемРабота.РемонтнаяРабота));
			
			СтруктураДанных = Новый Структура("ID_Родителя, РемонтнаяРабота, РемонтыОборудования_ID, Количество, ДатаРемонта"
			, ИДРаботы
			, ТехКартаСтруктура.Техкарта
			, РемонтыОборудования_ID
			, СтрокаОперации.Количество
			, ДатаНачала);
			
			ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект, ЭтоРегламентныеМероприятия);
			
		КонецЕсли; 
	КонецЦикла; 
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части документа.
// Если какой-то из реквизтов, влияющий на проведение не заполнен или
// заполнен не корректно, то выставляется флаг отказа в проведении.
//
// Параметры:
//  ДокументОбъект             - объект проводимого документа, 
//  ИмяТабличнойЧасти          - табличная часть документа,
//  СтруктураОбязательныхПолей - структура, содержащая имена полей, которые собственно и надо проверить.
//  Отказ                      - флаг отказа в проведении.
//  Заголовок                  - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, 
	Отказ, Заголовок) Экспорт
	
	ПредставлениеТабличнойЧасти = Неопределено;
	МетаданныеРеквизиты         = Неопределено;
	ТабличнаяЧасть              = ДокументОбъект[ИмяТабличнойЧасти];
	
	// Цмкл по строкам табличной части.
	Для каждого СтрокаТаблицы Из ТабличнаяЧасть Цикл
		
		// Цмкл по проверяемым полям
		Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
			
			Значение = СтрокаТаблицы[КлючЗначение.Ключ];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				
				Если ПредставлениеТабличнойЧасти = Неопределено Тогда
					ПредставлениеТабличнойЧасти = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Представление();
				КонецЕсли;
				
				Если МетаданныеРеквизиты = Неопределено Тогда
					МетаданныеРеквизиты = ДокументОбъект.Метаданные().ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты;
				КонецЕсли;
				
				СтрокаНачалаСообщенияОбОшибке = НСтр("ru = 'В строке номер %1 табличной части ""%2"": '");
				СтрокаНачалаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаНачалаСообщенияОбОшибке,СокрЛП(СтрокаТаблицы.НомерСтроки),ПредставлениеТабличнойЧасти);
				
				Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
					ПредставлениеРеквизита = МетаданныеРеквизиты[КлючЗначение.Ключ].Представление();
					СтрокаСообщения = НСтр("ru = 'Не заполнено значение реквизита ""%1""!'");
					СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,СокрЛП(ПредставлениеРеквизита));
				Иначе
					СтрокаСообщения = КлючЗначение.Значение;
				КонецЕсли;
				Отказ = Истина;
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСписокОперацийРемонтов(ДокументОбъект, ТаблицаППР, ТаблицаДругихРемонтов, РемонтныеРаботы, ЭтоЗаявка, ЭтоАкт)
	
	ТаблицаОпераций = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Строка"));
	// Заполнение из документов ППР
	
	Если ТаблицаППР.Количество() > 0 Тогда
		// Необходимо заполнить нормативы всех техкарт, и дополнить техкарты операциями.
		Для каждого СтрокаППР Из ТаблицаППР Цикл
			
			МассивСтрокОпераций = РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаППР.ID)); // Здесь будет только одна строка, так как добавлена только сама техкарта.
			
			Если Не МассивСтрокОпераций.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			СтрокаППР.ИдентификаторТехкарты = МассивСтрокОпераций[0].РемонтнаяРабота;
			СтрокаППР.ID_Ремонта            = МассивСтрокОпераций[0].ID;
			
		КонецЦикла;
		
		// получаем список всех техкарт по их идентификаторам - первый уровень
		Запрос = Новый Запрос;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаППР.ID КАК РемонтыОборудования_ID,
		               |	ТаблицаППР.ДатаНачала,
		               |	ТаблицаППР.ИдентификаторТехКарты,
		               |	ТаблицаППР.ID_Ремонта
		               |ПОМЕСТИТЬ ТаблицаППР
		               |ИЗ
		               |	&ТаблицаППР КАК ТаблицаППР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаППР.РемонтыОборудования_ID,
		               |	ТаблицаППР.ДатаНачала,
		               |	МАКСИМУМ(торо_ВерсииТехКарт.Период) КАК Период,
		               |	ТаблицаППР.ИдентификаторТехКарты,
		               |	ТаблицаППР.ID_Ремонта
		               |ПОМЕСТИТЬ МаксимальныеДатыТехкартДоРемонта
		               |ИЗ
		               |	ТаблицаППР КАК ТаблицаППР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
		               |		ПО (ТаблицаППР.ДатаНачала >= торо_ВерсииТехКарт.Период
		               |				ИЛИ ТаблицаППР.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		               |			И ТаблицаППР.ИдентификаторТехКарты = торо_ВерсииТехКарт.ИдентификаторТехКарты
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТаблицаППР.РемонтыОборудования_ID,
		               |	ТаблицаППР.ДатаНачала,
		               |	ТаблицаППР.ИдентификаторТехКарты,
		               |	ТаблицаППР.ID_Ремонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ВерсииТехКарт.ТехКарта,
		               |	МаксимальныеДатыТехкартДоРемонта.РемонтыОборудования_ID,
		               |	МаксимальныеДатыТехкартДоРемонта.ДатаНачала,
		               |	МаксимальныеДатыТехкартДоРемонта.ID_Ремонта
		               |ИЗ
		               |	МаксимальныеДатыТехкартДоРемонта КАК МаксимальныеДатыТехкартДоРемонта
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
		               |		ПО МаксимальныеДатыТехкартДоРемонта.Период = торо_ВерсииТехКарт.Период
		               |			И МаксимальныеДатыТехкартДоРемонта.ИдентификаторТехКарты = торо_ВерсииТехКарт.ИдентификаторТехКарты";
		
		Запрос.УстановитьПараметр("ТаблицаППР", ТаблицаППР);
		
		ТаблицаСТехКартамиРемонтов = Запрос.Выполнить().Выгрузить();
		
		Для каждого Строка Из ТаблицаСТехКартамиРемонтов Цикл
			
			СтруктураДанных = Новый Структура("ID_Родителя, РемонтнаяРабота, РемонтыОборудования_ID, Количество, ДатаРемонта"
			, Строка.ID_Ремонта
			, Строка.ТехКарта
			, Строка.РемонтыОборудования_ID
			, 1
			, Строка.ДатаНачала);
			
			ДополнитьСписокОперацийДокументаБезЗатрат(СтруктураДанных, ДокументОбъект, Ложь);
			
		КонецЦикла;
		
	КонецЕсли; 
	
	Если ТаблицаДругихРемонтов.Количество() > 0 Тогда
		
		Для каждого СтрокаДругихРемонтов Из ТаблицаДругихРемонтов Цикл
			МассивСтрокОпераций = РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаДругихРемонтов.ID)); 
			
			Если Не МассивСтрокОпераций.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли; 
			
			Если ТипЗнч(СтрокаДругихРемонтов.Ссылка) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
				// есть только тех.операции, надо их перенести
				Для каждого СтрокаОперации Из МассивСтрокОпераций Цикл
					РемРабота = ДокументОбъект.РемонтныеРаботы.Добавить();
					ЗаполнитьЗначенияСвойств(РемРабота, СтрокаОперации);
				КонецЦикла;
			КонецЕсли;
				
		КонецЦикла;
			
	КонецЕсли; 

	
КонецПроцедуры

Процедура ДополнитьСписокОперацийДокументаБезЗатрат(СтруктураДанных, ДокументОбъект, ЭтоРегламентныеМероприятия);
	
	Родитель_ID            = СтруктураДанных.ID_Родителя;
	РемонтыОборудования_ID = СтруктураДанных.РемонтыОборудования_ID;
	ТехКарта               = СтруктураДанных.РемонтнаяРабота;
	ДатаНачала             = СтруктураДанных.ДатаРемонта;
	
	РезультатЗапросаПоОперациям = ПолучитьСписокОперацийТехкартыБезНормативов(ТехКарта);
	
	СписокОпераций      = РезультатЗапросаПоОперациям.Выгрузить();
	
	Для каждого СтрокаОперации Из СписокОпераций Цикл
		
		РемРабота = ДокументОбъект.РемонтныеРаботы.Добавить();
		РемРабота.Родитель_ID            = Родитель_ID;
		РемРабота.РемонтыОборудования_ID = РемонтыОборудования_ID;
		
		Если Не ЭтоРегламентныеМероприятия Тогда
			РемРабота.Количество             = СтрокаОперации.Количество;
		КонецЕсли;
		
		МассивИмеющихсяID =  ДокументОбъект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", СтрокаОперации.ID));
		Если МассивИмеющихсяID.Количество() > 0 Тогда
			ИДРаботы = Новый УникальныйИдентификатор;
		Иначе
			ИДРаботы = СтрокаОперации.ID;
		КонецЕсли; 
		РемРабота.ID                     = ИДРаботы;
		РемРабота.РемонтнаяРабота        = СтрокаОперации.Операция;
		
		РемРабота.Картинка               = ?(ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);
		
		// процент выполнения пока не сделано
		Если ТипЗнч(РемРабота.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			ТехКартаСтруктура = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьПоследнее(СтруктураДанных.ДатаРемонта,Новый Структура("ИдентификаторТехКарты", РемРабота.РемонтнаяРабота));
			
			СтруктураДанных = Новый Структура("ID_Родителя, РемонтнаяРабота, РемонтыОборудования_ID, Количество, ДатаРемонта"
			, СтрокаОперации.ID
			, ТехКартаСтруктура.ТехКарта
			, РемонтыОборудования_ID
			, СтрокаОперации.Количество
			, ДатаНачала);
			
			ДополнитьСписокОперацийДокументаБезЗатрат(СтруктураДанных, ДокументОбъект, ЭтоРегламентныеМероприятия);
			
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры


Функция ПолучитьСписокОперацийТехкартыСНормативами(ТехКарта, ЭтоРегламентныеМероприятия)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	торо_ТехКартыСписокОпераций.Количество,
	               |	торо_ТехКартыСписокОпераций.Ссылка
	               |ПОМЕСТИТЬ СписокОпераций_Данные
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.ID,
	               |	СписокОпераций.Операция,
	               |	СписокОпераций.Количество
	               |ИЗ
	               |	СписокОпераций_Данные КАК СписокОпераций
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.ID КАК ID,
	               |	СписокОпераций.Операция КАК Операция,
	               |	СписокОпераций.Количество,
	               |	СписокОпераций.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ СписокОпераций
	               |ИЗ
	               |	СписокОпераций_Данные КАК СписокОпераций
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(СписокОпераций.Операция) = ТИП(Справочник.торо_ТехнологическиеОперации)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	Операция,
	               |	Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТехКартыМатериальныеЗатраты.ID,
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура,
	               |	торо_ТехКартыМатериальныеЗатраты.ЕдиницаИзмерения,
	               |	торо_ТехКартыМатериальныеЗатраты.Упаковка,
	               |	ЕСТЬNULL(торо_ТехКартыМатериальныеЗатраты.Упаковка.Коэффициент, 0) КАК Коэффициент,
	               |	торо_ТехКартыМатериальныеЗатраты.Количество КАК КоличествоЕдиниц,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоНаЕдиницу,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок КАК Количество,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковокНаЕдиницу
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	               |		ПО СписокОпераций.ID = торо_ТехКартыМатериальныеЗатраты.ID
	               |			И СписокОпераций.Операция = торо_ТехКартыМатериальныеЗатраты.Операция
	               |			И СписокОпераций.Ссылка = торо_ТехКартыМатериальныеЗатраты.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТехКартыТрудовыеЗатраты.ID,
	               |	торо_ТехКартыТрудовыеЗатраты.Количество,
	               |	торо_ТехКартыТрудовыеЗатраты.Квалификация,
	               |	торо_ТехКартыТрудовыеЗатраты.ВремяРаботы,
	               |	торо_ТехКартыТрудовыеЗатраты.ВремяРаботыНаЕдиницу
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_ТехКартыТрудовыеЗатраты
	               |		ПО СписокОпераций.ID = торо_ТехКартыТрудовыеЗатраты.ID
	               |			И СписокОпераций.Операция = торо_ТехКартыТрудовыеЗатраты.Операция
	               |			И СписокОпераций.Ссылка = торо_ТехКартыТрудовыеЗатраты.Ссылка";
	
	Если Не ЭтоРегламентныеМероприятия Тогда
		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ТехКартыИнструментыИТехника.ID,
		|	торо_ТехКартыИнструментыИТехника.ЕдиницаИзмерения,
		|	торо_ТехКартыИнструментыИТехника.Инструмент,
		|	торо_ТехКартыИнструментыИТехника.Упаковка,
		|	торо_ТехКартыИнструментыИТехника.Количество,
		|	торо_ТехКартыИнструментыИТехника.КоличествоУпаковок
		|ИЗ
		|	СписокОпераций КАК СписокОпераций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ИнструментыИТехника КАК торо_ТехКартыИнструментыИТехника
		|		ПО СписокОпераций.ID = торо_ТехКартыИнструментыИТехника.ID
		|			И СписокОпераций.Операция = торо_ТехКартыИнструментыИТехника.Операция
		|			И СписокОпераций.Ссылка = торо_ТехКартыИнструментыИТехника.Ссылка
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	тзМерыБезопасности.ID,
		|	тзМерыБезопасности.МерыБезопасности
		|ИЗ
		|	СписокОпераций КАК СписокОпераций
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.МерыБезопасности КАК тзМерыБезопасности
		|		ПО СписокОпераций.ID = тзМерыБезопасности.ID
		|			И СписокОпераций.Операция = тзМерыБезопасности.Операция
		|			И СписокОпераций.Ссылка = тзМерыБезопасности.Ссылка";
	КонецЕсли; 
	
	Запрос.УстановитьПараметр("Ссылка",ТехКарта);
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция ПолучитьСписокОперацийТехкартыБезНормативов(ТехКарта)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ТехКартыСписокОпераций.ID,
	|	торо_ТехКартыСписокОпераций.Операция,
	|	торо_ТехКартыСписокОпераций.Количество
	|ИЗ
	|	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	|ГДЕ
	|	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТехКарта);
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьПрефиксОрганизации(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Организации.Префикс
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Организация);
	РезЗапроса = Запрос.Выполнить();
	 
	Если НЕ РезЗапроса.Пустой() Тогда
		Выборка = РезЗапроса.Выбрать();
		Выборка.Следующий();
		Если ЗначениеЗаполнено(Выборка.Префикс) Тогда
			Возврат Выборка.Префикс + "-";
		КонецЕсли;
	КонецЕсли;
	
	Возврат "0";
	
КонецФункции 

// Функция рассчитывает время работы ОР
Функция РасчитатьВремяРаботыОР(ТаблицаПериодовРаботыОборудования, Период) Экспорт
	
	СтрПериод = Строка(Период);
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПериодовРаботыОборудования.ОбъектРемонта,
	|	ТаблицаПериодовРаботыОборудования.ДатаНачала,
	|	ТаблицаПериодовРаботыОборудования.ДатаОкончания,
	|	ТаблицаПериодовРаботыОборудования.ПлановыйГрафикРаботы
	|ПОМЕСТИТЬ ТаблицаПериодов
	|ИЗ
	|	&ТаблицаПериодовРаботыОборудования КАК ТаблицаПериодовРаботыОборудования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	СУММА(ЕСТЬNULL(ГрафикиРаботыПоСменам.Часы,0) * 3600) КАК Секунды,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания,
	|	КОЛИЧЕСТВО (РАЗЛИЧНЫЕ НАЧАЛОПЕРИОДА(ГрафикиРаботыПоСменам.Дата, "+СтрПериод+")) КАК ЦелыхПериодов
	|ПОМЕСТИТЬ ТаблицаПолныеПериоды
	|ИЗ
	|	ТаблицаПериодов КАК ТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ПО ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
	|			И (КОНЕЦПЕРИОДА(ТаблицаПериодов.ДатаНачала, "+СтрПериод+") < ГрафикиРаботыПоСменам.Дата)
	|			И (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, "+СтрПериод+") > ГрафикиРаботыПоСменам.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	СУММА((ВЫБОР
	|				КОГДА (КОНЕЦПЕРИОДА(ТаблицаПериодов.ДатаНачала, День) < ГрафикиРаботыПоСменам.Дата И НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, День) > ГрафикиРаботыПоСменам.Дата)
	|						ТОГДА ГрафикиРаботыПоСменам.Часы * 3600
	|				ИНАЧЕ 0
	|			КОНЕЦ)) КАК Секунды,
	|	СУММА(ГрафикиРаботыПоСменам.Часы * 3600) КАК СекундыЗаПериод,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|ПОМЕСТИТЬ ТаблицаПолныеДниНачало
	|ИЗ
	|	ТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ПО ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
	|			И (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, "+СтрПериод+") <= ГрафикиРаботыПоСменам.Дата)
	|			И (КОНЕЦПЕРИОДА(ТаблицаПериодов.ДатаНачала, "+СтрПериод+") > ГрафикиРаботыПоСменам.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	СУММА((ВЫБОР
	|				КОГДА (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, День) > ГрафикиРаботыПоСменам.Дата ) И НачалоПериода(ТаблицаПериодов.ДатаНачала,"+СтрПериод+") <> НачалоПериода(ТаблицаПериодов.ДатаОкончания,"+СтрПериод+")
	|						ТОГДА ГрафикиРаботыПоСменам.Часы * 3600
	|				ИНАЧЕ 0
	|			КОНЕЦ)) КАК Секунды,
	|	СУММА(ГрафикиРаботыПоСменам.Часы * 3600) КАК СекундыЗаПериод,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|ПОМЕСТИТЬ ТаблицаПолныеДниКонец
	|ИЗ
	|	ТаблицаПериодов КАК ТаблицаПериодов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ПО ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
	|			И (КОНЕЦПЕРИОДА(ТаблицаПериодов.ДатаОкончания, "+СтрПериод+") > ГрафикиРаботыПоСменам.Дата)
	|			И (НачалоПЕРИОДА(ТаблицаПериодов.ДатаОкончания, "+СтрПериод+") <= ГрафикиРаботыПоСменам.Дата)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ТаблицаПериодов.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ)
	|				И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|				И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) <= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|			ТОГДА РАЗНОСТЬДАТ(ТаблицаПериодов.ДатаНачала, ТаблицаПериодов.ДатаОкончания, СЕКУНДА)
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) > РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|			ТОГДА РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА) - РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА)
	|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|	КОНЕЦ КАК Секунды,
	|	ТаблицаПериодов.ДатаОкончания,
	|	ГрафикиРаботыПоСменам.Смена
	|ПОМЕСТИТЬ ВремяЗаПервыйДень
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|		ПО (ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы)
	|			И (ГрафикиРаботыПоСменам.Дата = НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|		ПО ГрафикиРаботыПоСменам.Смена = СменыПериодыСмены.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
	|		ПО ГрафикиРаботыПоСменам.Смена = ГрафикиРаботыПериодыСмены.Ссылка
	|			И (ВЫБОР
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 1
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 2
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 3
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 4
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 5
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 6
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаНачала) = 7
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) <= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|	И (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ)
	|			ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|			ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) МЕЖДУ РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА) И РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|				И (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) МЕЖДУ РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА) И РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ОбъектРемонта,
	|	ТаблицаПериодов.ДатаНачала,
	|	ВЫБОР
	|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ)
	|				И (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|						И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) <= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|					ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ), ТаблицаПериодов.ДатаНачала, СЕКУНДА) < РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|						И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) > РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА))
	|			ТОГДА 0
	|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) < РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) - РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА)
	|	КОНЕЦ КАК Секунды,
	|	ТаблицаПериодов.ДатаОкончания
	|ПОМЕСТИТЬ ВремяЗаПоследнийДень
	|ИЗ
	|	РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
	|		ПО (ТаблицаПериодов.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы)
	|			И (ГрафикиРаботыПоСменам.Дата = НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Смены.ПериодыСмены КАК СменыПериодыСмены
	|		ПО ГрафикиРаботыПоСменам.Смена = СменыПериодыСмены.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГрафикиРаботы.ПериодыСмены КАК ГрафикиРаботыПериодыСмены
	|		ПО ГрафикиРаботыПоСменам.Смена = ГрафикиРаботыПериодыСмены.Ссылка
	|			И (ВЫБОР
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 1
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Понедельник)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 2
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Вторник)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 3
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Среда)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 4
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Четверг)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 5
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Пятница)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 6
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Суббота)
	|				КОГДА ДЕНЬНЕДЕЛИ(ТаблицаПериодов.ДатаОкончания) = 7
	|					ТОГДА ГрафикиРаботыПериодыСмены.ДеньНедели = ЗНАЧЕНИЕ(Перечисление.ДниНедели.Воскресенье)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|	И (НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаНачала, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ)
	|			ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяНачала, ГрафикиРаботыПериодыСмены.ВремяНачала), СЕКУНДА)
	|				И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодов.ДатаОкончания, ДЕНЬ), ТаблицаПериодов.ДатаОкончания, СЕКУНДА) < РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(СменыПериодыСмены.ВремяОкончания, ГрафикиРаботыПериодыСмены.ВремяОкончания), СЕКУНДА))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПолныеДниНачало.ОбъектРемонта,
	|	ТаблицаПолныеДниНачало.Секунды,
	|	ТаблицаПолныеДниНачало.ДатаНачала,
	|	ТаблицаПолныеДниНачало.ДатаОкончания,
	|	ТаблицаПолныеДниНачало.СекундыЗаПериод
	|ПОМЕСТИТЬ ОбъединениеОтрезковВремениНачало
	|ИЗ
	|	ТаблицаПолныеДниНачало КАК ТаблицаПолныеДниНачало
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремяЗаПервыйДень.ОбъектРемонта,
	|	ВремяЗаПервыйДень.Секунды,
	|	ВремяЗаПервыйДень.ДатаНачала,
	|	ВремяЗаПервыйДень.ДатаОкончания,
	|	0
	|ИЗ
	|	ВремяЗаПервыйДень КАК ВремяЗаПервыйДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединениеОтрезковВремениНачало.ОбъектРемонта,
	|	Сумма(ОбъединениеОтрезковВремениНачало.Секунды) КАК Секунды,
	|	ОбъединениеОтрезковВремениНачало.ДатаНачала,
	|	ОбъединениеОтрезковВремениНачало.ДатаОкончания,
	|	Максимум(ОбъединениеОтрезковВремениНачало.СекундыЗаПериод) КАК СекундыЗаПериод
	|ПОМЕСТИТЬ ОбъединениеОтрезковНачалоСвертка
	|ИЗ
	|	ОбъединениеОтрезковВремениНачало КАК ОбъединениеОтрезковВремениНачало
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединениеОтрезковВремениНачало.ОбъектРемонта,
	|	ОбъединениеОтрезковВремениНачало.ДатаНачала,
	|	ОбъединениеОтрезковВремениНачало.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПолныеДниКонец.ОбъектРемонта,
	|	ТаблицаПолныеДниКонец.Секунды,
	|	ТаблицаПолныеДниКонец.ДатаНачала,
	|	ТаблицаПолныеДниКонец.ДатаОкончания,
	|	ТаблицаПолныеДниКонец.СекундыЗаПериод
	|ПОМЕСТИТЬ ОбъединениеОтрезковВремениКонец
	|ИЗ
	|	ТаблицаПолныеДниКонец КАК ТаблицаПолныеДниКонец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВремяЗаПоследнийДень.ОбъектРемонта,
	|	ВремяЗаПоследнийДень.Секунды,
	|	ВремяЗаПоследнийДень.ДатаНачала,
	|	ВремяЗаПоследнийДень.ДатаОкончания,
	|	0
	|ИЗ
	|	ВремяЗаПоследнийДень КАК ВремяЗаПоследнийДень
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединениеОтрезковВремениКонец.ОбъектРемонта,
	|	СУММА(ОбъединениеОтрезковВремениКонец.Секунды) КАК Секунды,
	|	ОбъединениеОтрезковВремениКонец.ДатаНачала,
	|	ОбъединениеОтрезковВремениКонец.ДатаОкончания,
	|	Максимум(ОбъединениеОтрезковВремениКонец.СекундыЗаПериод) КАК СекундыЗаПериод
	|ПОМЕСТИТЬ ОбъединениеОтрезковКонецСвертка
	|ИЗ
	|	ОбъединениеОтрезковВремениКонец КАК ОбъединениеОтрезковВремениКонец
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединениеОтрезковВремениКонец.ОбъектРемонта,
	|	ОбъединениеОтрезковВремениКонец.ДатаНачала,
	|	ОбъединениеОтрезковВремениКонец.ДатаОкончания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПолныеПериоды.ОбъектРемонта,
	|	ТаблицаПолныеПериоды.Секунды,
	|	ТаблицаПолныеПериоды.ЦелыхПериодов КАК Периодов,
	|	ТаблицаПолныеПериоды.ДатаНачала,
	|	ТаблицаПолныеПериоды.ДатаОкончания
	|ПОМЕСТИТЬ ОбъединениеОтрезков
	|ИЗ
	|	ТаблицаПолныеПериоды КАК ТаблицаПолныеПериоды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъединениеОтрезковНачалоСвертка.ОбъектРемонта,
	|	ОбъединениеОтрезковНачалоСвертка.Секунды,
	|	ЕСТЬNULL(ОбъединениеОтрезковНачалоСвертка.Секунды, 0) / (ВЫБОР КОГДА ОбъединениеОтрезковНачалоСвертка.СекундыЗаПериод = 0 ТОГДА 1 ИНАЧЕ ОбъединениеОтрезковНачалоСвертка.СекундыЗаПериод КОНЕЦ),  
	|	ОбъединениеОтрезковНачалоСвертка.ДатаНачала,
	|	ОбъединениеОтрезковНачалоСвертка.ДатаОкончания
	|ИЗ
	|	ОбъединениеОтрезковНачалоСвертка КАК ОбъединениеОтрезковНачалоСвертка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОбъединениеОтрезковКонецСвертка.ОбъектРемонта,
	|	ОбъединениеОтрезковКонецСвертка.Секунды,
	|	ЕСТЬNULL(ОбъединениеОтрезковКонецСвертка.Секунды, 0) / (ВЫБОР КОГДА ОбъединениеОтрезковКонецСвертка.СекундыЗаПериод = 0 ТОГДА 1 ИНАЧЕ ОбъединениеОтрезковКонецСвертка.СекундыЗаПериод КОНЕЦ),
	|	ОбъединениеОтрезковКонецСвертка.ДатаНачала,
	|	ОбъединениеОтрезковКонецСвертка.ДатаОкончания
	|ИЗ
	|	ОбъединениеОтрезковКонецСвертка КАК ОбъединениеОтрезковКонецСвертка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединениеОтрезков.ОбъектРемонта,
	|	ОбъединениеОтрезков.ДатаНачала,
	|	СУММА(ОбъединениеОтрезков.Секунды) КАК Секунды,
	|	СУММА(ОбъединениеОтрезков.Периодов)КАК Периодов,
	|	ОбъединениеОтрезков.ДатаОкончания
	|ИЗ
	|	ОбъединениеОтрезков КАК ОбъединениеОтрезков
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединениеОтрезков.ОбъектРемонта,
	|	ОбъединениеОтрезков.ДатаНачала,
	|	ОбъединениеОтрезков.ДатаОкончания
	|";
	
	
	Запрос.УстановитьПараметр("ТаблицаПериодовРаботыОборудования", ТаблицаПериодовРаботыОборудования);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ВернутьIDНеотмененногоРемонта(СсылкаНаДок, ТабЧасть) Экспорт
	// заявку проверять! 
	Неотмененный = "";
	Запрос = Новый Запрос;
	Если ТипЗнч(СсылкаНаДок) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		Запрос.Текст = 	
		"ВЫБРАТЬ
		|	ТЗ.ID КАК ID
		|ПОМЕСТИТЬ ТабЧасть
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабЧасть.ID КАК ID
		|ПОМЕСТИТЬ НеОтмененные
		|ИЗ
		|	ТабЧасть КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.ID В
		|				(ВЫБРАТЬ
		|					торо_ОтмененныеРемонты.ID КАК ID
		|				ИЗ
		|					РегистрСведений.торо_ОтмененныеРемонты КАК торо_ОтмененныеРемонты)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	торо_ПлановыеРемонтныеРаботы.ID КАК ID,
		|	торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот КАК ДатаНач,
		|	торо_ПлановыеРемонтныеРаботы.ДатаОкончанияРемонтныхРабот КАК ДатаКон,
		|	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот КАК ОР,
		|	торо_ПлановыеРемонтныеРаботы.Регистратор КАК ДокументППР
		|ИЗ
		|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних КАК торо_ПлановыеРемонтныеРаботы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НеОтмененные КАК НеОтмененные
		|		ПО торо_ПлановыеРемонтныеРаботы.ID = НеОтмененные.ID
		|ГДЕ
		|	НЕ торо_ПлановыеРемонтныеРаботы.Отменен
		|	И НЕ торо_ПлановыеРемонтныеРаботы.Замещен
		|	И торо_ПлановыеРемонтныеРаботы.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Регистратор", СсылкаНаДок);
	Иначе
		Запрос.Текст = 	
		"ВЫБРАТЬ
		|	ТЗ.ID КАК ID
		|ПОМЕСТИТЬ ТабЧасть
		|ИЗ
		|	&ТЗ КАК ТЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабЧасть.ID КАК ID
		|ИЗ
		|	ТабЧасть КАК ТабЧасть
		|ГДЕ
		|	НЕ ТабЧасть.ID В
		|				(ВЫБРАТЬ
		|					торо_ОтмененныеРемонты.ID КАК ID
		|				ИЗ
		|					РегистрСведений.торо_ОтмененныеРемонты КАК торо_ОтмененныеРемонты)";		
	КонецЕсли;	
	Запрос.УстановитьПараметр("ТЗ", ТабЧасть.Выгрузить(, "ID"));
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 1 Тогда
		Неотмененный = Результат[0].ID;
	КонецЕсли; 	
	Возврат Неотмененный;

КонецФункции
 

Функция ВернутьIDНеотмененногоРемонтаВРегламентныхМероприятиях(СсылкаНаДок) Экспорт 
	Неотмененный = "";
	Если ТипЗнч(СсылкаНаДок) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	торо_ПлановыеРемонтныеРаботы.ID,
		|	торо_ПлановыеРемонтныеРаботы.ВидМероприятия,
		|	торо_ПлановыеРемонтныеРаботы.ДатаНачала КАК ДатаНач,
		|	торо_ПлановыеРемонтныеРаботы.ДатаОкончания КАК ДатаКон,
		|	торо_ПлановыеРемонтныеРаботы.СписокОбъектов,
		|	торо_ПлановыеРемонтныеРаботы.Регистратор
		|ИЗ
		|	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних КАК торо_ПлановыеРемонтныеРаботы
		|ГДЕ
		|	НЕ торо_ПлановыеРемонтныеРаботы.Отменен
		|	И торо_ПлановыеРемонтныеРаботы.Регистратор = &Регистратор";
		Запрос.УстановитьПараметр("Регистратор", СсылкаНаДок);
	    Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда
			Неотмененный = Результат[0].ID;
		КонецЕсли; 
	КонецЕсли;
	Возврат Неотмененный;
КонецФункции

#КонецОбласти












