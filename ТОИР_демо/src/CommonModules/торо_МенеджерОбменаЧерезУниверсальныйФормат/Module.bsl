// Конвертация тоир в формат 2 от 18.01.2016 17:58:21
#Область ПроцедурыКонвертации
Процедура ПередКонвертацией(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПослеКонвертации(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

Процедура ПередОтложеннымЗаполнением(КомпонентыОбмена) Экспорт
	
КонецПроцедуры

#КонецОбласти
#Область ПОД
//	НаправлениеОбмена - строка ("Отправка" либо "Получение").
//	ПравилаОбработкиДанных - таблица значений. 
Процедура ЗаполнитьПравилаОбработкиДанных(НаправлениеОбмена, ПравилаОбработкиДанных) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПОД_СправочникОрганизации(ПравилаОбработкиДанных);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПОД_Справочник_ЕдиницыИзмерения(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_СправочникВалюты(ПравилаОбработкиДанных);
		ДобавитьПОД_СправочникОрганизация_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_СправочникСклады_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_СправочникСкладыГруппа_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_СправочникФизическиеЛица_Получение(ПравилаОбработкиДанных);
		ДобавитьПОД_СправочникФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных);
	КонецЕсли;
КонецПроцедуры

#Область Отправка
#Область СправочникОрганизации
Процедура ДобавитьПОД_СправочникОрганизации(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "СправочникОрганизации";
	ПравилоОбработки.ОбъектВыборкиМетаданные = Метаданные.Справочники.Организации;

	ПравилоОбработки.ИспользуемыеПКО.Добавить("СправочникСсылкаОрганизации");
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПОД_Справочник_ЕдиницыИзмерения(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_ЕдиницыИзмерения";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ЕдиницыИзмерения";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_ЕдиницыИзмерения");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПОД_Справочник_Контрагенты_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Контрагенты_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Контрагенты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Контрагенты_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПОД_Справочник_Номенклатура_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Номенклатура_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Номенклатура";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Номенклатура_Получение");
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа_Получение
Процедура ДобавитьПОД_Справочник_НоменклатураГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_НоменклатураГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.НоменклатураГруппа";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_НоменклатураГруппа");
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПОД_Справочник_Пользователи_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "Справочник_Пользователи_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Пользователи";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("Справочник_Пользователи_Получение");
КонецПроцедуры
#КонецОбласти
#Область СправочникВалюты
Процедура ДобавитьПОД_СправочникВалюты(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "СправочникВалюты";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Валюты";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("СправочникСсылкаВалюты");
КонецПроцедуры
#КонецОбласти
#Область СправочникОрганизация_Получение
Процедура ДобавитьПОД_СправочникОрганизация_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "СправочникОрганизация_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Организации";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("СправочникОрганизация_Получение");
КонецПроцедуры
#КонецОбласти
#Область СправочникСклады_Получение
Процедура ДобавитьПОД_СправочникСклады_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "СправочникСклады_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.Склады";
	ПравилоОбработки.ПриОбработке = "ПОД_СправочникСклады_Получение_ПриОбработке";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("СправочникСклады_Получение");
КонецПроцедуры

Процедура ПОД_СправочникСклады_Получение_ПриОбработке(ДанныеXDTO, ИспользованиеПКО, КомпонентыОбмена)
КонецПроцедуры
#КонецОбласти
#Область СправочникСкладыГруппа_Получение
Процедура ДобавитьПОД_СправочникСкладыГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "СправочникСкладыГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.СкладыГруппа";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("СправочникСкладГруппа");
КонецПроцедуры
#КонецОбласти
#Область СправочникФизическиеЛица_Получение
Процедура ДобавитьПОД_СправочникФизическиеЛица_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "СправочникФизическиеЛица_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛица";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("СправочникФизическиеЛица_Получение");
КонецПроцедуры
#КонецОбласти
#Область СправочникФизическиеЛицаГруппа_Получение
Процедура ДобавитьПОД_СправочникФизическиеЛицаГруппа_Получение(ПравилаОбработкиДанных)
	ПравилоОбработки = ПравилаОбработкиДанных.Добавить();
	ПравилоОбработки.Имя = "СправочникФизическиеЛицаГруппа_Получение";
	ПравилоОбработки.ОбъектВыборкиФормат = "Справочник.ФизическиеЛицаГруппа";

	ПравилоОбработки.ИспользуемыеПКО.Добавить("СпровочникФизическиеЛицаГруппа_Получение");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКО
//	НаправлениеОбмена - строка ("Отправка" либо "Получение").
//	ПравилаКонвертации - таблица значений. 
Процедура ЗаполнитьПравилаКонвертацииОбъектов(НаправлениеОбмена, ПравилаКонвертации) Экспорт
	Если НаправлениеОбмена = "Отправка" Тогда
		ДобавитьПКО_СправочникСсылкаОрганизации(ПравилаКонвертации);
	ИначеЕсли НаправлениеОбмена = "Получение" Тогда
		ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации);
		ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации);
		ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации);
		ДобавитьПКО_СправочникОрганизация_Получение(ПравилаКонвертации);
		ДобавитьПКО_СправочникСкладГруппа(ПравилаКонвертации);
		ДобавитьПКО_СправочникСклады_Получение(ПравилаКонвертации);
		ДобавитьПКО_СправочникСсылкаВалюты(ПравилаКонвертации);
		ДобавитьПКО_СправочникФизическиеЛица_Получение(ПравилаКонвертации);
		ДобавитьПКО_СпровочникФизическиеЛицаГруппа_Получение(ПравилаКонвертации);
	КонецЕсли;
	ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации);
	ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации);
КонецПроцедуры

#Область Отправка
#Область СправочникСсылкаОрганизации
Процедура ДобавитьПКО_СправочникСсылкаОрганизации(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "СправочникСсылкаОрганизации";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриОтправкеДанных = "ПКО_СправочникСсылкаОрганизации_ПриОтправкеДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "НаименованиеСокращенное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоФормата = "ГоловнаяОрганизация";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_СправочникСсылкаОрганизации_ПриОтправкеДанных(ДанныеИБ, ДанныеXDTO, КомпонентыОбмена, СтекВыгрузки)
	ДанныеXDTO.КлючевыеСвойства.Вставить("ГоловнаяОрганизация", Неопределено)
КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область Получение
#Область Справочник_Контрагенты_Получение
Процедура ДобавитьПКО_Справочник_Контрагенты_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Контрагенты_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Контрагенты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Контрагенты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ГоловнойКонтрагент";
	НоваяСтрока.СвойствоФормата = "ГоловнойКонтрагент";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_Контрагенты_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительнаяИнформация";
	НоваяСтрока.СвойствоФормата = "ДополнительнаяИнформация";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылкаЮридическоеФизическоеЛицо";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,КПП,НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("ИНН,НаименованиеПолное");
	ПравилоКонвертации.ПоляПоиска.Добавить("НаименованиеПолное");
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
	
		Если НЕ ЗначениеЗаполнено(ПолученныеДанные.ГоловнойКонтрагент) Тогда
	
			ПолученныеДанные.ГоловнойКонтрагент = ДанныеИБ.ГоловнойКонтрагент;
	
		КонецЕсли;
	
	КонецЕсли;
	
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_Номенклатура_Получение
Процедура ДобавитьПКО_Справочник_Номенклатура_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Номенклатура_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Номенклатура";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Артикул";
	НоваяСтрока.СвойствоФормата = "Артикул";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЕдиницаИзмерения";
	НоваяСтрока.СвойствоФормата = "ЕдиницаИзмерения";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ЕдиницыИзмерения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Описание";
	НоваяСтрока.СвойствоФормата = "Описание";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "СтавкаНДС";
	НоваяСтрока.СвойствоФормата = "СтавкаНДС";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_СтавкиНДС";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипНоменклатуры";
	НоваяСтрока.СвойствоФормата = "ТипНоменклатуры";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ТипыНоменклатуры";

	ПравилоКонвертации.ПоляПоиска.Добавить("Артикул,Наименование,Родитель");
КонецПроцедуры

Процедура ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
			"Код,
			|Наименование,
			|Артикул");
	КонецЕсли;
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
								ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область Справочник_НоменклатураГруппа
Процедура ДобавитьПКО_Справочник_НоменклатураГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_НоменклатураГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Номенклатура;
	ПравилоКонвертации.ОбъектФормата = "Справочник.НоменклатураГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "КодВПрограмме";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_НоменклатураГруппа";

КонецПроцедуры

Процедура ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	Если ДанныеИБ <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеИБ, ПолученныеДанные,
			"Код,
			|Наименование");
	КонецЕсли;
КонецПроцедуры
#КонецОбласти
#Область Справочник_Пользователи_Получение
Процедура ДобавитьПКО_Справочник_Пользователи_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_Пользователи_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Пользователи;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Пользователи";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";

КонецПроцедуры
#КонецОбласти
#Область СправочникОрганизация_Получение
Процедура ДобавитьПКО_СправочникОрганизация_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "СправочникОрганизация_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Организации;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Организации";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "КПП";
	НоваяСтрока.СвойствоФормата = "КПП";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Префикс";
	НоваяСтрока.СвойствоФормата = "Префикс";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.СвойствоФормата = "ЮридическоеФизическоеЛицо";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылкаЮридическоеФизическоеЛицо";

КонецПроцедуры
#КонецОбласти
#Область СправочникСкладГруппа
Процедура ДобавитьПКО_СправочникСкладГруппа(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "СправочникСкладГруппа";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.СкладыГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СправочникСкладГруппа";

КонецПроцедуры
#КонецОбласти
#Область СправочникСклады_Получение
Процедура ДобавитьПКО_СправочникСклады_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "СправочникСклады_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Склады;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Склады";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_СправочникСклады_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СправочникСкладГруппа";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "РозничныйВидЦены";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТекущийОтветственный";
	НоваяСтрока.СвойствоФормата = "МОЛ";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СправочникФизическиеЛица_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ТипСклада";
	НоваяСтрока.СвойствоФормата = "ТипСклада";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ТипыСкладов";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подразделение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_СправочникСклады_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	Подразделение = ДанныеXDTO.Подразделение.Наименование;
	
	ПолученныеДанные.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию(Подразделение);
КонецПроцедуры
#КонецОбласти
#Область СправочникСсылкаВалюты
Процедура ДобавитьПКО_СправочникСсылкаВалюты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "СправочникСсылкаВалюты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.Валюты;
	ПравилоКонвертации.ОбъектФормата = "Справочник.Валюты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ПараметрыПрописиНаРусском";
	НоваяСтрока.СвойствоФормата = "ПараметрыПрописиНаРусском";

КонецПроцедуры
#КонецОбласти
#Область СправочникФизическиеЛица_Получение
Процедура ДобавитьПКО_СправочникФизическиеЛица_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "СправочникФизическиеЛица_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛица";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ПриКонвертацииДанныхXDTO = "ПКО_СправочникФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO";
	ПравилоКонвертации.ПередЗаписьюПолученныхДанных = "ПКО_СправочникФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных";
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДатаРождения";
	НоваяСтрока.СвойствоФормата = "ДатаРождения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ИНН";
	НоваяСтрока.СвойствоФормата = "ИНН";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "ФИО";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Пол";
	НоваяСтрока.СвойствоФормата = "Пол";
	НоваяСтрока.ПравилоКонвертацииСвойства = "ПеречислениеСсылка_ПолФизическогоЛица";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";
	НоваяСтрока.ПравилоКонвертацииСвойства = "СпровочникФизическиеЛицаГруппа_Получение";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФИО";
	НоваяСтрока.СвойствоФормата = "ФИО";
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("ДополнительныеРеквизиты", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.ДополнительныеРеквизиты;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Значение";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Свойство";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	ПравилоКонвертации.СвойстваТабличныхЧастей.Вставить("КонтактнаяИнформация", ОбменДаннымиXDTOСервер.ИнициализироватьТаблицуСвойствДляПравилаКонвертации());
	СвойстваТЧ = ПравилоКонвертации.СвойстваТабличныхЧастей.КонтактнаяИнформация;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Вид";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗначенияПолей";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;
	
	НоваяСтрока = СвойстваТЧ.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Тип";
	НоваяСтрока.ИспользуетсяАлгоритмКонвертации = Истина;

КонецПроцедуры

Процедура ПКО_СправочникФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(ДанныеXDTO, ПолученныеДанные, КомпонентыОбмена)
	ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные);
	ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, Истина);
КонецПроцедуры

Процедура ПКО_СправочникФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(ПолученныеДанные, ДанныеИБ, КонвертацияСвойств, КомпонентыОбмена)
	ЗагрузитьДополнительныеСведения(?(ДанныеИБ = Неопределено, ПолученныеДанные.ПолучитьСсылкуНового(), ДанныеИБ.Ссылка), 
	                            ПолученныеДанные.ДополнительныеСвойства, КомпонентыОбмена);
КонецПроцедуры
#КонецОбласти
#Область СпровочникФизическиеЛицаГруппа_Получение
Процедура ДобавитьПКО_СпровочникФизическиеЛицаГруппа_Получение(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "СпровочникФизическиеЛицаГруппа_Получение";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ФизическиеЛица;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ФизическиеЛицаГруппа";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Истина;
	ПравилоКонвертации.ВариантИдентификации = "ПоУникальномуИдентификатору";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Родитель";
	НоваяСтрока.СвойствоФормата = "Группа";

КонецПроцедуры
#КонецОбласти
#КонецОбласти
#Область ОтправкаИПолучение
#Область Справочник_ДополнительныеРеквизиты
Процедура ДобавитьПКО_Справочник_ДополнительныеРеквизиты(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ДополнительныеРеквизиты";
	ПравилоКонвертации.ОбъектДанных = Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ДополнительныеРеквизиты";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ВладелецДополнительныхЗначений";
	НоваяСтрока.СвойствоФормата = "ВладелецДополнительныхЗначений";
	НоваяСтрока.ПравилоКонвертацииСвойства = "Справочник_ДополнительныеРеквизиты";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияИспользуются";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияИспользуются";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ДополнительныеЗначенияСВесом";
	НоваяСтрока.СвойствоФормата = "ДополнительныеЗначенияСВесом";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Заголовок";
	НоваяСтрока.СвойствоФормата = "Заголовок";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыВыбораЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыВыбораЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаголовокФормыЗначения";
	НоваяСтрока.СвойствоФормата = "ЗаголовокФормыЗначения";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЗаполнятьОбязательно";
	НоваяСтрока.СвойствоФормата = "ЗаполнятьОбязательно";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Комментарий";
	НоваяСтрока.СвойствоФормата = "Комментарий";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "МногострочноеПолеВвода";
	НоваяСтрока.СвойствоФормата = "МногострочноеПолеВвода";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Подсказка";
	НоваяСтрока.СвойствоФормата = "Подсказка";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ФорматСвойства";
	НоваяСтрока.СвойствоФормата = "ФорматСвойства";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "ЭтоДополнительноеСведение";
	НоваяСтрока.СвойствоФормата = "ЭтоДополнительноеСведение";

	ПравилоКонвертации.ПоляПоиска.Добавить("Наименование");
КонецПроцедуры
#КонецОбласти
#Область Справочник_ЕдиницыИзмерения
Процедура ДобавитьПКО_Справочник_ЕдиницыИзмерения(ПравилаКонвертации)

	ПравилоКонвертации = ОбменДаннымиXDTOСервер.ИнициализироватьПравилоКонвертацииОбъекта(ПравилаКонвертации);
	ПравилоКонвертации.ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ПравилоКонвертации.ОбъектДанных = Метаданные.Справочники.ЕдиницыИзмерения;
	ПравилоКонвертации.ОбъектФормата = "Справочник.ЕдиницыИзмерения";
	ПравилоКонвертации.ПравилоДляГруппыСправочника = Ложь;
	ПравилоКонвертации.ВариантИдентификации = "СначалаПоУникальномуИдентификаторуПотомПоПолямПоиска";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Код";
	НоваяСтрока.СвойствоФормата = "Код";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "Наименование";
	НоваяСтрока.СвойствоФормата = "Наименование";
	
	НоваяСтрока = ПравилоКонвертации.Свойства.Добавить();
	НоваяСтрока.СвойствоКонфигурации = "НаименованиеПолное";
	НоваяСтрока.СвойствоФормата = "НаименованиеПолное";

	ПравилоКонвертации.ПоляПоиска.Добавить("Код");
КонецПроцедуры
#КонецОбласти
#КонецОбласти

#КонецОбласти
#Область ПКПД
////////////////////////////////////////////////////////////////////////////////
// ПРАВИЛА КОНВЕРТАЦИИ ПРЕДОПРЕДЕЛЕННЫХ ДАННЫХ

//	НаправлениеОбмена - строка ("Отправка" либо "Получение").
//	ПравилаКонвертации - таблица значений. 
Процедура ЗаполнитьПравилаКонвертацииПредопределенныхДанных(НаправлениеОбмена, ПравилаКонвертации) Экспорт

	// ПеречислениеСсылка_ПолФизическогоЛица
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПеречислениеСсылка_ПолФизическогоЛица";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ПолФизическогоЛица;
	ПравилоКонвертации.ТипXDTO = "Пол";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Женский, "Женский");
	ЗначенияДляОтправки.Вставить(Перечисления.ПолФизическогоЛица.Мужской, "Мужской");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Женский", Перечисления.ПолФизическогоЛица.Женский);
	ЗначенияДляПолучения.Вставить("Мужской", Перечисления.ПолФизическогоЛица.Мужской);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка_СтавкиНДС
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПеречислениеСсылка_СтавкиНДС";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.СтавкиНДС;
	ПравилоКонвертации.ТипXDTO = "СтавкиНДС";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.БезНДС, "БезНДС");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС0, "НДС0");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10, "НДС10");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС10_110, "НДС10_110");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18, "НДС18");
	ЗначенияДляОтправки.Вставить(Перечисления.СтавкиНДС.НДС18_118, "НДС18_118");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("БезНДС", Перечисления.СтавкиНДС.БезНДС);
	ЗначенияДляПолучения.Вставить("НДС0", Перечисления.СтавкиНДС.НДС0);
	ЗначенияДляПолучения.Вставить("НДС10", Перечисления.СтавкиНДС.НДС10);
	ЗначенияДляПолучения.Вставить("НДС10_110", Перечисления.СтавкиНДС.НДС10_110);
	ЗначенияДляПолучения.Вставить("НДС18", Перечисления.СтавкиНДС.НДС18);
	ЗначенияДляПолучения.Вставить("НДС18_118", Перечисления.СтавкиНДС.НДС18_118);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка_ТипыНоменклатуры
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПеречислениеСсылка_ТипыНоменклатуры";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыНоменклатуры;
	ПравилоКонвертации.ТипXDTO = "ТипыНоменклатуры";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара, "МногооборотнаяТара");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Работа, "Работа");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Товар, "Товар");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыНоменклатуры.Услуга, "Услуга");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("МногооборотнаяТара", Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	ЗначенияДляПолучения.Вставить("Работа", Перечисления.ТипыНоменклатуры.Работа);
	ЗначенияДляПолучения.Вставить("Товар", Перечисления.ТипыНоменклатуры.Товар);
	ЗначенияДляПолучения.Вставить("Услуга", Перечисления.ТипыНоменклатуры.Услуга);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылка_ТипыСкладов
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПеречислениеСсылка_ТипыСкладов";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ТипыСкладов;
	ПравилоКонвертации.ТипXDTO = "ТипыСкладов";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.ОптовыйСклад, "Оптовый");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.РозничныйМагазин, "НеавтоматизированнаяТорговаяТочка");
	ЗначенияДляОтправки.Вставить(Перечисления.ТипыСкладов.РозничныйМагазин, "Розничный");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("Оптовый", Перечисления.ТипыСкладов.ОптовыйСклад);
	ЗначенияДляПолучения.Вставить("НеавтоматизированнаяТорговаяТочка", Перечисления.ТипыСкладов.РозничныйМагазин);
	ЗначенияДляПолучения.Вставить("Розничный", Перечисления.ТипыСкладов.РозничныйМагазин);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

	// ПеречислениеСсылкаЮридическоеФизическоеЛицо
	ПравилоКонвертации = ПравилаКонвертации.Добавить();
	ПравилоКонвертации.ИмяПКПД = "ПеречислениеСсылкаЮридическоеФизическоеЛицо";
	ПравилоКонвертации.ТипДанных = Метаданные.Перечисления.ЮридическоеФизическоеЛицо;
	ПравилоКонвертации.ТипXDTO = "ЮридическоеФизическоеЛицо";

	ЗначенияДляОтправки = Новый Соответствие;
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо, "ФизическоеЛицо");
	ЗначенияДляОтправки.Вставить(Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо");
	ПравилоКонвертации.КонвертацииЗначенийПриОтправке = ЗначенияДляОтправки;
	ЗначенияДляПолучения = Новый Соответствие;
	ЗначенияДляПолучения.Вставить("ФизическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ЗначенияДляПолучения.Вставить("ЮридическоеЛицо", Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
	ПравилоКонвертации.КонвертацииЗначенийПриПолучении = ЗначенияДляПолучения;

КонецПроцедуры

#КонецОбласти
#Область Алгоритмы

////////////////////////////////////////////////////////////////////////////////
// АЛГОРИТМЫ

Процедура ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(ТабличнаяЧастьОбъектаПослеОбработки, ТабличнаяЧастьОбъектаДоОбработки,
												КолонкиДляВключения = "", КолонкиДляИсключения = "") Экспорт
	ОбменДаннымиXDTOСервер.ЗаполнитьТабличнуюЧастьОбъектаНачальнымиДанными(
		ТабличнаяЧастьОбъектаПослеОбработки, 
		ТабличнаяЧастьОбъектаДоОбработки, 
		КолонкиДляВключения, 
		КолонкиДляИсключения);
		
КонецПроцедуры

Процедура ЗаполнитьСвойстваШапкиОбъекта(КонвертацияСвойств, ПолученныеДанные, ДанныеИБ, МассивИсключений = Неопределено) Экспорт
	Для Каждого СвойствоОбъекта ИЗ КонвертацияСвойств Цикл
		СвойствоИБ = СвойствоОбъекта.СвойствоКонфигурации;
		Если СокрЛП(СвойствоИБ) = "" Тогда
			Продолжить;
		КонецЕсли;
		Если МассивИсключений <> Неопределено И МассивИсключений.Найти(СвойствоИБ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ДанныеИБ[СвойствоИБ] = ПолученныеДанные[СвойствоИБ];
	КонецЦикла;
КонецПроцедуры


Процедура ЗагрузитьДополнительныеРеквизиты(ПолученныеДанные, ДанныеXDTO, ЕстьТЧДопРеквизиты = Ложь)
	Если НЕ (ДанныеXDTO.Свойство("ДополнительныеРеквизиты")
			И ЗначениеЗаполнено(ДанныеXDTO.ДополнительныеРеквизиты)) Тогда
		Возврат;
	КонецЕсли;
	МассивСтрокДопРеквизиты = Новый Массив;
	МассивСтрокДопСведения = Новый Массив;
	Для Каждого СтрокаТЧ ИЗ ДанныеXDTO.ДополнительныеРеквизиты Цикл
		СтруктураДанныхСтроки = Новый Структура("Свойство, Значение");
	
		// Проверка на простой тип
		Если ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Строка")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Число")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Дата")
			ИЛИ ТипЗнч(СтрокаТЧ.ЗначениеСвойства) = Тип("Булево") Тогда
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = СтрокаТЧ.ЗначениеСвойства;
		Иначе
			ИмяПКО = "";
			ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
			Если ИмяПКО = "" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураДанныхСтроки.Свойство = СтрокаТЧ.Свойство;
			СтруктураДанныхСтроки.Значение = Новый Структура("Значение, ИмяПКО", СтрокаТЧ.ЗначениеСвойства, ИмяПКО);
		КонецЕсли;
		Если СтрокаТЧ.Свойство.Свойство("ЭтоДополнительноеСведение") И СтрокаТЧ.Свойство.ЭтоДополнительноеСведение Тогда
			МассивСтрокДопСведения.Добавить(СтруктураДанныхСтроки);
		ИначеЕсли ЕстьТЧДопРеквизиты Тогда
			МассивСтрокДопРеквизиты.Добавить(СтруктураДанныхСтроки);
		КонецЕсли;
	КонецЦикла;
	Если МассивСтрокДопРеквизиты.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеРеквизиты", МассивСтрокДопРеквизиты);
	КонецЕсли;
	Если МассивСтрокДопСведения.Количество() > 0 Тогда
		ПолученныеДанные.ДополнительныеСвойства.Вставить("ДополнительныеСведения", МассивСтрокДопСведения);
	КонецЕсли;
КонецПроцедуры
Процедура ЗагрузитьДополнительныеСведения(ОбъектСсылка, СтруктураДопСвойства, КомпонентыОбмена)
	Если СтруктураДопСвойства.Свойство("ДополнительныеСведения") = Ложь ИЛИ 
		СтруктураДопСвойства.ДополнительныеСведения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ДопСведенияНаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
	ДопСведенияНаборЗаписей.Отбор.Объект.Установить(ОбъектСсылка);
	
	Для Каждого СтрокаДопСведения ИЗ СтруктураДопСвойства.ДополнительныеСведения Цикл
		СвойствоСсылка = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
			СтрокаДопСведения.Свойство, 
			ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,"Справочник_ДополнительныеРеквизиты"), 
			"ПолучитьСсылку");
		Если ТипЗнч(СтрокаДопСведения.Значение) = Тип("Структура") Тогда
			ЗначениеСвойства = ОбменДаннымиXDTOСервер.СтруктураОбъектаXDTOВДанныеИБ(КомпонентыОбмена, 
					СтрокаДопСведения.Значение.Значение, 
					ОбменДаннымиXDTOСервер.ПКОПоИмени(КомпонентыОбмена,СтрокаДопСведения.Значение.ИмяПКО), 
					"ПолучитьСсылку");
		Иначе
			ЗначениеСвойства = СтрокаДопСведения.Значение;
		КонецЕсли;
		НовЗапись = ДопСведенияНаборЗаписей.Добавить();
		НовЗапись.Объект = ОбъектСсылка;
		НовЗапись.Свойство = СвойствоСсылка;
		НовЗапись.Значение = ЗначениеСвойства;
	КонецЦикла;	
	ДопСведенияНаборЗаписей.Записать();
КонецПроцедуры
Процедура ЗагрузкаДопРеквизитов_ОпределитьИмяПКО(ЗначениеСвойства, ИмяПКО)
	ТипЗначенияСвойства = ЗначениеСвойства.ТипЗначения;
	
	Если Найти(ТипЗначенияСвойства, "НоменклатураГруппа")>0 Тогда
		ИмяПКО = "Справочник_НоменклатураГруппа";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Номенклатура")>0 Тогда
		ИмяПКО = "Справочник_Номенклатура_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "КонтрагентГруппа")>0 Тогда
		Возврат;
	ИначеЕсли Найти(ТипЗначенияСвойства, "Контрагент")>0 Тогда
		ИмяПКО = "Справочник_Контрагенты_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЗначенияДополнительныхРеквизитов")>0 Тогда
		ИмяПКО = "Справочник_ЗначенияДополнительныхРеквизитов";
	ИначеЕсли Найти(ТипЗначенияСвойства, "БанкГруппа")>0 Тогда
		ИмяПКО = "Справочник_БанкиГруппа";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Банк")>0 Тогда
		ИмяПКО = "Справочник_Банки";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Валюта")>0 Тогда
		Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
			И ЗначениеСвойства.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_Валюты_ИзСтруктуры";
		Иначе
			ИмяПКО = "Справочник_Валюты";
		КонецЕсли;
	ИначеЕсли Найти(ТипЗначенияСвойства, "Договор")>0 Тогда
		Если ТипЗнч(ЗначениеСвойства) = Тип("Структура")
			И ЗначениеСвойства.Свойство("Ссылка") = Ложь Тогда
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_ИзСтруктуры_Получ";
		Иначе
			ИмяПКО = "Справочник_ДоговорыКонтрагентов_Получение";
		КонецЕсли;
	ИначеЕсли Найти(ТипЗначенияСвойства, "ЕдиницаИзмерения")>0 Тогда
		ИмяПКО = "Справочник_ЕдиницыИзмерения";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Организация")>0 Тогда
		ИмяПКО = "Справочник_Организации_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Пользователь")>0 Тогда
		ИмяПКО = "Справочник_Пользователи";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Подразделение")>0 Тогда
		ИмяПКО = "Справочник_Подразделения_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СкладГруппа")>0 Тогда
		ИмяПКО = "Справочник_СкладыГруппа";
	ИначеЕсли Найти(ТипЗначенияСвойства, "Склад")>0 Тогда
		ИмяПКО = "Справочник_Склады_Получение";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДДС")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДДС";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяДоходов")>0 Тогда
		ИмяПКО = "Справочник_СтатьиДоходов";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтатьяРасходов")>0 Тогда
		ИмяПКО = "Справочник_СтатьиРасходов";
	ИначеЕсли Найти(ТипЗначенияСвойства, "СтранаМира")>0 Тогда
		ИмяПКО = "Справочник_СтраныМира";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ТипЦен")>0 Тогда
		ИмяПКО = "Справочник_ТипыЦен";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицоГруппа")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛицаГруппа_Отправка";
	ИначеЕсли Найти(ТипЗначенияСвойства, "ФизическоеЛицо")>0 Тогда
		ИмяПКО = "Справочник_ФизическиеЛица_Получение";
	КонецЕсли;
КонецПроцедуры
Процедура ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ)
	XDTOКонтактная = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияИзXML(СтрокаКИ.ЗначенияПолей, СтрокаКИ.Тип, );
	
	Если СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон
	
		ИЛИ СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
	
		СтрокаКИ.НомерТелефона = XDTOКонтактная.Представление;
	
		СтрокаКИ.НомерТелефонаБезКодов = XDTOКонтактная.Состав.Номер;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
	
		СтрокаКИ.Страна = XDTOКонтактная.Состав.Страна;
	
		Если ТипЗнч(XDTOКонтактная.Состав.Состав) <> Тип("Строка") Тогда
	
			СтрокаКИ.Регион = XDTOКонтактная.Состав.Состав.СубъектРФ;
	
			СтрокаКИ.Город = XDTOКонтактная.Состав.Состав.Город;
	
		КонецЕсли;
	
	ИначеЕсли СтрокаКИ.Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
	
		СтрокаКИ.АдресЭП = XDTOКонтактная.Состав.Значение;
	
		ПозицияСобаки = Найти(XDTOКонтактная.Состав.Значение, "@");
	
		Если ПозицияСобаки <> 0 Тогда
	
			СтрокаКИ.ДоменноеИмяСервера = Сред(XDTOКонтактная.Состав.Значение, ПозицияСобаки + 1);
	
		КонецЕсли;
	
	КонецЕсли;
	
	// Заполнение представления
	
	Если Найти(XDTOКонтактная.Представление, Символы.ПС) = 0 Тогда
	
		СтрокаКИ.Представление = XDTOКонтактная.Представление;
	
	Иначе
	
		СтрокаПредставление = "";
	
		Если СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураПолейКИ, СтрокаПредставление);
	
		ИначеЕсли СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон")
	
			ИЛИ СтрокаКИ.Тип = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Факс") Тогда
	
			СтруктураПолейКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(XDTOКонтактная.Представление, СтрокаКИ.Вид);
	
			
			СтруктураПолейКИПолная = Новый Структура("КодСтраны,КодГорода,НомерТелефона,Добавочный,Комментарий");
			ЗаполнитьЗначенияСвойств(СтруктураПолейКИПолная, СтруктураПолейКИ);
	
			СтрокаПредставление = УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеТелефона(
				СтруктураПолейКИПолная.КодСтраны, СтруктураПолейКИПолная.КодГорода,
				СтруктураПолейКИПолная.НомерТелефона, СтруктураПолейКИПолная.Добавочный, 
				СтруктураПолейКИПолная.Комментарий);
			
	
		Иначе
	
			СтрокаПредставление = СтрЗаменить(XDTOКонтактная.Представление, Символы.ПС, ",");
	
		КонецЕсли;
	
		
	
		СтрокаКИ.Представление = СтрокаПредставление;
	
	КонецЕсли;
КонецПроцедуры
Процедура ПолучитьКонтактнуюИнформациюФизическогоЛица(ДанныеXDTO, ПолученныеДанные)
	Если ДанныеXDTO.Свойство("КонтактнаяИнформация")
		И ЗначениеЗаполнено(ДанныеXDTO.КонтактнаяИнформация) Тогда
		
		Для Каждого СтрокаXDTO Из ДанныеXDTO.КонтактнаяИнформация Цикл
			ВидКИСтрокой = СтрокаXDTO.ВидКонтактнойИнформации.Значение;
			ТекВидКИ = Неопределено;
			Если Лев(СокрЛП(ВидКИСтрокой),18) = "ПользовательскаяКИ" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию(СтрокаXDTO.НаименованиеКонтактнойИнформации,,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
				Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
					ВидКИОбъект = Справочники.ВидыКонтактнойИнформации.СоздатьЭлемент();
					ВидКИОбъект.Родитель = Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица;
					ВидКИОбъект.Наименование = СтрокаXDTO.НаименованиеКонтактнойИнформации;
					ИмяТипаКИ = СтрЗаменить(СокрЛП(ВидКИСтрокой),"ПользовательскаяКИ","");
					ВидКИОбъект.Тип = Перечисления.ТипыКонтактнойИнформации[ИмяТипаКИ];
					ВидКИОбъект.Записать();
					ТекВидКИ = ВидКИОбъект.Ссылка;
				КонецЕсли;
			ИначеЕсли ВидКИСтрокой = "АдресЭлектроннойПочты" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email",,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
			ИначеЕсли ВидКИСтрокой = "Телефон" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Мобильный телефон",,Справочники.ВидыКонтактнойИнформации.СправочникФизическиеЛица);
			ИначеЕсли ВидКИСтрокой = "ПочтовыйАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;
			ИначеЕсли ВидКИСтрокой = "ФактическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ЮридическийАдрес" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ТелефонДомашний" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица;		
			ИначеЕсли ВидКИСтрокой = "ТелефонРабочий" Тогда
				ТекВидКИ = Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица;		
			Иначе
				Продолжить;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекВидКИ) Тогда
				Продолжить;
			КонецЕсли;
	
			ТекТипКИ = ТекВидКИ.Тип;	
			СтрокаКИ = ПолученныеДанные.КонтактнаяИнформация.Добавить();
			ЗначенияПолейСтрокой = СокрЛП(СтрокаXDTO.ЗначенияПолей);
			СтрокаКИ.ЗначенияПолей = ЗначенияПолейСтрокой;
			СтрокаКИ.Вид = ТекВидКИ;
			СтрокаКИ.Тип = ТекТипКИ;
			
			ЗаполнитьСтрокуКонтактнойИнформацией(СтрокаКИ);
		
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
#Область Параметры
////////////////////////////////////////////////////////////////////////////////
// ПАРАМЕТРЫ КОНВЕРТАЦИИ
// ПараметрыКонвертации - структура
Процедура ЗаполнитьПараметрыКонвертации(ПараметрыКонвертации) Экспорт
КонецПроцедуры

#КонецОбласти
#Область ОбщегоНазначения
////////////////////////////////////////////////////////////////////////////////
// ОБЩЕГО НАЗНАЧЕНИЯ

// ИмяПроцедуры - строка.
// СтруктураПараметров - структура.
Процедура ВыполнитьПроцедуруМодуляМенеджера(ИмяПроцедуры, Параметры) Экспорт
	Если ИмяПроцедуры = "ПОД_СправочникСклады_Получение_ПриОбработке" Тогда 
		ПОД_СправочникСклады_Получение_ПриОбработке(
			Параметры.ОбъектОбработки, Параметры.ИспользованиеПКО, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_СправочникСсылкаОрганизации_ПриОтправкеДанных" Тогда 
		ПКО_СправочникСсылкаОрганизации_ПриОтправкеДанных(
			Параметры.ДанныеИБ, Параметры.ДанныеXDTO, Параметры.КомпонентыОбмена, Параметры.СтекВыгрузки);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Контрагенты_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_Номенклатура_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_Справочник_НоменклатураГруппа_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_СправочникСклады_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_СправочникСклады_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_СправочникФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO" Тогда 
		ПКО_СправочникФизическиеЛица_Получение_ПриКонвертацииДанныхXDTO(
			Параметры.ДанныеXDTO, Параметры.ПолученныеДанные, Параметры.КомпонентыОбмена);
	ИначеЕсли ИмяПроцедуры = "ПКО_СправочникФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных" Тогда 
		ПКО_СправочникФизическиеЛица_Получение_ПередЗаписьюПолученныхДанных(
			Параметры.ПолученныеДанные, Параметры.ДанныеИБ, Параметры.КонвертацияСвойств, Параметры.КомпонентыОбмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
