////////////////////////////////////////////////////////////////////////////////
// торо_Ремонты: общие процедуры и функции для работы с ремонтами
//
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#Область ВспомогательныеФункцииДляРасчетаППР

// Функция преобразует текст в дату
//
// Параметры:
//  Текст - Строка - текст.
//
// Возвращаемое значение:
//  Дата - Дата.
//
Функция ДиаграммаГантаПреобразоватьТекстВДату(Текст) Экспорт
	
	Попытка
		
		Поправка = ?(СтрДлина(Текст)>=19, 1, 0);
		День   = Число(Сред(Текст,  0, 2));
		Месяц  = Число(Сред(Текст,  4, 2));
		Год    = Число(Сред(Текст,  7, 4));
		Час    = Число(Сред(Текст,  11 + Поправка, 2));
		Минута = Число(Сред(Текст,  14 + Поправка, 2));
		Сек    = Число(Сред(Текст,  17 + Поправка, 2));
		
	Исключение
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка отображения диаграммы ремонтов'"), СтатусСообщения.Важное);
	КонецПопытки; 
	
	Возврат Дата(Год, Месяц, День, Час, Минута, Сек);
	
КонецФункции // ДиаграммаГантаПреобразоватьТекстВДату()

// Функция выполняет проверку, является ли единица измерения часом
//
// Параметры: 
//  ЕдИзмОКЕИ - СправрчникСсылка.КлассификаторЕдиницИзмерения - единица измерения.
//
// Возвращаемое значение:
//  Булево - это час.
//
Функция ЕдиницаИзмеренияЕстьЧас(ЕдИзмОКЕИ) Экспорт
	
	// определяется по коду в ОКЕИ
	Возврат (ЕдИзмОКЕИ.Наименование = "ч");
	
КонецФункции  // ЕдиницаИзмеренияЕстьЧас

// Процедура выполняет построение диагрммы Ганта для графика ППР
//
// Параметры:
//  Диаграмма - Диаграмма - диаграмма Ганта.
//  ТаблицаДанныхППР - ТаблицаЗначений - таблица значений исходных данных.
//  СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - структура иерархии.
//  ОтображатьИерархию - Булево - отображать иерархию.
//  ИспользоватьИерархию - Булево - использовать иерархию.
//  РезультатЗапроса - РезультатЗапроса - результат запроса.
//  ЭтоКорректировка - Булево - Это корректировка.
//  Редактировать - Булево - редактировать.
//  ИспользоватьРасшифровку - Булево - использовать расшифровку.
//  ДиаграммаДляОтчета - Булево - это для диаграммы.
//  СортироватьПоНаименованию - Булево - выполнить сортировку по наименованию.
//
Процедура ПостроитьДиаграммуГантаДляППР(Диаграмма, ТаблицаДанныхППР, СтруктураИерархии = Неопределено, ОтображатьИерархию = Ложь, ИспользоватьИерархию = Ложь, РезультатЗапроса = Неопределено, ЭтоКорректировка = Ложь, Редактировать = Истина, ИспользоватьРасшифровку = Истина, ДиаграммаДляОтчета = Ложь, СортироватьПоНаименованию = Истина) Экспорт 
	
	//////////////////////////////////////////////////////
	ТекДата = ТекущаяДата();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	
	ОписаниеТ = новый ОписаниеТипов(МассивТипов);
	
	ЕстьЦепочки = ТаблицаДанныхППР.Колонки.Найти("Цепочка") <> Неопределено;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьВЗ",ОписаниеТ);
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьВЗ");
	КонецЕсли;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьДвиженияПоВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьДвиженияПоВЗ",ОписаниеТ);
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьДвиженияПоВЗ");
	КонецЕсли;
	
	Диаграмма.Очистить();
	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	
	СерияРемонт = Диаграмма.Серии.Добавить();
	СерияРемонт.Текст = "График ремонта";
	
	ЦветВыполненого 			= WebЦвета.Черный;
	ЦветИзмененного 			= WebЦвета.Томатный;
	ЦветОтмененного 			= WebЦвета.Красный;
	ЦветЗапланированного 		= WebЦвета.Васильковый;
	ЦветЗамещенногоИсходного 	= WebЦвета.СеребристоСерый;
	ЦветИсходного 				= WebЦвета.ГолубойСоСтальнымОттенком;
	ЦветЗамещенного 			= WebЦвета.СветлоСерый;
	
	СтруктураЦветов = Новый Структура("ЦветИсходного, ЦветВыполненого, ЦветИзмененного, ЦветОтмененного, ЦветЗамещенного, ЦветЗапланированного, ЦветЗамещенногоИсходного");
	СтруктураЦветов.ЦветВыполненого 			= WebЦвета.Черный;
	СтруктураЦветов.ЦветИзмененного 			= WebЦвета.Томатный;
	СтруктураЦветов.ЦветОтмененного 			= WebЦвета.Красный;
	СтруктураЦветов.ЦветЗапланированного 		= WebЦвета.Васильковый;
	СтруктураЦветов.ЦветЗамещенногоИсходного 	= WebЦвета.СеребристоСерый;
	СтруктураЦветов.ЦветИсходного 				= WebЦвета.ГолубойСоСтальнымОттенком;
	СтруктураЦветов.ЦветЗамещенного 			= WebЦвета.СветлоСерый;
	
	
	Запрос = Новый Запрос;
	Если Не ОтображатьИерархию И НЕ ИспользоватьИерархию Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|	ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|   ТаблицаДанныхППР.Замещен,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	НомерСтрокиВРЦепочки,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			КонецЕсли;
		Иначе
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР,
				|	НомерСтрокиВРЦепочки";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР ";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	ОбъектРемонтныхРабот";
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", НомерСтрокиВРЦепочки";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ", ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоОР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОР.Следующий() Цикл
			
			ТочкаОРР = Диаграмма.Точки.Добавить();
			ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
			Если ИспользоватьРасшифровку Тогда
				ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
			КонецЕсли;
			
			ВыборкаПоВРИлиЦепочкам = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВРИлиЦепочкам.Следующий() Цикл
				
				Если ЕстьЦепочки Тогда
					ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоВР.Следующий() Цикл
						ВывестиЧастьГрафикаПервыйВариант(ВыборкаПоВР, ВыборкаПоОР, ТекДата, ТочкаОРР, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка,Редактировать);
					КонецЦикла;
					
				Иначе
					ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам;					
					ВывестиЧастьГрафикаПервыйВариант(ВыборкаПоВР, ВыборкаПоОР, ТекДата, ТочкаОРР, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка,Редактировать);
					
				КонецЕсли;	
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураИерархии) И НЕ ИспользоватьИерархию Тогда
		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель КАК Положение,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	НомерСтрокиВРЦепочки,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			КонецЕсли;
		Иначе
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР,
				|	НомерСтрокиВРЦепочки";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР ";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", НомерСтрокиВРЦепочки";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ", ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоПоложению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоложению.Следующий() Цикл
			
			ТочкаПоложение = Диаграмма.Точки.Добавить();
			ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.Положение);
			Если ИспользоватьРасшифровку Тогда
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.Положение;
			КонецЕсли;
			
			ВыборкаПоОР = ВыборкаПоПоложению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОР.Следующий() Цикл
				
				ТочкаОРР = ТочкаПоложение.Точки.Добавить();
				ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
				Если ИспользоватьРасшифровку Тогда
					ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
				КонецЕсли;
				
				ВыборкаПоВРИлиЦепочкам = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВРИлиЦепочкам.Следующий() Цикл
					
					Если ЕстьЦепочки Тогда
						ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПоВР.Следующий() Цикл
							ВывестиЧастьГрафикаВторойВариант(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать);
						КонецЦикла;
						
					Иначе
						ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам; 						
						ВывестиЧастьГрафикаВторойВариант(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать);
					КонецЕсли;	
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли НЕ ИспользоватьИерархию И СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Положение,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаСтруктуры
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ЕСТЬNULL(ТаблицаСтруктуры.Положение, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаСтруктуры.Положение) КАК ПоложениеПредставление,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтруктуры КАК ТаблицаСтруктуры
		|		ПО ТаблицаДанныхППР.ОбъектРемонтныхРабот = ТаблицаСтруктуры.ОбъектИерархии
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	НомерСтрокиВРЦепочки,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			КонецЕсли;
		Иначе
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР,
				|	НомерСтрокиВРЦепочки";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР ";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", НомерСтрокиВРЦепочки";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ", ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоПоложению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоложению.Следующий() Цикл
			
			ТочкаПоложение = Диаграмма.Точки.Добавить();
			ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.Положение);
			Если ИспользоватьРасшифровку Тогда
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.Положение;
			КонецЕсли;
			
			ВыборкаПоОР = ВыборкаПоПоложению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОР.Следующий() Цикл
				
				ТочкаОРР = ТочкаПоложение.Точки.Добавить();
				ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
				Если ИспользоватьРасшифровку Тогда
					ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
				КонецЕсли;
				
				ВыборкаПоВРИлиЦепочкам = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВРИлиЦепочкам.Следующий() Цикл
					
					Если ЕстьЦепочки Тогда
						ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПоВР.Следующий() Цикл
							ВывестиЧастьГрафикаТретийВариант(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать);
						КонецЦикла;
						
					Иначе
						ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам;						
						ВывестиЧастьГрафикаТретийВариант(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать);
						
					КонецЕсли;
					
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИспользоватьИерархию Тогда
		
		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель КАК Родитель,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	НомерСтрокиВРЦепочки,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			КонецЕсли;
		Иначе
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР,
				|	НомерСтрокиВРЦепочки";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР ";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	ОбъектРемонтныхРабот ИЕРАРХИЯ";
		
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", НомерСтрокиВРЦепочки";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ", ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоПоложению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТаблицаОбъектовРемонта = Новый ТаблицаЗначений();
		ТаблицаОбъектовРемонта.Колонки.Добавить("РодительОбъекта");
		ТаблицаОбъектовРемонта.Колонки.Добавить("СамОбъект");  		
		
		Пока ВыборкаПоПоложению.Следующий() Цикл 			
			
			Если ТаблицаОбъектовРемонта.Найти(ВыборкаПоПоложению.Родитель, "СамОбъект") = Неопределено Тогда
				ТочкаПоложение = Диаграмма.Точки.Добавить();
				ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.ОбъектРемонтныхРабот);
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.ОбъектРемонтныхРабот;
				
				СтрокаТаблицы = ТаблицаОбъектовРемонта.Добавить();
				СтрокаТаблицы.РодительОбъекта = ТочкаПоложение;
				СтрокаТаблицы.СамОбъект = ВыборкаПоПоложению.ОбъектРемонтныхРабот;
			Иначе
				ТочкаПоложение = ТаблицаОбъектовРемонта.Найти(ВыборкаПоПоложению.Родитель, "СамОбъект").РодительОбъекта.Точки.Добавить();
				ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.ОбъектРемонтныхРабот);
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.ОбъектРемонтныхРабот;
				
				СтрокаТаблицы = ТаблицаОбъектовРемонта.Добавить();
				СтрокаТаблицы.РодительОбъекта = ТочкаПоложение;
				СтрокаТаблицы.СамОбъект = ВыборкаПоПоложению.ОбъектРемонтныхРабот;
			КонецЕсли;
			
			ВыборкаПоОР = ВыборкаПоПоложению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОР.Следующий() Цикл 						
				ТочкаОРР = ТочкаПоложение.Точки.Добавить();
				ТочкаОРР.Текст = ВыборкаПоОР.ВидРемонтныхРабот;
				ТочкаОРР.Расшифровка = ВыборкаПоОР.ВидРемонтныхРабот;
				
				Если ЭтоКорректировка Тогда
					// корректировка
					ТочкаВРРСт = ТочкаОРР.Точки.Добавить();
					ТочкаВРРСт.Текст = "План до корректировки";
					ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
					//
				КонецЕсли;
				
				ВыборкаПоВРИлиЦепочкам = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
				
				
				Пока ВыборкаПоВРИлиЦепочкам.Следующий() Цикл
					
					Если ЕстьЦепочки Тогда
						ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПоВР.Следующий() Цикл  								
							ВывестиЧастьГрафикаЧетвертыйВариант(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, ТочкаВРРСт, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать);
						КонецЦикла;
					Иначе
						ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам;				
						ВывестиЧастьГрафикаЧетвертыйВариант(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, ТочкаВРРСт, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать);
						
					КонецЕсли;
					
				КонецЦикла; 
			КонецЦикла; 
			
		КонецЦикла;
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Положение,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаСтруктуры
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ТаблицаСтруктуры.Положение, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаСтруктуры.Положение.Представление КАК ПоложениеПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтруктуры КАК ТаблицаСтруктуры
		|		ПО ТаблицаДанныхППР.ОбъектРемонтныхРабот = ТаблицаСтруктуры.ОбъектИерархии
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	НомерСтрокиВРЦепочки,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			КонецЕсли;
		Иначе
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР,
				|	НомерСтрокиВРЦепочки";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР ";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", НомерСтрокиВРЦепочки";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + ", ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоПоложению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоложению.Следующий() Цикл
			
			ТочкаПоложение = Диаграмма.Точки.Добавить();
			ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.Положение);
			Если ИспользоватьРасшифровку Тогда
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.Положение;
			КонецЕсли;
			
			ВыборкаПоОР = ВыборкаПоПоложению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОР.Следующий() Цикл
				
				ТочкаОРР = ТочкаПоложение.Точки.Добавить();
				ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
				Если ИспользоватьРасшифровку Тогда
					ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
				КонецЕсли;
				
				ВыборкаПоВРИлиЦепочкам = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВРИлиЦепочкам.Следующий() Цикл  					
					
					Если ЕстьЦепочки Тогда
						ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаПоВР.Следующий() Цикл
							ВывестиЧастьГрафикаПятыйВариант(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать);							
						КонецЦикла;
					Иначе
						ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам; 						
						ВывестиЧастьГрафикаПятыйВариант(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать);							
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры // ПостроитьДиаграммуГантаДляППР()

// Процедура осуществляет обработку события ПриОкончанииРедактированияИнтервала диаграммы ремонтов. 
//
// Параметры:
//      Интервал - Структура - структура,описывающая интервал дат
//      НужнаяСтрока - СтрокаТаблицы - ссылка на табличную часть.
//
// Возвращаемое значение:
//     Структура - структура данных после редактирования.
Функция ОбработкаРедактированияДиаграммыГантаДляППР(Интервал, НужнаяСтрока) Экспорт 
	
	Если ТипЗнч(НужнаяСтрока.Документ) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		Начало = НачалоДня(Интервал.Начало);
		Конец = КонецДня(Интервал.Конец);
		
		НужнаяСтрока.ДатаНач = Начало;
		НужнаяСтрока.ДатаКон = НачалоДня(Конец);
		
		Текст = Строка(Начало) + " - " + Строка(Конец);
	Иначе
		
		НужнаяСтрока.ДатаНач = Интервал.Начало;
		НужнаяСтрока.ДатаКон = Интервал.Конец;
		
		
		Текст = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Начало = Интервал.Начало;
		Конец = Интервал.Конец;
	КонецЕсли;
	
	СтрукураВозврата = Новый Структура("Текст, Начало, Конец, НужнаяСтрока", Текст, Начало, Конец, НужнаяСтрока);
	Возврат СтрукураВозврата
	
КонецФункции // ДиаграммаГантаПриОкончанииРедактированияИнтервала()

#КонецОбласти 

#Область ФункцииДляСозданияИВыполненияОбщихЗапросов
// Проверка объектов на наличие расчета по ним в указанном периоде
// Параметры:
//			ПериодРасчетаНач	-	Дата - начало периода расчета
//			ПериодРасчетаКон	-	Дата - конец периода расчета
//			ТЗ	-	ТаблицаЗначений	- таблица ППР. 
// 
// Возвращаемое значение:
//		Массив - массив совпадающих расчетов объектов.
//
Функция ПроверитьОбъектыППР_ТЗ( ПериодРасчетаНач, ПериодРасчетаКон, ТЗ) Экспорт
	
	РассчитанныеОбъекты = Неопределено;
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПериодРасчетаГрафика.Регистратор,
		|	ПериодРасчетаГрафика.ОбъектРемонта КАК ОбъектРемонта,
		|	ПериодРасчетаГрафика.ПериодНач,
		|	ПериодРасчетаГрафика.ПериодКон
		|ИЗ
		|	РегистрСведений.торо_ПериодРасчетаГрафика КАК ПериодРасчетаГрафика
		|ГДЕ
		|	ПериодРасчетаГрафика.ОбъектРемонта В(&ОбъектРемонта)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбъектРемонта";
		
		Объекты = ТЗ.ВыгрузитьКолонку("ОбъектРемонта");
		Запрос.УстановитьПараметр("ОбъектРемонта", Объекты);
		
		Результат = Запрос.Выполнить().Выгрузить();
		РассчитанныеОбъекты = Новый Массив;
		Для каждого Объект Из Объекты Цикл
			Отбор = Новый Структура;
			Отбор.Вставить("ОбъектРемонта", Объект);
			Строки = Результат.НайтиСтроки(Отбор);
			Для каждого Строка Из Строки Цикл           		
				Если Не ((ПериодРасчетаНач > Строка.ПериодКон) ИЛИ (ПериодРасчетаКон < Строка.ПериодНач)) Тогда
					стрРассчитанныйОбъект = Новый Структура;
					стрРассчитанныйОбъект.Вставить("Регистратор", Строка.Регистратор);
					стрРассчитанныйОбъект.Вставить("ОбъектРемонта", Строка.ОбъектРемонта);
					РассчитанныеОбъекты.Добавить(стрРассчитанныйОбъект);	
					Прервать;
				КонецЕсли
				
			КонецЦикла; 
			
		КонецЦикла;
	Исключение
		
	КонецПопытки;
	
	Возврат РассчитанныеОбъекты;
КонецФункции	

// Возвращает расценку по технологической операции 
// Параметры:
//			ТехОперация - СправочникСсылка.торо_ТехнологическиеОперации - тех. операция.
// 
// Возвращаемое значение:
//   Число - расценка за выполнение технологической операции.
//
Функция СтоимостьОперацииПоРасценкам(ТехОперация) Экспорт
	
	Возврат ТехОперация.Расценка;
КонецФункции

// Функция получает плановы затраты номенклатуры по справочным нормативам ремонта.
//
//	Параметры:
//  Ремонт - СправочникСсылка.торо_ИдентификаторыТехКарт - ссылка на ремонт, для которого
//                 следует получить плановые затраты номенклатуры.
//  НомерПрохода - Число - служебный параметр для рекурсивности функции.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений плановых затрат номенклатуры.
//
Функция ТаблицаНоменклатурыРемонтаПоСправочнымНормативам(Ремонт, НомерПрохода = 1) Экспорт
	
	ТаблицаТМЦ = Новый ТаблицаЗначений;
	ТаблицаТМЦ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТМЦ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	
	Если ТипЗнч(Ремонт) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		// это технологическая операция - просто смотрим ее нормативы
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	торо_НормативыТехОперацийНоменклатура.Номенклатура.Ссылка КАК Номенклатура,
		|	торо_НормативыТехОперацийНоменклатура.Количество КАК Количество
		|ИЗ
		|	РегистрСведений.торо_НормативыТехОперацийНоменклатура КАК торо_НормативыТехОперацийНоменклатура
		|ГДЕ
		|	торо_НормативыТехОперацийНоменклатура.Операция.Ссылка = &Операция");
		
		Запрос.УстановитьПараметр("Операция", Ремонт.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаТМЦ.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.Количество = Выборка.Количество;
		КонецЦикла;
		
		
	Иначе
		// это ремонт - нужно разбить на составляющие и идти рекурсивно по каждому элементу
		Для Каждого ТекСоставляющая Из Ремонт.СписокОпераций Цикл
			ТаблицаРезультат = ТаблицаНоменклатурыРемонтаПоСправочнымНормативам(ТекСоставляющая.Операция, НомерПрохода + 1);
			Для Каждого ТекСтрока Из ТаблицаРезультат Цикл
				НоваяСтрока = ТаблицаТМЦ.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НоваяСтрока.Количество = ТекСтрока.Количество;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НомерПрохода = 1 Тогда
		ТаблицаТМЦ.Свернуть("Номенклатура", "Количество");
	КонецЕсли;
	
	Возврат ТаблицаТМЦ;
	
КонецФункции

// Функция получает плановы затраты номенклатуры по ремонтным нормативам ремонта.
//
// Параметры:
//  Ремонт - СправочникСсылка.торо_ИдентификаторыТехКарт - ссылка на ремонт для которого
//                 следует получить плановые затраты номенклатуры.
//  НомерПрохода - Число - служебный параметр для рекурсивности функции.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица значений плановых затрат номенклатуры.
//
Функция ТаблицаНоменклатурыРемонтаПоРемонтнымНормативам(Ремонт, НомерПрохода = 1) Экспорт
	
	ТаблицаТМЦ = Новый ТаблицаЗначений;
	ТаблицаТМЦ.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаТМЦ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТаблицаТМЦ.Колонки.Добавить("ЕдИзм", Новый ОписаниеТипов("СправочникСсылка.КлассификаторЕдиницИзмерения"));
	
	
	Если ТипЗнч(Ремонт) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		// это технологическая операция - просто смотрим ее нормативы
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	торо_МатериальныеРесурсыОпераций.Номенклатура,
		|	торо_МатериальныеРесурсыОпераций.Количество
		|ИЗ
		|	РегистрСведений.торо_МатериальныеРесурсыОпераций КАК торо_МатериальныеРесурсыОпераций
		|ГДЕ
		|	торо_МатериальныеРесурсыОпераций.Операция.Ссылка = &Операция");
		
		Запрос.УстановитьПараметр("Операция", Ремонт.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ТаблицаТМЦ.Добавить();
			НоваяСтрока.Номенклатура = Выборка.Номенклатура;
			НоваяСтрока.Количество = Выборка.Количество;
		КонецЦикла;
		
		
	Иначе
		// это ремонт - нужно разбить на составляющие и идти рекурсивно по каждому элементу
		Для Каждого ТекСоставляющая Из Ремонт.СписокОпераций Цикл
			ТаблицаРезультат = ТаблицаНоменклатурыРемонтаПоРемонтнымНормативам(ТекСоставляющая.Операция, НомерПрохода + 1);
			Для Каждого ТекСтрока Из ТаблицаРезультат Цикл
				НоваяСтрока = ТаблицаТМЦ.Добавить();
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НоваяСтрока.Количество = ТекСтрока.Количество;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если НомерПрохода = 1 Тогда
		ТаблицаТМЦ.Свернуть("Номенклатура", "Количество");
	КонецЕсли;
	
	Возврат ТаблицаТМЦ;
	
КонецФункции

// Функция выплняет проверку вхождения ремонта в указанный ремонт.
//
// Параметры:
//  Ремонт - СправочникСсылка.торо_ИдентификаторыТехКарт - ссылка на ремонт вхождение которого проверяется.
//  УказанныйРемонт - СправочникСсылка.торо_ИдентификаторыТехКарт - ссылка на ремонт вхождение в который проверяется.
// 
// Возвращаемое значение:
//  Булево - Истина - ремонт входит в указанный, Ложь - ремонт не входит в указанный.
//
Функция РемонтВходитВУказанный(Ремонт, УказанныйРемонт) Экспорт
	
	Если Ремонт = УказанныйРемонт Тогда
		Возврат Истина;
	Иначе
		Если Ремонт.Родитель = Справочники.торо_ИдентификаторыТехКарт.ПустаяСсылка() Тогда
			Возврат Ложь;
		Иначе
			Возврат РемонтВходитВУказанный(Ремонт.Родитель, УказанныйРемонт);
		КонецЕсли;
	КонецЕсли;
КонецФункции

// Для переданного в качестве параметра акта о выполнении этапа ремонтных работ, получает для него
// ключевые сведения, которые содержатся в 
// документе основнии.
//
// Параметры:
//  АктОВыполнениииЭтапаРемонтныхРабот - ДокументССылка.торо_АктОВыполненииЭтапаРабот - акт о выполнении этапа 
//														ремонтных работ, для которого нужно определить параметры;
//  Результат - Структура - структура в которой возвращаются значения параметров.
//
Процедура ПолучитьПараметрыАктаОВыполненииЭтапаРемонтныхРабот(АктОВыполнениииЭтапаРемонтныхРабот, Результат) Экспорт
	
	Результат = Новый Структура("Организация, ЗаявкаНаРемонт");
	
КонецПроцедуры

// Функция возвращает таблицу значений, содержащую состояния выполняемых ремонтных работ.
//
//	Параметры:
//		ДатаСостояния - Дата - дата на которую получаем состояния ремонтных работ.
//		СписокID      - Массив, СписокЗначений - список ID ремонтных работ, для которых получаем состояние.
//
// Возвращаемое значение:
//  ТаблицаЗначений - содержащая состояния выполняемых ремонтных работ.
Функция ПолучитьТаблицуСостоянияРемонтныхРабот(ДатаСостояния = Неопределено, СписокID = Неопределено) Экспорт
	
	ЕстьСписокID      = ЗначениеЗаполнено(СписокID);
	ЕстьДатаСостояния = ЗначениеЗаполнено(ДатаСостояния);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_СостояниеРемонтныхРаботОстатки.ID,
	|	торо_СостояниеРемонтныхРаботОстатки.РемонтнаяРабота,
	|	торо_СостояниеРемонтныхРаботОстатки.Родитель_ID,
	|	торо_СостояниеРемонтныхРаботОстатки.ПроцентНевыполненныхРаботОстаток
	|ИЗ
	|	РегистрНакопления.торо_СостояниеРемонтныхРабот.Остатки("
	+ ?(ЕстьДатаСостояния, "&ДатаСостояния", "")+ ","
	+ ?(ЕстьСписокID, " ID В (&СписокID)", "") + ") КАК торо_СостояниеРемонтныхРаботОстатки";
	
	Если ЕстьДатаСостояния Тогда
		Запрос.УстановитьПараметр("ДатаСостояния", ДатаСостояния);
	КонецЕсли;
	
	Если ЕстьСписокID Тогда 
		Запрос.УстановитьПараметр("СписокID", СписокID);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает таблицу значений, содержащую состояния выполняемых ремонтных работ.
//
//	Параметры:
//		ДатаСостояния - Дата - дата на которую получаем состояния ремонтных работ.
//		СписокID      - Массив, СписокЗначений - список ID ремонтных работ, для которых получаем состояние.
//
// Возвращаемое значение:
//		ТаблицаЗначений - содержащая состояния выполняемых ремонтных работ.
//
Функция ПолучитьТаблицуОткрытыхРемонтныхРабот(ДатаСостояния = Неопределено, СписокID = Неопределено) Экспорт
	
	ЕстьСписокID      = ЗначениеЗаполнено(СписокID);
	ЕстьДатаСостояния = ЗначениеЗаполнено(ДатаСостояния);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.ID
	|ПОМЕСТИТЬ ВыполняемыеРаботы
	|ИЗ
	|	РегистрНакопления.торо_ВыполняемыеРемонтныеРаботы.Остатки("
	+ ?(ЕстьДатаСостояния, "&ДатаСостояния", "")+ ","
	+ ?(ЕстьСписокID, " ID В (&СписокID)", "") + ") КАК торо_ВыполняемыеРемонтныеРаботыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СостояниеРемонтныхРаботОстатки.ID,
	|	торо_СостояниеРемонтныхРаботОстатки.РемонтнаяРабота,
	|	торо_СостояниеРемонтныхРаботОстатки.Родитель_ID,
	|	торо_СостояниеРемонтныхРаботОстатки.ПроцентНевыполненныхРаботОстаток
	|ИЗ
	|	РегистрНакопления.торо_СостояниеРемонтныхРабот.Остатки("
	+ ?(ЕстьДатаСостояния, "&ДатаСостояния", "")+ ",
	|			(НЕ ID В
	|						(ВЫБРАТЬ
	|							ВыполняемыеРаботы.ID
	|						ИЗ
	|							ВыполняемыеРаботы КАК ВыполняемыеРаботы))
	|				"
	+ ?(ЕстьСписокID, "И  ID В (&СписокID)", "") + ") КАК торо_СостояниеРемонтныхРаботОстатки";
	
	Если ЕстьДатаСостояния Тогда
		Запрос.УстановитьПараметр("ДатаСостояния", ДатаСостояния);
	КонецЕсли;
	
	Если ЕстьСписокID Тогда 
		Запрос.УстановитьПараметр("СписокID", СписокID);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#Область РассчетПродолжительностиРемонтныхРабот

// Функция считает продолжительность в часах по продолжительности в секундах
//
// Параметры:
//  ПродолжительностьВСекундах - Число - продолжительность в секундах.
//
// Возвращаемое значение:
//  Строка - представление продолжительности в часах.
Функция ПродолжительностьВЧасах(ПродолжительностьВСекундах) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПродолжительностьВСекундах) Тогда
		Возврат "";
	КонецЕсли;
	
	Часы    = Цел(ПродолжительностьВСекундах / 3600);
	Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
	Секунды = Окр(ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60, 2);
	
	Возврат "" + Часы + " ч. " + Минуты + " мин. " + Секунды + " с.";
	
КонецФункции

#КонецОбласти 

#Область РаботаСоСтатусамиДокументов
// Функция получает список следующих статусов документа по способу согласования.
//
// Параметры:
//		СпособСогласования - СправочникиОбъекта.торо_СпособыСогласованияДокументов - способ согласования.
//		ТекущийСтатус - СправочникиОбъекта.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//
// Возвращаемое значение:
//   СписокЗначений - список следующих статусов.
//
Функция ПолучитьСписокСледующихСтатусовДокумента(СпособСогласования, ТекущийСтатус) Экспорт
	
	СписокСледующихСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_МатрицаПереходаСтатусовДокументов.СледующийСтатус,
	|	торо_МатрицаПереходаСтатусовДокументов.Начальный
	|ИЗ
	|	РегистрСведений.торо_МатрицаПереходаСтатусовДокументов КАК торо_МатрицаПереходаСтатусовДокументов
	|ГДЕ
	|	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус = &ТекущийСтатус
	|	И торо_МатрицаПереходаСтатусовДокументов.СпособСогласования = &СпособСогласования";
	
	Запрос.УстановитьПараметр("ТекущийСтатус", ТекущийСтатус);
	Запрос.УстановитьПараметр("СпособСогласования", СпособСогласования);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СледующийСтатус) Тогда
			
			СписокСледующихСтатусов.Добавить(Выборка.СледующийСтатус);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СписокСледующихСтатусов;
	
КонецФункции // РассчитатьПродолжительностьВСекундах()

// Функция получает список следующих статусов документа по способу согласования.
//
// Параметры:
//  СпособСогласования - СправочникОбъект.торо_СпособыСогласованияДокументов - способ согласования.
//  ТекущийСтатус - СправочникОбъект.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//
// Возвращаемое значение:
//   СписокЗначений - список следующих статусов.
//
Функция ПолучитьСписокСледующихСтатусовДокументаДетально(СпособСогласования, ТекущийСтатус) Экспорт
	
	СписокСледующихСтатусов = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_МатрицаПереходаСтатусовДокументов.СледующийСтатус
	|ПОМЕСТИТЬ вт1
	|ИЗ
	|	РегистрСведений.торо_МатрицаПереходаСтатусовДокументов КАК торо_МатрицаПереходаСтатусовДокументов
	|ГДЕ
	|	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус = &ТекущийСтатус
	|	И торо_МатрицаПереходаСтатусовДокументов.СпособСогласования = &СпособСогласования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус,
	|	торо_МатрицаПереходаСтатусовДокументов.Начальный
	|ПОМЕСТИТЬ вт2
	|ИЗ
	|	РегистрСведений.торо_МатрицаПереходаСтатусовДокументов КАК торо_МатрицаПереходаСтатусовДокументов
	|ГДЕ
	|	торо_МатрицаПереходаСтатусовДокументов.СпособСогласования = &СпособСогласования
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус,
	|	торо_МатрицаПереходаСтатусовДокументов.Начальный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	вт1.СледующийСтатус,
	|	ЕСТЬNULL(вт2.Начальный, ЛОЖЬ) КАК Начальный
	|ИЗ
	|	вт1 КАК вт1
	|		ЛЕВОЕ СОЕДИНЕНИЕ вт2 КАК вт2
	|		ПО вт1.СледующийСтатус = вт2.ТекущийСтатус";
	
	Запрос.УстановитьПараметр("ТекущийСтатус", ТекущийСтатус);
	Запрос.УстановитьПараметр("СпособСогласования", СпособСогласования);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.СледующийСтатус) Тогда
			
			стрВозврата = Новый Структура("СледующийСтатус, Начальный");
			ЗаполнитьЗначенияСвойств(стрВозврата, Выборка);
			СписокСледующихСтатусов.Добавить(стрВозврата);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СписокСледующихСтатусов;
	
КонецФункции // РассчитатьПродолжительностьВСекундах()

// Функция получает начальный статус документа по способу согласования.
//
// Параметры:
//		СпособСогласования - СправочникиОбъекта.торо_СпособыСогласованияДокументов - способ согласования.
//
// Возвращаемое значение:
//		СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот - начальный статус документа.
//
Функция ПолучитьНачальныйСтатус(СпособСогласования) Экспорт
	
	НачальныйСтатус = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус
	|ИЗ
	|	РегистрСведений.торо_МатрицаПереходаСтатусовДокументов КАК торо_МатрицаПереходаСтатусовДокументов
	|ГДЕ
	|	торо_МатрицаПереходаСтатусовДокументов.Начальный = ИСТИНА
	|	И торо_МатрицаПереходаСтатусовДокументов.СпособСогласования = &СпособСогласования";
	
	Запрос.УстановитьПараметр("СпособСогласования", СпособСогласования);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		НачальныйСтатус = Выборка.ТекущийСтатус;
		
	КонецЕсли;
	
	Возврат НачальныйСтатус;
	
КонецФункции // ПолучитьНачальныйСтатус()

// Функция получает список данных по статусу документа по способу согласования.
//
// Параметры:
//		СпособСогласования - СправочникиОбъекта.торо_СпособыСогласованияДокументов - способ согласования.
//		СтатусДокумента - СправочникиОбъекта.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//
// Возвращаемое значение:
//		СтруктураДанных - структура данных статуса.
//
Функция ПолучитьДанныеПоСтатусуДокумента(СпособСогласования, СтатусДокумента) Экспорт
	
	СтруктураДанных = Новый Структура("Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	торо_МатрицаПереходаСтатусовДокументов.Начальный,
	|	торо_МатрицаПереходаСтатусовДокументов.СогласованиеЗавершено,
	|	торо_МатрицаПереходаСтатусовДокументов.ПроводитьДокумент,
	|	торо_МатрицаПереходаСтатусовДокументов.ШаблонСообщенияЭлектроннойПочты
	|ИЗ
	|	РегистрСведений.торо_МатрицаПереходаСтатусовДокументов КАК торо_МатрицаПереходаСтатусовДокументов
	|ГДЕ
	|	торо_МатрицаПереходаСтатусовДокументов.ТекущийСтатус = &ТекущийСтатус
	|	И торо_МатрицаПереходаСтатусовДокументов.СпособСогласования = &СпособСогласования";
	
	Запрос.УстановитьПараметр("ТекущийСтатус", СтатусДокумента);
	Запрос.УстановитьПараметр("СпособСогласования", СпособСогласования);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтруктураДанных.Начальный                       = Выборка.Начальный;
		СтруктураДанных.СогласованиеЗавершено           = Выборка.СогласованиеЗавершено;
		СтруктураДанных.ПроводитьДокумент               = Выборка.ПроводитьДокумент;
		СтруктураДанных.ШаблонСообщенияЭлектроннойПочты = Выборка.ШаблонСообщенияЭлектроннойПочты;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции // РассчитатьПродолжительностьВСекундах()

// Строит дерево согласования для документа.
//
// Параметры:
//		СпособСогласования - СправочникСсылка.торо_СпособыСогласованияДокументов - способ соглсования.
//		СтатусДокумента - СправочникиОбъекта.торо_СтатусыСогласованияДокументовРемонтныхРабот - текущий статус документа.
//		ТаблицаСогласовавших - ТаблицаЗначений - таблица согласовавших.
//
// Возвращаемое значение:
//   ДеревоЗначений - дерево согласования.
//
Функция ПолучитьДеревоСогласования(СпособСогласования, СтатусДокумента, ТаблицаСогласовавших) Экспорт
	
	ДеревоСогласования = Новый ДеревоЗначений;
	ДеревоСогласования.Колонки.Добавить("СтатусДокумента" , Новый ОписаниеТипов("СправочникСсылка.торо_СтатусыСогласованияДокументовРемонтныхРабот"));
	ДеревоСогласования.Колонки.Добавить("Согласующий"     , Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоСогласования.Колонки.Добавить("Замещающий"      , Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ДеревоСогласования.Колонки.Добавить("Согласовано"     , Новый ОписаниеТипов("Булево"));
	ДеревоСогласования.Колонки.Добавить("Уровень"         , Новый ОписаниеТипов("Число"));
	ДеревоСогласования.Колонки.Добавить("Начальный"		  , Новый ОписаниеТипов("Булево"));
	
	// Создадим строки дерева согласования.
	СписокСледующихСтатусов = торо_Ремонты.ПолучитьСписокСледующихСтатусовДокументаДетально(СпособСогласования, СтатусДокумента);
	Для Каждого ЭлементСписка из СписокСледующихСтатусов Цикл
		
		СтрокаСтатус = ДеревоСогласования.Строки.Добавить();
		СтрокаСтатус.СтатусДокумента = ЭлементСписка.Значение.СледующийСтатус;
		СтрокаСтатус.Уровень         = 0;
		СтрокаСтатус.Начальный = ЭлементСписка.Значение.Начальный;
		
		МассивПользователей = СпособСогласования.ПорядокСогласования.НайтиСтроки(Новый Структура("ТекущийСтатус", ЭлементСписка.Значение.СледующийСтатус));
		
		Для Каждого ЭлементМассива Из МассивПользователей Цикл
			
			СтрокаСогласующий = СтрокаСтатус.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСогласующий, СтрокаСтатус);
			СтрокаСогласующий.Согласующий = ЭлементМассива.Пользователь;
			СтрокаСогласующий.Уровень     = 1;
			
			МассивЗамещающих = СпособСогласования.Замещающие.НайтиСтроки(Новый Структура("Пользователь, ТекущийСтатус", ЭлементМассива.Пользователь, ЭлементМассива.ТекущийСтатус));
			Для Каждого ЭлементМассиваЗамов Из МассивЗамещающих Цикл
				
				СтрокаЗамещающий = СтрокаСогласующий.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаЗамещающий, СтрокаСогласующий);
				СтрокаЗамещающий.Замещающий = ЭлементМассиваЗамов.Замещающий;
				СтрокаЗамещающий.Уровень    = 2;
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла;
	
	// Отметим уже согласовавших сотрудников
	Для Каждого ЭлементСписка из СписокСледующихСтатусов Цикл
		
		МассивСогласовавших = ТаблицаСогласовавших.НайтиСтроки(Новый Структура("СтатусДокумента", ЭлементСписка.Значение.СледующийСтатус));
		Для Каждого СтрокаСогласовавших Из МассивСогласовавших Цикл
			
			МассивСтрокДС = ДеревоСогласования.Строки.НайтиСтроки(Новый Структура("СтатусДокумента, Согласующий, Замещающий",
			ЭлементСписка.Значение.СледующийСтатус, СтрокаСогласовавших.Согласующий, СтрокаСогласовавших.Замещающий), Истина);
			
			Для Каждого СтрокаДС Из МассивСтрокДС Цикл
				
				СтрокаДС.Согласовано = СтрокаСогласовавших.Согласовано;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого Уровень1 из ДеревоСогласования.Строки Цикл
		
		Уровень2ВсеСогласовали = Истина;
		Для каждого Уровень2 из Уровень1.Строки Цикл
			
			Уровень3ВсеСогласовали = Ложь;
			Для каждого Уровень3 из Уровень2.Строки Цикл
				Если Уровень3.Согласовано Тогда
					Уровень3ВсеСогласовали = Истина;
					Прервать;	
				КонецЕсли;
			КонецЦикла;
			
			Если Уровень2.Строки.Количество() > 0 и Уровень3ВсеСогласовали Тогда Уровень2.Согласовано = Истина; КонецЕсли;
			
			Если НЕ уровень2.Согласовано Тогда
				Уровень2ВсеСогласовали = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Уровень1.Строки.Количество()>0 и Уровень2ВсеСогласовали Тогда Уровень1.Согласовано = Истина; КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДеревоСогласования;
	
КонецФункции // ПолучитьДеревоСогласования()

#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФункцииДляСозданияИВыполненияОбщихЗапросов
// Создает и выполняет запрос - выборку ремонтов, в которые вложен данный ремонт (владельцев).
// Параметр:
//      Ремонт - торо_Ремонт.
// Возвращаемое значение:
//      РезультатЗапроса, с полями Ремонт, ГраницаЛев, ГраницаПрав.
Функция ВернутьВладельцевРемонта(Ремонт)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_Ремонты.Ссылка						КАК Ремонт,
	|	торо_РемонтыСписокОпераций.ГраницаЛев	КАК ГраницаЛев,
	|	торо_РемонтыСписокОпераций.ГраницаПрав	КАК ГраницаПрав
	|ИЗ
	|	Справочник.торо_Ремонты КАК торо_Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_Ремонты.СписокОпераций КАК торо_РемонтыСписокОпераций
	|		ПО торо_Ремонты.СписокОпераций.Ссылка = торо_РемонтыСписокОпераций.Ссылка
	|ГДЕ
	|	торо_РемонтыСписокОпераций.Операция.Ссылка = &Ремонт
	|";
	
	Запрос.УстановитьПараметр("Ремонт", Ремонт);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Определяет рекурсивно вложенность ремонта
// Параметры:
//   	Ремонт  - СправочникСсылка.торо_Ремонт
//   	Порядок - Число - порядок вложенности ремонта в структуре владельцев.
// Возвращаемое значение:
// 		Число 	- порядок вложенности ремонта в структуре владельцев.
Функция ПолучитьПорядокРемонта(Ремонт, Порядок)
	
	Выборка = ВернутьВладельцевРемонта(Ремонт);	
	ТекПорядок = Порядок;
	Для Каждого Стр Из Выборка Цикл
		ВремПорядок = ПолучитьПорядокРемонта(Стр.Ремонт, ТекПорядок + 1);
		Если ВремПорядок > Порядок Тогда
			Порядок = ВремПорядок;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Порядок;
КонецФункции

// Процедура заполняет массив владельцев ремонта
//
// Параметры:
//		Ремонт  – СправочникСсылка.торо_ИдентификаторыТехКарт, типовой ремонт
//		Список	- Массив, массив ремонтов владельцев.
//
Процедура ПолучитьСписокРемонтовВладельцев(Ремонт, Список)
	
	Выборка =  ВернутьВладельцевРемонта(Ремонт);
	
	Для Каждого Стр Из Выборка Цикл
		ПолучитьСписокРемонтовВладельцев(Стр.Ремонт, Список);
		Список.Добавить(Стр.Ремонт);
	КонецЦикла;	
	
КонецПроцедуры // ПолучитьСписокРемонтов()

#КонецОбласти 

#Область ЗаполнениеТЧОсновныхДокументов
// Процедура заполняет ремонтные работы по нормативам ремонтов оборудования.
//
Процедура ДобавитьСтрокуРемонтныхРабот(ДокументОбъект, СтрокаРемонтовОборудования, ДатаНачала, ТабличнаяЧастьРемонтныхРабот, ТехКартаРемонта,
	Родитель_ID = "", ЗаполнятьЗатраты, СтруктураСоответствияТЧ, НовыйИдентификатор = Ложь) Экспорт

	Для Каждого СтрокаОперации Из ТехКартаРемонта.СписокОпераций Цикл
		
		НовСтрокаРемонтныхРабот = ТабличнаяЧастьРемонтныхРабот.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовСтрокаРемонтныхРабот, СтрокаРемонтовОборудования);
		
		НовСтрокаРемонтныхРабот.ID                     = ?(НовыйИдентификатор, Новый УникальныйИдентификатор(), СтрокаОперации.ID);
		НовСтрокаРемонтныхРабот.РемонтнаяРабота        = СтрокаОперации.Операция;
		НовСтрокаРемонтныхРабот.Родитель_ID            = Родитель_ID;
		Если ЗначениеЗаполнено(ТехКартаРемонта) Тогда
			Попытка
				НовСтрокаРемонтныхРабот.ТехКартаРемонта = ТехКартаРемонта;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		// Затраты ТМЦ, Трудозатраты и т.д.
		Если ЗаполнятьЗатраты = Истина Тогда
			
			Если СтруктураСоответствияТЧ = Неопределено Тогда
				
				СтруктураСоответствияТЧ = Новый Структура;
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ", "МатериальныеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
				СтруктураСоответствияТЧ.Вставить("МатериальныеЗатраты", СоответствиеЗаполнения);
				
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ", "ТрудовыеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
				СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты", СоответствиеЗаполнения);
				
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ", "Инструменты");
				СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
				СтруктураСоответствияТЧ.Вставить("ИнструментыИТехника", СоответствиеЗаполнения);
				
			КонецЕсли; 
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			
			Если ЗначениеЗаполнено(ДатаНачала) Тогда
				Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ДатаНачала,Новый Структура("ИдентификаторТехКарты", СтрокаОперации.Операция)); 
			Иначе
				Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(,Новый Структура("ИдентификаторТехКарты", СтрокаОперации.Операция));// обработано
			КонецЕсли; 
			
			Если Таб.Количество() Тогда
				ТехКарта = Таб[0].ТехКарта;					
				
				ДобавитьСтрокуРемонтныхРабот(ДокументОбъект, СтрокаРемонтовОборудования,ДатаНачала, ТабличнаяЧастьРемонтныхРабот, ТехКарта,
				НовСтрокаРемонтныхРабот.ID, ЗаполнятьЗатраты, СтруктураСоответствияТЧ); 
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьСтрокуРемонтаОборудования(ТЧ_РемонтовОборудования, СтрокаРемонтовОборудования, ДокументОбъект, ДокОснование)
	
	Если ТЧ_РемонтовОборудования.Количество() > 0 Тогда
		СтрокаРО = ТЧ_РемонтовОборудования.Получить(0);
	Иначе
		СтрокаРО = ТЧ_РемонтовОборудования.Добавить();
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаРО.ID) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРО, СтрокаРемонтовОборудования);
	Иначе
		СтрокаРО = ТЧ_РемонтовОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРО, СтрокаРемонтовОборудования);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии") И (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт") 
		ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот")
		ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")) Тогда
		СтрокаРО.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(СтрокаРО.ОбъектРемонта, СтрокаРО.ДатаНачала, СтрокаРО.ДатаОкончания);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаРО.ДатаНачала) Тогда
		Попытка
			СтрокаРО.ДатаНачала = СтрокаРемонтовОборудования.ПлановаяДата;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ИДДефекта = СтрокаРемонтовОборудования.ID;
	КонецЕсли;

	Если НЕ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") Тогда
		
		Если СтрокаРемонтовОборудования.Свойство("Предписания") 
			Или (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") И Не ЗначениеЗаполнено(СтрокаРемонтовОборудования.ВидРемонтныхРабот)) Тогда
			СтрокаРО.ЗакрываетПредписание = Истина;
			Если Не ЗначениеЗаполнено(СтрокаРО.ВидРемонтныхРабот) Тогда
				СтрокаРО.ВидРемонтныхРабот = Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
			КонецЕсли;
		КонецЕсли;
		
		СтрокаРО.ИДДефекта = ИДДефекта;
		
	КонецЕсли;
	
	СтрокаРО.ДокументИсточник = ДокОснование;
	
	Возврат СтрокаРО;
	
КонецФункции

Процедура ОбработкаВыбораРемонта_ДобавитьСтрокиРемонтныхРабот(ВыбранноеЗначение, СтрокаРО, ТЧ_РемонтныхРабот, ДокументОбъект, СтрокаРемонтовОборудования, ЗаполнятьЗатраты = Истина)
	
	// Получим нормативы
	СтруктураНормативов = торо_Ремонты.ПолучитьСтруктуруНормативовРемонта(СтрокаРО.ОбъектРемонта, СтрокаРО.ВидРемонтныхРабот);
	Если СтруктураНормативов = Неопределено Тогда
		НормативныйРемонт = Неопределено;
	Иначе
		НормативныйРемонт = СтруктураНормативов.НормативныйРемонт;	
	КонецЕсли;
	
	ПерезаписыватьРодитель_ID = Ложь;
	
	Родитель_ID = "";
	
	// Выбрана строка ремонтных работ
	Если ВыбранноеЗначение.Свойство("СтрокаРемонтныхРабот") Тогда
		
		СтрокаРемонтныхРабот = ВыбранноеЗначение.СтрокаРемонтныхРабот;
		
		СтрокаОтсчета = СтрокаРемонтныхРабот;
		
		ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота",СтрокаОтсчета[0].РемонтыОборудования_ID, СтрокаОтсчета[0].РемонтнаяРабота);
		
		МассивНайденного = ТЧ_РемонтныхРабот.НайтиСтроки(ПараметрыПоиска);
		
		// Движение вверх по дереву
		Пока МассивНайденного.Количество() = 0 И Не СтрокаОтсчета[0].Родитель = Неопределено Цикл
			
			Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
				НовСтрокаРР = ?(ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID),ТЧ_РемонтныхРабот.Добавить(), ТЧ_РемонтныхРабот[0]);
			Иначе
				НовСтрокаРР = ТЧ_РемонтныхРабот.Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НовСтрокаРР, СтрокаОтсчета[0]);
			
			Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт") Тогда
				НовСтрокаРР.Количество = 1;
			КонецЕсли;
			
			Если ПерезаписыватьРодитель_ID И Не ЗначениеЗаполнено(НовСтрокаРР.Родитель_ID) Тогда
				НовСтрокаРР.Родитель_ID = Родитель_ID;
			КонецЕсли;
			
			// Затраты
			Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот")
				И ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") Тогда
				Если ВыбранноеЗначение.Свойство("ДокументОснование") Тогда
					
					ДокОснование = ВыбранноеЗначение.ДокументОснование;
					
				КонецЕсли;
			КонецЕсли;
			
			СтрокаОтсчета = СтрокаОтсчета[0].Родитель;
			
			ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, ID",СтрокаОтсчета.РемонтыОборудования_ID, СтрокаОтсчета.ID);
			
			МассивНайденного = ТЧ_РемонтныхРабот.НайтиСтроки(ПараметрыПоиска);
			
		КонецЦикла;
		
		
		// Выбрана строка ремонтов оборудования
	ИначеЕсли ВыбранноеЗначение.Свойство("МассивСтрокРемонтныхРабот") Тогда  // При вводе из рабочего места ТехСпец
		
		МассивСтрокРемонтныхРабот = ВыбранноеЗначение.МассивСтрокРемонтныхРабот;
		Для Каждого ЭлементМассива Из МассивСтрокРемонтныхРабот Цикл
			
			ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, Родитель_ID",ЭлементМассива.РемонтыОборудования_ID, ЭлементМассива.РемонтнаяРабота, ЭлементМассива.Родитель_ID);
			МассивНайденного = ТЧ_РемонтныхРабот.НайтиСтроки(ПараметрыПоиска);
			
			Если МассивНайденного.Количество() = 0 Тогда
				ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, ID",ЭлементМассива.РемонтыОборудования_ID, ЭлементМассива.РемонтнаяРабота, ЭлементМассива.ID);
				МассивНайденного = ТЧ_РемонтныхРабот.НайтиСтроки(ПараметрыПоиска);
			КонецЕсли;

			Если МассивНайденного.Количество() = 0 Тогда
				
				НовСтрокаРР = ТЧ_РемонтныхРабот.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаРР, ЭлементМассива); 
				Если ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
					НовСтрокаРР.Количество = 1;
				КонецЕсли;
				
				Если ПерезаписыватьРодитель_ID И Не ЗначениеЗаполнено(НовСтрокаРР.Родитель_ID) Тогда
					НовСтрокаРР.Родитель_ID = Родитель_ID;
				КонецЕсли;
				
				// Затраты
				Если ВыбранноеЗначение.Свойство("ДокументОснование") Тогда
					
					ДокОснование = ВыбранноеЗначение.ДокументОснование;
					Если НЕ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
						СтарыйID = НовСтрокаРР.ID;
						Если ЗаполнятьЗатраты Тогда
							Если ЭлементМассива.Свойство("ТехКартаРемонта") Тогда
								ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.ТехКартаРемонта, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала);
							ИначеЕсли ЭлементМассива.Свойство("РемонтнаяРабота") Тогда
								Если ТипЗнч(ЭлементМассива.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
									Продолжить;
								Иначе
									ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.РемонтнаяРабота,ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала);
								КонецЕсли;
							КонецЕсли;	
						КонецЕсли;
						Если СтарыйID <> НовСтрокаРР.ID Тогда
							Для Каждого СтрокаМасс Из МассивСтрокРемонтныхРабот Цикл
								Если СтрокаМасс.Родитель_ID = СтарыйID Тогда
									СтрокаМасс.Родитель_ID = НовСтрокаРР.ID
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Не НормативныйРемонт = Неопределено Тогда
			МассивРемонтныхРаботНормативы = НормативныйРемонт.СписокОпераций;
			Для Каждого РемонтнаяРабота Из МассивРемонтныхРаботНормативы Цикл
				НовСтрокаРР = ТЧ_РемонтныхРабот.Добавить();
				НовСтрокаРР.Родитель_ID 			= Родитель_ID;
				НовСтрокаРР.РемонтыОборудования_ID 	= СтрокаРемонтовОборудования.ID;
				НовСтрокаРР.РемонтнаяРабота 		= РемонтнаяРабота.Операция;
				НовСтрокаРР.ID 						= РемонтнаяРабота.ID;
				Если ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
					НовСтрокаРР.Количество 			= 1;
				КонецЕсли;
				Если ЗаполнятьЗатраты Тогда
					ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, НормативныйРемонт,СтрокаРемонтовОборудования.ДатаНачала);
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

// Процедура заполняет запчасти ремонтной работы в заявке
Процедура ЗаполнитьЗапчастиРемонтнойРаботыВЗаявке(ДокументОбъект, Параметры)
	
	Если Не ЗначениеЗаполнено(Параметры.ОбъектРемонта) Или Не ЗначениеЗаполнено(Параметры.ВидРемонтныхРабот) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Параметры.ОбъектРемонта.ВестиУчетСерийныхЗапчастей Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
	|	СУММА(торо_НормыЗапчастейНаОбъектыРемонта.Количество) КАК Количество,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта КАК ВидРемонтныхРабот,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика
	|ПОМЕСТИТЬ ВТ_НормыЗапчастей
	|ИЗ
	|	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
	|ГДЕ
	|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
	|	И торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта = &ВидРемонтныхРабот
	|	И торо_НормыЗапчастейНаОбъектыРемонта.Количество <> 0
	|	И торо_НормыЗапчастейНаОбъектыРемонта.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонтныхРабот,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Количество,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ЕдиницаИзмерения,
	|	ЕСТЬNULL(торо_Запчасти.Характеристика, торо_НормыЗапчастейНаОбъектыРемонта.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(торо_Запчасти.Качество, ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый)) КАК Качество
	|ИЗ
	|	ВТ_НормыЗапчастей КАК торо_НормыЗапчастейНаОбъектыРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_Запчасти КАК торо_Запчасти
	|		ПО торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура = торо_Запчасти.Номенклатура
	|			И торо_НормыЗапчастейНаОбъектыРемонта.Характеристика = торо_Запчасти.Характеристика
	|			И (торо_Запчасти.Приоритет)";
	
	Запрос.УстановитьПараметр("ОбъектРемонта",Параметры.ОбъектРемонта);
	Запрос.УстановитьПараметр("ВидРемонтныхРабот",Параметры.ВидРемонтныхРабот);
	Запрос.УстановитьПараметр("ТиповойОР",Параметры.ОбъектРемонта.ТиповойОР);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.Номенклатура) Тогда
			СтрокаЗапчасти = ДокументОбъект.ЗапчастиРемонта.Добавить();
			СтрокаЗапчасти.Номенклатура				  = Выборка.Номенклатура;
			СтрокаЗапчасти.Количество				  = Выборка.Количество;
			СтрокаЗапчасти.Качество					  = Выборка.Качество;
			СтрокаЗапчасти.ЕдиницаИзмерения 		  = Выборка.ЕдиницаИзмерения;
			СтрокаЗапчасти.РемонтыОборудования_ID	  = Параметры.ID;
			СтрокаЗапчасти.ХарактеристикаНоменклатуры = Выборка.Характеристика;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьЗначенияКоэффициентов(Дата,МассивФиалов,МассивПодразделений,МассивНаправлений,МассивВидОборудования,МассивОбъектов,МассивВидовРемонта, Подрядчик)
	ИтогК = 1.;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Организация,
	|	торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение,
	|	торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления,
	|	торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта,
	|	торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов,
	|	торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Коэффициент,
	|	торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ПоказательКоэффициента,
	|	ВЫБОР
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов = ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта <> ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 1
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов <> ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 2
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов <> ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				И (торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|					ИЛИ торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			ТОГДА 3
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов <> ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				И (торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|					ИЛИ торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			ТОГДА 4
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов = ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				И (торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|					ИЛИ торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			ТОГДА 5
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов = ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ВидОборудования = ЗНАЧЕНИЕ(Справочник.торо_ВидыОборудования.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				И (торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|					ИЛИ торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			ТОГДА 6
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов <> ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|					ИЛИ торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка))
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 7
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов <> ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|					ИЛИ торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка))
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 8
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов = ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				И (торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ВидОборудования = ЗНАЧЕНИЕ(Справочник.торо_ВидыОборудования.ПустаяСсылка)
	|					ИЛИ торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка))
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 9
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов = ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				И (торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ВидОборудования = ЗНАЧЕНИЕ(Справочник.торо_ВидыОборудования.ПустаяСсылка)
	|					ИЛИ торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления <> ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка))
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 10
	|		КОГДА торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.КлассификаторРемонтов = ЗНАЧЕНИЕ(Справочник.ВидыОбслуживанияОсновныхСредств.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.ВидОборудования = ЗНАЧЕНИЕ(Справочник.торо_ВидыОборудования.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Направления = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				И торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних.Филиал = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 11
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ТабПараметров
	|ИЗ
	|	РегистрСведений.торо_КоэффициентыПереводаБазовыхЦенВТекущие.СрезПоследних(
	|			&Дата,
	|			ВидОборудования В (&ВидОборудования)
	|				И КлассификаторРемонтов В (&КлассификаторРемонтов)
	|				И Направления В (&Направления)
	|				И ОбъектРемонта В (&ОбъектРемонта)
	|				И Подразделение В (&Подразделение)
	|				И Филиал В (&Филиал)) КАК торо_КоэффициентыПереводаБазовыхЦенВТекущиеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ТабПараметров.Приоритет) КАК Приоритет,
	|	ТабПараметров.Коэффициент
	|ПОМЕСТИТЬ МинимальныеПриоритеты
	|ИЗ
	|	ТабПараметров КАК ТабПараметров
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабПараметров.Коэффициент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПараметров.Коэффициент,
	|	ЕСТЬNULL(ТабПараметров.ПоказательКоэффициента, 1) КАК ПоказательКоэффициента,
	|	МинимальныеПриоритеты.Приоритет
	|ИЗ
	|	МинимальныеПриоритеты КАК МинимальныеПриоритеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПараметров КАК ТабПараметров
	|		ПО МинимальныеПриоритеты.Приоритет = ТабПараметров.Приоритет
	|			И МинимальныеПриоритеты.Коэффициент = ТабПараметров.Коэффициент";
	
	Запрос.УстановитьПараметр("ВидОборудования",МассивВидОборудования);	 // Виды оборудования
	Запрос.УстановитьПараметр("Дата",Дата);	 // Дата
	Запрос.УстановитьПараметр("КлассификаторРемонтов",МассивВидовРемонта);	 // Виды обслуживания основных средств
	Запрос.УстановитьПараметр("Направления",МассивНаправлений);	 // Направления объектов ремонтных работ
	Запрос.УстановитьПараметр("ОбъектРемонта",МассивОбъектов);	 // Объекты ремонта
	Запрос.УстановитьПараметр("Подразделение",МассивПодразделений);	 // Подразделение
	Запрос.УстановитьПараметр("Филиал",МассивФиалов);	 // Организация
	
	ВыборкаКоэффициенты = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКоэффициенты.Следующий() Цикл
		ИтогК = ИтогК * ВыборкаКоэффициенты.ПоказательКоэффициента;
	КонецЦикла;
	
	// северный коэффициент
	ЗапросСеверный = Новый Запрос;
	ЗапросСеверный.Текст = 
	"ВЫБРАТЬ
	|	Торо_КоэффициентСеверныйСрезПоследних.СеверныйКоэфициент,
	|	ЕСТЬNULL(Торо_КоэффициентСеверныйСрезПоследних.Коэффициент, 1) КАК Коэффициент,
	|	ТаблицаОР.Ссылка КАК ОбъектРемонта,
	|	ТаблицаОР.ВнешнийОбъект,
	|	ТаблицаОР.Организация
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК ТаблицаОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Торо_КоэффициентСеверный.СрезПоследних(&Дата, ) КАК Торо_КоэффициентСеверныйСрезПоследних
	|		ПО (ВЫБОР
	|				КОГДА (НЕ ТаблицаОР.ВнешнийОбъект)
	|					ТОГДА ТаблицаОР.Организация = Торо_КоэффициентСеверныйСрезПоследних.Организация
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	ТаблицаОР.Ссылка В (&СписокОбъектов)";
	
	ЗапросСеверный.УстановитьПараметр("Дата", Дата);
	ЗапросСеверный.УстановитьПараметр("СписокОбъектов", МассивОбъектов);
	ВыборкаСеверных = ЗапросСеверный.Выполнить().Выбрать();
	
	
	ЗапросОП = Новый Запрос;
	ЗапросОП.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(торо_КоэффициентОбязательныхПодрядчиковСрезПоследних.Коэффициент, 1) КАК Коэффициент
	|ИЗ
	|	РегистрСведений.торо_КоэффициентОбязательныхПодрядчиков.СрезПоследних(&Дата, Подрядчик = &Подрядчик) КАК торо_КоэффициентОбязательныхПодрядчиковСрезПоследних";
	
	ЗапросОП.УстановитьПараметр("Подрядчик", Подрядчик);
	ЗапросОП.УстановитьПараметр("Дата", Дата);
	ВыборкаОП = ЗапросОП.Выполнить().Выбрать();
	
	
	
	ЗапросВредность = Новый Запрос;
	ЗапросВредность.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Вредность ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапрос1.Вредность
	|		КОГДА ВложенныйЗапрос1.Вредность ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапрос.Вредность
	|		ИНАЧЕ ВложенныйЗапрос1.Вредность
	|	КОНЕЦ КАК Вредность,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапрос.Вредность ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапрос1.Коэффициент
	|		КОГДА ВложенныйЗапрос1.Вредность ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапрос.Коэффициент
	|		ИНАЧЕ ВложенныйЗапрос1.Коэффициент
	|	КОНЕЦ КАК Коэффициент
	|ИЗ
	|	(ВЫБРАТЬ
	|		торо_КоэффициентВредностьСрезПоследних.Вредность КАК Вредность,
	|		торо_КоэффициентВредностьСрезПоследних.Коэффициент КАК Коэффициент,
	|		ТаблицаОР.Ссылка КАК ОбъектРемонта
	|	ИЗ
	|		Справочник.торо_ОбъектыРемонта КАК ТаблицаОР
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_КоэффициентВредность.СрезПоследних(&Дата, Использование) КАК торо_КоэффициентВредностьСрезПоследних
	|			ПО ТаблицаОР.РемонтнаяГруппа = торо_КоэффициентВредностьСрезПоследних.ОбъектРемонта
	|	ГДЕ
	|		торо_КоэффициентВредностьСрезПоследних.Использование
	|		И ТаблицаОР.Ссылка В(&ОбъектРемонта)) КАК ВложенныйЗапрос
	|		ПОЛНОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			торо_КоэффициентВредностьСрезПоследних.Вредность КАК Вредность,
	|			торо_КоэффициентВредностьСрезПоследних.Коэффициент КАК Коэффициент,
	|			ТаблицаОР.Ссылка КАК ОбъектРемонта
	|		ИЗ
	|			Справочник.торо_ОбъектыРемонта КАК ТаблицаОР
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_КоэффициентВредность.СрезПоследних(&Дата, Использование) КАК торо_КоэффициентВредностьСрезПоследних
	|				ПО ТаблицаОР.Ссылка = торо_КоэффициентВредностьСрезПоследних.ОбъектРемонта
	|		ГДЕ
	|			торо_КоэффициентВредностьСрезПоследних.Использование
	|			И ТаблицаОР.Ссылка В(&ОбъектРемонта)) КАК ВложенныйЗапрос1
	|		ПО ВложенныйЗапрос.Вредность = ВложенныйЗапрос1.Вредность
	|			И ВложенныйЗапрос.ОбъектРемонта = ВложенныйЗапрос1.ОбъектРемонта";
	
	ЗапросВредность.УстановитьПараметр("Дата",Дата);
	ЗапросВредность.УстановитьПараметр("ОбъектРемонта", МассивОбъектов);
	ВыборкаВредность = ЗапросВредность.Выполнить().Выбрать();
	
	Пока ВыборкаВредность.Следующий() Цикл
		ИтогК = ИтогК * ВыборкаВредность.Коэффициент;
	КонецЦикла;
	
	Пока ВыборкаОП.Следующий() Цикл
		ИтогК = ИтогК * ВыборкаОП.Коэффициент;
	КонецЦикла;
	
	Пока ВыборкаСеверных.Следующий() Цикл
		ИтогК = ИтогК * ВыборкаСеверных.Коэффициент;
	КонецЦикла;
	
	Возврат ИтогК;
КонецФункции

Процедура торо_АктуализироватьЗаписиРегистраЗаказовНаРемонтПриЗаписи(Источник, Отказ) Экспорт
	
	Если Константы.торо_ИспользоватьСинхронизациюСERP.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не Отказ Тогда
		Источник.Движения.Записать();
		РегистрыСведений.торо_ЗаказыНаРемонтВЕРП.АктуализироватьЗаписиРегистра(Источник);
		
	КонецЕсли; 
КонецПроцедуры


Процедура торо_АктуализироватьЗаписиРегистраЗаказовНаРемонтПередЗаписьюПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Не ЗначениеЗаполнено(Источник.Ссылка) 
		Или Отказ
		Или Константы.торо_ИспользоватьСинхронизациюСERP.Получить() = Ложь
		Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение 
		Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		
		// Получим данные движений до проведения или отмены проведения.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	торо_Ремонты.ID КАК ID
		               |ИЗ
		               |	РегистрСведений.торо_Ремонты КАК торо_Ремонты
		               |ГДЕ
		               |	торо_Ремонты.Регистратор = &Ссылка";
		

		Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
		
		Результат = Запрос.Выполнить();
		Таблица_ID = Результат.Выгрузить();
		 
	    Источник.ДополнительныеСвойства.Вставить("Таблица_ID", Таблица_ID);
		
	КонецЕсли; 	
		
КонецПроцедуры

Процедура торо_АктуализироватьЗаписиРегистраЗаказовНаРемонтОбработкаУдаленияПроведенияОбработкаУдаленияПроведения(Источник, Отказ) Экспорт
	
	Если Отказ Или Константы.торо_ИспользоватьСинхронизациюСERP.Получить() = Ложь Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Источник.Движения.Записать();
	РегистрыСведений.торо_ЗаказыНаРемонтВЕРП.АктуализироватьЗаписиРегистра(Источник, Истина);
	
КонецПроцедуры

#Область КомандыЗаполненияПоНормамИПоОснованию

Функция ПолучитьДанныеДляЗаполненияЗатратПоНормам(Форма, СтруктураТаблиц, ИДТекущейОперации = Неопределено, ИДТекущегоРемонта = Неопределено)
	
	ИмяТаблицыРемонтов = "РемонтыОборудования";
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ИмяТаблицыРемонтов = "РегламентныеМероприятия";
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ИмяТаблицыРемонтов = "Мероприятия";
	КонецЕсли;
	
	Если ИДТекущегоРемонта <> Неопределено Тогда
		ТекущийРемонт = Форма.Объект[ИмяТаблицыРемонтов].НайтиПоИдентификатору(ИДТекущегоРемонта);
		Если ТекущийРемонт = Неопределено Тогда
			Возврат Новый Массив;
		КонецЕсли;
		
		Если ИДТекущейОперации <> Неопределено Тогда
			ВеткаДереваОпераций =  Форма.ДеревоРемонтныхРабот.НайтиПоИдентификатору(ИДТекущейОперации);
			Если ВеткаДереваОпераций = Неопределено Тогда
				Возврат Новый Массив;
			КонецЕсли;
		Иначе
			ВеткаДереваОпераций = Форма.ДеревоРемонтныхРабот;
		КонецЕсли;
		
		МассивДанныхЗаполнения = ПолучитьНормыЗатратИзВетвиДереваОпераций(ВеткаДереваОпераций, СтруктураТаблиц,, ТекущийРемонт.ДатаНачала, ТекущийРемонт.ДатаОкончания);
	Иначе
		
		// Дерево операций на форме построено только для текущего ремонта.
		// Если нужны все, то придеься строить самостоятельно из таблицы.
		МассивДанныхЗаполнения = ПолучитьНормыЗатратИзТаблицыОпераций(Форма.Объект.РемонтныеРаботы, Форма.Объект[ИмяТаблицыРемонтов], СтруктураТаблиц);
		
	КонецЕсли;

	Возврат МассивДанныхЗаполнения;
	
КонецФункции

// Возвращает массив структур с полями:
// -РемонтнаяРабота - ссылка на тех. операцию.
// -РемонтыОборудования_ID - ID ремонта.
// -ID - ID строки в дереве тех. операций.
// -СтруктураТаблиц - структура с таблицами значений МатериальныеЗатраты, ТрудовыеЗатраты, ИнструментыИТехника,
//  соответствующими одной тех. операции.
Функция ПолучитьНормыЗатратИзТаблицыОпераций(ТаблицаОпраций, ТаблицаРемонтов, Знач СтруктураТаблиц = Неопределено)
	
	МассивРезультат = Новый массив;
	
	Для каждого ТекущийРемонт из ТаблицаРемонтов Цикл
		ДеревоОпераций = Новый ДеревоЗначений;
		ДеревоОпераций.Колонки.Добавить("ID");
		ДеревоОпераций.Колонки.Добавить("РемонтнаяРабота");
		ДеревоОпераций.Колонки.Добавить("Родитель_ID");
		ДеревоОпераций.Колонки.Добавить("РемонтыОборудования_ID");
		ДеревоОпераций.Колонки.Добавить("Количество");
		ПостроитьДеревоОпераций(ДеревоОпераций, ТаблицаОпраций, ТекущийРемонт.ID);
		
		МассивДанныхЗаполнения = ПолучитьНормыЗатратИзВетвиДереваОпераций(ДеревоОпераций, СтруктураТаблиц,, ТекущийРемонт.ДатаНачала, ТекущийРемонт.ДатаОкончания);
		Для каждого СтруктураДанныхЗаполнения из МассивДанныхЗаполнения Цикл
			МассивРезультат.Добавить(СтруктураДанныхЗаполнения);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивРезультат;
	
КонецФункции

Процедура ПостроитьДеревоОпераций(ДеревоОпераций, ТаблицаОпраций, IDРемонта, IDРодителя = "")
	
	МассивСтрок = ТаблицаОпраций.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, Родитель_ID", IDРемонта, IDРодителя));
	
	Для каждого СтрокаОперации из МассивСтрок Цикл
		НоваяСтрокаДерева = ДеревоОпераций.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаДерева, СтрокаОперации);
		ПостроитьДеревоОпераций(НоваяСтрокаДерева, ТаблицаОпраций, IDРемонта, СтрокаОперации.ID);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив структур с полями:
// -РемонтнаяРабота - ссылка на тех. операцию.
// -РемонтыОборудования_ID - ID ремонта.
// -ID - ID строки в дереве тех. операций.
// -СтруктураТаблиц - структура с таблицами значений МатериальныеЗатраты, ТрудовыеЗатраты, ИнструментыИТехника,
//  соответствующими одной тех. операции.
Функция ПолучитьНормыЗатратИзВетвиДереваОпераций(ВеткаДереваОпераций, Знач СтруктураТаблиц = Неопределено, ТехКартаРодитель = Неопределено, ДатаНачалаРемонта, ДатаОкончаияРемонта) Экспорт
	
	Если СтруктураТаблиц = Неопределено Тогда
		СтруктураТаблиц = Новый Структура("МатериальныеЗатраты, ТрудовыеЗатраты, ИнструментыИТехника");
	КонецЕсли;
	
	МассивРезультатов = Новый Массив;
	
	Если ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыДерево")
		ИЛИ ТипЗнч(ВеткаДереваОпераций) = Тип("ДеревоЗначений")
		ИЛИ ТипЗнч(ВеткаДереваОпераций.РемонтнаяРабота) = Тип("Строка") Тогда
		
		Если ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыДерево")
			ИЛИ ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыЭлементДерева") Тогда
			ВложенныеВетки = ВеткаДереваОпераций.ПолучитьЭлементы();
		Иначе
			ВложенныеВетки = ВеткаДереваОпераций.Строки;
		КонецЕсли;
		
		Для каждого Подветка из ВложенныеВетки Цикл 
			МассивРезультатовПодветки = ПолучитьНормыЗатратИзВетвиДереваОпераций(Подветка, СтруктураТаблиц,, ДатаНачалаРемонта, ДатаОкончаияРемонта);
			Для каждого РезультатПодветки из МассивРезультатовПодветки Цикл
				МассивРезультатов.Добавить(РезультатПодветки);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВеткаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		ТехКарта = Неопределено;
		СрезТехКарт = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ДатаНачалаРемонта,Новый Структура("ИдентификаторТехКарты", ВеткаДереваОпераций.РемонтнаяРабота));
		Если СрезТехКарт.Количество() > 0 Тогда
			ТехКарта = СрезТехКарт[0].ТехКарта;
		КонецЕсли;
		
		Если ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыЭлементДерева") Тогда
			ВложенныеВетки = ВеткаДереваОпераций.ПолучитьЭлементы();
		Иначе
			ВложенныеВетки = ВеткаДереваОпераций.Строки;
		КонецЕсли;
		
		Для каждого Подветка из ВложенныеВетки Цикл 
			МассивРезультатовПодветки = ПолучитьНормыЗатратИзВетвиДереваОпераций(Подветка, СтруктураТаблиц, ТехКарта, ДатаНачалаРемонта, ДатаОкончаияРемонта);
			Для каждого РезультатПодветки из МассивРезультатовПодветки Цикл
				МассивРезультатов.Добавить(РезультатПодветки);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВеткаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		ИДТехКартыРодителя = Неопределено;
		Если ТехКартаРодитель = Неопределено Тогда
			Если ТипЗнч(ВеткаДереваОпераций) = Тип("ДанныеФормыЭлементДерева") Тогда
				РодительскаяВетка = ВеткаДереваОпераций.ПолучитьРодителя();
			Иначе
				РодительскаяВетка = ВеткаДереваОпераций.Родитель;
			КонецЕсли;
			
			Если РодительскаяВетка <> Неопределено Тогда
				ИДТехКартыРодителя = РодительскаяВетка.РемонтнаяРабота;
			КонецЕсли;
		КонецЕсли;
		
		СтруктураТаблиц = ПолучитьЗатратыИзТехОперации(ВеткаДереваОпераций.РемонтнаяРабота, СтруктураТаблиц, ИДТехКартыРодителя, ТехКартаРодитель, ДатаНачалаРемонта, ВеткаДереваОпераций.ID);
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("РемонтнаяРабота", ВеткаДереваОпераций.РемонтнаяРабота);
		СтруктураРезультата.Вставить("РемонтыОборудования_ID", ВеткаДереваОпераций.РемонтыОборудования_ID);
		СтруктураРезультата.Вставить("ID", ВеткаДереваОпераций.ID);
		СтруктураРезультата.Вставить("ДатаНачала", ДатаНачалаРемонта);
		СтруктураРезультата.Вставить("ДатаОкончания", ДатаОкончаияРемонта);
		СтруктураРезультата.Вставить("СтруктураТаблиц", СтруктураТаблиц);
		МассивРезультатов.Добавить(СтруктураРезультата);
	КонецЕсли;
	
	Возврат МассивРезультатов;
	
КонецФункции

Функция ПолучитьЗатратыИзТехОперации(ТехОперация, Знач СтруктураТаблиц = Неопределено, ИдентификаторТехКарты = Неопределено, ТехКарта = Неопределено, ДатаНачалаРемонта = Неопределено, ИдентификаторТехОперации = Неопределено)
	
	Если СтруктураТаблиц = Неопределено Тогда
		СтруктураТаблиц = Новый Структура("МатериальныеЗатраты, ТрудовыеЗатраты, ИнструментыИТехника");
	КонецЕсли;
	
	СтруктураРезультата = Новый Структура;
	Для каждого КлючИЗначение из СтруктураТаблиц Цикл 
		СтруктураРезультата.Вставить(КлючИЗначение.Ключ, Неопределено);
	КонецЦикла;
	
	СтрокаОперацииВТехКарте = Неопределено;
	БратьИзТехКарты = Ложь;
	
	Если ТехКарта = Неопределено И ИдентификаторТехКарты <> Неопределено Тогда
		СрезТехКарт = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ДатаНачалаРемонта,Новый Структура("ИдентификаторТехКарты", ИдентификаторТехКарты));
		Если СрезТехКарт.Количество() > 0 Тогда
			ТехКарта = СрезТехКарт[0].ТехКарта;
		КонецЕсли;
	КонецЕсли;
	
	Если ТехКарта <> Неопределено Тогда
		СтрокаОперацииВТехКарте = ТехКарта.СписокОпераций.Найти(ТехОперация);
		Если СтрокаОперацииВТехКарте <> Неопределено Тогда
			БратьИзТехКарты = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если БратьИзТехКарты Тогда
		
		Для каждого КлючИЗначение из СтруктураТаблиц Цикл 
			МассивСтрок = ТехКарта[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаОперацииВТехКарте.ID));
			СтруктураРезультата[КлючИЗначение.Ключ] =  ТехКарта[КлючИЗначение.Ключ].Выгрузить(МассивСтрок);
		КонецЦикла;
		
	Иначе
		
		Для каждого КлючИЗначение из СтруктураТаблиц Цикл 
			ТаблицаТО = ТехОперация[КлючИЗначение.Ключ].Выгрузить();
			ТаблицаТО.Колонки.Добавить("ID");
			ТаблицаТО.Колонки.Добавить("Операция");
			ТаблицаТО.ЗаполнитьЗначения(ИдентификаторТехОперации,"ID");
			ТаблицаТО.ЗаполнитьЗначения(ТехОперация,"Операция");
			Если КлючИЗначение.Ключ = "ТрудовыеЗатраты" Тогда
				ТаблицаТО.Колонки.Добавить("ВремяРаботыНаЕдиницу");
				ТаблицаТО.ЗагрузитьКолонку(ТаблицаТО.ВыгрузитьКолонку("ВремяРаботы"),"ВремяРаботыНаЕдиницу");
			ИначеЕсли КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
				ТаблицаТО.Колонки.Добавить("КоличествоНаЕдиницу");
				ТаблицаТО.Колонки.Добавить("КоличествоУпаковокНаЕдиницу");
				ТаблицаТО.ЗагрузитьКолонку(ТаблицаТО.ВыгрузитьКолонку("Количество"),"КоличествоНаЕдиницу");
				ТаблицаТО.ЗагрузитьКолонку(ТаблицаТО.ВыгрузитьКолонку("КоличествоУпаковок"),"КоличествоУпаковокНаЕдиницу");
			ИначеЕсли КлючИЗначение.Ключ = "ИнструментыИТехника" Тогда
				ТаблицаТО.Колонки.Добавить("ВремяРаботыНаЕдиницу");
				ТаблицаТО.ЗагрузитьКолонку(ТаблицаТО.ВыгрузитьКолонку("ВремяРаботы"),"ВремяРаботыНаЕдиницу");
			КонецЕсли;
			СтруктураРезультата[КлючИЗначение.Ключ] = ТаблицаТО;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураРезультата;
	
КонецФункции


Функция ПолучитьДанныеДляЗаполненияПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта, КомандаЗаполнения)
	
	ИмяТаблицыРемонтов = "РемонтыОборудования";
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ИмяТаблицыРемонтов = "РегламентныеМероприятия";
	ИначеЕсли ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ИмяТаблицыРемонтов = "Мероприятия";
	КонецЕсли;
	
	СписокИДРемРабот = Новый Массив;
	СписокИДТехКарт = Новый Массив;
	
	Если ИДТекущегоРемонта <> Неопределено Тогда
		ТекущийРемонт = Форма.Объект[ИмяТаблицыРемонтов].НайтиПоИдентификатору(ИДТекущегоРемонта);
		Если ТекущийРемонт = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СписокИДРемонтов = Новый Массив;
		СписокИДРемонтов.Добавить(ТекущийРемонт.ID);
		
		Если КомандаЗаполнения <> "Запчасти" Тогда
			
			СписокИДРемРабот = Новый Массив;
			СписокИДТехКарт = Новый Массив;
			Если ИДТекущейОперации <> Неопределено Тогда
				ВеткаДереваОпераций =  Форма.ДеревоРемонтныхРабот.НайтиПоИдентификатору(ИДТекущейОперации);
				Если ВеткаДереваОпераций = Неопределено Тогда
					Возврат Неопределено;
				КонецЕсли;
				СписокИДРемРабот.Добавить(ВеткаДереваОпераций.ID);
				Если ТипЗнч(ВеткаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					СписокИДТехКарт.Добавить(Новый Структура("ID, РемонтыОборудования_ID",ВеткаДереваОпераций.ID, ВеткаДереваОпераций.РемонтыОборудования_ID));
				КонецЕсли;
			Иначе
				ВеткаДереваОпераций = Форма.ДеревоРемонтныхРабот;
			КонецЕсли;
			
			МассивСтрокДереваОпераций = Новый массив;
			торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МассивСтрокДереваОпераций, ВеткаДереваОпераций.ПолучитьЭлементы());
			Для каждого СтрокаДереваОпераций из МассивСтрокДереваОпераций Цикл
				СписокИДРемРабот.Добавить(СтрокаДереваОпераций.ID);
				Если ТипЗнч(СтрокаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					СписокИДТехКарт.Добавить(Новый Структура("ID, РемонтыОборудования_ID",СтрокаДереваОпераций.ID, СтрокаДереваОпераций.РемонтыОборудования_ID));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		СписокИДРемонтов = Форма.Объект[ИмяТаблицыРемонтов].Выгрузить().ВыгрузитьКолонку("ID");
		
		Если КомандаЗаполнения <> "Запчасти" Тогда
			
			СписокИДРемРабот = Форма.Объект["РемонтныеРаботы"].Выгрузить().ВыгрузитьКолонку("ID");
			СписокИДТехКарт = Новый Массив;
			Для каждого СтрокаДереваОпераций из Форма.Объект["РемонтныеРаботы"] Цикл
				Если ТипЗнч(СтрокаДереваОпераций.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					СписокИДТехКарт.Добавить(Новый Структура("ID, РемонтыОборудования_ID",СтрокаДереваОпераций.ID, СтрокаДереваОпераций.РемонтыОборудования_ID));
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивДокументовОснований = Форма.Объект.ДокументыОснования.Выгрузить().ВыгрузитьКолонку("ДокументОснование");
	СтруктураДанных = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, Форма.Объект, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, КомандаЗаполнения);
		
	Возврат СтруктураДанных;
	
КонецФункции

Функция ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, КомандаЗаполнения)
	
	СтруктураДанных = Новый Структура;
	
	Если КомандаЗаполнения = "Исполнители" Тогда
		табИсполнителей = Новый ТаблицаЗначений;
		табИсполнителей.Колонки.Добавить("РемонтыОборудования_ID");
		табИсполнителей.Колонки.Добавить("ID");
		табИсполнителей.Колонки.Добавить("Квалификация");
		табИсполнителей.Колонки.Добавить("ДатаНачала");
		табИсполнителей.Колонки.Добавить("ДатаОкончания");
		табИсполнителей.Колонки.Добавить("Сотрудник");
		табИсполнителей.Колонки.Добавить("КТУ");
		табИсполнителей.Колонки.Добавить("ВремяРаботы", Новый ОписаниеТипов("Число"));
		табИсполнителей.Колонки.Добавить("СуммаКНачислению", Новый ОписаниеТипов("Число"));
		табИсполнителей.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));

				
		табПодрядчиков = Новый ТаблицаЗначений;
		табПодрядчиков.Колонки.Добавить("РемонтыОборудования_ID");
		табПодрядчиков.Колонки.Добавить("ID");
		табПодрядчиков.Колонки.Добавить("Контрагент");
		табПодрядчиков.Колонки.Добавить("ДоговорКонтрагента");
		табПодрядчиков.Колонки.Добавить("ДатаНачала");
		табПодрядчиков.Колонки.Добавить("ДатаОкончания");
		
		Для каждого ДокументОснование из МассивДокументовОснований Цикл
			ПолучитьИсполнителейИзДокументаОснования(ДокументОснование, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, табИсполнителей, табПодрядчиков);	
		КонецЦикла;
		
		СтруктураДанных.Вставить("Исполнители", табИсполнителей);
		СтруктураДанных.Вставить("Подрядчики", табПодрядчиков);
		
	ИначеЕсли КомандаЗаполнения = "Материалы" Тогда
		табМатериалов = Новый ТаблицаЗначений;
		табМатериалов.Колонки.Добавить("РемонтыОборудования_ID");
		табМатериалов.Колонки.Добавить("ID");
		табМатериалов.Колонки.Добавить("ЕдиницаИзмерения");
		табМатериалов.Колонки.Добавить("Количество");
		табМатериалов.Колонки.Добавить("Номенклатура");
		табМатериалов.Колонки.Добавить("ХарактеристикаНоменклатуры");
		табМатериалов.Колонки.Добавить("Сумма");
		табМатериалов.Колонки.Добавить("КоличествоЕдиниц");
		
		Для каждого ДокументОснование из МассивДокументовОснований Цикл
			ПолучитьМатериалыИзДокументаОснования(ДокументОснование, СписокИДРемонтов, СписокИДРемРабот, табМатериалов);
		КонецЦикла;
		
		СтруктураДанных.Вставить("Материалы", табМатериалов);
		
	ИначеЕсли КомандаЗаполнения = "Запчасти" Тогда
		табЗапчастей = Новый ТаблицаЗначений;
		табЗапчастей.Колонки.Добавить("РемонтыОборудования_ID");
		
		табЗапчастей.Колонки.Добавить("Номенклатура");
		табЗапчастей.Колонки.Добавить("ХарактеристикаНоменклатуры");
		табЗапчастей.Колонки.Добавить("Количество");
		табЗапчастей.Колонки.Добавить("ЕдиницаИзмерения");
		
		табЗапчастей.Колонки.Добавить("НоменклатураНовая");
		табЗапчастей.Колонки.Добавить("ХарактеристикаНоменклатурыНовая");
		табЗапчастей.Колонки.Добавить("КоличествоНовое");
		табЗапчастей.Колонки.Добавить("ЕдиницаИзмеренияНовая");
		
		Для каждого ДокументОснование из МассивДокументовОснований Цикл
			ПолучитьЗапчастиИзДокументаОснования(ДокументОснование, СписокИДРемонтов, табЗапчастей);
		КонецЦикла;
		
		СтруктураДанных.Вставить("Запчасти", табЗапчастей);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Процедура ПолучитьИсполнителейИзДокументаОснования(ДокументОснование, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, табИсполнителей, табПодрядчиков)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка,
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID КАК РемонтыОборудования_ID,
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Исполнитель КАК Контрагент,
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаНач КАК ДатаНачала,
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаКон КАК ДатаОкончания,
		|	1 КАК Количество
		|ИЗ
		|	Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
		|ГДЕ
		|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка = &Ссылка
		|	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СпособВыполнения = &СпособВыполнения
		|	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID В(&ID)";
		
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.торо_ГрафикРегламентныхМероприятийТОиР", "Документ.торо_ПланГрафикРемонта");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("СпособВыполнения", Перечисления.СпособыСтроительства.Подрядный);
		Запрос.УстановитьПараметр("ID", СписокИДРемонтов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если ЗначениеЗаполнено(Выборка.Контрагент) 
				И ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				Для каждого ИДТехКарты из СписокИДТехКарт Цикл
					
					ИДДляСравнения = "";
					Если ТипЗнч(ИДТехКарты) = Тип("Строка") Тогда
						ИДДляСравнения = ИДТехКарты;
					Иначе
						ИДДляСравнения = ИДТехКарты.РемонтыОборудования_ID;
					КонецЕсли;
					
					Если ИДДляСравнения = Выборка.РемонтыОборудования_ID Тогда
						НовСтр = табПодрядчиков.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
						НовСтр.ID = ИДТехКарты.ID;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") 
		ИЛИ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")	Тогда
		
		ПолучитьИсполнителейИзДокументаОснования_Наряд(ДокументОснование, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, табИсполнителей, табПодрядчиков);

   ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.ID,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество,
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID,
		|	1 КАК КТУ
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.ТрудовыеЗатраты КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
		|ГДЕ
		|	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Ссылка = &Ссылка
		|	И торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
		|	И торо_ЗаявкаНаРемонтТрудовыеЗатраты.ID В(&ID)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Ссылка,
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.ID,
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.РемонтыОборудования_ID,
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Исполнитель
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.ИсполнителиРемонтныхРабот КАК торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот
		|ГДЕ
		|	торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.Ссылка = &Ссылка
		|	И торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
		|	И торо_ЗаявкаНаРемонтИсполнителиРемонтныхРабот.ID В(&ID)";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
		Запрос.УстановитьПараметр("ID", СписокИДРемРабот);
		
		Результат = Запрос.ВыполнитьПакет();
		ВыборкаТрудозатрат = Результат[0].Выбрать();
		ВыборкаИсполнителей = Результат[1].Выбрать();
		
		Пока ВыборкаТрудозатрат.Следующий() Цикл
			НовСтр = табИсполнителей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаТрудозатрат);
		КонецЦикла;
		
		Пока ВыборкаИсполнителей.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаИсполнителей.Исполнитель) Тогда
				Если ТипЗнч(ВыборкаИсполнителей.Исполнитель) = Тип("СправочникСсылка.Контрагенты") Тогда
					НовСтр = табПодрядчиков.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаИсполнителей);
					НовСтр.Контрагент = ВыборкаИсполнителей.Исполнитель;
				ИначеЕсли ТипЗнч(ВыборкаИсполнителей.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
					НовСтр = табИсполнителей.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаИсполнителей);
					НовСтр.Сотрудник = ВыборкаИсполнителей.Исполнитель;
					НовСтр.КТУ = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьИсполнителейИзДокументаОснования_Наряд(ДокументОснование, ЗаполняемыйДокумент, СписокИДРемонтов, СписокИДРемРабот, СписокИДТехКарт, табИсполнителей, табПодрядчиков)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.Ссылка,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.ID КАК ID,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.Квалификация,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаНачала,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.ДатаОкончания,
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.Сотрудник,
	|	ВЫБОР
	|		КОГДА торо_НарядНаРегламентноеМероприятиеИсполнители.КТУ = 0
	|			ТОГДА 1
	|		ИНАЧЕ торо_НарядНаРегламентноеМероприятиеИсполнители.КТУ
	|	КОНЕЦ КАК КТУ
	|ПОМЕСТИТЬ ВТ_ТаблицаИсполнителей
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.Исполнители КАК торо_НарядНаРегламентноеМероприятиеИсполнители
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятиеИсполнители.Ссылка = &Ссылка
	|	И торо_НарядНаРегламентноеМероприятиеИсполнители.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
	|	И торо_НарядНаРегламентноеМероприятиеИсполнители.ID В(&ID)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиямОстатки.IDРемонта КАК IDРемонта,
	|	торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиямОстатки.IDОперации КАК IDОперации,
	|	торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиямОстатки.ПроцентРемонтаОстаток КАК ПроцентВыполненный
	|ПОМЕСТИТЬ ВТ_ВыполняемыеРаботыОстатки
	|ИЗ
	|	РегистрНакопления.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Остатки(
	|			&Дата,
	|			IDОперации В (&ID)
	|				И IDРемонта В (&РемонтыОборудования_ID)) КАК торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиямОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ЗапланированныеРемонтныеРаботы.IDРемонта КАК IDРемонта,
	|	торо_ЗапланированныеРемонтныеРаботы.IDОперации КАК IDОперации,
	|	СУММА(торо_ЗапланированныеРемонтныеРаботы.ПроцентРемонта) КАК ПроцентПлановый
	|ПОМЕСТИТЬ ВТ_ЗапланированныеРемонтыОбороты
	|ИЗ
	|	РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы КАК торо_ЗапланированныеРемонтныеРаботы
	|ГДЕ
	|	торо_ЗапланированныеРемонтныеРаботы.Активность
	|	И торо_ЗапланированныеРемонтныеРаботы.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	И торо_ЗапланированныеРемонтныеРаботы.Период <= &Дата
	|	И торо_ЗапланированныеРемонтныеРаботы.IDРемонта В(&РемонтыОборудования_ID)
	|	И торо_ЗапланированныеРемонтныеРаботы.IDОперации В(&ID)
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ЗапланированныеРемонтныеРаботы.IDРемонта,
	|	торо_ЗапланированныеРемонтныеРаботы.IDОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID КАК ID,
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаНачала,
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ТаблицаРемонтов
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка = &Ссылка
	|	И торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID В(&РемонтыОборудования_ID)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.ID КАК ID,
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтнаяРабота,
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Родитель_ID
	|ПОМЕСТИТЬ ВТ_ТаблицаОпераций
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Ссылка = &Ссылка
	|	И торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаОпераций_ТехОперации.РемонтыОборудования_ID,
	|	ВТ_ТаблицаОпераций_ТехОперации.ID,
	|	ВТ_ТаблицаОпераций_ТехОперации.РемонтнаяРабота КАК ТехОперация,
	|	ЕСТЬNULL(ВТ_ТаблицаОпераций_ТехКарты.РемонтнаяРабота, НЕОПРЕДЕЛЕНО) КАК ИдТехКарты,
	|	ВТ_ТаблицаРемонтов.ДатаНачала
	|ПОМЕСТИТЬ ВТ_ТаблицаОперацийСРодителями
	|ИЗ
	|	ВТ_ТаблицаОпераций КАК ВТ_ТаблицаОпераций_ТехОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаОпераций КАК ВТ_ТаблицаОпераций_ТехКарты
	|		ПО ВТ_ТаблицаОпераций_ТехОперации.РемонтыОборудования_ID = ВТ_ТаблицаОпераций_ТехКарты.РемонтыОборудования_ID
	|			И ВТ_ТаблицаОпераций_ТехОперации.Родитель_ID = ВТ_ТаблицаОпераций_ТехКарты.ID
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТаблицаРемонтов КАК ВТ_ТаблицаРемонтов
	|		ПО ВТ_ТаблицаОпераций_ТехОперации.РемонтыОборудования_ID = ВТ_ТаблицаРемонтов.ID
	|ГДЕ
	|	ВТ_ТаблицаОпераций_ТехОперации.РемонтнаяРабота ССЫЛКА Справочник.торо_ТехнологическиеОперации
	|	И ВТ_ТаблицаОпераций_ТехОперации.ID В(&ID)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаРемонтов.ID,
	|	ВТ_ТаблицаРемонтов.ДатаНачала КАК ДатаНачала,
	|	МАКСИМУМ(торо_СтоимостьЧасаКвалификации.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыСрезаСтоимостиКвалификаций
	|ИЗ
	|	ВТ_ТаблицаРемонтов КАК ВТ_ТаблицаРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК торо_СтоимостьЧасаКвалификации
	|		ПО ВТ_ТаблицаРемонтов.ДатаНачала >= торо_СтоимостьЧасаКвалификации.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаРемонтов.ДатаНачала,
	|	ВТ_ТаблицаРемонтов.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаНачала,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыСрезаСтоимостиКвалификаций.ID,
	|	ВТ_ДатыСрезаСтоимостиКвалификаций.ДатаНачала,
	|	торо_СтоимостьЧасаКвалификации.Квалификация,
	|	торо_СтоимостьЧасаКвалификации.Валюта,
	|	торо_СтоимостьЧасаКвалификации.Стоимость
	|ПОМЕСТИТЬ ВТ_СтоимостиКвалификаций
	|ИЗ
	|	ВТ_ДатыСрезаСтоимостиКвалификаций КАК ВТ_ДатыСрезаСтоимостиКвалификаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК торо_СтоимостьЧасаКвалификации
	|		ПО ВТ_ДатыСрезаСтоимостиКвалификаций.Период = торо_СтоимостьЧасаКвалификации.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СтоимостиКвалификаций.ID,
	|	ВТ_СтоимостиКвалификаций.ДатаНачала,
	|	ВТ_СтоимостиКвалификаций.Квалификация,
	|	ВТ_СтоимостиКвалификаций.Валюта КАК Валюта,
	|	ВТ_СтоимостиКвалификаций.Стоимость,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ДатыСрезаКурсовВалют
	|ИЗ
	|	ВТ_СтоимостиКвалификаций КАК ВТ_СтоимостиКвалификаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВТ_СтоимостиКвалификаций.ДатаНачала >= КурсыВалют.Период
	|			И ВТ_СтоимостиКвалификаций.Валюта = КурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СтоимостиКвалификаций.ДатаНачала,
	|	ВТ_СтоимостиКвалификаций.Квалификация,
	|	ВТ_СтоимостиКвалификаций.Валюта,
	|	ВТ_СтоимостиКвалификаций.Стоимость,
	|	ВТ_СтоимостиКвалификаций.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДатыСрезаКурсовВалют.ID КАК ID,
	|	ВТ_ДатыСрезаКурсовВалют.ДатаНачала КАК ДатаНачала,
	|	ВТ_ДатыСрезаКурсовВалют.Квалификация КАК Квалификация,
	|	ВТ_ДатыСрезаКурсовВалют.Валюта,
	|	ВТ_ДатыСрезаКурсовВалют.Стоимость,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ПОМЕСТИТЬ ВТ_СтоимостиКвалификацийСКурсамиВалют
	|ИЗ
	|	ВТ_ДатыСрезаКурсовВалют КАК ВТ_ДатыСрезаКурсовВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВТ_ДатыСрезаКурсовВалют.Валюта = КурсыВалют.Валюта
	|			И ВТ_ДатыСрезаКурсовВалют.Период = КурсыВалют.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Квалификация,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТаблицаОперацийСРодителями.РемонтыОборудования_ID,
	|	ВТ_ТаблицаОперацийСРодителями.ID,
	|	ВТ_ТаблицаОперацийСРодителями.ТехОперация,
	|	ВТ_ТаблицаОперацийСРодителями.ИдТехКарты,
	|	ВТ_ТаблицаОперацийСРодителями.ДатаНачала,
	|	МАКСИМУМ(торо_ВерсииТехКарт.Период) КАК ДатаВерсииТехКарты
	|ПОМЕСТИТЬ ВТ_ДатыСрезаТехКарт
	|ИЗ
	|	ВТ_ТаблицаОперацийСРодителями КАК ВТ_ТаблицаОперацийСРодителями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	|		ПО ВТ_ТаблицаОперацийСРодителями.ДатаНачала >= торо_ВерсииТехКарт.Период
	|			И ВТ_ТаблицаОперацийСРодителями.ИдТехКарты >= торо_ВерсииТехКарт.ИдентификаторТехКарты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаОперацийСРодителями.РемонтыОборудования_ID,
	|	ВТ_ТаблицаОперацийСРодителями.ID,
	|	ВТ_ТаблицаОперацийСРодителями.ТехОперация,
	|	ВТ_ТаблицаОперацийСРодителями.ИдТехКарты,
	|	ВТ_ТаблицаОперацийСРодителями.ДатаНачала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаВерсииТехКарты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ДатыСрезаТехКарт.РемонтыОборудования_ID,
	|	ВТ_ДатыСрезаТехКарт.ID,
	|	ВТ_ДатыСрезаТехКарт.ТехОперация КАК ТехОперация,
	|	ЕСТЬNULL(торо_ВерсииТехКарт.ТехКарта, НЕОПРЕДЕЛЕНО) КАК ТехКарта
	|ПОМЕСТИТЬ ВТ_ТаблицаОперацийСТехКартами
	|ИЗ
	|	ВТ_ДатыСрезаТехКарт КАК ВТ_ДатыСрезаТехКарт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	|		ПО ВТ_ДатыСрезаТехКарт.ДатаВерсииТехКарты = торо_ВерсииТехКарт.Период
	|			И ВТ_ДатыСрезаТехКарт.ИдТехКарты = торо_ВерсииТехКарт.ТехКарта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТехОперация,
	|	ТехКарта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ТаблицаОперацийСТехКартами.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаОперацийСТехКартами.ID КАК ID,
	|	ВТ_ТаблицаОперацийСТехКартами.ТехОперация,
	|	ВТ_ТаблицаОперацийСТехКартами.ТехКарта,
	|	ЕСТЬNULL(торо_ТехКартыТрудовыеЗатраты.ВремяРаботы, торо_ТехнологическиеОперацииТрудовыеЗатраты.ВремяРаботы) КАК ВремяРаботы,
	|	ЕСТЬNULL(торо_ТехКартыТрудовыеЗатраты.Квалификация, торо_ТехнологическиеОперацииТрудовыеЗатраты.Квалификация) КАК Квалификация,
	|	ЕСТЬNULL(торо_ТехКартыТрудовыеЗатраты.Количество, торо_ТехнологическиеОперацииТрудовыеЗатраты.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_ТаблицаНорм
	|ИЗ
	|	ВТ_ТаблицаОперацийСТехКартами КАК ВТ_ТаблицаОперацийСТехКартами
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_ТехКартыТрудовыеЗатраты
	|		ПО ВТ_ТаблицаОперацийСТехКартами.ТехКарта = торо_ТехКартыТрудовыеЗатраты.Ссылка
	|			И ВТ_ТаблицаОперацийСТехКартами.ТехОперация = торо_ТехКартыТрудовыеЗатраты.Операция
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации.ТрудовыеЗатраты КАК торо_ТехнологическиеОперацииТрудовыеЗатраты
	|		ПО (ВЫБОР
	|				КОГДА торо_ТехКартыТрудовыеЗатраты.Ссылка ЕСТЬ NULL 
	|					ТОГДА ВТ_ТаблицаОперацийСТехКартами.ТехОперация = торо_ТехнологическиеОперацииТрудовыеЗатраты.Ссылка
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|ГДЕ
	|	НЕ(торо_ТехКартыТрудовыеЗатраты.Ссылка ЕСТЬ NULL 
	|				И торо_ТехнологическиеОперацииТрудовыеЗатраты.Ссылка ЕСТЬ NULL )
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID,
	|	Квалификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИсполнителей.Ссылка,
	|	ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаИсполнителей.ID КАК ID,
	|	ВТ_ТаблицаИсполнителей.Квалификация КАК Квалификация,
	|	ВТ_ТаблицаИсполнителей.ДатаНачала,
	|	ВТ_ТаблицаИсполнителей.ДатаОкончания,
	|	ВТ_ТаблицаИсполнителей.Сотрудник,
	|	ВТ_ТаблицаИсполнителей.КТУ,
	|	1 КАК Количество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ЗапланированныеРемонтыОбороты.ПроцентПлановый, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ВыполняемыеРаботыОстатки.ПроцентВыполненный, 0) / ВТ_ЗапланированныеРемонтыОбороты.ПроцентПлановый * ЕСТЬNULL(ВТ_ТаблицаНорм.ВремяРаботы, 0) * ЕСТЬNULL(ВТ_ТаблицаНорм.Количество, 0)
	|	КОНЕЦ КАК ВремяРаботы,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ЗапланированныеРемонтыОбороты.ПроцентПлановый, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ВыполняемыеРаботыОстатки.ПроцентВыполненный, 0) / ВТ_ЗапланированныеРемонтыОбороты.ПроцентПлановый * ЕСТЬNULL(ВТ_ТаблицаНорм.ВремяРаботы, 0) * (ЕСТЬNULL(ВТ_СтоимостиКвалификацийСКурсамиВалют.Стоимость, 0) * ЕСТЬNULL(ВТ_СтоимостиКвалификацийСКурсамиВалют.Курс, 0) / ЕСТЬNULL(ВТ_СтоимостиКвалификацийСКурсамиВалют.Кратность, 1)) / 3600
	|	КОНЕЦ КАК СуммаКНачислению
	|ПОМЕСТИТЬ ВТ_ТаблицаИтог
	|ИЗ
	|	ВТ_ТаблицаИсполнителей КАК ВТ_ТаблицаИсполнителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыполняемыеРаботыОстатки КАК ВТ_ВыполняемыеРаботыОстатки
	|		ПО ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID = ВТ_ВыполняемыеРаботыОстатки.IDРемонта
	|			И ВТ_ТаблицаИсполнителей.ID = ВТ_ВыполняемыеРаботыОстатки.IDОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗапланированныеРемонтыОбороты КАК ВТ_ЗапланированныеРемонтыОбороты
	|		ПО ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID = ВТ_ЗапланированныеРемонтыОбороты.IDРемонта
	|			И ВТ_ТаблицаИсполнителей.ID = ВТ_ЗапланированныеРемонтыОбороты.IDОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаНорм КАК ВТ_ТаблицаНорм
	|		ПО ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID = ВТ_ТаблицаНорм.РемонтыОборудования_ID
	|			И ВТ_ТаблицаИсполнителей.ID = ВТ_ТаблицаНорм.ID
	|			И ВТ_ТаблицаИсполнителей.Квалификация = ВТ_ТаблицаНорм.Квалификация
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостиКвалификацийСКурсамиВалют КАК ВТ_СтоимостиКвалификацийСКурсамиВалют
	|		ПО ВТ_ТаблицаИсполнителей.РемонтыОборудования_ID = ВТ_СтоимостиКвалификацийСКурсамиВалют.ID
	|			И ВТ_ТаблицаИсполнителей.Квалификация = ВТ_СтоимостиКвалификацийСКурсамиВалют.Квалификация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID,
	|	Квалификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИтог.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	ВТ_ТаблицаИтог.ID КАК ID,
	|	ВТ_ТаблицаИтог.Квалификация КАК Квалификация,
	|	СУММА(ВТ_ТаблицаИтог.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_КоличествоСотрудников
	|ИЗ
	|	ВТ_ТаблицаИтог КАК ВТ_ТаблицаИтог
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаИтог.РемонтыОборудования_ID,
	|	ВТ_ТаблицаИтог.ID,
	|	ВТ_ТаблицаИтог.Квалификация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID,
	|	Квалификация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИтог.Ссылка,
	|	ВТ_ТаблицаИтог.РемонтыОборудования_ID,
	|	ВТ_ТаблицаИтог.ID,
	|	ВТ_ТаблицаИтог.Квалификация,
	|	ВТ_ТаблицаИтог.ДатаНачала,
	|	ВТ_ТаблицаИтог.ДатаОкончания,
	|	ВТ_ТаблицаИтог.Сотрудник,
	|	ВТ_ТаблицаИтог.КТУ,
	|	ВТ_ТаблицаИтог.ВремяРаботы / ВТ_КоличествоСотрудников.Количество КАК ВремяРаботы,
	|	ВТ_ТаблицаИтог.СуммаКНачислению / ВТ_КоличествоСотрудников.Количество КАК СуммаКНачислению
	|ИЗ
	|	ВТ_ТаблицаИтог КАК ВТ_ТаблицаИтог
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КоличествоСотрудников КАК ВТ_КоличествоСотрудников
	|		ПО ВТ_ТаблицаИтог.РемонтыОборудования_ID = ВТ_КоличествоСотрудников.РемонтыОборудования_ID
	|			И ВТ_ТаблицаИтог.ID = ВТ_КоличествоСотрудников.ID
	|			И ВТ_ТаблицаИтог.Квалификация = ВТ_КоличествоСотрудников.Квалификация";
	
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ID", СписокИДРемРабот);
	Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
	Запрос.УстановитьПараметр("Дата", ЗаполняемыйДокумент.Дата);
	Запрос.УстановитьПараметр("ДатаОснования", ДокументОснование.Дата);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия", "Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Документ.торо_НарядНаРегламентноеМероприятие", "Документ.торо_НарядНаВыполнениеРемонтныхРабот");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "РегистрНакопления.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям", "РегистрНакопления.торо_ВыполняемыеРемонтныеРаботы");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ".ПроцентРемонта", ".ПроцентОпераций");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ВыборкаИсполнителей = Результат.Выбрать();
	
	Пока ВыборкаИсполнителей.Следующий() Цикл
		НовСтр = табИсполнителей.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаИсполнителей);
	КонецЦикла;
	
	ЗапросПодрядчики = Новый Запрос;
	ЗапросПодрядчики.Текст = 
	"ВЫБРАТЬ
	|	торо_НарядНаРегламентноеМероприятиеПодрядчики.Ссылка,
	|	торо_НарядНаРегламентноеМероприятиеПодрядчики.РемонтыОборудования_ID,
	|	торо_НарядНаРегламентноеМероприятиеПодрядчики.ID,
	|	торо_НарядНаРегламентноеМероприятиеПодрядчики.Контрагент,
	|	торо_НарядНаРегламентноеМероприятиеПодрядчики.ДоговорКонтрагента,
	|	торо_НарядНаРегламентноеМероприятиеПодрядчики.ДатаНачала,
	|	торо_НарядНаРегламентноеМероприятиеПодрядчики.ДатаОкончания
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.Подрядчики КАК торо_НарядНаРегламентноеМероприятиеПодрядчики
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятиеПодрядчики.Ссылка = &Ссылка
	|	И торо_НарядНаРегламентноеМероприятиеПодрядчики.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
	|	И торо_НарядНаРегламентноеМероприятиеПодрядчики.ID В(&ID)";
	
	ЗапросПодрядчики.УстановитьПараметр("Ссылка", ДокументОснование);
	ЗапросПодрядчики.УстановитьПараметр("ID", СписокИДРемРабот);
	ЗапросПодрядчики.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ЗапросПодрядчики.Текст = СтрЗаменить(ЗапросПодрядчики.Текст, "Документ.торо_НарядНаРегламентноеМероприятие", "Документ.торо_НарядНаВыполнениеРемонтныхРабот");
	КонецЕсли;
	
	Результат = ЗапросПодрядчики.Выполнить();
	ВыборкаПодрядчиков = Результат.Выбрать();
	
	Пока ВыборкаПодрядчиков.Следующий() Цикл
		НовСтр = табПодрядчиков.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаПодрядчиков);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьМатериалыИзДокументаОснования(ДокументОснование, СписокИДРемонтов, СписокИДРемРабот, табМатериалов)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		// Вариант с регистром торо_ПлановыеМатериальныеЗатратыРемонтныхРабот не подходит, так как в нем нет упаковок.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Ссылка,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ID,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ЕдиницаИзмерения,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Количество,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID,
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.КоличествоЕдиниц
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.МатериальныеЗатраты КАК торо_ЗаявкаНаРемонтМатериальныеЗатраты
		|ГДЕ
		|	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Ссылка = &Ссылка
		|	И торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
		|	И торо_ЗаявкаНаРемонтМатериальныеЗатраты.ID В(&ID)";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
		Запрос.УстановитьПараметр("ID", СписокИДРемРабот);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НовСтр = табМатериалов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		Для каждого СтрокаОснования из ДокументОснование.ДокументыОснования Цикл
			ПолучитьМатериалыИзДокументаОснования(СтрокаОснования.ДокументОснование, СписокИДРемонтов, СписокИДРемРабот, табМатериалов);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьЗапчастиИзДокументаОснования(ДокументОснование, СписокИДРемонтов, табЗапчастей)
	
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Ссылка,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ЕдиницаИзмерения,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ХарактеристикаНоменклатуры,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Количество,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура КАК НоменклатураНовая,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНовая,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыНовая,
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Количество КАК КоличествоНовое
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.ЗапчастиРемонта КАК торо_ЗаявкаНаРемонтЗапчастиРемонта
		|ГДЕ
		|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Ссылка = &Ссылка
		|	И торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID В(&РемонтыОборудования_ID)";
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокИДРемонтов);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НовСтр = табЗапчастей.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, Выборка);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		Для каждого СтрокаОснования из ДокументОснование.ДокументыОснования Цикл
			ПолучитьЗапчастиИзДокументаОснования(СтрокаОснования.ДокументОснование, СписокИДРемонтов, табЗапчастей);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеДляЗаполненияЗапчастейПоНормам(ТаблицаРемонтов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаРемонтов.РемонтыОборудования_ID,
	|	ТаблицаРемонтов.ОбъектРемонта КАК ОбъектРемонта,
	|	ТаблицаРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот
	|ПОМЕСТИТЬ ТаблицаРемонтов
	|ИЗ
	|	&ТаблицаРемонтов КАК ТаблицаРемонтов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	ВидРемонтныхРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРемонтов.РемонтыОборудования_ID,
	|	ТаблицаРемонтов.ОбъектРемонта,
	|	ТаблицаРемонтов.ВидРемонтныхРабот,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК ХарактеристикаНоменклатуры,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Количество,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК НоменклатураНовая,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмеренияНовая,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК ХарактеристикаНоменклатурыНовая,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК КоличествоНовое
	|ИЗ
	|	ТаблицаРемонтов КАК ТаблицаРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
	|		ПО ТаблицаРемонтов.ОбъектРемонта = торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта
	|			И ТаблицаРемонтов.ВидРемонтныхРабот = торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта
	|ГДЕ
	|	торо_НормыЗапчастейНаОбъектыРемонта.Приоритет
	|	И торо_НормыЗапчастейНаОбъектыРемонта.Количество <> 0";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеФункцииДляРасчетаППР

Процедура ВывестиЧастьГрафикаПервыйВариант (ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать)
	ТочкаВРР = ТочкаОРР.Точки.Добавить();
	ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
	
	Если ИспользоватьРасшифровку Тогда
		ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
	КонецЕсли;
	
	Если ЭтоКорректировка Тогда
		// корректировка
		ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
		ТочкаВРРСт.Текст = "План до корректировки";
		
		Если ИспользоватьРасшифровку Тогда
			ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
		КонецЕсли;
		//
	КонецЕсли;
	
	Выборка = ВыборкаПоВР.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Отменен И Не Выборка.Замещен Тогда
			Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.ДатаНач;
			Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
			Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
			Интервал.Цвет = ?(Выборка.Отменен, СтруктураЦветов.ЦветОтмененного,?(Выборка.ДатаНач < ТекДата,  СтруктураЦветов.ЦветВыполненого,  СтруктураЦветов.ЦветЗапланированного));
		КонецЕсли;
		
		Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
		Значение.Редактирование = Редактировать;
		Если ИспользоватьРасшифровку Тогда
			Значение.Расшифровка = Выборка.ВидРемонтныхРабот;
		КонецЕсли;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = Выборка.ДатаНач;
		Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
		Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Интервал.Цвет   = ?(Выборка.ДатаНач < ТекДата,  СтруктураЦветов.ЦветВыполненого, ?(Выборка.Отменен,  СтруктураЦветов.ЦветОтмененного, ?(Выборка.Замещен, СтруктураЦветов.ЦветЗамещенного, СтруктураЦветов.ЦветЗапланированного)));
		
		Если ИспользоватьРасшифровку Тогда
			МассивРасшифровка = Новый Массив;
			МассивРасшифровка.Добавить(ВыборкаПоОР.ОбъектРемонтныхРабот);
			МассивРасшифровка.Добавить(ВыборкаПоВР.ВидРемонтныхРабот);
			МассивРасшифровка.Добавить(Выборка.ДатаНач);
			МассивРасшифровка.Добавить(Выборка.ДоступенДляРедактирования);
			МассивРасшифровка.Добавить(Выборка.ДокументППР);
			
			Интервал.Расшифровка = МассивРасшифровка; 
		КонецЕсли;
		
		Если ЭтоКорректировка И Не Выборка.Отменен Тогда
			Если ЗначениеЗаполнено(Выборка.ДатаНачСт) И ЗначениеЗаполнено(Выборка.ДатаКонСт) Тогда
				// корректировка
				Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
				ИнтервалСтарый = Значение.Добавить();
				ИнтервалСтарый.Начало = Выборка.ДатаНачСт;
				ИнтервалСтарый.Конец  = КонецДня(?(Выборка.ДатаКонСт > Выборка.ДатаНачСт, Выборка.ДатаКонСт, Выборка.ДатаНачСт + 3600));
				ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        // БледноМиндальный
				ИнтервалСтарый.Цвет   = ?(Выборка.ЗамещенСт, СтруктураЦветов.ЦветЗамещенногоИсходного,  СтруктураЦветов.ЦветИсходного);
				
				Если Не Выборка.Отменен Тогда
					Связь = ИнтервалСтарый.Добавить(Интервал);
					Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
				КонецЕсли;
			КонецЕсли;
			//
		КонецЕсли;
		
		Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + "Начата работа по внутренним заказам.";
		ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + "Введены внутренние заказы.";
		КонецЕсли;
		
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура ВывестиЧастьГрафикаВторойВариант (ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать)
	ТочкаВРР = ТочкаОРР.Точки.Добавить();
	ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
	Если ИспользоватьРасшифровку Тогда
		ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
	КонецЕсли;
	
	Если ЭтоКорректировка Тогда
		// корректировка
		ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
		ТочкаВРРСт.Текст = "План до корректировки";
		Если ИспользоватьРасшифровку Тогда
			ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
		КонецЕсли;
		//
	КонецЕсли;
	
	Выборка = ВыборкаПоВР.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Отменен И Не Выборка.Замещен Тогда
			
			Значение = Диаграмма.ПолучитьЗначение(ТочкаПоложение, СерияРемонт);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.ДатаНач;
			Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
			Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
			Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, СтруктураЦветов.ЦветЗапланированного);
			
			Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.ДатаНач;
			Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
			Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
			Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, СтруктураЦветов.ЦветЗапланированного);
			
		КонецЕсли;
		
		Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
		Значение.Редактирование = Редактировать;
		Если ИспользоватьРасшифровку Тогда
			Значение.Расшифровка = Выборка.ВидРемонтныхРабот;
		КонецЕсли;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = Выборка.ДатаНач;
		Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
		Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Интервал.Цвет   = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, ?(Выборка.Отменен, СтруктураЦветов.ЦветОтмененного, ?(Выборка.Замещен,СтруктураЦветов.ЦветЗамещенного,СтруктураЦветов.ЦветЗапланированного)));
		
		Если ИспользоватьРасшифровку Тогда
			МассивРасшифровка = Новый Массив;
			МассивРасшифровка.Добавить(ВыборкаПоОР.ОбъектРемонтныхРабот);
			МассивРасшифровка.Добавить(ВыборкаПоВР.ВидРемонтныхРабот);
			МассивРасшифровка.Добавить(Выборка.ДатаНач);
			МассивРасшифровка.Добавить(Выборка.ДоступенДляРедактирования);
			
			Интервал.Расшифровка = МассивРасшифровка; 
		КонецЕсли;
		
		
		Если ЭтоКорректировка И Не Выборка.Отменен Тогда
			Если ЗначениеЗаполнено(Выборка.ДатаНачСт) И ЗначениеЗаполнено(Выборка.ДатаКонСт) Тогда
				// корректировка
				Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
				ИнтервалСтарый = Значение.Добавить();
				ИнтервалСтарый.Начало = Выборка.ДатаНачСт;
				ИнтервалСтарый.Конец  = КонецДня(?(Выборка.ДатаКонСт > Выборка.ДатаНачСт, Выборка.ДатаКонСт, Выборка.ДатаНачСт + 3600));
				ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        
				ИнтервалСтарый.Цвет   = ?(Выборка.ЗамещенСт, СтруктураЦветов.ЦветЗамещенногоИсходного, СтруктураЦветов.ЦветИсходного);
				
				Если Не Выборка.Отменен Тогда
					Связь = ИнтервалСтарый.Добавить(Интервал);
					Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
				КонецЕсли;
			КонецЕсли;
			//
		КонецЕсли;
		
		
		Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + "Начата работа по внутренним заказам.";
		ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + "Введены внутренние заказы.";
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ВывестиЧастьГрафикаТретийВариант (ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать)
	ТочкаВРР = ТочкаОРР.Точки.Добавить();
	ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
	Если ИспользоватьРасшифровку Тогда
		ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
	КонецЕсли;
	
	Если ЭтоКорректировка Тогда
		// корректировка
		ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
		ТочкаВРРСт.Текст = "План до корректировки";
		Если ИспользоватьРасшифровку Тогда
			ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
		КонецЕсли;
		//
	КонецЕсли;
	
	Выборка = ВыборкаПоВР.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не Выборка.Отменен И Не Выборка.Замещен Тогда
			
			Значение = Диаграмма.ПолучитьЗначение(ТочкаПоложение, СерияРемонт);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.ДатаНач;
			Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
			Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
			Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, СтруктураЦветов.ЦветЗапланированного);
			
			Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.ДатаНач;
			Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
			Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
			Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, СтруктураЦветов.ЦветЗапланированного);
		КонецЕсли;
		
		Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
		Значение.Редактирование = Редактировать;
		Если ИспользоватьРасшифровку Тогда
			Значение.Расшифровка = Выборка.ВидРемонтныхРабот;
		КонецЕсли;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = Выборка.ДатаНач;
		Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
		Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Интервал.Цвет   = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, ?(Выборка.Отменен, СтруктураЦветов.ЦветОтмененного, ?(Выборка.Замещен,СтруктураЦветов.ЦветЗамещенного,СтруктураЦветов.ЦветЗапланированного)));
		
		Если ИспользоватьРасшифровку Тогда
			МассивРасшифровка = Новый Массив;
			МассивРасшифровка.Добавить(ВыборкаПоОР.ОбъектРемонтныхРабот);
			МассивРасшифровка.Добавить(ВыборкаПоВР.ВидРемонтныхРабот);
			МассивРасшифровка.Добавить(Выборка.ДатаНач);
			МассивРасшифровка.Добавить(Выборка.ДоступенДляРедактирования);
			
			Интервал.Расшифровка = МассивРасшифровка; 
		КонецЕсли;
		
		Если ЭтоКорректировка И Не Выборка.Отменен Тогда
			Если ЗначениеЗаполнено(Выборка.ДатаНачСт) И ЗначениеЗаполнено(Выборка.ДатаКонСт) Тогда
				// корректировка
				Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
				ИнтервалСтарый = Значение.Добавить();
				ИнтервалСтарый.Начало = Выборка.ДатаНачСт;
				ИнтервалСтарый.Конец  = КонецДня(?(Выборка.ДатаКонСт > Выборка.ДатаНачСт, Выборка.ДатаКонСт, Выборка.ДатаНачСт + 3600));
				ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        // БледноМиндальный
				ИнтервалСтарый.Цвет   = ?(Выборка.ЗамещенСт,СтруктураЦветов.ЦветЗамещенногоИсходного, СтруктураЦветов.ЦветИсходного);
				
				Если Не Выборка.Отменен Тогда
					Связь = ИнтервалСтарый.Добавить(Интервал);
					Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
				КонецЕсли;
			КонецЕсли;
			//
		КонецЕсли;
		
		
		Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + "Начата работа по внутренним заказам.";
		ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + "Введены внутренние заказы.";
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ВывестиЧастьГрафикаЧетвертыйВариант(ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, ТочкаВРРСт, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать)
	
	Если Не ВыборкаПоВР.Отменен И Не ВыборкаПоВР.Замещен Тогда
		
		Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
		Значение.Редактирование = Редактировать;
		Интервал = Значение.Добавить();
		Интервал.Начало = ВыборкаПоВР.ДатаНач;
		Интервал.Конец  = КонецДня(?(ВыборкаПоВР.ДатаКон > ВыборкаПоВР.ДатаНач, ВыборкаПоВР.ДатаКон, ВыборкаПоВР.ДатаНач + 3600));
		Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Интервал.Цвет = ?(ВыборкаПоВР.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, СтруктураЦветов.ЦветЗапланированного);
		МассивРасшифровка = Новый Массив;
		МассивРасшифровка.Добавить(ВыборкаПоВР.ДоступенДляРедактирования);
		МассивРасшифровка.Добавить(ВыборкаПоВР.ДокументППР);
		Интервал.Расшифровка = МассивРасшифровка;
	КонецЕсли;
	
	Значение = Диаграмма.ПолучитьЗначение(ТочкаПоложение, СерияРемонт);
	Интервал = Значение.Добавить();
	Значение.Редактирование = Редактировать;
	Интервал.Начало = ВыборкаПоВР.ДатаНач;
	Интервал.Конец  = КонецДня(?(ВыборкаПоВР.ДатаКон > ВыборкаПоВР.ДатаНач, ВыборкаПоВР.ДатаКон, ВыборкаПоВР.ДатаНач + 3600));
	Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
	Интервал.Цвет = ?(ВыборкаПоВР.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, ?(ВыборкаПоВР.Отменен, СтруктураЦветов.ЦветОтмененного, ?(ВыборкаПоВР.Замещен,СтруктураЦветов.ЦветЗамещенного,СтруктураЦветов.ЦветЗапланированного)));
	
	Если ЭтоКорректировка И Не ВыборкаПоВР.Отменен Тогда
		Если ЗначениеЗаполнено(ВыборкаПоВР.ДатаНачСт) И ЗначениеЗаполнено(ВыборкаПоВР.ДатаКонСт) Тогда
			// корректировка
			Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
			ИнтервалСтарый = Значение.Добавить();
			ИнтервалСтарый.Начало = ВыборкаПоВР.ДатаНачСт;
			ИнтервалСтарый.Конец  = КонецДня(?(ВыборкаПоВР.ДатаКонСт > ВыборкаПоВР.ДатаНачСт, ВыборкаПоВР.ДатаКонСт, ВыборкаПоВР.ДатаНачСт + 3600));
			ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        // БледноМиндальный
			ИнтервалСтарый.Цвет   = ?(ВыборкаПоВР.ЗамещенСт,СтруктураЦветов.ЦветЗамещенногоИсходного, СтруктураЦветов.ЦветИсходного);
			
			Если Не ВыборкаПоВР.Отменен Тогда
				Связь = ИнтервалСтарый.Добавить(Интервал);
				Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
			КонецЕсли;
		КонецЕсли;
		//
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВывестиЧастьГрафикаПятыйВариант  (ВыборкаПоВР, ВыборкаПоОр, ТекДата, ТочкаОРР, ТочкаПоложение, СерияРемонт, Диаграмма, СтруктураЦветов, ИспользоватьРасшифровку, ЭтоКорректировка, Редактировать)
	ТочкаВРР = ТочкаОРР.Точки.Добавить();
	ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
	Если ИспользоватьРасшифровку Тогда
		ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
	КонецЕсли;
	
	Если ЭтоКорректировка Тогда
		// корректировка
		ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
		ТочкаВРРСт.Текст = "План до корректировки";
		Если ИспользоватьРасшифровку Тогда
			ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
		КонецЕсли;
		//
	КонецЕсли;
	
	
	Выборка = ВыборкаПоВР.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Отменен И Не Выборка.Замещен Тогда
			
			Значение = Диаграмма.ПолучитьЗначение(ТочкаПоложение, СерияРемонт);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.ДатаНач;
			Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
			Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
			Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, СтруктураЦветов.ЦветЗапланированного);
			
			Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.ДатаНач;
			Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
			Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
			Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, СтруктураЦветов.ЦветЗапланированного);
		КонецЕсли;	
		
		Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
		Значение.Редактирование = Редактировать;
		Если ИспользоватьРасшифровку Тогда
			Значение.Расшифровка = Выборка.ВидРемонтныхРабот;
		КонецЕсли;
		
		Интервал = Значение.Добавить();
		Интервал.Начало = Выборка.ДатаНач;
		Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
		Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Интервал.Цвет   = ?(Выборка.ДатаНач < ТекДата, СтруктураЦветов.ЦветВыполненого, ?(Выборка.Отменен, СтруктураЦветов.ЦветОтмененного, ?(Выборка.Замещен,СтруктураЦветов.ЦветЗамещенного,СтруктураЦветов.ЦветЗапланированного)));
		
		Если ИспользоватьРасшифровку Тогда
			МассивРасшифровка = Новый Массив;
			МассивРасшифровка.Добавить(ВыборкаПоОР.ОбъектРемонтныхРабот);
			МассивРасшифровка.Добавить(ВыборкаПоВР.ВидРемонтныхРабот);
			МассивРасшифровка.Добавить(Выборка.ДатаНач);
			МассивРасшифровка.Добавить(Выборка.ДоступенДляРедактирования);
			
			Интервал.Расшифровка = МассивРасшифровка; 
		КонецЕсли;
		
		Если ЭтоКорректировка И Не Выборка.Отменен Тогда
			Если ЗначениеЗаполнено(Выборка.ДатаНачСт) И ЗначениеЗаполнено(Выборка.ДатаКонСт) Тогда
				// корректировка
				Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
				ИнтервалСтарый = Значение.Добавить();
				ИнтервалСтарый.Начало = Выборка.ДатаНачСт;
				ИнтервалСтарый.Конец  = КонецДня(?(Выборка.ДатаКонСт > Выборка.ДатаНачСт, Выборка.ДатаКонСт, Выборка.ДатаНачСт + 3600));
				ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        // БледноМиндальный
				ИнтервалСтарый.Цвет   = ?(Выборка.ЗамещенСт,СтруктураЦветов.ЦветЗамещенногоИсходного, СтруктураЦветов.ЦветИсходного);
				
				Если Не Выборка.Отменен Тогда
					Связь = ИнтервалСтарый.Добавить(Интервал);
					Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
				КонецЕсли;
			КонецЕсли;
			//
		КонецЕсли;
		
		
		Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + "Начата работа по внутренним заказам.";
		ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
			Интервал.Текст = Интервал.Текст + Символы.ПС + "Введены внутренние заказы.";
		КонецЕсли;
		
	КонецЦикла;  
	
КонецПроцедуры

// Функция дополняет план ремонтов данными по ВЗ
//
Функция ДополнитьПланРемонтовДаннымиПоВЗ(ПланРемонтов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт
	|ПОМЕСТИТЬ ТабДокумента
	|ИЗ
	|	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДокумента.ОбъектРемонтныхРабот,
	|	ТабДокумента.ВидРемонтныхРабот,
	|	ТабДокумента.ДокументППР,
	|	ТабДокумента.ID,
	|	торо_ИнтеграцияДокументов.ДокументУПП КАК ВЗ,
	|	ТабДокумента.ДатаКон,
	|	ТабДокумента.ДатаНач,
	|	ТабДокумента.ДатаКонСт,
	|	ТабДокумента.ДатаНачСт,
	|	ТабДокумента.Отменен,
	|	ТабДокумента.Замещен,
	|	ТабДокумента.ЗамещенСт
	|ПОМЕСТИТЬ ТабВЗ
	|ИЗ
	|	ТабДокумента КАК ТабДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|		ПО ТабДокумента.ID = торо_ИнтеграцияДокументов.ID
	|			И (торо_ИнтеграцияДокументов.ДокументУПП ССЫЛКА Документ.ВнутреннийЗаказ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабДокумента.ОбъектРемонтныхРабот,
	|	ТабДокумента.ВидРемонтныхРабот,
	|	ТабДокумента.ДокументППР,
	|	ТабДокумента.ID,
	|	торо_ИнтеграцияДокументов.ДокументУПП,
	|	ТабДокумента.ДатаКон,
	|	ТабДокумента.ДатаНач,
	|	ТабДокумента.ДатаКонСт,
	|	ТабДокумента.ДатаНачСт,
	|	ТабДокумента.Отменен,
	|	ТабДокумента.Замещен,
	|	ТабДокумента.ЗамещенСт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВЗ.ОбъектРемонтныхРабот,
	|	ТабВЗ.ВидРемонтныхРабот,
	|	ТабВЗ.ДокументППР,
	|	ТабВЗ.ID,
	|	ТабВЗ.ВЗ,
	|	ТабВЗ.ДатаКон,
	|	ТабВЗ.ДатаНач,
	|	ВнутренниеЗаказы.Регистратор,
	|	ТабВЗ.ДатаКонСт,
	|	ТабВЗ.ДатаНачСт,
	|	ТабВЗ.Отменен,
	|	ТабВЗ.Замещен,
	|	ТабВЗ.ЗамещенСт
	|ПОМЕСТИТЬ ИтогТаб
	|ИЗ
	|	ТабВЗ КАК ТабВЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВнутренниеЗаказы КАК ВнутренниеЗаказы
	|		ПО ТабВЗ.ВЗ = ВнутренниеЗаказы.ВнутреннийЗаказ
	|			И (ВнутренниеЗаказы.Регистратор <> ВнутренниеЗаказы.ВнутреннийЗаказ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабВЗ.ОбъектРемонтныхРабот,
	|	ТабВЗ.ВидРемонтныхРабот,
	|	ТабВЗ.ДокументППР,
	|	ТабВЗ.ID,
	|	ТабВЗ.ВЗ,
	|	ТабВЗ.ДатаКон,
	|	ТабВЗ.ДатаНач,
	|	РазмещениеЗаказовПокупателей.Регистратор,
	|	ТабВЗ.ДатаКонСт,
	|	ТабВЗ.ДатаНачСт,
	|	ТабВЗ.Отменен,
	|	ТабВЗ.Замещен,
	|	ТабВЗ.ЗамещенСт
	|ИЗ
	|	ТабВЗ КАК ТабВЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаказовПокупателей КАК РазмещениеЗаказовПокупателей
	|		ПО (РазмещениеЗаказовПокупателей.Регистратор <> РазмещениеЗаказовПокупателей.ЗаказПокупателя)
	|			И (РазмещениеЗаказовПокупателей.ЗаказПокупателя = ТабВЗ.ВЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтогТаб.ОбъектРемонтныхРабот,
	|	ИтогТаб.ВидРемонтныхРабот,
	|	ИтогТаб.ДокументППР,
	|	ИтогТаб.ID,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИтогТаб.ВЗ) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьВЗ,
	|	ИтогТаб.ДатаКон,
	|	ИтогТаб.ДатаНач,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ИтогТаб.Регистратор) = 0
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДвиженияПоВЗ,
	|	ИтогТаб.ДатаКонСт,
	|	ИтогТаб.ДатаНачСт,
	|	ИтогТаб.Отменен,
	|	ИтогТаб.Замещен,
	|	ИтогТаб.ЗамещенСт
	|ИЗ
	|	ИтогТаб КАК ИтогТаб
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтогТаб.ОбъектРемонтныхРабот,
	|	ИтогТаб.ВидРемонтныхРабот,
	|	ИтогТаб.ДокументППР,
	|	ИтогТаб.ID,
	|	ИтогТаб.ДатаКон,
	|	ИтогТаб.ДатаНач,
	|	ИтогТаб.ДатаКонСт,
	|	ИтогТаб.ДатаНачСт,
	|	ИтогТаб.Отменен,
	|	ИтогТаб.Замещен,
	|	ИтогТаб.ЗамещенСт";
	Запрос.УстановитьПараметр("ПланРемонтов",ПланРемонтов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции
#КонецОбласти

#Область РаботаСДеревомРемонтныхРабот
// Функция обрабатывает выбор ремонта
Функция ОбработкаВыбораРемонтаМодиф(РемонтныеРаботы, ВыбранноеЗначение, ДокументОбъект, ТЧ_РемонтовОборудования,ТЧ_РемонтныхРабот,ТЧ_ДокументыОснования,ТекущиеЗначения,ВыходныеПараметры=Неопределено, ТЧ_Исполнители = Неопределено, ТЧ_Подрядчики = Неопределено) Экспорт
	
	ВыходныеПараметры = Новый Структура;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		Если ТекущиеЗначения.Свойство("ТекущийРемонт_ID") И ТекущиеЗначения.ТекущийРемонт_ID <> "" Тогда
			РемонтыОборудования_ID = ТекущиеЗначения.ТекущийРемонт_ID;
		Иначе
			Возврат Строка(НСтр("ru = 'Не выбран ремонт оборудования для добавления тех. операции!'"));
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект.ссылка) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот") Тогда
			ОперацияДобавлена = РемонтныеРаботы.НайтиСтроки(Новый Структура("Предписание_ID, РемонтнаяРабота", РемонтыОборудования_ID, ВыбранноеЗначение)).Количество() > 0;
		Иначе
			ОперацияДобавлена = РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение,ТекущиеЗначения.СтрокаРодитель_ID)).Количество() > 0;
		КонецЕсли;
		
		Если ОперацияДобавлена Тогда
			Возврат Строка(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Операция уже добавлена: %1!'"),ВыбранноеЗначение.Наименование)); 
		КонецЕсли;
		
		Если РемонтныеРаботы.Количество() > 0 Тогда
			Если Не ЗначениеЗаполнено(РемонтныеРаботы[0].ID) Тогда
				РемонтныеРаботы.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			торо_ЗаявкаНаРемонт.ЗаполнитьТиповыеЗатратыТехнологическойОперации(РемонтныеРаботы, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение,РемонтыОборудования_ID);
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		Если ТекущиеЗначения.Свойство("ТекущийРемонт_ID") И ТекущиеЗначения.ТекущийРемонт_ID <> "" Тогда
			РемонтыОборудования_ID = ТекущиеЗначения.ТекущийРемонт_ID;
		Иначе
			Возврат Строка(НСтр("ru = 'Не выбран ремонт оборудования, для добавления тех. карты!'"));
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот") Тогда
			ОперацияДобавлена = РемонтныеРаботы.НайтиСтроки(Новый Структура("Предписание_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение, ТекущиеЗначения.СтрокаРодитель_ID)).Количество() > 0;
		Иначе
			ОперацияДобавлена = РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение,ТекущиеЗначения.СтрокаРодитель_ID)).Количество() > 0;
		КонецЕсли;
		
		Если ОперацияДобавлена Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Технологическая карта уже добавлена: %1!'"),ВыбранноеЗначение.Наименование); 
		КонецЕсли;
		
		Если РемонтныеРаботы.Количество() > 0 Тогда
			Если Не ЗначениеЗаполнено(РемонтныеРаботы[0].ID) Тогда
				РемонтныеРаботы.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если РемонтныеРаботы.Количество() > 0 Тогда
			НовСтрокаРР = ?(ЗначениеЗаполнено(РемонтныеРаботы[0].ID),РемонтныеРаботы.Добавить(), РемонтныеРаботы[0]);
		Иначе
			НовСтрокаРР = РемонтныеРаботы.Добавить();
		КонецЕсли;
		
		НовСтрокаРР.Родитель_ID            = ТекущиеЗначения.СтрокаРодитель_ID;
		НовСтрокаРР.РемонтыОборудования_ID = РемонтыОборудования_ID;	
		НовСтрокаРР.ID                     = Новый УникальныйИдентификатор;
		НовСтрокаРР.РемонтнаяРабота        = ВыбранноеЗначение;
		НовСтрокаРР.Картинка               = 0;	
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			НовСтрокаРР.Количество = 1;
		КонецЕсли;
		
		ДатаНачала = ТекущиеЗначения.ДатаНачалаРемонта;
		ТехКарта = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьПоследнее(Новый Граница(ДатаНачала, ВидГраницы.Включая),Новый Структура("ИдентификаторТехКарты", ВыбранноеЗначение));
		
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("ID_Родителя"            , НовСтрокаРР.ID);
			СтруктураДанных.Вставить("РемонтыОборудования_ID" , РемонтыОборудования_ID);
			СтруктураДанных.Вставить("РемонтнаяРабота"        , ТехКарта.ТехКарта);
			СтруктураДанных.Вставить("ДатаРемонта"            , ДатаНачала);
			
			торо_ЗаполнениеДокументов.ДополнитьСписокОперацийДокументаИЗатраты(СтруктураДанных, ДокументОбъект, Ложь);
			
		КонецЕсли;	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда	
		Если ВыбранноеЗначение.Свойство("СтрокаРемонтовОборудования") Тогда
			
			СтрокаРемонтовОборудования = ВыбранноеЗначение.СтрокаРемонтовОборудования;
			
			Если ЗначениеЗаполнено(СтрокаРемонтовОборудования.ОбъектРемонта)
				И ЗначениеЗаполнено(СтрокаРемонтовОборудования.ID) Тогда
				
				ДокОснование = ВыбранноеЗначение.ДокументОснование;
				
				ДокументыОснования = ДокументОбъект[ТЧ_ДокументыОснования];
				
				Если ДокументыОснования.НайтиСтроки(Новый Структура ("ДокументОснование", ДокОснование)).Количество() = 0 Тогда
					СтрокаДо = ДокументыОснования.Добавить();
					СтрокаДо.ДокументОснование = ДокОснование;
				КонецЕсли;
				
				Если ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
					ИДДефекта = СтрокаРемонтовОборудования.ID;
				КонецЕсли;
				
				// Ремонты оборудования
				ДобавленОР = Ложь;
				
				Ремонтыоборудования = ДокументОбъект[ТЧ_РемонтовОборудования];
				
				МассивСтрок = Ремонтыоборудования.НайтиСтроки(Новый Структура("ID", СтрокаРемонтовОборудования.ID));
				
				Если МассивСтрок.Количество() > 0 Тогда
					СтрокаРО = МассивСтрок[0];
				Иначе
					СтрокаРО = Неопределено;
				КонецЕсли;
				
				Если СтрокаРО = Неопределено Тогда
					
					Если Ремонтыоборудования.Количество() > 0 Тогда
						СтрокаРО = Ремонтыоборудования.Получить(0);
					Иначе
						СтрокаРО = Ремонтыоборудования.Добавить();
					КонецЕсли;
					
					Если ПустаяСтрока(СтрокаРО.ID) Тогда
						
						ЗаполнитьЗначенияСвойств(СтрокаРО, СтрокаРемонтовОборудования);
						
					Иначе
						СтрокаРО = Ремонтыоборудования.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаРО, СтрокаРемонтовОборудования);
						
					КонецЕсли;
					
					Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии") И (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт") 
						ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот")
						ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")) Тогда
						СтрокаРО.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(СтрокаРО.ОбъектРемонта, СтрокаРО.ДатаНачала, СтрокаРО.ДатаОкончания);
					КонецЕсли;
						
					Если Не ЗначениеЗаполнено(СтрокаРО.ДатаНачала) Тогда
						Попытка
							СтрокаРО.ДатаНачала = СтрокаРемонтовОборудования.ПлановаяДата;
						Исключение
						КонецПопытки;
					КонецЕсли;
					
					Если СтрокаРемонтовОборудования.Свойство("Предписания") 
						Или (ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") И Не ЗначениеЗаполнено(СтрокаРемонтовОборудования.ВидРемонтныхРабот)) Тогда
						СтрокаРО.ЗакрываетПредписание = Истина;
						Если Не ЗначениеЗаполнено(СтрокаРО.ВидРемонтныхРабот) Тогда
							СтрокаРО.ВидРемонтныхРабот = Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
						КонецЕсли;
					КонецЕсли;
					
					СтрокаРО.ДокументИсточник = ВыбранноеЗначение.ДокументОснование;
					
					Если ТипЗнч(РемонтныеРаботы) = Тип("ДокументТабличнаяЧасть.торо_ЗаявкаНаРемонт.РемонтныеРаботы") Тогда
						СтрокаРО.ИДДефекта = ИДДефекта;
					Иначе
						Если СтрокаРО.Свойство("ИДДефекта") Тогда
							СтрокаРО.ИДДефекта = ИДДефекта;
						КонецЕсли;
					КонецЕсли; 
					
					ДобавленОР = Истина;
					
					Если ВыбранноеЗначение.Свойство("НаправлениеНаУстранение") 
						И ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")
						Тогда
						СтрокаРО.ОписаниеРемонта = ВыбранноеЗначение.НаправлениеНаУстранение;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТипЗнч(ДокументОбъект.ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") И ДобавленОР Тогда
					СтруктураДляЗапчастей = Новый Структура;
					СтруктураДляЗапчастей.Вставить("ОбъектРемонта");
					СтруктураДляЗапчастей.Вставить("ВидРемонтныхРабот");
					СтруктураДляЗапчастей.Вставить("ID");
					
					ЗаполнитьЗначенияСвойств(СтруктураДляЗапчастей,СтрокаРО);
					
					ЗаполнитьЗапчастиРемонтнойРаботыВЗаявке(ДокументОбъект, СтруктураДляЗапчастей);
				КонецЕсли;
				
				// Получим нормативы
				СтруктураНормативов = торо_Ремонты.ПолучитьСтруктуруНормативовРемонта(СтрокаРО.ОбъектРемонта, СтрокаРО.ВидРемонтныхРабот);
				Если СтруктураНормативов = Неопределено Тогда
					НормативныйРемонт = Неопределено;
				Иначе
					НормативныйРемонт = СтруктураНормативов.НормативныйРемонт;	
				КонецЕсли;
				
				ПерезаписыватьРодитель_ID = Ложь;
				
				Родитель_ID = "";
				
				// Выбрана строка ремонтных работ
				Если ВыбранноеЗначение.Свойство("СтрокаРемонтныхРабот") Тогда
					
					СтрокаРемонтныхРабот = ВыбранноеЗначение.СтрокаРемонтныхРабот;
					
					СтрокаОтсчета = СтрокаРемонтныхРабот;
					
					ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота",СтрокаОтсчета[0].РемонтыОборудования_ID, СтрокаОтсчета[0].РемонтнаяРабота);
					
					МассивНайденного = РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
					
					// Движение вверх по дереву
					Пока МассивНайденного.Количество() = 0 И Не СтрокаОтсчета[0].Родитель = Неопределено Цикл
						
						Если РемонтныеРаботы.Количество() > 0 Тогда
							НовСтрокаРР = ?(ЗначениеЗаполнено(РемонтныеРаботы[0].ID),РемонтныеРаботы.Добавить(), РемонтныеРаботы[0]);
						Иначе
							НовСтрокаРР = РемонтныеРаботы.Добавить();
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(НовСтрокаРР, СтрокаОтсчета[0]);
						
						Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
							НовСтрокаРР.Количество = 1;
						КонецЕсли;
						
						Если ПерезаписыватьРодитель_ID И Не ЗначениеЗаполнено(НовСтрокаРР.Родитель_ID) Тогда
							НовСтрокаРР.Родитель_ID = Родитель_ID;
						КонецЕсли;
						
						Если ТипЗнч(НовСтрокаРР.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
							НовСтрокаРР.Картинка = 2;
						Иначе
							НовСтрокаРР.Картинка = 0;
						КонецЕсли; 
						
						
						// Затраты
						Если ВыбранноеЗначение.Свойство("ДокументОснование") Тогда
							
							ДокОснование = ВыбранноеЗначение.ДокументОснование;
							
						КонецЕсли;
						
						СтрокаОтсчета = СтрокаОтсчета[0].Родитель;
						
						ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, ID",СтрокаОтсчета.РемонтыОборудования_ID, СтрокаОтсчета.ID);
						
						МассивНайденного = РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
						
					КонецЦикла;
					
					// Выбрана строка ремонтов оборудования
				ИначеЕсли ВыбранноеЗначение.Свойство("МассивСтрокРемонтныхРабот") Тогда  //при подборе всего ремонта из формы подбора
					
					МассивСтрокРемонтныхРабот = ВыбранноеЗначение.МассивСтрокРемонтныхРабот;
					Для Каждого ЭлементМассива Из МассивСтрокРемонтныхРабот Цикл
						
						ПараметрыПоиска = Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, Родитель_ID",ЭлементМассива.РемонтыОборудования_ID, ЭлементМассива.РемонтнаяРабота, ЭлементМассива.Родитель_ID);
						
						МассивНайденного = ДокументОбъект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
						Если МассивНайденного.Количество() = 0 Тогда
							
							НовСтрокаРР = ДокументОбъект.РемонтныеРаботы.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаРР, ЭлементМассива); 
							Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") И НовСтрокаРР.Количество = 0 Тогда
								НовСтрокаРР.Количество = 1;
							КонецЕсли;
							
							Если ПерезаписыватьРодитель_ID И Не ЗначениеЗаполнено(НовСтрокаРР.Родитель_ID) Тогда
								НовСтрокаРР.Родитель_ID = Родитель_ID;
							КонецЕсли;
							
							Если ТипЗнч(НовСтрокаРР.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
								НовСтрокаРР.Картинка = 2;
							Иначе
								НовСтрокаРР.Картинка = 0;
							КонецЕсли; 
							
							// Затраты
							Если ВыбранноеЗначение.Свойство("НаправлениеНаУстранение") Тогда
								
							КонецЕсли;
							
							Если ВыбранноеЗначение.Свойство("ДокументОснование") Тогда
								
								ДокОснование = ВыбранноеЗначение.ДокументОснование;
								Если НЕ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
									СтарыйID = НовСтрокаРР.ID;
									Если ЭлементМассива.Свойство("ТехКартаРемонта") И ЗначениеЗаполнено(ЭлементМассива.ТехКартаРемонта) Тогда
										ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.ТехКартаРемонта, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала);
									ИначеЕсли ЭлементМассива.Свойство("РемонтнаяРабота") Тогда
										Если ТипЗнч(ЭлементМассива.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
											Если НЕ ЗначениеЗаполнено(ЭлементМассива.Родитель_ID) Тогда
												ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.РемонтнаяРабота, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала);
											КонецЕсли;
										Иначе
											ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.РемонтнаяРабота, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала);
										КонецЕсли;
									КонецЕсли;											
									Если СтарыйID <> НовСтрокаРР.ID Тогда
										Для Каждого СтрокаМасс Из МассивСтрокРемонтныхРабот Цикл
											Если СтрокаМасс.Родитель_ID = СтарыйID Тогда
												СтрокаМасс.Родитель_ID = НовСтрокаРР.ID
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;
									
								Иначе	
								   СтарыйID = НовСтрокаРР.ID;
									Если ЭлементМассива.Свойство("ТехКартаРемонта") И ЗначениеЗаполнено(ЭлементМассива.ТехКартаРемонта) Тогда
										ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.ТехКартаРемонта, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала);
									ИначеЕсли ЭлементМассива.Свойство("РемонтнаяРабота") Тогда
										ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, ЭлементМассива.РемонтнаяРабота, ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала);
									КонецЕсли;											
									Если СтарыйID <> НовСтрокаРР.ID Тогда
										Для Каждого СтрокаМасс Из МассивСтрокРемонтныхРабот Цикл
											Если СтрокаМасс.Родитель_ID = СтарыйID Тогда
												СтрокаМасс.Родитель_ID = НовСтрокаРР.ID
											КонецЕсли;
										КонецЦикла;
									КонецЕсли;

								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				Иначе
					Если Не НормативныйРемонт = Неопределено Тогда
						МассивРемонтныхРаботНормативы = НормативныйРемонт.СписокОпераций;
						Для Каждого РемонтнаяРабота Из МассивРемонтныхРаботНормативы Цикл
							НовСтрокаРР = РемонтныеРаботы.Добавить();
							НовСтрокаРР.Родитель_ID 			= Родитель_ID;
							НовСтрокаРР.РемонтыОборудования_ID 	= СтрокаРемонтовОборудования.ID;
							НовСтрокаРР.РемонтнаяРабота 		= РемонтнаяРабота.Операция;
							НовСтрокаРР.ID 						= РемонтнаяРабота.ID;
							
							Если ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
								НовСтрокаРР.Количество 			= 1;
							КонецЕсли;
							
							ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ДокументОбъект, НовСтрокаРР, ДокОснование, НормативныйРемонт,СтрокаРемонтовОборудования.ДатаНачала);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
		ВыходныеПараметры.Вставить("ДобавленОР",ДобавленОР);
		
		СтрСтрокаРО = Новый Структура("ID, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, ДокументИсточник, ОбъектРемонта",
		СтрокаРО.ID, СтрокаРО.ВидРемонтныхРабот, СтрокаРО.ДатаНачала, СтрокаРО.ДатаОкончания, СтрокаРО.ДокументИсточник, СтрокаРО.ОбъектРемонта);
		Если ТипЗнч(ДокументОбъект) = тип("ДокументОбъект.торо_ЗаявкаНаРемонт") Тогда
			СтрСтрокаРО.Вставить("ОписаниеРемонта", СтрокаРО.ОписаниеРемонта);
		КонецЕсли;
		Если ТипЗнч(РемонтныеРаботы) = Тип("ДокументТабличнаяЧасть.торо_ЗаявкаНаРемонт.РемонтныеРаботы") Тогда
		    Свойство = Истина;
		Иначе
			Свойство = СтрокаРО.Свойство("ИДДефекта");
		КонецЕсли; 
		Если НЕ ТипЗнч(ДокументОбъект) = тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") И Свойство Тогда
			СтрСтрокаРО.Вставить("ЗакрываетПредписание", СтрокаРО.ЗакрываетПредписание);
			СтрСтрокаРО.Вставить("ИДДефекта", СтрокаРО.ИДДефекта);
		КонецЕсли;
		ВыходныеПараметры.Вставить("СтрокаРО",СтрСтрокаРО); 
		
	КонецЕсли;
	
	//Возврат Новый Структура("ДокументОбъект", ДокументОбъект);
	Возврат ВыходныеПараметры;
	
КонецФункции

// Функция определяет индекс картинки дерева ремонтных работ.
//
Функция ИндексКартинкиДереваРемонтныхРабот(Работа) Экспорт
	
	Если ТипЗнч(Работа) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		Возврат ?(Работа.ПометкаУдаления, 1, 0);
	ИначеЕсли ТипЗнч(Работа) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		Если Работа.ЭтоГруппа Тогда Возврат 4;
		Иначе Возврат ?(Работа.ПометкаУдаления, 3, 2);
		КонецЕсли;	
	Иначе
		Возврат 4;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет заполнение дерева значений заданной структуры
// Параметры:
//  СтрокаДерева         - строка дерева значений; 
//  ТабличнаяЧастьДерева - табличная часть содержащая данные дерева значений; 
//  СтруктураДерева      - структура полей строки дерева.
//
Процедура СоздатьВетвьДереваПоТабличнойЧасти(Дерево, ТекущиеЗначения, ТабличнаяЧастьДерева, ЕстьКартинка = Истина) Экспорт
	
	СтрокиДерева = Дерево.Строки.НайтиСтроки(ТекущиеЗначения, Истина);
	
	Если СтрокиДерева.Количество() > 0 Тогда
		
		СтрокаДерева = СтрокиДерева[0];
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Родитель_ID", СтрокаДерева.ID);
		
		МассивСтрок = ТабличнаяЧастьДерева.НайтиСтроки(ПараметрыОтбора);
		Для Каждого Элемент Из МассивСтрок Цикл
			
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Элемент);
			
			Попытка
				НовСтрокаДерева.Выполнено = НовСтрокаДерева.ПроцентВыполненияРабот = 100;
			Исключение
			КонецПопытки;
			
			Если ЕстьКартинка Тогда  
				НовСтрокаДерева.Картинка = ИндексКартинкиДереваРемонтныхРабот(Элемент.РемонтнаяРабота);
			КонецЕсли;
			
			СтруктураТекущиеЗначения = Новый Структура("Родитель_ID, РемонтыОборудования_ID, ID", НовСтрокаДерева.Родитель_ID, НовСтрокаДерева.РемонтыОборудования_ID, НовСтрокаДерева.ID);
			
			СоздатьВетвьДереваПоТабличнойЧасти(Дерево, СтруктураТекущиеЗначения, ТабличнаяЧастьДерева, ЕстьКартинка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура рекурсивно добавляет строки табличной части данных дерева значений
// по строке дерева.
// Параметры:
//  СтрокаДерева         - строка дерева значений; 
//  ТабличнаяЧастьДерева - табличная часть содержащая данные дерева значений. 
//  СтруктураДерева      - структура полей строки дерева.
//
Процедура ЗаписатьДанныеПоСтрокеДереваВТабличнуюЧасть(СтрокаДерева, ТабличнаяЧастьДерева) Экспорт
	
	Для Каждого СтрокаРабот Из СтрокаДерева.Строки Цикл
		
		НовСтрока = ТабличнаяЧастьДерева.Добавить();
		
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаРабот);
		
		ЗаписатьДанныеПоСтрокеДереваВТабличнуюЧасть(СтрокаРабот, ТабличнаяЧастьДерева);
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает массив строк из табличной части с отбором по ID.
// Параметры:
//  ТабличнаяЧастьДерева - табличная часть в которой происходит поиск строк; 
//  ID_Поиска      	     - строка-идентификатор.
//
Функция НайтиСтрокиТабличнойЧастиДереваПоID(ТабличнаяЧастьДерева, ID_Поиска, РемонтыОборудования_ID = "",ИмяКолонкиВладелецID="",Родитель_ID = Неопределено) Экспорт 
	
	ПараметрыПоиска = Новый Структура;
	ПараметрыПоиска.Вставить("ID", ID_Поиска);
	Если ЗначениеЗаполнено(РемонтыОборудования_ID) Тогда
		ПараметрыПоиска.Вставить(?(ИмяКолонкиВладелецID = "","РемонтыОборудования_ID","Предписание_ID"), РемонтыОборудования_ID);
	КонецЕсли;
	
	если Родитель_ID <> Неопределено Тогда
		ПараметрыПоиска.Вставить("Родитель_ID", Родитель_ID);
	КонецЕсли;
	
	Возврат ТабличнаяЧастьДерева.НайтиСтроки(ПараметрыПоиска);
	
КонецФункции

// Процедура выполняет удаление строк табличных частей связанных с ветвью дерева.
// Параметры:
//  СтрокаДерева             - строка дерева значений; 
//  ДокументОбъект      	 - объект обрабатываемого документа.
//  СтруктураТабличныхЧастей - структура содержащая имена табличных частей в которых будут удаляться строки. 
//
Процедура УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева(Дерево, ТекущиеЗначения, ДокументОбъект, СтруктураТабличныхЧастей) Экспорт
	
	МассивСтрок = Дерево.Строки.НайтиСтроки(
	Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", 
	ТекущиеЗначения.ID, 
	ТекущиеЗначения.РемонтыОборудования_ID , 
	ТекущиеЗначения.Родитель_ID), Истина);
	
	УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева_Детально(Дерево, ТекущиеЗначения, ДокументОбъект, СтруктураТабличныхЧастей);
	
	Если МассивСтрок.Количество() Тогда
		МассивСтрок[0].Родитель.Строки.Удалить(МассивСтрок[0]);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева_Детально(Дерево, ТекущиеЗначения, ДокументОбъект, СтруктураТабличныхЧастей)
	
	ID_Поиска = ТекущиеЗначения.ID;
	
	Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
		
		ТабличнаяЧасть = ДокументОбъект[КлючЗначение.Ключ];
		СтрокиДляУдаления = НайтиСтрокиТабличнойЧастиДереваПоID(ТабличнаяЧасть, ID_Поиска, ТекущиеЗначения.РемонтыОборудования_ID);
		
		Для Каждого Элемент Из СтрокиДляУдаления Цикл
			
			ТабличнаяЧасть.Удалить(Элемент);
			
		КонецЦикла;
	КонецЦикла;	
	
	МассивСтрок = Дерево.Строки.НайтиСтроки(
	Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", 
	ТекущиеЗначения.ID, 
	ТекущиеЗначения.РемонтыОборудования_ID , 
	ТекущиеЗначения.Родитель_ID), Истина);
	
	Если МассивСтрок.Количество() Тогда
		СтрокиДерева = МассивСтрок[0].Строки;
		Для Каждого СтрДерева Из СтрокиДерева Цикл
			
			СтруктураДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID);
			УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева_Детально(Дерево, СтруктураДляПередачи, ДокументОбъект, СтруктураТабличныхЧастей);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура актуализирует номера строк дерева
Процедура АктуализироватьНомераСтрок(пДеревоРемонтныхРабот,пРемонтныеРаботы,РемонтыОборудованияID,ТекНомер,ЕстьРемонтОборудованияID=Истина) Экспорт
	Для Каждого СтрокаДерева Из пДеревоРемонтныхРабот.Строки Цикл
		ID_Поиска = СтрокаДерева.ID;
		
		СтрокиСID = торо_Ремонты.НайтиСтрокиТабличнойЧастиДереваПоID(пРемонтныеРаботы,ID_Поиска,РемонтыОборудованияID,?(ЕстьРемонтОборудованияID,"","Предписание_ID"),СтрокаДерева.Родитель_ID);
		Если СтрокиСID.Количество() = 0 Тогда
		Иначе
			СтрокаТЧ = СтрокиСID[0];
			Если ТекНомер - СтрокаТЧ.НомерСтроки <> 0 Тогда
				пРемонтныеРаботы.Сдвинуть(СтрокаТЧ, ?(ТекНомер > пРемонтныеРаботы.количество(),пРемонтныеРаботы.количество() - СтрокаТЧ.НомерСтроки, ТекНомер - СтрокаТЧ.НомерСтроки));
			КонецЕсли;
			ТекНомер = ТекНомер + 1;
		КонецЕсли;
		
		
		АктуализироватьНомераСтрок(СтрокаДерева,пРемонтныеРаботы,РемонтыОборудованияID,ТекНомер,ЕстьРемонтОборудованияID);
	КонецЦикла;
КонецПроцедуры

// Процедура выполняет копирование ветви дерева значений в заданную строку дерева значений.
// Параметры:
//  СтрокаКуда      - строка дерева значений в которую будет производиться копирование; 
//  ВетвьЧто        - строка дерева значений которая будет копироваться;
//  СтруктураДерева - структура полей строки дерева.
//
Процедура КопироватьВетвьДереваВДерево(СтрокаИсточник, СтрокаПриемник, ЕстьКартинка = Истина) Экспорт
	
	НовСтрокаДерева = СтрокаПриемник.Строки.Добавить();
	
	ЗаполнитьЗначенияСвойств(НовСтрокаДерева, СтрокаИсточник);
	
	Если ЕстьКартинка Тогда  
		НовСтрокаДерева.Картинка = СтрокаИсточник.Картинка;
	КонецЕсли;
	
	Для Каждого СтрокаДЗ Из СтрокаИсточник.Строки Цикл
		
		КопироватьВетвьДереваВДерево(СтрокаДЗ, НовСтрокаДерева, ЕстьКартинка);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выолняет сопоставдение дерева источника и дерева приемника.
// Параметры:
//  СтрокаДереваШаблона  - строка дерева значений данные по которой будут очищены в дереве для обработки; 
//  ДеревоДляОбработки   - обрабатываемое дерево значений.
//
Процедура СопоставитьДеревья(СтрокаДереваШаблона, ДеревоДляОбработки) Экспорт
	
	Для Каждого СтрокаСтрок Из СтрокаДереваШаблона.Строки Цикл
		
		Если СтрокаСтрок.Строки.Количество() = 0 Тогда
			
			СтрокаДереваДляОбработки = ДеревоДляОбработки.Строки.Найти(СтрокаСтрок.ID, "ID", Истина);
			Если Не СтрокаДереваДляОбработки = Неопределено Тогда
				ОчиститьВетвьПоСтроке(СтрокаДереваДляОбработки);
			КонецЕсли;
			
		Иначе
			
			СопоставитьДеревья(СтрокаСтрок, ДеревоДляОбработки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет очистку ветви по строке в дереве источнике,
// если часть ветви пустая, тогда удаляется и она.
// 
// Параметры:
//  СтрокаДерева - строка дерева значений данные по которой будут очищены. 
//
Процедура ОчиститьВетвьПоСтроке(СтрокаДерева) Экспорт
	
	РодительСтроки = СтрокаДерева.Родитель;
	СтрокиРодителя = РодительСтроки.Строки;
	СтрокиРодителя.Удалить(СтрокаДерева);
	
	Если (СтрокиРодителя.Количество() = 0 ) И (Не РодительСтроки.Родитель = Неопределено) Тогда
		
		ОчиститьВетвьПоСтроке(РодительСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция выолняет создание дерева значений со структурой дерева ремонтных работ по заявке.
//
Процедура СоздатьДеревоРемонтныхРаботПоЗапросу(ТекстЗапроса, ДеревоРабот, СтруктураПараметровЗапроса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Для Каждого КлючЗначение Из СтруктураПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	Результат = Запрос.Выполнить();
	ТаблицаЗапроса = Результат.Выгрузить();
	
	// 0 - й уровень дерева
	КорневаяСтрока = ДеревоРабот.Строки.Добавить();
	КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";
	КорневаяСтрока.Картинка = 4;
	
	торо_Ремонты.СоздатьВетвьДереваПоТабличнойЧасти(КорневаяСтрока, ТаблицаЗапроса);
	
КонецПроцедуры

// Процедура рассчитывает процент невыполненных работ по по нормам времени.
//
Процедура ЗаполнитьПроцентыНевыполненныхРаботПоНормамВремени(ID_Поиска, ТаблицаРабот) Экспорт
	
	МассивСтрок = ТаблицаРабот.НайтиСтроки(Новый Структура("Родитель_ID", ID_Поиска));
	
	ОбщаяПродолжительность = 0;
	Для Каждого Элемент Из МассивСтрок Цикл
		
		Если ТипЗнч(Элемент.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(Элемент.ДатаНачалаРемонта, Новый Структура("ИдентификаторТехКарты", Элемент.РемонтнаяРабота));
			Если Таб.Количество() Тогда
				ОбщаяПродолжительность = ОбщаяПродолжительность + Таб[0].ТехКарта.НормаВремени * Элемент.Количество;
			КонецЕсли;
		Иначе
			ОбщаяПродолжительность = ОбщаяПродолжительность + Элемент.РемонтнаяРабота.НормаВремени * Элемент.Количество;
		КонецЕсли;
		
		ЗаполнитьПроцентыНеВыполненныхРаботПоНормамВремени(Элемент.ID, ТаблицаРабот)
		
	КонецЦикла; 
	
	СуммаБезПоследнего = 0;
	РазмерМассиваСтрок = МассивСтрок.Количество();
	
	Если РазмерМассиваСтрок > 0 Тогда
		
		Для Сч = 0 По РазмерМассиваСтрок - 2 Цикл
			
			СтрокаТЗ  = МассивСтрок[Сч];
			
			Если ТипЗнч(СтрокаТЗ.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(СтрокаТЗ.ДатаНачалаРемонта,Новый Структура("ИдентификаторТехКарты", СтрокаТЗ.РемонтнаяРабота));
				Если Таб.Количество() Тогда
					Если ID_Поиска = "" Тогда
						СтрокаТЗ.ПроцентНевыполненныхРабот = 100;
					Иначе
						СтрокаТЗ.ПроцентНевыполненныхРабот = ?(ОбщаяПродолжительность = 0,
						100 / МассивСтрок.Количество(),
						Таб[0].ТехКарта.НормаВремени * СтрокаТЗ.Количество / ОбщаяПродолжительность * 100);;
					КонецЕсли;
				КонецЕсли;
			Иначе
				Если ID_Поиска = "" Тогда
					СтрокаТЗ.ПроцентНевыполненныхРабот = 100;
				Иначе
					СтрокаТЗ.ПроцентНевыполненныхРабот = ?(ОбщаяПродолжительность = 0,
					100 / МассивСтрок.Количество(),
					СтрокаТЗ.РемонтнаяРабота.НормаВремени * СтрокаТЗ.Количество / ОбщаяПродолжительность * 100);
				КонецЕсли;
			КонецЕсли;
			
			СуммаБезПоследнего = СуммаБезПоследнего + СтрокаТЗ.ПроцентНевыполненныхРабот;
			
		КонецЦикла;
		
		Если ID_Поиска = "" Тогда
			СтрокаТЗ  = МассивСтрок[РазмерМассиваСтрок-1];
			СтрокаТЗ.ПроцентНевыполненныхРабот = 100;
		Иначе 
			Если РазмерМассиваСтрок > 0 Тогда
				
				СтрокаТЗ  = МассивСтрок[РазмерМассиваСтрок-1];
				СтрокаТЗ.ПроцентНеВыполненныхРабот = 100 - СуммаБезПоследнего;
				
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

// Процедура рассчитывает процент выполненных работ в родительских строках строки дерева ремонтных работ.
//
// Параметры:
//  СтрокаДерева  – Строка дерева значений для родительских строк которой необходимо рассчитать 
//					процент выполненных работ.
//
Процедура РассчитатьПроцентВыполненияРаботВРодительскихСтрокахСтрокиДереваРемонтныхРабот(СтрокаДерева, ТаблицаРаботНарядов) Экспорт
	
	МаксПроцентПоНарядам = 0;
	
	Если СтрокаДерева.Родитель = Неопределено Тогда
		
		МассивСтрок = ТаблицаРаботНарядов.НайтиСтроки(Новый Структура("Родитель_ID", ""));
		Для Каждого ЭлементМ Из МассивСтрок Цикл
			
			МаксПроцентПоНарядам = МаксПроцентПоНарядам + ЭлементМ.ПроцентВыполненияРабот;
			
		КонецЦикла; 
		
		СуммаСПроцентомВыполнения = 0;
		Для Каждого СтрДерева Из СтрокаДерева.Строки Цикл
			
			СтрТРН = ТаблицаРаботНарядов.Найти(СтрДерева.ID, "ID");
			
			СуммаСПроцентомВыполнения = СуммаСПроцентомВыполнения + ?(СтрТРН = Неопределено, 
			0, СтрДерева.ПроцентВыполненияРабот * СтрТРН.ПроцентВыполненияРабот / 100);
			
			
		КонецЦикла;
		
		СтрокаДерева.ПроцентВыполненияРабот = СуммаСПроцентомВыполнения; 
		СтрокаДерева.Выполнено = (СтрокаДерева.ПроцентВыполненияРабот = 100);
	Иначе
		
		СуммаСПроцентомВыполнения = 0;
		Для Каждого СтрДерева Из СтрокаДерева.Строки Цикл
			
			СтрТРН = ТаблицаРаботНарядов.Найти(СтрДерева.ID, "ID");
			
			СуммаСПроцентомВыполнения = СуммаСПроцентомВыполнения + ?(СтрТРН = Неопределено, 
			0, СтрДерева.ПроцентВыполненияРабот * СтрТРН.ПроцентВыполненияРабот / 100);
			
			
		КонецЦикла;
		
		ПроцентТРН = ТаблицаРаботНарядов.Найти(СтрДерева.ID, "ID");
		СтрокаДерева.ПроцентВыполненияРабот = СуммаСПроцентомВыполнения /?(ПроцентТРН = Неопределено,
		1, ПроцентТРН.ПроцентВыполненияРабот) ; 
		СтрокаДерева.Выполнено = (СтрокаДерева.ПроцентВыполненияРабот = 100);
		
		РассчитатьПроцентВыполненияРаботВРодительскихСтрокахСтрокиДереваРемонтныхРабот(СтрокаДерева.Родитель, ТаблицаРаботНарядов);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение процента на нижних уровнях строки дерева ремонтных работ акта.
//
// Параметры:
//  СтрокаДерева – строка дерева значений.
//  Процент      – число – устанавливаемый процент.
//
Процедура РасставитьПроцентНаНижнихУровнях(СтрокаДерева, ТаблицаРаботНарядов) Экспорт
	
	МаксПроцентПоНарядам = 0;
	
	Для Каждого СтрДерева Из СтрокаДерева.Строки Цикл
		
		СтрТРН = ТаблицаРаботНарядов.Найти(СтрДерева.ID, "ID");
		МаксПроцентПоНарядам = МаксПроцентПоНарядам +
		?(СтрТРН = Неопределено, 0, Окр(СтрТРН.ПроцентВыполненияРабот, 2));
		
	КонецЦикла;
	
	Если МаксПроцентПоНарядам > 0 Тогда
		
		СтрокаДерева.ПроцентВыполненияРабот = Мин(МаксПроцентПоНарядам, СтрокаДерева.ПроцентВыполненияРабот);
		
	КонецЕсли; 
	
	СуммаДляПроверки = 0;
	Для Каждого СтрДерева Из СтрокаДерева.Строки Цикл
		
		СтрТРН = ТаблицаРаботНарядов.Найти(СтрДерева.ID, "ID");
		
		СтрДерева.ПроцентВыполненияРабот = Окр(СтрокаДерева.ПроцентВыполненияРабот *
		?((СтрТРН = Неопределено) Или (МаксПроцентПоНарядам = 0),
		0,
		Окр(СтрТРН.ПроцентВыполненияРабот/ МаксПроцентПоНарядам, 2)), 2);
		СтрДерева.Выполнено = (СтрДерева.ПроцентВыполненияРабот = Окр(СтрТРН.ПроцентВыполненияРабот, 2));
		
		РасставитьПроцентНаНижнихУровнях(СтрДерева, ТаблицаРаботНарядов);
		
	КонецЦикла;
	
КонецПроцедуры // РасставитьПроцентНаНижнихУровнях()

// Процедура устанавливает значение процента на родительских уровнях строки дерева ремонтных работ акта.
//
// Параметры:
//  СтрокаДерева – строка дерева значений.
//  Процент      – число – устанавливаемый процент.
//
Процедура РасставитьПроцентНаРодительскихУровняхДереваРемонтныхРабот(СтрокаДерева, ТаблицаРаботНарядов) Экспорт
	
	СуммаСПроцентомВыполнения = 0;
	
	Для Каждого СтрДерева Из СтрокаДерева.Строки Цикл
		
		РасставитьПроцентНаРодительскихУровняхДереваРемонтныхРабот(СтрДерева, ТаблицаРаботНарядов);
		
		СтрТРН = ТаблицаРаботНарядов.Найти(СтрДерева.ID, "ID");
		
		СуммаСПроцентомВыполнения = СуммаСПроцентомВыполнения + ?(СтрТРН = Неопределено, 
		0, СтрДерева.ПроцентВыполненияРабот / СтрТРН.ПроцентВыполненияРабот * 100);
		
	КонецЦикла;
	
	Если СуммаСПроцентомВыполнения > 0 Тогда
		
		СтрТРН = ТаблицаРаботНарядов.Найти(СтрокаДерева.ID, "ID");
		
		
		СтрокаДерева.ПроцентВыполненияРабот = СуммаСПроцентомВыполнения;
		МаксПроцентПоНарядам = 0;
		Если СтрокаДерева.Родитель = Неопределено Тогда
			
			МассивСтрок = ТаблицаРаботНарядов.НайтиСтроки(Новый Структура("Родитель_ID", ""));
			Для Каждого ЭлементМ Из МассивСтрок Цикл
				
				МаксПроцентПоНарядам = МаксПроцентПоНарядам + ЭлементМ.ПроцентВыполненияРабот;
				
			КонецЦикла; 
			
		Иначе
			
			МаксПроцентПоНарядам = ?(СтрТРН = Неопределено, 0, Окр(СтрТРН.ПроцентВыполненияРабот, 2));
			
		КонецЕсли; 
		
		СтрокаДерева.Выполнено = (СтрокаДерева.ПроцентВыполненияРабот = МаксПроцентПоНарядам);
		
	КонецЕсли; 
	
КонецПроцедуры // РасставитьПроцентНаНижнихУровнях()

// Процедура рассчитывает процент выполненных работ в подчиненных строках строки дерева ремонтных работ.
//
// Параметры:
//  СтрокаДерева  – Строка дерева значений для подчиненных строк которой необходимо рассчитать 
//					процент выполненных работ.
//
Процедура РассчитатьПроцентВыполненияРаботВПодчиненныхСтрокахСтрокиДереваРемонтныхРабот(СтрокаДерева, ТаблицаРаботНарядов) Экспорт
	
	РасставитьПроцентНаНижнихУровнях(СтрокаДерева, ТаблицаРаботНарядов);
	РасставитьПроцентНаРодительскихУровняхДереваРемонтныхРабот(СтрокаДерева, ТаблицаРаботНарядов);
	
КонецПроцедуры

// Процедура рекурсивно очищает родителей неисползуемых операций ремонтов.
//
Процедура ОчиститьРодителейТаблицыЗначений(ID_Поиска, ТаблицаРемонтныхРабот) Экспорт 
	
	СтрокаРемонтовНаряда = ТаблицаРемонтныхРабот.Найти(ID_Поиска, "ID");
	Если (Не СтрокаРемонтовНаряда = Неопределено) И ЗначениеЗаполнено(ID_Поиска) Тогда
		
		ID_Поиска = СтрокаРемонтовНаряда.Родитель_ID;
		ТаблицаРемонтныхРабот.Удалить(СтрокаРемонтовНаряда);
		ОчиститьРодителейТаблицыЗначений(ID_Поиска, ТаблицаРемонтныхРабот);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура проставляет проценты у подчиненных строк
//
Процедура РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, СтрокаДерева) Экспорт
	
	МассивТекСтрок = ДеревоОбъект.Строки.НайтиСтроки(СтрокаДерева, Истина);
	Если МассивТекСтрок.Количество() Тогда
		ТекСтрока = МассивТекСтрок[0];
		Для Каждого СтрДерева Из ТекСтрока.Строки Цикл
			
			СтрДерева.ПроцентВыполненияРабот = ТекСтрока.ПроцентВыполненияРабот;
			СтрДерева.Выполнено = (СтрДерева.ПроцентВыполненияРабот = 100);
			РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрДерева.ID, СтрДерева.РемонтыОборудования_ID, СтрДерева.Родитель_ID));
			
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры // РасставитьПроцентыПодчиненныхСтрок()

// Процедура проставляет проценты родительских строк
//
Процедура РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтрокаРодитель) Экспорт
	
	Если СтрокаРодитель = Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ПроцентРодителя = 0;
	
	МассивТекСтрок = ДеревоОбъект.Строки.НайтиСтроки(СтрокаРодитель, Истина);
	Если МассивТекСтрок.Количество() Тогда
		ТекСтрока = МассивТекСтрок[0];	
		
		Для Каждого СтрДерева Из ТекСтрока.Строки Цикл
			
			ПроцентРодителя = ПроцентРодителя + СтрДерева.ПроцентВыполненияРабот;
			
		КонецЦикла;
		
		КоличествоПодчиненных = ТекСтрока.Строки.Количество();
		Если КоличествоПодчиненных > 0 Тогда
			
			ТекСтрока.ПроцентВыполненияРабот = Окр(ПроцентРодителя / КоличествоПодчиненных, 2);
			ТекСтрока.Выполнено = (ТекСтрока.ПроцентВыполненияРабот = 100);
			
		КонецЕсли; 
		СтрРодитель = ТекСтрока.Родитель;
		Если НЕ СтрРодитель = Неопределено Тогда
			РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", СтрРодитель.ID, СтрРодитель.РемонтыОборудования_ID, СтрРодитель.Родитель_ID));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РасставитьПроцентыРодительскихСтрок()

// Процедура выполняет заполнение затрат по данным нормативов.
//
Процедура ЗаполнитьЗатратыПоТиповым (ДокументОбъект, СтрокаДерева, ID, СтруктураЗаполненияТЧ = Неопределено, ТехКарта = Неопределено, Количество = Неопределено) Экспорт
	
	Если Количество = Неопределено Тогда
		Количество = 1;
	КонецЕсли;
	
	Если ТехКарта = Неопределено Или ID = "" Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	Если СтруктураЗаполненияТЧ = Неопределено Тогда
		
		СтруктураЗаполненияТЧ = Новый Структура();
		СтруктураЗаполненияТЧ.Вставить("МатериальныеЗатраты", "МатериальныеЗатраты");
		СтруктураЗаполненияТЧ.Вставить("ТрудовыеЗатраты"    , "ТрудовыеЗатраты");
		СтруктураЗаполненияТЧ.Вставить("ИнструментыИТехника", "Инструменты");
		
	КонецЕсли; 
	
	Для Каждого КлючИЗначение Из СтруктураЗаполненияТЧ Цикл
		
		ТабЧастьДокумента = ДокументОбъект[КлючИЗначение.Значение];
		МассивСтрок   = ТехКарта[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", ID));
		
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			
			НовСтрокаТЧ = ТабЧастьДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, ЭлМассива); 
			
			Если КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
				
				НовСтрокаТЧ.ЕдиницаИзмерения = ЭлМассива.Упаковка;
				
				Коэффициент = ?(ЭлМассива.Упаковка.Коэффициент = 0, 1, ЭлМассива.Упаковка.Коэффициент);
				НовСтрокаТЧ.Количество = ЭлМассива.КоличествоУпаковокНаЕдиницу * Количество;
				НовСтрокаТЧ.КоличествоЕдиниц = ЭлМассива.КоличествоУпаковокНаЕдиницу * Коэффициент * Количество;
				
			КонецЕсли;
			
			Если КлючИЗначение.Ключ = "ТрудовыеЗатраты" Тогда
				
				НовСтрокаТЧ.ВремяРаботы = ЭлМассива.ВремяРаботыНаЕдиницу * Количество;
				
			КонецЕсли;
			
			
			НовСтрокаТЧ.ID = СтрокаДерева.ID;
			НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаДерева.РемонтыОборудования_ID;
			
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура добавляет строки по операциям и ремонтам в дерево ремонтных работ.
// 
Процедура ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, Знач ТекущиеЗначения, Значение, ID = "", СтруктураЗаполненияТЧ = Неопределено, Знач ТехКарта = Неопределено, Количество = Неопределено)  Экспорт
	
	Если Количество = Неопределено Тогда
		Количество = 1;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот") Тогда
		МассивСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("ID, Родитель_ID, Предписание_ID", ТекущиеЗначения.СтрокаРодитель_ID, ТекущиеЗначения.СтрокаРодительРодитель_ID,ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID),Истина);
	Иначе
		МассивСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("ID, Родитель_ID, РемонтыОборудования_ID", ТекущиеЗначения.СтрокаРодитель_ID, ТекущиеЗначения.СтрокаРодительРодитель_ID,ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID),Истина);
	КонецЕсли;
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаРодитель = МассивСтрок[0];	
		НовСтрокаДерева = СтрокаРодитель.Строки.Добавить();
		НовСтрокаДерева.ID = Новый УникальныйИдентификатор;
		НовСтрокаДерева.Родитель_ID     		= ТекущиеЗначения.СтрокаРодитель_ID;
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот") Тогда
			НовСтрокаДерева.Предписание_ID 	= ID;
		Иначе
			НовСтрокаДерева.РемонтыОборудования_ID 	= ?(ТекущиеЗначения.Свойство("ТекущийРемонт_ID"), ТекущиеЗначения.ТекущийРемонт_ID, ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID);
		КонецЕсли;
		НовСтрокаДерева.РемонтнаяРабота 		= Значение;
		НовСтрокаДерева.Картинка        		= торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(Значение);
		
		Если Не НовСтрокаДерева.Владелец().Колонки.Найти("Количество") = Неопределено Тогда
			НовСтрокаДерева.Количество      = Количество * ?(СтрокаРодитель.Количество = 0, 1, СтрокаРодитель.Количество);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект.РемонтныеРаботы.Добавить(), НовСтрокаДерева);
		
		Если ТипЗнч(Значение) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			Если ТекущиеЗначения.Свойство("ДатаНачалаРемонта") 
				И ЗначениеЗаполнено(ТекущиеЗначения.ДатаНачалаРемонта) Тогда
				
				Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ТекущиеЗначения.ДатаНачалаРемонта,Новый Структура("ИдентификаторТехКарты", Значение));
				
			Иначе
				
				Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(,Новый Структура("ИдентификаторТехКарты", Значение));// обработано
				
			КонецЕсли; 
			Если Таб.Количество() Тогда
				ТехКарта = Таб[0].ТехКарта;
				Для Каждого ОперацияРемонта Из ТехКарта.СписокОпераций Цикл
					Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот") Тогда
						ТекущиеЗначения = Новый Структура("СтрокаРодитель_ID, СтрокаРодительРодитель_ID, СтрокаРодительРемонтыОборудования_ID",НовСтрокаДерева.ID,НовСтрокаДерева.Родитель_ID, НовСтрокаДерева.Предписание_ID);
					Иначе
						Если ТекущиеЗначения.Свойство("ДатаНачалаРемонта") 
							И ЗначениеЗаполнено(ТекущиеЗначения.ДатаНачалаРемонта) Тогда
							ТекущиеЗначения = Новый Структура("СтрокаРодитель_ID, СтрокаРодительРодитель_ID, СтрокаРодительРемонтыОборудования_ID,ДатаНачалаРемонта",НовСтрокаДерева.ID,НовСтрокаДерева.Родитель_ID, НовСтрокаДерева.РемонтыОборудования_ID,ТекущиеЗначения.ДатаНачалаРемонта);
						Иначе
							ТекущиеЗначения = Новый Структура("СтрокаРодитель_ID, СтрокаРодительРодитель_ID, СтрокаРодительРемонтыОборудования_ID",НовСтрокаДерева.ID,НовСтрокаДерева.Родитель_ID, НовСтрокаДерева.РемонтыОборудования_ID);
						КонецЕсли;
					КонецЕсли;
					ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, ТекущиеЗначения, ОперацияРемонта.Операция, ОперацияРемонта.ID, СтруктураЗаполненияТЧ, ТехКарта, ОперацияРемонта.Количество);
				КонецЦикла;
			КонецЕсли;
			
		Иначе
			Если Не НовСтрокаДерева.Владелец().Колонки.Найти("Количество") = Неопределено Тогда
				ЗаполнитьЗатратыПоТиповым(ДокументОбъект, НовСтрокаДерева, ID, СтруктураЗаполненияТЧ, ТехКарта, НовСтрокаДерева.Количество);
			Иначе
				ЗаполнитьЗатратыПоТиповым(ДокументОбъект, НовСтрокаДерева, ID, СтруктураЗаполненияТЧ, ТехКарта);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение типовых затрат технологических операций.
//
// Параметры:
//  ДокументОбъект  – ДокументОбъект.торо_ЗаявкаНаРемонт – документ для которого
//                    необходимо заполнить типовые затраты.
//  СтрокаДерева    – СтрокаДереваЗначений – строка дерева ремонтных работ для
//                    которой заполняются типовые затраты.
//
Процедура ЗаполнитьТиповыеЗатратыТехнологическойОперации(Дерево, ДокументОбъект, СтруктураСтрокаРодитель, Значение, СтруктураСоответствияТЧ = Неопределено, РемонтыОборудования_ID = "") Экспорт
	
	МассивСтрок = Дерево.Строки.НайтиСтроки(
	Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", 
	СтруктураСтрокаРодитель.СтрокаРодитель_ID, 
	СтруктураСтрокаРодитель.СтрокаРодительРемонтыОборудования_ID , 
	СтруктураСтрокаРодитель.СтрокаРодительРодитель_ID), Истина);
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДереваРодитель = МассивСтрок[0];
		СтрокаДерева = СтрокаДереваРодитель.Строки.Добавить();
		СтрокаДерева.ID = Новый УникальныйИдентификатор;
		СтрокаДерева.Родитель_ID     = СтруктураСтрокаРодитель.СтрокаРодитель_ID;
		СтрокаДерева.РемонтнаяРабота = Значение;
		СтрокаДерева.Картинка        = торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(Значение);
		СтрокаДерева.РемонтыОборудования_ID = ?(РемонтыОборудования_ID = "", СтруктураСтрокаРодитель.СтрокаРодительРемонтыОборудования_ID,РемонтыОборудования_ID);
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот") Тогда
			СтрокаДерева.Количество = 1;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДокументОбъект.РемонтныеРаботы.Добавить(), СтрокаДерева);
		
		СтруктураСоответствияТЧ = Новый Структура;
		СтруктураСоответствияТЧ.Вставить("МатериальныеЗатраты", "МатериальныеЗатраты");
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот") Тогда
			СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты", "ТрудовыеЗатраты");
		КонецЕсли;
		Если НЕ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот") 
			И НЕ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииРегламентногоМероприятия") Тогда
			
			СтруктураСоответствияТЧ.Вставить("ИнструментыИТехника",  "Инструменты");
			
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураСоответствияТЧ Цикл
			
			ТЧ = Значение[КлючИЗначение.Ключ];
			
			Для Каждого СтрокаТЧ Из ТЧ Цикл
				
				НовСтрокаТЧ    = ДокументОбъект[КлючИЗначение.Значение].Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, СтрокаТЧ);
				НовСтрокаТЧ.ID = СтрокаДерева.ID;
				НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаДерева.РемонтыОборудования_ID;
				
				Если КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
					
					НовСтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Упаковка;
					НовСтрокаТЧ.Количество = СтрокаТЧ.КоличествоУпаковок;
					
					Коэффициент = НовСтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
					
					Если Коэффициент = 0 Тогда
						Коэффициент = 1
					КонецЕсли;
					
					НовСтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.КоличествоУпаковок * Коэффициент;
					
				КонецЕсли;				
				
			КонецЦикла;
			
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры // ЗаполнитьТиповыеЗатратыТехнологическойОперации()
#КонецОбласти 

#Область ЗаполнениеТЧОсновныхДокументов
// Процедура заполняет табличную часть ремонтных работ, а так же табличные части нормативов объекта
// ремонта по технологической карте ремонта.
//
// Параметры:
//  ДокументОбъект       – ДокументОбъект – документ рем. работ.
//  ВидРемонтныхРабот    – СправочникиОбъекта.торо_ВидыРемонтов
//                       – вид ремонтных работ.
// Возвращаемое значение:
//   СтруктураНормативов - Структура - структура нормативов ремонта.
//
Процедура ЗаполнитьРемонтныеРаботыПоНормативам(ДокументОбъект, ИмяТабличнойЧастиРемонтовОборудования, ИмяТабличнойЧастиРемонтныхРабот, ЗаполнятьЗатраты = Ложь, СтруктураСоответствияТЧ = Неопределено, СписокРемонтов = Неопределено) Экспорт
	
	ТЧ_РемонтыОборудования = ДокументОбъект[ИмяТабличнойЧастиРемонтовОборудования];
	ТЧ_РемонтныеРаботы     = ДокументОбъект[ИмяТабличнойЧастиРемонтныхРабот];
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаРемонтовОборудования.ОбъектРемонта,
	|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот
	|ПОМЕСТИТЬ ТаблицаРемонтовОборудования
	|ИЗ
	|	&ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования "+ ?(СписокРемонтов<>Неопределено, " ГДЕ ТаблицаРемонтовОборудования.ID = &СписокРемонтов", "") +"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	|	торо_НормативныеРемонтыОборудования.СпособПланирования,
	|	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	|	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	|	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	|	торо_НормативныеРемонтыОборудования.ВидРемонта,
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
	|	ТаблицаРемонтовОборудования.ОбъектРемонта,
	|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот
	|ИЗ
	|	ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|		ПО ТаблицаРемонтовОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	|			И ТаблицаРемонтовОборудования.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	|ГДЕ
	|	торо_НормативныеРемонтыОборудования.Приоритет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_РегламентныеМероприятияИСпискиОбъектов.НормативныйРемонт,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособПланирования,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ГрафикРемонтныхРабот,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособВыполнения,
	|	ЛОЖЬ КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособУчетаДатыОтсчета,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия КАК ВидРемонта,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов КАК ГруппаОбьектовРемонтов,
	|	ТаблицаРемонтовОборудования.ОбъектРемонта,
	|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот
	|ИЗ ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
	|		ПО ТаблицаРемонтовОборудования.ОбъектРемонта = торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов
	|			И ТаблицаРемонтовОборудования.ВидРемонтныхРабот = торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия
	|";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтовОборудования", ТЧ_РемонтыОборудования);
	
	Если СписокРемонтов<>Неопределено Тогда
		Запрос.УстановитьПараметр("СписокРемонтов", СписокРемонтов);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	ТаблицаДанныхНормативов = Результат.Выгрузить();
	
	Для Каждого СтрокаТЧ_РО Из ТЧ_РемонтыОборудования Цикл
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("ОбъектРемонта"    , СтрокаТЧ_РО.ОбъектРемонта);
		СтруктураПоиска.Вставить("ВидРемонтныхРабот", СтрокаТЧ_РО.ВидРемонтныхРабот);
		
		МассивСтрокНормативов = ТаблицаДанныхНормативов.НайтиСтроки(СтруктураПоиска);
		Если МассивСтрокНормативов.Количество() > 0 Тогда 	
			
			ТехКартаРемонта = МассивСтрокНормативов[0].НормативныйРемонт;
			
			Если ЗначениеЗаполнено(СтрокаТЧ_РО.ДатаНачала) Тогда
				Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(СтрокаТЧ_РО.ДатаНачала,Новый Структура("ИдентификаторТехКарты", ТехКартаРемонта)); 
			Иначе
				Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(,Новый Структура("ИдентификаторТехКарты", ТехКартаРемонта));// обработано
			КонецЕсли; 
			
			Если Таб.Количество() Тогда			
				
				НовСтрокаРемонтныхРабот = ТЧ_РемонтныеРаботы.Добавить();
				
				ЗаполнитьЗначенияСвойств(НовСтрокаРемонтныхРабот, СтрокаТЧ_РО);
				
				НовСтрокаРемонтныхРабот.РемонтыОборудования_ID = СтрокаТЧ_РО.ID;
				НовСтрокаРемонтныхРабот.ID                     = Новый УникальныйИдентификатор();
				НовСтрокаРемонтныхРабот.РемонтнаяРабота        = ТехКартаРемонта;
				НовСтрокаРемонтныхРабот.Родитель_ID            = "";
				
				ДобавитьСтрокуРемонтныхРабот(ДокументОбъект,
				НовСтрокаРемонтныхРабот, 
				СтрокаТЧ_РО.ДатаНачала, // Для получения даты начала ремонта
				ТЧ_РемонтныеРаботы,
				Таб[0].ТехКарта,
				НовСтрокаРемонтныхРабот.ID, 
				ЗаполнятьЗатраты,
				СтруктураСоответствияТЧ);
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура заполняет нормативы ремонтной работы.
//
Процедура ЗаполнитьНормативыРемонтнойРаботы(ДокументОбъект, СтрокаРемонтныхРабот, ТехКартаРемонта, СтруктураСоответствияТЧ = Неопределено) Экспорт
	
	Если ТехКартаРемонта <> Неопределено Тогда
		
		Если ТипЗнч(ТехКартаРемонта) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			СтрокаОперации = СтрокаРемонтныхРабот;
		Иначе
			СтрокаОперации = ТехКартаРемонта.СписокОпераций.Найти(СтрокаРемонтныхРабот.ID, "ID");
		КонецЕсли;
		
		Если СтрокаОперации <> Неопределено 
			ИЛИ ТипЗнч(СтрокаРемонтныхРабот.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")
			Тогда
			
			Если СтруктураСоответствияТЧ = Неопределено Тогда
				
				СтруктураСоответствияТЧ = Новый Структура;
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ", "МатериальныеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
				СтруктураСоответствияТЧ.Вставить("МатериальныеЗатраты", СоответствиеЗаполнения);
				
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ", "ТрудовыеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
				СтруктураСоответствияТЧ.Вставить("ТрудовыеЗатраты", СоответствиеЗаполнения);
				
				Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
					
					СоответствиеЗаполнения = Новый Соответствие();
					СоответствиеЗаполнения.Вставить("ИмяТЧ", "Инструменты");
					СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
					СтруктураСоответствияТЧ.Вставить("ИнструментыИТехника", СоответствиеЗаполнения);
					
					Если ТипЗнч(ТехКартаРемонта) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
						СоответствиеЗаполнения = Новый Соответствие();
						СоответствиеЗаполнения.Вставить("ИмяТЧ", "МерыБезопасности");
						СоответствиеЗаполнения.Вставить("Разбивать", Ложь);
						СтруктураСоответствияТЧ.Вставить("МерыБезопасности", СоответствиеЗаполнения);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли; 
			
			Для Каждого КлючИЗначение Из СтруктураСоответствияТЧ Цикл
				
				Если СтрокаОперации <> Неопределено 
					И ТипЗнч(ТехКартаРемонта) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда // берем из тех. карты
					СтруктураПоиска = Новый Структура("ID", СтрокаОперации.ID);
					МассивСтрокНормативов = ТехКартаРемонта[КлючИЗначение.Ключ].НайтиСтроки(СтруктураПоиска);
				Иначе // берем напрямую из тех. операции
					Если КлючИЗначение.Ключ = "МерыБезопасности" Тогда
						Продолжить; // В тех. операциях нет такой ТЧ.
					КонецЕсли;
					МассивСтрокНормативов = СтрокаРемонтныхРабот.РемонтнаяРабота[КлючИЗначение.Ключ];
				КонецЕсли;
				
				Если КлючИЗначение.Значение.Получить("Разбивать") = Ложь Тогда // Не нужно разбивать строки по количеству
					
					Для Каждого ЭлементМассива Из МассивСтрокНормативов Цикл
						
						НовСтрокаТЧ    = ДокументОбъект[КлючИЗначение.Значение.Получить("ИмяТЧ")].Добавить();
						
						ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, ЭлементМассива);
						
						НовСтрокаТЧ.ID = СтрокаРемонтныхРабот.ID;
						НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаРемонтныхРабот.РемонтыОборудования_ID;
						
						Если КлючИЗначение.Значение.Получить("ИмяТЧ") = "МатериальныеЗатраты" тогда
							Если СтрокаОперации <> Неопределено 
								И ТипЗнч(ТехКартаРемонта) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда 
								НовСтрокаТЧ.КоличествоЕдиниц = ЭлементМассива.КоличествоНаЕдиницу;
							Иначе
								НовСтрокаТЧ.ЕдиницаИзмерения = ЭлементМассива.Упаковка;
								Коэффициент = НовСтрокаТЧ.ЕдиницаИзмерения.Коэффициент;
								Если Коэффициент = 0 Тогда
									Коэффициент = 1;
								КонецЕсли;
								Если ТипЗнч(ТехКартаРемонта) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
									НовСтрокаТЧ.КоличествоЕдиниц = ЭлементМассива.КоличествоУпаковок * Коэффициент * СтрокаРемонтныхРабот.Количество;
									НовСтрокаТЧ.Количество = ЭлементМассива.КоличествоУпаковок * СтрокаРемонтныхРабот.Количество;
								Иначе
									НовСтрокаТЧ.КоличествоЕдиниц = ЭлементМассива.КоличествоУпаковок * Коэффициент;
								КонецЕсли;
							КонецЕсли;
							
						ИначеЕсли КлючИЗначение.Значение.Получить("ИмяТЧ") = "ТрудовыеЗатраты" Тогда
							
							Если ТипЗнч(ТехКартаРемонта) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
								НовСтрокаТЧ.ВремяРаботы = НовСтрокаТЧ.ВремяРаботы * СтрокаРемонтныхРабот.Количество;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
				ИначеЕсли КлючИЗначение.Значение.Получить("Разбивать") = Истина Тогда // Надо добавить нужное количество строк
					
					Для Каждого ЭлементМассива Из МассивСтрокНормативов Цикл
						
						Для Сч = 1 По ЭлементМассива.Количество Цикл
							
							НовСтрокаТЧ    = ДокументОбъект[КлючИЗначение.Значение.Получить("ИмяТЧ")].Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, ЭлементМассива);
							НовСтрокаТЧ.ID = СтрокаРемонтныхРабот.ID;
							НовСтрокаТЧ.РемонтыОборудования_ID = СтрокаРемонтныхРабот.РемонтыОборудования_ID;
							Если КлючИЗначение.Значение.Получить("ИмяТЧ") = "ТрудовыеЗатраты" 
								И ТипЗнч(ТехКартаРемонта) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
								НовСтрокаТЧ.ВремяРаботы = НовСтрокаТЧ.ВремяРаботы * СтрокаРемонтныхРабот.Количество;
							КонецЕсли;
							
						КонецЦикла; 
						
					КонецЦикла;
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция получает структуру нормативов объекта ремонта по виду ремонтных работ.
//
// Параметры:
//  ОбъектРемонтныхРабот – СправочникиОбъекта.торо_ОбъектыРемонта – объект рем. работ.
//  ВидРемонтныхРабот    – СправочникиОбъекта.торо_ВидыРемонтов
//                       – вид ремонтных работ.
// Возвращаемое значение:
//   СтруктураНормативов - Структура - структура нормативов ремонта.
//
Функция ПолучитьСтруктуруНормативовРемонта(ОбъектРемонтныхРабот, ВидРемонтныхРабот) Экспорт
	
	СтруктураНормативов = Новый Структура();
	СтруктураНормативов.Вставить("НормативныйРемонт");
	СтруктураНормативов.Вставить("СпособПланирования");
	СтруктураНормативов.Вставить("НормативныйРемонт");
	СтруктураНормативов.Вставить("ГрафикРемонтныхРабот");
	СтруктураНормативов.Вставить("НеИспользоватьВПланированииДатуВводаВЭксплуатацию");
	СтруктураНормативов.Вставить("СпособУчетаДатыОтсчета");
	СтруктураНормативов.Вставить("ВидРемонта");
	СтруктураНормативов.Вставить("ОбъектРемонта");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	|	торо_НормативныеРемонтыОборудования.СпособПланирования,
	|	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	|	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	|	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	|	торо_НормативныеРемонтыОборудования.ВидРемонта,
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта
	|ИЗ
	|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|ГДЕ
	|	торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
	|	И торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонтныхРабот
	|	И торо_НормативныеРемонтыОборудования.Приоритет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_РегламентныеМероприятияИСпискиОбъектов.НормативныйРемонт,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособПланирования,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ГрафикРемонтныхРабот,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособВыполнения,
	|	ЛОЖЬ КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособУчетаДатыОтсчета,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия КАК ВидРемонта,
	|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов КАК ГруппаОбьектовРемонтов
	|ИЗ
	|	РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
	|ГДЕ
	|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия = &ВидРемонта
	|	И торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов = &ОбъектРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ОбъектРемонтныхРабот", ОбъектРемонтныхРабот);
	
	Запрос.УстановитьПараметр("ВидРемонта", ВидРемонтныхРабот);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураНормативов, Выборка);
		Возврат СтруктураНормативов;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьНормативнуюТехКартуРемонтаОбъекта()

// Функция обрабатывает выбор ремонта
Функция ОбработкаВыбораРемонта(Дерево, ВыбранноеЗначение, ДокументОбъект,ТЧ_РемонтовОборудования,ТЧ_РемонтныхРабот,ТЧ_ДокументыОснования,ТекущиеЗначения,ВыходныеПараметры=Неопределено, ТЧ_Исполнители = Неопределено, ТЧ_Подрядчики = Неопределено) Экспорт
	
	ВыходныеПараметры = Новый Структура;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		Если ТекущиеЗначения.Свойство("ТекущийРемонт_ID") И ТекущиеЗначения.ТекущийРемонт_ID <> "" Тогда
			РемонтыОборудования_ID = ТекущиеЗначения.ТекущийРемонт_ID;
		Иначе
			Возврат Строка(НСтр("ru = 'Не выбран ремонт оборудования для добавления тех. операции!'"));
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот") Тогда
			ОперацияДобавлена = ТЧ_РемонтныхРабот.НайтиСтроки(Новый Структура("Предписание_ID, РемонтнаяРабота", РемонтыОборудования_ID, ВыбранноеЗначение)).Количество() > 0;
		Иначе
			ОперацияДобавлена = ТЧ_РемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение,ТекущиеЗначения.СтрокаРодитель_ID)).Количество() > 0;
		КонецЕсли;
		
		Если ОперацияДобавлена Тогда
			Возврат Строка(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Операция уже добавлена: %1!'"),ВыбранноеЗначение.Наименование)); 
		КонецЕсли;
		
		Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
			Если Не ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID) Тогда
				ТЧ_РемонтныхРабот.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт") Тогда
			торо_ЗаявкаНаРемонт.ЗаполнитьТиповыеЗатратыТехнологическойОперации(Дерево, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение,РемонтыОборудования_ID);
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот") 
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") 
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииРегламентногоМероприятия")
			Тогда
			
			МассивСтрок = Дерево.Строки.НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", 
											ТекущиеЗначения.СтрокаРодитель_ID, 
											ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID , 
											ТекущиеЗначения.СтрокаРодительРодитель_ID), Истина);
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				СтрокаДерева = МассивСтрок[0];
				
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ID                     = Новый УникальныйИдентификатор;
				СтрокаДерева.Родитель_ID            = ТекущиеЗначения.СтрокаРодитель_ID;
				СтрокаДерева.РемонтнаяРабота        = ВыбранноеЗначение;
				СтрокаДерева.РемонтыОборудования_ID = РемонтыОборудования_ID;
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот") 
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие")
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
					ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииРегламентногоМероприятия") Тогда
					СтрокаДерева.Количество         = 1;
				КонецЕсли;
				СтрокаДерева.Картинка               = торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(ВыбранноеЗначение);
				
				ЗаполнитьЗначенияСвойств(ДокументОбъект.РемонтныеРаботы.Добавить(), СтрокаДерева);
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот") Тогда	
			
			МассивСтрок = Дерево.Строки.НайтиСтроки(
			Новый Структура("ID, Предписание_ID, Родитель_ID", 
			ТекущиеЗначения.СтрокаРодитель_ID, 
			ТекущиеЗначения.СтрокаРодительРемонтыОборудования_ID , 
			ТекущиеЗначения.СтрокаРодительРодитель_ID), Истина);
			
			Если МассивСтрок.Количество() > 0 Тогда
				
				СтрокаДерева = МассивСтрок[0];
				
				СтрокаДерева = СтрокаДерева.Строки.Добавить();
				СтрокаДерева.ID = Новый УникальныйИдентификатор;
				СтрокаДерева.Родитель_ID     = ТекущиеЗначения.СтрокаРодитель_ID;
				СтрокаДерева.РемонтнаяРабота = ВыбранноеЗначение;
				СтрокаДерева.Количество = 1;
				СтрокаДерева.Картинка        = торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(ВыбранноеЗначение);
				
				ЗаполнитьЗначенияСвойств(ДокументОбъект.РемонтныеРаботы.Добавить(), СтрокаДерева);
			КонецЕсли;
			
			Для Каждого СтрокаРР Из ТЧ_РемонтныхРабот Цикл
				Если ПустаяСтрока(СтрокаРР.Предписание_ID) Тогда
					СтрокаРР.Предписание_ID = РемонтыОборудования_ID;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		Если ТекущиеЗначения.Свойство("ТекущийРемонт_ID") И ТекущиеЗначения.ТекущийРемонт_ID <> "" Тогда
			РемонтыОборудования_ID = ТекущиеЗначения.ТекущийРемонт_ID;
		Иначе
			Возврат Строка(НСтр("ru = 'Не выбран ремонт оборудования, для добавления тех. карты!'"));
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот") Тогда
			ОперацияДобавлена = ТЧ_РемонтныхРабот.НайтиСтроки(Новый Структура("Предписание_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение, ТекущиеЗначения.СтрокаРодитель_ID)).Количество() > 0;
		Иначе
			ОперацияДобавлена = ТЧ_РемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, РемонтнаяРабота, Родитель_ID", РемонтыОборудования_ID, ВыбранноеЗначение,ТекущиеЗначения.СтрокаРодитель_ID)).Количество() > 0;
		КонецЕсли;
		
		Если ОперацияДобавлена Тогда
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Технологическая карта уже добавлена: %1!'"),ВыбранноеЗначение.Наименование); 
		КонецЕсли;
		
		Если ТЧ_РемонтныхРабот.Количество() > 0 Тогда
			Если Не ЗначениеЗаполнено(ТЧ_РемонтныхРабот[0].ID) Тогда
				ТЧ_РемонтныхРабот.Очистить();
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт") Тогда
			торо_Ремонты.ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение, ТекущиеЗначения.ТекущийРемонт_ID);
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииРегламентногоМероприятия") Тогда
			СтруктураЗаполненияТЧ = Новый Структура();
			торо_Ремонты.ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение, ТекущиеЗначения.ТекущийРемонт_ID, СтруктураЗаполненияТЧ);
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот")
			ИЛИ ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") Тогда
			СтруктураЗаполненияТЧ = Новый Структура();
			торо_Ремонты.ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение, ТекущиеЗначения.ТекущийРемонт_ID, СтруктураЗаполненияТЧ);			
		ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ВнешнееОснованиеДляРабот") Тогда	
			
			СтруктураЗаполненияТЧ = Новый Структура();
			торо_Ремонты.ДобавитьСтрокуДереваРемонтов(Дерево, ДокументОбъект, ТекущиеЗначения, ВыбранноеЗначение, ТекущиеЗначения.ТекущийРемонт_ID, СтруктураЗаполненияТЧ);			
			
			Для Каждого СтрокаРР Из ТЧ_РемонтныхРабот Цикл
				Если ПустаяСтрока(СтрокаРР.Предписание_ID) Тогда
					СтрокаРР.Предписание_ID = РемонтыОборудования_ID;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если ВыбранноеЗначение.Свойство("СтрокаРемонтовОборудования") Тогда
			
			СтрокаРемонтовОборудования = ВыбранноеЗначение.СтрокаРемонтовОборудования;
			
			Если ЗначениеЗаполнено(СтрокаРемонтовОборудования.ОбъектРемонта)
				И ЗначениеЗаполнено(СтрокаРемонтовОборудования.ID) Тогда
				
				ДокОснование = ВыбранноеЗначение.ДокументОснование;
				
				Если ТЧ_ДокументыОснования.НайтиСтроки(Новый Структура ("ДокументОснование", ДокОснование)).Количество() = 0 Тогда
					СтрокаДо = ТЧ_ДокументыОснования.Добавить();
					СтрокаДо.ДокументОснование = ДокОснование;
				КонецЕсли;
								
				// Ремонты оборудования
				ДобавленОР = Ложь;
				СтрокаРО = ТЧ_РемонтовОборудования.Найти(СтрокаРемонтовОборудования.ID, "ID");
				Если СтрокаРО = Неопределено Тогда
					СтрокаРО = ДобавитьСтрокуРемонтаОборудования(ТЧ_РемонтовОборудования, СтрокаРемонтовОборудования, ДокументОбъект, ДокОснование);
					ДобавленОР = Истина;
				КонецЕсли;
				
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_ЗаявкаНаРемонт") И ДобавленОР Тогда
					СтруктураДляЗапчастей = Новый Структура;
					СтруктураДляЗапчастей.Вставить("ОбъектРемонта");
					СтруктураДляЗапчастей.Вставить("ВидРемонтныхРабот");
					СтруктураДляЗапчастей.Вставить("ID");
					
					ЗаполнитьЗначенияСвойств(СтруктураДляЗапчастей, СтрокаРО);
					
					ЗаполнитьЗапчастиРемонтнойРаботыВЗаявке(ДокументОбъект, СтруктураДляЗапчастей);
					
				ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот") И ДобавленОР Тогда
					
					МассивДокументовОснований = Новый массив;
					МассивДокументовОснований.Добавить(ДокОснование);
					
					СписокИДРемонтов = Новый Массив;
					СписокИДРемонтов.Добавить(СтрокаРО.ID);
					
					// заполнение по основанию
					ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, Новый Массив, Новый Массив, "Запчасти");
					ЗаполнитьЗапчастиПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
										
				КонецЕсли;
				
				ЗаполнятьЗатраты = Истина;
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот") Тогда
					ЗаполнятьЗатраты = Ложь;
				КонецЕсли;
				
				ОбработкаВыбораРемонта_ДобавитьСтрокиРемонтныхРабот(ВыбранноеЗначение, СтрокаРО, ТЧ_РемонтныхРабот, ДокументОбъект, СтрокаРемонтовОборудования, ЗаполнятьЗатраты);
				
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот") Тогда

					МассивДокументовОснований = Новый массив;
					МассивДокументовОснований.Добавить(ДокОснование);
					
					СписокИДРемонтов = Новый Массив;
					СписокИДРемонтов.Добавить(СтрокаРО.ID);
					
					СписокИДОпераций = Новый Массив;
					СписокИДТехКарт = Новый Массив;
					Для каждого СтрокаОперации из ДокументОбъект.РемонтныеРаботы Цикл
						Если СтрокаОперации.РемонтыОборудования_ID = СтрокаРО.ID Тогда
							СписокИДОпераций.Добавить(СтрокаОперации.ID);
							Если ТипЗнч(СтрокаОперации.РемонтнаяРабота) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
								СписокИДТехКарт.Добавить(СтрокаОперации.ID);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

					ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Материалы");
					ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
					
					ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ДокументОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
					ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
					ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(ДокументОбъект, ДанныеДляЗаполнения);
										
				КонецЕсли;
				
				Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот") 
					или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие")
					Тогда
					
					Если ВыбранноеЗначение.Свойство("МассивСтрокИсполнителей") Тогда
						Для каждого Стр Из ВыбранноеЗначение.МассивСтрокИсполнителей Цикл
							
							НС = ТЧ_Исполнители.Добавить();
							ЗаполнитьЗначенияСвойств(НС, Стр);
							
						КонецЦикла; 
					КонецЕсли;
					
					Если ВыбранноеЗначение.Свойство("МассивСтрокПодрядчики") Тогда
						
						Если ТЧ_Подрядчики = Неопределено Тогда
							Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаВыполнениеРемонтныхРабот") 
								или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") Тогда
								ТЧ_Подрядчики = ДокументОбъект.Подрядчики;
							ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииЭтапаРабот")
								или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.торо_АктОВыполненииРегламентногоМероприятия") Тогда 
								ТЧ_Подрядчики = ДокументОбъект.ПодрядчикиРемонтныхРабот;
							КонецЕсли;
						КонецЕсли;
							
						Для каждого Стр Из ВыбранноеЗначение.МассивСтрокПодрядчики Цикл
							СтруктураПоиска = Новый Структура("ID, РемонтыОборудования_ID, Контрагент",
							Стр.ID, Стр.РемонтыОборудования_ID, Стр.Контрагент);
							
							Если ТЧ_Подрядчики.Количество() = 0 ИЛИ ТЧ_Подрядчики.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
								НС = ТЧ_Подрядчики.Добавить();
								ЗаполнитьЗначенияСвойств(НС, Стр);
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		ВыходныеПараметры.Вставить("ДобавленОР",ДобавленОР);
		
		СтрСтрокаРО = Новый Структура("ID, ВидРемонтныхРабот, ДатаНачала, ДатаОкончания, ДокументИсточник, ОбъектРемонта",
		СтрокаРО.ID, СтрокаРО.ВидРемонтныхРабот, СтрокаРО.ДатаНачала, СтрокаРО.ДатаОкончания, СтрокаРО.ДокументИсточник, СтрокаРО.ОбъектРемонта);
		Если ТипЗнч(ДокументОбъект) = тип("ДокументОбъект.торо_ЗаявкаНаРемонт") Тогда
			СтрСтрокаРО.Вставить("ОписаниеРемонта", СтрокаРО.ОписаниеРемонта);
		КонецЕсли;
		Если НЕ ТипЗнч(ДокументОбъект) = тип("ДокументОбъект.торо_НарядНаРегламентноеМероприятие") Тогда
			СтрСтрокаРО.Вставить("ЗакрываетПредписание", СтрокаРО.ЗакрываетПредписание);
			СтрСтрокаРО.Вставить("ИДДефекта", СтрокаРО.ИДДефекта);
		КонецЕсли;
		ВыходныеПараметры.Вставить("СтрокаРО",СтрСтрокаРО); 
		
	КонецЕсли;
	
	Возврат Новый Структура("Дерево, ДокументОбъект", Дерево, ДокументОбъект);
	
КонецФункции

// Функция получает незавершенные ремонты
Функция ПолучитьНезавершенныеРемонты(ТаблицаРемонтовДляПроверки) Экспорт
	
	Если ТипЗнч(ТаблицаРемонтовДляПроверки) = Тип("Строка") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ЗавершенныеРемонтныеРаботы.ID
		|ИЗ
		|	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		|ГДЕ 
		|	торо_ЗавершенныеРемонтныеРаботы.ID = &ID ";
		
		Запрос.УстановитьПараметр("ID", ТаблицаРемонтовДляПроверки);
		Возврат Запрос.Выполнить().Пустой(); 
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаРемонтовДляПроверки.ID
		|ПОМЕСТИТЬ ТаблицаРемонтовДляПроверки
		|ИЗ
		|	&ТаблицаРемонтовДляПроверки КАК ТаблицаРемонтовДляПроверки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРемонтовДляПроверки.ID
		|ИЗ
		|	ТаблицаРемонтовДляПроверки КАК ТаблицаРемонтовДляПроверки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		|		ПО ТаблицаРемонтовДляПроверки.ID = торо_ЗавершенныеРемонтныеРаботы.ID
		|ГДЕ
		|	торо_ЗавершенныеРемонтныеРаботы.ID ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("ТаблицаРемонтовДляПроверки", ТаблицаРемонтовДляПроверки);
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;
КонецФункции

// Процедура заполнения затрат по документу основанию строки табличной части "Ремонтные работы".
//
Процедура ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ЭтотОбъект, СтрокаРемРабот, ДокОснование, ТехКарта, ДатаНачала = Неопределено, Знач ПараметрыЗаполнения = Неопределено) Экспорт 
	
	Если ТипЗнч(ТехКарта) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		Если Не ДатаНачала = Неопределено Тогда
			Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ДатаНачала,Новый Структура("ИдентификаторТехКарты", ТехКарта));
		Иначе
			Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(,Новый Структура("ИдентификаторТехКарты", ТехКарта));
		КонецЕсли;
		
		Если Таб.Количество() Тогда
			ТехКартаРемонта = Таб[0].ТехКарта;	
		Иначе
			ТехКартаРемонта = Справочники.торо_ТехКарты.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		ТехКартаРемонта = ТехКарта;
	КонецЕсли;
	
	// Параметры, передаваемые в рекурсию
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьИсполнителейИзТехКарты") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьИсполнителейИзТехКарты", Истина);
	КонецЕсли;
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьМатериалыИзТехКарты") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьМатериалыИзТехКарты", Истина);
	КонецЕсли;
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьПодрядчиковИзОснования") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьПодрядчиковИзОснования", Истина);
	КонецЕсли;
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьИсполнителейИзОснования") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьИсполнителейИзОснования", Истина);
	КонецЕсли;
	Если НЕ ПараметрыЗаполнения.Свойство("ЗаполнятьМатериалыИзОснования") Тогда
		ПараметрыЗаполнения.Вставить("ЗаполнятьМатериалыИзОснования", Истина);
	КонецЕсли;
	
	ЗаполнятьИзТехКарты = Истина;
	ЗаполнятьИзОснований = Ложь;
	
	// Для заполнения из оснований 
	МассивДокументовОснований = Новый массив;
	МассивДокументовОснований.Добавить(ДокОснование);
	
	СписокИДРемонтов = Новый Массив;
	СписокИДРемонтов.Добавить(СтрокаРемРабот.РемонтыОборудования_ID);
	
	СписокИДОпераций = Новый Массив;
	СписокИДОпераций.Добавить(СтрокаРемРабот.ID);
	
	СписокИДТехКарт = Новый Массив;
	СписокИДТехКарт.Добавить(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРемРабот.ID, СтрокаРемРабот.РемонтыОборудования_ID));
	
	// Проверка документа-основания
	СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, ID", СтрокаРемРабот.РемонтыОборудования_ID, СтрокаРемРабот.ID);
		
	Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		
		ЗаполнятьИзТехКарты = Истина;
		
		// заполнить подрядчиков
		Если ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
			ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования = Ложь;
			ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЭтотОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
			ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		
		ЗаполнятьИзТехКарты = Истина;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		ЗаполнятьИзТехКарты = Ложь;
		ПараметрыЗаполнения.ЗаполнятьИсполнителейИзТехКарты = Ложь;
		ПараметрыЗаполнения.ЗаполнятьМатериалыИзТехКарты = Ложь;
		
		// заполнить материалы
		Если ПараметрыЗаполнения.ЗаполнятьМатериалыИзОснования Тогда
			ПараметрыЗаполнения.ЗаполнятьМатериалыИзОснования = Ложь;
			ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЭтотОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Материалы");
			ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
		КонецЕсли;
		
		Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования 
			ИЛИ ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
			
			ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЭтотОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
			
			// заполнить исполнителей
			Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования Тогда
				ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования = Ложь;
				ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
			КонецЕсли;
			
			// заполнить подрядчиков
			Если ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
				ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования = Ложь;
				ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		ИЛИ ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		
		ЗаполнятьИзТехКарты = Истина;
		ПараметрыЗаполнения.ЗаполнятьИсполнителейИзТехКарты = Ложь;
		ЗаполнятьИзОснований = Истина;
		
		Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования 
			ИЛИ ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
			
			ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованиюИзДокументов(МассивДокументовОснований, ЭтотОбъект, СписокИДРемонтов, СписокИДОпераций, СписокИДТехКарт, "Исполнители");
			
			// заполнить исполнителей
			Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования Тогда
				ПараметрыЗаполнения.ЗаполнятьИсполнителейИзОснования = Ложь;
				ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
			КонецЕсли;
			
			// заполнить подрядчиков
			Если ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования Тогда
				ПараметрыЗаполнения.ЗаполнятьПодрядчиковИзОснования = Ложь;
				ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(ЭтотОбъект, ДанныеДляЗаполнения);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли; 
	
	// рекурсивное дозаполнение из оснований основания
	Если ЗаполнятьИзОснований Тогда
		Если ТипЗнч(ДокОснование) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
			СтрокаРемонта = ДокОснование.РемонтыОборудования.Найти(СтрокаРемРабот.РемонтыОборудования_ID, "ID");
			Если СтрокаРемонта <> Неопределено И ЗначениеЗаполнено(СтрокаРемонта.ДокументИсточник) Тогда
				
				ЗаполнитьЗатратыРемонтнойРаботыПоДокументуОснованию(ЭтотОбъект, СтрокаРемРабот, СтрокаРемонта.ДокументИсточник, ТехКарта, ДатаНачала, ПараметрыЗаполнения);
				Возврат;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// если нигде больше ничего нет, то берем из тех. карты
	Если ЗаполнятьИзТехКарты И ЗначениеЗаполнено(ТехКартаРемонта) Тогда
		
		СоответствиеТЧОснования = Новый Структура;
		
		Если ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")  
			ИЛИ ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			
			Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзТехКарты Тогда
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ"           , "Исполнители");
				СоответствиеЗаполнения.Вставить("Разбивать"       , Истина);
				СоответствиеТЧОснования.Вставить("ТрудовыеЗатраты", СоответствиеЗаполнения);
			КонецЕсли;
			
		Иначе
			
			Если ПараметрыЗаполнения.ЗаполнятьМатериалыИзТехКарты Тогда
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ"               , "МатериальныеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать"           , Ложь);
				СоответствиеТЧОснования.Вставить("МатериальныеЗатраты", СоответствиеЗаполнения);
			КонецЕсли;
			
			Если ПараметрыЗаполнения.ЗаполнятьИсполнителейИзТехКарты Тогда
				СоответствиеЗаполнения = Новый Соответствие();
				СоответствиеЗаполнения.Вставить("ИмяТЧ"           , "ТрудовыеЗатраты");
				СоответствиеЗаполнения.Вставить("Разбивать"       , ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот"));
				СоответствиеТЧОснования.Вставить("ТрудовыеЗатраты", СоответствиеЗаполнения);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(ЭтотОбъект.Ссылка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			
			СоответствиеЗаполнения = Новый Соответствие();
			СоответствиеЗаполнения.Вставить("ИмяТЧ"               , "Инструменты");
			СоответствиеЗаполнения.Вставить("Разбивать"           , Ложь);
			СоответствиеТЧОснования.Вставить("ИнструментыИТехника", СоответствиеЗаполнения);
			
			СоответствиеЗаполнения = Новый Соответствие();
			СоответствиеЗаполнения.Вставить("ИмяТЧ"            , "МерыБезопасности");
			СоответствиеЗаполнения.Вставить("Разбивать"        , Ложь);
			СоответствиеТЧОснования.Вставить("МерыБезопасности", СоответствиеЗаполнения);
			
		КонецЕсли;
		
		торо_Ремонты.ЗаполнитьНормативыРемонтнойРаботы(ЭтотОбъект,
		СтрокаРемРабот,
		ТехКартаРемонта,
		СоответствиеТЧОснования);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция - Расчитать текущую стоимость гранд
//
// Параметры:
//  База				 - Число - База.
//  ОбъектРемонта		 - СправочникСсылка.торо_ОбъектыРемонтов - Объект ремонта.
//  ВидРемонтныхРабот	 - СправочникСсылка.торо_ВидыРемонтов - Вид ремонтных работ.
//  Подрядчик			 - СправочникСсылка.СтруктураПредприятия, СправочникСсылка.Контрагенты - Подрядчик.
// Возвращаемое значение:
//  Число - Рассчитанная стоимость.
Функция РасчитатьТекущуюСтоимостьГранд(База, ОбъектРемонта,ВидРемонтныхРабот, Подрядчик)Экспорт
	
	ИтогК = 1.;
	
	// текущая стоимость
	МассивФилиалов = Новый Массив;
	МассивПодразделений = Новый Массив;
	МассивНаправлений = Новый Массив;
	МассивВидОборудования = Новый Массив;
	МассивОбъектов = Новый Массив;
	МассивВидовРемонта = Новый Массив;
	
	МассивФилиалов.Добавить(?(ОбъектРемонта.ВнешнийОбъект, 
	Справочники.Организации.ПустаяСсылка(), 
	ОбъектРемонта.Организация));
	МассивФилиалов.Добавить(Справочники.Организации.ПустаяСсылка());
	
	МассивПодразделений.Добавить(?(ОбъектРемонта.ВнешнийОбъект,
	Справочники.СтруктураПредприятия.ПустаяСсылка(),
	ОбъектРемонта.Подразделение));
	МассивПодразделений.Добавить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	
	МассивНаправлений.Добавить(ОбъектРемонта.Направление);
	МассивНаправлений.Добавить(Справочники.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка());
	
	МассивОбъектов.Добавить(ОбъектРемонта);
	МассивОбъектов.Добавить(Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
	
	МассивВидовРемонта.Добавить(ВидРемонтныхРабот);
	
	ИтогК = ИтогК * ПолучитьЗначенияКоэффициентов(ТекущаяДата(),МассивФилиалов,
	МассивПодразделений, МассивНаправлений, МассивВидОборудования, 
	МассивОбъектов, МассивВидовРемонта, Подрядчик);
	
	Возврат База * ИтогК;
	
КонецФункции


#Область КомандыЗаполненияПоНормамИПоОснованию

Процедура УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(ТаблицаДокумента, ТаблицаДанных, КлючевыеПоля)
	
	ТаблицаДляСвертки = ТаблицаДанных.Скопировать();
	ТаблицаДляСвертки.Свернуть(КлючевыеПоля);
	СтруктураПоиска = Новый Структура(КлючевыеПоля);
	
	Для каждого СтрокаИД из ТаблицаДляСвертки Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИД);
		МассивСтрок = ТаблицаДокумента.НайтиСтроки(СтруктураПоиска);
		Для каждого СтрокаКУдалению из МассивСтрок Цикл
			ТаблицаДокумента.Удалить(СтрокаКУдалению);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть Исполнители(ТрудовыеЗатраты) по данным из тех.операций и тех.карт.
Процедура ЗаполнитьИсполнителейПоНормам(Форма, ИДТекущейОперации = Неопределено, ИДТекущегоРемонта = Неопределено, ИмяТЧ = "ТрудовыеЗатраты") Экспорт
	
	СтруктураТаблиц = Новый Структура("ТрудовыеЗатраты");
	
	МассивДанныхЗаполнения = ПолучитьДанныеДляЗаполненияЗатратПоНормам(Форма, СтруктураТаблиц, ИДТекущейОперации, ИДТекущегоРемонта);
	
	Для каждого СтруктураДанныхЗаполнения из МассивДанныхЗаполнения Цикл 
		Если СтруктураДанныхЗаполнения.СтруктураТаблиц.ТрудовыеЗатраты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДляСвертки = СтруктураДанныхЗаполнения.СтруктураТаблиц.ТрудовыеЗатраты.Скопировать();
		ТаблицаДляСвертки.Свернуть("ID");
		СтруктураПоиска = Новый Структура("ID, РемонтыОборудования_ID");
		
		Для каждого СтрокаИД из ТаблицаДляСвертки Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИД);
			СтруктураПоиска.РемонтыОборудования_ID = СтруктураДанныхЗаполнения.РемонтыОборудования_ID;
			МассивСтрок = Форма.Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаКУдалению из МассивСтрок Цикл
				Форма.Объект[ИмяТЧ].Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтрокаНормы из СтруктураДанныхЗаполнения.СтруктураТаблиц.ТрудовыеЗатраты Цикл
			КоличествоСтрок = Макс(1, СтрокаНормы.Количество);
			Для Инд = 1 по КоличествоСтрок Цикл
				НовСтр = Форма.Объект[ИмяТЧ].Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаНормы);
				НовСтр.ID = СтруктураДанныхЗаполнения.ID;
				НовСтр.РемонтыОборудования_ID = СтруктураДанныхЗаполнения.РемонтыОборудования_ID;
				НовСтр.ДатаНачала = СтруктураДанныхЗаполнения.ДатаНачала;
				НовСтр.ДатаОкончания = СтруктураДанныхЗаполнения.ДатаОкончания;
				НовСтр.КТУ = 1;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет табличную часть МатериальныеЗатраты по данным из тех.операций и тех.карт.
Процедура ЗаполнитьМатериалыПоНормам(Форма, ИДТекущейОперации = Неопределено, ИДТекущегоРемонта = Неопределено, ИмяТЧ = "МатериальныеЗатраты") Экспорт
	
	СтруктураТаблиц = Новый Структура("МатериальныеЗатраты");
	
	МассивДанныхЗаполнения = ПолучитьДанныеДляЗаполненияЗатратПоНормам(Форма, СтруктураТаблиц, ИДТекущейОперации, ИДТекущегоРемонта);
	
	Для каждого СтруктураДанныхЗаполнения из МассивДанныхЗаполнения Цикл 
		Если СтруктураДанныхЗаполнения.СтруктураТаблиц.МатериальныеЗатраты = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаДляСвертки = СтруктураДанныхЗаполнения.СтруктураТаблиц.МатериальныеЗатраты.Скопировать();
		ТаблицаДляСвертки.Свернуть("ID");
		СтруктураПоиска = Новый Структура("ID, РемонтыОборудования_ID");
		
		Для каждого СтрокаИД из ТаблицаДляСвертки Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаИД);
			СтруктураПоиска.РемонтыОборудования_ID = СтруктураДанныхЗаполнения.РемонтыОборудования_ID;
			МассивСтрок = Форма.Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
			Для каждого СтрокаКУдалению из МассивСтрок Цикл
				Форма.Объект[ИмяТЧ].Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЦикла;
		
		Для каждого СтрокаНормы из СтруктураДанныхЗаполнения.СтруктураТаблиц.МатериальныеЗатраты Цикл
			НовСтр = Форма.Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаНормы);
			НовСтр.ID = СтруктураДанныхЗаполнения.ID;
			НовСтр.РемонтыОборудования_ID = СтруктураДанныхЗаполнения.РемонтыОборудования_ID;
			
			НовСтр.ЕдиницаИзмерения = СтрокаНормы.Упаковка;
			Коэффициент = НовСтр.ЕдиницаИзмерения.Коэффициент;
			Если Коэффициент = 0 Тогда
				Коэффициент = 1;
			КонецЕсли;
			НовСтр.КоличествоЕдиниц = СтрокаНормы.КоличествоУпаковок * Коэффициент;
			НовСтр.ХарактеристикаНоменклатуры = СтрокаНормы.Характеристика;
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицы Исполнители, Подрядчики, ТрудовыеЗатраты из данных документов-оснований.
Процедура ЗаполнитьИсполнителейПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта) Экспорт
	
	Объект = Форма.Объект;
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта, "Исполнители");
	
	ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения);
	ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьИсполнителейПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения)
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.Исполнители, ДанныеДляЗаполнения.Исполнители, "ID, РемонтыОборудования_ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Исполнители Цикл
			КоличествоСтрок = СтрокаДанных.Количество;
			Для Счетчик = 1 По КоличествоСтрок Цикл 				
				НовСтр = Объект.Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда	
		
		ИспользоватьУсложненнуюСхемуЗакрытияНарядов = Константы.торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов.Получить();
		СтруктураПоискаОперации = Новый Структура("РемонтыОборудования_ID, ID");
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.ТрудовыеЗатраты, ДанныеДляЗаполнения.Исполнители, "ID, РемонтыОборудования_ID");
		
		Если ТипЗнч(ДанныеДляЗаполнения.Исполнители) = Тип("ТаблицаЗначений") Тогда
			Для каждого СтрокаДанных из ДанныеДляЗаполнения.Исполнители Цикл
				НовСтр = Объект.ТрудовыеЗатраты.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
			КонецЦикла;
		Иначе
			Для каждого СтрокаДанных из ДанныеДляЗаполнения.Исполнители Цикл
				КоличествоСтрок = СтрокаДанных.Количество;
				Для Счетчик = 1 По КоличествоСтрок Цикл
					НовСтр = Объект.ТрудовыеЗатраты.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПодрядчиковПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения)
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.Подрядчики, ДанныеДляЗаполнения.Подрядчики, "ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Подрядчики Цикл
			НовСтр = Объект.Подрядчики.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
		КонецЦикла;

	ИначеЕсли ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") 
		ИЛИ ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда	
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.ПодрядчикиРемонтныхРабот, ДанныеДляЗаполнения.Подрядчики, "ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Подрядчики Цикл
			НовСтр = Объект.ПодрядчикиРемонтныхРабот.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу МатериальныеЗатраты из данных документов-оснований.
Процедура ЗаполнитьМатериалыПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта) Экспорт
	
	Объект = Форма.Объект;
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованию(Форма, ИДТекущейОперации, ИДТекущегоРемонта, "Материалы");
	ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения);
		
КонецПроцедуры

Процедура ЗаполнитьМатериалыПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения)
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда	
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.МатериальныеЗатраты, ДанныеДляЗаполнения.Материалы, "ID, РемонтыОборудования_ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Материалы Цикл
			НовСтр = Объект.МатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет табличную часть СерийныеЗапчасти по данным из тех.операций и тех.карт.
Процедура ЗаполнитьЗапчастиПоНормам(Форма, ИДТекущегоРемонта = Неопределено) Экспорт
	
	ИмяТаблицыРемонтов = "РемонтыОборудования";
	Объект = Форма.Объект;

	ТаблицаРемонтов = Новый ТаблицаЗначений;
	ТаблицаРемонтов.Колонки.Добавить("РемонтыОборудования_ID", Новый ОписаниеТипов("Строка"));
	ТаблицаРемонтов.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаРемонтов.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	
	Если ИДТекущегоРемонта <> Неопределено Тогда
		ТекущийРемонт = Форма.Объект[ИмяТаблицыРемонтов].НайтиПоИдентификатору(ИДТекущегоРемонта);
		Если ТекущийРемонт = Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого	СтрокаРемонта из Объект[ИмяТаблицыРемонтов] Цикл
		Если ИДТекущегоРемонта = Неопределено 
			ИЛИ ТекущийРемонт.ID = СтрокаРемонта.ID Тогда
			НовСтр = ТаблицаРемонтов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаРемонта);
			НовСтр.РемонтыОборудования_ID = СтрокаРемонта.ID;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаЗапчастей = ПолучитьДанныеДляЗаполненияЗапчастейПоНормам(ТаблицаРемонтов);
	
	УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.СерийныеЗапчасти, ТаблицаЗапчастей, "РемонтыОборудования_ID");
	
	Для каждого Строка из ТаблицаЗапчастей Цикл
		НовСтр = Объект.СерийныеЗапчасти.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, Строка);
	КонецЦикла;
	
КонецПроцедуры

// Заполняет таблицу МатериальныеЗатраты из данных документов-оснований.
Процедура ЗаполнитьЗапчастиПоОснованию(Форма, ИДТекущегоРемонта) Экспорт
	
	Объект = Форма.Объект;
	ДанныеДляЗаполнения = ПолучитьДанныеДляЗаполненияПоОснованию(Форма, Неопределено, ИДТекущегоРемонта, "Запчасти");
	ЗаполнитьЗапчастиПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьЗапчастиПоДаннымЗаполненияНаОсновании(Объект, ДанныеДляЗаполнения)
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда	
		
		УдалитьСтарыеСтрокиИзТаблицыПередЗаполнением(Объект.СерийныеЗапчасти, ДанныеДляЗаполнения.Запчасти, "РемонтыОборудования_ID");
		
		Для каждого СтрокаДанных из ДанныеДляЗаполнения.Запчасти Цикл
			НовСтр = Объект.СерийныеЗапчасти.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаДанных);
		КонецЦикла;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РаботаСоСвязаннымиДокументами
// Функции нахождения связанных документов и Ремонтных работ по ID

// Функция проверяет документ на связь с документов "Акт о выполнении этапа работ"
//
Функция ПроверитьДокументНаСвязьСАктом(СсылкаНаТекущийДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка,
	|	торо_АктОВыполненииЭтапаРаботДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_АктОВыполненииЭтапаРаботДокументыОснования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботДокументыОснования.ДокументОснование = &Ссылка
	|	И торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийДокумент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		МассивДокументовОснований = Новый Массив(ВыборкаДетальныеЗаписи.Количество());
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивДокументовОснований.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	Иначе
		МассивДокументовОснований = Неопределено;
	КонецЕсли;	
	Возврат МассивДокументовОснований;
КонецФункции

// Функция проверяет документ на связь с документом "Наряд на выполнение ремонтных работ".
//
Функция ПроверитьДокументНаСвязьСНарядом(СсылкаНаТекущийДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.Ссылка,
	|	торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ДокументыОснования КАК торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования
	|ГДЕ
	|	торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.ДокументОснование = &Ссылка
	|	И торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийДокумент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		МассивДокументовОснований = Новый Массив(ВыборкаДетальныеЗаписи.Количество());
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивДокументовОснований.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	Иначе
		МассивДокументовОснований = Неопределено;
	КонецЕсли;	
	Возврат МассивДокументовОснований;
КонецФункции

// Функция проверяет документ на связь с документов "Смета ремонта(заявка на ремонт)".
//
Функция ПроверитьДокументНаСвязьСЗаявкой(СсылкаНаТекущийДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтДокументыОснования.Ссылка,
	|	торо_ЗаявкаНаРемонтДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ДокументыОснования КАК торо_ЗаявкаНаРемонтДокументыОснования
	|ГДЕ
	|	торо_ЗаявкаНаРемонтДокументыОснования.ДокументОснование = &Ссылка
	|	И торо_ЗаявкаНаРемонтДокументыОснования.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийДокумент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		МассивДокументовОснований = Новый Массив(ВыборкаДетальныеЗаписи.Количество());
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивДокументовОснований.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	Иначе
		МассивДокументовОснований = Неопределено;
	КонецЕсли;	
	Возврат МассивДокументовОснований;
КонецФункции

// Функция првоеряет документ на связь с документом "Внутренний заказ"
//
Функция ПроверитьДокументНаСвязьСВнутреннимЗаказом(СсылкаНаТекущийДокумент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнутреннийЗаказ.Ссылка,
	|	ВнутреннийЗаказ.ДокументОснование
	|ИЗ
	|	Документ.ВнутреннийЗаказ КАК ВнутреннийЗаказ
	|ГДЕ
	|	ВнутреннийЗаказ.ДокументОснование = &Ссылка
	|	И ВнутреннийЗаказ.ДокументОснование.Ссылка.Проведен";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийДокумент);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		МассивДокументовОснований = Новый Массив(ВыборкаДетальныеЗаписи.Количество());
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивДокументовОснований.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	Иначе
		МассивДокументовОснований = Неопределено;
	КонецЕсли;	
	Возврат МассивДокументовОснований;
КонецФункции	

// Функция проверяет документ на наличие связанных документов по ID
// 
Функция ПроверитьДокументНаСвязанныеДокументыПоID(СсылкаНаТекущийДокумент, МассивID) Экспорт
	
	// Проверяем, что переданная ссылка не пустая. В противном случае следующий запрос вернёт ссылки на документы, 
	// у которых документ-основание не заполнен, что неверно.
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаТекущийДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_РемонтДокументыОснования.Ссылка,
	|	торо_РемонтДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ДокументыОснования КАК торо_РемонтДокументыОснования
	|ГДЕ
	|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
	|	И торо_РемонтДокументыОснования.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_РемонтДокументыОснования.Ссылка,
	|	торо_РемонтДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_РемонтДокументыОснования
	|ГДЕ
	|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
	|	И торо_РемонтДокументыОснования.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_РемонтДокументыОснования.Ссылка,
	|	торо_РемонтДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ДокументыОснования КАК торо_РемонтДокументыОснования
	|ГДЕ
	|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
	|	И торо_РемонтДокументыОснования.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_РемонтДокументыОснования.Ссылка,
	|	торо_РемонтДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_ПланГрафикРемонта КАК торо_РемонтДокументыОснования
	|ГДЕ
	|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
	|	И торо_РемонтДокументыОснования.Ссылка.Проведен";		
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗначенийДокументов = Результат.Выгрузить();
	СтрокаТаблицыЗначенийДокументов = ТаблицаЗначенийДокументов.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_Ремонты.ID,
	|	торо_Ремонты.ОбъектРемонта,
	|	торо_Ремонты.Регистратор
	|ИЗ
	|	РегистрСведений.торо_Ремонты КАК торо_Ремонты
	|ГДЕ
	|	торо_Ремонты.ID В(&ID)
	|И торо_Ремонты.Регистратор В (&ТК)";
	
	Запрос.УстановитьПараметр("ID", МассивID);
	Запрос.УстановитьПараметр("ТК",СтрокаТаблицыЗначенийДокументов);	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		МассивIDДляБлокировки = Новый СписокЗначений;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если МассивIDДляБлокировки.НайтиПоЗначению(ВыборкаДетальныеЗаписи.ID) = Неопределено Тогда
				МассивIDДляБлокировки.Добавить(ВыборкаДетальныеЗаписи.ID);
			КонецЕсли;	
		КонецЦикла;
	Иначе
		МассивIDДляБлокировки = Неопределено;
	КонецЕсли;	
	Возврат МассивIDДляБлокировки;
КонецФункции

// Функция возвращает массив ID ремонтов которые не должны изменяться.
// 
Функция МассивIDДляБлокировкиРемонтовОборудования(СсылкаНаТекущийДокумент, МассивID) Экспорт
	
	// Проверяем, что переданная ссылка не пустая. В противном случае следующий запрос вернёт ссылки на документы, 
	// у которых документ-основание не заполнен, что неверно.
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаТекущийДокумент) И МассивID.Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";
	
	ПервыйЗапрос = Истина;
	
	Если Не ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		|	РемонтыОборудования.ID
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_РемонтДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК РемонтыОборудования
		|		ПО (торо_РемонтДокументыОснования.ДокументОснование = &Ссылка)
		|			И (торо_РемонтДокументыОснования.Ссылка.Проведен)
		|			И торо_РемонтДокументыОснования.Ссылка = РемонтыОборудования.Ссылка
		|			И (РемонтыОборудования.ID В (&МассивID))";
		ПервыйЗапрос = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьСметыРемонта") 
		И (ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
		Или ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот")) Тогда
		
		Если ПервыйЗапрос Тогда
			ПервыйЗапрос = Ложь;
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ВЫБРАТЬ
		|	РемонтыОборудования.ID
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.ДокументыОснования КАК торо_РемонтДокументыОснования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК РемонтыОборудования
		|		ПО (торо_РемонтДокументыОснования.ДокументОснование = &Ссылка)
		|			И (торо_РемонтДокументыОснования.Ссылка.Проведен)
		|			И торо_РемонтДокументыОснования.Ссылка = РемонтыОборудования.Ссылка
		|			И (РемонтыОборудования.ID В (&МассивID))";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядыНаВыполнениеРабот") 
		И (ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ВыявленныеДефекты")
		Или ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот")
		Или ТипЗнч(СсылкаНаТекущийДокумент) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")) Тогда
		
		Если ПервыйЗапрос Тогда
			ПервыйЗапрос = Ложь;
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ВЫБРАТЬ
		|	РемонтыОборудования.ID
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК РемонтыОборудования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.ДокументыОснования КАК торо_РемонтДокументыОснования
		|		ПО (торо_РемонтДокументыОснования.ДокументОснование = &Ссылка)
		|			И (торо_РемонтДокументыОснования.Ссылка.Проведен)
		|			И торо_РемонтДокументыОснования.Ссылка = РемонтыОборудования.Ссылка
		|			И (РемонтыОборудования.ID В (&МассивID))";
	КонецЕсли;
	
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьАктПриемкиОборудования") Тогда
		
		Если ПервыйЗапрос Тогда
			ПервыйЗапрос = Ложь;
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ВЫБРАТЬ
		|	РемонтыОборудования.ID
		|ИЗ
		|	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК РемонтыОборудования
		|ГДЕ
		|	РемонтыОборудования.Ссылка.Проведен
		|	И РемонтыОборудования.ID В (&МассивID)";
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьВозможностьОтменыРемонтов") Тогда
		
		Если ПервыйЗапрос Тогда
			ПервыйЗапрос = Ложь;
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|
			|ОБЪЕДИНИТЬ ВСЕ";
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|
		|ВЫБРАТЬ
		|	торо_ОтмененныеРемонты.ID
		|ИЗ
		|	РегистрСведений.торо_ОтмененныеРемонты КАК торо_ОтмененныеРемонты
		|ГДЕ
		|	торо_ОтмененныеРемонты.ID В(&МассивID)";
	КонецЕсли;
	
	Если Запрос.Текст = "" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийДокумент);
	Запрос.УстановитьПараметр("МассивID", МассивID);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗначенийДокументов = Результат.Выгрузить();
	МассивIDСДублями = ТаблицаЗначенийДокументов.ВыгрузитьКолонку("ID");
	
	
	Если МассивIDСДублями.Количество()>0 Тогда
		МассивIDДляБлокировки = Новый Массив;
		
		Для Каждого ЭлементМассиваСДублями Из МассивIDСДублями Цикл
			Если МассивIDДляБлокировки.Найти(ЭлементМассиваСДублями) = Неопределено Тогда
				МассивIDДляБлокировки.Добавить(ЭлементМассиваСДублями);
			КонецЕсли;	
		КонецЦикла;
	Иначе
		МассивIDДляБлокировки = Неопределено;
	КонецЕсли;	
	
	Возврат МассивIDДляБлокировки;
	
КонецФункции

// Функция - Проверить документ на связанные документы регл мероприятий по ID.
//
// Параметры:
//  СсылкаНаТекущийДокумент	 - ДокументСсылка - Ссылка на текущий документ.
//  МассивID				 - Массив - Массив идентификаторов.
// Возвращаемое значение:
//  Массив - Массив идентификаторов для блокировки.
Функция ПроверитьДокументНаСвязанныеДокументыРеглМероприятийПоID(СсылкаНаТекущийДокумент, МассивID) Экспорт
	
	// Проверяем, что переданная ссылка не пустая. В противном случае следующий запрос вернёт ссылки на документы, 
	// у которых документ-основание не заполнен, что неверно.
	//
	Если НЕ ЗначениеЗаполнено(СсылкаНаТекущийДокумент) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	торо_РемонтДокументыОснования.Ссылка,
	|	торо_РемонтДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.ДокументыОснования КАК торо_РемонтДокументыОснования
	|ГДЕ
	|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
	|	И торо_РемонтДокументыОснования.Ссылка.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_РемонтДокументыОснования.Ссылка,
	|	торо_РемонтДокументыОснования.ДокументОснование
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.ДокументыОснования КАК торо_РемонтДокументыОснования
	|ГДЕ
	|	торо_РемонтДокументыОснования.ДокументОснование = &Ссылка
	|	И торо_РемонтДокументыОснования.Ссылка.Проведен";		
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаТекущийДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТаблицаЗначенийДокументов = Результат.Выгрузить();
	СтрокаТаблицыЗначенийДокументов = ТаблицаЗначенийДокументов.ВыгрузитьКолонку("Ссылка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_Ремонты.ID,
	|	торо_Ремонты.ОбъектРемонта,
	|	торо_Ремонты.Регистратор
	|ИЗ
	|	РегистрСведений.торо_Ремонты КАК торо_Ремонты
	|ГДЕ
	|	торо_Ремонты.ID В(&ID)
	|И торо_Ремонты.Регистратор В (&ТК)";
	
	Запрос.УстановитьПараметр("ID", МассивID);
	Запрос.УстановитьПараметр("ТК",СтрокаТаблицыЗначенийДокументов);	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество()>0 Тогда
		МассивIDДляБлокировки = Новый Массив();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если МассивIDДляБлокировки.Найти(ВыборкаДетальныеЗаписи.ID) = Неопределено Тогда
				МассивIDДляБлокировки.Добавить(ВыборкаДетальныеЗаписи.ID);
			КонецЕсли;	
		КонецЦикла;
	Иначе
		МассивIDДляБлокировки = Неопределено;
	КонецЕсли;	
	Возврат МассивIDДляБлокировки;
КонецФункции

// Запрет изменения
Процедура торо_ЗапретИзмененияПроведенныхПриНаличииСозданныхНаОснованииПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.БезусловнаяЗапись = Истина Или Источник.ЭтоНовый() Или (Не Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Возврат;
	КонецЕсли; 
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		СвязанныеДокументы = КритерииОтбора.СвязанныеДокументы.Найти(Источник.Ссылка);
		
		ЕстьСвязанныеПроведенные = Ложь;
		Для Каждого СвязанныйДокумент Из СвязанныеДокументы Цикл
			Если СвязанныйДокумент.Проведен Тогда
				ЕстьСвязанныеПроведенные = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьСвязанныеПроведенные Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				Сообщение.Текст = НСтр("ru = 'Невозможно проведение документа, есть документы, введенные на основании данного!'");
			ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				Сообщение.Текст = НСтр("ru = 'Нельзя отменять проведение документа, имеющего связанные документы!'");
			КонецЕсли;
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область РаботаСОповещениями
// Функция возвращает тег
//
Функция ПолучитьТег(ПереданнаяСтрока, Открывающий, Закрывающий) Экспорт
	Тег = "";
	Открывающий = Найти(ПереданнаяСтрока,"<%");
	Если  Открывающий > 0 Тогда
		Закрывающий = Найти(ПереданнаяСтрока,"%>");
		Если  (Закрывающий > 0) И (Закрывающий > Открывающий) Тогда
			Тег = (Сред(ПереданнаяСтрока,Открывающий+2,Закрывающий-Открывающий-2));
		КонецЕсли;	
	КонецЕсли;	
	Возврат Тег;	
КонецФункции   

#Область РаботаСТипами

// Служебная функция, предназначенная для получения описания типов ремонтов
//
// Параметры:
//  Нет.
//
// Возвращаемое значение: 
//  Таблица значений с колонками "Объект" типа "СправочникСсылка.торо_ОбъектыРемонта"
//  и "Ремонт" типа "СправочникСсылка.торо_Ремонты".
// 
Функция СоздатьТаблицуЗначенийРемонтов() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Объект", ПолучитьОписаниеТиповОбъектыРемонта());
	Результат.Колонки.Добавить("Ремонт", ПолучитьОписаниеТиповРемонты());
	Возврат Результат;
	
КонецФункции

// Служебная функция, предназначенная для получения таблицы инструментов ремонта
//
// Параметры:
//  Ремонт         - ремонт для которого получаются инструменты.
//
// Возвращаемое значение: 
//  ВозвращаемаяТЗ - таблица значений трудозатрат ремонта.
//
Функция ПолучитьИнструментыПоРемонту(Ремонт) Экспорт
	
	ВозвращаемаяТЗ = Новый ТаблицаЗначений;
	ВозвращаемаяТЗ.Колонки.Добавить("Инструмент", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ВозвращаемаяТЗ.Колонки.Добавить("Количество", ПолучитьОписаниеТиповНеотрицательногоЧисла(15, 4));
	
	Для Каждого Операция Из Ремонт.СписокОпераций Цикл
		Если ТипЗнч(Операция.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			// это вложенный ремонт попался
			ВложеннаяТЗ = ПолучитьИнструментыПоРемонту(Операция.Операция).Скопировать();
			
			Для Каждого ТекСтрока Из ВложеннаяТЗ Цикл
				НоваяСтрока = ВозвращаемаяТЗ.Добавить();
				НоваяСтрока.Инструмент = ТекСтрока.Инструмент;
				НоваяСтрока.Количество = ТекСтрока.Количество;
			КонецЦикла;
			
		Иначе
			
			СтруктураОтбора = Новый Структура("Операция, ID", Операция.Операция, Операция.ID);
			
			МассивИнструментов = Ремонт.ИнструментыИТехника.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого ЗаписьИнструмент Из МассивИнструментов Цикл
				
				НоваяСтрока = ВозвращаемаяТЗ.Добавить();
				НоваяСтрока.Инструмент = ЗаписьИнструмент.Инструмент;
				
				КоэффициентЕХО = ЗаписьИнструмент.Инструмент.ЕдиницаХраненияОстатков.Коэффициент;
				КоэффициентЕИ  = ЗаписьИнструмент.ЕдиницаИзмерения.Коэффициент;
				
				НоваяСтрока.Количество = ?(КоэффициентЕХО = 0, 
				0, ЗаписьИнструмент.Количество * КоэффициентЕИ / КоэффициентЕХО);
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемаяТЗ;
	
КонецФункции  // ПолучитьИнструментыПоРемонту()

// Процедура предназначена для свертки таблицы трудозатрат ремонта
//
// Параметры:
//  Трудозатраты  - таблица значений трудозатрат ремонта должна содержать колонки
//					"Квалификация" и "Количество".
//
Процедура СвернутьТрудозатратыРемонта(Трудозатраты) Экспорт
	
	Трудозатраты.Свернуть("Квалификация", "Количество");
	
КонецПроцедуры // СвернутьТрудозатратыРемонта()

// Служебная функция, предназначенная для получения таблицы плановых и фактических трудозатрат ремонтов.
//
// Параметры:
//  Факт           - строка дерева значений фактических трудозатрат.
//  План           - строка дерева значений плановых трудозатрат.
//
// Возвращаемое значение: 
//  ВозвращаемаяТЗ - таблица значений план-фактных трудозатрат ремонта.
// 
Функция СоздатьТаблицуТрудозатратПланФакт(Факт, План) Экспорт
	
	ВозвращаемаяТЗ = Новый ТаблицаЗначений;
	ВозвращаемаяТЗ.Колонки.Добавить("Квалификация", Новый ОписаниеТипов("СправочникСсылка.торо_КвалификацииРемонтногоПерсонала"));
	ВозвращаемаяТЗ.Колонки.Добавить("СуммаПлан", ПолучитьОписаниеТиповНеотрицательногоЧисла(15, 2));
	ВозвращаемаяТЗ.Колонки.Добавить("СуммаФакт", ПолучитьОписаниеТиповНеотрицательногоЧисла(15, 2));
	Для Каждого Стр Из План Цикл
		НоваяСтр = ВозвращаемаяТЗ.Добавить();
		НоваяСтр.Квалификация = Стр.Квалификация;
		НоваяСтр.СуммаПлан = Стр.Квалификация.СтоимостьНормочаса * Стр.Количество;
		СтрФакт = Факт.Найти(Стр.Квалификация, "Квалификация");
		Если СтрФакт <> Неопределено Тогда
			НоваяСтр.СуммаФакт = СтрФакт.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Стр Из Факт Цикл
		ВозврСтр = ВозвращаемаяТЗ.Найти(Стр.Квалификация, "Квалификация");
		Если ВозврСтр = Неопределено Тогда
			ВозврСтр = ВозвращаемаяТЗ.Добавить();
			ВозврСтр.Квалификация = Стр.Квалификация;
			ВозврСтр.СуммаФакт = Стр.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозвращаемаяТЗ;
	
КонецФункции // СоздатьТаблицуТрудозатратПланФакт()

// Функция возвращает имя ТЧ ремонтов в документе. Если получить значение не удалось - возвращается Неопределено.
//
//	Параметры
//		Документ 	- ссылка на документ, для которонр требуется выполнить проверку.
//
Функция ПолучитьИмяТЧРемонтов(ДокументНаПроверку) Экспорт
	ТипДокумента = ТипЗнч(ДокументНаПроверку);
	
	Если ТипДокумента = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ИмяТЧРемонтов = "СписокДефектов";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ИмяТЧРемонтов = "ОбследованноеОборудование";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ПланГрафикРемонта") 
			ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
			
		ИмяТЧРемонтов = "ПланРемонтов";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") 
			ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")
			ИЛИ ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
			
		ИмяТЧРемонтов = "РемонтыОборудования";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ИмяТЧРемонтов = "Мероприятия";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ИмяТЧРемонтов = "РегламентныеМероприятия";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ИмяТЧРемонтов;
КонецФункции

#КонецОбласти 

#Область РассчетПродолжительностиРемонтныхРабот

// Расчет продолжительности ремонта в часах рекурсивно
// Параметр:
//     Ремонт - торо_Ремонт.
// Возвращаемое значение:
//     Число - суммарная продолжительность операций ремонта.
Функция РасчитатьПродолжительностьРемонтаВЧасах(Ремонт) Экспорт
	
	Сумма = 0;
	Для Каждого СтрокаСпискаОпераций Из Ремонт.СписокОпераций Цикл
		Сумма = Сумма + ?(ТипЗнч(СтрокаСпискаОпераций.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"),
		РасчитатьПродолжительностьРемонтаВЧасах(СтрокаСпискаОпераций.Операция),
		СтрокаСпискаОпераций.Продолжительность / 3600);
	КонецЦикла;
	Возврат Сумма;	
КонецФункции // РасчитатьПродолжительностьРемонта

// Функция рекурсивно рассчитывает продолжительность ремонта (в секундах).
//
// Параметры
//  РемонтОбъект  – СправочникиОбъекта.торо_ИдентификаторыТехКарт – ремонт, продолжительность
//                 	которого необходимо рассчитать.
//
Функция РассчитатьПродолжительностьРемонтаВСекундах(РемонтОбъект) Экспорт
	
	Сумма = 0;
	Для Каждого СтрокаСпискаОпераций Из РемонтОбъект.СписокОпераций Цикл
		Сумма = Сумма + ?(ТипЗнч(СтрокаСпискаОпераций.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"),
		РассчитатьПродолжительностьРемонтаВСекундах(СтрокаСпискаОпераций.Операция),
		СтрокаСпискаОпераций.НормаВремениВСекундах);
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // РассчитатьПродолжительностьВСекундах()
#КонецОбласти 

#КонецОбласти

#Область РаботаСТипами

// Служебная функция, предназначенная для получения описания типов ремонтов
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для "СправочникСсылка.торо_ИдентификаторыТехКарт".
//
Функция ПолучитьОписаниеТиповРемонты()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции

// Служебная функция, предназначенная для получения описания типов объектов ремонтов.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для "СправочникСсылка.торо_ОбъектыРемонта".
//
Функция ПолучитьОписаниеТиповОбъектыРемонта()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	Возврат Новый ОписаниеТипов(Массив);
КонецФункции

// Служебная функция, предназначенная для получения описания типов неотрицательного числа, заданной разрядности.
// 
// Параметры:
//  ЧислоРазрядов				- число, разряд числа.
//  ЧислоРазрядовДробнойЧасти	- число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповНеотрицательногоЧисла(ЧислоРазрядов = 10, ЧислоРазрядовДробнойЧасти = 0)
	
	КЧ = Новый КвалификаторыЧисла(ЧислоРазрядов, ЧислоРазрядовДробнойЧасти, ДопустимыйЗнак.Неотрицательный);
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	Возврат Новый ОписаниеТипов(Массив, , ,КЧ);
КонецФункции
#КонецОбласти 

#КонецОбласти
