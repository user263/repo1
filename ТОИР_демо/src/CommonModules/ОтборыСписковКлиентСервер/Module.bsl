#Область ПрограммныйИнтерфейс
#Область ПроцедурыОтбораПоАктуальности

// Устанавливает переданный в форму списка документов отбор по актуальности.
//
// Параметры:
//  Список - ДинамическийСписок - список, в котором необходимо установить отбор
//  Актуальность - Строка - строка отбора по актуальности
//  ДатаСобытия - Дата - дата, на которую необходимо считать документы неактуальными
//  СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор.
//
Процедура ОтборПоАктуальностиПриСозданииНаСервере(Список, Актуальность, ДатаСобытия, Знач СтруктураБыстрогоОтбора) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		СтруктураБыстрогоОтбора.Свойство("Актуальность",   Актуальность);
		СтруктураБыстрогоОтбора.Свойство("ДатаСобытия",    ДатаСобытия);
		
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности, сохраненный в настройках.
// Отбор из настроек устанавливается только если отбор не передан в форму извне.
//
// Параметры:
//  Список - ДинамическийСписок - список, в котором необходимо установить отбор.
//  Актуальность - Строка - строка отбора по актуальности.
//  ДатаСобытия - Дата - дата, на которую необходимо считать документы неактуальными.
//  СтруктураБыстрогоОтбора - Структура - переданный в форму списка документов отбор.
//  Настройки - Соответствие - настройки формы.
//
Процедура ОтборПоАктуальностиПриЗагрузкеИзНастроек(Список, Актуальность, ДатаСобытия, Знач СтруктураБыстрогоОтбора, Настройки) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		
		Актуальность     = Настройки.Получить("Актуальность");
		ДатаСобытия      = Настройки.Получить("ДатаСобытия");
		
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия);
		
	Иначе
		
		Если Не СтруктураБыстрогоОтбора.Свойство("Актуальность") Тогда
			Актуальность = Настройки.Получить("Актуальность");
		КонецЕсли;
		
		Если Не СтруктураБыстрогоОтбора.Свойство("ДатаСобытия") Тогда
			ДатаСобытия = Настройки.Получить("ДатаСобытия");
		КонецЕсли;
		
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия);
		
	КонецЕсли;
	
	Настройки.Удалить("Актуальность");
	Настройки.Удалить("ДатаСобытия");
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности
//
// Параметры:
//  Список - ДинамическийСписок - список, в котором необходимо установить отбор
//  Актуальность - Строка - строка отбора по актуальности.
//
Процедура УстановитьОтборВСпискеПоАктуальности(Список, Актуальность) Экспорт
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"Просрочен",
		Актуальность = НСтр("ru='Просрочен'"),
		ВидСравненияКомпоновкиДанных.Равно,,
		Актуальность = НСтр("ru='Не просрочен'") ИЛИ Актуальность = НСтр("ru='Просрочен'"));
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по дате события
//
// Параметры:
//  Список - ДинамическийСписок - список, в котором необходимо установить отбор
//  ДатаСобытия - Дата - дата, на которую документ будет просрочен.
//
Процедура УстановитьОтборВСпискеПоДатеСобытия(Список, ДатаСобытия) Экспорт
	
	ВидСравненияДатыСобытия = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы,
		НСтр("ru='Отбор по дате события'"), 
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"ДатаСобытия",
		ВидСравненияДатыСобытия,
		ДатаСобытия,,
		ЗначениеЗаполнено(ДатаСобытия));
		
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора,
		"ДатаСобытия",
		ВидСравненияКомпоновкиДанных.НеРавно,
		Дата(1,1,1),,
		ЗначениеЗаполнено(ДатаСобытия));

КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности и дате актуальности.
// Изменяет значение даты актуальности в зависимости от строки актуальности.
//
// Параметры:
//  Список - ДинамическийСписок - список, в котором необходимо установить отбор.
//  Актуальность - Строка - строка отбора по актуальности.
//  ДатаСобытия - Дата - дата, на которую документы считаются неактуальными.
//
Процедура ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия) Экспорт
	
	ВидСравненияДатыСобытия = ВидСравненияКомпоновкиДанных.Равно;
	
	Если НЕ ЗначениеЗаполнено(Актуальность) Тогда
		ДатаСобытия      = Дата(1,1,1);
	ИначеЕсли Актуальность = "Сегодня" Тогда
		ДатаСобытия = ТекущаяДата();
	ИначеЕсли Актуальность = "Завтра" Тогда
		ДатаСобытия = ТекущаяДата() + 86400;
	ИначеЕсли Актуальность = "Послезавтра" Тогда
		ДатаСобытия = ТекущаяДата() + 2*86400;
	ИначеЕсли Актуальность = "Через неделю" Тогда
		ДатаСобытия = ТекущаяДата() + 7*86400;	
	// Отрабатываем старые значения, из сохранившихся настроек
	ИначеЕсли Актуальность = "Все" 
		ИЛИ Найти(Актуальность, "Истекающие на") > 0 Тогда
		Актуальность = "";
		ДатаСобытия      = Дата(1,1,1);
	ИначеЕсли Актуальность = "Просроченные" Тогда
		Актуальность = "Просрочен";
		ДатаСобытия      = Дата(1,1,1);
	ИначеЕсли Актуальность = "Не просроченные" Тогда
		Актуальность = "Не просрочен";
		ДатаСобытия      = Дата(1,1,1);
	КонецЕсли;
	
	УстановитьОтборВСпискеПоАктуальности(Список, Актуальность);
	УстановитьОтборВСпискеПоДатеСобытия(Список, ДатаСобытия);
	
КонецПроцедуры

// Устанавливает в форме списка документов отбор по актуальности и дате актуальности.
// Изменяет значение даты актуальности в зависимости от строки актуальности.
//
// Параметры:
//  Список - ДинамическийСписок - список, в котором необходимо установить отбор.
//  Актуальность - Строка - строка отбора по актуальности.
//  ДатаСобытия - Дата - дата, на которую документ будет просрочен.
//  СтандартнаяОбработка - Булево - флаг выполнения стандартной обработки при очистке значения поля.
//
Процедура ПриОчисткеОтбораПоАктуальности(Список, Актуальность, ДатаСобытия, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Актуальность) Тогда
		Актуальность = "";
		ПриИзмененииОтбораПоАктуальности(Список, Актуальность, ДатаСобытия);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список выбора для отбора по актуальности
//
// Параметры:
// 	СписокВыбораАктуальности - СписокВыбора - список выбора, который необходимо заполнить.
//
Процедура ЗаполнитьСписокВыбораОтбораПоАктуальности(СписокВыбораАктуальности) Экспорт
	
	СписокВыбораАктуальности.Добавить("Не просрочен",     НСтр("ru='Не просрочен'"));
	СписокВыбораАктуальности.Добавить("Просрочен",        НСтр("ru='Просрочен'"));
	СписокВыбораАктуальности.Добавить("Истекает на дату", НСтр("ru='Истекает на дату...'"));
	СписокВыбораАктуальности.Добавить("Сегодня",          НСтр("ru='Сегодня'"));
	СписокВыбораАктуальности.Добавить("Завтра",           НСтр("ru='Завтра'"));
	СписокВыбораАктуальности.Добавить("Послезавтра",      НСтр("ru='Послезавтра'"));
	СписокВыбораАктуальности.Добавить("Через неделю",     НСтр("ru='Через неделю'"));
	
КонецПроцедуры

#КонецОбласти

// ПРОЦЕДУРЫ ОТБОРА ПО ЗНАЧЕНИЮ СПИСКОВ

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора.
//
// Параметры:
//  Список - ДинамическийСписок - динамический список, для которого треюуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - Произвольный - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора.
//
Процедура ОтборПоЗначениюСпискаПриСозданииНаСервере(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Использование = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	Если СтруктураБыстрогоОтбора <> Неопределено Тогда
		
		Если СтруктураБыстрогоОтбора.Свойство(ИмяКолонки, Значение) Тогда
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтборПоЗначениюСпискаПриСозданииНаСервере()

// Устанавливает отбор в списке по указанному значению для нужной колонки
// с учетом переданной структуры быстрого отбора и переданных настроек.
//
// Параметры:
//  Список - ДинамическийСписок - динамический список, для которого треюуется установить отбор
//  ИмяКолонки - Строка - Имя колонки, по которой устанавливается отбор
//  Значение - Произвольный - устанавливаемое значение отбора
//  СтруктураБыстрогоОтбора - Неопределено, Структура - Структура, содержащая ключи и значения отбора
//  Настройки - НастройкиКомпоновкиДанных - настройки, из которых могут получаться значения отбора
//  Использование - Неопределено, Булево - Признак использования элемента отбора
//  ВидСравнения - Неопределено, ВидСравненияКомпоновкиДанных - вид сравнения, устанавливаемый для элемента отбора.
//
Процедура ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек(Список, ИмяКолонки, Значение, Знач СтруктураБыстрогоОтбора, 
			Настройки, Использование = Неопределено, ВидСравнения = Неопределено) Экспорт
	
	Если СтруктураБыстрогоОтбора = Неопределено Тогда
		Значение = Настройки.Получить(ИмяКолонки);
		ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
	Иначе
		Если Не СтруктураБыстрогоОтбора.Свойство(ИмяКолонки) Тогда
			Значение = Настройки.Получить(ИмяКолонки);
			ИспользованиеЭлементаОтбора = ?(Использование = Неопределено, ЗначениеЗаполнено(Значение), Использование);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, ИмяКолонки, Значение, ВидСравнения,,ИспользованиеЭлементаОтбора);
		КонецЕсли;
	КонецЕсли;
	
	Настройки.Удалить(ИмяКолонки);
	
КонецПроцедуры // ОтборПоЗначениюСпискаПриЗагрузкеИзНастроек()

// ПРОЦЕДУРЫ И ФУНКЦИИ ОТБОРА ПО МЕНЕДЖЕРУ

// Процедура копирует в список выбора поля отбора значения из списка источника
//
// Параметры:
//		СписокВыбора - СписокЗначений - список приемник.
//		СписокИсточник - СписокЗначений - список источник.
Процедура СкопироватьСписокВыбораОтбораПоМенеджеру(СписокВыбора, СписокИсточник) Экспорт
	
	СписокВыбора.Очистить();
	Для Сч=0 По СписокИсточник.Количество()-1 Цикл
		СписокВыбора.Добавить(СписокИсточник[Сч].Значение, СписокИсточник[Сч].Представление);
	КонецЦикла;
	
КонецПроцедуры // СкопироватьСписокВыбораОтбораПоМенеджеру()


#КонецОбласти
//////////////////////////////
