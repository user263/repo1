////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы ТОиР
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего
//									  модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "ТехническоеОбслуживаниеИРемонты20";
	Описание.Версия = "2.0.10.2";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "1.0.0.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеВидыКонтактнойИнформацииФизЛиц";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение видов контактной информации физических лиц...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.2.2";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьОбъектыКонфигурацииДляПользовательскогоПредставления";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение списка объектов конфигурации для пользовательских представлений...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.2.4";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнениеСтатусовДокументов";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение статусов документов...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.2.4";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнениеСтатусовТехКарт";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение статусов технологических карт...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.2.4";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнениеСтатусовНормативныхРемонтовТиповыхОР";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение статусов нормативных ремонтов типовых объектов ремонта...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.2.4";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьДатыНачалаГарантийныхПериодов";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение статусов нормативных ремонтов типовых объектов ремонта...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.2.5";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьНовыеРеквизитыВСправочникеТехКарты";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение новых реквизитов в справочнике ""Версии технологических карт ремонтов""";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.2.5";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьКоличествоВДок_НарядНаРегламентноеМероприятие";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение новых реквизитов в документе ""Наряд на регламентное мероприятие""";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.2.5";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновлениеРегистраСведений_торо_ЗаявкиПоРемонтам";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление данных в регистре сведений ""торо_ЗаявкиПоРемонтам""";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.2.5";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ДобавитьЗаписиВРСФИОФизЛиц";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление данных в регистре сведений ""ФИОФизическихЛиц""";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.4.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеДанныеСценарияРаботы";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение данных в предопределенном элементе справочника ""Предопределенные сценарии работы системы""";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.УдалитьДублиПоказателейНаработкиТиповыхОР";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление данных в регистре сведений ""торо_ПараметрыНаработкиОбъектовРемонта""";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ПереносСтатусовСогласованияДокументовВРегистры";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление механизма согласования документов";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьРегистр_ПорядокОРПоИерархии";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление данных в регистре сведений ""Порядок ОР по иерархии"".";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьРегистр_ОбъектыРемонтаГруппы";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление данных в регистре сведений ""Объекты ремонта группы"".";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновитьДатыВыбытияВРегистре_торо_СтатусыОбъектовРемонтаВУчете";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление данных в регистре сведений ""Статусы объектов ремонта в учете"" по датам выбытия.";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновитьДатыВыбытияВРегистре_торо_РегламентныеМероприятияИСпискиОбъектов";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление данных в регистре сведений ""Регламентные мероприятия и списки объектов"" по cпособe учета даты отсчета.";
	
	// Обработчики из версии 2.0.2.3 перенесены в 2.0.5.1, поскольку
	// они не были вызваны ранее вообще, на демо-базе не выполнялись.
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеВидыКонтактнойИнформацииПартнеров";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение видов контактной информации партнеров...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьПредопределенныеВидыКонтактнойИнформацииКонтактныхЛицПартнеров";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение видов контактной информации партнеров...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.5.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.СоздатьИЗаполнитьПартнеровУКонтрагентов";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение партнеров...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.6.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновитьКоличествоВТехКартах";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление тех. карт...";
	
	//////
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.6.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьУсловияГарантий";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение условий гарантии..."; 	
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.6.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ПерезаписатьВидыРемонта";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Перезапись флагов отбора для видов ремонта...";	
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.6.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.СформироватьДвиженияРегламентныхАктовПоРегиструФактическиеМатериальныеЗатратыРемонтныхРабот";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Формирование движений документов ""Акт о выполнении регламентного мероприятия"" по регистру фактических материальных затрат...";	
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.7.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.СформироватьДвиженияРегламентныхАктовПоРегиструФактическиеТрудовыеЗатратыРемонтныхРабот";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Формирование движений документов ""Акт о выполнении регламентного мероприятия"" по регистру фактических трудовых затрат...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.7.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.УстановитьПараметрыНаборовСвойств";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление параметров наборов дополнительных свойств...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.7.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновлениеДокументовЦелевыхЗначенийПоказателейKPI";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление установки целевых значений показателей KPI...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.7.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗагрузитьПоставляемуюМодельПоказателейKPI";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Загрузка поставляемой модели показателей KPI...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.7.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.УстановитьОсновныеПоказателиНаработки";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Установка основных показателей наработки...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.7.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбнвлениеРегистра_ЗаказыНаРемонтВЕРП";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление регистра ...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.8.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновлениеСправочника_КритичностьДефекта";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление справочника ...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.8.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ДозаполнениеРегистра_ВыявленныеДефекты";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление регистра ...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.8.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнитьСвойстваВидовКонтактнойИнформации";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление регистра ...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.8.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаполнениеНастройки_ИерархияДляМобильногоПриложения";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение настроек ...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.9.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновлениеСправочника_КвалификацииРемонтногоПерсонала";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Заполнение кодов квалификаций ...";

	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.10.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ЗаписьНастроекПодключенияКСерверуСЛК";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Запись настроек подключения к серверу СЛК ...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.10.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.УстановитьПараметрыНаборовСвойствДокументов";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление параметров наборов дополнительных свойств...";

	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.10.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ИзменитьСтруктуруРегистровНаработки";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление структуры хранения наработки...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.10.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновлениеСправочникаТехнологическихКарт";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление справочника технологических карт...";
	
	ОбработчикОбновления = Обработчики.Добавить();
	ОбработчикОбновления.Версия              = "2.0.10.1";
	ОбработчикОбновления.Процедура           = "торо_ОбновлениеИнформационнойБазы.ОбновлениеДокументовЗакрытияЗаявокИРемонтов";
	ОбработчикОбновления.НачальноеЗаполнение = Истина;
	ОбработчикОбновления.РежимВыполнения     = "Монопольно";
	ОбработчикОбновления.Комментарий         = "Обновление документов закрытия заявок и ремонтов...";


КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - если установить Истина, то будет выведена форма
//                                с описанием обновлений. По умолчанию, Истина.
//                                Возвращаемое значение.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//

КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	
КонецПроцедуры


// Вызывается при добалении при переходе с другой конфигурации
// Используется для добавления необходимых обработчиков.
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазыСлужебный.НоваяТаблицаОбработчиковПереходаСДругойПрограммы.
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается при определнии режима обновления данных.
//
// Параметры:
//   РежимОбновленияДанных - Строка - режим обновления.
//   СтандартнаяОбработка - Булево - Ложь, если нужно изменить режим по умолчанию.
//  
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОБработка) Экспорт
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Вызывается для выполения строк кода при завершении перехода с другой программы
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// Требуется обновить РС по причине добавления остановочных ремонтов.
Процедура ОбновлениеРегистраСведений_торо_ЗаявкиПоРемонтам() Экспорт
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	Попытка
		ТекстЗапроса = "ВЫБРАТЬ
		|	торо_ЗаявкиПоРемонтам.Период,
		|	торо_ЗаявкиПоРемонтам.Регистратор КАК Регистратор,
		|	торо_ЗаявкиПоРемонтам.НомерСтроки,
		|	торо_ЗаявкиПоРемонтам.Активность,
		|	торо_ЗаявкиПоРемонтам.IDРемонта,
		|	торо_ЗаявкиПоРемонтам.ID_Корректировок,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачалаРемонтныхРабот,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончанияРемонтныхРабот
		|ИЗ
		|	РегистрСведений.торо_ЗаявкиПоРемонтам КАК торо_ЗаявкиПоРемонтам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		|		ПО торо_ЗаявкиПоРемонтам.Регистратор = торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка
		|			И торо_ЗаявкиПоРемонтам.IDРемонта = торо_ЗаявкаНаРемонтРемонтыОборудования.ID
		|ИТОГИ ПО
		|	Регистратор";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		ВыборкаПоРегистратору = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоРегистратору.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.торо_ЗаявкиПоРемонтам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
			Выборка = ВыборкаПоРегистратору.Выбрать();
			Пока Выборка.Следующий() Цикл
				НС = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Выборка);
				НС.ID_Корректировок = Новый УникальныйИдентификатор;
			КонецЦикла;
			НаборЗаписей.Записать();		
		КонецЦикла;
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление данных регистра сведений ""торо_ЗаявкиПоРемонтам"" НЕ выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление данных регистра сведений ""торо_ЗаявкиПоРемонтам"" выполнено!'");
	КонецЕсли;
	
	Сообщение.Сообщить();	
	
КонецПроцедуры


// В справочник "торо_ТехКарты" в тч "МатериальныеЗатраты" были добавлены новые реквизиты 
// требуется их заполнить.
Процедура ЗаполнитьНовыеРеквизитыВСправочникеТехКарты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ТехКартыМатериальныеЗатраты.Ссылка КАК Ссылка,
	|	торо_ТехКартыМатериальныеЗатраты.Количество,
	|	торо_ТехКартыМатериальныеЗатраты.Номенклатура,
	|	торо_ТехКартыМатериальныеЗатраты.КоличествоНаЕдиницу,
	|	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок,
	|	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковокНаЕдиницу,
	|	торо_ТехКартыМатериальныеЗатраты.Упаковка,
	|	ЕСТЬNULL(торо_ТехКартыМатериальныеЗатраты.Упаковка.Коэффициент, 1) КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(торо_ТехнологическиеОперацииМатериальныеЗатраты.Количество, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ торо_ТехнологическиеОперацииМатериальныеЗатраты.Количество
	|	КОНЕЦ КАК КоличествоВОперации,
	|	торо_ТехКартыМатериальныеЗатраты.НомерСтроки,
	|	торо_ТехКартыМатериальныеЗатраты.ID,
	|	торо_ТехКартыМатериальныеЗатраты.ЕдиницаИзмерения,
	|	торо_ТехКартыМатериальныеЗатраты.Операция,
	|	торо_ТехКартыМатериальныеЗатраты.Качество
	|ИЗ
	|	Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации.МатериальныеЗатраты КАК торо_ТехнологическиеОперацииМатериальныеЗатраты
	|		ПО торо_ТехКартыМатериальныеЗатраты.Операция = торо_ТехнологическиеОперацииМатериальныеЗатраты.Ссылка
	|			И торо_ТехКартыМатериальныеЗатраты.Номенклатура = торо_ТехнологическиеОперацииМатериальныеЗатраты.Номенклатура";
	
	ВыборкаНоменклатуры = Запрос.Выполнить().Выгрузить();
	ВыборкаНоменклатуры.Индексы.Добавить("Ссылка, Номенклатура");
	
	ВыборкаКарт = ВыборкаНоменклатуры.Скопировать(,"Ссылка");
	ВыборкаКарт.свернуть("Ссылка");
	
	стрПоиска = Новый Структура("Ссылка, Номенклатура");
	
	Для каждого текКарта из ВыборкаКарт Цикл
		спрОбъект = текКарта.Ссылка.ПолучитьОбъект();
		
		НужноЗаписать = Ложь;
		Для каждого СтрокаТЧ из спрОбъект.МатериальныеЗатраты Цикл
			стрПоиска.Ссылка = текКарта.Ссылка;
			стрПоиска.Номенклатура = СтрокаТЧ.Номенклатура;
			НайС = ВыборкаНоменклатуры.НайтиСтроки(стрПоиска);
			
			Если Найс.Количество() > 0 Тогда
				текНом = Найс[0];
				
				Если ТекНом.Количество = 0 тогда
					СтрокаТЧ.Количество = текНом.КоличествоУпаковок * текНом.Коэффициент;
					СтрокаТЧ.КоличествоНаЕдиницу = СтрокаТЧ.Количество / текНом.КоличествоВОперации;
					СтрокаТЧ.КоличествоУпаковокНаЕдиницу = СтрокаТЧ.КоличествоУпаковок / текНом.КоличествоВОперации;
				Иначе
					СтрокаТЧ.КоличествоУпаковок = текНом.Количество / текНом.Коэффициент;
					СтрокаТЧ.КоличествоНаЕдиницу = текНом.Количество / текНом.КоличествоВОперации;
					СтрокаТЧ.КоличествоУпаковокНаЕдиницу = СтрокаТЧ.КоличествоУпаковок / текНом.КоличествоВОперации;
				КонецЕсли;
				нужноЗаписать = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НужноЗаписать Тогда
			Попытка
				спрОбъект.Записать();
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Объект: %1    _ошибка: '") + ОписаниеОшибки();
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст,спрОбъект);
				Сообщение.Сообщить();
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

// В документ "торо_НарядНаРегламентноеМероприятие" в тч "РемонтныеРаботы" был добавлен новый реквизит
// требуется его заполнить.
Процедура ЗаполнитьКоличествоВДок_НарядНаРегламентноеМероприятие() Экспорт
	
	Запрос = Новый запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НарядНаРегламентноеМероприятие.Ссылка,
	|	торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы.(
	|		Ссылка,
	|		НомерСтроки,
	|		ID,
	|		РемонтнаяРабота,
	|		Родитель_ID,
	|		РемонтыОборудования_ID,
	|		Количество,
	|		Картинка,
	|		NULL КАК Выполнено,
	|		NULL КАК ПроцентВыполненияРабот,
	|		NULL КАК СдельныйНаряд,
	|		NULL КАК Сумма
	|	),
	|	торо_НарядНаРегламентноеМероприятие.Проведен
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие КАК торо_НарядНаРегламентноеМероприятие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктОВыполненииРегламентногоМероприятия.Ссылка,
	|	торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы.(
	|		Ссылка,
	|		НомерСтроки,
	|		ID,
	|		РемонтнаяРабота,
	|		Родитель_ID,
	|		РемонтыОборудования_ID,
	|		Количество,
	|		Картинка,
	|		Выполнено,
	|		ПроцентВыполненияРабот,
	|		СдельныйНаряд,
	|		Сумма
	|	),
	|	торо_АктОВыполненииРегламентногоМероприятия.Проведен
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия КАК торо_АктОВыполненииРегламентногоМероприятия";				   
	
	результат = Запрос.Выполнить();
	Выборка = результат.Выбрать();
	
	ПредКонстанта = Константы.торо_ИспользоватьСогласованиеДокументовМероприятий.Получить();
	Константы.торо_ИспользоватьСогласованиеДокументовМероприятий.Установить(Ложь);
	
	Попытка
		Пока Выборка.Следующий() Цикл
			ремРаботы = Выборка.РемонтныеРаботы.Выбрать().Количество();
			нужноЗаписать = Ложь;
			
			Если ремРаботы > 0 Тогда
				докОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Для каждого текСтрока из докОбъект.РемонтныеРаботы Цикл 
					Если не ЗначениеЗаполнено(текСтрока.Количество) Тогда
						текСтрока.Количество = 1;
						нужноЗаписать = Истина;
					КонецЕсли;
				КонецЦикла;
				
				Если нужноЗаписать Тогда
					Попытка
						докОбъект.Записать();
					Исключение
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = НСтр("ru = 'Объект: %1    _ошибка: '") + ОписаниеОшибки();
						Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст,докОбъект);
						Сообщение.Сообщить();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		Константы.торо_ИспользоватьСогласованиеДокументовМероприятий.Установить(Истина);
		Возврат;
	КонецПопытки;
	Константы.торо_ИспользоватьСогласованиеДокументовМероприятий.Установить(Истина);
	
КонецПроцедуры

// Была изменена структура регистра сведений "Сроки гарантий объектов ремонта".
// Требуется перенос значения из ресурса в измерение.
Процедура ЗаполнитьДатыНачалаГарантийныхПериодов() Экспорт
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	Попытка
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта
		|ИЗ
		|	РегистрСведений.торо_СрокиГарантииОбъектовРемонта КАК торо_СрокиГарантииОбъектовРемонта
		|ГДЕ
		|	торо_СрокиГарантииОбъектовРемонта.УдалитьДатаНачала = ДАТАВРЕМЯ(1, 1, 1)";
		Запрос = Новый Запрос(ТекстЗапроса);
		ВыборкаПоОР = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПоОР.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.торо_СрокиГарантииОбъектовРемонта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ВыборкаПоОР.ОбъектРемонта);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.УдалитьДатаНачала) Тогда
					Запись.УдалитьДатаНачала = Запись.УдалитьДатаНачалаРесурс;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Заполнение дат начала гарантийных периодов НЕ выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Заполнение дат начала гарантийных периодов выполнено!'");
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

// Процедура выполняет начальное заполнение статусов документов.
Процедура ЗаполнениеСтатусовДокументов() Экспорт
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	Попытка
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	торо_ВыявленныеДефекты.Ссылка,
		|	торо_ВыявленныеДефекты.Дата КАК Дата
		|ИЗ
		|	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		|ГДЕ
		|	торо_ВыявленныеДефекты.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ВнешнееОснованиеДляРабот.Ссылка,
		|	торо_ВнешнееОснованиеДляРабот.Дата
		|ИЗ
		|	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_ВнешнееОснованиеДляРабот
		|ГДЕ
		|	торо_ВнешнееОснованиеДляРабот.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ЗаявкаНаРемонт.Ссылка,
		|	торо_ЗаявкаНаРемонт.Дата КАК Дата
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка,
		|	торо_НарядНаВыполнениеРемонтныхРабот.Дата
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_АктОВыполненииРегламентногоМероприятия.Ссылка,
		|	торо_АктОВыполненииРегламентногоМероприятия.Дата КАК Дата
		|ИЗ
		|	Документ.торо_АктОВыполненииРегламентногоМероприятия КАК торо_АктОВыполненииРегламентногоМероприятия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_АктОВыполненииЭтапаРабот.Ссылка,
		|	торо_АктОВыполненииЭтапаРабот.Дата
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		// Документы меняющие только свой статус
		Выборка = МассивРезультатов[0].Выбрать();
		Пока Выборка.Следующий() Цикл
			Ссылка = Выборка.Ссылка;
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			Движения = ДокументОбъект.Движения;
			Выполнить("Движения." + торо_РаботаСоСтатусамиДокументовСервер.ПолучитьИмяРегистраПоСсылке(Ссылка) + ".Записывать = Истина");
			торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Движения, Перечисления.торо_СтатусыДокументов.Зарегистрирован);
			Движения.Записать();
		КонецЦикла;
		
		// Документы меняющие свой статус и статус документов оснований
		Выборка = МассивРезультатов[1].Выбрать();
		Пока Выборка.Следующий() Цикл
			Ссылка = Выборка.Ссылка;
			ДокументОбъект = Ссылка.ПолучитьОбъект();
			Движения = ДокументОбъект.Движения;
			Выполнить("Движения." + торо_РаботаСоСтатусамиДокументовСервер.ПолучитьИмяРегистраПоСсылке(Ссылка) + ".Записывать = Истина");
			торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Движения, Перечисления.торо_СтатусыДокументов.Зарегистрирован);			
			торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовОснований(Ссылка);
			Движения.Записать();			
		КонецЦикла;
		
		// Документы меняющие только статус документов оснований
		Выборка = МассивРезультатов[2].Выбрать();
		Пока Выборка.Следующий() Цикл
			Ссылка = Выборка.Ссылка;
			торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовОснований(Ссылка);
			Движения.Записать();			
		КонецЦикла;
		
		// Закрытие заявок и ремонтов меняет статусы для внешних оснований, дефектов и заявок.
		МассивИменРегистров = Новый Массив;
		МассивИменРегистров.Добавить("торо_СтатусыДокументовВыявленныхДефектов");
		МассивИменРегистров.Добавить("торо_СтатусыДокументовВнешнихОснований");
		МассивИменРегистров.Добавить("торо_СтатусыДокументовЗаявок");
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_Ремонты.Регистратор КАК ДокументОснование,
		|	торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.Ссылка КАК Регистратор
		|ПОМЕСТИТЬ Регистраторы
		|ИЗ
		|	РегистрСведений.торо_Ремонты КАК торо_Ремонты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗакрытиеЗаявокИРемонтов.ЗакрываемыеРемонты КАК торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты
		|		ПО (торо_Ремонты.Регистратор ССЫЛКА Документ.торо_ВыявленныеДефекты
		|				ИЛИ торо_Ремонты.Регистратор ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот
		|				ИЛИ торо_Ремонты.Регистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт)
		|			И торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ID = торо_Ремонты.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Регистраторы.ДокументОснование КАК ДокументОснование,
		|	Регистраторы.Регистратор КАК Регистратор
		|ИЗ
		|	Регистраторы КАК Регистраторы
		|ИТОГИ ПО
		|	Регистратор";
		Запрос = Новый Запрос(ТекстЗапроса);
		
		ВыборкаДокументыЗакрытия = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументыЗакрытия.Следующий() Цикл
			
			Регистратор = ВыборкаДокументыЗакрытия.Регистратор;
			Движения = Регистратор.ПолучитьОбъект().Движения;
			
			Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
				Выполнить("Движения." + ИмяРегистра + ".Записывать = Истина");
			КонецЦикла;
			
			ВыборкаДокументыОснования = ВыборкаДокументыЗакрытия.Выбрать();
			Пока ВыборкаДокументыОснования.Следующий() Цикл
				торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(ВыборкаДокументыОснования.ДокументОснование, Регистратор, Движения, Перечисления.торо_СтатусыДокументов.Отклонен);
			КонецЦикла;
			
			Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
				Выполнить("Движения." + ИмяРегистра + ".Записать()");
			КонецЦикла;
			
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Начальное заполнение статусов документов НЕ выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Начальное заполнение статусов документов выполнено!'");
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

// Процедура предназначена для начального заполнения реквизита Статус
// справочника торо_ИдентификаторыТехКарт.
Процедура ЗаполнениеСтатусовТехКарт() Экспорт
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	Попытка
		
		Выборка = Справочники.торо_ИдентификаторыТехКарт.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ЭтоГруппа Тогда
				СправочникОбъект = Выборка.ПолучитьОбъект();
				
				СправочникОбъект.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует;
				СправочникОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Начальное заполнение статусов тех. карт НЕ выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Начальное заполнение статусов тех. карт выполнено!'");
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

// Процедура выполняет начальное заполнение реквизита Статус табличной части
// НормативныеРемонты элементов справочника торо_ТиповыеОР.
Процедура ЗаполнениеСтатусовНормативныхРемонтовТиповыхОР() Экспорт
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	Попытка
		
		Выборка = Справочники.торо_ТиповыеОР.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ЭтоГруппа Тогда
				СправочникОбъект = Выборка.ПолучитьОбъект();
				Для Каждого НормативныйРемонт Из СправочникОбъект.НормативныеРемонты Цикл
					НормативныйРемонт.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует;
				КонецЦикла;	
				СправочникОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Начальное заполнение статусов нормативных ремонтов типовых ОР НЕ выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Начальное заполнение статусов нормативных ремонтов типовых ОР выполнено!'");
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита ТипКонтактнойИнформации
// для предопределенных элементов справочника ВидыКонтакнойИнформации
// вызывается при первом запуске конфигурации.
Процедура ЗаполнитьПредопределенныеВидыКонтактнойИнформацииФизЛиц() Экспорт
	
	// Справочник "Физические лица"
	
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailФизическогоЛица,
	Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина, Ложь, Ложь, 19);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица,
	Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 20);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,
	Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 22);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица,
	Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 23);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица,
	Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 24);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица,
	Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 25);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
	Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 26);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица,
	Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 27);
	
КонецПроцедуры

// Процедура заполняет РС ПараметрыПользовательскогоПредставленияОбъектов.
// Использование пользовательских представлений возможно только для объектов конфигурации, указанных в этом регистре.
// Пользовательское редактирование РС запрещено.
Процедура ЗаполнитьОбъектыКонфигурацииДляПользовательскогоПредставления() Экспорт
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	Попытка
		
		НаборЗаписей = РегистрыСведений.торо_ПараметрыПользовательскогоПредставленияОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		// Объекты ремонта
		НС = НаборЗаписей.Добавить();
		НС.ОбъектКонфигурации 			= "Справочники.торо_ОбъектыРемонта";
		НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
		НС.ОбъектКонфигурацииСиноним	= "Объекты ремонта";
		// Номенклатура
		НС = НаборЗаписей.Добавить();
		НС.ОбъектКонфигурации 			= "Справочники.Номенклатура";
		НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
		НС.ОбъектКонфигурацииСиноним	= "Номенклатура";
		// Тех карты
		НС = НаборЗаписей.Добавить();
		НС.ОбъектКонфигурации 			= "Справочники.торо_ИдентификаторыТехКарт";
		НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
		НС.ОбъектКонфигурацииСиноним	= "Технологические карты ремонтов";
		// Тех операции
		НС = НаборЗаписей.Добавить();
		НС.ОбъектКонфигурации 			= "Справочники.торо_ТехнологическиеОперации";
		НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
		НС.ОбъектКонфигурацииСиноним	= "Технологические операции";
		// Виды ремонта
		НС = НаборЗаписей.Добавить();
		НС.ОбъектКонфигурации 			= "Справочники.торо_ВидыРемонтов";
		НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
		НС.ОбъектКонфигурацииСиноним	= "Виды ремонтов";
		// Способы планирования
		НС = НаборЗаписей.Добавить();
		НС.ОбъектКонфигурации 			= "Справочники.торо_СпособыПланированияРемонтныхРабот";
		НС.ФорматнаяСтрокаПоУмолчанию	= "%Наименование%";
		НС.ОбъектКонфигурацииСиноним	= "Способы планирования работ";
		
		НаборЗаписей.Записать();
		
	Исключение
		ОшибкаТранзакции = ИСтина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Начальное заполнение параметров пользовательского представления объектов НЕ выполнено! По причине: '")+ОписаниеОшибки,СтатусСообщения.Важное);
	Иначе
		ЗафиксироватьТранзакцию();
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Начальное заполнение параметров пользовательского представления объектов выполнено!'"),СтатусСообщения.Информация);
	КонецЕсли;
	
КонецПроцедуры

// Вспомогательная процедура вызывается из ЗаполнитьПредопределенныеВидыКонтактнойИнформацииФизЛиц.
Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, АдресТолькоРоссийский,	Порядок = Неопределено)
	
	НастройкиПроверки = Новый Структура;
	НастройкиПроверки.Вставить("АдресТолькоРоссийский", 		АдресТолькоРоссийский);
	НастройкиПроверки.Вставить("ПроверятьКорректность", 		Ложь);
	НастройкиПроверки.Вставить("СкрыватьНеактуальныеАдреса", 	Ложь);
	НастройкиПроверки.Вставить("ВключатьСтрануВПредставление", 	Ложь);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации();
	ПараметрыВида.Вид = ВидКИ;
	ПараметрыВида.Тип = Тип;
	ПараметрыВида.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	ПараметрыВида.РедактированиеТолькоВДиалоге = РедактированиеТолькоВДиалоге;
	ПараметрыВида.ОбязательноеЗаполнение = Ложь;
	ПараметрыВида.Порядок = Порядок;
	ПараметрыВида.НастройкиПроверки = НастройкиПроверки;
	
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
		
КонецПроцедуры

// Процедура выполняет заполнение реквизита ТипКонтактнойИнформации
// для предопределенных элементов справочника ВидыКонтакнойИнформации
// вызывается при первом запуске конфигурации.
Процедура ЗаполнитьПредопределенныеВидыКонтактнойИнформацииПартнеров() Экспорт
	
	// Справочник "Партнеры лица"
	
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПартнера,
	Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина, Ложь, Ложь, 1);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
	Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 2);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПартнера,
	Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 3);
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита ТипКонтактнойИнформации
// для предопределенных элементов справочника ВидыКонтакнойИнформации
// вызывается при первом запуске конфигурации.
Процедура ЗаполнитьПредопределенныеВидыКонтактнойИнформацииКонтактныхЛицПартнеров() Экспорт
	
	// Справочник "Партнеры лица"
	
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,
	Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты,	Истина, Ложь, Ложь, 1);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,
	Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 2);
	ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,
	Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 3);
	
КонецПроцедуры

Процедура СоздатьИЗаполнитьПартнеровУКонтрагентов() Экспорт
	
	Константы.ИспользоватьПартнеровКакКонтрагентов.Установить(Истина);
	Константы.ИспользоватьПартнеровИКонтрагентов.Установить(Ложь);
	
	Запрос = Новый Запрос;
	
	// Запрос исправлен с учетом того, чтобы не создавались дубли при повторном выполнении.
	
	Запрос.Текст = "ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка,
	|	Контрагенты.Наименование КАК Наименование,
	|	ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) КАК Родитель,
	|	&ТекущаяДата КАК ДатаРегистрации,
	|	ЛОЖЬ КАК Клиент,
	|	ЛОЖЬ КАК Поставщик,
	|	ЛОЖЬ КАК ПрочиеОтношения,
	|	&ТекущийПользователь КАК ОсновнойМенеджер,
	|	ВЫБОР
	|		КОГДА Контрагенты.НаименованиеПолное <> """"
	|			ТОГДА Контрагенты.НаименованиеПолное
	|		ИНАЧЕ Контрагенты.Наименование
	|	КОНЕЦ КАК НаименованиеПолное,
	|	Контрагенты.ЮридическоеФизическоеЛицо
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ТекущаяДата"         , ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущийПользователь" , Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НачатьТранзакцию();
	ОбработчикВыполненУспешно = Истина;
	
	Пока Выборка.Следующий() Цикл
		
		// Партнер
		ОбъектПартнер = Справочники.Партнеры.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(ОбъектПартнер,Выборка,,"Ссылка");
		
		Попытка
			ОбъектПартнер.Записать();
		Исключение
			ОбработчикВыполненУспешно = Ложь;
		КонецПопытки; 
		
		ПартнерВыбор = ОбъектПартнер.Ссылка;
		
		Попытка
			КонтрагентОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КонтрагентОбъект.Партнер = ПартнерВыбор;
			КонтрагентОбъект.Записать();
		Исключение
			ОбработчикВыполненУспешно = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработчикВыполненУспешно Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, "Для части контрагентов не удалось создать партнера.");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьКоличествоВТехКартах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ТехКартыСписокОпераций.ID КАК ID,
	|	торо_ТехКартыСписокОпераций.Количество,
	|	торо_ТехКартыСписокОпераций.Ссылка
	|ПОМЕСТИТЬ ВТ_СписокОпераций
	|ИЗ
	|	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТехКартыМатериальныеЗатраты.ID КАК ID,
	|	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок КАК МЗКоличествоУпаковок,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(торо_ТехКартыМатериальныеЗатраты.Упаковка.Коэффициент, 0) = 0
	|			ТОГДА 1
	|		ИНАЧЕ торо_ТехКартыМатериальныеЗатраты.Упаковка.Коэффициент
	|	КОНЕЦ КАК МЗУпаковкаКоэффициент,
	|	торо_ТехКартыМатериальныеЗатраты.Ссылка КАК Ссылка,
	|	торо_ТехКартыМатериальныеЗатраты.Номенклатура
	|ПОМЕСТИТЬ ВТ_МатЗатраты
	|ИЗ
	|	Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СписокОпераций.Ссылка,
	|	ВТ_СписокОпераций.ID,
	|	ВТ_МатЗатраты.МЗКоличествоУпаковок,
	|	ВТ_МатЗатраты.МЗУпаковкаКоэффициент,
	|	ВТ_МатЗатраты.МЗКоличествоУпаковок * ВТ_МатЗатраты.МЗУпаковкаКоэффициент КАК МЗКоличество,
	|	ВТ_СписокОпераций.Количество КАК ОперКоличество,
	|	ВТ_МатЗатраты.Номенклатура
	|ПОМЕСТИТЬ ВТ_Шаг1
	|ИЗ
	|	ВТ_СписокОпераций КАК ВТ_СписокОпераций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МатЗатраты КАК ВТ_МатЗатраты
	|		ПО ВТ_СписокОпераций.ID = ВТ_МатЗатраты.ID
	|			И ВТ_СписокОпераций.Ссылка = ВТ_МатЗатраты.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Шаг1.Ссылка КАК Ссылка,
	|	ВТ_Шаг1.ID,
	|	ВТ_Шаг1.Номенклатура КАК Номенклатура,
	|	ВТ_Шаг1.МЗКоличествоУпаковок,
	|	ВТ_Шаг1.МЗУпаковкаКоэффициент,
	|	ВТ_Шаг1.МЗКоличество,
	|	ВЫБОР
	|		КОГДА ВТ_Шаг1.ОперКоличество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Шаг1.МЗКоличество / ВТ_Шаг1.ОперКоличество
	|	КОНЕЦ КАК МЗКНЕ,
	|	ВЫБОР
	|		КОГДА ВТ_Шаг1.ОперКоличество = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Шаг1.МЗКоличествоУпаковок / ВТ_Шаг1.ОперКоличество
	|	КОНЕЦ КАК МЗКУНЕ
	|ИЗ
	|	ВТ_Шаг1 КАК ВТ_Шаг1
	|ИТОГИ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить();
	ВыборкаПоДок = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	ОбработчикВыполненУспешно = Истина;
	
	Пока ВыборкаПоДок.Следующий() Цикл
		Попытка 
			
			спрОбъект = ВыборкаПоДок.Ссылка.ПолучитьОбъект();
			мз = спрОбъект.МатериальныеЗатраты;
			стрОтборка = Новый Структура("ID, Номенклатура");
			
			ДетЗаписи = ВыборкаПоДок.Выбрать();
			нужноЗаписывать = Ложь;
			Пока ДетЗаписи.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(стрОтборка, ДетЗаписи);
				НайС = мз.найтиСтроки(стрОтборка);
				Если НайС.количество() > 0 Тогда
					Если НайС[0].Количество <> ДетЗаписи.МЗКоличество Тогда
						НайС[0].Количество = ДетЗаписи.МЗКоличество;
						нужноЗаписывать = Истина;
					КонецЕсли;
					Если НайС[0].КоличествоНаЕдиницу <> ДетЗаписи.МЗКНЕ Тогда
						НайС[0].КоличествоНаЕдиницу = ДетЗаписи.МЗКНЕ;
						нужноЗаписывать = Истина;
					КонецЕсли;
					Если НайС[0].КоличествоУпаковокНаЕдиницу <> ДетЗаписи.МЗКУНЕ Тогда
						НайС[0].КоличествоУпаковокНаЕдиницу = ДетЗаписи.МЗКУНЕ;
						нужноЗаписывать = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если нужноЗаписывать Тогда
				спрОбъект.ОбменДанными.Загрузка = Истина;
				спрОбъект.записать();
			КонецЕсли;
			
		Исключение
			ОбработчикВыполненУспешно = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Если ОбработчикВыполненУспешно Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, 
		"Часть тех. карт не удалось обновить.");
	КонецЕсли; 
	
КонецПроцедуры 

Процедура ДобавитьЗаписиВРСФИОФизЛиц() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка,
	|	ФизическиеЛица.ФИО,
	|	ФизическиеЛица.ДатаРождения,
	|	ФизическиеЛица.Наименование
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
	|		ПО ФИОФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
	|ГДЕ
	|	ФИОФизическихЛиц.ФизическоеЛицо ЕСТЬ NULL";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьОшибки = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.Наименование) Тогда
			
			СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(Выборка.Наименование);
			
			
			МенеджерЗаписиФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
			
			Если СтруктураФИО.Фамилия <> Неопределено Тогда
				
				МенеджерЗаписиФИО.Фамилия  = СтруктураФИО.Фамилия;
				
				Если СтруктураФИО.Имя <> Неопределено Тогда
					МенеджерЗаписиФИО.Имя = СтруктураФИО.Имя;
				КонецЕсли;
				
				Если СтруктураФИО.Отчество <> Неопределено Тогда
					МенеджерЗаписиФИО.Отчество = СтруктураФИО.Отчество;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(МенеджерЗаписиФИО.Период) Тогда
					Если ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда
						МенеджерЗаписиФИО.Период = Выборка.ДатаРождения;
					Иначе
						МенеджерЗаписиФИО.Период = '18991231000000';
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Попытка
				МенеджерЗаписиФИО.ФизическоеЛицо = Выборка.Ссылка;
				МенеджерЗаписиФИО.Записать(Истина);
				
			Исключение
				
				ЕстьОшибки = Истина;
				
			КонецПопытки;
			
			Если Не ЗначениеЗаполнено(Выборка.ФИО) Тогда
				ФизЛицоОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ФизЛицоОбъект.ФИО = МенеджерЗаписиФИО.Имя + " " + МенеджерЗаписиФИО.Фамилия + " " + МенеджерЗаписиФИО.Отчество;
				Попытка
					ФизЛицоОбъект.Записать();
				Исключение
				КонецПопытки;
			КонецЕсли; 
			
			
		КонецЕсли; 
		
	КонецЦикла;  
	
	Если ЕстьОшибки Тогда
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, "Для части физических лиц не удалось создать записи в регистре ФИО");
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеДанныеСценарияРаботы() Экспорт
	
	НачатьТранзакцию();
	ОбработчикВыполненУспешно = Истина;
	
	ПолныйФункционал = Справочники.торо_ПредопределенныеСценарииРаботыСистемы.ПолныйФункционал;
	
	СпрОбъект = ПолныйФункционал.ПолучитьОбъект();
	
	Для каждого Рекв Из Метаданные.Справочники.торо_ПредопределенныеСценарииРаботыСистемы.Реквизиты Цикл
		Если Рекв.Имя = "Описание" Тогда
			Продолжить;
		КонецЕсли;
		СпрОбъект[Рекв.Имя] = Истина;
	КонецЦикла;
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_СостоянияОбъектовРемонта";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_УчетКонтролируемыхПоказателей";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_УчетНаработкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииЭтапаРабот_торо_СостоянияОбъектовРемонта";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииЭтапаРабот_торо_УчетКонтролируемыхПоказателей";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииЭтапаРабот_торо_УчетНаработкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииЭтапаРабот_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_ВыявленныеДефекты";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_ЗаявкаНаРемонт";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_НарядНаВыполнениеРемонтныхРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВнешнееОснованиеДляРабот_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_ЗаявкаНаРемонт";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_НарядНаВыполнениеРемонтныхРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_СостоянияОбъектовРемонта";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_УчетКонтролируемыхПоказателей";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_УчетНаработкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ВыявленныеДефекты_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ГрафикРегламентныхМероприятийТОиР_торо_АктОВыполненииРегламентногоМероприятия";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ГрафикРегламентныхМероприятийТОиР_торо_НарядНаРегламентноеМероприятие";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ЗаявкаНаРемонт_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ЗаявкаНаРемонт_торо_НарядНаВыполнениеРемонтныхРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ЗаявкаНаРемонт_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_НарядНаВыполнениеРемонтныхРабот_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_НарядНаРегламентноеМероприятие_торо_АктОВыполненииРегламентногоМероприятия";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_НарядНаРегламентноеМероприятие_торо_АктОВыполненииРегламентногоМероприятия";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ПланГрафикРемонта_торо_АктОВыполненииЭтапаРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ПланГрафикРемонта_торо_ЗаявкаНаРемонт";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ПланГрафикРемонта_торо_НарядНаВыполнениеРемонтныхРабот";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_ПланГрафикРемонта_торо_АктПриемкиОборудования";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_СостоянияОбъектовРемонта_торо_ВыявленныеДефекты";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_УчетКонтролируемыхПоказателей_торо_ВыявленныеДефекты";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_ВыявленныеДефекты";
	
	НС = СпрОбъект.ВводНаОсновании.Добавить();
	НС.Значение = Истина;
	НС.ПараДокументов = "торо_АктОВыполненииРегламентногоМероприятия_торо_ВнешнееОснованиеДляРабот";
	
	Попытка
		
		СпрОбъект.Записать();
		
	Исключение
		
		ОбработчикВыполненУспешно = Ложь;
		
	КонецПопытки;
	
	Если ОбработчикВыполненУспешно Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, "Не удалось заполнить и записать элемент справочника ""Предопределенные сценарии работы системы""");
	КонецЕсли;
	
КонецПроцедуры

// На форме типовых ОР в таблице "Показатели наработки" скрыто поле "Период". 
// Нужно оставить только последние записи, а остальные удалить.
Процедура УдалитьДублиПоказателейНаработкиТиповыхОР() Экспорт
	
	НачатьТранзакцию();
	ОбработчикВыполненУспешно = Истина;
	
	ЗапросДублей = Новый Запрос;
	ЗапросДублей.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ торо_ПараметрыНаработкиОбъектовРемонта.Период) КАК КоличествоЗаписей,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель КАК Показатель,
	|	МАКСИМУМ(торо_ПараметрыНаработкиОбъектовРемонта.Период) КАК Период
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	|ГДЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта ССЫЛКА Справочник.торо_ТиповыеОР
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ торо_ПараметрыНаработкиОбъектовРемонта.Период) > 1";
	
	Результат = ЗапросДублей.Выполнить();
	ВыборкаДублей = Результат.Выбрать();
	
	Пока ВыборкаДублей.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(ВыборкаДублей.ОбъектРемонта);
		НаборЗаписей.Отбор.Показатель.Установить(ВыборкаДублей.Показатель);
		НаборЗаписей.Прочитать();
		
		МассивУдаляемых = Новый Массив;
		Для каждого Запись из НаборЗаписей Цикл 
			Если Запись.Период <> ВыборкаДублей.Период Тогда
				МассивУдаляемых.Добавить(Запись);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого Запись из МассивУдаляемых Цикл 
			НаборЗаписей.Удалить(Запись);
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбработчикВыполненУспешно = Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ОбработчикВыполненУспешно Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, "Не удалось очистить ненужные записи регистра ""Параметры наработки объектов ремонта"".");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереносСтатусовСогласованияДокументовВРегистры() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	
	Попытка
		ЗаполнитьРегистр_ИсторияСтатусовДокументов();
		ЗаполнитьРегистр_ТекущиеСтатусыДокументов();
		ЗаполнитьРегистр_ТекущиеСогласующиеДокументов();
	Исключение	
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ОшибкаТранзакции = Истина;
	КонецПопытки;
	
	Если НЕ ОшибкаТранзакции Тогда
		ЗафиксироватьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обновление механизма согласования выполнено!'"));
	Иначе
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обновление механизма согласования НЕ выполнено!'"));
	КонецЕсли;
	
КонецПроцедуры

процедура ЗаполнитьРегистр_ПорядокОРПоИерархии() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	
	Запрос = Новый запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_СтруктурыОР.Ссылка,
	|	торо_СтруктурыОР.ИзменяетсяДокументами КАК ИзменяетсяДокументами
	|ИЗ
	|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|ГДЕ
	|	торо_СтруктурыОР.СтроитсяАвтоматически = ЛОЖЬ
	|ИТОГИ ПО
	|	ИзменяетсяДокументами";
	
	Результат = Запрос.Выполнить();
	ВыборкаПоСИ = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);	
	
	Попытка
		Для каждого текСИ из ВыборкаПоСИ.Строки Цикл
			МассивСИ = Новый Массив;
			Для каждого ТекСтрока из ТекСИ.Строки Цикл
				МассивСИ.Добавить(ТекСтрока.Ссылка);
			КонецЦикла;
			
			ОбработатьМассивСтруктурИерархии(МассивСИ, текСИ.ИзменяетсяДокументами, ОшибкаТранзакции);
		КонецЦикла;
	Исключение
		ОшибкаТранзакции = Истина;
	КонецПопытки;	
	
	Если НЕ ОшибкаТранзакции Тогда
		ЗафиксироватьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обновление регистра ""Порядок ОР по иерархии"" выполнено!'"));
	Иначе
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обновление регистра ""Порядок ОР по иерархии"" НЕ выполнено'"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРегистр_ИсторияСтатусовДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииРегламентногоМероприятияИсторияСтатусов.Дата КАК Период,
	|	торо_АктОВыполненииРегламентногоМероприятияИсторияСтатусов.Ссылка КАК Документ,
	|	торо_АктОВыполненииРегламентногоМероприятияИсторияСтатусов.Пользователь КАК Пользователь,
	|	торо_АктОВыполненииРегламентногоМероприятияИсторияСтатусов.ЗаКого КАК ЗаКого,
	|	торо_АктОВыполненииРегламентногоМероприятияИсторияСтатусов.СтатусДокумента
	|ПОМЕСТИТЬ ВТ_ИсторияСтатусов
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.ИсторияСтатусов КАК торо_АктОВыполненииРегламентногоМероприятияИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботИсторияСтатусов.Дата,
	|	торо_АктОВыполненииЭтапаРаботИсторияСтатусов.Ссылка,
	|	торо_АктОВыполненииЭтапаРаботИсторияСтатусов.Пользователь,
	|	торо_АктОВыполненииЭтапаРаботИсторияСтатусов.ЗаКого,
	|	торо_АктОВыполненииЭтапаРаботИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ИсторияСтатусов КАК торо_АктОВыполненииЭтапаРаботИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ВыявленныеДефектыИсторияСтатусов.Дата,
	|	торо_ВыявленныеДефектыИсторияСтатусов.Ссылка,
	|	торо_ВыявленныеДефектыИсторияСтатусов.Пользователь,
	|	торо_ВыявленныеДефектыИсторияСтатусов.ЗаКого,
	|	торо_ВыявленныеДефектыИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты.ИсторияСтатусов КАК торо_ВыявленныеДефектыИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ГрафикРегламентныхМероприятийТОиРИсторияСтатусов.Дата,
	|	торо_ГрафикРегламентныхМероприятийТОиРИсторияСтатусов.Ссылка,
	|	торо_ГрафикРегламентныхМероприятийТОиРИсторияСтатусов.Пользователь,
	|	торо_ГрафикРегламентныхМероприятийТОиРИсторияСтатусов.ЗаКого,
	|	торо_ГрафикРегламентныхМероприятийТОиРИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_ГрафикРегламентныхМероприятийТОиР.ИсторияСтатусов КАК торо_ГрафикРегламентныхМероприятийТОиРИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтИсторияСтатусов.Дата,
	|	торо_ЗаявкаНаРемонтИсторияСтатусов.Ссылка,
	|	торо_ЗаявкаНаРемонтИсторияСтатусов.Пользователь,
	|	торо_ЗаявкаНаРемонтИсторияСтатусов.ЗаКого,
	|	торо_ЗаявкаНаРемонтИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ИсторияСтатусов КАК торо_ЗаявкаНаРемонтИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаВыполнениеРемонтныхРаботИсторияСтатусов.Дата,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсторияСтатусов.Ссылка,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсторияСтатусов.Пользователь,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсторияСтатусов.ЗаКого,
	|	торо_НарядНаВыполнениеРемонтныхРаботИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ИсторияСтатусов КАК торо_НарядНаВыполнениеРемонтныхРаботИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаРегламентноеМероприятиеИсторияСтатусов.Дата,
	|	торо_НарядНаРегламентноеМероприятиеИсторияСтатусов.Ссылка,
	|	торо_НарядНаРегламентноеМероприятиеИсторияСтатусов.Пользователь,
	|	торо_НарядНаРегламентноеМероприятиеИсторияСтатусов.ЗаКого,
	|	торо_НарядНаРегламентноеМероприятиеИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.ИсторияСтатусов КАК торо_НарядНаРегламентноеМероприятиеИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаИсторияСтатусов.Дата,
	|	торо_ПланГрафикРемонтаИсторияСтатусов.Ссылка,
	|	торо_ПланГрафикРемонтаИсторияСтатусов.Пользователь,
	|	торо_ПланГрафикРемонтаИсторияСтатусов.ЗаКого,
	|	торо_ПланГрафикРемонтаИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_ПланГрафикРемонта.ИсторияСтатусов КАК торо_ПланГрафикРемонтаИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ПредписаниеИсторияСтатусов.Дата,
	|	торо_ПредписаниеИсторияСтатусов.Ссылка,
	|	торо_ПредписаниеИсторияСтатусов.Пользователь,
	|	торо_ПредписаниеИсторияСтатусов.ЗаКого,
	|	торо_ПредписаниеИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_ВнешнееОснованиеДляРабот.ИсторияСтатусов КАК торо_ПредписаниеИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктПриемкиОборудованияИсторияСтатусов.Дата,
	|	торо_АктПриемкиОборудованияИсторияСтатусов.Ссылка,
	|	торо_АктПриемкиОборудованияИсторияСтатусов.Пользователь,
	|	торо_АктПриемкиОборудованияИсторияСтатусов.ЗаКого,
	|	торо_АктПриемкиОборудованияИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_АктПриемкиОборудования.ИсторияСтатусов КАК торо_АктПриемкиОборудованияИсторияСтатусов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ОстановочныеРемонтыИсторияСтатусов.Дата,
	|	торо_ОстановочныеРемонтыИсторияСтатусов.Ссылка,
	|	торо_ОстановочныеРемонтыИсторияСтатусов.Пользователь,
	|	торо_ОстановочныеРемонтыИсторияСтатусов.ЗаКого,
	|	торо_ОстановочныеРемонтыИсторияСтатусов.СтатусДокумента
	|ИЗ
	|	Документ.торо_ОстановочныеРемонты.ИсторияСтатусов КАК торо_ОстановочныеРемонтыИсторияСтатусов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Документ,
	|	Пользователь,
	|	ЗаКого
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсторияСтатусов.Период КАК Период,
	|	ВТ_ИсторияСтатусов.Документ КАК Документ,
	|	КОЛИЧЕСТВО(ВТ_ИсторияСтатусов.СтатусДокумента) КАК КоличествоДублей,
	|	ЛОЖЬ КАК УжеДобавлена,
	|	ВТ_ИсторияСтатусов.Пользователь КАК Пользователь,
	|	ВТ_ИсторияСтатусов.ЗаКого КАК ЗаКого
	|ПОМЕСТИТЬ ВТ_КоличествоДублей
	|ИЗ
	|	ВТ_ИсторияСтатусов КАК ВТ_ИсторияСтатусов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсторияСтатусов.Документ,
	|	ВТ_ИсторияСтатусов.Период,
	|	ВТ_ИсторияСтатусов.Пользователь,
	|	ВТ_ИсторияСтатусов.ЗаКого
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_ИсторияСтатусов.СтатусДокумента) > 1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Документ,
	|	Пользователь,
	|	ЗаКого
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КоличествоДублей.Период,
	|	ВТ_КоличествоДублей.Документ,
	|	ВТ_КоличествоДублей.КоличествоДублей,
	|	ВТ_КоличествоДублей.УжеДобавлена,
	|	ВТ_КоличествоДублей.Пользователь,
	|	ВТ_КоличествоДублей.ЗаКого
	|ИЗ
	|	ВТ_КоличествоДублей КАК ВТ_КоличествоДублей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсторияСтатусов.Период,
	|	ВТ_ИсторияСтатусов.Документ,
	|	ВТ_ИсторияСтатусов.Пользователь,
	|	ВТ_ИсторияСтатусов.ЗаКого,
	|	ВТ_ИсторияСтатусов.СтатусДокумента,
	|	ЕСТЬNULL(ВТ_КоличествоДублей.КоличествоДублей, 1) КАК КоличествоДублей
	|ИЗ
	|	ВТ_ИсторияСтатусов КАК ВТ_ИсторияСтатусов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоДублей КАК ВТ_КоличествоДублей
	|		ПО ВТ_ИсторияСтатусов.Период = ВТ_КоличествоДублей.Период
	|			И ВТ_ИсторияСтатусов.Документ = ВТ_КоличествоДублей.Документ
	|			И ВТ_ИсторияСтатусов.Пользователь = ВТ_КоличествоДублей.Пользователь
	|			И ВТ_ИсторияСтатусов.ЗаКого = ВТ_КоличествоДублей.ЗаКого";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаДублей = Результат[2].Выгрузить();
	ТаблицаДублей.Индексы.Добавить("Документ, Период, Пользователь, ЗаКого");
	
	Выборка = Результат[3].Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ИсторияСтатусовДокументов.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоДублей > 1 Тогда
			СтруктураПоиска = Новый Структура("Документ, Период, Пользователь, ЗаКого");
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			СтрокаДублей = ТаблицаДублей.НайтиСтроки(СтруктураПоиска);
			Если СтрокаДублей.Количество() > 0 Тогда
				СтрокаДублей = СтрокаДублей[0];
				Если СтрокаДублей.УжеДобавлена = Истина Тогда
					Продолжить;
				КонецЕсли;
				СтрокаДублей.УжеДобавлена = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьРегистр_ТекущиеСтатусыДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииРегламентногоМероприятия.Ссылка КАК Документ,
	|	торо_АктОВыполненииРегламентногоМероприятия.СтатусДокумента
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия КАК торо_АктОВыполненииРегламентногоМероприятия
	|ГДЕ
	|	торо_АктОВыполненииРегламентногоМероприятия.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРабот.Ссылка,
	|	торо_АктОВыполненииЭтапаРабот.СтатусДокумента
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРабот.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ВыявленныеДефекты.Ссылка,
	|	торо_ВыявленныеДефекты.СтатусДокумента
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
	|ГДЕ
	|	торо_ВыявленныеДефекты.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ГрафикРегламентныхМероприятийТОиР.Ссылка,
	|	торо_ГрафикРегламентныхМероприятийТОиР.СтатусДокумента
	|ИЗ
	|	Документ.торо_ГрафикРегламентныхМероприятийТОиР КАК торо_ГрафикРегламентныхМероприятийТОиР
	|ГДЕ
	|	торо_ГрафикРегламентныхМероприятийТОиР.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонт.Ссылка,
	|	торо_ЗаявкаНаРемонт.СтатусДокумента
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	|ГДЕ
	|	торо_ЗаявкаНаРемонт.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка,
	|	торо_НарядНаВыполнениеРемонтныхРабот.СтатусДокумента
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
	|ГДЕ
	|	торо_НарядНаВыполнениеРемонтныхРабот.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаРегламентноеМероприятие.Ссылка,
	|	торо_НарядНаРегламентноеМероприятие.СтатусДокумента
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие КАК торо_НарядНаРегламентноеМероприятие
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятие.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ПланГрафикРемонта.Ссылка,
	|	торо_ПланГрафикРемонта.СтатусДокумента
	|ИЗ
	|	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	|ГДЕ
	|	торо_ПланГрафикРемонта.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_Предписание.Ссылка,
	|	торо_Предписание.СтатусДокумента
	|ИЗ
	|	Документ.торо_ВнешнееОснованиеДляРабот КАК торо_Предписание
	|ГДЕ
	|	торо_Предписание.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктПриемкиОборудования.Ссылка,
	|	торо_АктПриемкиОборудования.СтатусДокумента
	|ИЗ
	|	Документ.торо_АктПриемкиОборудования КАК торо_АктПриемкиОборудования
	|ГДЕ
	|	торо_АктПриемкиОборудования.СтатусДокумента <> &ПустойСтатус
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ОстановочныеРемонты.Ссылка,
	|	торо_ОстановочныеРемонты.СтатусДокумента
	|ИЗ
	|	Документ.торо_ОстановочныеРемонты КАК торо_ОстановочныеРемонты
	|ГДЕ
	|	торо_ОстановочныеРемонты.СтатусДокумента <> &ПустойСтатус";
	
	Запрос.УстановитьПараметр("ПустойСтатус", Справочники.торо_СтатусыСогласованияДокументовРемонтныхРабот.ПустаяСсылка());
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ТекущиеСтатусыДокументов.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
	КонецЦикла;
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьРегистр_ТекущиеСогласующиеДокументов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииРегламентногоМероприятияСогласующие.Ссылка КАК Документ,
	|	торо_АктОВыполненииРегламентногоМероприятияСогласующие.Согласующий,
	|	торо_АктОВыполненииРегламентногоМероприятияСогласующие.Замещающий,
	|	торо_АктОВыполненииРегламентногоМероприятияСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.Согласующие КАК торо_АктОВыполненииРегламентногоМероприятияСогласующие
	|ГДЕ
	|	торо_АктОВыполненииРегламентногоМероприятияСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииЭтапаРаботСогласующие.Ссылка,
	|	торо_АктОВыполненииЭтапаРаботСогласующие.Согласующий,
	|	торо_АктОВыполненииЭтапаРаботСогласующие.Замещающий,
	|	торо_АктОВыполненииЭтапаРаботСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.Согласующие КАК торо_АктОВыполненииЭтапаРаботСогласующие
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВыявленныеДефектыСогласующие.Ссылка,
	|	торо_ВыявленныеДефектыСогласующие.Согласующий,
	|	торо_ВыявленныеДефектыСогласующие.Замещающий,
	|	торо_ВыявленныеДефектыСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты.Согласующие КАК торо_ВыявленныеДефектыСогласующие
	|ГДЕ
	|	торо_ВыявленныеДефектыСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ГрафикРегламентныхМероприятийТОиРСогласующие.Ссылка,
	|	торо_ГрафикРегламентныхМероприятийТОиРСогласующие.Согласующий,
	|	торо_ГрафикРегламентныхМероприятийТОиРСогласующие.Замещающий,
	|	торо_ГрафикРегламентныхМероприятийТОиРСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_ГрафикРегламентныхМероприятийТОиР.Согласующие КАК торо_ГрафикРегламентныхМероприятийТОиРСогласующие
	|ГДЕ
	|	торо_ГрафикРегламентныхМероприятийТОиРСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЗаявкаНаРемонтСогласующие.Ссылка,
	|	торо_ЗаявкаНаРемонтСогласующие.Согласующий,
	|	торо_ЗаявкаНаРемонтСогласующие.Замещающий,
	|	торо_ЗаявкаНаРемонтСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.Согласующие КАК торо_ЗаявкаНаРемонтСогласующие
	|ГДЕ
	|	торо_ЗаявкаНаРемонтСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_НарядНаВыполнениеРемонтныхРаботСогласующие.Ссылка,
	|	торо_НарядНаВыполнениеРемонтныхРаботСогласующие.Согласующий,
	|	торо_НарядНаВыполнениеРемонтныхРаботСогласующие.Замещающий,
	|	торо_НарядНаВыполнениеРемонтныхРаботСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.Согласующие КАК торо_НарядНаВыполнениеРемонтныхРаботСогласующие
	|ГДЕ
	|	торо_НарядНаВыполнениеРемонтныхРаботСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_НарядНаРегламентноеМероприятиеСогласующие.Ссылка,
	|	торо_НарядНаРегламентноеМероприятиеСогласующие.Согласующий,
	|	торо_НарядНаРегламентноеМероприятиеСогласующие.Замещающий,
	|	торо_НарядНаРегламентноеМероприятиеСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_НарядНаРегламентноеМероприятие.Согласующие КАК торо_НарядНаРегламентноеМероприятиеСогласующие
	|ГДЕ
	|	торо_НарядНаРегламентноеМероприятиеСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ПланГрафикРемонтаСогласующие.Ссылка,
	|	торо_ПланГрафикРемонтаСогласующие.Согласующий,
	|	торо_ПланГрафикРемонтаСогласующие.Замещающий,
	|	торо_ПланГрафикРемонтаСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_ПланГрафикРемонта.Согласующие КАК торо_ПланГрафикРемонтаСогласующие
	|ГДЕ
	|	торо_ПланГрафикРемонтаСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ПредписаниеСогласующие.Ссылка,
	|	торо_ПредписаниеСогласующие.Согласующий,
	|	торо_ПредписаниеСогласующие.Замещающий,
	|	торо_ПредписаниеСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_ВнешнееОснованиеДляРабот.Согласующие КАК торо_ПредписаниеСогласующие
	|ГДЕ
	|	торо_ПредписаниеСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_АктПриемкиОборудованияСогласующие.Ссылка,
	|	торо_АктПриемкиОборудованияСогласующие.Согласующий,
	|	торо_АктПриемкиОборудованияСогласующие.Замещающий,
	|	торо_АктПриемкиОборудованияСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_АктПриемкиОборудования.Согласующие КАК торо_АктПриемкиОборудованияСогласующие
	|ГДЕ
	|	торо_АктПриемкиОборудованияСогласующие.Согласовано = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ОстановочныеРемонтыСогласующие.Ссылка,
	|	торо_ОстановочныеРемонтыСогласующие.Согласующий,
	|	торо_ОстановочныеРемонтыСогласующие.Замещающий,
	|	торо_ОстановочныеРемонтыСогласующие.СтатусДокумента
	|ИЗ
	|	Документ.торо_ОстановочныеРемонты.Согласующие КАК торо_ОстановочныеРемонтыСогласующие
	|ГДЕ
	|	торо_ОстановочныеРемонтыСогласующие.Согласовано = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ТекущиеСогласующиеДокументов.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Согласовано = Истина;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура ОбработатьМассивСтруктурИерархии(масСИ, ИзменяетсяДокументами, ОшибкаТранзакции)
	
	Если ИзменяетсяДокументами Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ РасположениеОР
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии В (&СтруктураИерархии)) КАК торо_ИерархическиеСтруктурыОР
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
		|ПОМЕСТИТЬ ТабБезПорядка
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии В (&СтруктураИерархии)) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии В
		|			(ВЫБРАТЬ
		|				РасположениеОР.ОбъектИерархии
		|			ИЗ
		|				РасположениеОР КАК РасположениеОР)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасположениеОР.ОбъектИерархии,
		|	РасположениеОР.СтруктураИерархии,
		|	РасположениеОР.РодительИерархии
		|ИЗ
		|	РасположениеОР КАК РасположениеОР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабБезПорядка.ОбъектИерархии,
		|	ТабБезПорядка.СтруктураИерархии
		|ИЗ
		|	ТабБезПорядка КАК ТабБезПорядка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка";
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ РасположениеОР
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии В (&СтруктураИерархии)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии
		|ПОМЕСТИТЬ ТабБезПорядка
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасположениеОР КАК РасположениеОР
		|		ПО торо_ИерархическиеСтруктурыОР.РодительИерархии = РасположениеОР.ОбъектИерархии
		|			И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = РасположениеОР.СтруктураИерархии
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	РасположениеОР.ОбъектИерархии,
		|	РасположениеОР.СтруктураИерархии,
		|	РасположениеОР.РодительИерархии
		|ИЗ
		|	РасположениеОР КАК РасположениеОР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабБезПорядка.ОбъектИерархии КАК ОбъектИерархии,
		|	ТабБезПорядка.СтруктураИерархии КАК СтруктураИерархии,
		|	ТабБезПорядка.РодительИерархии КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_ТабБезПорядка
		|ИЗ
		|	ТабБезПорядка КАК ТабБезПорядка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектИерархии,
		|	СтруктураИерархии,
		|	РодительИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабБезПорядка.ОбъектИерархии,
		|	ТабБезПорядка.СтруктураИерархии
		|ИЗ
		|	ВТ_ТабБезПорядка КАК ТабБезПорядка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", масСИ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выгрузить();
	ПарамТаб = Выборка.Скопировать(,"ОбъектИерархии,СтруктураИерархии");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Таб.ОбъектИерархии КАК ОбъектИерерахии,
	|	Таб.СтруктураИерархии КАК СтруктураИерархии
	|ПОМЕСТИТЬ ВТ_ВсеОР
	|ИЗ
	|	&Таб КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИерерахии,
	|	СтруктураИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПорядокОРПоИерархии.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПорядокОРПоИерархии.СтруктураИерархии КАК СтруктураИерархии,
	|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР
	|ПОМЕСТИТЬ ВТ_ЗначениеРеквизитаУпорядочивания
	|ИЗ
	|	РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	СтруктураИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВсеОР.ОбъектИерерахии КАК ОбъектРемонта,
	|	ВТ_ВсеОР.СтруктураИерархии КАК СтруктураИерархии,
	|	ЕСТЬNULL(ВТ_ЗначениеРеквизитаУпорядочивания.РеквизитДопУпорядочиванияОР, -1) КАК РеквизитДопУпорядочиванияОР
	|ИЗ
	|	ВТ_ВсеОР КАК ВТ_ВсеОР
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗначениеРеквизитаУпорядочивания КАК ВТ_ЗначениеРеквизитаУпорядочивания
	|		ПО ВТ_ВсеОР.ОбъектИерерахии = ВТ_ЗначениеРеквизитаУпорядочивания.ОбъектРемонта
	|			И ВТ_ВсеОР.СтруктураИерархии = ВТ_ЗначениеРеквизитаУпорядочивания.СтруктураИерархии
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочиванияОР УБЫВ
	|ИТОГИ ПО
	|	СтруктураИерархии";
	
	Запрос.УстановитьПараметр("Таб", ПарамТаб);
	
	Результат = Запрос.Выполнить();
	ВыборкаПОСИ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Тз = Новый ТаблицаЗначений;
	Тз.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	Тз.Колонки.Добавить("СтруктураИерархии", Новый ОписаниеТипов("СправочникСсылка.торо_СтруктурыОР"));
	Тз.Колонки.Добавить("РеквизитДопУпорядочиванияОР", Новый ОписаниеТипов("Число",,новый КвалификаторыЧисла(5,2)));
	
	Пока ВыборкаПоСИ.Следующий() Цикл 
		
		Выборка = ВыборкаПоСИ.Выбрать();
		
		НадоЗаписать = Ложь;
		ПерваяСтрока = Истина;
		тз.Очистить();
		Пока Выборка.Следующий() цикл
			Если перваяСтрока тогда
				текИндекс = Выборка.РеквизитДопУпорядочиванияОР;
				текИндекс = ?(текИндекс = -1, 0, текИндекс);
				ПерваяСтрока = Ложь;
			КонецЕсли;
			
			нс = тз.Добавить();
			ЗаполнитьЗначенияСвойств(нс, Выборка);
			
			Если Выборка.РеквизитДопУпорядочиванияОР > 0 Тогда Продолжить; КонецЕсли;
			текИндекс = текИндекс + 1;
			нс.РеквизитДопУпорядочиванияОР = текИндекс;
			
			НадоЗаписать = Истина;
		КонецЦикла;
		
		Если НадоЗаписать Тогда
			НаборЗаписей = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтруктураИерархии.Установить(ВыборкаПоСИ.СтруктураИерархии);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			НаборЗаписей.Загрузить(тз);
			
			НаборЗаписей.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистр_ОбъектыРемонтаГруппы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таб.СтруктураИерархии,
	|	Таб.РодительИерархии
	|ПОМЕСТИТЬ Вт_ОрыИИерархии
	|ИЗ
	|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК Таб
	|ГДЕ
	|	Таб.СтруктураИерархии.СтроитсяАвтоматически = ЛОЖЬ
	|	И Таб.СтруктураИерархии.ИзменяетсяДокументами = ЛОЖЬ
	|	И Таб.РодительИерархии <> ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
	|	И НЕ Таб.РодительИерархии.ЭтоГруппа
	|	И НЕ Таб.ОбъектИерархии.Наименование ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	Таб.СтруктураИерархии,
	|	Таб.РодительИерархии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вт_ОрыИИерархии.РодительИерархии КАК ОбъектИерархии,
	|	Вт_ОрыИИерархии.СтруктураИерархии КАК СтруктураИерархии,
	|	ИСТИНА КАК ОбъектГруппа
	|ИЗ
	|	Вт_ОрыИИерархии КАК Вт_ОрыИИерархии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
	|		ПО Вт_ОрыИИерархии.РодительИерархии = торо_ОбъектыРемонтаГруппы.ОбъектИерархии
	|			И Вт_ОрыИИерархии.СтруктураИерархии = торо_ОбъектыРемонтаГруппы.СтруктураИерархии
	|ГДЕ
	|	торо_ОбъектыРемонтаГруппы.ОбъектИерархии ЕСТЬ NULL 
	|ИТОГИ ПО
	|	СтруктураИерархии";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоСИ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам); 
	
	НачатьТранзакцию();
	ОбработчикВыполненУспешно = Истина;
	
	Пока ВыборкаПоСИ.Следующий() Цикл
		
		набор = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
		набор.Отбор.СтруктураИерархии.Установить(ВыборкаПоСИ.СтруктураИерархии);
		набор.Прочитать();
		
		Выборка = ВыборкаПоСИ.Выбрать();
		Пока Выборка.Следующий() Цикл
			нс = набор.Добавить();
			ЗаполнитьЗначенияСвойств(нс, Выборка);
		КонецЦикла;
		
		Попытка
			набор.Записать();
		Исключение
			ОбработчикВыполненУспешно = Ложь;
		КонецПопытки;
	КонецЦикла;
	
	ОбработчикВыполненУспешно = Истина;
	Если ОбработчикВыполненУспешно Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, "Ошибка при добалении записей в рс ""Объекты ремонта группы"".");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновитьДатыВыбытияВРегистре_торо_СтатусыОбъектовРемонтаВУчете() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	
	Попытка
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ВыбытиеОбъектаРемонта.Ссылка
		|ИЗ
		|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыбытиеОбъектаРемонта КАК торо_ВыбытиеОбъектаРемонта
		|		ПО торо_СтатусыОбъектовРемонтаВУчете.Регистратор = торо_ВыбытиеОбъектаРемонта.Ссылка
		|			И торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта = торо_ВыбытиеОбъектаРемонта.ОбъектРемонта
		|			И торо_СтатусыОбъектовРемонтаВУчете.Период <> торо_ВыбытиеОбъектаРемонта.ДатаСписания
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ВыбытиеОбъектаРемонта.Ссылка
		|ИЗ
		|	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыбытиеОбъектаРемонта.СписокПодчиненныхСнятыхСУчета КАК торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСучета
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыбытиеОбъектаРемонта КАК торо_ВыбытиеОбъектаРемонта
		|			ПО торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСучета.Ссылка = торо_ВыбытиеОбъектаРемонта.Ссылка
		|		ПО торо_СтатусыОбъектовРемонтаВУчете.Регистратор = торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСучета.Ссылка
		|			И торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта = торо_ВыбытиеОбъектаРемонтаСписокПодчиненныхСнятыхСучета.ОбъектРемонта
		|ГДЕ
		|	торо_СтатусыОбъектовРемонтаВУчете.Период <> торо_ВыбытиеОбъектаРемонта.ДатаСписания");
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ДокОбъект.БезусловнаяЗапись = Истина;
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЦикла;
	Исключение	
		ТекстОшибки = ОписаниеОшибки();
		ОшибкаТранзакции = Истина;
	КонецПопытки;
	
	Если НЕ ОшибкаТранзакции Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, "Не удалось обновить даты выбытия объектов ремонта." + Символы.ПС + ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДатыВыбытияВРегистре_торо_РегламентныеМероприятияИСпискиОбъектов() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособУчетаДатыОтсчета
		|ИЗ
		|	РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
		|ГДЕ
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособУчетаДатыОтсчета = &СпособУчетаДатыОтсчета";
		
		Запрос.УстановитьПараметр("СпособУчетаДатыОтсчета", Перечисления.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот.ИспользоватьДатуВводаВЭксплуатацию);
		Результат = Запрос.Выполнить().Выгрузить();
		
		мз = РегистрыСведений.торо_РегламентныеМероприятияИСпискиОбъектов.СоздатьМенеджерЗаписи();
		
		Для каждого текЗапись из Результат Цикл
			мз.СписокОбъектов = текЗапись.СписокОбъектов;
			мз.ВидМероприятия = текЗапись.ВидМероприятия;
			мз.Прочитать();
			
			Если мз.Выбран() Тогда
				мз.СпособУчетаДатыОтсчета = Перечисления.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот.НеИспользоватьДатуВводаВЭксплуатацию;
				мз.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОшибкаТранзакции = Истина;
	КонецПопытки;
	
	Если НЕ ОшибкаТранзакции Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обновление информационной базы'"), УровеньЖурналаРегистрации.Ошибка,,, 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru='Не удалось обновить регистр сведений ""Регламентные мероприятия и списки объектов"".'%1 %2"), Символы.ПС + ТекстОшибки));
	КонецЕсли;
	
КонецПроцедуры

// Был добавлен справочник торо_УсловияГарантий. Необходимо заполнить его из старых гарантийных периодов.
Процедура ЗаполнитьУсловияГарантий() Экспорт
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	Попытка
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта
		|ИЗ
		|	РегистрСведений.торо_СрокиГарантииОбъектовРемонта КАК торо_СрокиГарантииОбъектовРемонта
		|ГДЕ
		|	торо_СрокиГарантииОбъектовРемонта.УсловияГарантии = ЗНАЧЕНИЕ(Справочник.торо_УсловияГарантии.ПустаяССылка)";
		Запрос = Новый Запрос(ТекстЗапроса);
		
		ВыборкаПоОР = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПоОР.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.торо_СрокиГарантииОбъектовРемонта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ВыборкаПоОР.ОбъектРемонта);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.УсловияГарантии) Тогда
					УсловияГарантииОбъект = Справочники.торо_УсловияГарантии.СоздатьЭлемент();
					УсловияГарантииОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='%1 - С %2 по %3'"), Запись.ОбъектРемонта,Формат(Запись.УдалитьДатаНачала, "ДФ=dd.MM.yyyy"), Формат(Запись.УдалитьДатаОкончания, "ДФ=dd.MM.yyyy"));
					УсловияГарантииОбъект.ПроверятьПериодГарантии = Истина;
					УсловияГарантииОбъект.ДатаНачалаГарантии = Запись.УдалитьДатаНачала;
					УсловияГарантииОбъект.ДатаОкончанияГарантии = Запись.УдалитьДатаОкончания;
					УсловияГарантииОбъект.Записать();
					
					Запись.УсловияГарантии = УсловияГарантииОбъект.Ссылка;
				КонецЕсли;
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Заполнение условий гарантии НЕ выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Заполнение условий гарантии выполнено!'");
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

Процедура ПерезаписатьВидыРемонта() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ВидыРемонтов.Ссылка
		|ИЗ
		|	Справочник.торо_ВидыРемонтов КАК торо_ВидыРемонтов
		|ГДЕ
		|	НЕ торо_ВидыРемонтов.ПланГрафикППР
		|	И НЕ торо_ВидыРемонтов.ГрафикМероприятий
		|	И НЕ торо_ВидыРемонтов.Непериодический
		|	И НЕ торо_ВидыРемонтов.ЭтоГруппа";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ВРОбъект = Выборка.ССылка.ПолучитьОбъект();
			ВРОбъект.Непериодический 	= Истина;
			ВРОбъект.ГрафикМероприятий 	= Истина;
			ВРОбъект.ПланГрафикППР 		= Истина;
			ВРОбъект.Записать();
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Перезапись видов ремонта не выполнена! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Перезапись видов ремонта выполнена!'");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура СформироватьДвиженияРегламентныхАктовПоРегиструФактическиеМатериальныеЗатратыРемонтныхРабот() Экспорт
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	Попытка
		
		// Выбрать проведенные документы, где есть хотя бы одна строка материальных затрат. 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_АктОВыполненииРегламентногоМероприятияМатериальныеЗатраты.Ссылка
		|ИЗ
		|	Документ.торо_АктОВыполненииРегламентногоМероприятия.МатериальныеЗатраты КАК торо_АктОВыполненииРегламентногоМероприятияМатериальныеЗатраты
		|ГДЕ
		|	торо_АктОВыполненииРегламентногоМероприятияМатериальныеЗатраты.Ссылка.Проведен";
		
		ВыборкаДокументов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ТаблицаМатериальныхЗатрат 	= ДвиженияРегламентныхАктов_ПодготовитьТаблицуМатериальныхЗатрат(ВыборкаДокументов.Ссылка);
			
			НаборЗаписей = РегистрыНакопления.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Ссылка);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Для Каждого ЗаписьМатериальныеЗатраты ИЗ ТаблицаМатериальныхЗатрат Цикл
				Движение = НаборЗаписей.Добавить();
				Движение.Регистратор = ВыборкаДокументов.Ссылка;
				Движение.ID = ЗаписьМатериальныеЗатраты.ID;
				Движение.РемонтыОборудования_ID = ЗаписьМатериальныеЗатраты.РемонтыОборудования_ID;
				Движение.Количество = ЗаписьМатериальныеЗатраты.Количество;
				Движение.Номенклатура = ЗаписьМатериальныеЗатраты.Номенклатура;
				Движение.Период = ЗаписьМатериальныеЗатраты.Период;
				Движение.РемонтнаяРабота = ЗаписьМатериальныеЗатраты.РемонтнаяРабота;
				Движение.ХарактеристикаНоменклатуры = ЗаписьМатериальныеЗатраты.ХарактеристикаНоменклатуры;
			КонецЦикла;

			НаборЗаписей.Записать(Истина);
		
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Движения документов ""Акт о выполнении регламентного мероприятия"" по регистру фактических материальных затрат НЕ сформированы! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Движения документов ""Акт о выполнении регламентного мероприятия"" по регистру фактических материальных затрат сформированы.'");
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

// 2.0.7.1

Процедура СформироватьДвиженияРегламентныхАктовПоРегиструФактическиеТрудовыеЗатратыРемонтныхРабот() Экспорт
	
	ОшибкаТранзакции = Ложь;
	НачатьТранзакцию();
	Попытка
		
		// Выбрать проведенные документы, где есть хотя бы одна строка материальных затрат. 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Ссылка
		|ИЗ
		|	Документ.торо_АктОВыполненииРегламентногоМероприятия.ТрудовыеЗатраты КАК торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты
		|ГДЕ
		|	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Ссылка.Проведен";
		
		ВыборкаДокументов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаДокументов.Следующий() Цикл
			
			ТаблицаТрудовыхЗатрат 	= ДвиженияРегламентныхАктов_ПодготовитьТаблицуТрудовыхЗатрат(ВыборкаДокументов.Ссылка);
			
			НаборЗаписей = РегистрыНакопления.торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Ссылка);
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Для Каждого ЗаписьТрудовыеЗатраты ИЗ ТаблицаТрудовыхЗатрат Цикл
				Движение = НаборЗаписей.Добавить();
				Движение.Регистратор = ВыборкаДокументов.Ссылка;
				Движение.ID = ЗаписьТрудовыеЗатраты.ID;
				Движение.РемонтыОборудования_ID = ЗаписьТрудовыеЗатраты.РемонтыОборудования_ID;
				Движение.Количество = ЗаписьТрудовыеЗатраты.Количество;
				Движение.Сотрудник = ЗаписьТрудовыеЗатраты.Сотрудник;
				Движение.Квалификация = ЗаписьТрудовыеЗатраты.Квалификация;
				Движение.Период = ЗаписьТрудовыеЗатраты.ДатаНачала;
				Движение.РемонтнаяРабота = ЗаписьТрудовыеЗатраты.РемонтнаяРабота;
				Движение.Сумма = ЗаписьТрудовыеЗатраты.Сумма;
				Движение.ВремяРаботы = ЗаписьТрудовыеЗатраты.ВремяРаботы;
			КонецЦикла;

			НаборЗаписей.Записать(Истина);
		
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Сообщение = Новый СообщениеПользователю;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Движения документов ""Акт о выполнении регламентного мероприятия"" по регистру фактических трудовых затрат НЕ сформированы! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Движения документов ""Акт о выполнении регламентного мероприятия"" по регистру фактических трудовых затрат сформированы.'");
	КонецЕсли;
	
	Сообщение.Сообщить();
	
КонецПроцедуры

Функция ДвиженияРегламентныхАктов_ПодготовитьТаблицуМатериальныхЗатрат(Ссылка)
	
	ТаблицаМатериальныхЗатрат = РегистрыНакопления.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.СоздатьНаборЗаписей().Выгрузить();
			
	Если Ссылка.МатериальныеЗатраты.Количество()=0 Тогда
		Возврат ТаблицаМатериальныхЗатрат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID КАК ID,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Выполнено,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ПроцентВыполненияРабот,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Количество,
	|	СУММА(1) КАК КолОперацийВТехКарте
	|ПОМЕСТИТЬ ТабРемРабот
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы КАК торо_ЗапланированныеРемонтныеРаботы
	|		ПО (торо_ЗапланированныеРемонтныеРаботы.Родитель_ID = торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID)
	|			И (ТИПЗНАЧЕНИЯ(торо_ЗапланированныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_ЗаявкаНаРемонт))
	|ГДЕ
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Выполнено,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ПроцентВыполненияРабот,
	|	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Количество
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID,
	|	РемонтнаяРабота,
	|	Родитель_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	|ПОМЕСТИТЬ ВТ_торо_ВыполняемыеРемонтныеРаботыОстатки
	|ИЗ
	|	РегистрНакопления.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Остатки(
	|			&МоментВремени,
	|			(IDРемонта, IDОперации, Родитель_ID) В
	|				(ВЫБРАТЬ
	|					ТабРемРабот.РемонтыОборудования_ID,
	|					ТабРемРабот.ID,
	|					ТабРемРабот.Родитель_ID
	|				ИЗ
	|					ТабРемРабот КАК ТабРемРабот)) КАК торо_ВыполняемыеРемонтныеРаботыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации,
	|	Родитель_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток КАК ПроцентОперацийОстаток,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстаток,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	|ПОМЕСТИТЬ ВТ_торо_ЗапланированныеРемонтныеРаботыОстатки
	|ИЗ
	|	РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы.Остатки(
	|			&МоментВремени,
	|			(IDРемонта, IDОперации, Родитель_ID) В
	|				(ВЫБРАТЬ
	|					ТабРемРабот.РемонтыОборудования_ID,
	|					ТабРемРабот.ID,
	|					ТабРемРабот.Родитель_ID
	|				ИЗ
	|					ТабРемРабот КАК ТабРемРабот)) КАК торо_ЗапланированныеРемонтныеРаботыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации,
	|	Родитель_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабРемРабот.ID,
	|	ТабРемРабот.РемонтнаяРабота,
	|	ТабРемРабот.Родитель_ID,
	|	ТабРемРабот.РемонтыОборудования_ID,
	|	ТабРемРабот.Выполнено,
	|	ТабРемРабот.ПроцентВыполненияРабот,
	|	ТабРемРабот.Количество,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток КАК ПроцентОперацийОстатокЗаплРем,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстатокЗаплРем,
	|	ТабРемРабот.КолОперацийВТехКарте
	|ПОМЕСТИТЬ ТаблицаДвижений
	|ИЗ
	|	ТабРемРабот КАК ТабРемРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_торо_ВыполняемыеРемонтныеРаботыОстатки КАК торо_ВыполняемыеРемонтныеРаботыОстатки
	|		ПО ТабРемРабот.РемонтыОборудования_ID = торо_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта
	|			И ТабРемРабот.ID = торо_ВыполняемыеРемонтныеРаботыОстатки.IDОперации
	|			И ТабРемРабот.Родитель_ID = торо_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_торо_ЗапланированныеРемонтныеРаботыОстатки КАК торо_ЗапланированныеРемонтныеРаботыОстатки
	|		ПО ТабРемРабот.РемонтыОборудования_ID = торо_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта
	|			И ТабРемРабот.ID = торо_ЗапланированныеРемонтныеРаботыОстатки.IDОперации
	|			И ТабРемРабот.Родитель_ID = торо_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID
	|;
	|ВЫБРАТЬ
	|	ТаблицаДвижений.ID,
	|	ТаблицаДвижений.Родитель_ID,
	|	ТаблицаДвижений.РемонтнаяРабота
	|ПОМЕСТИТЬ ТаблицаРемонтныхРабот
	|ИЗ
	|	ТаблицаДвижений КАК ТаблицаДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеМатериальныеЗатраты.ID,
	|	ПлановыеМатериальныеЗатраты.Номенклатура,
	|	ПлановыеМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	|	ПлановыеМатериальныеЗатраты.Количество
	|ПОМЕСТИТЬ ПлановыеМатериальныеЗатраты
	|ИЗ
	|	&ПлановыеМатериальныеЗатраты КАК ПлановыеМатериальныеЗатраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРемонтныхРабот.ID,
	|	ТаблицаРемонтныхРабот.Родитель_ID,
	|	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	|	ПлановыеМатериальныеЗатраты.Номенклатура,
	|	ПлановыеМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ПлановыеМатериальныеЗатраты.Количество, 0) КАК КоличествоПлан
	|ИЗ
	|	ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеМатериальныеЗатраты КАК ПлановыеМатериальныеЗатраты
	|		ПО ТаблицаРемонтныхРабот.ID = ПлановыеМатериальныеЗатраты.ID";
	
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(Ссылка.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ЗавершитьРемонтныеРаботы", Ссылка.ЗавершитьРемонтныеРаботы);
	
	НаборЗаписейПМЗ = РегистрыНакопления.торо_ПлановыеМатериальныеЗатратыРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписейПМЗ.Отбор.Регистратор.Установить(Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка());
	НаборЗаписейПМЗ.Прочитать();

	ТаблицаПлановыеМатериальныеЗатраты = НаборЗаписейПМЗ.Выгрузить();
	
	Запрос.УстановитьПараметр("ПлановыеМатериальныеЗатраты", ТаблицаПлановыеМатериальныеЗатраты);
	
	ТаблицаПМЗ_Процент = Запрос.Выполнить().Выгрузить();
	
	Счетчик = ТаблицаПМЗ_Процент.Количество()-1;
	Пока Счетчик >= 0 Цикл
		
		СтрокаТЗ = ТаблицаПМЗ_Процент[Счетчик];
		
		Если ТипЗнч(СтрокаТЗ.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ТаблицаПМЗ_Процент.Удалить(СтрокаТЗ);
		КонецЕсли; 
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла; 
	
	БуферМЗ = Ссылка.МатериальныеЗатраты.Выгрузить();
	БуферМЗ.Колонки.Добавить("Период");
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		
		КоэффициентЕИ = СтрокаТЗ.ЕдиницаИзмерения.Коэффициент;
		
		СтрокаТЗ.Количество = СтрокаТЗ.Количество * ?(КоэффициентЕИ = 0, 1, КоэффициентЕИ);
		
		СтрокаРемонта = Ссылка.Мероприятия.Найти(СтрокаТЗ.РемонтыОборудования_ID);
		Если СтрокаРемонта <> Неопределено Тогда
			СтрокаТЗ.Период = СтрокаРемонта.ДатаОкончания;
		КонецЕсли;
		
	КонецЦикла;
	
	БуферМЗ.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период", "Количество");
	
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ID) Тогда
			
			НайденнаяСтрокаТЗ = Ссылка.РемонтныеРаботы.Найти(СтрокаТЗ.ID, "ID");
			Если Не НайденнаяСтрокаТЗ = Неопределено Тогда
				
				НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, СтрокаТЗ);
				НовСтрокаТЗ.РемонтнаяРабота = НайденнаяСтрокаТЗ.РемонтнаяРабота;
				
			КонецЕсли; 
			
		Иначе
			
			МассивСтрок = ТаблицаПМЗ_Процент.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",
			СтрокаТЗ.Номенклатура, СтрокаТЗ.ХарактеристикаНоменклатуры));
			Если МассивСтрок.Количество() > 0 Тогда
				
				СуммаНормаПроцент = 0;
				Для Каждого Элемент Из МассивСтрок Цикл
					
					СуммаНормаПроцент = СуммаНормаПроцент + Элемент.ПроцентНеВыполненныхРабот * Элемент.КоличествоПлан;
					
				КонецЦикла; 
				
				Для Каждого Элемент Из МассивСтрок Цикл
					
					НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, Элемент);
					
					НовСтрокаТЗ.Количество = Элемент.ПроцентНеВыполненныхРабот * Элемент.КоличествоПлан * СтрокаТЗ.Количество / СуммаНормаПроцент;
					
				КонецЦикла;
				
			Иначе
				
				СуммаНормаПроцент = ТаблицаПМЗ_Процент.Итог("ПроцентНеВыполненныхРабот");
				Для Каждого СтрокаРР Из ТаблицаПМЗ_Процент Цикл
					
					НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, СтрокаРР);
					
					НовСтрокаТЗ.Номенклатура = СтрокаТЗ.Номенклатура;
					НовСтрокаТЗ.ХарактеристикаНоменклатуры = СтрокаТЗ.ХарактеристикаНоменклатуры;
					
					НовСтрокаТЗ.Количество = СтрокаРР.ПроцентНеВыполненныхРабот* СтрокаТЗ.Количество / СуммаНормаПроцент;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли;
		
		
	КонецЦикла; 
	
	ТаблицаМатериальныхЗатрат.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период, РемонтнаяРабота", "Количество");
	
	Возврат ТаблицаМатериальныхЗатрат;
	
КонецФункции

Функция ДвиженияРегламентныхАктов_ПодготовитьТаблицуТрудовыхЗатрат(Ссылка)
	
	ТаблицаТрудовыхЗатрат = РегистрыНакопления.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.СоздатьНаборЗаписей().Выгрузить();
			
	Если Ссылка.ТрудовыеЗатраты.Количество()=0 Тогда
		Возврат ТаблицаТрудовыхЗатрат;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота
	               |ПОМЕСТИТЬ ТаблицаРемонтныхРаботНачало
	               |ИЗ
	               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы
	               |ГДЕ
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаРемонтов
	               |ИЗ
	               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК торо_АктОВыполненииРегламентногоМероприятияМероприятия
	               |ГДЕ
	               |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДвижений.ID,
	               |	ТаблицаДвижений.Родитель_ID,
	               |	ТаблицаДвижений.РемонтыОборудования_ID,
	               |	ТаблицаДвижений.РемонтнаяРабота,
	               |	ТаблицаРемонтов.ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаРемонтныхРабот
	               |ИЗ
	               |	ТаблицаРемонтныхРаботНачало КАК ТаблицаДвижений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРемонтов КАК ТаблицаРемонтов
	               |		ПО ТаблицаДвижений.РемонтыОборудования_ID = ТаблицаРемонтов.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация,
	               |	СУММА(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.СуммаКНачислению) КАК СуммаКНачислению,
	               |	СУММА(1) КАК Количество,
	               |	СУММА(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ВремяРаботы) КАК ВремяРаботы,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Сотрудник
	               |ПОМЕСТИТЬ ТаблицаТрудозатратАкт
	               |ИЗ
	               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.ТрудовыеЗатраты КАК торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты
	               |ГДЕ
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Сотрудник,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.РемонтыОборудования_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТрудозатратАкт.Квалификация,
	               |	СУММА(ТаблицаТрудозатратАкт.СуммаКНачислению) КАК Сумма,
	               |	СУММА(ТаблицаТрудозатратАкт.Количество) КАК Количество,
	               |	СУММА(ТаблицаТрудозатратАкт.ВремяРаботы) КАК ВремяРаботы,
	               |	ТаблицаТрудозатратАкт.ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	               |	ТаблицаТрудозатратАкт.Сотрудник,
	               |	ТаблицаТрудозатратАкт.РемонтыОборудования_ID,
	               |	ТаблицаРемонтныхРабот.ДатаНачала
	               |ИЗ
	               |	ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТрудозатратАкт КАК ТаблицаТрудозатратАкт
	               |		ПО ТаблицаРемонтныхРабот.ID = ТаблицаТрудозатратАкт.ID
	               |			И ТаблицаРемонтныхРабот.РемонтыОборудования_ID = ТаблицаТрудозатратАкт.РемонтыОборудования_ID
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаТрудозатратАкт.Квалификация,
	               |	ТаблицаТрудозатратАкт.ID,
	               |	ТаблицаТрудозатратАкт.РемонтыОборудования_ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	               |	ТаблицаРемонтныхРабот.ДатаНачала,
	               |	ТаблицаТрудозатратАкт.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();

	
КонецФункции

Процедура УстановитьПараметрыНаборовСвойств() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_КадровыйПеревод", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ГрафикРегламентныхМероприятийТОиР", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_СерииНоменклатуры", ПараметрыНабора);
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление параметров наборов дополнительных свойств не выполнена! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление параметров наборов дополнительных свойств!'");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОбновлениеДокументовЦелевыхЗначенийПоказателейKPI() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		
   	Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_УстановкаЦелевыхЗначенийПоказателейKPIКлючевыеПоказатели.Ссылка
		|ИЗ
		|	Документ.торо_УстановкаЦелевыхЗначенийПоказателейKPI.КлючевыеПоказатели КАК торо_УстановкаЦелевыхЗначенийПоказателейKPIКлючевыеПоказатели
		|ГДЕ
		|	торо_УстановкаЦелевыхЗначенийПоказателейKPIКлючевыеПоказатели.Ссылка.Проведен
		|	И торо_УстановкаЦелевыхЗначенийПоказателейKPIКлючевыеПоказатели.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяССылка)
		|	И торо_УстановкаЦелевыхЗначенийПоказателейKPIКлючевыеПоказатели.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяССылка)
		|	И торо_УстановкаЦелевыхЗначенийПоказателейKPIКлючевыеПоказатели.ОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяССылка)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Для каждого Строка из ДокОбъект.КлючевыеПоказатели Цикл
				Если НЕ ЗначениеЗаполнено(Строка.Организация) 
					И НЕ ЗначениеЗаполнено(Строка.Подразделение) 
					И НЕ ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
					Строка.Организация = ДокОбъект.Организация;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление установки целевых значений показателей KPI не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление установки целевых значений показателей KPI выполнено!'");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ЗагрузитьПоставляемуюМодельПоказателейKPI() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		
		торо_ПоказателиKPI.ВосстановитьПоставляемуюМодельПоказателей();
				
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Загрузка поставляемой модели показателей KPI не выполнена! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Загрузка поставляемой модели показателей KPI выполнена!'");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура УстановитьОсновныеПоказателиНаработки() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Период КАК Период,
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель,
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ПлановаяНаработка,
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ПериодПлановойНаработки,
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ПродолжительностьПериодаПлановойНаработки,
		|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.КоэффициентИспользованияОборудования
		|ПОМЕСТИТЬ ВТ_Срез
		|ИЗ
		|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(, ОбъектРемонта ССЫЛКА Справочник.торо_ОбъектыРемонта) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Срез.ОбъектРемонта КАК ОбъектРемонта,
		|	МИНИМУМ(ВТ_Срез.Период) КАК Период
		|ПОМЕСТИТЬ ВТ_МинДаты
		|ИЗ
		|	ВТ_Срез КАК ВТ_Срез
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Срез.ОбъектРемонта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектРемонта,
		|	Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Срез.Период,
		|	ВТ_Срез.ОбъектРемонта,
		|	ВТ_Срез.Показатель,
		|	ВТ_Срез.ПлановаяНаработка,
		|	ВТ_Срез.ПериодПлановойНаработки,
		|	ВТ_Срез.ПродолжительностьПериодаПлановойНаработки,
		|	ВТ_Срез.КоэффициентИспользованияОборудования
		|ИЗ
		|	ВТ_МинДаты КАК ВТ_МинДаты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Срез КАК ВТ_Срез
		|		ПО ВТ_МинДаты.ОбъектРемонта = ВТ_Срез.ОбъектРемонта
		|			И ВТ_МинДаты.Период = ВТ_Срез.Период";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(Запись,Выборка);
			Запись.Основной = Истина;
			Запись.Записать(Истина);
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Установка основных показателей наработки не выполнена! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Установка основных показателей наработки выполнена!'");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОбнвлениеРегистра_ЗаказыНаРемонтВЕРП() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ЗаказыНаРемонтВЕРП.УникальныйИдентификатор КАК УникальныйИдентификатор
		               |ПОМЕСТИТЬ ЗаказыВЕРП
		               |ИЗ
		               |	РегистрСведений.торо_ЗаказыНаРемонтВЕРП КАК торо_ЗаказыНаРемонтВЕРП
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	УникальныйИдентификатор
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_РемонтыСрезПоследних.Регистратор КАК Регистратор,
		               |	торо_РемонтыСрезПоследних.ID КАК ID,
		               |	ВЫБОР
		               |		КОГДА ТИПЗНАЧЕНИЯ(торо_РемонтыСрезПоследних.Регистратор) = ТИП(Документ.торо_ВнешнееОснованиеДляРабот)
		               |			ТОГДА 0
		               |		КОГДА ТИПЗНАЧЕНИЯ(торо_РемонтыСрезПоследних.Регистратор) = ТИП(Документ.торо_ВыявленныеДефекты)
		               |			ТОГДА 1
		               |		КОГДА ТИПЗНАЧЕНИЯ(торо_РемонтыСрезПоследних.Регистратор) = ТИП(Документ.торо_ЗаявкаНаРемонт)
		               |			ТОГДА 2
		               |		КОГДА ТИПЗНАЧЕНИЯ(торо_РемонтыСрезПоследних.Регистратор) = ТИП(Документ.торо_НарядНаВыполнениеРемонтныхРабот)
		               |			ТОГДА 4
		               |		КОГДА ТИПЗНАЧЕНИЯ(торо_РемонтыСрезПоследних.Регистратор) = ТИП(Документ.торо_АктОВыполненииЭтапаРабот)
		               |			ТОГДА 5
		               |		КОГДА ТИПЗНАЧЕНИЯ(торо_РемонтыСрезПоследних.Регистратор) = ТИП(Документ.торо_ПланГрафикРемонта)
		               |			ТОГДА 0
		               |		ИНАЧЕ 0
		               |	КОНЕЦ КАК Приоритет
		               |ПОМЕСТИТЬ ВсеДокументыВЦепочке
		               |ИЗ
		               |	РегистрСведений.торо_Ремонты.СрезПоследних(
		               |			&Период,
		               |			ID В
		               |				(ВЫБРАТЬ
		               |					Таб.УникальныйИдентификатор
		               |				ИЗ
		               |					ЗаказыВЕРП КАК Таб)) КАК торо_РемонтыСрезПоследних
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВсеДокументыВЦепочке.Регистратор,
		               |	ВсеДокументыВЦепочке.ID КАК ID,
		               |	МАКСИМУМ(ВсеДокументыВЦепочке.Приоритет) КАК Приоритет
		               |ПОМЕСТИТЬ МаксПриоритетВЦепочке
		               |ИЗ
		               |	ВсеДокументыВЦепочке КАК ВсеДокументыВЦепочке
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВсеДокументыВЦепочке.Регистратор,
		               |	ВсеДокументыВЦепочке.ID
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВсеДокументыВЦепочке.Регистратор КАК Регистратор,
		               |	ВсеДокументыВЦепочке.ID КАК ID
		               |ПОМЕСТИТЬ СписокПроведенныхДокументов
		               |ИЗ
		               |	ВсеДокументыВЦепочке КАК ВсеДокументыВЦепочке
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксПриоритетВЦепочке КАК МаксПриоритетВЦепочке
		               |		ПО ВсеДокументыВЦепочке.ID = МаксПриоритетВЦепочке.ID
		               |			И ВсеДокументыВЦепочке.Приоритет = МаксПриоритетВЦепочке.Приоритет
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ID
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(СписокПроведенныхДокументов.ID, ЗаказыВЕРП.УникальныйИдентификатор) КАК ID,
		               |	ЕСТЬNULL(СписокПроведенныхДокументов.Регистратор, ЗНАЧЕНИЕ(Документ.торо_ВыявленныеДефекты.ПустаяСсылка)) КАК Регистратор,
		               |	ВЫБОР
		               |		КОГДА СписокПроведенныхДокументов.Регистратор ЕСТЬ NULL 
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК ОтменаПроведения
		               |ИЗ
		               |	СписокПроведенныхДокументов КАК СписокПроведенныхДокументов
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ЗаказыВЕРП КАК ЗаказыВЕРП
		               |		ПО СписокПроведенныхДокументов.ID = ЗаказыВЕРП.УникальныйИдентификатор
		               |ИТОГИ
		               |	МАКСИМУМ(ОтменаПроведения)
		               |ПО
		               |	Регистратор";
					   
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		резЗапроса = Запрос.Выполнить();
		Если НЕ резЗапроса.Пустой() Тогда
			Таблица_ID = Новый ТаблицаЗначений;
			Таблица_ID.Колонки.Добавить("ID", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(36, ДопустимаяДлина.Фиксированная)));
			ВыборкаПоДок = резЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДок.Следующий() Цикл
				ВыборкаДЗ = ВыборкаПоДок.Выбрать();
				Таблица_ID.Очистить();
				Пока ВыборкаДЗ.Следующий() Цикл
					нс = Таблица_ID.Добавить();
					нс.ID = ВыборкаДЗ.ID;
				КонецЦикла;
				РегистрыСведений.торо_ЗаказыНаРемонтВЕРП.АктуализироватьЗаписиРегистра(ВыборкаПоДок.Регистратор, ВыборкаПоДок.ОтменаПроведения, Таблица_ID);
			КонецЦикла;
		КонецЕсли;			
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление регистра ""Заказы на ремонт ВЕРП"" не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление регистра ""Заказы на ремонт ВЕРП"" выполнено!'");
	КонецЕсли; 	
	
КонецПроцедуры

// 2.0.8.1

Процедура ДозаполнениеРегистра_ВыявленныеДефекты() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка КАК Ссылка,
		|	торо_ВыявленныеДефектыСписокДефектов.ID,
		|	торо_ВыявленныеДефектыСписокДефектов.ДефектОписание,
		|	торо_ВыявленныеДефектыСписокДефектов.НаправлениеНаУстранение
		|ИЗ
		|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		|ГДЕ
		|	(торо_ВыявленныеДефектыСписокДефектов.ДефектОписание <> """"
		|			ИЛИ торо_ВыявленныеДефектыСписокДефектов.НаправлениеНаУстранение <> """")
		|	И торо_ВыявленныеДефектыСписокДефектов.Ссылка.Проведен = ИСТИНА
		|ИТОГИ ПО
		|	Ссылка";
		
		Результат = Запрос.Выполнить();
		ВыборкаСсылок = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Ссылка");
		
		Пока ВыборкаСсылок.Следующий() Цикл
			ВыборкаДеталей = ВыборкаСсылок.Выбрать(ОбходРезультатаЗапроса.Прямой);
			
			НаборЗаписей = РегистрыСведений.торо_ВыявленныеДефекты.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаСсылок.Ссылка);
			НаборЗаписей.Прочитать();
			
			Для Каждого Запись из НаборЗаписей Цикл
				ВыборкаДеталей.Сбросить();
				Если ВыборкаДеталей.НайтиСледующий(Запись.ID, "ID") Тогда
					Запись.ДефектОписание = ВыборкаДеталей.ДефектОписание;
					Запись.НаправлениеНаУстранение = ВыборкаДеталей.НаправлениеНаУстранение;
				КонецЕсли;
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
				
		КонецЦикла;
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Дозаполнение регистра ""Выявленные дефекты"" не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Дозаполнение регистра ""Выявленные дефекты"" выполнено!'");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ОбновлениеСправочника_КритичностьДефекта() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_КритичностьДефекта.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ ПредопредЭлементы
		               |ИЗ
		               |	Справочник.торо_КритичностьДефекта КАК торо_КритичностьДефекта
		               |ГДЕ
		               |	торо_КритичностьДефекта.Предопределенный
		               |	И торо_КритичностьДефекта.Ссылка В (&КД)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ВыявленныеДефектыСписокДефектов.КритичностьДефекта КАК КритичностьДефекта
		               |ПОМЕСТИТЬ ИспЭлементы
		               |ИЗ
		               |	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредопредЭлементы КАК ПредопредЭлементы
		               |		ПО торо_ВыявленныеДефектыСписокДефектов.КритичностьДефекта = ПредопредЭлементы.Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	торо_ВыявленныеДефектыСписокДефектов.КритичностьДефекта
		               |
		               |ОБЪЕДИНИТЬ
		               |
		               |ВЫБРАТЬ
		               |	торо_ВыявленныеДефекты.КритичностьДефекта
		               |ИЗ
		               |	РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредопредЭлементы КАК ПредопредЭлементы
		               |		ПО торо_ВыявленныеДефекты.КритичностьДефекта = ПредопредЭлементы.Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	торо_ВыявленныеДефекты.КритичностьДефекта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПредопредЭлементы.Ссылка КАК КритичностьДефекта
		               |ИЗ
		               |	ПредопредЭлементы КАК ПредопредЭлементы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ИспЭлементы КАК ИспЭлементы
		               |		ПО ПредопредЭлементы.Ссылка = ИспЭлементы.КритичностьДефекта
		               |ГДЕ
		               |	ИспЭлементы.КритичностьДефекта ЕСТЬ NULL 
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ИспЭлементы.КритичностьДефекта
		               |ИЗ
		               |	ИспЭлементы КАК ИспЭлементы";
					   
					   
		КД = Новый Массив();
		КД.Добавить(Справочники.торо_КритичностьДефекта.БлизкаяКНулю);
		КД.Добавить(Справочники.торо_КритичностьДефекта.ВышеСреднего);
		КД.Добавить(Справочники.торо_КритичностьДефекта.Критичная);
		КД.Добавить(Справочники.торо_КритичностьДефекта.НижеСреднего);
		
		запрос.УстановитьПараметр("КД", КД);
		
		РезЗапроса = Запрос.ВыполнитьПакет();
		
		ЭлементыКУдалению = РезЗапроса[2].Выбрать();
		ИспользуемыеЭлементы = РезЗапроса[3].Выбрать();
		
		Пока ИспользуемыеЭлементы.следующий() Цикл
			спрОб = ИспользуемыеЭлементы.КритичностьДефекта.ПолучитьОбъект();
			спрОб.ИмяПредопределенныхДанных = "";
			спрОб.Записать();
		КонецЦикла;
		
		Пока ЭлементыКУдалению.следующий() Цикл
			спрОб = ЭлементыКУдалению.КритичностьДефекта.ПолучитьОбъект();
			спрОб.ИмяПредопределенныхДанных = "";
			спрОб.Записать();
			спрС = спрОб.Ссылка;
			спрОб = спрС.ПолучитьОбъект();
			спрОб.Удалить();
		КонецЦикла;		
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление справочника ""Критичность дефекта"" не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление справочника ""Критичность дефекта"" выполнено!'");
	КонецЕсли; 	

	
КонецПроцедуры

Процедура ЗаполнитьСвойстваВидовКонтактнойИнформации() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		// СтандартныеПодсистемы 
		// СтандартныеПодсистемы.Пользователи.
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПользователя,
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 1);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя,
			Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 2);
		// Конец СтандартныеПодсистемы.Пользователи
		
		// СтандартныеПодсистемы.Организации
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации,
			Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Истина, 12);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации,
			Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 13);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации,
			Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь,   Ложь, 14);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ФаксОрганизации,
			Перечисления.ТипыКонтактнойИнформации.Факс,                  	Истина, Ложь,   Ложь, 15);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailОрганизации,
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь,   Ложь, 16);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации,
			Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь,   Ложь, 17);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации,
			Перечисления.ТипыКонтактнойИнформации.Другое,                	Истина, Ложь,   Ложь, 18);
		// Конец СтандартныеПодсистемы.Организации
		// Конец СтандартныеПодсистемы 
		
		// Справочник "Партнеры"
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПартнера,
			Перечисления.ТипыКонтактнойИнформации.Адрес,                 	Истина, Ложь, Ложь, 6);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера,
			Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 7);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailПартнера,
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 8);
		
		// Справочник "Контактные лица партнеров"
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица,
			Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 9);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица,
			Перечисления.ТипыКонтактнойИнформации.Телефон,               	Истина, Ложь, Ложь, 10);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица,
			Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты, 	Истина, Ложь, Ложь, 11);
		
		// Справочник "Физические лица"
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонМобильныйФизическиеЛица,
			Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 20);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица,
			Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 22);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица,
			Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 23);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица,
			Перечисления.ТипыКонтактнойИнформации.Телефон,					Истина, Ложь, Ложь, 24);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица,
			Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 25);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица,
			Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 26);
		ОбновитьВидКИ(Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица,
			Перечисления.ТипыКонтактнойИнформации.Адрес,					Истина, Ложь, Ложь, 27);
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление типов контактной информации не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление типов контактной информации выполнено!'");
	КонецЕсли; 	
		
КонецПроцедуры

Процедура ЗаполнениеНастройки_ИерархияДляМобильногоПриложения() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка

	СписокПользователей = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для каждого ПользовательИБ из СписокПользователей Цикл
		ОсновнаяСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Справочники.торо_СтруктурыОР.ПустаяСсылка(),,
			ПользовательИБ.Имя);

		Если ЗначениеЗаполнено(ОсновнаяСтруктураИерархии) И НЕ ОсновнаяСтруктураИерархии.СтроитсяАвтоматически Тогда
			ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
				"НастройкиТОиР",
				"ИерархияДляМобильногоПриложения",
				ОсновнаяСтруктураИерархии,,
				ПользовательИБ.Имя, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Заполнение настройки ""Иерархия для мобльного приложения"" не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Заполнение настройки ""Иерархия для мобльного приложения"" выполнено!'");
	КонецЕсли; 	
	
КонецПроцедуры

// 2.0.9.1
Процедура ОбновлениеСправочника_КвалификацииРемонтногоПерсонала() Экспорт
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		ВыборкаКвалификаций = Справочники.торо_КвалификацииРемонтногоПерсонала.Выбрать();
		НеобработанныеОбъекты = Новый Массив;
		МассивИспользованныхКодов = Новый Массив;
		КоличествоОбъектов = 0;
		Пока ВыборкаКвалификаций.Следующий() Цикл
			Код = СокрЛП(Строка(ВыборкаКвалификаций.Код));
			КоличествоОбъектов = КоличествоОбъектов + 1;
			Разница = 9 - СтрДлина(Код);
			Если Разница > 0 Тогда
				Для Счетчик = 0 По Разница-1 Цикл
					Код = "0" + Код;	
				КонецЦикла;
				НайденныйОбъект = Справочники.торо_КвалификацииРемонтногоПерсонала.НайтиПоКоду(Код);
				ОбъектКвалификации = ВыборкаКвалификаций.ПолучитьОбъект();
				Если НайденныйОбъект = Неопределено Тогда
					ОбъектКвалификации.Код = Код;
					МассивИспользованныхКодов.Добавить(Код);
				Иначе
					НеобработанныеОбъекты.Добавить(ОбъектКвалификации);
				КонецЕсли; 
				ОбъектКвалификации.Записать();
			Иначе
				МассивИспользованныхКодов.Добавить(Код);
			КонецЕсли;
		КонецЦикла;
		Для каждого Квалификация Из НеобработанныеОбъекты Цикл
			Для Счетчик = 1 По КоличествоОбъектов + 1 Цикл
				ПробныйКод = Формат(Счетчик, "ЧЦ=9; ЧВН=; ЧГ=0");
				НайденныйКод = МассивИспользованныхКодов.Найти(ПробныйКод);
				Если НайденныйКод = Неопределено Тогда
					Квалификация.Код = ПробныйКод;
					Квалификация.Записать();
					МассивИспользованныхКодов.Добавить(ПробныйКод);
					Прервать;
				КонецЕсли; 
			КонецЦикла; 		
		КонецЦикла;  
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление кодов квалификаций не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление кодов квалификаций выполнено!'");
	КонецЕсли; 	

КонецПроцедуры

// 2.0.10.1
Процедура ЗаписьНастроекПодключенияКСерверуСЛК() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		ПараметрыПодключения = Новый Структура;
		ПараметрыПодключения.Вставить("Host", Константы.торо_АдресСервераСЛК.Получить());
		ПараметрыПодключения.Вставить("Port", СтрЗаменить(Константы.торо_ПортСервераСЛК.Получить(), " ", ""));
		ПараметрыПодключения.Вставить("ФайлыДанных", Новый Соответствие);
		слкМенеджерЗащитыСервер.СохранитьНастройкиМенеджераСерииЗащиты("28DD", ПараметрыПодключения);
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Запись настроек подключения к серверу СЛК не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Запись настроек подключения к серверу СЛК выполнено!'");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура УстановитьПараметрыНаборовСвойствДокументов() Экспорт
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		
		ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_АктОВыполненииРегламентногоМероприятия", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_АктОВыполненииЭтапаРабот", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_АктПриемкиОборудования", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ВводНачальныхДанных", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ВнешнееОснованиеДляРабот", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ВнутреннееПотреблениеТоваров", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ВыбытиеОбъектаРемонта", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ВыявленныеДефекты", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ГрафикРегламентныхМероприятийТОиР", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ЗаказНаВнутреннееПотребление", ПараметрыНабора);
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ЗакрытиеЗаявокИРемонтов", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_КомиссионноеРассмотрение", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ЗаявкаНаРемонт", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ИзменениеПоложенияВСтруктуреИерархии", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ИзменениеСоставаРемонтнойБригады", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_КадровыйПеревод", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_НарядНаВыполнениеРемонтныхРабот", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_НарядНаРегламентноеМероприятие", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_НастройкаРегистрацииНаработкиЗависимыхОР", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ОприходованиеИзлишковТоваров", ПараметрыНабора);
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ОстановочныеРемонты", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ОценкаРаботыПодрядчика", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПеремещениеТоваров", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ПланГрафикРемонта", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПоступлениеТоваровУслуг", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПриемНаРаботу", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ПринятиеОРКУчету", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_ПрисвоениеКвалификацийСотрудникам", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_РегистрацияЗначенийВнешнихПоказателейKPI", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_СостоянияОбъектовРемонта", ПараметрыНабора);
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СписаниеНедостачТоваров", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_Увольнение", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УстановкаАналоговНоменклатурыДляРемонтов", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УстановкаКоэффициентовПереводаСтоимостейРемонтов", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УстановкаКоэффициентовРемонтныхОсобенностей", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УстановкаЛимитаНаПлановыеРемонтныеРаботы", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УстановкаМинимальногоОстаткаНоменклатуры", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УстановкаПроизвольногоЗначенияНаработки", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УстановкаСтоимостейКвалификаций", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УстановкаЦелевыхЗначенийПоказателейKPI", ПараметрыНабора);
		
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_УстановкаЦенНоменклатуры", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УчетКонтролируемыхПоказателей", ПараметрыНабора);
		УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_торо_УчетНаработкиОборудования", ПараметрыНабора);
		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление параметров наборов дополнительных свойств не выполнена! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление параметров наборов дополнительных свойств!'");
	КонецЕсли; 	
	
КонецПроцедуры

Процедура ИзменитьСтруктуруРегистровНаработки() Экспорт
	
	КоличествоДокументовВТранзакции = 100;
	ТранзакцияНачата = Ложь;
	БылиОшибки = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_УчетНаработкиОборудования.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ ВТ_Регистраторы
	|ИЗ
	|	Документ.торо_УчетНаработкиОборудования КАК торо_УчетНаработкиОборудования
	|ГДЕ
	|	торо_УчетНаработкиОборудования.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_УстановкаПроизвольногоЗначенияНаработки.Ссылка
	|ИЗ
	|	Документ.торо_УстановкаПроизвольногоЗначенияНаработки КАК торо_УстановкаПроизвольногоЗначенияНаработки
	|ГДЕ
	|	торо_УстановкаПроизвольногоЗначенияНаработки.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ВводНачальныхДанных.Ссылка
	|ИЗ
	|	Документ.торо_ВводНачальныхДанных КАК торо_ВводНачальныхДанных
	|ГДЕ
	|	торо_ВводНачальныхДанных.Проведен
	|	И торо_ВводНачальныхДанных.Ссылка В
	|			(ВЫБРАТЬ
	|				торо_ВводНачальныхДанныхНаработкаОбъектыРемонта.Ссылка КАК Ссылка
	|			ИЗ
	|				Документ.торо_ВводНачальныхДанных.НаработкаОбъектыРемонта КАК торо_ВводНачальныхДанныхНаработкаОбъектыРемонта)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Регистраторы.Регистратор КАК Регистратор
	|ИЗ
	|	ВТ_Регистраторы КАК ВТ_Регистраторы
	|ГДЕ
	|	НЕ ВТ_Регистраторы.Регистратор В
	|				(ВЫБРАТЬ
	|					торо_ПериодыНаработкиОР.Регистратор КАК Регистратор
	|				ИЗ
	|					РегистрСведений.торо_ПериодыНаработкиОР КАК торо_ПериодыНаработкиОР)";
	
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать();
	
	Счетчик = 1;
	Пока ВыборкаРегистратор.Следующий() Цикл
		Если Не ТранзакцияНачата Тогда
			НачатьТранзакцию();
			ТранзакцияНачата = Истина;
		КонецЕсли;
		
		НаборЗаписейЭталон = РегистрыНакопления.торо_НаработкаОбъектовРемонта.СоздатьНаборЗаписей();
		НаборЗаписейЭталон.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
		НаборЗаписейЭталон.Прочитать();
		
		НаборЗаписейСведений = РегистрыСведений.торо_ПериодыНаработкиОР.СоздатьНаборЗаписей();
		НаборЗаписейСведений.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
		НаборЗаписейСведений.Прочитать();
		НаборЗаписейСведений.Очистить();
		
		Попытка
			
			Для каждого ЗаписьЭталон из НаборЗаписейЭталон Цикл
				Если ЗаписьЭталон.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
					ЗаписьСведений = НаборЗаписейСведений.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьСведений, ЗаписьЭталон);
				КонецЕсли;
				
				ЗаписьЭталон.ДатаКон = ЗаписьЭталон.УдалитьДатаКон;
				ЗаписьЭталон.УдалитьДатаКон = Неопределено;
			КонецЦикла;
			
			НаборЗаписейЭталон.Записать(Истина);
			НаборЗаписейСведений.Записать(Истина);
			
		Исключение
			БылиОшибки = Истина;
			ОписаниеОшибки = ОписаниеОшибки();
			Сообщить(ОписаниеОшибки);
		КонецПопытки;
		
		Если БылиОшибки Тогда
			ОтменитьТранзакцию();
			Прервать;
		Иначе
			Если Счетчик/КоличествоДокументовВТранзакции = ЦЕЛ(Счетчик/КоличествоДокументовВТранзакции) Тогда
				ЗафиксироватьТранзакцию();
				ТранзакцияНачата = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Если ТранзакцияНачата И НЕ БылиОшибки Тогда
		ЗафиксироватьТранзакцию();
	КонецЕсли;

	Сообщение = Новый СообщениеПользователю;

	Если БылиОшибки Тогда
		Сообщение.Текст = НСтр("ru = 'Обновление параметров наборов дополнительных свойств не выполнена! По причине: '")+ОписаниеОшибки;
	Иначе
		Сообщение.Текст = НСтр("ru = 'Обновление параметров наборов дополнительных свойств!'");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОбновлениеСправочникаТехнологическихКарт() Экспорт
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ТехКартыМатериальныеЗатраты.Ссылка КАК Ссылка,
		|	торо_ТехКартыМатериальныеЗатраты.НомерСтроки КАК НомерСтроки,
		|	торо_ТехКартыМатериальныеЗатраты.ID КАК ID,
		|	торо_ТехКартыМатериальныеЗатраты.Операция КАК Операция
		|ПОМЕСТИТЬ ВТ_Ссылки
		|ИЗ
		|	Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
		|		ПО торо_ТехКартыМатериальныеЗатраты.ID = торо_ТехКартыСписокОпераций.ID
		|ГДЕ
		|	торо_ТехКартыСписокОпераций.ID ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ТехКартыТрудовыеЗатраты.Ссылка,
		|	торо_ТехКартыТрудовыеЗатраты.НомерСтроки,
		|	торо_ТехКартыТрудовыеЗатраты.ID,
		|	торо_ТехКартыТрудовыеЗатраты.Операция
		|ИЗ
		|	Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_ТехКартыТрудовыеЗатраты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
		|		ПО торо_ТехКартыТрудовыеЗатраты.ID = торо_ТехКартыСписокОпераций.ID
		|ГДЕ
		|	торо_ТехКартыСписокОпераций.ID ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ТехКартыИнструментыИТехника.Ссылка,
		|	торо_ТехКартыИнструментыИТехника.НомерСтроки,
		|	торо_ТехКартыИнструментыИТехника.ID,
		|	торо_ТехКартыИнструментыИТехника.Операция
		|ИЗ
		|	Справочник.торо_ТехКарты.ИнструментыИТехника КАК торо_ТехКартыИнструментыИТехника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
		|		ПО торо_ТехКартыИнструментыИТехника.ID = торо_ТехКартыСписокОпераций.ID
		|ГДЕ
		|	торо_ТехКартыСписокОпераций.ID ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Ссылки.Ссылка КАК Ссылка,
		|	ВТ_Ссылки.ID КАК Айди,
		|	ВТ_Ссылки.Операция КАК Операция
		|ИЗ
		|	ВТ_Ссылки КАК ВТ_Ссылки
		|ИТОГИ ПО
		|	Ссылка";
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаПоСсылке = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСсылке.Следующий() Цикл
			ВыборкаЗатрат = ВыборкаПоСсылке.Выбрать();
			ТехКарта = ВыборкаПоСсылке.Ссылка.ПолучитьОбъект();
			Пока ВыборкаЗатрат.Следующий() Цикл
				МассивМатЗатрат = ТехКарта.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID, Операция", ВыборкаЗатрат.Айди, ВыборкаЗатрат.Операция));
				Для каждого Элемент Из МассивМатЗатрат Цикл
					ТехКарта.МатериальныеЗатраты.Удалить(Элемент);	
				КонецЦикла;			
				
				МассивТрудЗатрат = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID, Операция", ВыборкаЗатрат.Айди, ВыборкаЗатрат.Операция));
				Для каждого Элемент Из МассивТрудЗатрат Цикл
					ТехКарта.ТрудовыеЗатраты.Удалить(Элемент);	
				КонецЦикла;
				
				МассивИнструментов = ТехКарта.ИнструментыИТехника.НайтиСтроки(Новый Структура("ID, Операция", ВыборкаЗатрат.Айди, ВыборкаЗатрат.Операция));
				Для каждого Элемент Из МассивИнструментов Цикл
					ТехКарта.ИнструментыИТехника.Удалить(Элемент);	
				КонецЦикла;			
				
			КонецЦикла; 
			ТехКарта.Записать();
		КонецЦикла;

	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление табличных частей технологических карт не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление табличных частей технологических карт выполнено!'");
	КонецЕсли; 	

КонецПроцедуры

Процедура ОбновлениеДокументовЗакрытияЗаявокИРемонтов() Экспорт
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.Ссылка КАК ЗакрытиеСсылка,
		               |	торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ID КАК ID,
		               |	ЕСТЬNULL(торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор, торо_ВыявленныеДефектыСписокДефектов.Ссылка) КАК ДокументОснование
		               |ИЗ
		               |	Документ.торо_ЗакрытиеЗаявокИРемонтов.ЗакрываемыеРемонты КАК торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(, Регистратор ССЫЛКА Документ.торо_ПланГрафикРемонта) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
		               |		ПО торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ID = торо_ПлановыеРемонтныеРаботыСрезПоследних.ID
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		               |		ПО торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ID = торо_ВыявленныеДефектыСписокДефектов.ID
		               |ГДЕ
		               |	торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ДокументОснование = НЕОПРЕДЕЛЕНО
		               |ИТОГИ ПО
		               |	ЗакрытиеСсылка";
					   
		ВыборкаЗакрытия = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗакрытия.Следующий() Цикл
			ДокЗакрытия = ВыборкаЗакрытия.ЗакрытиеСсылка.ПолучитьОбъект();
			ВыборкаОснований = ВыборкаЗакрытия.Выбрать();
			Пока ВыборкаОснований.Следующий() Цикл
				МассивСтрок = ДокЗакрытия.ЗакрываемыеРемонты.НайтиСтроки(Новый Структура("ID", ВыборкаОснований.ID));
				Для каждого Строка Из МассивСтрок Цикл
					Строка.ДокументОснование = ВыборкаОснований.ДокументОснование;
				КонецЦикла; 
			КонецЦикла; 
			ДокЗакрытия.Записать();
		КонецЦикла; 		
	Исключение
		ОшибкаТранзакции = Истина;
		ОписаниеОшибки = ОписаниеОшибки();
	КонецПопытки;   
	
	Сообщение = Новый СообщениеПользователю;

	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление документов закрытия заявок и ремонтов не выполнено! По причине: '")+ОписаниеОшибки;
	Иначе
		ЗафиксироватьТранзакцию();
		Сообщение.Текст = НСтр("ru = 'Обновление документов закрытия заявок и ремонтов выполнено!'");
	КонецЕсли; 	
	
КонецПроцедуры


#КонецОбласти