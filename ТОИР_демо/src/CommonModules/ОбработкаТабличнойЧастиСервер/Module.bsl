
#Область ПрограммныйИнтерфейс

// Обработка строки табличной части - вызывается из клиентского общего модуля при необходимости выполнения на сервере.
//
// Параметры:
//  СтруктураДействий - Структура - Возможно передавать следующие поля:
//   "ПроверитьХарактеристикуПоВладельцу", Характеристика.
//   "ПроверитьЗаполнитьУпаковкуПоВладельцу"      , Упаковка.
//   "ЗаполнитьОбъемВесУпаковки"	        , Упаковка.
//   "ПересчитатьКоличествоЕдиниц".
//   "ПересчитатьКоличествоЕдиницСуффикс". Суффикс
//   "ПересчитатьКоличествоУпаковок".,
//   "ПересчитатьКоличествоУпаковокСуффикс". Суффикс,
//   "ЗаполнитьЦенуПродажи"              , СтруктураПараметровДействия.
//   "ЗаполнитьПомещение"                , СтруктураПараметровДействия.
//   "ЗаполнитьПродавца"                , СтруктураПараметровДействия.
//   "ПересчитатьСумму".
//   "ПересчитатьСуммуСУчетомРучнойСкидки"     , СтруктураПараметровДействия.
//   "ПересчитатьСуммуСУчетомАвтоматическойСкидки"     , СтруктураПараметровДействия.
//   "ПересчитатьЦенуПоСуммеВСтрокеТЧ",
//   "ПересчитатьЦенуЗаУпаковку".
//   "ПересчитатьСуммуНДС".
//   "ЗаполнитьСтавкуНДС".
//   "ОбработатьШтрихкоды".
//   "ЗаполнитьНоменклатуруПоНоменклатуреПоставщика".
//   "ЗаполнитьУсловияПродажВСтрокеТЧКлиент"
//   "ЗаполнитьУсловияЗакупокВСтрокеТЧКлиент"
//   "ЗаполнитьФлагИзлишекПорча"
//   "ЗаполнитьФлагРасхождение"
//   "ОчиститьСуммуВзаиморасчетов"
//	  "ЗаполнитьФлагиНедоборНеотгружаемые"
//   "ПересчитатьКоличествоНеОтгружать".
//  ТекущаяСтрока - ДанныеФормыЭлементКоллекции - текущая строка.
//  КэшированныеЗначения - Структура - структура кэша.
//
Процедура ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;

	ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(     ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(  ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницВСтрокеТЧ(                   ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокВСтрокеТЧ(                 ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧ(                   ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(                     ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(               ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьВидЦеныВСтрокеТЧ(                              ТекущаяСтрока, СтруктураДействий                      ); 
	ЗаполнитьЦенуПродажиВСтрокеТЧ(                          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьУсловияПродажВСтрокеТЧ(                        ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСтавкуНДСПоНоменклатуреВСтрокеТЧ(              ТекущаяСтрока, СтруктураДействий                      );
	ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(              ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);

	ПересчитатьСуммуВСтрокеТЧ(                              ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуПоСуммеВСтрокеТЧ(                        ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиПоСуммеСНДС(                     ТекущаяСтрока, СтруктураДействий                      );
	ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(          ТекущаяСтрока, СтруктураДействий                      );
	ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(   ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(           ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ( ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуНДСВСтрокеТЧ(                           ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьЦенуСНДС(                                    ТекущаяСтрока, СтруктураДействий                      );
	ПересчитатьСуммуСНДСВСтрокеТЧ(                          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуБезНДСВСтрокеТЧ(                        ТекущаяСтрока, СтруктураДействий                      );
	ПересчитатьСуммуРеглВСтрокеТЧ(                          ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьНДСРеглВСтрокеТЧ(                            ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиВСтрокеТЧ(                       ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПересчитатьСуммуПродажиНДСВСтрокеТЧ(                    ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧ(              ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	УстановитьАктивностьСтроки(                             ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ПроверитьЗаполнитьСкладВСтрокеТЧ(                       ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьФлагиНедоборНеотгружаемыеИзлишкиНедостачи(     ТекущаяСтрока, СтруктураДействий                      );
	ЗаполнитьУчетноеКоличествоНоменклатуры(                 ТекущаяСтрока, СтруктураДействий                      );
	
	ЗаполнитьДубликатыЗависимыхРеквизитов(                  ТекущаяСтрока, СтруктураДействий                      );
	
	
КонецПроцедуры

// Обработка табличной части.
// Параметры:
//	 ТЧ - ТабличнаяЧасть - табличная часть.
//  СтруктураДействий - Структура - структура действий.
//  КэшированныеЗначения - Структура - структура кэша.  
Процедура ОбработатьТЧ(ТЧ,СтруктураДействий,КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ОбработкаТабличнойЧастиКлиентСервер.ПолучитьСтруктуруКэшируемыеЗначения();
	КонецЕсли;
	
	Для Каждого СтрТабл из ТЧ Цикл
		ОбработатьСтрокуТЧ(СтрТабл, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПроцедурыПересчетаИЗаполненияСервер

Процедура ПроверитьКорректностьЗаполнитьХарактеристикиИУпаковки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем Характеристика;
	Перем Упаковка;
	СтруктураПараметровДействия = Неопределено;

	ПроверитьХарактеристикуПоВладельцу = СтруктураДействий.Свойство("ПроверитьХарактеристикуПоВладельцу", Характеристика);
	ПроверитьЗаполнитьУпаковкуПоВладельцу       = СтруктураДействий.Свойство("ПроверитьЗаполнитьУпаковкуПоВладельцу", Упаковка);

	Если ПроверитьХарактеристикуПоВладельцу 
		Или ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
		РезультатПроверки = Справочники.Номенклатура.ХарактеристикаИУпаковкаПринаджлежатВладельцу(ТекущаяСтрока.Номенклатура, Характеристика, Упаковка);

		Если ПроверитьХарактеристикуПоВладельцу Тогда
			ТекущаяСтрока.Характеристика             = РезультатПроверки.Характеристика;
			ТекущаяСтрока.ХарактеристикиИспользуются = РезультатПроверки.ХарактеристикиИспользуются;
		КонецЕсли;
		
		Если ПроверитьЗаполнитьУпаковкуПоВладельцу Тогда
			ТекущаяСтрока.Упаковка = РезультатПроверки.Упаковка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьКоличествоЕдиницВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем Упаковка;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиниц", Упаковка) Тогда
		Если Упаковка = Неопределено Тогда
			ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок
		   		* ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
		Иначе
			ТекущаяСтрока.Количество = ТекущаяСтрока.КоличествоУпаковок
		   		* ПолучитьКоэффициентУпаковки(Упаковка, КэшированныеЗначения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоЕдиницСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Суффикс = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьКоличествоЕдиницСуффикс",Суффикс) Тогда
		Если Суффикс = Неопределено Тогда
			Суффикс = "";
		КонецЕсли;
		
		ТекущаяСтрока["Количество" + Суффикс]  = ТекущаяСтрока["КоличествоУпаковок" + Суффикс]
		   * ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковок") Тогда
		ТекущаяСтрока.КоличествоУпаковок = ТекущаяСтрока.Количество
		   / ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьКоличествоУпаковокСуффиксВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Суффикс = Неопределено;

	Если СтруктураДействий.Свойство("ПересчитатьКоличествоУпаковокСуффикс",Суффикс) Тогда
		Если Суффикс = Неопределено Тогда
			Суффикс = "";
		КонецЕсли;
		ТекущаяСтрока["КоличествоУпаковок" + Суффикс] = ТекущаяСтрока["Количество" + Суффикс] 
		   / ПолучитьКоэффициентУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОбъемВесПоУпаковкеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	Если СтруктураДействий.Свойство("ЗаполнитьОбъемВесУпаковки") Тогда
		ТекущаяСтрока.ОбъемУпаковки = ПолучитьОбъемУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
		ТекущаяСтрока.ВесУпаковки = ПолучитьВесУпаковки(ТекущаяСтрока.Упаковка, КэшированныеЗначения);
	КонецЕсли;
КонецПроцедуры

Процедура ПересчитатьЦенуЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦенуСНДС(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуСНДС", СтруктураПараметровДействия) Тогда
		
		Если СтруктураПараметровДействия = Неопределено
		 Или СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС) = Ложь Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		ПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
		ТекущаяСтрока.Цена = ТекущаяСтрока.Цена + ТекущаяСтрока.Цена * ПроцентНДС / (ПроцентНДС + 1);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСВозвратнойТарыВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем ЭтоВозвратнаяТара;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСВозвратнойТары", ЭтоВозвратнаяТара)
		И ЭтоВозвратнаяТара И ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара Тогда
		ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСумму", ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества="КоличествоУпаковок"
		КонецЕсли;
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Цена * ТекущаяСтрока[ИмяКоличества];
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьЦенуПоСуммеВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	ИмяКоличества = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПоСумме",ИмяКоличества) Тогда
		Если Не ЗначениеЗаполнено(ИмяКоличества) Тогда
			ИмяКоличества = "КоличествоУпаковок";
		КонецЕсли;
		Если ТекущаяСтрока[ИмяКоличества] = 0 Тогда
			ТекущаяСтрока.Цена = ТекущаяСтрока.Сумма;
		Иначе
			ТекущаяСтрока.Цена = Окр(ТекущаяСтрока.Сумма / ТекущаяСтрока[ИмяКоличества], 2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьЦенуПродажиПоСуммеПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий) 
	
	Если СтруктураДействий.Свойство("ПересчитатьЦенуПродажиПоСуммеПродажи") Тогда
		
		ТекущаяСтрока.ЦенаПродажи = ?(ТекущаяСтрока.КоличествоУпаковок <> 0, Окр(ТекущаяСтрока.СуммаПродажи / ТекущаяСтрока.КоличествоУпаковок, 2, 1), 0);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомРучнойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	СтруктураПараметровДействия = Неопределено;
		
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомРучнойСкидки", СтруктураПараметровДействия) Тогда
		
		ИмяКоличества = "КоличествоУпаковок";
		Очищать = Неопределено;
		ПересчитыватьСуммуРучнойСкидки = Неопределено;
		Если СтруктураПараметровДействия <> Неопределено Тогда
			
			СтруктураПараметровДействия.Свойство("Очищать", Очищать);
			СтруктураПараметровДействия.Свойство("ПересчитыватьСуммуРучнойСкидки", ПересчитыватьСуммуРучнойСкидки);
			СтруктураПараметровДействия.Свойство("ИмяКоличества", ИмяКоличества);
			
			Если НЕ ЗначениеЗаполнено(ИмяКоличества) Тогда
				ИмяКоличества = "КоличествоУпаковок";
			КонецЕсли;
			
			Если Очищать = Истина Тогда
				
				ТекущаяСтрока.СуммаРучнойСкидки   = 0;
				ТекущаяСтрока.ПроцентРучнойСкидки = 0;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПересчитыватьСуммуРучнойСкидки = Ложь Тогда
			
		Иначе
			ТекущаяСтрока.СуммаРучнойСкидки = Окр(ТекущаяСтрока[ИмяКоличества]*ТекущаяСтрока.Цена * ТекущаяСтрока.ПроцентРучнойСкидки / 100, 2);
		КонецЕсли;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаРучнойСкидки;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомАвтоматическойСкидкиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомАвтоматическойСкидки", СтруктураПараметровДействия) Тогда
		
		Очищать = Неопределено;
		СтруктураПараметровДействия.Свойство("Очищать", Очищать);
		
		Если Очищать Тогда
			
			ТекущаяСтрока.СуммаАвтоматическойСкидки = 0;
			ТекущаяСтрока.ПроцентАвтоматическойСкидки = 0;
			
		КонецЕсли;
		
		Скидка = ТекущаяСтрока.СуммаАвтоматическойСкидки;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСУчетомСкидкиБонуснымиБалламиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	СтруктураПараметровДействия = Неопределено;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСУчетомСкидкиБонуснымиБаллами", СтруктураПараметровДействия) Тогда
		
		Скидка = ТекущаяСтрока.СуммаБонусныхБалловКСписаниюВВалюте;
		
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Сумма - Скидка;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуНДС", СтруктураПараметровДействия) Тогда
		
		Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		Если КэшированныеЗначения.Свойство("ПроцентыСтавокНДС") Тогда
			ТекПроцентНДС = КэшированныеЗначения.ПроцентыСтавокНДС[СтавкаНДС];
		Иначе
			КэшированныеЗначения.Вставить("ПроцентыСтавокНДС", Новый Соответствие);
			ТекПроцентНДС = Неопределено;
		КонецЕсли;
		
		Если ТекПроцентНДС = Неопределено Тогда
			
			ТекПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
			КэшированныеЗначения.ПроцентыСтавокНДС.Вставить(СтавкаНДС, ТекПроцентНДС);
			
		КонецЕсли;
		
		ТекущаяСтрока.СуммаНДС = ЦенообразованиеКлиентСервер.РассчитатьСуммуНДС(ТекущаяСтрока.Сумма, ТекПроцентНДС, СтруктураПараметровДействия.ЦенаВключаетНДС);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуСНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуСНДС", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.СуммаСНДС = ТекущаяСтрока.Сумма + ?(СтруктураПараметровДействия.ЦенаВключаетНДС, 0, ТекущаяСтрока.СуммаНДС);
	
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажи", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.ЦенаПродажи * ТекущаяСтрока.КоличествоУпаковок;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	Перем СтавкаНДС;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиНДС", СтруктураПараметровДействия) Тогда
		
		Если НЕ (СтруктураПараметровДействия <> Неопределено И СтруктураПараметровДействия.Свойство("СтавкаНДС", СтавкаНДС)) Тогда
			СтавкаНДС = ТекущаяСтрока.СтавкаНДС;
		КонецЕсли;
		
		ТекущийПроцентНДС = ЦенообразованиеКлиентСервер.ПолучитьСтавкуНДСЧислом(СтавкаНДС);
		ТекущаяСтрока.СуммаПродажиНДС = Окр(ТекущаяСтрока.СуммаПродажи * ТекущийПроцентНДС / (1 + ТекущийПроцентНДС), 2, РежимОкругления.Окр15как20);
		
	КонецЕсли;

КонецПроцедуры

Процедура ПересчитатьСуммуПродажиПоСуммеСНДС(ТекущаяСтрока, СтруктураДействий) 
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуПродажиПоСуммеСНДС", СтруктураПараметровДействия) Тогда
	
		ТекущаяСтрока.СуммаПродажи = ТекущаяСтрока.СуммаСНДС;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьУсловияПродажВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия) Тогда

		Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|				ТОГДА
			|					ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ВложенныйЗапрос.Цена/ЕстьNULL(ВложенныйЗапрос.КоэффициентУпаковкиСоглашения,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|								/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
			|		ТОГДА
			|			ВЫБОР
			|				КОГДА
			|					&Упаковка <> ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
			|				ТОГДА
			|					ВЫРАЗИТЬ(&Упаковка КАК Справочник.УпаковкиНоменклатуры).Коэффициент
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|			* ЦеныНоменклатурыСрезПоследних.Цена/ЕстьNULL(ЦеныНоменклатурыСрезПоследних.Упаковка.Коэффициент,1)
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|									/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена,
			|	ВложенныйЗапрос.СрокПоставки КАК СрокПоставки
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена,
			|СоглашениеТовары.Упаковка             КАК Упаковка,
			|СоглашениеТовары.Упаковка.Коэффициент КАК КоэффициентУпаковкиСоглашения,
			|ВЫБОР
			|	КОГДА ЕСТЬNULL(СоглашениеТовары.СрокПоставки, 0) > 0
			|		ТОГДА СоглашениеТовары.СрокПоставки
			|	ИНАЧЕ ВЫБОР
			|			КОГДА ЕСТЬNULL(СоглашениеЦеновыеГруппы.СрокПоставки, 0) > 0
			|				ТОГДА СоглашениеЦеновыеГруппы.СрокПоставки
			|			ИНАЧЕ СоглашениеШапка.СрокПоставки
			|		КОНЕЦ
			|КОНЕЦ КАК СрокПоставки
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|// СОЕДИНЕНИЯ С ЦЕНАМИ НОМЕНКЛАТУРАЫ И КУРСАМИ ВАЛЮТ
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
		Запрос.УстановитьПараметр("Упаковка"        , ТекущаяСтрока.Упаковка);
    КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги", СтруктураПараметровДействия) Тогда
		    Запрос = Новый Запрос("
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВложенныйЗапрос.Валюта    КАК Валюта,
			|	ВложенныйЗапрос.ВидЦены   КАК ВидЦены,
			|	ВЫБОР
			|		КОГДА
			|			ВложенныйЗапрос.Цена > 0
			|		ТОГДА
			|			ВложенныйЗапрос.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ВложенныйЗапрос.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаСоглашения.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|								(КурсыСрезПоследнихВалютаСоглашения.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|								/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаСоглашения.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|		КОГДА
			|			ВложенныйЗапрос.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|			И ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) > 0
			|		ТОГДА
			|			ЦеныНоменклатурыСрезПоследних.Цена
			|			* ВЫБОР
			|				КОГДА &Валюта <> ЦеныНоменклатурыСрезПоследних.Валюта
			|					ТОГДА
			|						ВЫБОР
			|							КОГДА ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаЦены.Курс, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Кратность, 0) > 0
			|								  И ЕСТЬNULL(КурсыСрезПоследнихВалютаДокумента.Курс, 0) > 0
			|							ТОГДА
			|									(КурсыСрезПоследнихВалютаЦены.Курс * КурсыСрезПоследнихВалютаДокумента.Кратность)
			|									/ (КурсыСрезПоследнихВалютаДокумента.Курс * КурсыСрезПоследнихВалютаЦены.Кратность)
			|							ИНАЧЕ 0
			|						КОНЕЦ
			|				ИНАЧЕ
			|					1
			|			КОНЕЦ
			|	ИНАЧЕ
			|		0
			|	КОНЕЦ КАК Цена
			|ИЗ (
			|ВЫБРАТЬ
			|	СоглашениеШапка.Валюта,
			|ВЫБОР
			|	КОГДА
			|		ЕСТЬNULL(СоглашениеТовары.Цена,0) > 0
			|	ТОГДА
			|		ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	КОГДА (СоглашениеТовары.ВидЦены <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		И СоглашениеТовары.ВидЦены ЕСТЬ НЕ NULL)
			|	ТОГДА
			|		СоглашениеТовары.ВидЦены
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ НЕ NULL
			|		И СоглашениеЦеновыеГруппы.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА 
			|		СоглашениеЦеновыеГруппы.ВидЦен
			|	КОГДА (СоглашениеТовары.ВидЦены = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|		ИЛИ СоглашениеТовары.ВидЦены ЕСТЬ NULL)
			|		И (СоглашениеЦеновыеГруппы.ВидЦен ЕСТЬ NULL
			|		ИЛИ СоглашениеЦеновыеГруппы.ВидЦен = ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка))
			|		И СоглашениеШапка.ВидЦен <> ЗНАЧЕНИЕ(Справочник.ВидыЦен.ПустаяСсылка)
			|	ТОГДА
			|		СоглашениеШапка.ВидЦен
			|КОНЕЦ КАК ВидЦены,
			|ЕСТЬNULL(СоглашениеТовары.Цена,0) КАК Цена
			|	
			|ИЗ
			|	Справочник.СоглашенияСКлиентами КАК СоглашениеШапка
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.Номенклатура КАК СправочникНоменклатура
			|ПО
			|	СправочникНоменклатура.Ссылка = &Номенклатура
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.Товары КАК СоглашениеТовары
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеТовары.Ссылка
			|	И СоглашениеТовары.Номенклатура = &Номенклатура
			|	И СоглашениеТовары.Характеристика = &Характеристика
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	Справочник.СоглашенияСКлиентами.ЦеновыеГруппы КАК СоглашениеЦеновыеГруппы
			|ПО
			|	СоглашениеШапка.Ссылка = СоглашениеЦеновыеГруппы.Ссылка
			|	И СправочникНоменклатура.Ссылка.ЦеноваяГруппа = СоглашениеЦеновыеГруппы.ЦеноваяГруппа
			|
			|ГДЕ
			|	СоглашениеШапка.Ссылка = &Соглашение
			|) КАК ВложенныйЗапрос
			|
			|// СОЕДИНЕНИЯ С ЦЕНАМИ НОМЕНКЛАТУРАЫ И КУРСАМИ ВАЛЮТ
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), Номенклатура = &Номенклатура И Характеристика = &Характеристика
			|) КАК ЦеныНоменклатурыСрезПоследних
			|ПО
			|	ВложенныйЗапрос.ВидЦены = ЦеныНоменклатурыСрезПоследних.ВидЦены
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаЦены
			|ПО
			|	КурсыСрезПоследнихВалютаЦены.Валюта = ЦеныНоменклатурыСрезПоследних.Валюта
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыСрезПоследнихВалютаДокумента
			|ПО
			|	ИСТИНА
			|
			|ЛЕВОЕ СОЕДИНЕНИЕ
			|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата) КАК КурсыСрезПоследнихВалютаСоглашения
			|ПО
			|	КурсыСрезПоследнихВалютаСоглашения.Валюта = ВложенныйЗапрос.Валюта
			|
			|");
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУсловияПродаж", СтруктураПараметровДействия) 
	 ИЛИ СтруктураДействий.Свойство("ЗаполнитьУсловияПродажУслуги", СтруктураПараметровДействия) Тогда

		Запрос.УстановитьПараметр("Соглашение"      , СтруктураПараметровДействия.Соглашение);
		Запрос.УстановитьПараметр("Дата"            , СтруктураПараметровДействия.Дата);
		Запрос.УстановитьПараметр("Номенклатура"    , ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика"  , ТекущаяСтрока.Характеристика);
		Запрос.УстановитьПараметр("Валюта"          , СтруктураПараметровДействия.Валюта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
		
			ТекущаяСтрока.Цена = Выборка.Цена;
			
			Если ТекущаяСтрока.Свойство("ВидЦены") Тогда
				
				Если ЗначениеЗаполнено(Выборка.ВидЦены) Тогда
					ТекущаяСтрока.ВидЦены = Выборка.ВидЦены;
				Иначе
					ТекущаяСтрока.ВидЦены = Справочники.ВидыЦен.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			
			Если ТекущаяСтрока.Свойство("СрокПоставки") Тогда
				
				ТекущаяСтрока.СрокПоставки = Выборка.СрокПоставки;
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьВидЦеныВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ЗаполнитьВидЦены", СтруктураПараметровДействия) Тогда
		
		ТекущаяСтрока.ВидЦены = СтруктураПараметровДействия.ВидЦены;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидЦеныВСтрокеТЧ()

Процедура ЗаполнитьЦенуПродажиВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия, ЗначениеСвойства;
	Если Не СтруктураДействий.Свойство("ЗаполнитьЦенуПродажи", СтруктураПараметровДействия) Тогда
		Возврат;
	КонецЕсли;
	
	// Получение параметров запроса
	СтруктураПараметровОтбора = Новый Структура("Валюта, Дата, ВидЦены, Номенклатура, Характеристика, Упаковка");
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, ТекущаяСтрока);
	ЗаполнитьЗначенияСвойств(СтруктураПараметровОтбора, СтруктураПараметровДействия);
	
	Если (СтруктураПараметровДействия.Свойство("ОбработатьШтрихкоды", ЗначениеСвойства) И ЗначениеСвойства.НеИспользоватьУпаковки)
	Или СтруктураПараметровОтбора.Упаковка = Неопределено Тогда
		СтруктураПараметровОтбора.Вставить("Упаковка", Справочники.УпаковкиНоменклатуры.ПустаяСсылка());
	КонецЕсли;
		
КонецПроцедуры


Процедура ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	СтруктураДействийЗаполнения = Новый Структура;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакТипНоменклатуры", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакАртикул", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакХарактеристикиИспользуются", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВедетсяУчетПоГТД", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакЭтоУслуга", СтруктураПараметровДействия);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакВариантОформленияПродажи", СтруктураПараметровДействия);
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия)
		И ЗначениеЗаполнено(СтруктураПараметровДействия) Тогда
		
		СтруктураДействийЗаполнения.Вставить("ЗаполнитьПризнакПодакцизныйТовар", СтруктураПараметровДействия);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВСтрокеТЧ()


Процедура ЗаполнитьРеквизитыПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 

	Перем СтруктураПараметровДействия;

	Если СтруктураДействий.Свойство("ЗаполнитьРеквизитыПоНоменклатуре", СтруктураПараметровДействия) Тогда
		Реквизиты = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура);
		ТекущаяСтрока.ВестиУчетПоГТД = Реквизиты.ВестиУчетПоГТД;
		ТекущаяСтрока.ЭтоУслуга = Реквизиты.ЭтоУслуга;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьАктивностьСтроки (ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) 
	
	Если СтруктураДействий.Свойство("УстановитьАктивность") Тогда
		ТекущаяСтрока.Активность = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЗаполнитьСкладВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем СтруктураПараметровДействия;
	
	Если СтруктураДействий.Свойство("ПроверитьЗаполнитьСклад", СтруктураПараметровДействия) Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура) Или
			((ТекущаяСтрока.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.Товар
			И ТекущаяСтрока.ТипНоменклатуры <> Перечисления.ТипыНоменклатуры.МногооборотнаяТара)
			И ЗначениеЗаполнено(ТекущаяСтрока.Склад)) Тогда
				
			ТекущаяСтрока.Склад = Справочники.Склады.ПустаяСсылка();
			
		ИначеЕсли Не СтруктураПараметровДействия.СкладГруппа
			И (ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
			Или ТекущаяСтрока.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара) Тогда
			
			ТекущаяСтрока.Склад = СтруктураПараметровДействия.Склад;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДубликатыЗависимыхРеквизитов(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	Если Не СтруктураДействий.Свойство("ЗаполнитьДубликатыЗависимыхРеквизитов", ПараметрСтруктурыДействий) Тогда
		Возврат;
	КонецЕсли;
	
	// ПараметрСтруктурыДействий - Структура
	// 		Ключ: Имя реквизита флага активности
	// 		Значение: Строка с перечислением через запятую имен зависимых реквизитов.
	
	Для Каждого ПолеСтруктуры Из ПараметрСтруктурыДействий Цикл
		
		ИмяФлагаАктивности = ПолеСтруктуры.Ключ;
		ЗначениеФлагаАктивности = ТекущаяСтрока[ИмяФлагаАктивности];
		
		ЗависимыеРеквизиты = Новый Структура(ПолеСтруктуры.Значение);
		Для Каждого Реквизит Из ЗависимыеРеквизиты Цикл
			ТекущаяСтрока[Реквизит.Ключ+ИмяФлагаАктивности] = ?(
				ЗначениеФлагаАктивности,
				ТекущаяСтрока[Реквизит.Ключ],
				0);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУчетноеКоличествоНоменклатуры(ТекущаяСтрока, СтруктураДействий)
	
	Перем ПараметрСтруктурыДействий;
	
	Если СтруктураДействий.Свойство("ЗаполнитьУчетноеКоличествоНоменклатуры", ПараметрСтруктурыДействий) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Аналитика.КлючАналитики КАК КлючАналитики
		|
		|ПОМЕСТИТЬ ВтАналитика
		|ИЗ
		|	РегистрСведений.АналитикаУчетаНоменклатуры КАК Аналитика
		|ГДЕ
		|	Аналитика.Склад = &Склад
		|	И Аналитика.Номенклатура = &Номенклатура
		|	И Аналитика.Характеристика = &Характеристика
		|;
		|////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
		|	ТоварыОрганизаций.КоличествоОстаток КАК КоличествоУчет
		|
		|ПОМЕСТИТЬ ВременнаяТаблица
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций.Остатки(&МоментВремени,
		|		Организация = &Организация
		|		И АналитикаУчетаНоменклатуры В (
		|			ВЫБРАТЬ
		|				Аналитика.КлючАналитики
		|			ИЗ
		|				ВтАналитика КАК Аналитика
		|		)
		|	) КАК ТоварыОрганизаций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
		|	-ТоварыОрганизаций.Количество
		|ИЗ
		|	РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		ВтАналитика КАК Аналитика
		|	ПО
		|		ТоварыОрганизаций.АналитикаУчетаНоменклатуры = Аналитика.КлючАналитики
		|ГДЕ
		|	ТоварыОрганизаций.Регистратор = &Регистратор
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВременнаяТаблица.АналитикаУчетаНоменклатуры,
		|	СУММА(ЕСТЬNULL(ВременнаяТаблица.КоличествоУчет, 0)) КАК КоличествоУчет
		|ИЗ
		|	ВременнаяТаблица КАК ВременнаяТаблица
		|
		|СГРУППИРОВАТЬ ПО
		|	ВременнаяТаблица.АналитикаУчетаНоменклатуры
		|");
		
		Запрос.УстановитьПараметр("Регистратор",    ПараметрСтруктурыДействий.Регистратор);
		Запрос.УстановитьПараметр("Склад",          ПараметрСтруктурыДействий.Склад);
		Запрос.УстановитьПараметр("Организация",    ПараметрСтруктурыДействий.Организация);
		Запрос.УстановитьПараметр("МоментВремени",  ПараметрСтруктурыДействий.МоментВремени);
		Запрос.УстановитьПараметр("Номенклатура",   ТекущаяСтрока.Номенклатура);
		Запрос.УстановитьПараметр("Характеристика", ТекущаяСтрока.Характеристика);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ЗначениеЗаполнено(ТекущаяСтрока.Упаковка) Тогда
				Коэффициент = ТекущаяСтрока.Упаковка.Коэффициент;
			Иначе
				Коэффициент = 1;
			КонецЕсли;
			ТекущаяСтрока.КоличествоУпаковокУчет = Выборка.КоличествоУчет / Коэффициент;
			ТекущаяСтрока.КоличествоУпаковокФакт = Выборка.КоличествоУчет / Коэффициент;
		Иначе
			ТекущаяСтрока.КоличествоУпаковокУчет = 0;
			ТекущаяСтрока.КоличествоУпаковокФакт = 0;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПризнакДляЗаполненияТекстовогоОписания(ТекущаяСтрока, СтруктураДействий) Экспорт
	
	Если СтруктураДействий.Свойство("УстановитьПризнакДляЗаполненияТекстовогоОписания") Тогда
		
		ТекущаяСтрока.ДляЗаполненияТекстовогоОписания = НЕ ЗначениеЗаполнено(ТекущаяСтрока.Номенклатура);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедуры

Функция ПолучитьКоэффициентУпаковки(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекКоэффициент = КэшированныеЗначения.КоэффициентыУпаковок[ТекУпаковка];
		Если ТекКоэффициент = Неопределено Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекУпаковка,"Коэффициент");
			ТекКоэффициент = ЗначенияРеквизитов.Коэффициент;
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Коэффициент);
		КонецЕсли;
	Иначе
		ТекКоэффициент = 1;
	КонецЕсли;

	Возврат ТекКоэффициент;

КонецФункции

Функция ПолучитьВесУпаковки(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекВес = КэшированныеЗначения.ВесУпаковок[ТекУпаковка];
		Если ТекВес = Неопределено Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекУпаковка,"Коэффициент,Объем,Вес");
			ТекВес =  ЗначенияРеквизитов.Вес;
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Коэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Объем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Вес);
		КонецЕсли;
	Иначе
		ТекВес = 0;
	КонецЕсли;

	Возврат ТекВес;

КонецФункции

Функция ПолучитьОбъемУпаковки(ТекУпаковка, КэшированныеЗначения)

	Если ЗначениеЗаполнено(ТекУпаковка) Тогда
		ТекОбъем = КэшированныеЗначения.ОбъемУпаковок[ТекУпаковка];
		Если ТекОбъем = Неопределено Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекУпаковка,"Коэффициент,Объем,Вес");
			ТекОбъем = ЗначенияРеквизитов.Объем; 
			КэшированныеЗначения.КоэффициентыУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Коэффициент);
			КэшированныеЗначения.ОбъемУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Объем);
			КэшированныеЗначения.ВесУпаковок.Вставить(ТекУпаковка, ЗначенияРеквизитов.Вес);
		КонецЕсли;
	Иначе
		ТекОбъем = 0;
	КонецЕсли;

	Возврат ТекОбъем;

КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииЗаполненияСлужебныхРеквизитовПоНоменклатуре

// Возвращает шаблон поля выборки соответствуюий для указанного ключа действия.
//
// Параметры:
// 		КлючДействия - Строка - Строка имени ключа действия.
//
// Возвращаемое значение:
// 		Строка - Строка шаблоно поля запроса.
//
Функция ПолучитьШаблонПоляВыборкиПоКлючуДействия(КлючДействия)
	
	Если КлючДействия = "ЗаполнитьПризнакТипНоменклатуры" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакАртикул" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.Артикул КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВариантОформленияПродажи" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВариантОформленияПродажи КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакХарактеристикиИспользуются" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры)
		|		ИЛИ втТаблицаНоменклатуры.%Ключ%.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры)
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакВедетсяУчетПоГТД" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВестиУчетПоГТД КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакЭтоУслуга" Тогда
		Возврат ",
		|	ВЫБОР КОГДА втТаблицаНоменклатуры.%Ключ%.ТипНоменклатуры НЕ В
		|		(ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Товар),ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара))
		|		ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакПодакцизныйТовар" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ПодакцизныйТовар КАК %Значение%";
	КонецЕсли;
	
	Если КлючДействия = "ЗаполнитьПризнакСерииИспользуются" Тогда
		Возврат ",
		|	втТаблицаНоменклатуры.%Ключ%.ВидНоменклатуры.ИспользоватьСерии КАК %Значение%";
	КонецЕсли;
	
	Если ТипЗнч(КлючДействия) = Тип("Строка") Тогда
		ТекстЗапроса =
			",
			|	втТаблицаНоменклатуры.%Ключ%.%ИмяПоля% КАК %Значение%";
		Возврат СтрЗаменить(ТекстЗапроса, "%ИмяПоля%", КлючДействия);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает текст запроса выборки по служебным реквизитам номенклатуры
//
// Парметры:
// 		СтруктураРеквизитов - Структура - Структура с именами служебыных реквизитов в качестве полей
// 		СтруктураДопДанных - Структура - Структура с дополнительными данными.
//
// Возвращаемое значение:
// 		Строка - Строка с текстом запроса.
//
Функция ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ(СтруктураДействий, СтруктураДопДанных) Экспорт
	
	ШаблонЗапроса = "";
	
	// Формирование шаблона запроса временной таблицы по номенклатуре
	ШаблонЗапроса = "
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Таблица.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки%ТекстВЫБРАТЬ%
	|ПОМЕСТИТЬ втТаблицаНоменклатуры
	|ИЗ
	|	&КоллекцияДанных КАК Таблица;";
	
	ШаблонВЫБРАТЬ = ",
	|	ВЫРАЗИТЬ(Таблица.%ИмяПоля% КАК Справочник.Номенклатура) КАК %ИмяПоля%";
	
	ТекстВЫБРАТЬ = "";
	Для Каждого Поле Из СтруктураДопДанных.СтруктураИсточников Цикл
		ТекстВЫБРАТЬ = ТекстВЫБРАТЬ + СтрЗаменить(ШаблонВЫБРАТЬ, "%ИмяПоля%", Поле.Ключ);
	КонецЦикла;
	ШаблонЗапроса = СтрЗаменить(ШаблонЗапроса, "%ТекстВЫБРАТЬ%", ТекстВЫБРАТЬ);
	
	// Шаблон запроса основной выборки
	ШаблонЗапроса = ШаблонЗапроса + "
	|///////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНоменклатуры.НомерСтроки КАК НомерСтроки%ТекстВЫБРАТЬ%
	|ИЗ
	|	втТаблицаНоменклатуры КАК втТаблицаНоменклатуры
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	// Формирование полей запроса основной выборки
	ТекстВЫБРАТЬ = "";
	Для Каждого Действие Из СтруктураДействий Цикл
		ШаблонВЫБРАТЬ = ПолучитьШаблонПоляВыборкиПоКлючуДействия(Действие.Ключ);
		Если ШаблонВЫБРАТЬ <> Неопределено Тогда
			Для Каждого Поле Из Действие.Значение Цикл
				ТекстВыбрать = ТекстВЫБРАТЬ + СтрЗаменить(СтрЗаменить(ШаблонВЫБРАТЬ, "%Значение%", Поле.Значение), "%Ключ%", Поле.Ключ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрЗаменить(ШаблонЗапроса, "%ТекстВЫБРАТЬ%", ТекстВЫБРАТЬ);
	
КонецФункции // ПолучитьТекстЗапросаПоСлужебнымРеквизитамТЧ

// Возвращает структуру дополнительной информации получения служебных реквизитов.
//
// Параметры:
// 		СтруктураДействий - Структура - Структура с действиями по получения служебных реквизитов.
//
// Возвращаемое значение:
// 		Структура - структура.
//
Функция ПолучитьСтруктуруДополнительнойИнформации(СтруктураДействий) Экспорт
	
	СтруктураИсточников = Новый Структура;
	СтрокаРеквизитовЗаполнения = "";
	СтрокаРеквизитовВыгрузки = "";
	
	Для Каждого Действие Из СтруктураДействий Цикл
		Для Каждого Поле Из Действие.Значение Цикл
			Если Не СтруктураИсточников.Свойство(Поле.Ключ) Тогда
				СтруктураИсточников.Вставить(Поле.Ключ);
				СтрокаРеквизитовВыгрузки = СтрокаРеквизитовВыгрузки + ", " + Поле.Ключ;
			КонецЕсли;
			СтрокаРеквизитовЗаполнения = СтрокаРеквизитовЗаполнения + ", " + Поле.Значение;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Новый Структура(
		"СтруктураИсточников, РеквизитыЗаполнения, РеквизитыВыгрузки",
		СтруктураИсточников,
		Сред(СтрокаРеквизитовЗаполнения, 2), // Отрезать первый символ строки, т.к. это запятая
		СтрокаРеквизитовВыгрузки);
	
КонецФункции // ПолучитьСтруктуруДополнительнойИнформации()

#КонецОбласти

#Область Прочее

Процедура ЗаполнитьФлагиНедоборНеотгружаемыеИзлишкиНедостачи(ТекущаяСтрока, СтруктураДействий)
	Если СтруктураДействий.Свойство("ЗаполнитьФлагиНедоборНеотгружаемыеИзлишкиНедостачи") Тогда
		ТребуемоеКоличество = ТекущаяСтрока.КоличествоУпаковокВДокументе - ТекущаяСтрока.КоличествоУпаковокВДокументеНеотгружаемые;
		ОтгружаемоеКоличество = ТекущаяСтрока.КоличествоУпаковок - ТекущаяСтрока.КоличествоУпаковокНеОтгружать;
		ТекущаяСтрока.ЕстьНедобор = (ОтгружаемоеКоличество < ТребуемоеКоличество);
		ТекущаяСтрока.ЕстьНеотгружаемые = ТекущаяСтрока.КоличествоУпаковокНеОтгружать > 0;
		ТекущаяСтрока.ЕстьИзлишки = ?(ТекущаяСтрока.КоличествоУпаковок > ТекущаяСтрока.КоличествоУпаковокВДокументе,1,0);
		ТекущаяСтрока.ЕстьНедостачи = ?(ТекущаяСтрока.КоличествоУпаковок < ТекущаяСтрока.КоличествоУпаковокВДокументе,1,0);
	КонецЕсли;
КонецПроцедуры

Процедура ПересчитатьЦенуЗаказаЗаУпаковкуВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем КоличествоЕдиницДоПересчета;

	Если СтруктураДействий.Свойство("ПересчитатьЦенуЗаказаЗаУпаковку", КоличествоЕдиницДоПересчета)
	   И КоличествоЕдиницДоПересчета <> 0 Тогда
		ТекущаяСтрока.ЦенаЗаказа = ТекущаяСтрока.ЦенаЗаказа
		   / КоличествоЕдиницДоПересчета
		   * ТекущаяСтрока.Количество;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтавкуНДСПоНоменклатуреВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("ЗаполнитьСтавкуНДСПоНоменклатуре") Тогда
		ТекущаяСтрока.СтавкаНДС = Справочники.Номенклатура.ЗначенияРеквизитовНоменклатуры(ТекущаяСтрока.Номенклатура).СтавкаНДС;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуБезНДСВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий)
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуБезНДС") Тогда
		
		ТекущаяСтрока.СуммаБезНДС = ТекущаяСтрока.Сумма - ТекущаяСтрока.СуммаНДС;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСуммуРеглВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем КоэффициентПересчетаИзВалютыУпрВРегл;
	
	Если СтруктураДействий.Свойство("ПересчитатьСуммуРегл", КоэффициентПересчетаИзВалютыУпрВРегл) Тогда
		ТекущаяСтрока.СуммаРегл = Окр(ТекущаяСтрока.СуммаБезНДС * КоэффициентПересчетаИзВалютыУпрВРегл, 2, 1);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьНДСРеглВСтрокеТЧ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	Перем КоэффициентПересчетаИзВалютыУпрВРегл;
	
	Если СтруктураДействий.Свойство("ПересчитатьНДСРегл", КоэффициентПересчетаИзВалютыУпрВРегл) Тогда
		ТекущаяСтрока.НДСРегл = Окр(ТекущаяСтрока.СуммаНДС * КоэффициентПересчетаИзВалютыУпрВРегл, 2, 1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
