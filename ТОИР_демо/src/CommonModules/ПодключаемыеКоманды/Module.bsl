////////////////////////////////////////////////////////////////////////////////
// Подсистема "Базовая функциональность" (сервер).
// Обслуживает подключаемые команды.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выводит подключенные команды в форме.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, в которой необходимо разместить команды.
//   ПараметрыРазмещения - Неопределено, Структура - Параметры размещения команд.
//       Используется когда в форме несколько списков
//       (в этом случае размещается несколько вызовов этой процедуры с указанием 2го параметра),
//       или когда типы источников зависят от параметров открытия формы.
//       Состав ключей см. в функции ПараметрыРазмещения().
//   Версия_2_4 - Булево - Истина, если форма настроена для использования подключаемых команд версии 2.4.0.1 и выше.
//
Процедура ПриСозданииНаСервере(Форма, ПараметрыРазмещения = Неопределено, Версия_2_4 = Ложь) Экспорт
	
	Если Версия_2_4 Тогда
	
		ИмяФормы = Форма.ИмяФормы;
		
		ИсточникиЧерезЗапятую = "";
		Если ПараметрыРазмещения = Неопределено Тогда
			ПараметрыРазмещения = ПараметрыРазмещения();
		Иначе
			Если ТипЗнч(ПараметрыРазмещения.Источники) = Тип("ОписаниеТипов") Тогда
				Типы = ПараметрыРазмещения.Источники.Типы();
				Для Каждого Тип Из Типы Цикл
					ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
					Если ОбъектМетаданных <> Неопределено Тогда
						ИсточникиЧерезЗапятую = ИсточникиЧерезЗапятую + ?(ИсточникиЧерезЗапятую = "", "", ",") + ОбъектМетаданных.ПолноеИмя();
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ПараметрыРазмещения.Источники) = Тип("Массив") Тогда
				Для Каждого ОбъектМетаданных Из ПараметрыРазмещения.Источники Цикл
					Если ТипЗнч(ОбъектМетаданных) = Тип("ОбъектМетаданных") Тогда
						ИсточникиЧерезЗапятую = ИсточникиЧерезЗапятую + ?(ИсточникиЧерезЗапятую = "", "", ",") + ОбъектМетаданных.ПолноеИмя();
					ИначеЕсли ОбъектМетаданных <> Неопределено Тогда
						ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
							"ПодключаемыеКоманды.ПриСозданииНаСервере",
							"ПараметрыРазмещения.Источники[...]",
							ОбъектМетаданных,
							Новый ОписаниеТипов("ОбъектМетаданных"));
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ПараметрыРазмещения.Источники <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ПроверитьПараметр(
					"ПодключаемыеКоманды.ПриСозданииНаСервере",
					"ПараметрыРазмещения.Источники",
					ПараметрыРазмещения.Источники,
					Новый ОписаниеТипов("ОписаниеТипов, Массив"));
			КонецЕсли;
		КонецЕсли;
		
		ЭтоФормаОбъекта = Неопределено;
		Параметры = Форма.Параметры;
		ЕстьПараметрыСписка  = Параметры.Свойство("Отбор") И Параметры.Свойство("ТекущаяСтрока");
		ЕстьПараметрыОбъекта = Параметры.Свойство("Ключ")  И Параметры.Свойство("Основание");
		Если ЕстьПараметрыСписка <> ЕстьПараметрыОбъекта Тогда
			ЭтоФормаОбъекта = ЕстьПараметрыОбъекта;
		КонецЕсли;
		// Для форм внешних отчетов и обработок невозможно получить метаданные имея только имя формы,
		// поэтому определение источников команд выполняется до вызова ПовтИсп.
		Если ИсточникиЧерезЗапятую = "" И ЭтоВнешняяФорма(ИмяФормы) Тогда
			Если ЕстьПараметрыОбъекта Тогда
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипЗнч(Параметры.Ключ));
				Если ОбъектМетаданных <> Неопределено Тогда
					ИсточникиЧерезЗапятую = ОбъектМетаданных.ПолноеИмя();
				КонецЕсли;
			КонецЕсли;
			Если ИсточникиЧерезЗапятую = "" Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В формах внешних отчетов и обработок
						|при вызове процедуры ""%1""
						|требуется явно указывать параметр ""%2""'"),
					"ПодключаемыеКоманды.ПриСозданииНаСервере",
					"ПараметрыРазмещения.Источники");
			КонецЕсли;
		КонецЕсли;
		
		КэшФормы = ПодключаемыеКомандыПовтИсп.КэшФормы(ИмяФормы, ИсточникиЧерезЗапятую, ЭтоФормаОбъекта);
		ПараметрыРазмещения.Вставить("ЕстьУсловияВидимости", КэшФормы.ЕстьУсловияВидимости);
		ПараметрыРазмещения.Вставить("ЭтоФормаОбъекта", КэшФормы.ЭтоФормаОбъекта);
		
		Если КэшФормы.ФункциональныеОпции.Количество() > 0 Тогда
			Форма.УстановитьПараметрыФункциональныхОпцийФормы(КэшФормы.ФункциональныеОпции);
		КонецЕсли;
		
		Команды = КэшФормы.Команды.Скопировать();
		ВывестиКоманды_2_4(Форма, Команды, ПараметрыРазмещения);
		
	Иначе
		
		ИмяФормы = Форма.ИмяФормы;
		ИспользуемыеПодменю = Новый Массив;
		ИнтеграцияСтандартныхПодсистем.ПриОпределенииИспользуемыхПодменю(Форма, ИспользуемыеПодменю);
		Если ИспользуемыеПодменю.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИспользуемыеПодменюЧерезЗапятую = СтрСоединить(ИспользуемыеПодменю, ",");
		НастройкиРазмещения = ПодключаемыеКомандыПовтИсп.НастройкиРазмещения(ИмяФормы, ИспользуемыеПодменюЧерезЗапятую);
		
		ВывестиКоманды(Форма, ИспользуемыеПодменю, НастройкиРазмещения.Команды.Скопировать());

	КонецЕсли;
	
КонецПроцедуры

// Конструктор одноименного параметра процедуры ПриСозданииНаСервере.
//
// Возвращаемое значение:
//   Структура - Параметры размещения подключаемых команд.
//       * Источники - ОписаниеТипов, Массив из ОбъектМетаданных - Источники команд.
//           Используется для второстепенных списков,
//           а также в формах объектов, не являющихся поставщиками команд (обработки, общие формы).
//       * КоманднаяПанель - ГруппаФормы - Командная панель или группа команд, в которой выводятся подменю.
//           Используется как родитель для создания подменю в случае их отсутствия.
//           Если не указан то в первую очередь ищется группа "ПодключаемыеКоманды".
//       * ПрефиксГрупп - Строка - Добавка к именам подменю и имени командной панели.
//           Используется при необходимости префиксации групп с командами (в частности, когда в форме несколько таблиц).
//           В качестве префикса рекомендуется использовать имя таблицы формы, для которой выводятся команды.
//           Например, если ПрефиксГрупп = "СкладскиеДокументы" (имя второстепенной таблицы формы),
//           то используются подменю с именами "СкладскиеДокументыПодменюПечать", "СкладскиеДокументыПодменюОтчеты" и т.д.
//
Функция ПараметрыРазмещения() Экспорт
	Результат = Новый Структура("Источники, КоманднаяПанель, ПрефиксГрупп");
	Результат.ПрефиксГрупп = "";
	Возврат Результат;
КонецФункции

// Обработчик команды формы, требующей контекстный вызов сервера.
//
// Параметры:
//   Форма - УправляемаяФорма - Форма, из которой выполняется команда.
//   ПараметрыВызова - Структура - Параметры вызова.
//   Источник - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".
//   Результат - Структура - Результат выполнения команды.
//
Процедура ВыполнитьКоманду(Знач Форма, Знач ПараметрыВызова, Знач Источник, Результат) Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Текст",    Неопределено);
	Результат.Вставить("Подробно", Неопределено);
	
	Если ТипЗнч(ПараметрыВызова) <> Тип("Структура")
		Или ПараметрыВызова.Количество() <> 2
		Или ТипЗнч(Форма) <> Тип("УправляемаяФорма") Тогда
		Возврат;
	КонецЕсли;
	
	АдресНастроек = Форма.Команды.Найти("АдресНастроекКомандВоВременномХранилище").Действие;
	ОписаниеКоманды = ОписаниеКоманды(ПараметрыВызова.ИмяКомандыВФорме, АдресНастроек);
	
	Контекст = ПараметрыВыполненияКоманды();
	Контекст.ОписаниеКоманды = Новый Структура(ОписаниеКоманды);
	Контекст.Форма = Форма;
	Если Не Контекст.ЭтоФормаОбъекта И ЗначениеЗаполнено(ОписаниеКоманды.ИмяСписка) Тогда
		Источник = Форма.Элементы.Найти(ОписаниеКоманды.ИмяСписка);
	КонецЕсли;
	Контекст.ЭтоФормаОбъекта = ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура");
	Контекст.Источник = Источник;
	Контекст.Вставить("Результат", Результат);
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив;
	ПараметрыЭкспортнойПроцедуры.Добавить(ПараметрыВызова.ПараметрКоманды);
	ПараметрыЭкспортнойПроцедуры.Добавить(Контекст);
	
	РаботаВБезопасномРежиме.ВыполнитьМетодКонфигурации(ОписаниеКоманды.Обработчик, ПараметрыЭкспортнойПроцедуры);
КонецПроцедуры

// Задает условия видимости команды на форме в зависимости от контекста.
//
// Параметры:
//   Команда      - СтрокаТаблицыЗначений - Команда, для которой добавляется условие видимости.
//   Реквизит     - Строка                - Имя реквизита объекта.
//   Значение     - Произвольный          - Значение реквизита объекта.
//   ВидСравнения - ВидСравненияКомпоновкиДанных - Вид сравнения значений.
//       Допустимо использовать следующие виды сравнения:
//         ВидСравненияКомпоновкиДанных.Равно,
//         ВидСравненияКомпоновкиДанных.НеРавно,
//         ВидСравненияКомпоновкиДанных.Заполнено,
//         ВидСравненияКомпоновкиДанных.НеЗаполнено,
//         ВидСравненияКомпоновкиДанных.ВСписке,
//         ВидСравненияКомпоновкиДанных.НеВСписке,
//         ВидСравненияКомпоновкиДанных.Больше,
//         ВидСравненияКомпоновкиДанных.Меньше,
//         ВидСравненияКомпоновкиДанных.БольшеИлиРавно,
//         ВидСравненияКомпоновкиДанных.МеньшеИлиРавно.
//       Значение по умолчанию: ВидСравненияКомпоновкиДанных.Равно.
//
Процедура ДобавитьУсловиеВидимостиКоманды(Команда, Реквизит, Значение, Знач ВидСравнения = Неопределено) Экспорт
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	УсловиеВидимости = Новый Структура;
	УсловиеВидимости.Вставить("Реквизит", Реквизит);
	УсловиеВидимости.Вставить("ВидСравнения", ВидСравнения);
	УсловиеВидимости.Вставить("Значение", Значение);
	Команда.УсловияВидимости.Добавить(УсловиеВидимости);
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов.

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	Событие = "СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления";
	СерверныеОбработчики[Событие].Добавить("ПодключаемыеКоманды");
КонецПроцедуры

// Обработчик обновления кэшей, связанных с расширениями.
Функция ПриЗаполненииВсехПараметровРаботыРасширений() Экспорт
	Возврат ОперативноеОбновлениеОбщихДанных(Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений"));
КонецФункции

// Формирует таблицу общих настроек всех расширений, подключенных к объекту метаданных.
Функция НастройкиРасширенийПодключенныхКОбъектуМетаданных(СсылкаОбъектаМетаданных) Экспорт
	Результат = Новый ТаблицаЗначений;
	СтруктураКолонок = НастройкиПодключаемыхОтчетовИОбработок();
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Результат.Колонки.Добавить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Результат.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Менеджер");
	
	Если СсылкаОбъектаМетаданных = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	ПодключенныеОбъекты = ПодключаемыеКомандыПовтИсп.Параметры().ПодключенныеОбъекты[СсылкаОбъектаМетаданных];
	Если ПодключенныеОбъекты = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	Для Каждого ПолноеИмя Из ПодключенныеОбъекты Цикл
		Настройки = НастройкиПоставщика(ПолноеИмя);
		Если Настройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Настройки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Получает настройки интеграции объекта метаданных (отчета или обработки).
//
// Параметры:
//   ПолноеИмя - Строка - Полное имя объекта метаданных.
//
// Возвращаемое значение:
//   Структура - Настройки интеграции этого объекта.
//       См. возвращаемое значение функции НастройкиПодключаемыхОтчетовИОбработок().
//       Дополнительно содержит следующие поля:
//       * ПолноеИмя - Строка - Полное имя объекта метаданных.
//       * Менеджер - ОбработкаМенеджер, ОтчетМенеджер - Менеджер объекта метаданных.
//
Функция НастройкиПоставщика(ПолноеИмя) Экспорт
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	Если ЧастиИмени.Количество() <> 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Вид = ВРег(ЧастиИмени[0]);
	Имя = ЧастиИмени[1];
	Если Вид = "ОТЧЕТ" Тогда
		Узел = Отчеты;
	ИначеЕсли Вид = "ОБРАБОТКА" Тогда
		Узел = Обработки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Настройки = НастройкиПодключаемыхОтчетовИОбработок();
	Для Каждого КлючИЗначение Из Настройки Цикл
		Настройки.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение.ПривестиЗначение());
	КонецЦикла;
	
	Менеджер = Узел[Имя];
	Менеджер.ПриОпределенииНастроек(Настройки);
	
	Настройки.Вставить("ПолноеИмя", ПолноеИмя);
	Настройки.Вставить("Менеджер", Менеджер);
	Возврат Настройки;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий.

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - Обработчики обновления.
//       См. описание метода ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления().
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Ложь;
	Обработчик.ОбщиеДанные                  = Истина;
	Обработчик.УправлениеОбработчиками      = Ложь;
	Обработчик.РежимВыполнения              = "Оперативно";
	Обработчик.Версия    = "*";
	Обработчик.Процедура = "ПодключаемыеКоманды.ОперативноеОбновлениеОбщихДанныхКонфигурации";
	Обработчик.Приоритет = 90;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий.

// Формирует таблицу общих настроек всех расширений, подключенных к объекту метаданных.
Функция ПодключенныеОбъекты(Источник, ПодключенныеОбъекты = Неопределено, НастройкиПрограммногоИнтерфейса = Неопределено)
	Если ПодключенныеОбъекты = Неопределено Тогда
		ПодключенныеОбъекты = ТаблицаПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса);
	КонецЕсли;
	Если Источник.СсылкаМетаданных = Неопределено Тогда
		Возврат ПодключенныеОбъекты;
	КонецЕсли;
	
	ПолныеИменаПодключенныхОбъектов = ПодключаемыеКомандыПовтИсп.Параметры().ПодключенныеОбъекты[Источник.СсылкаМетаданных];
	Если ПолныеИменаПодключенныхОбъектов = Неопределено Тогда
		Возврат ПодключенныеОбъекты;
	КонецЕсли;
	
	Для Каждого ПолноеИмя Из ПолныеИменаПодключенныхОбъектов Цикл
		ПодключенныйОбъект = ПодключенныеОбъекты.Найти(ПолноеИмя, "ПолноеИмя");
		Если ПодключенныйОбъект = Неопределено Тогда
			НастройкиПодключаемогоОбъекта = НастройкиПодключаемогоОбъекта(ПолноеИмя, НастройкиПрограммногоИнтерфейса);
			Если НастройкиПодключаемогоОбъекта = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПодключенныйОбъект = ПодключенныеОбъекты.Добавить();
			ЗаполнитьЗначенияСвойств(ПодключенныйОбъект, НастройкиПодключаемогоОбъекта);
			ПодключенныйОбъект.ТипСсылкиДанных = Источник.ТипСсылкиДанных;
			ПодключенныйОбъект.Метаданные = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
		Иначе
			ПодключенныйОбъект.ТипСсылкиДанных = ОбъединитьТипы(ПодключенныйОбъект.ТипСсылкиДанных, Источник.ТипСсылкиДанных);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПодключенныеОбъекты;
КонецФункции

// Получает настройки интеграции объекта метаданных - поставщика команд (отчета или обработки).
//
// Параметры:
//   ПолноеИмя - Строка - Полное имя объекта метаданных.
//   НастройкиПрограммногоИнтерфейса - Произвольный - Необязательный. Результат выполнения функции
//       НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов().
//
// Возвращаемое значение:
//   Структура - Настройки интеграции этого объекта.
//       Состав полей см. в блоке "Параметры процедуры ПриОпределенииНастроек"
//       процедуры ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов().
//       Дополнительно содержит следующие поля:
//       * Вид - Строка - Вид имя объекта метаданных в верхнем регистре.
//       * ПолноеИмя - Строка - Полное имя объекта метаданных.
//       * Менеджер - ОбработкаМенеджер, ОтчетМенеджер - Менеджер объекта метаданных.
//
Функция НастройкиПодключаемогоОбъекта(ПолноеИмя, НастройкиПрограммногоИнтерфейса = Неопределено)
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	Если ЧастиИмени.Количество() <> 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВидВРег = ВРег(ЧастиИмени[0]);
	Имя = ЧастиИмени[1];
	Если ВидВРег = "ОТЧЕТ" Тогда
		Узел = Отчеты;
	ИначеЕсли ВидВРег = "ОБРАБОТКА" Тогда
		Узел = Обработки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкиПрограммногоИнтерфейса = Неопределено Тогда
		НастройкиПрограммногоИнтерфейса = НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов();
	КонецЕсли;
	
	Настройки = Новый Структура;
	Для Каждого Настройка Из НастройкиПрограммногоИнтерфейса Цикл
		Если Настройка.ВидыПодключаемыхОбъектов = ""
			Или СтрНайти(ВРег(Настройка.ВидыПодключаемыхОбъектов), ВидВРег) > 0 Тогда
			Настройки.Вставить(Настройка.Ключ, Настройка.ОписаниеТипов.ПривестиЗначение());
		КонецЕсли;
	КонецЦикла;
	
	Менеджер = Узел[Имя];
	Менеджер.ПриОпределенииНастроек(Настройки);
	
	Настройки.Вставить("Вид",       ВидВРег);
	Настройки.Вставить("ПолноеИмя", ПолноеИмя);
	Настройки.Вставить("Менеджер",  Менеджер);
	Возврат Настройки;
КонецФункции

// Добавляет типы в массив.
//
// Параметры:
//   Массив - Массив - Массив типов.
//   ТипИлиОписаниеТипов - Тип, ОписаниеТипов - Добавляемые типы.
//
Процедура ДополнитьМассивТипов(Массив, ТипИлиОписаниеТипов)
	Если ТипЗнч(ТипИлиОписаниеТипов) = Тип("ОписаниеТипов") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Массив, ТипИлиОписаниеТипов.Типы(), Истина);
	ИначеЕсли ТипЗнч(ТипИлиОписаниеТипов) = Тип("Тип") И Массив.Найти(ТипИлиОписаниеТипов) = Неопределено Тогда
		Массив.Добавить(ТипИлиОписаниеТипов);
	КонецЕсли;
КонецПроцедуры

// Регистрирует в дереве источников команд объект метаданных, а также вспомогательные объекты метаданных,
//   подключенных к указанному объекту метаданных.
//
// Параметры:
//   ОбъектМетаданных - ОбъектМетаданных - Объект метаданных, к которому подключены источники команд.
//   Источники - ДеревоЗначений - См. описание одноименного параметра
//       процедуры ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту().
//   ПодключенныеОбъекты - ТаблицаЗначений - См. описание возвращаемого значения
//       функции ПодключаемыеКоманды.ТаблицаПодключаемыхОбъектов().
//   НастройкиПрограммногоИнтерфейса - Структура - Необязательный. См. описание возвращаемого значения
//       функции ПодключаемыеКоманды.НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов().
//
// Возвращаемое значение:
//   СтрокаДереваЗначений - Настройки объекта метаданных. См. описание 2 параметра
//       процедуры ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту().
//
Функция ЗарегистрироватьИсточник(ОбъектМетаданных, Источники, ПодключенныеОбъекты, НастройкиПрограммногоИнтерфейса)
	Если ОбъектМетаданных = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	Менеджер  = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмя);
	Если Менеджер = Неопределено Тогда
		Возврат Неопределено; // Объект не может быть источником команд.
	КонецЕсли;
	
	Источник = Источники.Строки.Добавить();
	Источник.Метаданные          = ОбъектМетаданных;
	Источник.ПолноеИмя           = ПолноеИмя;
	Источник.Менеджер            = Менеджер;
	Источник.СсылкаМетаданных    = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмя);
	Источник.Вид                 = ВРег(СтрЛев(ПолноеИмя, "."));
	Источник.ЭтоЖурналДокументов = (Источник.Вид = "ЖУРНАЛДОКУМЕНТОВ");
	
	Если Источник.ЭтоЖурналДокументов Тогда
		МассивТипов = Новый Массив;
		Для Каждого МетаданныеДокумента Из ОбъектМетаданных.РегистрируемыеДокументы Цикл
			Документ = ЗарегистрироватьИсточник(МетаданныеДокумента, Источник, ПодключенныеОбъекты, НастройкиПрограммногоИнтерфейса);
			Если Документ <> Неопределено Тогда
				МассивТипов.Добавить(Документ.ТипСсылкиДанных);
			КонецЕсли;
		КонецЦикла;
		Источник.ТипСсылкиДанных = Новый ОписаниеТипов(МассивТипов);
	Иначе
		Источник.ТипСсылкиДанных = Тип(Источник.Вид + "Ссылка." + ОбъектМетаданных.Имя);
	КонецЕсли;
	
	ПодключенныеОбъекты(Источник, ПодключенныеОбъекты, НастройкиПрограммногоИнтерфейса);
	
	Возврат Источник;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Кэш формы ПриСозданииНаСервере.

// Кэш формы, в которой будут выводиться подключаемые команды.
Функция КэшФормы(ИмяФормы, ИсточникиЧерезЗапятую, ЭтоФормаОбъекта) Экспорт
	Команды = ТаблицаКоманд();
	Источники = ДеревоИсточниковКоманд();
	НастройкиПрограммногоИнтерфейса = НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов();
	ПодключенныеОбъекты = ТаблицаПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса);
	
	КэшФормы = Новый Структура;
	КэшФормы.Вставить("Команды", Команды);
	КэшФормы.Вставить("ЕстьУсловияВидимости", Ложь);
	КэшФормы.Вставить("ФункциональныеОпции", Новый Структура);
	
	МетаданныеФормы = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	МетаданныеРодителя = ?(МетаданныеФормы = Неопределено, Неопределено, МетаданныеФормы.Родитель());
	ВидВРег = ВРег(СтрЛев(ИмяФормы, "."));
	ТипыИсточников = Новый Массив;
	Если ИсточникиЧерезЗапятую = "" Тогда
		Источник = ЗарегистрироватьИсточник(МетаданныеРодителя, Источники, ПодключенныеОбъекты, НастройкиПрограммногоИнтерфейса);
		ДополнитьМассивТипов(ТипыИсточников, Источник.ТипСсылкиДанных);
	Иначе
		ПолныеИменаИсточников = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсточникиЧерезЗапятую, ",", Истина, Истина);
		Для Каждого ПолноеИмя Из ПолныеИменаИсточников Цикл
			ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ПолноеИмя);
			Источник = ЗарегистрироватьИсточник(ОбъектМетаданных, Источники, ПодключенныеОбъекты, НастройкиПрограммногоИнтерфейса);
			ДополнитьМассивТипов(ТипыИсточников, Источник.ТипСсылкиДанных);
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтоФормаОбъекта = Неопределено Тогда
		Если ТипыИсточников.Количество() > 1 Тогда
			ЭтоФормаОбъекта = Ложь;
		ИначеЕсли МетаданныеРодителя <> Неопределено Тогда
			Коллекция = Новый Структура("ОсновнаяФормаСписка, ОсновнаяФормаОбъекта");
			ЗаполнитьЗначенияСвойств(Коллекция, МетаданныеРодителя);
			Если МетаданныеФормы = Коллекция.ОсновнаяФормаСписка Тогда
				ЭтоФормаОбъекта = Ложь;
			ИначеЕсли МетаданныеФормы = Коллекция.ОсновнаяФормаОбъекта Тогда
				ЭтоФормаОбъекта = Истина;
			Иначе
				Если ВидВРег = ВРег("ЖурналДокументов") Тогда
					ЭтоФормаОбъекта = Ложь;
				ИначеЕсли ВидВРег = ВРег("Обработка") Тогда
					ЭтоФормаОбъекта = Ложь;
				Иначе
					ЭтоФормаОбъекта = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭтоФормаОбъекта = Ложь;
		КонецЕсли;
	КонецЕсли;
	КэшФормы.Вставить("ЭтоФормаОбъекта", ЭтоФормаОбъекта);
	
	Контекст = Новый Структура;
	Контекст.Вставить("ВидВРег", ВидВРег);
	Контекст.Вставить("ИмяФормы", ИмяФормы);
	Контекст.Вставить("МетаданныеФормы", МетаданныеФормы);
	Контекст.Вставить("ТипыИсточников", ТипыИсточников);
	Контекст.Вставить("ЭтоФормаОбъекта", ЭтоФормаОбъекта);
	Контекст.Вставить("ФункциональныеОпции", КэшФормы.ФункциональныеОпции);
	
	ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту(Контекст, Источники, ПодключенныеОбъекты, Команды);
	
	// Фильтр команд по именам форм и функциональным опциям.
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.ВГраница()];
	Количество = Команды.Количество();
	Для Номер = 1 По Количество Цикл
		Команда = Команды[Количество - Номер];
		// Значения по умолчанию.
		Если Команда.ИзменяетВыбранныеОбъекты = Неопределено Тогда
			Команда.ИзменяетВыбранныеОбъекты = Ложь;
		КонецЕсли;
		// Фильтр по именам форм.
		ВидимостьВФормах = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(Команда.ВидимостьВФормах), ",", Истина, Истина);
		Если ВидимостьВФормах.Количество() > 0
			И ВидимостьВФормах.Найти(ВРег(КраткоеИмяФормы)) = Неопределено
			И ВидимостьВФормах.Найти(ВРег(ИмяФормы)) = Неопределено Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		// Фильтр по функциональным опциям.
		ФункциональныеОпции = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Команда.ФункциональныеОпции, ",", Истина, Истина);
		ВидимостьКоманды = ФункциональныеОпции.Количество() = 0;
		Для Каждого ИмяОпции Из ФункциональныеОпции Цикл
			Если ПолучитьФункциональнуюОпцию(СокрЛП(ИмяОпции)) Тогда
				ВидимостьКоманды = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ВидимостьКоманды Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		// Динамические применяемые условия видимости.
		Если ТипЗнч(Команда.ТипПараметра) = Тип("Тип") Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Команда.ТипПараметра);
			Команда.ТипПараметра = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		Если ТипЗнч(Команда.ТипПараметра) = Тип("ОписаниеТипов") И ЗначениеЗаполнено(Команда.ТипПараметра) Тогда
			СодержитХотьОдинТип = Ложь;
			Для Каждого Тип Из ТипыИсточников Цикл
				Если Команда.ТипПараметра.СодержитТип(Тип) Тогда
					СодержитХотьОдинТип = Истина;
				Иначе
					Команда.ЕстьУсловияВидимости = Истина;
				КонецЕсли;
			КонецЦикла;
			Если Не СодержитХотьОдинТип Тогда
				Команды.Удалить(Команда);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(Команда.УсловияВидимости) = Тип("Массив") И Команда.УсловияВидимости.Количество() > 0 Тогда
			Команда.ЕстьУсловияВидимости = Истина;
		КонецЕсли;
		Если Команда.МножественныйВыбор = Неопределено Тогда
			Команда.МножественныйВыбор = Истина;
		КонецЕсли;
		Команда.ПорядокВажности = ?(Команда.Важность = "Важное", 1, ?(Команда.Важность = "СмТакже", 3, 2));
		КэшФормы.ЕстьУсловияВидимости = КэшФормы.ЕстьУсловияВидимости Или Команда.ЕстьУсловияВидимости;
		
		Если ПустаяСтрока(Команда.Идентификатор) Тогда
			Команда.Идентификатор = "Авто_" + КонтрольнаяСуммаСтрокой(Команда.Менеджер + "/" + Команда.ИмяФормы + "/" + Команда.Обработчик);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КэшФормы;
КонецФункции

Функция ВидыКоманд()
	Виды = Новый ТаблицаЗначений;
	Виды.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	Виды.Колонки.Добавить("ИмяПодменю", Новый ОписаниеТипов("Строка"));
	Виды.Колонки.Добавить("Заголовок", Новый ОписаниеТипов("Строка"));
	Виды.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Виды.Колонки.Добавить("Картинка"); // Картинка, Неопределено.
	Виды.Колонки.Добавить("Отображение"); // ОтображениеКнопки, Неопределено.
	
	// Вид с пустой группой для команд, которые следует размещать в командной панели.
	Вид = Виды.Добавить();
	Вид.Имя        = "КоманднаяПанель";
	Вид.ИмяПодменю = "";
	Вид.Порядок    = 90;
		
	ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд(Виды);
	
	Виды.Сортировать("Порядок Возр");
	
	Возврат Виды;
КонецФункции

Процедура ПроверитьИмяВидаКоманд(ИмяВида)
	Структура = Новый Структура;
	Попытка
		Структура.Вставить(ИмяВида, Неопределено);
	Исключение
		ТекстОшибки = НСтр("ru = 'Имя вида команд ""%1"" не удовлетворяет требованиям именования переменных.'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстОшибки, ИмяВида);
	КонецПопытки;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вывод.

// Размещает подключенные команды в форме.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой необходимо разместить команды.
//
Процедура ВывестиКоманды(Форма, ИспользуемыеПодменю, Команды)
	Команды.Сортировать("Группа, Порядок Возр, Представление Возр");
	
	ИмяГруппы = Неопределено;
	ГруппаФормы = Неопределено;
	КомандаФормы = Неопределено;
	СчетчикКомандСАвтогенерируемымИменем = 0;
	ИнформацияОВсехПодменю = Новый Соответствие;
	
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		// При смене группы сбрасываются счетчики.
		Если ИмяГруппы <> Команда.Группа Тогда
			ИмяГруппы = Команда.Группа;
			ГруппаФормы = Форма.Элементы.Найти(ИмяГруппы);
			СчетчикКомандСАвтогенерируемымИменем = 0;
			ИнформацияОПодменю = СформироватьИнформациюОПодменю(ИнформацияОВсехПодменю, ГруппаФормы);
		КонецЕсли;
		// Группы нет - команда не выводится.
		Если ГруппаФормы = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
			Продолжить;
		КонецЕсли;
		
		// Уникальное имя добавляемого элемента.
		Команда.ИмяВФорме = ОпределитьИмяКоманды(Форма, ИмяГруппы, Команда.Идентификатор, СчетчикКомандСАвтогенерируемымИменем);
		
		КомандаФормы = Форма.Команды.Добавить(Команда.ИмяВФорме);
		КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
		КомандаФормы.Заголовок = Команда.Представление;
		КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Если ТипЗнч(Команда.Картинка) = Тип("Картинка") Тогда
			КомандаФормы.Картинка = Команда.Картинка;
		КонецЕсли;
		Если ТипЗнч(Команда.СочетаниеКлавиш) = Тип("СочетаниеКлавиш") Тогда
			КомандаФормы.СочетаниеКлавиш = Команда.СочетаниеКлавиш;
		КонецЕсли;
		
		КнопкаФормы = Форма.Элементы.Добавить(Команда.ИмяВФорме, Тип("КнопкаФормы"), ГруппаФормы);
		КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		КнопкаФормы.ИмяКоманды = Команда.ИмяВФорме;
		
		ИнформацияОПодменю.КоличествоКоманд = ИнформацияОПодменю.КоличествоКоманд + 1;
		ИнформацияОПодменю.ИмяПоследнейКнопки = Команда.ИмяВФорме;
	КонецЦикла;
	
	// Формирование информации о подменю с 0 динамических команд и 1 фиксированной командой.
	Для Каждого ИмяГруппы Из ИспользуемыеПодменю Цикл
		СформироватьИнформациюОПодменю(ИнформацияОВсехПодменю, Форма.Элементы.Найти(ИмяГруппы));
	КонецЦикла;
	
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
	
	// Смена вида групп, в которых всего 1 команда.
	Для Каждого КлючИЗначение Из ИнформацияОВсехПодменю Цикл
		ИнформацияОПодменю = КлючИЗначение.Значение;
		Если ИнформацияОПодменю.КоличествоКоманд <> 1 Тогда
			Продолжить;
		КонецЕсли;
		Подменю = Форма.Элементы.Найти(КлючИЗначение.Ключ);
		Если ТипЗнч(Подменю) <> Тип("ГруппаФормы") Или Подменю.Вид <> ВидГруппыФормы.Подменю Тогда
			Продолжить;
		КонецЕсли;
		КомандаФормы = Форма.Элементы.Найти(ИнформацияОПодменю.ИмяПоследнейКнопки);
		Если ТипЗнч(КомандаФормы) <> Тип("КнопкаФормы") Тогда
			Продолжить;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(КомандаФормы.Картинка) Тогда
			КомандаФормы.Картинка = Подменю.Картинка;
		КонецЕсли;
		Подменю.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЦикла;
	
	КомандаФормы = Форма.Команды.Найти("АдресНастроекКомандВоВременномХранилище");
	Если КомандаФормы = Неопределено Тогда
		КомандаФормы = Форма.Команды.Добавить("АдресНастроекКомандВоВременномХранилище");
		КомандаФормы.Действие = ПоместитьВоВременноеХранилище(Команды, Форма.УникальныйИдентификатор);
	Иначе
		ПоместитьВоВременноеХранилище(Команды, КомандаФормы.Действие);
	КонецЕсли;
КонецПроцедуры

// Размещает подключенные команды в форме.
//
// Параметры:
//   Форма - УправляемаяФорма - форма, в которой необходимо разместить команды.
//
Процедура ВывестиКоманды_2_4(Форма, Команды, ПараметрыРазмещения)
	Элементы = Форма.Элементы;
	ПрефиксГрупп = ?(ЗначениеЗаполнено(ПараметрыРазмещения.ПрефиксГрупп), ПараметрыРазмещения.ПрефиксГрупп, "");
	КоманднаяПанель = ПараметрыРазмещения.КоманднаяПанель;
	Если КоманднаяПанель = Неопределено Тогда
		КоманднаяПанель = Элементы.Найти(ПрефиксГрупп + "ПодключаемыеКоманды");
		Если КоманднаяПанель = Неопределено Тогда
			КоманднаяПанель = Элементы.Найти(ПрефиксГрупп + "КоманднаяПанель");
			Если КоманднаяПанель = Неопределено Тогда
				КоманднаяПанель = Элементы.Найти(ПрефиксГрупп + "ОсновнаяКоманднаяПанель");
				Если КоманднаяПанель = Неопределено И ЗначениеЗаполнено(ПрефиксГрупп) Тогда
					ТаблицаФормы = Элементы.Найти(ПрефиксГрупп);
					Если ТипЗнч(ТаблицаФормы) = Тип("ТаблицаФормы") Тогда
						КоманднаяПанель = ТаблицаФормы.КоманднаяПанель;
					КонецЕсли;
				КонецЕсли;
				Если Не ПараметрыРазмещения.ЭтоФормаОбъекта
					И КоманднаяПанель = Неопределено
					И Не ЗначениеЗаполнено(ПрефиксГрупп) Тогда
					ТаблицаФормы = Элементы.Найти("Список");
					Если ТипЗнч(ТаблицаФормы) = Тип("ТаблицаФормы")
						И ТаблицаФормы.ПоложениеКоманднойПанели <> ПоложениеКоманднойПанелиЭлементаФормы.Нет Тогда
						КоманднаяПанель = ТаблицаФормы.КоманднаяПанель;
					КонецЕсли;
				КонецЕсли;
				Если КоманднаяПанель = Неопределено Тогда
					КоманднаяПанель = Форма.КоманднаяПанель;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СведенияОВсехПодменю = Новый ТаблицаЗначений;
	СведенияОВсехПодменю.Колонки.Добавить("Подменю");
	СведенияОВсехПодменю.Колонки.Добавить("ВыведеноКоманд", Новый ОписаниеТипов("Число"));
	СведенияОВсехПодменю.Колонки.Добавить("ЕстьКомандыСУсловиямиВидимости", Новый ОписаниеТипов("Булево"));
	СведенияОВсехПодменю.Колонки.Добавить("ЕстьКомандыБезУсловийВидимости", Новый ОписаниеТипов("Булево"));
	СведенияОВсехПодменю.Колонки.Добавить("Группы", Новый ОписаниеТипов("Структура"));
	СведенияОВсехПодменю.Колонки.Добавить("ГруппаПоУмолчанию");
	СведенияОВсехПодменю.Колонки.Добавить("ПоследняяКоманда");
	СведенияОВсехПодменю.Колонки.Добавить("КомандыСУсловиямиВидимости", Новый ОписаниеТипов("Массив"));
	БыстрыйПоискСведенийОПодменю = Новый Соответствие;
	
	// Создание и начальное заполнение реквизита формы "ПараметрыПодключаемыхКоманд", если его еще нет.
	Структура = Новый Структура("ПараметрыПодключаемыхКоманд", Null);
	ЗаполнитьЗначенияСвойств(Структура, Форма);
	ПараметрыКлиента = Структура.ПараметрыПодключаемыхКоманд;
	Если ТипЗнч(ПараметрыКлиента) <> Тип("Структура") Тогда
		Если ПараметрыКлиента = Null Тогда
			ДобавляемыеРеквизиты = Новый Массив;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПараметрыПодключаемыхКоманд", Новый ОписаниеТипов));
			Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		КонецЕсли;
		ПараметрыКлиента = Новый Структура;
		ПараметрыКлиента.Вставить("ЕстьУсловияВидимости", ПараметрыРазмещения.ЕстьУсловияВидимости);
		ПараметрыКлиента.Вставить("ПодменюСУсловиямиВидимости", Новый Массив);
		ПараметрыКлиента.Вставить("КорневыеПодменюИКоманды", Новый Массив);
		ПараметрыКлиента.Вставить("ДоступностьКоманд", Истина);
		ПараметрыКлиента.Вставить("АдресТаблицыКоманд", Неопределено);
		Форма.ПараметрыПодключаемыхКоманд = ПараметрыКлиента;
	Иначе
		ПараметрыКлиента.ЕстьУсловияВидимости = ПараметрыКлиента.ЕстьУсловияВидимости Или ПараметрыРазмещения.ЕстьУсловияВидимости;
	КонецЕсли;
	КорневыеПодменюИКоманды = ПараметрыКлиента.КорневыеПодменюИКоманды;
	
	// Вывод команд.
	Команды.Сортировать("Вид, Подменю, ПорядокВажности Возр, Порядок Возр, Представление Возр");
	СчетчикКомандСАвтогенерируемымИменем = 0;
	ВидыКоманд = ВидыКоманд();
	Для Каждого ВидКоманд Из ВидыКоманд Цикл
		ПроверитьИмяВидаКоманд(ВидКоманд.Имя);
		КомандыВида = Команды.НайтиСтроки(Новый Структура("Вид", ВидКоманд.Имя));
		Количество = КомандыВида.Количество();
		Если Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяПодменюПоУмолчанию = ПрефиксГрупп + ВидКоманд.ИмяПодменю;
		СведенияОПодменюПоУмолчанию = БыстрыйПоискСведенийОПодменю.Получить(НРег(ИмяПодменюПоУмолчанию));
		Если СведенияОПодменюПоУмолчанию = Неопределено Тогда
			СведенияОПодменюПоУмолчанию = ЗарегистрироватьПодменю(Элементы, СведенияОВсехПодменю, ИмяПодменюПоУмолчанию, ВидКоманд, КоманднаяПанель);
			БыстрыйПоискСведенийОПодменю.Вставить(НРег(ИмяПодменюПоУмолчанию), СведенияОПодменюПоУмолчанию);
		КонецЕсли;
		
		Для Каждого Команда Из КомандыВида Цикл
			Если ПустаяСтрока(Команда.Подменю) Тогда
				СведенияОПодменюКоманды = СведенияОПодменюПоУмолчанию;
			Иначе
				ИмяПодменю = ПрефиксГрупп + Команда.Подменю;
				СведенияОПодменюКоманды = БыстрыйПоискСведенийОПодменю.Получить(НРег(ИмяПодменю));
				Если СведенияОПодменюКоманды = Неопределено Тогда
					СведенияОПодменюКоманды = ЗарегистрироватьПодменю(Элементы, СведенияОВсехПодменю, ИмяПодменю, , , СведенияОПодменюПоУмолчанию);
					БыстрыйПоискСведенийОПодменю.Вставить(НРег(ИмяПодменю), СведенияОПодменюКоманды);
				КонецЕсли;
			КонецЕсли;
			
			ГруппаФормы = Неопределено;
			Если Не ЗначениеЗаполнено(Команда.Важность)
				Или Не СведенияОПодменюКоманды.Группы.Свойство(Команда.Важность, ГруппаФормы) Тогда
				ГруппаФормы = СведенияОПодменюКоманды.ГруппаПоУмолчанию;
			КонецЕсли;
			
			Команда.ИмяВФорме = ОпределитьИмяКоманды(Форма, ГруппаФормы.Имя, Команда.Идентификатор, СчетчикКомандСАвтогенерируемымИменем);
			
			ИмяКорневогоЭлемента = ?(ВидКоманд.Имя = "КоманднаяПанель", Команда.ИмяВФорме, СведенияОПодменюКоманды.Подменю.Имя);
			Если КорневыеПодменюИКоманды.Найти(ИмяКорневогоЭлемента) = Неопределено Тогда
				КорневыеПодменюИКоманды.Добавить(ИмяКорневогоЭлемента);
			КонецЕсли;
			
			КомандаФормы = Форма.Команды.Добавить(Команда.ИмяВФорме);
			КомандаФормы.Действие = "Подключаемый_ВыполнитьКоманду";
			КомандаФормы.Заголовок = Команда.Представление;
			КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
			Если ТипЗнч(Команда.Картинка) = Тип("Картинка") Тогда
				КомандаФормы.Картинка = Команда.Картинка;
			КонецЕсли;
			Если ТипЗнч(Команда.СочетаниеКлавиш) = Тип("СочетаниеКлавиш") Тогда
				КомандаФормы.СочетаниеКлавиш = Команда.СочетаниеКлавиш;
			КонецЕсли;
			Если СведенияОПодменюКоманды.Подменю = КоманднаяПанель
				И СтрДлина(Команда.Представление) > 35
				И ЗначениеЗаполнено(КомандаФормы.Картинка) Тогда
				КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
				КомандаФормы.Подсказка   = КомандаФормы.Заголовок;
			КонецЕсли;
			
			КнопкаФормы = Элементы.Добавить(Команда.ИмяВФорме, Тип("КнопкаФормы"), ГруппаФормы);
			КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
			КнопкаФормы.ИмяКоманды = Команда.ИмяВФорме;
			
			Если Команда.ИзменяетВыбранныеОбъекты И Форма.ТолькоПросмотр Тогда
				КнопкаФормы.Доступность = Ложь;
			КонецЕсли;
			
			СведенияОПодменюКоманды.ВыведеноКоманд = СведенияОПодменюКоманды.ВыведеноКоманд + 1;
			СведенияОПодменюКоманды.ПоследняяКоманда = КомандаФормы;
			Если Команда.ЕстьУсловияВидимости Тогда
				СведенияОПодменюКоманды.ЕстьКомандыСУсловиямиВидимости = Истина;
				СведенияОКоманде = Новый Структура("ИмяВФорме, ТипПараметра, УсловияВидимости");
				ЗаполнитьЗначенияСвойств(СведенияОКоманде, Команда);
				СведенияОПодменюКоманды.КомандыСУсловиямиВидимости.Добавить(СведенияОКоманде);
			Иначе
				СведенияОПодменюКоманды.ЕстьКомандыБезУсловийВидимости = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Команда-заглушка нужна всегда.
	КомандаЗаглушка = Форма.Команды.Найти("КомандаДляВыводаВПустоеПодменю");
	Если КомандаЗаглушка = Неопределено Тогда
		КомандаЗаглушка = Форма.Команды.Добавить("КомандаДляВыводаВПустоеПодменю");
		КомандаЗаглушка.Заголовок = НСтр("ru = '(нет)'");
	КонецЕсли;
	
	// Постобработка задействованных подменю.
	Для Каждого СведенияОПодменю Из СведенияОВсехПодменю Цикл
		Если СведенияОПодменю.ВыведеноКоманд = 0 Тогда
			Продолжить;
		КонецЕсли;
		ЭтоКоманднаяПанель = (СведенияОПодменю.Подменю = КоманднаяПанель);
		КомандаФормы = СведенияОПодменю.ПоследняяКоманда;
		Подменю = СведенияОПодменю.Подменю;
		
		Если Не ЭтоКоманднаяПанель Тогда
			Если СведенияОПодменю.ВыведеноКоманд = 1 Тогда
				// Превращение подменю в кнопку когда выведена 1 команда с коротким заголовком.
				Если Не ЗначениеЗаполнено(КомандаФормы.Картинка) И Подменю.Вид = ВидГруппыФормы.Подменю Тогда
					КомандаФормы.Картинка = Подменю.Картинка;
				КонецЕсли;
				Если СтрДлина(КомандаФормы.Заголовок) <= 35 Тогда
					КомандаФормы.Отображение = ОтображениеКнопки.КартинкаИТекст;
				Иначе
					КомандаФормы.Отображение = ОтображениеКнопки.Картинка;
					КомандаФормы.Подсказка   = КомандаФормы.Заголовок;
				КонецЕсли;
				Подменю.Вид = ВидГруппыФормы.ГруппаКнопок;
			Иначе
				// Добавление кнопок-заглушек, которые показываются когда в подменю скрыты все команды.
				ИмяКомандыЗаглушки = Подменю.Имя + "Заглушка";
				Если Элементы.Найти(ИмяКомандыЗаглушки) = Неопределено Тогда
					КнопкаФормы = Элементы.Добавить(ИмяКомандыЗаглушки, Тип("КнопкаФормы"), Подменю);
					КнопкаФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
					КнопкаФормы.ИмяКоманды  = "КомандаДляВыводаВПустоеПодменю";
					КнопкаФормы.Видимость   = Ложь;
					КнопкаФормы.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СведенияОПодменю.ЕстьКомандыСУсловиямиВидимости Тогда
			КраткиеСведенияОПодменю = Новый Структура("Имя, КомандыСУсловиямиВидимости, ЕстьКомандыБезУсловийВидимости");
			ЗаполнитьЗначенияСвойств(КраткиеСведенияОПодменю, СведенияОПодменю);
			КраткиеСведенияОПодменю.Имя = СведенияОПодменю.Подменю.Имя;
			ПараметрыКлиента.ПодменюСУсловиямиВидимости.Добавить(КраткиеСведенияОПодменю);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыКлиента.АдресТаблицыКоманд <> Неопределено И ЭтоАдресВременногоХранилища(ПараметрыКлиента.АдресТаблицыКоманд) Тогда
		РанееДобавленныеКоманды = ПолучитьИзВременногоХранилища(ПараметрыКлиента.АдресТаблицыКоманд);
		Если ТипЗнч(РанееДобавленныеКоманды) = Тип("ТаблицаЗначений") Тогда
			Индекс = -1;
			Для Каждого СтрокаТаблицы Из РанееДобавленныеКоманды Цикл
				Индекс = Индекс + 1;
				ЗаполнитьЗначенияСвойств(Команды.Вставить(Индекс), СтрокаТаблицы);
			КонецЦикла;
		КонецЕсли;
		УдалитьИзВременногоХранилища(ПараметрыКлиента.АдресТаблицыКоманд);
	КонецЕсли;
	ПараметрыКлиента.АдресТаблицыКоманд = ПоместитьВоВременноеХранилище(Команды, Форма.УникальныйИдентификатор);
	
КонецПроцедуры

Функция ЗарегистрироватьПодменю(Элементы, СведенияОВсехПодменю, ИмяПодменю, ШаблонНового = Неопределено, КоманднаяПанель = Неопределено, ПодменюПоУмолчанию = Неопределено)
	
	Группы = Новый Структура;
	Если ЗначениеЗаполнено(ИмяПодменю) Тогда
		Подменю = Элементы.Найти(ИмяПодменю);
		Если Подменю = Неопределено Тогда
			Если ШаблонНового = Неопределено Тогда
				Возврат ПодменюПоУмолчанию;
			КонецЕсли;
			Подменю = Элементы.Добавить(ИмяПодменю, Тип("ГруппаФормы"), КоманднаяПанель);
			Подменю.Вид         = ВидГруппыФормы.Подменю;
			Подменю.Заголовок   = ШаблонНового.Заголовок;
			Подменю.Картинка    = ШаблонНового.Картинка;
			Подменю.Отображение = ШаблонНового.Отображение;
		Иначе
			ГруппаПоУмолчанию = Подменю;
			Для Каждого Группа Из Подменю.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(Группа) <> Тип("ГруппаФормы") Тогда
					Продолжить;
				КонецЕсли;
				КраткоеИмя = Группа.Имя;
				Если СтрНачинаетсяС(НРег(КраткоеИмя), НРег(ИмяПодменю)) Тогда
					КраткоеИмя = Сред(КраткоеИмя, СтрДлина(ИмяПодменю) + 1);
					Если НРег(КраткоеИмя) = НРег("Обычное") Тогда
						ГруппаПоУмолчанию = Группа;
					КонецЕсли;
				КонецЕсли;
				Группы.Вставить(КраткоеИмя, Группа);
			КонецЦикла;
		КонецЕсли;
		
		Если Не Группы.Свойство("Важное") Тогда
			ГруппаВажное = Элементы.Добавить(ИмяПодменю + "Важное", Тип("ГруппаФормы"), Подменю);
			ГруппаВажное.Вид = ВидГруппыФормы.ГруппаКнопок;
			Группы.Вставить("Важное", ГруппаВажное);
		КонецЕсли;
		Если Не Группы.Свойство("Обычное") Тогда
			ГруппаПоУмолчанию = Элементы.Добавить(ИмяПодменю + "Обычное", Тип("ГруппаФормы"), Подменю);
			ГруппаПоУмолчанию.Вид = ВидГруппыФормы.ГруппаКнопок;
			Группы.Вставить("Обычное", ГруппаПоУмолчанию);
		КонецЕсли;
		Если Не Группы.Свойство("СмТакже") Тогда
			ГруппаСмТакже = Элементы.Добавить(ИмяПодменю + "СмТакже", Тип("ГруппаФормы"), Подменю);
			ГруппаСмТакже.Вид = ВидГруппыФормы.ГруппаКнопок;
			Группы.Вставить("СмТакже", ГруппаСмТакже);
		КонецЕсли;
		
	Иначе
		Если ШаблонНового = Неопределено Тогда
			Возврат ПодменюПоУмолчанию;
		КонецЕсли;
		Подменю = КоманднаяПанель;
		ГруппаПоУмолчанию = КоманднаяПанель;
	КонецЕсли;
	
	Результат = СведенияОВсехПодменю.Добавить();
	Результат.Подменю = Подменю;
	Результат.ГруппаПоУмолчанию = ГруппаПоУмолчанию;
	Результат.Группы = Группы;
	
	Возврат Результат;
КонецФункции

Функция СформироватьИнформациюОПодменю(Соответствие, ГруппаФормы)
	Если ГруппаФормы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Подменю = ГруппаФормы;
	Если ГруппаФормы.Вид = ВидГруппыФормы.ГруппаКнопок
		И ТипЗнч(ГруппаФормы.Родитель) = Тип("ГруппаФормы")
		И ГруппаФормы.Родитель.Вид = ВидГруппыФормы.Подменю Тогда
		Подменю = ГруппаФормы.Родитель;
	КонецЕсли;
	ИнформацияОПодменю = Соответствие[НРег(Подменю.Имя)];
	Если ИнформацияОПодменю = Неопределено Тогда
		ИнформацияОПодменю = Новый Структура("КоличествоКоманд, ИмяПоследнейКнопки", 0, "");
		Соответствие.Вставить(НРег(Подменю.Имя), ИнформацияОПодменю);
		ЗарегистрироватьФиксированныеКомандыПодменю(Подменю, ИнформацияОПодменю);
	КонецЕсли;
	Возврат ИнформацияОПодменю;
КонецФункции

Процедура ЗарегистрироватьФиксированныеКомандыПодменю(ГруппаФормы, ИнформацияОПодменю)
	Для Каждого ЭлементФормы Из ГруппаФормы.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы") И ЭлементФормы.Видимость Тогда
			ИнформацияОПодменю.КоличествоКоманд = ИнформацияОПодменю.КоличествоКоманд + 1;
			ИнформацияОПодменю.ИмяПоследнейКнопки = ЭлементФормы.Имя;
		ИначеЕсли ТипЗнч(ЭлементФормы) = Тип("ГруппаФормы") Тогда
			ЗарегистрироватьФиксированныеКомандыПодменю(ЭлементФормы, ИнформацияОПодменю)
		КонецЕсли;
		Если ИнформацияОПодменю.КоличествоКоманд > 1 Тогда
			Возврат; // Оптимизация.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОпределитьИмяКоманды(Форма, ИмяГруппы, ИдентификаторКоманды, СчетчикКомандСАвтогенерируемымИменем)
	Если ИмяСоответствуетТребованиямИменованияСвойств(ИдентификаторКоманды) Тогда
		ИмяКоманды = ИмяГруппы + "_" + ИдентификаторКоманды;
	Иначе
		СчетчикКомандСАвтогенерируемымИменем = СчетчикКомандСАвтогенерируемымИменем + 1;
		ИмяКоманды = ИмяГруппы + "_" + Формат(СчетчикКомандСАвтогенерируемымИменем, "ЧН=; ЧГ=");
	КонецЕсли;
	Пока Форма.Элементы.Найти(ИмяКоманды) <> Неопределено
		Или Форма.Команды.Найти(ИмяКоманды) <> Неопределено Цикл
		СчетчикКомандСАвтогенерируемымИменем = СчетчикКомандСАвтогенерируемымИменем + 1;
		ИмяКоманды = ИмяГруппы + "_" + Формат(СчетчикКомандСАвтогенерируемымИменем, "ЧН=; ЧГ=");
	КонецЦикла;
	Возврат ИмяКоманды;
КонецФункции

Функция ИмяСоответствуетТребованиямИменованияСвойств(Имя)
	Если СтрНайти(Имя, " ") > 0 Или СтрНайти(Имя, ",") > 0 Или СтрНайти(Имя, "(") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Попытка
		Структура = Новый Структура(Имя, Неопределено);
		Результат = Истина;
	Исключение
		Результат = Ложь;
	КонецПопытки;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы.

Функция ОперативноеОбновлениеОбщихДанныхКонфигурации() Экспорт
	Возврат ОперативноеОбновлениеОбщихДанных(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
КонецФункции

// Обновляет кэш объектов метаданных указанного типа.
//
// Параметры:
//   ФильтрПоТипуИдентификаторов - * - Тип объектов метаданных.
//       - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Обновлять кэш конфигурации.
//           Структура с ключом "ПодключенныеОбъекты" записывается в константу ПараметрыПодключаемыхКоманд.
//       - СправочникСсылка.ИдентификаторыОбъектовРасширений - Обновлять кэш расширений.
//           Структура с ключом "ПодключенныеОбъекты" записывается в регистр ПараметрыРаботыВерсийРасширений.
//
// Возвращаемое значение:
//   Структура - описание
//       * ЕстьИзменения - Булево - Истина когда обновление прошло не "в холостую".
//       * ПодключенныеОбъекты - Соответствие - Кэш для быстрого определения списка объектов,
//           подключенных к объектам конфигурации.
//           Ключами и значениям являются ссылки объектов метаданных конфигурации и расширений.
//
Функция ОперативноеОбновлениеОбщихДанных(ФильтрПоТипуИдентификаторов)
	Результат = Новый Структура;
	Результат.Вставить("ЕстьИзменения", Ложь);
	
	Если ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений")
		И Не ЗначениеЗаполнено(ПараметрыСеанса.ВерсияРасширений) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПодключенныеОбъекты = Новый Соответствие;
	
	ПодсистемаПодключаемыеОтчетыИОбработки = Метаданные.Подсистемы.Найти("ПодключаемыеОтчетыИОбработки");
	Если ПодсистемаПодключаемыеОтчетыИОбработки = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не внедрена обязательная подсистема ""Подключаемые отчеты и обработки"".
			|Подробнее см. документацию БСП.'");
	КонецЕсли;
	
	Состав = ПодсистемаПодключаемыеОтчетыИОбработки.Состав;
	Для Каждого ОбъектМетаданныхПоставщика Из Состав Цикл
		СсылкаПодключенногоОМ = СтандартныеПодсистемыСервер.ИдентификаторОбъектаМетаданных(ОбъектМетаданныхПоставщика);
		Если ТипЗнч(СсылкаПодключенногоОМ) <> ФильтрПоТипуИдентификаторов Тогда
			Продолжить;
		КонецЕсли;
		ПолноеИмя = ОбъектМетаданныхПоставщика.ПолноеИмя();
		Настройки = НастройкиПоставщика(ПолноеИмя);
		Если Настройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ОбъектМетаданных Из Настройки.Размещение Цикл
			СсылкаОМ = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			МассивПриемник = ПодключенныеОбъекты[СсылкаОМ];
			Если МассивПриемник = Неопределено Тогда
				МассивПриемник = Новый Массив;
				ПодключенныеОбъекты.Вставить(СсылкаОМ, МассивПриемник);
			КонецЕсли;
			Если МассивПриемник.Найти(ПолноеИмя) = Неопределено Тогда
				МассивПриемник.Добавить(ПолноеИмя);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		СтароеХранилищеЗначения = Константы.ПараметрыПодключаемыхКоманд.Получить();
	ИначеЕсли ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
		СтароеХранилищеЗначения = СтандартныеПодсистемыСервер.ПараметрРаботыРасширения(ПолноеИмяПодсистемы());
	Иначе
		Возврат Результат;
	КонецЕсли;
	
	НовоеХранилищеЗначения = Новый ХранилищеЗначения(Новый Структура("ПодключенныеОбъекты", ПодключенныеОбъекты));
	Если Не ОбщегоНазначения.ДанныеСовпадают(СтароеХранилищеЗначения, НовоеХранилищеЗначения) Тогда
		Результат.ЕстьИзменения = Истина;
		Если ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
			КонстантаОбъект = Константы.ПараметрыПодключаемыхКоманд.СоздатьМенеджерЗначения();
			КонстантаОбъект.Значение = НовоеХранилищеЗначения;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(КонстантаОбъект, Ложь, Ложь);
		ИначеЕсли ФильтрПоТипуИдентификаторов = Тип("СправочникСсылка.ИдентификаторыОбъектовРасширений") Тогда
			СтандартныеПодсистемыСервер.УстановитьПараметрРаботыРасширения(ПолноеИмяПодсистемы(), НовоеХранилищеЗначения);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вставить("ПодключенныеОбъекты", ПодключенныеОбъекты);
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызовы из модулей ПовтИсп.

Функция НастройкиРазмещения(ИмяФормы, ИспользуемыеПодменю) Экспорт
	ИспользуемыеПодменю = СтрРазделить(ИспользуемыеПодменю, ",");
	
	Команды = ТаблицаКоманд();
	
	НастройкиФормы = Новый Структура;
	НастройкиФормы.Вставить("ИмяФормы", ИмяФормы);
	НастройкиФормы.Вставить("ИспользуемыеПодменю", ИспользуемыеПодменю);
	
	// Определение параметров объекта и заполнение списка команд.
	НастройкиОбъекта = НастройкиОбъекта();
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы);
	Если ОбъектМетаданных <> Неопределено Тогда
		ОбъектМетаданных = ОбъектМетаданных.Родитель();
		Если ОбъектМетаданных <> Неопределено Тогда
			НастройкиОбъекта.Метаданные          = ОбъектМетаданных;
			НастройкиОбъекта.ПолноеИмя           = ОбъектМетаданных.ПолноеИмя();
			НастройкиОбъекта.Менеджер            = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(НастройкиОбъекта.ПолноеИмя);
			НастройкиОбъекта.Ссылка              = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(НастройкиОбъекта.ПолноеИмя);
			НастройкиОбъекта.ЭтоЖурналДокументов = ОбщегоНазначения.ЭтоЖурналДокументов(ОбъектМетаданных);
		КонецЕсли;
	КонецЕсли;
	
	НастройкиРасширений = НастройкиРасширенийПодключенныхКОбъектуМетаданных(НастройкиОбъекта.Ссылка);
	
	Попытка
		ИнтеграцияСтандартныхПодсистем.ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, НастройкиОбъекта, НастройкиРасширений, Команды);
	Исключение
		Если ОбщегоНазначенияКлиентСервер.РежимОтладки() Тогда
			ВызватьИсключение;
		Иначе
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При определении команд, подключенных к форме ""%1"", возникла ошибка:
				|%2'"),
				ИмяФормы,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Подключаемые команды'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				НастройкиОбъекта.Метаданные,
				ИмяФормы,
				ТекстОшибки);
			Команды.Очистить();
		КонецЕсли;
	КонецПопытки;
	
	// Фильтр команд по именам форм и функциональным опциям.
	ЧастиИмени = СтрРазделить(ИмяФормы, ".");
	КраткоеИмяФормы = ЧастиИмени[ЧастиИмени.ВГраница()];
	Количество = Команды.Количество();
	Для Номер = 1 По Количество Цикл
		Команда = Команды[Количество - Номер];
		// Фильтр по именам форм.
		ВидимостьВФормах = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВРег(Команда.ВидимостьВФормах), ",", Истина, Истина);
		Если ВидимостьВФормах.Количество() > 0
			И ВидимостьВФормах.Найти(ВРег(КраткоеИмяФормы)) = Неопределено
			И ВидимостьВФормах.Найти(ВРег(ИмяФормы)) = Неопределено Тогда
			Команды.Удалить(Команда);
			Продолжить;
		КонецЕсли;
		// Фильтр по функциональным опциям.
		ФункциональныеОпции = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Команда.ФункциональныеОпции, ",", Истина, Истина);
		ВидимостьКоманды = ФункциональныеОпции.Количество() = 0;
		Для Каждого ИмяОпции Из ФункциональныеОпции Цикл
			Если ПолучитьФункциональнуюОпцию(СокрЛП(ИмяОпции)) Тогда
				ВидимостьКоманды = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ВидимостьКоманды Тогда
			Команды.Удалить(Команда);
		КонецЕсли;
	КонецЦикла;
	
	НастройкиОбъекта.Вставить("Команды", Команды);
	Возврат НастройкиОбъекта;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызовы из модулей ВызовСервера.

// Возвращает описание команды по имени элемента формы.
Функция ОписаниеКоманды(ИмяКомандыВФорме, АдресНастроек) Экспорт
	Команды = ПолучитьИзВременногоХранилища(АдресНастроек);
	Команда = Команды.Найти(ИмяКомандыВФорме, "ИмяВФорме");
	ОписаниеКоманды = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Команда);
	
	Если ЗначениеЗаполнено(ОписаниеКоманды.ИмяФормы) Тогда
		ОписаниеКоманды.Вставить("Серверная", Ложь);
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеКоманды.ИмяФормы, ".", Истина, Истина);
		КоличествоПодстрок = МассивПодстрок.Количество();
		Если КоличествоПодстрок = 1
			Или (КоличествоПодстрок = 2 И ВРег(МассивПодстрок[0]) <> "ОБЩАЯФОРМА") Тогда
			ОписаниеКоманды.ИмяФормы = ОписаниеКоманды.Менеджер + "." + ОписаниеКоманды.ИмяФормы;
		КонецЕсли;
	Иначе
		ОписаниеКоманды.Вставить("Серверная", Истина);
		Если ЗначениеЗаполнено(ОписаниеКоманды.Обработчик) Тогда
			Если Не ПустаяСтрока(ОписаниеКоманды.Менеджер) И СтрНайти(ОписаниеКоманды.Обработчик, ".") = 0 Тогда
				ОписаниеКоманды.Обработчик = ОписаниеКоманды.Менеджер + "." + ОписаниеКоманды.Обработчик;
			КонецЕсли;
			Если СтрНачинаетсяС(ВРег(ОписаниеКоманды.Обработчик), ВРег("ОбщийМодуль.")) Тогда
				ПозицияТочки = СтрНайти(ОписаниеКоманды.Обработчик, ".");
				ОписаниеКоманды.Обработчик = Сред(ОписаниеКоманды.Обработчик, ПозицияТочки + 1);
			КонецЕсли;
			МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОписаниеКоманды.Обработчик, ".", Истина, Истина);
			КоличествоПодстрок = МассивПодстрок.Количество();
			Если КоличествоПодстрок = 2 Тогда
				ИмяМодуля = МассивПодстрок[0];
				ОбъектМетаданныхОбщийМодуль = Метаданные.ОбщиеМодули.Найти(ИмяМодуля);
				Если ОбъектМетаданныхОбщийМодуль = Неопределено Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Общий модуль ""%1"" не найден.'"),
						ИмяМодуля);
				КонецЕсли;
				Если ОбъектМетаданныхОбщийМодуль.КлиентУправляемоеПриложение Тогда
					ОписаниеКоманды.Серверная = Ложь;
				КонецЕсли;
			Иначе
				Вид = ВРег(МассивПодстрок[0]);
				ВидВоМножественномЧисле = ВидОбъектаМетаданныхВоМножественномЧисле(Вид);
				Если ВидВоМножественномЧисле <> Неопределено Тогда
					МассивПодстрок.Установить(0, ВидВоМножественномЧисле);
					ОписаниеКоманды.Обработчик = СтрСоединить(МассивПодстрок, ".");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	ОписаниеКоманды.Удалить("Менеджер");
	
	Возврат Новый ФиксированнаяСтруктура(ОписаниеКоманды);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с объектами метаданных.

// Возвращает вид объекта во множественном числе.
Функция ВидОбъектаМетаданныхВоМножественномЧисле(Знач Вид)
	Вид = ВРег(СокрЛП(Вид));
	Если Вид = "ПЛАНОБМЕНА" Тогда
		Возврат "ПланыОбмена";
	ИначеЕсли Вид = "СПРАВОЧНИК" Тогда
		Возврат "Справочники";
	ИначеЕсли Вид = "ДОКУМЕНТ" Тогда
		Возврат "Документы";
	ИначеЕсли Вид = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Возврат "ЖурналыДокументов";
	ИначеЕсли Вид = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Возврат "Перечисления";
	ИначеЕсли Вид = "ОТЧЕТ" Тогда
		Возврат "Отчеты";
	ИначеЕсли Вид = "ОБРАБОТКА" Тогда
		Возврат "Обработки";
	ИначеЕсли Вид = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Возврат "ПланыВидовХарактеристик";
	ИначеЕсли Вид = "ПЛАНСЧЕТОВ" Тогда
		Возврат "ПланыСчетов";
	ИначеЕсли Вид = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Возврат "ПланыВидовРасчета";
	ИначеЕсли Вид = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Возврат "РегистрыСведений";
	ИначеЕсли Вид = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Возврат "РегистрыНакопления";
	ИначеЕсли Вид = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Возврат "РегистрыБухгалтерии";
	ИначеЕсли Вид = "РЕГИСТРРАСЧЕТА" Тогда
		Возврат "РегистрыРасчета";
	ИначеЕсли Вид = "ПЕРЕРАСЧЕТ" Тогда
		Возврат "Перерасчеты";
	ИначеЕсли Вид = "БИЗНЕСПРОЦЕСС" Тогда
		Возврат "БизнесПроцессы";
	ИначеЕсли Вид = "ЗАДАЧА" Тогда
		Возврат "Задачи";
	ИначеЕсли Вид = "КОНСТАНТА" Тогда
		Возврат "Константы";
	ИначеЕсли Вид = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Возврат "Последовательности";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Шаблоны.

// Шаблон первого параметра процедуры "ПриОпределенииНастроек" объектов,
//   включенных в состав подсистемы ПодключаемыеОтчетыИОбработки.
//
// Возвращаемое значение:
//   Структура - Настройки интеграции объекта (отчета или обработки),
//     включенного в состав подсистемы ПодключаемыеОтчетыИОбработки.
//       
//       * Размещение - Массив из ОбъектМетаданных - Массив объектов, к которым подключен этот объект.
//        
//       * ДобавитьКомандыПечати - Если Истина то в модуле менеджера следует определить процедуру по шаблону:
//           // Заполняет список команд печати.
//           //
//           // Параметры:
//           //   КомандыПечати - ТаблицаЗначений - Подробнее см. в УправлениеПечатью.СоздатьКоллекциюКомандПечати().
//           //
//           Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
//           	// Код по добавлению команд печати.
//           КонецПроцедуры
//        
//       * ДобавитьКомандыЗаполнения - Если Истина то в модуле менеджера следует определить процедуру по шаблону:
//           // Определяет список команд заполнения.
//           //
//           // Параметры:
//           //   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//           //       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//           //   Параметры - Структура - Вспомогательные параметры. Для чтения.
//           //       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//           //
//           Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
//           	// Код по добавлению команд заполнения.
//           КонецПроцедуры
//
Функция НастройкиПодключаемыхОтчетовИОбработок()
	Настройки = Новый Структура;
	Настройки.Вставить("Размещение", Новый ОписаниеТипов("Массив"));
	ИнтеграцияСтандартныхПодсистем.ПриОпределенииСтруктурыНастроекПодключаемыхОбъектов(Настройки);
	Возврат Настройки;
КонецФункции

// Шаблон таблицы подключаемых команд.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Таблица с подключаемыми командами.
//     Общие настройки:
//       * Идентификатор - Строка - Идентификатор команды.
//     Настройки внешнего вида:
//       * Представление - Строка - Представление команды в форме.
//       * Группа - Строка - Имя группы в командной панели, в которой будет выводиться эта команда.
//       * Порядок - Число - Порядок размещения команды в подменю. Используется для настройки под конкретное рабочее место.
//       * Картинка - Картинка - Картинка команды. Необязательный.
//       * СочетаниеКлавиш - СочетаниеКлавиш - Сочетание клавиш для быстрого вызова команды. Необязательный.
//     Настройки видимости:
//       * ТипПараметра - ОписаниеТипов - Типы объектов, для которых предназначена эта команда.
//       * ВидимостьВФормах - Строка - Имена форм через запятую, в которых должна отображаться команда.
//           Используется когда состав команд отличается для различных форм.
//       * ФункциональныеОпции - Строка - Имена функциональных опций через запятую, определяющих видимость команды.
//     Настройки процесса выполнения:
//       * ИмяСписка - Строка - Имя таблицы формы, связанной с динамическим списком, для которого выводится команда.
//           Используется когда в форме несколько списков и команда предназначена для второстепенного списка.
//       * МножественныйВыбор - Булево, Неопределено - Если Истина, то команда поддерживает множественный выбор.
//           В этом случае в параметре выполнения будет передан список ссылок.
//           Необязательный. Значение по умолчанию: Истина.
//       * РежимЗаписи - Строка - Действия, связанные с записью объекта, которые выполняются перед обработчиком команды.
//           ** "НеЗаписывать" - Объект не записывается, а в параметрах обработчика вместо ссылок передается вся форма.
//               В этом режиме рекомендуется работать напрямую с формой,
//               которая передается в структуре 2 параметра обработчика команды.
//           ** "ЗаписыватьТолькоНовые" - Записывать только новые объекты.
//           ** "Записывать" - Записывать новые и модифицированные объекты.
//           ** "Проводить" - Проводить документы.
//           Перед записью и проведением у пользователя запрашивается подтверждение.
//           Необязательный. Значение по умолчанию: "ЗаписыватьТолькоНовые".
//       * ТребуетсяРаботаСФайлами - Булево - Если Истина, то в веб-клиенте предлагается
//           установить расширение работы с файлами.
//           Необязательный. Значение по умолчанию: Ложь.
//     Настройки обработчика:
//       * Менеджер - Строка - Объект, отвечающий за выполнение команды.
//       * ИмяФормы - Строка - Имя формы, которую требуется получить для выполнения команды.
//           Если Обработчик не указан, то у формы вызывается метод "Открыть".
//       * ПараметрыФормы - Неопределено, ФиксированнаяСтруктура - Необязательный. Параметры формы, указанной в ИмяФормы.
//       * Обработчик - Строка - Описание процедуры, обрабатывающей основное действие команды.
//           Формат "<ИмяОбщегоМодуля>.<ИмяПроцедуры>" используется когда процедура размещена в общем модуле.
//           Формат "<ИмяПроцедуры>" используется в следующих случаях:
//             - Если ИмяФормы заполнено то в модуле указанной формы ожидается клиентская процедура.
//             - Если ИмяФормы не заполнено то в модуле менеджера этого объекта ожидается серверная процедура.
//       * ДополнительныеПараметры - Неопределено, ФиксированнаяСтруктура - Необязательный. Параметры обработчика, указанного в Обработчик.
//
Функция ТаблицаКоманд()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	// Настройки внешнего вида:
	Таблица.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Группа", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Подменю", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Важность", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("Картинка"); // Картинка.
	Таблица.Колонки.Добавить("СочетаниеКлавиш"); // СочетаниеКлавиш.
	// Настройки видимости и доступность:
	Таблица.Колонки.Добавить("ТипПараметра"); // ОписаниеТипов.
	Таблица.Колонки.Добавить("ВидимостьВФормах", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ФункциональныеОпции", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("УсловияВидимости", Новый ОписаниеТипов("Массив"));
	Таблица.Колонки.Добавить("ИзменяетВыбранныеОбъекты"); // Булево или Неопределено.
	// Настройки процесса выполнения:
	Таблица.Колонки.Добавить("ИмяСписка", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("МножественныйВыбор"); // Булево или Неопределено.
	Таблица.Колонки.Добавить("РежимЗаписи", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ТребуетсяРаботаСФайлами", Новый ОписаниеТипов("Булево"));
	// Настройки обработчика:
	Таблица.Колонки.Добавить("Менеджер", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ДополнительныеПараметры"); // Структура или Неопределено.
	Таблица.Колонки.Добавить("ИмяФормы", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ПараметрыФормы"); // Структура или Неопределено.
	Таблица.Колонки.Добавить("ИмяПараметраФормы", Новый ОписаниеТипов("Строка"));
	// Служебные:
	Таблица.Колонки.Добавить("ПорядокВажности", Новый ОписаниеТипов("Число"));
	Таблица.Колонки.Добавить("ИмяВФорме", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ЕстьУсловияВидимости", Новый ОписаниеТипов("Булево"));
	Возврат Таблица;
КонецФункции

// Шаблон сведений об объекте метаданных, к которому принадлежит форма.
//
// Возвращаемое значение:
//   Структура - Вспомогательные параметры.
//       * Метаданные - ОбъектМетаданных - Метаданные объекта, к которому принадлежит форма.
//       * ПолноеИмя  - Строка           - Полное имя объекта. Например: "Документ.ИмяДокумента".
//       * Менеджер   - Произвольный     - Модуль менеджера объекта.
//       * Ссылка     - СправочникСсылка.ИдентификаторыОбъектовМетаданных - Ссылка объекта.
//       * ЭтоЖурналДокументов - Булево - Истина если объект является журналом документов.
//
Функция НастройкиОбъекта()
	Структура = Новый Структура("Метаданные, ПолноеИмя, Менеджер, Ссылка");
	Структура.Вставить("ЭтоЖурналДокументов", Ложь);
	Возврат Структура;
КонецФункции

// Шаблон второго параметра обработчика команды.
//
// Возвращаемое значение:
//   Структура - Вспомогательные параметры.
//       * ОписаниеКоманды - Структура - Описание команды.
//           Структура аналогична таблице ПодключаемыеКоманды.ТаблицаКоманд().
//           ** Идентификатор - Строка - Идентификатор команды.
//           ** Представление - Строка - Представление команды в форме.
//           ** ДополнительныеПараметры - Неопределено, ФиксированнаяСтруктура - Дополнительные параметры команды.
//       * Форма - УправляемаяФорма - Форма, из которой вызвана команда.
//       * ЭтоФормаОбъекта - Булево - Истина, если команда вызвана из формы объекта.
//       * Источник - ТаблицаФормы, ДанныеФормыСтруктура - Объект или список формы с полем "Ссылка".
//
Функция ПараметрыВыполненияКоманды()
	Структура = Новый Структура("ОписаниеКоманды, Форма, Источник");
	Структура.Вставить("ЭтоФормаОбъекта", Ложь);
	Возврат Структура;
КонецФункции

// Шаблон сведений об объектах метаданных - источников команд.
//
// Возвращаемое значение:
//   См. описание 2 параметра процедуры ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту().
//
Функция ДеревоИсточниковКоманд()
	Результат = Новый ДеревоЗначений;
	Результат.Колонки.Добавить("Метаданные");
	Результат.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("Менеджер");
	Результат.Колонки.Добавить("СсылкаМетаданных");
	Результат.Колонки.Добавить("ТипСсылкиДанных");
	Результат.Колонки.Добавить("Вид", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЭтоЖурналДокументов", Новый ОписаниеТипов("Булево"));
	Возврат Результат;
КонецФункции

// Шаблон сведений об отчетах и обработках, подключенных к источникам команд.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Вспомогательные параметры.
//       * ПолноеИмя  - Строка           - Полное имя объекта. Например: "Документ.ИмяДокумента".
//       * Менеджер   - Произвольный     - Модуль менеджера объекта.
//       * Размещение - Массив           - Список объектов, к которым подключен отчет или обработка.
//       * ТипСсылкиДанных - Тип, ОписаниеТипов - Тип объектов, к которым подключен отчет или обработка..
//
Функция ТаблицаПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса = Неопределено)
	Если НастройкиПрограммногоИнтерфейса = Неопределено Тогда
		НастройкиПрограммногоИнтерфейса = НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов();
	КонецЕсли;
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ПолноеИмя", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("Менеджер");
	Таблица.Колонки.Добавить("Метаданные");
	Таблица.Колонки.Добавить("ТипСсылкиДанных");
	
	Для Каждого Настройка Из НастройкиПрограммногоИнтерфейса Цикл
		Попытка
			Таблица.Колонки.Добавить(Настройка.Ключ, Настройка.ОписаниеТипов);
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось зарегистрировать настройку программного интерфейса подключаемых объектов.
				|Ключ: ""%1"", описание типов: ""%2"", описание ошибки: ""%3"".'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ТекстОшибки,
				Настройка.Ключ,
				Строка(Настройка.ОписаниеТипов),
				КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
	Таблица.Индексы.Добавить("ПолноеИмя");
	
	Возврат Таблица;
КонецФункции

// Шаблон сведений об отчетах и обработках, подключенных к источникам команд.
//
// Возвращаемое значение:
//   ТаблицаЗначений - Описание параметра Настройки процедуры ПриОпределенииНастроек объектов,
//       включенных в состав подсистемы ПодключаемыеОтчетыИОбработки.
//       * Ключ             - Строка        - Имя настройки.
//       * ОписаниеТипов    - ОписаниеТипов - Тип настройки.
//       * ВидыПодключаемыхОбъектов - Строка - Вид объекта метаданных в верхнем регистре.
//                                            Например: "ОТЧЕТ" или "ОБРАБОТКА".
//
Функция НастройкиПрограммногоИнтерфейсаПодключаемыхОбъектов()
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Ключ", Новый ОписаниеТипов("Строка"));
	Таблица.Колонки.Добавить("ОписаниеТипов", Новый ОписаниеТипов("ОписаниеТипов"));
	Таблица.Колонки.Добавить("ВидыПодключаемыхОбъектов", Новый ОписаниеТипов("Строка"));
	
	Настройка = Таблица.Добавить();
	Настройка.Ключ          = "Размещение";
	Настройка.ОписаниеТипов = Новый ОписаниеТипов("Массив");
	Настройка.ВидыПодключаемыхОбъектов = "Отчет, Обработка";
		
	ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов(Таблица);
	
	Возврат Таблица;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочее.

// Возвращает полное имя подсистемы.
Функция ПолноеИмяПодсистемы() Экспорт
	Возврат "СтандартныеПодсистемы.ПодключаемыеКоманды";
КонецФункции

// Возвращает левую часть строки до разделителя. Правая часть строки возвращается в параметре Остаток.
Функция СтрЛев(Знач Строка, Знач Разделитель, Остаток = Неопределено)
	Позиция = Найти(Строка, Разделитель);
	Если Позиция = 0 Тогда
		СтрокаДоРазделителя = Строка;
		Остаток = "";
	Иначе
		СтрокаДоРазделителя = Лев(Строка, Позиция - 1);
		Остаток = Сред(Строка, Позиция + СтрДлина(Разделитель));
	КонецЕсли;
	Возврат СтрокаДоРазделителя;
КонецФункции

Функция ОбъединитьТипы(Тип1, Тип2)
	Тип1ЭтоОписаниеТипов = ТипЗнч(Тип1) = Тип("ОписаниеТипов");
	Тип2ЭтоОписаниеТипов = ТипЗнч(Тип2) = Тип("ОписаниеТипов");
	Если Тип1ЭтоОписаниеТипов И Тип1.Типы().Количество() > 0 Тогда
		ИсходноеОписаниеТипов = Тип1;
		ДобавляемыеТипы = ?(Тип2ЭтоОписаниеТипов, Тип2.Типы(), ЗначениеВМассив(Тип2));
	ИначеЕсли Тип2ЭтоОписаниеТипов И Тип2.Типы().Количество() > 0 Тогда
		ИсходноеОписаниеТипов = Тип2;
		ДобавляемыеТипы = ЗначениеВМассив(Тип1);
	ИначеЕсли ТипЗнч(Тип1) <> Тип("Тип") Тогда
		Возврат Тип2;
	ИначеЕсли ТипЗнч(Тип2) <> Тип("Тип") Тогда
		Возврат Тип1;
	Иначе
		Типы = Новый Массив;
		Типы.Добавить(Тип1);
		Типы.Добавить(Тип2);
		Возврат Новый ОписаниеТипов(Типы);
	КонецЕсли;
	Если ДобавляемыеТипы.Количество() = 0 Тогда
		Возврат ИсходноеОписаниеТипов;
	Иначе
		Возврат Новый ОписаниеТипов(ИсходноеОписаниеТипов, ДобавляемыеТипы);
	КонецЕсли;
КонецФункции

Функция ЗначениеВМассив(Значение)
	Результат = Новый Массив;
	Результат.Добавить(Значение);
	Возврат Результат;
КонецФункции

Функция ЭтоВнешняяФорма(ПолноеИмяОбъектаМетаданных)
	ВидОбъектаМетаданныхНРег = НРег(СтрЛев(ПолноеИмяОбъектаМетаданных, "."));
	Возврат ВидОбъектаМетаданныхНРег = НРег("ВнешняяОбработка")
		Или ВидОбъектаМетаданныхНРег = НРег("ВнешнийОтчет");
КонецФункции

// Вычисляет контрольную сумму для произвольных данных по указанному алгоритму.
//
// Параметры:
//  Данные - Произвольный - любое сериализуемое значение.
//  Алгоритм - ХешФункция - алгоритм расчета контрольной суммы. По умолчанию, MD5.
// 
// Возвращаемое значение:
//   Строка - контрольная сумма строкой без пробелов, 32 байта.
Функция КонтрольнаяСуммаСтрокой(Знач Данные, Знач Алгоритм = Неопределено)
	Если Алгоритм = Неопределено Тогда
		Алгоритм = ХешФункция.MD5;
	КонецЕсли;
	
	ХешированиеДанных = Новый ХешированиеДанных(Алгоритм);
	Если ТипЗнч(Данные) <> Тип("Строка") И ТипЗнч(Данные) <> Тип("ДвоичныеДанные") Тогда
		Данные = ОбщегоНазначения.ЗначениеВСтрокуXML(Данные);
	КонецЕсли;
	ХешированиеДанных.Добавить(Данные);
	Результат = СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	
	Возврат Результат;
КонецФункции

#КонецОбласти