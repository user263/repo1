#Область ОбработчикиСобытийФормы    

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбменДаннымиСервер.ФормаНастройкиУзлаПриСозданииНаСервере(ЭтаФорма,"ОбменТОиР20ЕРП20");
	
	Если Не ПереноситьАктивыВУпп Тогда
		Элементы.СпособПереносаАктивов.Доступность = Ложь;
	КонецЕсли; 
	
	Если Не ОтражатьВыявленныеДефекты Тогда
		Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.Доступность = Ложь;
	КонецЕсли;	
	
	Если ОтражатьПринятиеКУчетуОСВУПП = Ложь
		И ОтражатьСписаниеОСВУПП = Ложь Тогда
		
		ПравилаОтправкиАктивов = "ТолькоОбъектыАктивы"
		
	ИначеЕсли ОтражатьПринятиеКУчетуОСВУПП = Истина
		И ОтражатьСписаниеОСВУПП = Ложь Тогда
		
		ПравилаОтправкиАктивов = "ОРИПринятиеКУчету"		
		
	ИначеЕсли ОтражатьПринятиеКУчетуОСВУПП = Истина
		И ОтражатьСписаниеОСВУПП = Истина Тогда
		
		ПравилаОтправкиАктивов = "ВыбытиеОР"
		
	КонецЕсли;
	
	Если Не ТаблицаСоответствияКритичностиИВремениУстранения.Количество() > 0 Тогда
		
		Выборка = Справочники.торо_КритичностьДефекта.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НС = ТаблицаСоответствияКритичностиИВремениУстранения.Добавить();
			НС.КритичностьДефекта = Выборка.Ссылка;
		КонецЦикла; 
		
	Иначе
		
		Для каждого Строка Из ТаблицаСоответствияКритичностиИВремениУстранения Цикл
			Строка.ВремяСтрокой = СформироватьПродолжительность(Строка.ВремяНаУстранение);
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗаполнитьЗаголовокКнопкиОтборов();
	ЗаполнитьЗаголовокКнопкиОтборов(Истина);
	
	Если ИспользоватьОтборПоОрганизациям Тогда
		ОтборПоОрганизациям = "ПоВыбраннымОрганизациям";
	Иначе
		ОтборПоОрганизациям = "ПоВсемОрганизациям"; 
	КонецЕсли;
	
	ОтборПоОрганизациямПриИзменении(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтаФорма, ЗавершениеРаботы);
КонецПроцедуры

#КонецОбласти     

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПравилаОтправкиАктивовПриИзменении(Элемент)
	РасставитьФлаги();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОрганизациямПриИзменении(Элемент)
	
	Элементы.ВыбратьОрганизаии.Доступность = (ОтборПоОрганизациям = "ПоВыбраннымОрганизациям");
	ИспользоватьОтборПоОрганизациям        = (ОтборПоОрганизациям = "ПоВыбраннымОрганизациям");

КонецПроцедуры

&НаКлиенте
Процедура ПереноситьАктивыВУппПриИзменении(Элемент)
	Элементы.СпособПереносаАктивов.Доступность = ПереноситьАктивыВУпп;
КонецПроцедуры

&НаКлиенте
Процедура ОтражатьВыявленныеДефектыПриИзменении(Элемент)
	Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.Доступность = ОтражатьВыявленныеДефекты;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияКритичностиИВремениУстраненияВремяСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяНаУстранение, Элемент, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСоответствияКритичностиИВремениУстраненияВремяСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяСтрокой      = СформироватьПродолжительность(ВыбранноеЗначение);
		ТекущиеДанные.ВремяНаУстранение = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьОрганизации(Команда)
	
	СписокОрганизаций = Новый СписокЗначений;
	
	Для каждого Строка Из Организации Цикл
		СписокОрганизаций.Добавить(Строка.Организация);
	КонецЦикла;
	
	СписокВыбораОрганизаций = ПолучитьСписокОрганизаций(СписокОрганизаций);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьОрганизацииЗавершение", ЭтаФорма);
	СписокВыбораОрганизаций.ПоказатьОтметкуЭлементов(ОписаниеОповещения,НСтр("ru = 'Выберите организации для отбора'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	ОбменДаннымиКлиент.ФормаНастройкиУзлаКомандаЗакрытьФорму(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура УказатьСклады(Команда)
	
	СписокСкладов = Новый СписокЗначений;
	
	Для каждого Строка Из Склады Цикл
		СписокСкладов.Добавить(Строка.Склад);
	КонецЦикла;
	
	СписокВыбораСкладов = ПолучитьСписокСкладов(СписокСкладов);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьСкладЗавершение", ЭтаФорма);
	СписокВыбораСкладов.ПоказатьОтметкуЭлементов(ОписаниеОповещения,НСтр("ru = 'Выберите склады для отбора'"));

КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтроку(Команда)
	ТекущиеДанные = Элементы.ТаблицаСоответствияКритичностиИВремениУстранения.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтрокаТаблицы = ТаблицаСоответствияКритичностиИВремениУстранения.НайтиСтроки(Новый Структура("КритичностьДефекта", ТекущиеДанные.КритичностьДефекта));
		Если Не СтрокаТаблицы.Количество() = 0 Тогда
			ТаблицаСоответствияКритичностиИВремениУстранения.Удалить(СтрокаТаблицы[0]);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСтроку(Команда)
	ОбновитьТаблицуКритичностей()
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере 
Процедура ОбновитьТаблицуКритичностей()
	
	ТаблицаСоответствияКритичностиИВремениУстранения.Очистить();
	Выборка = Справочники.торо_КритичностьДефекта.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НС = ТаблицаСоответствияКритичностиИВремениУстранения.Добавить();
		НС.КритичностьДефекта = Выборка.Ссылка;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РасставитьФлаги()
	
	Если ПравилаОтправкиАктивов = "ТолькоОбъектыАктивы" Тогда
		ОтражатьПринятиеКУчетуОСВУПП = Ложь;
		ОтражатьСписаниеОСВУПП       = Ложь;
	ИначеЕсли ПравилаОтправкиАктивов = "ОРИПринятиеКУчету" Тогда
		ОтражатьПринятиеКУчетуОСВУПП = Истина;
		ОтражатьСписаниеОСВУПП       = Ложь;
	ИначеЕсли ПравилаОтправкиАктивов = "ВыбытиеОР" Тогда
		ОтражатьПринятиеКУчетуОСВУПП = Истина;
		ОтражатьСписаниеОСВУПП       = Истина;
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаголовокКнопкиОтборов(ЭтоСклад = Ложь)
	Если ЭтоСклад Тогда
		
		ТекстЗаголовка = "";
		Для каждого Строка Из Склады Цикл
			Если ЗначениеЗаполнено(ТекстЗаголовка) Тогда
				ТекстЗаголовка = ТекстЗаголовка + "; ";
			КонецЕсли; 
			ТекстЗаголовка = ТекстЗаголовка + Строка.Склад;
		КонецЦикла; 
		
		Элементы.УкатьСклады.Заголовок = ТекстЗаголовка;
		
	Иначе	
		ТекстЗаголовка = "";
		Для каждого Строка Из Организации Цикл
			Если ЗначениеЗаполнено(ТекстЗаголовка) Тогда
				ТекстЗаголовка = ТекстЗаголовка + "; ";
			КонецЕсли; 
			ТекстЗаголовка = ТекстЗаголовка + Строка.Организация;
		КонецЦикла; 
		Элементы.ВыбратьОрганизаии.Заголовок = ТекстЗаголовка;
	КонецЕсли; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОрганизаций(СписокВыбранныхОрганизаций)
	
	СписокОрганизаций = Новый СписокЗначений;
	Выборка = Справочники.Организации.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Пометка = Не (СписокВыбранныхОрганизаций.НайтиПоЗначению(Выборка.Ссылка) = Неопределено);
		СписокОрганизаций.Добавить(Выборка.Ссылка,,Пометка);

	КонецЦикла; 
	
	Возврат СписокОрганизаций;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСкладов(СписокВыбранныхСкладов)
	
	СписокСкладов = Новый СписокЗначений;
	Выборка = Справочники.Склады.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли; 
		Пометка = Не (СписокВыбранныхСкладов.НайтиПоЗначению(Выборка.Ссылка) = Неопределено);
		СписокСкладов.Добавить(Выборка.Ссылка,,Пометка);

	КонецЦикла; 
	
	Возврат СписокСкладов;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьОрганизацииЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Организации.Очистить();
	
	Для каждого ЭлементСписка Из Результат Цикл
		Если ЭлементСписка.Пометка Тогда
			НС = Организации.Добавить();
			НС.Организация = ЭлементСписка.Значение;
		КонецЕсли; 
	КонецЦикла; 
	ЗаполнитьЗаголовокКнопкиОтборов();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах)
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " м. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьСкладЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Склады.Очистить();
	
	Для каждого ЭлементСписка Из Результат Цикл
		Если ЭлементСписка.Пометка Тогда
			НС = Склады.Добавить();
			НС.Склад = ЭлементСписка.Значение;
		КонецЕсли; 
	КонецЦикла;
	
	ЗаполнитьЗаголовокКнопкиОтборов(Истина);
	
КонецПроцедуры

#КонецОбласти

 