#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

Перем мТаблицаОбъектовРемонта;
Перем ТаблицаПроведения;
Перем ТаблицаВремяНахожденияВСостоянии;
Перем ТаблицаИерархии;
Перем СписокПодчиненныхОбъектов;
Перем мПредыдущиеЭксплуатации;
перем СтруктураДанных Экспорт; // Структура, хранящая данные для работы с уведомлениями.

Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа



#Область ОбработчикиСобытий
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	Если ОбъектыРемонта.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе не заполнена табличная часть объектов ремонта. Проведение невозможно!'"));
		Отказ = истина;
		Возврат;
	КонецЕсли;
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = Строка(Ссылка);
	
	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиОбъектыРемонта(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
		
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Для Каждого Строка Из ОбъектыРемонта Цикл
		Если Строка.ИзменятьСостояниеПодчиненныхОР И НЕ ЗначениеЗаполнено(Строка.Иерархия) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке №%1 не заполнено поле ""Иерархия"". Запись невозможна.'"),Строка.НомерСтроки));
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если БезусловнаяЗапись = Неопределено Тогда
		БезусловнаяЗапись = Ложь;
	КонецЕсли; 

	
	// Заполним причины простоя для запускаемых ОР
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ПолучитьТаблицуОбъектовРемонта();
		
		мПредыдущиеЭксплуатации = ОпределитьСостоянияОбъектов(мТаблицаОбъектовРемонта,мТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонта"));
		
		ТаблицаВремяНахожденияВСостоянии = ОпределитьВремяНахожденияВСостоянии();
		ТаблицаПроведения = ПолучитьИтоговуюТаблицуПроведения();
		
		Если Не БезусловнаяЗапись Тогда
			
			Отказ = ОпределитьДублиСтрок();
			Если Отказ тогда возврат КонецЕсли;
			
			ПроблемныеСостояния = ПолучитьСостоянияПроблемаПроведения(ТаблицаПроведения);
			Если ПроблемныеСостояния.Количество() Тогда
				Отказ = Истина;
				Для Каждого ПроблемнаяЗапись Из ПроблемныеСостояния Цикл
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = '%2 объект ремонта %1 был переведен в состояние %3(документом %4), что противоречит данным текущего документа.'"),
						ПроблемнаяЗапись.ОбъектРемонта,ПроблемнаяЗапись.Период,ПроблемнаяЗапись.ВидЭксплуатацииСтарый,ПроблемнаяЗапись.Регистратор));
				КонецЦикла;
			КонецЕсли;
			
			СравнитьДатыСДатойВводаВЭксплуатацию(Отказ, мТаблицаОбъектовРемонта);
			
			НекорректныеИнтервалы = ПроверитьДаты(Отказ,ТаблицаВремяНахожденияВСостоянии);
			НекорректныеИнтервалы1 = ПроверитьДатыВнутриДокумента(Отказ, ТаблицаВремяНахожденияВСостоянии);
			Для Каждого СтрокаИнтервала Из НекорректныеИнтервалы Цикл
				СтрТаблицыОР = СтрокаИнтервала;
				
				Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Проведение документа невозможно. Для объекта ремонта %1 период %2 - %3 пересекается с другим периодом,
						|	состояние на который уже указано. Необходимо проверить указанные даты.'"),
						СтрТаблицыОР.ОбъектРемонта,СтрТаблицыОР.ДатаНачала,СтрТаблицыОР.ДатаОкончания);
				Иначе
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Проведение документа невозможно. Для объекта ремонта %1 дата изменения состояния %2 попадает в период,
						|	состояние на который уже указано. Необходимо проверить указанную дату изменения состояния.'"),
						СтрТаблицыОР.ОбъектРемонта,СтрТаблицыОР.ДатаОкончания);
				КонецЕсли;
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЦикла;
			
			Для Каждого СтрокаИнтервала Из НекорректныеИнтервалы1 Цикл
				СтрТаблицыОР = мТаблицаОбъектовРемонта.НайтиСтроки(Новый Структура("ДатаНачала,ОбъектРемонта", СтрокаИнтервала.ДатаНачала,СтрокаИнтервала.ОбъектРемонта))[0];
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для объекта %1, период %2 - %3 содержит некорректные даты (возможно период пересекается с другим периодом в рамках документа)!'"),
					СтрТаблицыОР.ОбъектРемонта,СтрТаблицыОР.ДатаНачала,СтрТаблицыОР.ДатаОкончания));
				Отказ = Истина;
			КонецЦикла;
			
			Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации Тогда
				НекорректныеИнтервалы2 = ПроверитьДатыНезакрытыеИнтервалы(Отказ, ТаблицаВремяНахожденияВСостоянии, ТаблицаПроведения);
				Для Каждого СтрокаИнтервала Из НекорректныеИнтервалы2 Цикл
					СтрТаблицыОР = мТаблицаОбъектовРемонта.НайтиСтроки(Новый Структура("ДатаОкончания,ОбъектРемонта", СтрокаИнтервала.Период,СтрокаИнтервала.ОбъектРемонта))[0];
					Если СтрТаблицыОР.ВидЭксплуатации.ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Эксплуатация Тогда
						
						торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Для объекта %1 Вы пытаетесь провести еще один документ с видом ""Простой"" на период %2. 
							|Задайте дату окончания состояния %3, меньшую даты начала уже зарегистрированного в системе простоя.'"),СтрТаблицыОР.ОбъектРемонта,СтрТаблицыОР.ДатаОкончания,СтрТаблицыОР.ВидЭксплуатации));
						Отказ = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Отказ Тогда	
			Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
				Для Каждого ОР Из ОбъектыРемонта Цикл
					СтрВР = Неопределено;
					Если НЕ ЗначениеЗаполнено(ОР.ВидЭксплуатации) Тогда
						СтрВР = мТаблицаОбъектовРемонта.НайтиСтроки(Новый Структура("ДатаНачала,ОбъектРемонта", ОР.ДатаНачала,ОР.ОбъектРемонта));
						Если СтрВР.Количество() = 0 Тогда
							Продолжить;
						КонецЕсли;
						ОР.ВидЭксплуатации = СтрВР[0].ВидЭксплуатации;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				
			КонецЕсли;
		Иначе
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проведение документа не выполнено!'"),СтатусСообщения.Важное);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;
		ДокументОснование = Основание.Ссылка;
		
		ТекущийОР = Неопределено;
		Для Каждого ТекСтрокаСписокДефектов Из Основание.СписокДефектов Цикл
			Если ТекущийОР = Неопределено или (не ТекущийОР = ТекСтрокаСписокДефектов.ОбъектРемонта) Тогда
				НоваяСтрока = ОбъектыРемонта.Добавить();
				НоваяСтрока.ОбъектРемонта = ТекСтрокаСписокДефектов.ОбъектРемонта;
				НоваяСтрока.ДатаОкончания = Основание.ДатаОбнаружения;
				ТекущийОР = ТекСтрокаСписокДефектов.ОбъектРемонта;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;
		ДокументОснование = Основание.Ссылка;
		
		Для каждого ТекСтрока из Основание.РемонтыОборудования Цикл
			Если ОбъектыРемонта.Найти(ТекСтрока.ОбъектРемонта) = Неопределено Тогда
				НоваяСтрока = ОбъектыРемонта.Добавить();
				НоваяСтрока.ОбъектРемонта = ТекСтрока.ОбъектРемонта;
				НоваяСтрока.ДатаОкончания = ТекСтрока.ДатаОкончания;
				НоваяСтрока.Иерархия = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
											"НастройкиТОиР",
											"ОсновнаяСтруктураИерархии",
											Истина);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание)=Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод;
		ДокументОснование = Основание.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ВыходныеДокументы.СписокОбъектов,
		|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ДатаНачала,
		|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ДатаОкончания,
		|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID
		|ПОМЕСТИТЬ СпискиОР
		|ИЗ
		|	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК торо_АктОВыполненииРегламентногоМероприятияМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыходныеДокументы КАК торо_ВыходныеДокументы
		|		ПО торо_АктОВыполненииРегламентногоМероприятияМероприятия.ВидРемонтныхРабот = торо_ВыходныеДокументы.ВидМероприятия
		|ГДЕ
		|	торо_ВыходныеДокументы.ВыходнойДокумент = &ВыходнойДокумент
		|	И торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.ОбъектРемонта,
		|	СпискиОР.ДатаНачала,
		|	СпискиОР.ДатаОкончания
		|ИЗ
		|	СпискиОР КАК СпискиОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииРегламентногоМероприятия.МероприятияОбъектов КАК торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов
		|		ПО СпискиОР.ID = торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.Мероприятие_ID
		|ГДЕ
		|	торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.Ссылка = &Ссылка
		|	И торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.Выполнено = ИСТИНА";
		
		Запрос.УстановитьПараметр("ВыходнойДокумент", Перечисления.торо_ВидыВыходныхДокументов.СостояниеОР);
		Запрос.УстановитьПараметр("Ссылка", Основание);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НС = ОбъектыРемонта.Добавить();
			Нс.ОбъектРемонта = Выборка.ОбъектРемонта;
			НС.ДатаНачала = Выборка.ДатаНачала;
			НС.ДатаОкончания = Выборка.ДатаОкончания;
			
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ЗаполнитьВидыЭксплуатацииВТаблицеДляОбработки()
	
	ТаблицаДляОбработки = мТаблицаОбъектовРемонта;
	Если ЗначениеЗаполнено(ВидЭксплуатации) Тогда
		ВидНаПериод = (ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
		Для Каждого Строка Из ТаблицаДляОбработки Цикл
			Если ВидНаПериод Тогда 
				ЗаполнитьПустоеЗначениеВСтроке(Строка, "ВидЭксплуатацииНаПериод", ВидЭксплуатации);
			Иначе
				ЗаполнитьПустоеЗначениеВСтроке(Строка, "ВидЭксплуатации", ВидЭксплуатации);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьПустоеЗначениеВСтроке(Строка, ИмяКолонки, Значение)
	
	Если Не ЗначениеЗаполнено(Строка[ИмяКолонки]) Тогда
		Строка[ИмяКолонки] = Значение;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьДублиСтрок()
	
	Запрос = Новый Запрос;
	Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации Тогда	
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫРАЗИТЬ(таб.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
		               |	таб.ДатаОкончания КАК ДатаОкончания,
		               |	таб.НомерСтроки,
		               |	1 КАК ДляСуммирования
		               |ПОМЕСТИТЬ Вт_оры
		               |ИЗ
		               |	&ТабОр КАК таб
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Вт_оры.ОбъектРемонта КАК ОбъектРемонта,
		               |	Вт_оры.ДатаОкончания КАК ДатаОкончания
		               |ПОМЕСТИТЬ ВТ_ОРыУникальные
		               |ИЗ
		               |	Вт_оры КАК Вт_оры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Вт_оры.НомерСтроки,
		               |	Вт_оры.ДляСуммирования КАК ДляСуммирования,
		               |	ВТ_ОРыУникальные.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ОРыУникальные.ДатаОкончания КАК ДатаОкончания
		               |ИЗ
		               |	ВТ_ОРыУникальные КАК ВТ_ОРыУникальные
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_оры КАК Вт_оры
		               |		ПО ВТ_ОРыУникальные.ОбъектРемонта = Вт_оры.ОбъектРемонта
		               |			И ВТ_ОРыУникальные.ДатаОкончания = Вт_оры.ДатаОкончания
		               |ИТОГИ
		               |	СУММА(ДляСуммирования)
		               |ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания";
					   
		Запрос.УстановитьПараметр("ТабОр", ОбъектыРемонта);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() тогда
			Возврат ложь;
		КонецЕсли;
		
		ВыборкаПоОР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		отказ = Ложь;
		Пока ВыборкаПоОР.Следующий() цикл
			
			ВыборкаПоПериоду = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоПериоду.Следующий() цикл
				Если ВыборкаПоПериоду.ДляСуммирования < 2 тогда Продолжить; КонецЕсли;
				
				Текст = НСтр("ru = 'Одинаковые строки: '");
				Первый = истина;
				ДетЗаписи = ВыборкаПоПериоду.Выбрать();
				Пока ДетЗаписи.Следующий() цикл
					Текст = Текст + ?(Первый, строка(ДетЗаписи.НомерСтроки), ", " + Строка(строка(ДетЗаписи.НомерСтроки)));
					первый = ложь;
					отказ = Истина;
				КонецЦикла;
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текст);
			КонецЦикла;
		КонецЦикла;
	
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВЫРАЗИТЬ(таб.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
		               |	таб.ДатаОкончания КАК ДатаОкончания,
		               |	таб.ДатаНачала КАК ДатаНачала,
		               |	таб.НомерСтроки,
		               |	1 КАК ДляСуммирования
		               |ПОМЕСТИТЬ Вт_оры
		               |ИЗ
		               |	&ТабОр КАК таб
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	Вт_оры.ОбъектРемонта КАК ОбъектРемонта,
		               |	Вт_оры.ДатаОкончания КАК ДатаОкончания,
		               |	Вт_оры.ДатаНачала КАК ДатаНачала
		               |ПОМЕСТИТЬ ВТ_ОРыУникальные
		               |ИЗ
		               |	Вт_оры КАК Вт_оры
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания,
		               |	ДатаНачала
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	Вт_оры.НомерСтроки,
		               |	Вт_оры.ДляСуммирования КАК ДляСуммирования,
		               |	ВТ_ОРыУникальные.ОбъектРемонта КАК ОбъектРемонта,
		               |	ВТ_ОРыУникальные.ДатаОкончания КАК ДатаОкончания,
		               |	ВТ_ОРыУникальные.ДатаНачала КАК ДатаНачала
		               |ИЗ
		               |	ВТ_ОРыУникальные КАК ВТ_ОРыУникальные
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_оры КАК Вт_оры
		               |		ПО ВТ_ОРыУникальные.ОбъектРемонта = Вт_оры.ОбъектРемонта
		               |			И ВТ_ОРыУникальные.ДатаОкончания = Вт_оры.ДатаОкончания
		               |			И ВТ_ОРыУникальные.ДатаНачала = Вт_оры.ДатаНачала
		               |ИТОГИ
		               |	СУММА(ДляСуммирования)
		               |ПО
		               |	ОбъектРемонта,
		               |	ДатаОкончания,
		               |	ДатаНачала";
					   
		Запрос.УстановитьПараметр("ТабОр", ОбъектыРемонта);
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() тогда
			Возврат ложь;
		КонецЕсли;
		
		ВыборкаПоОР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		отказ = Ложь;
		Пока ВыборкаПоОР.Следующий() цикл
			
			ВыборкаПоПериоду = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоПериоду.Следующий() цикл
				ВыборкаПоПериоду2 = ВыборкаПоПериоду.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоПериоду2.Следующий() цикл
				
					Если ВыборкаПоПериоду2.ДляСуммирования < 2 тогда Продолжить; КонецЕсли;
					
					Текст = НСтр("ru = 'Одинаковые строки: '");
					Первый = истина;
					ДетЗаписи = ВыборкаПоПериоду2.Выбрать();
					Пока ДетЗаписи.Следующий() цикл
						Текст = Текст + ?(Первый, строка(ДетЗаписи.НомерСтроки), ", " + Строка(строка(ДетЗаписи.НомерСтроки)));
						первый = ложь;
						отказ = Истина;
					КонецЦикла;
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текст);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;				   
	
	Если отказ тогда 
		текст = НСтр("ru = 'В табличной части документа содержаться некорректные данные, проведение документ отменено!'");
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текст);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
	ТаблицаОстановленногоОборудования = ПодготовитьТаблицуОстановленногоОборудования();
	ТаблицаЗапущенногоОборудования    = СформироватьТаблицуЗапущенногоОборудования();
	
	ДвиженияПоРегистру_торо_КоличествоПусковОР(РежимПроведения, Отказ, Заголовок);
		
	Движения.торо_ТекущееСостояниеОР.Записывать = Истина;
	Для Каждого СтрокаПроведения Из ТаблицаПроведения Цикл
		Движение = Движения.торо_ТекущееСостояниеОР.Добавить();
		Движение.Активность 		= Истина;
		Движение.ОбъектРемонта 		= СтрокаПроведения.ОбъектРемонта;
		Движение.Период 			= СтрокаПроведения.Период;
		Движение.ВидЭксплуатации 	= СтрокаПроведения.ВидЭксплуатации;
		Движение.Примечание			= СтрокаПроведения.Примечание;
		Движение.ПричинаПростоя		= СтрокаПроведения.ПричинаПростоя;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаПроведения.ОбъектРемонта,
	|	ТаблицаПроведения.Период,
	|	ТаблицаПроведения.ВидЭксплуатации,
	|	ТаблицаПроведения.ПричинаПростоя
	|ПОМЕСТИТЬ ТаблицаПроведения
	|ИЗ
	|	&ТаблицаПроведения КАК ТаблицаПроведения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВремяНахожденияВСостоянии.ОбъектРемонта,
	|	ТаблицаВремяНахожденияВСостоянии.Период,
	|	ТаблицаВремяНахожденияВСостоянии.ПричинаПростоя,
	|	ТаблицаВремяНахожденияВСостоянии.ДатаОкончания,
	|	ТаблицаВремяНахожденияВСостоянии.ВидЭксплуатации,
	|	ТаблицаВремяНахожденияВСостоянии.ВремяПростоя
	|ПОМЕСТИТЬ ТаблицаВремяНахожденияВСостоянии
	|ИЗ
	|	&ТаблицаВремяНахожденияВСостоянии КАК ТаблицаВремяНахожденияВСостоянии
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПроведения.ОбъектРемонта,
	|	ТаблицаПроведения.Период КАК Период,
	|	ТаблицаПроведения.ПричинаПростоя КАК ПричинаПростоя,
	|	ТаблицаПроведения.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ИЗ
	|	ТаблицаПроведения КАК ТаблицаПроведения
	|ГДЕ
	|	ТаблицаПроведения.ВидЭксплуатации.ТипЭксплуатации <> ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Эксплуатация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВремяНахожденияВСостоянии.ОбъектРемонта,
	|	ТаблицаВремяНахожденияВСостоянии.ДатаОкончания,
	|	ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка),
	|	ТаблицаВремяНахожденияВСостоянии.ВидЭксплуатации,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|ИЗ
	|	ТаблицаВремяНахожденияВСостоянии КАК ТаблицаВремяНахожденияВСостоянии
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроведения КАК ТаблицаПроведения
	|		ПО ТаблицаВремяНахожденияВСостоянии.ОбъектРемонта = ТаблицаПроведения.ОбъектРемонта
	|			И (ТаблицаВремяНахожденияВСостоянии.Период = ТаблицаПроведения.Период
	|			ИЛИ ТаблицаВремяНахожденияВСостоянии.ДатаОкончания = ТаблицаПроведения.Период)
	|ГДЕ
	|	ТаблицаВремяНахожденияВСостоянии.ВидЭксплуатации.ТипЭксплуатации <> ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Эксплуатация)";
	
	Запрос.УстановитьПараметр("ТаблицаПроведения",ТаблицаПроведения);
	Запрос.УстановитьПараметр("ТаблицаВремяНахожденияВСостоянии",ТаблицаВремяНахожденияВСостоянии);
	ТаблицаПроведенияДоп = Запрос.Выполнить().Выгрузить();
	
	Движения.торо_ВремяПростояОборудования.Записывать = Истина;
	Движения.торо_ВремяНахожденияВСостоянии.Записывать = Истина;
	Для Каждого Выборка Из ТаблицаВремяНахожденияВСостоянии Цикл
		
		Эксплуатация = Выборка.ВидЭксплуатации;
		
		Если ЗначениеЗаполнено(Эксплуатация) Тогда
			Если Эксплуатация.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
				
				Если Выборка.ВремяПростоя > 0 Тогда
					Движение = Движения.торо_ВремяПростояОборудования.Добавить();
					Движение.Активность 	= Истина;
					Движение.ОбъектРемонта 	= Выборка.ОбъектРемонта;
					Движение.ПричинаПростоя = Выборка.ПричинаПростоя;
					Движение.ДатаЗапуска 	= Выборка.ДатаОкончания;
					Движение.ВремяПростоя 	= Выборка.ВремяПростоя;
					Движение.Период 		= Выборка.Период; 
				КонецЕсли;
				
				
			КонецЕсли;
			
			Если Эксплуатация.ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Эксплуатация Тогда
				
				Если Выборка.ВремяПростоя > 0 Тогда
					Движение = Движения.торо_ВремяНахожденияВСостоянии.Добавить();
					Движение.ВремяНахожденияВСостоянии 	= Выборка.ВремяПростоя;
					Движение.ДатаИзмененияСостояния 	= Выборка.ДатаОкончания;
					Движение.ОбъектРемонта 				= Выборка.ОбъектРемонта;
					Движение.ВидЭксплуатации 			= Эксплуатация;
					Движение.Период						= Выборка.Период;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Движения.торо_ОстановленноеОборудование.Записывать = Истина;
	Движения.торо_ОборудованиеНаИспытаниях.Записывать = Истина;
	
	Для Каждого СтрокаДляПроведенияРН Из ТаблицаПроведенияДоп Цикл
		Эксплуатация = СтрокаДляПроведенияРН.ВидЭксплуатации;
		Если Не ЗначениеЗаполнено(Эксплуатация) Тогда
			Продолжить;
		КонецЕсли;
		Если Эксплуатация.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
			
			Движение = Движения.торо_ОстановленноеОборудование.Добавить();
			Движение.ВидДвижения 	= СтрокаДляПроведенияРН.ВидДвижения;
			Движение.Активность 	= Истина;
			Движение.Количество 	= 1;
			Движение.ОбъектРемонта 	= СтрокаДляПроведенияРН.ОбъектРемонта;
			Движение.Период 		= СтрокаДляПроведенияРН.Период;
			Движение.ПричинаПростоя = СтрокаДляПроведенияРН.ПричинаПростоя;
			
		ИначеЕсли Эксплуатация.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Испытания Тогда
			
			Движение = Движения.торо_ОборудованиеНаИспытаниях.Добавить();
			Движение.ВидДвижения 	= СтрокаДляПроведенияРН.ВидДвижения;
			Движение.Активность 	= Истина;
			Движение.Количество 	= 1;
			Движение.ОбъектРемонта 	= СтрокаДляПроведенияРН.ОбъектРемонта;
			Движение.Период 		= СтрокаДляПроведенияРН.Период;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуОстановленногоОборудования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОбъектыРемонта.ОбъектРемонта,
	|	ТаблицаОбъектыРемонта.ДатаНачала КАК Период,
	|	ТаблицаОбъектыРемонта.ПричинаПростоя КАК ПричинаПростоя,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ТаблицаОстанова
	|ИЗ
	|	&ТаблицаОбъектыРемонта КАК ТаблицаОбъектыРемонта
	|ГДЕ
	|	ТаблицаОбъектыРемонта.ДатаНачала > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстанова.ОбъектРемонта,
	|	ТаблицаОстанова.Период,
	|	ТаблицаОстанова.ПричинаПростоя,
	|	ТаблицаОстанова.Количество,
	|	ИСТИНА КАК Активность
	|ИЗ
	|	ТаблицаОстанова КАК ТаблицаОстанова";
	
	// @ММ\/
	Запрос.УстановитьПараметр("ТаблицаОбъектыРемонта", мТаблицаОбъектовРемонта);
	// @ММ/\
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДвиженияПоРегистру_торо_КоличествоПусковОР(РежимПроведения, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТаблицаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
				   |	ТаблицаОбъектыРемонта.ДатаНачала КАК ДатаНачала,
				   |	ТаблицаОбъектыРемонта.ДатаОкончания КАК ДатаОкончания,
				   |	ТаблицаОбъектыРемонта.ВидЭксплуатации КАК ВидЭксплуатации,
				   |	ТаблицаОбъектыРемонта.ВидПуска КАК ВидПуска,
				   |	ТаблицаОбъектыРемонта.ВидПускаНаПериод КАК ВидПускаНаПериод
				   |ПОМЕСТИТЬ ТаблицаОР
				   |ИЗ
				   |	&ТаблицаОбъектыРемонта КАК ТаблицаОбъектыРемонта
				   |ГДЕ ТаблицаОбъектыРемонта.ВидПуска<>ЗНАЧЕНИЕ(Справочник.торо_ВидыПусковОР.ПустаяСсылка)
				   | 		ИЛИ ТаблицаОбъектыРемонта.ВидПускаНаПериод<>ЗНАЧЕНИЕ(Справочник.торо_ВидыПусковОР.ПустаяСсылка) 
	   			   |;
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ТаблицаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
				   |	ТаблицаОбъектыРемонта.ДатаНачала КАК ДатаПуска,
				   |	ТаблицаОбъектыРемонта.ВидПускаНаПериод КАК ВидПуска
				   |ИЗ
				   |	ТаблицаОР КАК ТаблицаОбъектыРемонта
				   |ГДЕ ТаблицаОбъектыРемонта.ВидПускаНаПериод <>ЗНАЧЕНИЕ(Справочник.торо_ВидыПусковОР.ПустаяСсылка)
				   |
				   |ОБЪЕДИНИТЬ ВСЕ
				   |
				   |ВЫБРАТЬ
				   |	ТаблицаОбъектыРемонта.ОбъектРемонта,
				   |	ТаблицаОбъектыРемонта.ДатаОкончания,
				   |	ТаблицаОбъектыРемонта.ВидПуска
				   |ИЗ
				   |	ТаблицаОР КАК ТаблицаОбъектыРемонта
				   |ГДЕ ТаблицаОбъектыРемонта.ВидПуска <>ЗНАЧЕНИЕ(Справочник.торо_ВидыПусковОР.ПустаяСсылка)";

				   
	
	Запрос.УстановитьПараметр("ТаблицаОбъектыРемонта", мТаблицаОбъектовРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Движения.торо_КоличествоПусковОР.Записывать = Истина;
	Пока Выборка.Следующий() Цикл
		Движение = Движения.торо_КоличествоПусковОР.Добавить();
		Движение.ОбъектРемонта = Выборка.ОбъектРемонта;
		Движение.Период = Выборка.ДатаПуска;
		Движение.ВидПуска = Выборка.ВидПуска;
		Движение.Количество = 1;
	КонецЦикла;
	
	
КонецПроцедуры

Функция СформироватьТаблицуЗапущенногоОборудования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаОбъектыРемонта.ОбъектРемонта,
	|	ТаблицаОбъектыРемонта.ДатаОкончания КАК Период,
	|	ТаблицаОбъектыРемонта.ПричинаПростоя КАК ПричинаПростоя,
	|	1 КАК Количество
	|ПОМЕСТИТЬ ТаблицаЗапусков
	|ИЗ
	|	&ТаблицаОбъектыРемонта КАК ТаблицаОбъектыРемонта
	|ГДЕ
	|	ТаблицаОбъектыРемонта.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЗапусков.ОбъектРемонта,
	|	ТаблицаЗапусков.Период,
	|	ТаблицаЗапусков.ПричинаПростоя,
	|	ТаблицаЗапусков.Количество
	|ИЗ
	|	ТаблицаЗапусков КАК ТаблицаЗапусков";
	
	// @ММ\/
	Запрос.УстановитьПараметр("ТаблицаОбъектыРемонта", мТаблицаОбъектовРемонта);
	// @ММ/\
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет правильность заполнения строк табличной части "ОбъектыРемонта".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиОбъектыРемонта(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонта");
	
	ЗаполненОбщийВидЭксплуатации = (ВидЭксплуатации <> Справочники.торо_ВидыЭксплуатации.ПустаяСсылка());
	Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
		СтруктураОбязательныхПолей.Вставить("ДатаНачала");
		СтруктураОбязательныхПолей.Вставить("ДатаОкончания");
		СтруктураОбязательныхПолей.Вставить("ВидЭксплуатации");
		Если Не ЗаполненОбщийВидЭксплуатации Тогда
			СтруктураОбязательныхПолей.Вставить("ВидЭксплуатацииНаПериод");
		КонецЕсли;
	Иначе
		Если Не ЗаполненОбщийВидЭксплуатации Тогда
			СтруктураОбязательныхПолей.Вставить("ВидЭксплуатации");
		КонецЕсли;
		СтруктураОбязательныхПолей.Вставить("ДатаОкончания");
	КонецЕсли; 
	
	ПроверитьЗаполнениеВидовПусковПричинПростоя(Отказ, Заголовок);
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОбъектыРемонта", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Не Отказ Тогда 
			
		ТаблицаОбъектовРемонта = мТаблицаОбъектовРемонта.Скопировать(, "ОбъектРемонта");
		ТаблицаОбъектовРемонта.Свернуть("ОбъектРемонта");
		
	КонецЕсли;	
КонецПроцедуры

Процедура ПроверитьЗаполнениеВидовПусковПричинПростоя(Отказ, Заголовок)
	
	ВидДокументаЕстьНаПериод = (ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод);
	ВидПускаПростой = Перечисления.торо_ТипЭксплуатации.Простой;
	ФОУчетПусковОборудования = Константы.торо_УчетПусковОборудования.Получить();
	
	Для Каждого СтрокаТЧ Из ОбъектыРемонта Цикл
		
		Если ФОУчетПусковОборудования Тогда
			Если (ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатации) И СтрокаТЧ.ВидЭксплуатации.ОбязательныйВводВидаПуска
						ИЛИ ЗначениеЗаполнено(ВидЭксплуатации) И Не ВидДокументаЕстьНаПериод И ВидЭксплуатации.ОбязательныйВводВидаПуска И Не ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатации))
					И СтрокаТЧ.ВидЭксплуатации.ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Простой И Не ЗначениеЗаполнено(СтрокаТЧ.ВидПуска)
				ИЛИ (ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатацииНаПериод) И СтрокаТЧ.ВидЭксплуатацииНаПериод.ОбязательныйВводВидаПуска 
					И СтрокаТЧ.ВидЭксплуатацииНаПериод.ТипЭксплуатации <> Перечисления.торо_ТипЭксплуатации.Простой 
						ИЛИ ЗначениеЗаполнено(ВидЭксплуатации) И ВидДокументаЕстьНаПериод И ВидЭксплуатации.ОбязательныйВводВидаПуска И Не ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатацииНаПериод)) 
					И Не ЗначениеЗаполнено(СтрокаТЧ.ВидПускаНаПериод) 
				
				Тогда
				Отказ = Истина;
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке № %1 табличной части ""Объекты ремонта"" не заполнены обязательные для заполнения виды пуска!'"),СтрокаТЧ.НомерСтроки));
			КонецЕсли;
		КонецЕсли;
		
		Если ВидДокументаЕстьНаПериод Тогда
			ОбязательноКЗаполнениюПричинаПростоя = ?(ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатацииНаПериод), СтрокаТЧ.ВидЭксплуатацииНаПериод.ТипЭксплуатации, ВидЭксплуатации.ТипЭксплуатации) = ВидПускаПростой;
			ОбязательноКЗаполнениюПричинаПростоя = ОбязательноКЗаполнениюПричинаПростоя Или СтрокаТЧ.ВидЭксплуатации.ТипЭксплуатации = ВидПускаПростой;
		Иначе
			ОбязательноКЗаполнениюПричинаПростоя = ?(ЗначениеЗаполнено(СтрокаТЧ.ВидЭксплуатации), СтрокаТЧ.ВидЭксплуатации.ТипЭксплуатации, ВидЭксплуатации.ТипЭксплуатации) = ВидПускаПростой;
		КонецЕсли;
		Если ОбязательноКЗаполнениюПричинаПростоя И Не ЗначениеЗаполнено(СтрокаТЧ.ПричинаПростоя) Тогда
			
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке № %1 табличной части ""Объекты ремонта"" не заполнено обязательное для заполнения поле ""Причина простоя""!'"),СтрокаТЧ.НомерСтроки));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция	ОпределитьСостоянияОбъектов(ТЧОбъектыРемонта,СписокОР) 
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ 
		|	ВременнаяТаблица.ОбъектРемонта,
		|	ВременнаяТаблица.ДатаНачала,
		|	ВременнаяТаблица.ДатаОкончания,
		|	ВременнаяТаблица.ВидЭксплуатации,
		|	ВременнаяТаблица.ВидЭксплуатацииНаПериод
		|ПОМЕСТИТЬ ТаблицаОбъектовРемонта
		|ИЗ
		|	&ТаблицаОР КАК ВременнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	ВременнаяТаблица.ОбъектРемонта,
		|	ВременнаяТаблица.ДатаНачала,
		|	ВременнаяТаблица.ДатаОкончания
		|ПОМЕСТИТЬ ТаблицаОбъектовРемонтаДляЗаполнения
		|ИЗ
		|	ТаблицаОбъектовРемонта КАК ВременнаяТаблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
		|	ТаблицаОбъектыРемонта.ДатаНачала КАК Период,
		|	ТаблицаОбъектыРемонта.ВидЭксплуатацииНаПериод КАК ВидЭксплуатации
		|ПОМЕСТИТЬ ТаблицаПроведенияНачало
		|ИЗ
		|	ТаблицаОбъектовРемонта КАК ТаблицаОбъектыРемонта
		|ГДЕ
		|	ТаблицаОбъектыРемонта.ВидЭксплуатацииНаПериод <> ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОбъектыРемонта.ОбъектРемонта,
		|	ТаблицаОбъектыРемонта.ДатаОкончания КАК Дата,
		|	ТаблицаОбъектыРемонта.ВидЭксплуатации
		|ПОМЕСТИТЬ ТаблицаПредыдущиеЭксплуатации
		|ИЗ
		|	ТаблицаОбъектовРемонта КАК ТаблицаОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроведенияНачало КАК ТаблицаПроведенияНачало
		|		ПО ТаблицаОбъектыРемонта.ОбъектРемонта = ТаблицаПроведенияНачало.ОбъектРемонта
		|			И ТаблицаОбъектыРемонта.ДатаОкончания = ТаблицаПроведенияНачало.Период
		|ГДЕ
		|		ТаблицаПроведенияНачало.Период ЕСТЬ NULL
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОбъектыРемонта.ОбъектРемонта,
		|	ТаблицаОбъектыРемонта.Период,
		|	ТаблицаОбъектыРемонта.ВидЭксплуатации
		|ИЗ
		|	ТаблицаПроведенияНачало КАК ТаблицаОбъектыРемонта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаРегистрСведений.ОбъектРемонта,
		|	ТаблицаРегистрСведений.Период,
		|	ТаблицаРегистрСведений.ВидЭксплуатации
		|ИЗ
		|	ТаблицаОбъектовРемонта КАК ТаблицаОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК ТаблицаРегистрСведений
		|		ПО ТаблицаОбъектыРемонта.ОбъектРемонта = ТаблицаРегистрСведений.ОбъектРемонта				   
		|			И (ТаблицаРегистрСведений.Период < ТаблицаОбъектыРемонта.ДатаНачала ИЛИ ТаблицаРегистрСведений.Период > ТаблицаОбъектыРемонта.ДатаОкончания)
		|ГДЕ ТаблицаРегистрСведений.ОбъектРемонта В (&ОР)
		|	И ТаблицаРегистрСведений.Регистратор <> &Ссылка 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектовРемонта.ОбъектРемонта,
		|	ТаблицаОбъектовРемонта.ДатаНачала,
		|	ТаблицаОбъектовРемонта.ДатаОкончания,
		|	МАКСИМУМ(ТаблицаПредыдущиеЭксплуатации.Дата) КАК ДатаСреза1
		|ПОМЕСТИТЬ ТаблицаСреза1
		|ИЗ
		|	ТаблицаОбъектовРемонтаДляЗаполнения КАК ТаблицаОбъектовРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПредыдущиеЭксплуатации КАК ТаблицаПредыдущиеЭксплуатации
		|			ПО ТаблицаПредыдущиеЭксплуатации.Дата < ТаблицаОбъектовРемонта.ДатаНачала 
		|				И ТаблицаПредыдущиеЭксплуатации.ОбъектРемонта = ТаблицаОбъектовРемонта.ОбъектРемонта
		|СГРУППИРОВАТЬ ПО ТаблицаОбъектовРемонта.ОбъектРемонта,
		|	ТаблицаОбъектовРемонта.ДатаНачала,
		|	ТаблицаОбъектовРемонта.ДатаОкончания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектовРемонта.ОбъектРемонта,
		|	ТаблицаОбъектовРемонта.ДатаНачала,
		|	ТаблицаОбъектовРемонта.ДатаОкончания,
		|	ТаблицаОбъектовРемонта.ДатаСреза1,
		|	МАКСИМУМ(ТаблицаПредыдущиеЭксплуатации.Дата) КАК ДатаСреза2 
		|ПОМЕСТИТЬ ТаблицаСреза
		|ИЗ
		|	ТаблицаСреза1 КАК ТаблицаОбъектовРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПредыдущиеЭксплуатации КАК ТаблицаПредыдущиеЭксплуатации
		|			ПО ТаблицаПредыдущиеЭксплуатации.Дата < ТаблицаОбъектовРемонта.ДатаОкончания 
		|				И ТаблицаПредыдущиеЭксплуатации.ОбъектРемонта = ТаблицаОбъектовРемонта.ОбъектРемонта
		|СГРУППИРОВАТЬ ПО ТаблицаОбъектовРемонта.ОбъектРемонта,
		|	ТаблицаОбъектовРемонта.ДатаНачала,
		|	ТаблицаОбъектовРемонта.ДатаОкончания,
		|	ТаблицаОбъектовРемонта.ДатаСреза1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектовРемонта.ОбъектРемонта,
		|	ТаблицаОбъектовРемонта.ДатаНачала,
		|	ТаблицаОбъектовРемонта.ДатаОкончания,
		|	ТаблицаОбъектовРемонта.ДатаСреза1,
		|	ТаблицаОбъектовРемонта.ДатаСреза2,
		|    ТаблицаПредыдущиеЭксплуатации.ВидЭксплуатации КАК ВидЭксплуатации1 
		|ПОМЕСТИТЬ ТаблицаЭксплутации1
		|ИЗ
		|	ТаблицаСреза КАК ТаблицаОбъектовРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПредыдущиеЭксплуатации КАК ТаблицаПредыдущиеЭксплуатации
		|			ПО ТаблицаПредыдущиеЭксплуатации.Дата = ТаблицаОбъектовРемонта.ДатаСреза1 
		|				И ТаблицаПредыдущиеЭксплуатации.ОбъектРемонта = ТаблицаОбъектовРемонта.ОбъектРемонта 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаОбъектовРемонта.ОбъектРемонта,
		|	ТаблицаОбъектовРемонта.ДатаНачала,
		|	ТаблицаОбъектовРемонта.ДатаОкончания,
		|	ЕстьNULL(ТаблицаОбъектовРемонта.ДатаСреза1,ТаблицаОбъектовРемонта.ОбъектРемонта.ДатаВводаВЭксплуатацию) КАК ДатаСреза1,
		|	ЕстьNULL(ТаблицаОбъектовРемонта.ДатаСреза2,ТаблицаОбъектовРемонта.ОбъектРемонта.ДатаВводаВЭксплуатацию) КАК ДатаСреза2,
		|    ТаблицаОбъектовРемонта.ВидЭксплуатации1,
		|    ТаблицаПредыдущиеЭксплуатации.ВидЭксплуатации КАК ВидЭксплуатации2,
		|	ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка) КАК ПричинаПростоя
		|ИЗ
		|	ТаблицаЭксплутации1 КАК ТаблицаОбъектовРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПредыдущиеЭксплуатации КАК ТаблицаПредыдущиеЭксплуатации
		|			ПО ТаблицаПредыдущиеЭксплуатации.Дата = ТаблицаОбъектовРемонта.ДатаСреза2 
		|				И ТаблицаПредыдущиеЭксплуатации.ОбъектРемонта = ТаблицаОбъектовРемонта.ОбъектРемонта
		|";
		
		Запрос.УстановитьПараметр("ТаблицаОР",ТЧОбъектыРемонта);
		Запрос.УстановитьПараметр("ОР",СписокОР); 
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	Иначе
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВременнаяТаблица.ОбъектРемонта,
		               |	ВременнаяТаблица.ДатаНачала,
		               |	ВременнаяТаблица.ДатаОкончания,
		               |	ВременнаяТаблица.ВидЭксплуатации,
		               |	ВременнаяТаблица.ПричинаПростоя
		               |ПОМЕСТИТЬ ТаблицаОбъектовРемонта
		               |ИЗ
		               |	&ТаблицаОР КАК ВременнаяТаблица
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаРегистрСведений.ОбъектРемонта,
		               |	МАКСИМУМ(ТаблицаРегистрСведений.Период) КАК Период,
		               |	ТаблицаОбъектовРемонта.ДатаОкончания
		               |ПОМЕСТИТЬ ПериодыПредшествующихЭксплуатацийМакс
		               |ИЗ
		               |	ТаблицаОбъектовРемонта КАК ТаблицаОбъектовРемонта
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК ТаблицаРегистрСведений
		               |		ПО ТаблицаОбъектовРемонта.ОбъектРемонта = ТаблицаРегистрСведений.ОбъектРемонта
		               |			И (ТаблицаРегистрСведений.Период < ТаблицаОбъектовРемонта.ДатаОкончания)
		               |ГДЕ
		               |	ТаблицаРегистрСведений.Регистратор <> &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТаблицаРегистрСведений.ОбъектРемонта,
		               |	ТаблицаОбъектовРемонта.ДатаОкончания
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ПериодыПредшествующихЭксплуатацийМакс.ОбъектРемонта,
		               |	торо_ТекущееСостояниеОР.ВидЭксплуатации,
		               |	торо_ТекущееСостояниеОР.Период
		               |ИЗ
		               |	ПериодыПредшествующихЭксплуатацийМакс КАК ПериодыПредшествующихЭксплуатацийМакс
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
		               |		ПО ПериодыПредшествующихЭксплуатацийМакс.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
		               |			И ПериодыПредшествующихЭксплуатацийМакс.Период = торо_ТекущееСостояниеОР.Период";
		
		Запрос.УстановитьПараметр("ТаблицаОР",мТаблицаОбъектовРемонта);
		Запрос.УстановитьПараметр("ОР",мТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонта")); 
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		ТабРегистра = Запрос.Выполнить().Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТабРег.ОбъектРемонта,
		|	ТабРег.Период,
		|	ТабРег.ВидЭксплуатации
		|ПОМЕСТИТЬ ТабРегистра
		|ИЗ
		|	&ТабРег КАК ТабРег
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаОбъектовРемонта.ОбъектРемонта,
		|	ТаблицаОбъектовРемонта.ДатаОкончания КАК Период,
		|	ТаблицаОбъектовРемонта.ВидЭксплуатации,
		|	ТаблицаОбъектовРемонта.ПричинаПростоя КАК ПричинаПростоя
		|ПОМЕСТИТЬ ТабРегистраСведений
		|ИЗ
		|	ТаблицаОбъектовРемонта КАК ТаблицаОбъектовРемонта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабРегистра.ОбъектРемонта,
		|	ТабРегистра.Период,
		|	ТабРегистра.ВидЭксплуатации,
		|	торо_ОстановленноеОборудование.ПричинаПростоя
		|ИЗ
		|	ТабРегистра КАК ТабРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ОстановленноеОборудование КАК торо_ОстановленноеОборудование
		|		ПО ТабРегистра.ОбъектРемонта = торо_ОстановленноеОборудование.ОбъектРемонта
		|			И ТабРегистра.Период = торо_ОстановленноеОборудование.Период
		|			И торо_ОстановленноеОборудование.ВидДвижения = Значение(ВидДвиженияНакопления.Приход)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРегистра.Период КАК ДатаНачала,
		|	МИНИМУМ(ТабРегистра1.Период) КАК ДатаОкончания,
		|	ТабРегистра.ОбъектРемонта,
		|	ТабРегистра.ВидЭксплуатации КАК ВидЭксплуатации1,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаСреза1,
		|	ТабРегистра.Период КАК ДатаСреза2,
		|	ТабРегистра.ВидЭксплуатации КАК ВидЭксплуатации2,
		|	ТабРегистра.ПричинаПростоя
		|ИЗ
		|	ТабРегистраСведений КАК ТабРегистра
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабРегистраСведений КАК ТабРегистра1
		|		ПО ТабРегистра.ОбъектРемонта = ТабРегистра1.ОбъектРемонта
		|			И ТабРегистра.Период < ТабРегистра1.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабРегистра.Период,
		|	ТабРегистра.ОбъектРемонта,
		|	ТабРегистра.ВидЭксплуатации,
		|	ТабРегистра.ПричинаПростоя
		|";
		
		Запрос.УстановитьПараметр("ТабРег", ТабРегистра);
		
	КонецЕсли;
	
	Таб = Запрос.Выполнить().Выгрузить();
	
	Если МенеджерВТ <> Неопределено Тогда
		МенеджерВТ.Закрыть();
	КонецЕсли;
	
	Возврат Таб;
	
КонецФункции

Функция ПолучитьСостоянияПроблемаПроведения(пТаблицаПроведения)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПроведения.ОбъектРемонта,
	               |	ТаблицаПроведения.Период,
	               |	ТаблицаПроведения.ВидЭксплуатации
	               |ПОМЕСТИТЬ ТаблицаПроведения
	               |ИЗ
	               |	&ТаблицаПроведения КАК ТаблицаПроведения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПроведения.ОбъектРемонта,
	               |	ТаблицаПроведения.Период,
	               |	ТаблицаПроведения.ВидЭксплуатации КАК ВидЭксплуатацииНовый,
	               |	торо_ТекущееСостояниеОР.Регистратор,
	               |	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК ВидЭксплуатацииСтарый
	               |ИЗ
	               |	ТаблицаПроведения КАК ТаблицаПроведения
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	               |		ПО ТаблицаПроведения.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	               |			И ТаблицаПроведения.Период = торо_ТекущееСостояниеОР.Период
	               |			И (торо_ТекущееСостояниеОР.Регистратор <> &Ссылка)";
	
	Запрос.УстановитьПараметр("ТаблицаПроведения",пТаблицаПроведения);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьИтоговуюТаблицуПроведения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаОбъектыРемонта.ДатаНачала КАК ДатаНачала,
	               |	ТаблицаОбъектыРемонта.ДатаОкончания КАК ДатаОкончания,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатации КАК ВидЭксплуатации,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатацииНаПериод КАК ВидЭксплуатацииНаПериод,
	               |	ТаблицаОбъектыРемонта.Примечание КАК Примечание,
	               |	ТаблицаОбъектыРемонта.ПричинаПростоя
	               |ПОМЕСТИТЬ ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОбъектыРемонта КАК ТаблицаОбъектыРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаОбъектыРемонта.ДатаНачала КАК Период,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатацииНаПериод КАК ВидЭксплуатации,
	               |	ТаблицаОбъектыРемонта.Примечание КАК Примечание,
	               |	ТаблицаОбъектыРемонта.ПричинаПростоя
	               |ПОМЕСТИТЬ ТаблицаПроведенияНачало
	               |ИЗ
	               |	ТаблицаОР КАК ТаблицаОбъектыРемонта
	               |ГДЕ
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатацииНаПериод <> ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбъектыРемонта.ОбъектРемонта,
	               |	ТаблицаОбъектыРемонта.ДатаОкончания КАК Период,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатации,
	               |	ТаблицаОбъектыРемонта.Примечание КАК Примечание,
	               |	ТаблицаОбъектыРемонта.ПричинаПростоя
	               |ИЗ
	               |	ТаблицаОР КАК ТаблицаОбъектыРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПроведенияНачало КАК ТаблицаПроведенияНачало
	               |		ПО ТаблицаОбъектыРемонта.ОбъектРемонта = ТаблицаПроведенияНачало.ОбъектРемонта
	               |			И ТаблицаОбъектыРемонта.ДатаОкончания = ТаблицаПроведенияНачало.Период
	               |ГДЕ
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатации <> ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)
	               |	И ТаблицаПроведенияНачало.Период ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаОбъектыРемонта.ОбъектРемонта,
	               |	ТаблицаОбъектыРемонта.Период,
	               |	ТаблицаОбъектыРемонта.ВидЭксплуатации,
	               |	ТаблицаОбъектыРемонта.Примечание,
	               |	ТаблицаОбъектыРемонта.ПричинаПростоя
	               |ИЗ
	               |	ТаблицаПроведенияНачало КАК ТаблицаОбъектыРемонта";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектыРемонта", мТаблицаОбъектовРемонта);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПроверитьДатыВнутриДокумента(Отказ, пОбъектыРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ОбъектРемонта,
	               |	ТаблицаОР.ПричинаПростоя,
	               |	ТаблицаОР.Период,
	               |	ТаблицаОР.ВремяПростоя,
	               |	ТаблицаОР.ДатаОкончания,
	               |	ТаблицаОР.ДатаНачала
	               |ПОМЕСТИТЬ ПроверяемаяТаблица
	               |ИЗ
	               |	&ПроверяемаяТаблица КАК ТаблицаОР
				   |ГДЕ
				   |	ТаблицаОР.ДатаНачала > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроверяемаяТаблица.ОбъектРемонта КАК ОбъектРемонта,
	               |	ПроверяемаяТаблица.ДатаНачала КАК ДатаНачала,
	               |	КОЛИЧЕСТВО(ПроверяемаяТаблица.ВремяПростоя) КАК ВремяПростоя
	               |ИЗ
	               |	ПроверяемаяТаблица КАК ПроверяемаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроверяемаяТаблица КАК ПроверТаблица
	               |		ПО ПроверяемаяТаблица.ОбъектРемонта = ПроверТаблица.ОбъектРемонта
				   |			И ПроверяемаяТаблица.Период < ПроверТаблица.ДатаОкончания И ПроверяемаяТаблица.ДатаОкончания > ПроверТаблица.Период
				   |				И (ПроверяемаяТаблица.Период <> ПроверТаблица.Период ИЛИ ПроверяемаяТаблица.ДатаОкончания <> ПроверТаблица.ДатаОкончания)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПроверяемаяТаблица.ОбъектРемонта,
	               |	ПроверяемаяТаблица.ДатаНачала
	               |
	               |ИМЕЮЩИЕ
	               |	КОЛИЧЕСТВО(ПроверяемаяТаблица.ВремяПростоя) > 1";
				   			  
	
	Запрос.УстановитьПараметр("ПроверяемаяТаблица", пОбъектыРемонта);
	 
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции


Процедура СравнитьДатыСДатойВводаВЭксплуатацию(Отказ,пОбъектыРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ОбъектРемонта,
	               |	ТаблицаОР.ДатаНачала,
	               |	ТаблицаОР.ДатаОкончания
	               |ПОМЕСТИТЬ ПроверяемаяТаблица
	               |ИЗ
	               |	&ПроверяемаяТаблица КАК ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроверяемаяТаблица.ОбъектРемонта,
	               |	ПроверяемаяТаблица.ДатаОкончания,
	               |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию
	               |ИЗ
	               |	ПроверяемаяТаблица КАК ПроверяемаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ПроверяемаяТаблица.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
	               |ГДЕ
	               |	ПроверяемаяТаблица.ДатаОкончания < торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПроверяемаяТаблица.ОбъектРемонта,
	               |	ПроверяемаяТаблица.ДатаНачала,
	               |	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию
	               |ИЗ
	               |	ПроверяемаяТаблица КАК ПроверяемаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ПроверяемаяТаблица.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
	               |ГДЕ
	               |	ПроверяемаяТаблица.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ПроверяемаяТаблица.ДатаНачала < торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию";
	
	Запрос.УстановитьПараметр("ПроверяемаяТаблица",пОбъектыРемонта);
	НеверныеДаты = Запрос.Выполнить().Выгрузить();
	Если НеверныеДаты.Количество() > 0 Тогда
		Отказ = Истина;
		Для Каждого Строка Из НеверныеДаты Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для объекта ремонта %1 невозможно изменить состояние на дату %2 так как она меньше даты ввода в эксплуатацию %3!'"),
				Строка.ОбъектРемонта,Строка.ДатаОкончания,Строка.ДатаВводаВЭксплуатацию);
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

Функция ПроверитьДаты(Отказ,пОбъектыРемонта)
	Запрос= Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ОбъектРемонта,
	               |	ТаблицаОР.ПричинаПростоя,
	               |	ТаблицаОР.Период,
	               |	ТаблицаОР.ВремяПростоя,
	               |	ТаблицаОР.ДатаОкончания,
	               |	ТаблицаОР.ДатаНачала
	               |ПОМЕСТИТЬ ПроверяемаяТаблица
	               |ИЗ
	               |	&ПроверяемаяТаблица КАК ТаблицаОР
				   |ГДЕ
				   |	ТаблицаОР.ДатаНачала > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ИЛИ &СостояниеНаДату
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПроверяемаяТаблица.ОбъектРемонта,
	               |	ПроверяемаяТаблица.ДатаНачала,
				   |	ПроверяемаяТаблица.ДатаОкончания
	               |ИЗ
	               |	ПроверяемаяТаблица КАК ПроверяемаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ВремяНахожденияВСостоянии КАК торо_ВремяНахожденияВСостоянии
	               |		ПО ПроверяемаяТаблица.ОбъектРемонта = торо_ВремяНахожденияВСостоянии.ОбъектРемонта
				   |			И (ПроверяемаяТаблица.Период < торо_ВремяНахожденияВСостоянии.ДатаИзмененияСостояния
				   |			И ПроверяемаяТаблица.ДатаОкончания > торо_ВремяНахожденияВСостоянии.Период)
				   |			И торо_ВремяНахожденияВСостоянии.Регистратор <> &Ссылка";
	
	Запрос.УстановитьПараметр("ПроверяемаяТаблица", пОбъектыРемонта);
	Запрос.УстановитьПараметр("СостояниеНаДату", ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации); 
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Проверяет корректность дат: в открытые периоды можно вносить данные, 
// но только периодами ( а не одной датой), причем "вторым" может быть только 
// состояние с типом эксплуатации "Эксплуатация".
//
Функция ПроверитьДатыНезакрытыеИнтервалы(Отказ,пОбъектыРемонта, пТабПроведения)
	Запрос= Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ОбъектРемонта,
	               |	ТаблицаОР.ПричинаПростоя,
	               |	ТаблицаОР.Период,
	               |	ТаблицаОР.ВремяПростоя,
	               |	ТаблицаОР.ДатаОкончания,
	               |	ТаблицаОР.ДатаНачала
	               |ПОМЕСТИТЬ ПроверяемаяТаблица0
	               |ИЗ
	               |	&ПроверяемаяТаблица КАК ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабПроведения.ОбъектРемонта,
	               |	ТабПроведения.Период
	               |ПОМЕСТИТЬ ТабПроведения
	               |ИЗ
	               |	&ТабПроведения КАК ТабПроведения
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПроверяемаяТаблица.ОбъектРемонта,
	               |	ПроверяемаяТаблица.ПричинаПростоя,
	               |	ПроверяемаяТаблица.Период,
	               |	ПроверяемаяТаблица.ВремяПростоя,
	               |	ПроверяемаяТаблица.ДатаОкончания,
	               |	ПроверяемаяТаблица.ДатаНачала
	               |ПОМЕСТИТЬ ПроверяемаяТаблица
	               |ИЗ
	               |	ПроверяемаяТаблица0 КАК ПроверяемаяТаблица
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПроверяемаяТаблица0 КАК ПроверяемаяТаблица2
	               |		ПО ПроверяемаяТаблица.ДатаОкончания = ПроверяемаяТаблица2.Период
	               |ГДЕ
	               |	ПроверяемаяТаблица2.Период ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПроверяемаяТаблица.ОбъектРемонта,
	               |	ПроверяемаяТаблица.ДатаОкончания
	               |ПОМЕСТИТЬ НовыеИнтервалыВОткрытыхИнтервалах
	               |ИЗ
	               |	ПроверяемаяТаблица КАК ПроверяемаяТаблица
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ВремяНахожденияВСостоянии КАК торо_ВремяНахожденияВСостоянии
	               |		ПО ПроверяемаяТаблица.ОбъектРемонта = торо_ВремяНахожденияВСостоянии.ОбъектРемонта
	               |			И ПроверяемаяТаблица.Период < торо_ВремяНахожденияВСостоянии.Период
	               |			И (торо_ВремяНахожденияВСостоянии.Регистратор <> &Ссылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТабПроведения.ОбъектРемонта,
	               |	ТабПроведения.Период
	               |ИЗ
	               |	НовыеИнтервалыВОткрытыхИнтервалах КАК НовыеИнтервалыВОткрытыхИнтервалах
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПроведения КАК ТабПроведения
	               |		ПО НовыеИнтервалыВОткрытыхИнтервалах.ОбъектРемонта = ТабПроведения.ОбъектРемонта
	               |			И НовыеИнтервалыВОткрытыхИнтервалах.ДатаОкончания = ТабПроведения.Период";
				   
	Запрос.УстановитьПараметр("ПроверяемаяТаблица", пОбъектыРемонта);
	Запрос.УстановитьПараметр("ТабПроведения", пТабПроведения);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ПолучитьТаблицуОбъектовРемонта()
	
	мТаблицаОбъектовРемонта.Очистить();	
	
	Для каждого ТекСтрока из ОбъектыРемонта Цикл
		Если НЕ ТекСтрока.ИзменятьСостояниеПодчиненныхОР Тогда
			НС = мТаблицаОбъектовРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НС , ТекСтрока);
			
		Иначе
			
			СтруктураПоиска = Новый Структура();
			
			СтруктураПоиска.Вставить("ОбъектРемонта",			ТекСтрока.ОбъектРемонта);
			СтруктураПоиска.Вставить("ДатаНачала",				ТекСтрока.ДатаНачала);
			СтруктураПоиска.Вставить("ДатаОкончания",			ТекСтрока.ДатаОкончания);
			СтруктураПоиска.Вставить("ПричинаПростоя",			ТекСтрока.ПричинаПростоя);
			СтруктураПоиска.Вставить("ВидЭксплуатации",			ТекСтрока.ВидЭксплуатации);
			СтруктураПоиска.Вставить("ВидЭксплуатацииНаПериод",	ТекСтрока.ВидЭксплуатацииНаПериод);
			СтруктураПоиска.Вставить("ВидПуска",				ТекСтрока.ВидПуска);
			СтруктураПоиска.Вставить("ВидПускаНаПериод",		ТекСтрока.ВидПускаНаПериод);
						
			Если мТаблицаОбъектовРемонта.НайтиСтроки(СтруктураПоиска).Количество() Тогда
				Продолжить;
			КонецЕсли;	
			
			НС = мТаблицаОбъектовРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НС , ТекСтрока);
			
			ПолучитьПодчиненныеОбъекты(ТекСтрока.ОбъектРемонта, ТекСтрока.Иерархия, Истина);
			
			Для Каждого ЭлементСписка Из СписокПодчиненныхОбъектов Цикл
				
				    СтруктураПоиска = Новый Структура();
					
					СтруктураПоиска.Вставить("ОбъектРемонта",			ЭлементСписка.Значение);
					СтруктураПоиска.Вставить("ДатаНачала",				ТекСтрока.ДатаНачала);
					СтруктураПоиска.Вставить("ДатаОкончания",			ТекСтрока.ДатаОкончания);
					СтруктураПоиска.Вставить("ПричинаПростоя",			ТекСтрока.ПричинаПростоя);
					СтруктураПоиска.Вставить("ВидЭксплуатации",			ТекСтрока.ВидЭксплуатации);
					СтруктураПоиска.Вставить("ВидЭксплуатацииНаПериод",	ТекСтрока.ВидЭксплуатацииНаПериод);
					СтруктураПоиска.Вставить("ВидПуска",				ТекСтрока.ВидПуска);
					СтруктураПоиска.Вставить("ВидПускаНаПериод",		ТекСтрока.ВидПускаНаПериод);
					
					Если мТаблицаОбъектовРемонта.НайтиСтроки(СтруктураПоиска).Количество() Тогда
						Продолжить;
					КонецЕсли;	
					
					НС = мТаблицаОбъектовРемонта.Добавить();
					
					ЗаполнитьЗначенияСвойств(НС , ТекСтрока);
					НС.ОбъектРемонта		 	= ЭлементСписка.Значение;
					
			КонецЦикла;	
 				
		КонецЕсли;
	КонецЦикла;
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации тогда
		Для каждого текСтрока из мТаблицаОбъектовРемонта цикл
			ТекСтрока.ВидЭксплуатацииНаПериод = Справочники.торо_ВидыЭксплуатации.ПустаяСсылка(); 
			ТекСтрока.ДатаНачала = '00010101000000'; 
		КонецЦикла;
	КонецЕсли;
	
	// Используем вид эксплуатации документа если не заполнены значения в ТЧ.
	ЗаполнитьВидыЭксплуатацииВТаблицеДляОбработки();
	
КонецПроцедуры

Процедура ПолучитьПодчиненныеОбъекты(ОбъектРемонта, Иерархия, ПолучатьТаблицуВходящих = Ложь)
	
	Если ПолучатьТаблицуВходящих Тогда
		
		ТаблицаИерархии.Очистить();
		
		СписокПодчиненныхОбъектов.Очистить();
		
		Запрос = Новый Запрос;
		
		Если Иерархия.ИзменяетсяДокументами Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасположениеОРВСтруктуреИерархии.ОбъектИерархии,
			|	РасположениеОРВСтруктуреИерархии.РодительИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&Дата, СтруктураИерархии = &Иерархия) КАК РасположениеОРВСтруктуреИерархии
			|ГДЕ
			|	НЕ РасположениеОРВСтруктуреИерархии.Удален";
			
			Запрос.УстановитьПараметр("Дата", Дата);
			Запрос.УстановитьПараметр("Иерархия", Иерархия);
			
		Иначе
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
			|	торо_ИерархическиеСтруктурыОР.РодительИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &Иерархия";

			Запрос.УстановитьПараметр("Иерархия", Иерархия);

		КонецЕсли;
		
		ТаблицаИерархии = Запрос.Выполнить().Выгрузить();
	КонецЕсли;	
	
	МассивСтрокОР = ТаблицаИерархии.НайтиСтроки(Новый Структура("РодительИерархии", ОбъектРемонта));
	
	Если МассивСтрокОР.Количество() Тогда
		
		Для Каждого ЭлементМассиваОР Из МассивСтрокОР Цикл
			ПолучитьПодчиненныеОбъекты(ЭлементМассиваОР.ОбъектИерархии, Иерархия);
			Если ТипЗнч(ЭлементМассиваОР.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				СписокПодчиненныхОбъектов.Добавить(ЭлементМассиваОР.ОбъектИерархии);
			КонецЕсли;
		КонецЦикла;	
			
	КонецЕсли;
	
КонецПроцедуры

Функция ОпределитьВремяНахожденияВСостоянии()
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Календари"));
	Если мПредыдущиеЭксплуатации = Неопределено Тогда
		мПредыдущиеЭксплуатации = ОпределитьСостоянияОбъектов(мТаблицаОбъектовРемонта,мТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонта"));
	КонецЕсли;
	Если мПредыдущиеЭксплуатации.Колонки.Найти("ПлановыйГрафикРаботы") = Неопределено Тогда
		мПредыдущиеЭксплуатации.Колонки.Добавить("ПлановыйГрафикРаботы", Новый ОписаниеТипов(МассивТипов));
	КонецЕсли;
	
	Для Каждого СтрокаТО Из мПредыдущиеЭксплуатации Цикл
		
		СтрокаТО.ПлановыйГрафикРаботы = СтрокаТО.ОбъектРемонта.ПлановыйГрафикРаботы;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОбъектовРемонта.ОбъектРемонта,
	               |	ТаблицаОбъектовРемонта.ДатаНачала,
	               |	ТаблицаОбъектовРемонта.ДатаОкончания,
	               |	ТаблицаОбъектовРемонта.ДатаСреза1,
	               |	ТаблицаОбъектовРемонта.ДатаСреза2,
	               |	ТаблицаОбъектовРемонта.ВидЭксплуатации1,
	               |	ТаблицаОбъектовРемонта.ВидЭксплуатации2,
	               |	ТаблицаОбъектовРемонта.ПлановыйГрафикРаботы,
	               |	ТаблицаОбъектовРемонта.ПричинаПростоя
	               |ПОМЕСТИТЬ ИсходныеДанные
	               |ИЗ
	               |	&мПредыдущиеЭксплуатации КАК ТаблицаОбъектовРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОбъектовРемонта.ОбъектРемонта,
	               |	ТаблицаОбъектовРемонта.ДатаНачала КАК ДатаОкончания,
	               |	ТаблицаОбъектовРемонта.ДатаСреза1 КАК ДатаНачала,
	               |	ТаблицаОбъектовРемонта.ВидЭксплуатации1 КАК ВидЭксплуатации,
	               |	ТаблицаОбъектовРемонта.ПлановыйГрафикРаботы,
	               |	ТаблицаОбъектовРемонта.ПричинаПростоя
	               |ИЗ
	               |	ИсходныеДанные КАК ТаблицаОбъектовРемонта
	               |ГДЕ
	               |	ТаблицаОбъектовРемонта.ДатаНачала > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |	И ТаблицаОбъектовРемонта.ДатаСреза1 > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаОбъектовРемонта.ОбъектРемонта,
	               |	ТаблицаОбъектовРемонта.ДатаОкончания,
	               |	ТаблицаОбъектовРемонта.ДатаСреза2,
	               |	ТаблицаОбъектовРемонта.ВидЭксплуатации2,
	               |	ТаблицаОбъектовРемонта.ПлановыйГрафикРаботы,
	               |	ТаблицаОбъектовРемонта.ПричинаПростоя
	               |ИЗ
	               |	ИсходныеДанные КАК ТаблицаОбъектовРемонта
	               |ГДЕ
	               |	ТаблицаОбъектовРемонта.ДатаОкончания > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |	И ТаблицаОбъектовРемонта.ДатаСреза2 > ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
				   
				   
	Запрос.УстановитьПараметр("мПредыдущиеЭксплуатации",мПредыдущиеЭксплуатации);
	ВремяНахожденияВСостоянии = Запрос.Выполнить().Выгрузить();
	
	// применить график
	ВременнаяТаблица = СоздатьТаблицуЧасовСохранениеЭксплуатации(ВремяНахожденияВСостоянии);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаОбъектыРемонта.ДатаНачала КАК ДатаНачала,
	               |	ТаблицаОбъектыРемонта.ДатаОкончания КАК ДатаОкончания,
	               |	ТаблицаОбъектыРемонта.ПричинаПростоя
	               |ПОМЕСТИТЬ ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОбъектыРемонта КАК ТаблицаОбъектыРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	ДатаНачала,
	               |	ДатаОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВременнаяТаблица.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВременнаяТаблица.Период КАК Период,
	               |	ВременнаяТаблица.ВремяПростоя,
	               |	ВременнаяТаблица.ДатаОкончания,
	               |	ВременнаяТаблица.ВидЭксплуатации,
	               |	ВременнаяТаблица.ПричинаПростоя
	               |ПОМЕСТИТЬ ТаблицаВременПростоя
	               |ИЗ
	               |	&ВременнаяТаблица КАК ВременнаяТаблица
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаВременПростоя.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаВременПростоя.Период КАК Период,
	               |	ТаблицаВременПростоя.ВремяПростоя,
	               |	ТаблицаВременПростоя.ДатаОкончания,
	               |	ТаблицаВременПростоя.ВидЭксплуатации,
	               |	ТаблицаОР.ДатаОкончания КАК ДатаОкончания1,
	               |	ВЫБОР
	               |		КОГДА ТаблицаВременПростоя.ПричинаПростоя <> ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка)
	               |			ТОГДА ТаблицаВременПростоя.ПричинаПростоя
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ТаблицаВременПростоя.Период = ТаблицаОР.ДатаНачала
	               |					ТОГДА ТаблицаОР.ПричинаПростоя
	               |				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка)
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ПричинаПростоя,
	               |	ТаблицаОР.ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаВременПростояСДатамиИсходногоИнтервала
	               |ИЗ
	               |	ТаблицаВременПростоя КАК ТаблицаВременПростоя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	               |		ПО ТаблицаВременПростоя.ОбъектРемонта = ТаблицаОР.ОбъектРемонта
	               |			И ТаблицаВременПростоя.Период >= ТаблицаОР.ДатаНачала
	               |			И ТаблицаВременПростоя.Период < ТаблицаОР.ДатаОкончания
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаВременПростоя.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаВременПростоя.Период КАК Период,
	               |	ТаблицаВременПростоя.ВремяПростоя,
	               |	ТаблицаВременПростоя.ДатаОкончания,
	               |	ТаблицаВременПростоя.ВидЭксплуатации,
	               |	ТаблицаВременПростоя.ДатаОкончания1 КАК ДатаОкончания1,
	               |	ВЫБОР
	               |		КОГДА ТаблицаВременПростоя.ПричинаПростоя = ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка)
	               |			ТОГДА ТаблицаОР.ПричинаПростоя
	               |		ИНАЧЕ ТаблицаВременПростоя.ПричинаПростоя
	               |	КОНЕЦ КАК ПричинаПростоя,
	               |	ТаблицаВременПростоя.ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаВременПростояСДатамиИсходногоИнтервалаДополненная
	               |ИЗ
	               |	ТаблицаВременПростояСДатамиИсходногоИнтервала КАК ТаблицаВременПростоя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	               |		ПО ТаблицаВременПростоя.ОбъектРемонта = ТаблицаОР.ОбъектРемонта
	               |			И ТаблицаВременПростоя.Период = ТаблицаОР.ДатаОкончания
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Период,
	               |	ДатаОкончания1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаВременПростоя.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаВременПростоя.Период КАК Период,
	               |	ТаблицаВременПростоя.ВремяПростоя,
	               |	ТаблицаВременПростоя.ДатаОкончания КАК ДатаОкончания,
	               |	ТаблицаВременПростоя.ВидЭксплуатации,
	               |	МИНИМУМ(ТаблицаВременПростоя.ДатаОкончания1) КАК ДатаОкончаниямин
	               |ПОМЕСТИТЬ ДатаОкончанияМинимальногоИнтервала
	               |ИЗ
	               |	ТаблицаВременПростояСДатамиИсходногоИнтервалаДополненная КАК ТаблицаВременПростоя
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаВременПростоя.ОбъектРемонта,
	               |	ТаблицаВременПростоя.Период,
	               |	ТаблицаВременПростоя.ВремяПростоя,
	               |	ТаблицаВременПростоя.ДатаОкончания,
	               |	ТаблицаВременПростоя.ВидЭксплуатации
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Период,
	               |	ДатаОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ДатаОкончанияМинимальногоИнтервала.ОбъектРемонта КАК ОбъектРемонта,
	               |	ДатаОкончанияМинимальногоИнтервала.Период КАК Период,
	               |	ДатаОкончанияМинимальногоИнтервала.ВремяПростоя,
	               |	ДатаОкончанияМинимальногоИнтервала.ДатаОкончания,
	               |	ДатаОкончанияМинимальногоИнтервала.ВидЭксплуатации,
	               |	ТаблицаВременПростояСДатамиИсходногоИнтервала.ДатаНачала,
	               |	ТаблицаВременПростояСДатамиИсходногоИнтервала.ПричинаПростоя
	               |ПОМЕСТИТЬ ВТ_ДанныеПоОР
	               |ИЗ
	               |	ДатаОкончанияМинимальногоИнтервала КАК ДатаОкончанияМинимальногоИнтервала
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВременПростояСДатамиИсходногоИнтервалаДополненная КАК ТаблицаВременПростояСДатамиИсходногоИнтервала
	               |		ПО ДатаОкончанияМинимальногоИнтервала.ОбъектРемонта = ТаблицаВременПростояСДатамиИсходногоИнтервала.ОбъектРемонта
	               |			И ДатаОкончанияМинимальногоИнтервала.Период = ТаблицаВременПростояСДатамиИсходногоИнтервала.Период
	               |			И ДатаОкончанияМинимальногоИнтервала.ДатаОкончаниямин = ТаблицаВременПростояСДатамиИсходногоИнтервала.ДатаОкончания1
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеПоОР.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ДанныеПоОР.Период КАК ПериодОР,
	               |	МАКСИМУМ(торо_ТекущееСостояниеОР.Период) КАК Период
	               |ПОМЕСТИТЬ ВТ_СрезДат
	               |ИЗ
	               |	ВТ_ДанныеПоОР КАК ВТ_ДанныеПоОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	               |		ПО ВТ_ДанныеПоОР.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	               |			И ВТ_ДанныеПоОР.Период >= торо_ТекущееСостояниеОР.Период
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_ДанныеПоОР.ОбъектРемонта,
	               |	ВТ_ДанныеПоОР.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_СрезДат.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_СрезДат.ПериодОР КАК ПериодОР,
	               |	торо_ТекущееСостояниеОР.ПричинаПростоя
	               |ПОМЕСТИТЬ ВТ_СрезПричинПоОрам
	               |ИЗ
	               |	ВТ_СрезДат КАК ВТ_СрезДат
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	               |		ПО ВТ_СрезДат.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	               |			И ВТ_СрезДат.Период = торо_ТекущееСостояниеОР.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	ПериодОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ДанныеПоОР.ОбъектРемонта,
	               |	ВТ_ДанныеПоОР.Период,
	               |	ВТ_ДанныеПоОР.ВремяПростоя,
	               |	ВТ_ДанныеПоОР.ДатаОкончания,
	               |	ВТ_ДанныеПоОР.ВидЭксплуатации,
	               |	ВТ_ДанныеПоОР.ДатаНачала,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДанныеПоОР.ПричинаПростоя <> ЗНАЧЕНИЕ(Справочник.торо_ПричиныПростояОборудования.ПустаяСсылка)
	               |				ИЛИ ВТ_СрезПричинПоОрам.ПричинаПростоя ЕСТЬ NULL 
	               |			ТОГДА ВТ_ДанныеПоОР.ПричинаПростоя
	               |		ИНАЧЕ ВТ_СрезПричинПоОрам.ПричинаПростоя
	               |	КОНЕЦ КАК ПричинаПростоя
	               |ИЗ
	               |	ВТ_ДанныеПоОР КАК ВТ_ДанныеПоОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрезПричинПоОрам КАК ВТ_СрезПричинПоОрам
	               |		ПО ВТ_ДанныеПоОР.ОбъектРемонта = ВТ_СрезПричинПоОрам.ОбъектРемонта
	               |			И ВТ_ДанныеПоОР.Период = ВТ_СрезПричинПоОрам.ПериодОР";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектыРемонта",мТаблицаОбъектовРемонта);
	Запрос.УстановитьПараметр("ВременнаяТаблица",ВременнаяТаблица);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция СоздатьТаблицуЧасовСохранениеЭксплуатации(ТаблицаПериодовПростоя)
	
	Если ТаблицаПериодовПростоя.Количество() Тогда
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		МассивГрафиков = ТаблицаПериодовПростоя.ВыгрузитьКолонку("ПлановыйГрафикРаботы");
		
		ТаблицаПериодовПростоя.Сортировать("ДатаНачала Возр");
		
		МинДата = ТаблицаПериодовПростоя[0].ДатаНачала;
		
		ТаблицаПериодовПростоя.Сортировать("ДатаОкончания Убыв");
		
		МаксДата = ТаблицаПериодовПростоя[0].ДатаОкончания;
		
		КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, МинДата, МаксДата);
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаПериодовПростоя.ОбъектРемонта,
		|	ТаблицаПериодовПростоя.ДатаНачала,
		|	ТаблицаПериодовПростоя.ДатаОкончания,
		|	ТаблицаПериодовПростоя.ПричинаПростоя,
		|	ТаблицаПериодовПростоя.ПлановыйГрафикРаботы,
		|	ТаблицаПериодовПростоя.ВидЭксплуатации
		|ПОМЕСТИТЬ ТаблицаПериодовПростоя
		|ИЗ
		|	&ТаблицаПериодовПростоя КАК ТаблицаПериодовПростоя
		|;
		|
		|ВЫБРАТЬ 
		|	ВТРасписанияРаботы.ГрафикРаботы,
		|	ВТРасписанияРаботы.ДатаГрафика,
		|	ВТРасписанияРаботы.ВремяНачала,
		|	ВЫБОР
		|		КОГДА МИНУТА(ВТРасписанияРаботы.ВремяОкончания) = 59
		|			ТОГДА ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ВремяОкончания, МИНУТА, 1)
		|		ИНАЧЕ ВТРасписанияРаботы.ВремяОкончания
		|	КОНЕЦ КАК ВремяОкончания
		|ПОМЕСТИТЬ ВТРасписанияРаботыИзм
		|ИЗ
		|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
		|;
		|
		|ВЫБРАТЬ
		|	ВТРасписанияРаботыИзм.ГрафикРаботы,
		|	ВТРасписанияРаботыИзм.ДатаГрафика,
		|	РАЗНОСТЬДАТ(ВТРасписанияРаботыИзм.ВремяНачала, ВТРасписанияРаботыИзм.ВремяОкончания, Секунда) КАК Секунды, 
		|	РАЗНОСТЬДАТ(ВТРасписанияРаботыИзм.ВремяНачала, ВТРасписанияРаботыИзм.ВремяОкончания, Час) КАК Часы
		|ПОМЕСТИТЬ ВремТабРаботы
		|ИЗ 
		|	ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПериодовПростоя.ОбъектРемонта,
		|	СУММА(ГрафикиРаботыПоСменам.Секунды) КАК Секунды,
		|	ТаблицаПериодовПростоя.ДатаНачала,
		|	СУММА(ГрафикиРаботыПоСменам.Часы) КАК Часы,
		|	ТаблицаПериодовПростоя.ДатаОкончания,
		|	ТаблицаПериодовПростоя.ПричинаПростоя,
		|	ТаблицаПериодовПростоя.ВидЭксплуатации
		|ПОМЕСТИТЬ ПростойОборудованияПолныеДни
		|ИЗ
		|	ТаблицаПериодовПростоя КАК ТаблицаПериодовПростоя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТабРаботы КАК ГрафикиРаботыПоСменам
		|		ПО ТаблицаПериодовПростоя.ПлановыйГрафикРаботы = ГрафикиРаботыПоСменам.ГрафикРаботы
		|			И (КОНЕЦПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ) < ГрафикиРаботыПоСменам.ДатаГрафика)
		|			И (НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ) > ГрафикиРаботыПоСменам.ДатаГрафика)
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаПериодовПростоя.ОбъектРемонта,
		|	ТаблицаПериодовПростоя.ДатаНачала,
		|	ТаблицаПериодовПростоя.ДатаОкончания,
		|	ТаблицаПериодовПростоя.ПричинаПростоя,
		|	ТаблицаПериодовПростоя.ВидЭксплуатации
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаПериодовПростоя.ОбъектРемонта,
		|	ТаблицаПериодовПростоя.ДатаНачала,
		|	ТаблицаПериодовПростоя.ДатаОкончания,
		|	ТаблицаПериодовПростоя.ПричинаПростоя,
		|	ТаблицаПериодовПростоя.ВидЭксплуатации,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ)
		|				И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ), ТаблицаПериодовПростоя.ДатаНачала, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА)
		|				И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ), ТаблицаПериодовПростоя.ДатаОкончания, СЕКУНДА) <= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА)
		|			ТОГДА РАЗНОСТЬДАТ(ТаблицаПериодовПростоя.ДатаНачала, ТаблицаПериодовПростоя.ДатаОкончания, СЕКУНДА)
		|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ), ТаблицаПериодовПростоя.ДатаНачала, СЕКУНДА) > РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА)
		|			ТОГДА РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА) - РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ), ТаблицаПериодовПростоя.ДатаНачала, СЕКУНДА)
		|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА)
		|	КОНЕЦ КАК ВремяПростояНачало,
		|	ТаблицаПериодовПростоя.ДатаОкончания,
		|	ТаблицаПериодовПростоя.ПричинаПростоя,
		|	ТаблицаПериодовПростоя.ВидЭксплуатации
		|ПОМЕСТИТЬ ПростойОборудованияНачало
		|ИЗ
		|	ТаблицаПериодовПростоя КАК ТаблицаПериодовПростоя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
		|		ПО (ТаблицаПериодовПростоя.ПлановыйГрафикРаботы = ВТРасписанияРаботыИзм.ГрафикРаботы)
		|			И (ВТРасписанияРаботыИзм.ДатаГрафика = НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ))
		|ГДЕ
		|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ), ТаблицаПериодовПростоя.ДатаНачала, СЕКУНДА) <= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА)
		|	И (НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ)
		|			ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ), ТаблицаПериодовПростоя.ДатаНачала, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА)
		|			ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ), ТаблицаПериодовПростоя.ДатаНачала, СЕКУНДА) МЕЖДУ РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА) И РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА)
		|				И (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ), ТаблицаПериодовПростоя.ДатаНачала, СЕКУНДА) МЕЖДУ РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА) И РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА)))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаПериодовПростоя.ОбъектРемонта,
		|	ТаблицаПериодовПростоя.ДатаНачала,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ) = НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ)
		|				И (РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ), ТаблицаПериодовПростоя.ДатаНачала, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА)
		|						И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ), ТаблицаПериодовПростоя.ДатаОкончания, СЕКУНДА) <= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА)
		|					ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ), ТаблицаПериодовПростоя.ДатаНачала, СЕКУНДА) < РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА)
		|						И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ), ТаблицаПериодовПростоя.ДатаОкончания, СЕКУНДА) > РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА))
		|			ТОГДА 0
		|		КОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ), ТаблицаПериодовПростоя.ДатаОкончания, СЕКУНДА) < РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА)
		|			ТОГДА РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ), ТаблицаПериодовПростоя.ДатаОкончания, СЕКУНДА) - РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА)
		|		ИНАЧЕ РАЗНОСТЬДАТ(ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА)
		|	КОНЕЦ КАК ВремяПростояКонец,
		|	ТаблицаПериодовПростоя.ДатаОкончания,
		|	ТаблицаПериодовПростоя.ПричинаПростоя,
		|	ТаблицаПериодовПростоя.ВидЭксплуатации
		|ПОМЕСТИТЬ ПростойОборудованияКонец
		|ИЗ
		|	ТаблицаПериодовПростоя КАК ТаблицаПериодовПростоя
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
		|		ПО (ТаблицаПериодовПростоя.ПлановыйГрафикРаботы = ВТРасписанияРаботыИзм.ГрафикРаботы)
		|			И (ВТРасписанияРаботыИзм.ДатаГрафика = НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ))
		|ГДЕ
		|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ), ТаблицаПериодовПростоя.ДатаОкончания, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА)
		|	И (НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаНачала, ДЕНЬ) <> НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ)
		|			ИЛИ РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ), ТаблицаПериодовПростоя.ДатаОкончания, СЕКУНДА) >= РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяНачала, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)), СЕКУНДА)
		|				И РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ТаблицаПериодовПростоя.ДатаОкончания, ДЕНЬ), ТаблицаПериодовПростоя.ДатаОкончания, СЕКУНДА) < РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), ЕСТЬNULL(ВТРасписанияРаботыИзм.ВремяОкончания, ДАТАВРЕМЯ(1, 1, 2, 0, 0, 0)), СЕКУНДА))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПростойОборудованияПолныеДни.ОбъектРемонта,
		|	ЕСТЬNULL(ПростойОборудованияПолныеДни.Секунды,0) КАК ВремяПростояСекунды,
		|	ПростойОборудованияПолныеДни.ДатаНачала,
		|	ПростойОборудованияПолныеДни.ДатаОкончания,
		|	ПростойОборудованияПолныеДни.ПричинаПростоя,
		|	ПростойОборудованияПолныеДни.ВидЭксплуатации
		|ПОМЕСТИТЬ ОбъединениеПростоя
		|ИЗ
		|	ПростойОборудованияПолныеДни КАК ПростойОборудованияПолныеДни
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПростойОборудованияНачало.ОбъектРемонта,
		|	ЕСТЬNULL(ПростойОборудованияНачало.ВремяПростояНачало, 0),
		|	ПростойОборудованияНачало.ДатаНачала,
		|	ПростойОборудованияНачало.ДатаОкончания,
		|	ПростойОборудованияНачало.ПричинаПростоя,
		|	ПростойОборудованияНачало.ВидЭксплуатации
		|ИЗ
		|	ПростойОборудованияНачало КАК ПростойОборудованияНачало
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПростойОборудованияКонец.ОбъектРемонта,
		|	ЕСТЬNULL(ПростойОборудованияКонец.ВремяПростояКонец, 0),
		|	ПростойОборудованияКонец.ДатаНачала,
		|	ПростойОборудованияКонец.ДатаОкончания,
		|	ПростойОборудованияКонец.ПричинаПростоя,
		|	ПростойОборудованияКонец.ВидЭксплуатации
		|ИЗ
		|	ПростойОборудованияКонец КАК ПростойОборудованияКонец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОбъединениеПростоя.ОбъектРемонта,
		|	ОбъединениеПростоя.ДатаНачала КАК Период,
		|	СУММА(ОбъединениеПростоя.ВремяПростояСекунды) КАК ВремяПростоя,
		|	ОбъединениеПростоя.ДатаОкончания,
		|	ОбъединениеПростоя.ПричинаПростоя,
		|	ОбъединениеПростоя.ВидЭксплуатации
		|ИЗ
		|	ОбъединениеПростоя КАК ОбъединениеПростоя
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъединениеПростоя.ОбъектРемонта,
		|	ОбъединениеПростоя.ДатаНачала,
		|	ОбъединениеПростоя.ДатаОкончания,
		|	ОбъединениеПростоя.ПричинаПростоя,
		|	ОбъединениеПростоя.ВидЭксплуатации";
		
		Запрос.УстановитьПараметр("ТаблицаПериодовПростоя", ТаблицаПериодовПростоя);
		
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаПериодовПростоя.ОбъектРемонта,
		|	ТаблицаПериодовПростоя.ДатаНачала,
		|	ТаблицаПериодовПростоя.ДатаОкончания,
		|	ТаблицаПериодовПростоя.ПричинаПростоя,
		|	ТаблицаПериодовПростоя.ПлановыйГрафикРаботы,
		|	ТаблицаПериодовПростоя.ВидЭксплуатации
		|ПОМЕСТИТЬ ТаблицаПериодовПростоя
		|ИЗ
		|	&ТаблицаПериодовПростоя КАК ТаблицаПериодовПростоя
		|;
		|
		|ВЫБРАТЬ
		|	ТаблицаПериодовПростоя.ОбъектРемонта,
		|	ТаблицаПериодовПростоя.ДатаНачала КАК Период,
		|	0 КАК ВремяПростоя,
		|	ТаблицаПериодовПростоя.ДатаОкончания,
		|	ТаблицаПериодовПростоя.ПричинаПростоя,
		|	ТаблицаПериодовПростоя.ВидЭксплуатации
		|ИЗ
		|	ТаблицаПериодовПростоя КАК ТаблицаПериодовПростоя";
		
		Запрос.УстановитьПараметр("ТаблицаПериодовПростоя", ТаблицаПериодовПростоя);
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьДаннымиПоУмолчанию() Экспорт
	
	ПолучитьТаблицуОбъектовРемонта();
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
		ЗаполнитьВидыЭксплуатацииПоУмолчанию(мТаблицаОбъектовРемонта);
	ИначеЕсли ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации Тогда	
		мПредыдущиеЭксплуатации = ОпределитьСостоянияОбъектов(мТаблицаОбъектовРемонта,мТаблицаОбъектовРемонта.ВыгрузитьКолонку("ОбъектРемонта"));
	КонецЕсли;
	
	ТаблицаВремяНахожденияВСостоянии = ОпределитьВремяНахожденияВСостоянии();
		
	Если ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод Тогда
		Для Каждого ОР Из ОбъектыРемонта Цикл
			СтрВР = Неопределено;
			Если НЕ ЗначениеЗаполнено(ОР.ВидЭксплуатации) Тогда
				СтрВР = мТаблицаОбъектовРемонта.НайтиСтроки(Новый Структура("ДатаНачала,ОбъектРемонта", ОР.ДатаНачала,ОР.ОбъектРемонта));
				Если СтрВР.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				ОР.ВидЭксплуатации = СтрВР[0].ВидЭксплуатации;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыЭксплуатацииПоУмолчанию(пОбъектыРемонта)
	ТабОР = пОбъектыРемонта.Скопировать(,"ОбъектРемонта");
	ТабОР.Свернуть("ОбъектРемонта");
	
	мПредыдущиеЭксплуатации = ОпределитьСостоянияОбъектов(пОбъектыРемонта,ТабОР);
	
	
	// Сортируем строки пОбъектыРемонта в порядке возрастания дат окончания периода,
	// чтобы полученное значение заполнялось корректно и учитывалось в дальнейшем.
	пОбъектыРемонта.Сортировать("ОбъектРемонта,ДатаОкончания");
	
	Для Каждого СтрТЧ Из пОбъектыРемонта Цикл
		Если НЕ ЗначениеЗаполнено(СтрТЧ.ВидЭксплуатации)Тогда
			строкаЗаполнения = мПредыдущиеЭксплуатации.НайтиСтроки(Новый Структура("ОбъектРемонта,ДатаНачала",СтрТЧ.ОбъектРемонта, СтрТЧ.ДатаНачала));
			Если строкаЗаполнения.Количество() = 0 Тогда
				Продолжить
			КонецЕсли;
			
			СтрТЧ.ВидЭксплуатации = строкаЗаполнения[0].ВидЭксплуатации1;             

			строкаКорректировки = мПредыдущиеЭксплуатации.НайтиСтроки(Новый Структура("ОбъектРемонта,ДатаСреза1",СтрТЧ.ОбъектРемонта, СтрТЧ.ДатаОкончания));
			Если строкаКорректировки.Количество() > 0 Тогда
				строкаКорректировки[0].ВидЭксплуатации1 = СтрТЧ.ВидЭксплуатации;
			КонецЕсли;
			
			строкаКорректировки = мПредыдущиеЭксплуатации.НайтиСтроки(Новый Структура("ОбъектРемонта,ДатаСреза2",СтрТЧ.ОбъектРемонта, СтрТЧ.ДатаОкончания));
			Если строкаКорректировки.Количество() > 0 Тогда
				строкаКорректировки[0].ВидЭксплуатации2 = СтрТЧ.ВидЭксплуатации;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;


КонецПроцедуры

мТаблицаОбъектовРемонта = ОбъектыРемонта.ВыгрузитьКолонки();

ТаблицаИерархии = Новый ТаблицаЗначений;
СписокПодчиненныхОбъектов = Новый СписокЗначений;

#КонецОбласти

#КонецЕсли

