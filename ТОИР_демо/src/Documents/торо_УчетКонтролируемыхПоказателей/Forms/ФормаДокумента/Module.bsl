#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	КонецЕсли;
	
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ПоказыватьПоложениеОР",
			Истина);
			
	Элементы.ОбъектыРемонтаОтображатьПоложение.Пометка = мОтображатьПоложение;
	Элементы.ОбъектыРемонтаПоложение.Видимость = мОтображатьПоложение;
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);;
	
	ЗаполнитьСписокОбъектовРемонта();
	ЗаполнитьГраничныеЗначенияПоказателей();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, УстановитьСвойствоЭлементовФормыОтПрав",Истина, Истина));

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если мОтображатьПоложение Тогда	
		
		ЗаполнитьПоложенияОР();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Сохранить изменение порядка ОР стрелочками
	КопияПоказателейДляПроверки = ТекущийОбъект.Показатели.Выгрузить();
	КопияПоказателейДляПроверки.Свернуть("ОбъектРемонта");
	НужнаПерестановка = Ложь;
	КоличествоОР = Мин(ОбъектыРемонта.Количество(), КопияПоказателейДляПроверки.Количество());
	
   Для Индекс = 0 по КоличествоОР - 1 Цикл
		Если КопияПоказателейДляПроверки[Индекс].ОбъектРемонта <> ОбъектыРемонта[Индекс].ОбъектРемонта Тогда
			НужнаПерестановка = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НужнаПерестановка Тогда
		КопияПоказателей = ТекущийОбъект.Показатели.Выгрузить();
		ТекущийОбъект.Показатели.Очистить();
		КопияПоказателей.Колонки.Добавить("Сохранено", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаОР из ОбъектыРемонта Цикл
			МассивСтрок = КопияПоказателей.НайтиСтроки(Новый Структура("ОбъектРемонта", СтрокаОР.ОбъектРемонта));
			Для каждого ПереносимаяСтрока из МассивСтрок Цикл
				Если НЕ ПереносимаяСтрока.Сохранено Тогда
					НовСтр = ТекущийОбъект.Показатели.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр,ПереносимаяСтрока);
					ПереносимаяСтрока.Сохранено = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		МассивСтрок = КопияПоказателей.НайтиСтроки(Новый Структура("Сохранено", Ложь));
		Для каждого ПереносимаяСтрока из МассивСтрок Цикл
			НовСтр = ТекущийОбъект.Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,ПереносимаяСтрока);
			ПереносимаяСтрока.Сохранено = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	// Ремонты по состоянию
	ДокументыВДКОткрытию.Очистить();
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ПолучитьФункциональнуюОпцию("торо_ИспользоватьРемонтыПоСостоянию") Тогда
		торо_РемонтыПоСостоянию.СформироватьУведомленияИДефекты(ТекущийОбъект,ДокументыВДКОткрытию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Для Каждого СтруктураДокументаВДКОткрытию Из ДокументыВДКОткрытию Цикл
		ОткрытьФорму("Документ.торо_ВыявленныеДефекты.ФормаОбъекта",Новый Структура("ДанныеДокументаПриСозданииПоСостоянию",СтруктураДокументаВДКОткрытию.Значение),,Строка(СтруктураДокументаВДКОткрытию.Значение.ДокументИсточник.УникальныйИдентификатор())+СтруктураДокументаВДКОткрытию.Значение.ОбъектРемонта.УникальныйИдентификатор()+СтруктураДокументаВДКОткрытию.Значение.Показатель.УникальныйИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта
&НаКлиенте
Процедура ОбъектыРемонтаПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	
	// Отбор строк по объектам ремонта
	Если СтрокаВыбрана Тогда
		Элементы.Показатели.ОтборСтрок = Неопределено;
		Элементы.Показатели.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекущаяСтрока.ОбъектРемонта);					
		ТекущийОР = ТекущаяСтрока.ОбъектРемонта;
		ОР = ТекущаяСтрока.ОбъектРемонта;
	КонецЕсли;
	
	Элементы.Показатели.Доступность = СтрокаВыбрана;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Копирование;
	
	Если Не Отказ Тогда                                                                                
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
			
		ПараметрыОтбора = Новый Структура("СписокОР", СписокОРИзАкта());
		ПараметрыОтбора.Вставить("КонтролируемыеПоказатели", Истина);
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОРИзРегламентногоАкта",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
		Иначе
			
			СписокДоступныхСтатусов = ПолучитьСписокСтатусовНаСервере();
			
			ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
			ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
			
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередУдалением(Элемент, Отказ)
	ТекущаяСтрОР = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если НЕ ТекущаяСтрОР = Неопределено Тогда 
		Строки = Объект.Показатели.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущаяСтрОР.ОбъектРемонта));
		Для Каждого СтрокаТЧ Из Строки Цикл 
			Объект.Показатели.Удалить(СтрокаТЧ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// ОР не выбран
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьПоказателиНаСервере(ВыбранноеЗначение);	
	
	Если мОтображатьПоложение Тогда	
		
		ЗаполнитьПоложенияОР();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаПриИзменении(Элемент)
	
	Строки = Объект.Показатели.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущийОР));
	Для Каждого СтрокаТЧ Из Строки Цикл 
		Объект.Показатели.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР(Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ОбъектРемонта) Тогда 
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен объект ремонта!'"), СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		Строки = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекСтрока.ОбъектРемонта));
		Если Строки.Количество() > 1 Тогда 
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный объект ремонта уже присутствует в табличном поле!'"), СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		
		Элементы.Показатели.ОтборСтрок = Неопределено;
		Элементы.Показатели.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекСтрока.ОбъектРемонта);					
		ТекущийОР = ТекСтрока.ОбъектРемонта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхСтатусов = ПолучитьСписокСтатусовНаСервере();
	
	ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, Ожидание, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказатели
&НаКлиенте
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаОР = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекСтрокаОР = Неопределено Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите оборудование для которого фиксируется значение контролируемых показателей!'"), 20);
		               		
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрокаОР.ОбъектРемонта) Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заполнено оборудование для которого фиксируется значение контролируемых показателей!'"), 20);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекСтрокаОР = Элементы.ОбъектыРемонта.ТекущиеДанные;
		
		ТекДанные.ДатаКонтроля = Объект.Дата;
		ТекДанные.ОбъектРемонта = ТекСтрокаОР.ОбъектРемонта;
		
	КонецЕсли;
	
	Если НЕ НоваяСтрока И НЕ Копирование Тогда
		ЗаполнитьЗначенияСвойств(ПоказательДоРедактирования,ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	СтрокаТЧ = Элемент.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда 
		Отбор=Новый Структура;
		Отбор.Вставить("ОбъектРемонта",СтрокаТЧ.ОбъектРемонта);
		Отбор.Вставить("Показатель",СтрокаТЧ.Показатель);
		Строки = Объект.Показатели.НайтиСтроки(Отбор);
		Если Строки.Количество() > 1 Тогда 
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значения по данному показателю уже введены в другой строке!'"),СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Показатель) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите показатель для регистрации значения!'"),СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли НЕ НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,ПоказательДоРедактирования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Показатели.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта") Тогда
		
		ТекСтрока.Показатель = ВыбранноеЗначение;
		
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ТекСтрока.ОбъектРемонта, объект.Дата, ВыбранноеЗначение);
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураВозврата,,"ОбъектРемонта");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.Показатели.ТекущиеДанные;
	Если ТекСтрока <> Неопределено И Не ЗначениеЗаполнено(ТекСтрока.ОбъектРемонта) Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбора значения контролируемого показателя необходимо указать объект ремонта!'"), 60);
		Возврат;
		
	КонецЕсли;
	
	СписокОтбора = ПолучитьСписокОтбора(ТекСтрока.ОбъектРемонта);
		
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора",Новый Структура("КлючНазначенияИспользования, СписокОтбора",
	"УчетКонтролируемыхПоказателей", СписокОтбора),Элементы.Показатели,Объект.Ссылка);  
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Кнопка = Элементы.ОбъектыРемонтаОтображатьПоложение;
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	Элементы.ОбъектыРемонтаПоложение.Видимость = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЗаполнитьПоложенияОР(); 
	КонецЕсли;
	
	мОтображатьПоложение = Кнопка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
		
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ТекСтруктураИерархии",ТекСтруктураИерархии);
	ОткрытьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаНастройкиВидаИерархии",ПараметрыФормы,ЭтотОбъект,,,,Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда 		
		
		ПараметрыОтбора = Новый Структура("СписокОР", СписокОРИзАкта());
		ПараметрыОтбора.Вставить("КонтролируемыеПоказатели", Истина);
		ПараметрыОтбора.Вставить("ЭтоПодбор", Истина);
 
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОРИзРегламентногоАкта",ПараметрыОтбора,Элементы.ОбъектыРемонта,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе       		
		
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
		Новый Структура("КлючНазначенияИспользования, ЗакрыватьПриВыборе, СтруктураИерархии", "торо_УчетКонтролируемыхПоказателей", Ложь,ТекСтруктураИерархии), Элементы.ОбъектыРемонта, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьПоложенияОР(ОР = Неопределено)
	
	СписокПоложений = Новый СписокЗначений;
	Если ОР = Неопределено Тогда
		
		Для каждого Стр Из ОбъектыРемонта Цикл
			
			Если СписокПоложений.НайтиПоЗначению(Стр.ОбъектРемонта) = Неопределено Тогда
				СписокПоложений.Добавить(Стр.ОбъектРемонта);		
			КонецЕсли;
			
			Стр.Положение = "";
			
		КонецЦикла; 
	Иначе
		
		СписокПоложений.Добавить(ОР);
		
	КонецЕсли;
	
	СтруктураПоложений = ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, ТекСтруктураИерархии, ТекущаяДата());
	
	Если ОР = Неопределено Тогда
		Для каждого Стр Из СтруктураПоложений Цикл
			
			МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Стр.Ключ));
			
			Для каждого Элем Из МассивСтрок Цикл
				
				Элем.Положение = Стр.Значение;
				
			КонецЦикла; 
			
		КонецЦикла;
	Иначе
		Элементы.ОбъектыРемонта.ТекущиеДанные.Положение = СтруктураПоложений[ОР];
	КонецЕсли; 	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, СтруктураИерархии, Дата)
	
	Возврат  торо_ОбщегоНазначения.ПолучитьПоложенияВИерархииОбъектовРемРабот(СписокПоложений, СтруктураИерархии, Дата);	
	
КонецФункции

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ТекСтруктураИерархии = РезультатЗакрытия;
	
	Если мОтображатьПоложение Тогда	
		
		ЗаполнитьПоложенияОР();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЯвляетсяЛиОРГруппой(ОбъектРемонта)
	
	Возврат ОбъектРемонта.ЭтоГруппа;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоказателиНаСервере(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыДерево") Тогда
		СтрокиПервогоУровня = ВыбранноеЗначение.ПолучитьЭлементы();		
		Для Каждого СтрокаОР Из СтрокиПервогоУровня Цикл
			Если ЯвляетсяЛиОРГруппой(СтрокаОР.Объект) Тогда 
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ' ""%1"" является группой. Регистрация контролируемых показателей осуществляется только для элементов!'"),СтрокаОР.Объект));
				Возврат;
			КонецЕсли;
			
			МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", СтрокаОР.Объект));
			Если МассивСтрок.Количество() = 0 Тогда
				
				СтрокаТЧ = ОбъектыРемонта.Добавить();
				СтрокаТЧ.ОбъектРемонта = СтрокаОР.Объект;
			КонецЕсли;
			СтрокиДерева = СтрокаОР.ПолучитьЭлементы();
			Для Каждого СтрокаПоказатель Из СтрокиДерева Цикл 
				
				Если Объект.Показатели.НайтиСтроки(Новый Структура("ОбъектРемонта, Показатель", СтрокаПоказатель.Объект, СтрокаПоказатель.ИзмеряемыйПоказатель)).Количество() = 0 Тогда
					СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(СтрокаПоказатель.Объект, Объект.Дата, СтрокаПоказатель.ИзмеряемыйПоказатель);
					
					СтрокаТЧ = Объект.Показатели.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураВозврата);
					
					СтрокаТЧ.ОбъектРемонта = СтрокаПоказатель.Объект;
					СтрокаТЧ.Показатель = СтрокаПоказатель.ИзмеряемыйПоказатель;
					СтрокаТЧ.ДатаКонтроля = Объект.Дата;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыКоллекция") Тогда
		
		Для Каждого Строка Из ВыбранноеЗначение Цикл
			МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Строка.Объект));
			
			Если МассивСтрок.Количество() = 0 Тогда
				
				НовСтрокаОРР = ОбъектыРемонта.Добавить();
				НовСтрокаОРР.ОбъектРемонта = Строка.Объект;
				
				Если Строка.Выбран Тогда
										
					СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(Строка.Объект, Объект.Дата, Строка.ИзмеряемыйПоказатель);
					СтрокаТЧ = Объект.Показатели.Добавить(); 
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураВозврата); 
					СтрокаТЧ.Показатель		 = Строка.ИзмеряемыйПоказатель;						
					СтрокаТЧ.ОбъектРемонта	 = Строка.Объект;
					СтрокаТЧ.ДатаКонтроля	 = ТекущаяДата();	
				КонецЕсли; 				
					
			Иначе
				
				МассивСтрокСПоказателями = Объект.Показатели.НайтиСтроки(Новый Структура("ОбъектРемонта, Показатель",  Строка.Объект,  Строка.ИзмеряемыйПоказатель));
					
				Если Не МассивСтрокСПоказателями.Количество() И Строка.Выбран Тогда
					
					СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(Строка.Объект, Объект.Дата, Строка.ИзмеряемыйПоказатель);
					СтрокаТЧ = Объект.Показатели.Добавить(); 
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтруктураВозврата); 
					СтрокаТЧ.Показатель		 = Строка.ИзмеряемыйПоказатель;						
					СтрокаТЧ.ОбъектРемонта	 = Строка.Объект;
					СтрокаТЧ.ДатаКонтроля	 = ТекущаяДата();
					
				КонецЕсли;
				
			КонецЕсли; 			
			
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		
		Для Каждого Элем Из ВыбранноеЗначение Цикл
			МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Элем.Значение));
			Если МассивСтрок.Количество() = 0 Тогда
				НовСтрокаОРР = ОбъектыРемонта.Добавить();
				НовСтрокаОРР.ОбъектРемонта = Элем.Значение; 
			КонецЕсли;			
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
	
		
		Для Каждого Строка из ВыбранноеЗначение.ТаблицаПоказателей Цикл
			МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Строка.Объект));
			Если МассивСтрок.Количество() = 0 Тогда
				НовСтрокаОРР = ОбъектыРемонта.Добавить();
				НовСтрокаОРР.ОбъектРемонта = Строка.Объект;
				Элементы.ОбъектыРемонта.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
				
				Для каждого Элем Из ВыбранноеЗначение Цикл
					
					СтрокаТЧ = Объект.Показатели.Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаТЧ, Элем);
					СтрокаТЧ.ОбъектРемонта = НовСтрокаОРР.ОбъектРемонта;
					СтрокаТЧ.ДатаКонтроля = ТекущаяДата();
					
				КонецЦикла;
				
			Иначе
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'"),ВыбранноеЗначение));
			КонецЕсли;    
		КонецЦикла;
		
	Иначе	
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ВыбранноеЗначение, Объект.Дата);
		Если СтруктураВозврата = Неопределено Тогда
			Возврат;
		КонецЕсли;
		// Проверка ОР на предмет уже выбранных 
		МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыбранноеЗначение));
		Если МассивСтрок.Количество() = 0 Тогда
			НовСтрокаОРР = ОбъектыРемонта.Добавить();
			НовСтрокаОРР.ОбъектРемонта = ВыбранноеЗначение;
			Элементы.ОбъектыРемонта.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
						
			Для каждого Элем Из СтруктураВозврата Цикл
				
				СтрокаТЧ = Объект.Показатели.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаТЧ, Элем);
				СтрокаТЧ.ОбъектРемонта = НовСтрокаОРР.ОбъектРемонта;
				СтрокаТЧ.ДатаКонтроля = ТекущаяДата();
				
			КонецЦикла;
			
		Иначе
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'"),ВыбранноеЗначение));
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ОбъектРемонта, ДатаКонтроля, Показатель = Неопределено)
	
			// ОР является группой
	Если ЯвляетсяЛиОРГруппой(ОбъектРемонта) Тогда 
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = ' ""%1"" является группой. Регистрация контролируемых показателей осуществляется только для элементов!'"),ОбъектРемонта));
		Возврат Неопределено;
	КонецЕсли;
	
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта,Показатель,Истина);
	
	Если Показатель <> Неопределено Тогда
		Если МассивПоказателей.Количество() > 0 Тогда
			СтруктураВозврата = МассивПоказателей[0];
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ЗначенияКонтролируемыхПоказателейСрезПоследних.Значение,
			|	торо_ЗначенияКонтролируемыхПоказателейСрезПоследних.ДатаКонтроля
			|ИЗ
			|	РегистрСведений.торо_ЗначенияКонтролируемыхПоказателей.СрезПоследних(
			|			&Дата,
			|			ОбъектРемонта = &Объект
			|				И Показатель = &Показатель) КАК торо_ЗначенияКонтролируемыхПоказателейСрезПоследних";
			
			Запрос.УстановитьПараметр("Объект", ОбъектРемонта);
			Запрос.УстановитьПараметр("Показатель", Показатель);
			Запрос.УстановитьПараметр("Дата", ДатаКонтроля);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если НЕ Выборка.Следующий() Тогда
				СтруктураВозврата.Вставить("ПредыдущееЗначение", Выборка.Значение);
			КонецЕсли;
		Иначе
			СтруктураВозврата = Новый Структура;
		КонецЕсли;
	Иначе
		СтруктураВозврата = МассивПоказателей;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГраничныеЗначенияПоказателей()
	
	табПоказатели =  Объект.Показатели.Выгрузить();
	СписокОбъектовРемонта = табПоказатели.ВыгрузитьКолонку("ОбъектРемонта");
	СписокПоказателей = табПоказатели.ВыгрузитьКолонку("Показатель");
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(СписокОбъектовРемонта,СписокПоказателей,Истина);
	
	СтруктураПоиска = Новый Структура("ОбъектРемонта, Показатель");
	Для каждого СтруктураВозврата из МассивПоказателей Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтруктураВозврата);
		НайденныеСтроки = Объект.Показатели.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтруктураВозврата);
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
// Процедура выполняет первоначальное заполнение списка объектов ремонта.
Процедура ЗаполнитьСписокОбъектовРемонта()
	Объекты = Объект.Показатели.Выгрузить();
	Объекты.Свернуть("ОбъектРемонта");
	ОбъектыРемонта.Загрузить(Объекты);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокОтбора(ОбъектРемонта)
	
	СписокОтбора = Новый СписокЗначений;
	
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта);
	
	Для Каждого СтруктураПоказателя Из МассивПоказателей Цикл
		СписокОтбора.Добавить(СтруктураПоказателя.Показатель);
	КонецЦикла;
	
	Возврат СписокОтбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусовНаСервере()
	
	СписокЗн = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЗн.Добавить(Выборка.СтатусОРВУчете);
	КонецЦикла;
	Возврат СписокЗн;
	
КонецФункции

&НаСервере 
Функция СписокОРИзАкта()
	СписокОР = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.ОбъектРемонта
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.МероприятияОбъектов КАК торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов
	|ГДЕ
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТЗОР = Результат.Выгрузить();
		СписокОР.ЗагрузитьЗначения(ТЗОР.ВыгрузитьКолонку("ОбъектРемонта"));
	КонецЕсли;
	
	Возврат СписокОР;
	
КонецФункции

#КонецОбласти