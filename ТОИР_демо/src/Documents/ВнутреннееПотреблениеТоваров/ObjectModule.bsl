#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Перем СкладПоступления;
	Перем РеквизитыШапки;
	Перем ОтборТовары;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		
		ЗаполнитьПоЗаказу(ДанныеЗаполнения);
		Комментарий = ДанныеЗаполнения;
		// {/УП} 
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Товары") Тогда
		
		ДанныеЗаполнения.Свойство("РеквизитыШапки", РеквизитыШапки);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыШапки);
		Товары.Загрузить(ДанныеЗаполнения.Товары.Выгрузить());
		
	Иначе
		// Ввод из формы списка.
		
		// ТОиР
		Если Не ЗначениеЗаполнено(Организация) Тогда
			
			Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		// ТОиР
		
	КонецЕсли;
	
	ИнициализироватьДокумент(ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Перем МассивВсехРеквизитов;
	Перем МассивРеквизитовОперации;
	
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	// Проверка количества в т.ч. товары.
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	// Проверка характеристик в т.ч. товары.
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	Если ФОИспользоватьХарактеристикиНоменклатуры Тогда
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	КонецЕсли;
	
	// Если накладная по заказу - то код строки должен быть заполнен.
	Если Не ЗначениеЗаполнено(ЗаказНаВнутреннееПотребление) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары.КодСтроки");
	КонецЕсли;
	
	Если ЕстьРасхождения Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Товары");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты,МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ФОИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();
	
	// регистр ТоварыНаСкладах Приход
	Движения.ТоварыНаСкладах.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Если ТекСтрокаТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			
			Движение = Движения.ТоварыНаСкладах.Добавить();
			Движение.ВидДвижения    = ВидДвиженияНакопления.Расход;
			Движение.Период         = Дата;
			Движение.Номенклатура   = ТекСтрокаТовары.Номенклатура;
			Движение.Характеристика = ТекСтрокаТовары.Характеристика;
			Движение.Склад          = Склад;
			Движение.ВНаличии       = ТекСтрокаТовары.Количество;
			
			Если ФОИспользоватьСерии Тогда
				Движение.Серия      = ТекСтрокаТовары.Серия;
			КонецЕсли; 	
			
		КонецЕсли;	
	КонецЦикла;
	
	Движения.ТоварыНаСкладах.Записывать = Истина;
	
	Если ПотреблениеПоЗаказам Тогда
		
		// регистр ЗаказыНаВнутреннееПотребление Приход
		
		Для Каждого ТекСтрокаТовары Из Товары Цикл
			Если ТекСтрокаТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
				И ЗначениеЗаполнено(ТекСтрокаТовары.ЗаказНаВнутреннееПотребление) Тогда
				
				Движение = Движения.ЗаказыНаВнутреннееПотребление.Добавить();
				Движение.ВидДвижения    				= ВидДвиженияНакопления.Расход;
				Движение.Период        					= Дата;
				Движение.ЗаказНаВнутреннееПотребление 	= ТекСтрокаТовары.ЗаказНаВнутреннееПотребление;
				Движение.Номенклатура   				= ТекСтрокаТовары.Номенклатура;
				Движение.Характеристика 				= ТекСтрокаТовары.Характеристика;
				Движение.Склад          				= Склад;
				Движение.КОформлению       				= ТекСтрокаТовары.Количество;
				Движение.КодСтроки                      = ТекСтрокаТовары.КодСтроки;
				
				Если ФОИспользоватьСерии Тогда
					Движение.Серия      = ТекСтрокаТовары.Серия;
				КонецЕсли; 
				
			КонецЕсли;	
		КонецЦикла;
		
		Движения.ЗаказыНаВнутреннееПотребление.Записывать = Истина;	
		
	КонецЕсли;
	Движения.Записать();
	
	// контроль остатков
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Характеристика КАК Характеристика,
	|	Товары.Упаковка КАК Упаковка,
	|	Товары.КоличествоУпаковок КАК КоличествоУпаковок,
	|	Товары.Количество КАК Количество,
	|	Товары.КодСтроки КАК КодСтроки,
	|	Товары.ЗаказНаВнутреннееПотребление КАК ЗаказНаВнутреннееПотребление,
	|	Товары.НомерСтроки КАК НомерСтроки,
	|	&Склад КАК Склад,
	|	&Серия
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Товары КАК Товары
	|;
	|";
	
	Запрос.УстановитьПараметр("Товары",	Товары.Выгрузить());
	Запрос.УстановитьПараметр("Склад" ,	Склад);
	Если ФОИспользоватьСерии Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&Серия","Товары.Серия КАК Серия");	
	Иначе
		Запрос.УстановитьПараметр("Серия" ,	Истина);	
	КонецЕсли;
	
	// остатки товаров на складах индекс [1]
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ 
	|	ТабТовары.Номенклатура КАК Номенклатура,
	|	ТабТовары.Характеристика КАК Характеристика,
	|	ТабТовары.Склад КАК Склад,
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) КАК ВНаличииОстаток,
	|	ТабТовары.Серия,
	|	ВЫРАЗИТЬ(ТабТовары.Номенклатура.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения) КАК ЕдиницаИзмерения
	|ИЗ
	|	Таблица КАК ТабТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыНаСкладах.Остатки(
	|				,
	|				(Номенклатура, Характеристика, Серия, Склад) В
	|					(ВЫБРАТЬ
	|						Таблица.Номенклатура,
	|						Таблица.Характеристика,
	|						Таблица.Серия,
	|						Таблица.Склад
	|					ИЗ
	|						Таблица КАК Таблица)) КАК ТоварыНаСкладахОстатки
	|		ПО ТабТовары.Номенклатура = ТоварыНаСкладахОстатки.Номенклатура
	|			И ТабТовары.Характеристика = ТоварыНаСкладахОстатки.Характеристика
	|			И ТабТовары.Склад = ТоварыНаСкладахОстатки.Склад
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабТовары.Номенклатура,
	|	ТабТовары.Характеристика,
	|	ТабТовары.Склад,
	|	ВЫРАЗИТЬ(ТабТовары.Номенклатура.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения),
	|	ТабТовары.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЕСТЬNULL(ТоварыНаСкладахОстатки.ВНаличииОстаток, 0)) < 0
	|///////////////////////////////////////////////////////////////////
	|;
	|";
	
	
	// проверка заказов на вн. потребеление
	
	Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
	|	ТаблицаОстатков.ЗаказНаВнутреннееПотребление КАК Заказ,
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаОстатков.Характеристика КАК Характеристика,
	|	ТаблицаОстатков.КодСтроки КАК КодСтроки,
	|	ТаблицаОстатков.Склад КАК Склад,
	|	ТаблицаОстатков.КОформлениюОстаток КАК Количество,
	|	ТаблицаОстатков.Серия,
	|	Таблица.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Таблица КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаВнутреннееПотребление.Остатки(
	|				,
	|				(ЗаказНаВнутреннееПотребление, Номенклатура, Характеристика, КодСтроки, Серия, Склад) В
	|					(ВЫБРАТЬ
	|						Таб.ЗаказНаВнутреннееПотребление,
	|						Таб.Номенклатура,
	|						Таб.Характеристика,
	|						Таб.КодСтроки,
	|						Таб.Серия,
	|						Таб.Склад
	|					ИЗ
	|						Таблица КАК Таб)) КАК ТаблицаОстатков
	|		ПО (ТаблицаОстатков.ЗаказНаВнутреннееПотребление = Таблица.ЗаказНаВнутреннееПотребление)
	|			И (ТаблицаОстатков.Номенклатура = Таблица.Номенклатура)
	|			И (ТаблицаОстатков.Характеристика = Таблица.Характеристика)
	|			И (ТаблицаОстатков.КодСтроки = Таблица.КодСтроки)
	|			И (ТаблицаОстатков.Склад = Таблица.Склад)
	|			И (&Серия)
	|ГДЕ
	|	ТаблицаОстатков.КОформлениюОстаток < 0";
	
	Если Не ФОИспользоватьСерии Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таблица.Серия,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ТаблицаОстатков.Серия,", "");
		ЗАпрос.Текст = СтрЗаменить(Запрос.Текст, "ТабТовары.Серия,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Таб.Серия,", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Серия,", ""); 										  
		Запрос.УстановитьПараметр("Серия", Истина);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Серия", "ТаблицаОстатков.Серия = Таблица.Серия");
	КонецЕсли;
	
	
	
	Результат = Запрос.ВыполнитьПакет();
	
	ИспользуетсяКонтрольОстатков = Константы.торо_ИспользоватьКонтрольОтрицательныхОстатков.Получить();
	
	Если ИспользуетсяКонтрольОстатков Тогда
		ПолеДляВыводаОшибки = "Склад";
	Иначе
		ПолеДляВыводаОшибки = "";
	КонецЕсли;
	
	Выборка = Результат[1].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ШаблонСообщения = "Номенклатура /%НоменклатураХарактеристика% /%Серия%.
		|Превышен свободный остаток товара на складе %СкладОтправитель% на %Количество% %ЕдИзм%";
		
		
		Характеристика =  Выборка.Характеристика;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			НоменклатураХарактеристика =  Строка(Выборка.Номенклатура) + " / " + Выборка.Характеристика;
		Иначе
			НоменклатураХарактеристика =  Строка(Выборка.Номенклатура);
		КонецЕсли; 
		
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения,"%НоменклатураХарактеристика%", НоменклатураХарактеристика);				
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения,"%СкладОтправитель%"          , Склад);
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения,"%Количество%"                , - Число(Выборка.ВналичииОстаток));
		ШаблонСообщения = СтрЗаменить(ШаблонСообщения,"%ЕдИзм%"                     , Выборка.ЕдиницаИзмерения);
		
		Если Не ФОИспользоватьСерии Тогда 				
			ШаблонСообщения = СтрЗаменить(ШаблонСообщения, " /%Серия%", "");
		Иначе 
			ШаблонСообщения = СтрЗаменить(ШаблонСообщения,"%Серия%"					, Выборка.Серия); 				
		КонецЕсли;
		
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонСообщения,ЭтотОбъект,ПолеДляВыводаОшибки,,Отказ);
		
	КонецЦикла;
	
	Если Не ИспользуетсяКонтрольОстатков Тогда
		Отказ = Ложь;
	КонецЕсли;
	
	Выборка = Результат[2].Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Номенклатура ""%НоменклатураХарактеристика%"", серия ""%Серия%"", склад ""%Склад%"". По строке %НомерСтроки% оформлено больше, чем указано в распоряжении, на %Количество% %Единица%.'");
		
		Характеристика =  Выборка.Характеристика;
		
		Если ЗначениеЗаполнено(Характеристика) Тогда
			НоменклатураХарактеристика =  Строка(Выборка.Номенклатура) + " / " + Выборка.Характеристика;
		Иначе
			НоменклатураХарактеристика =  Строка(Выборка.Номенклатура);
		КонецЕсли; 
		
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%НоменклатураХарактеристика%", НоменклатураХарактеристика);
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Количество%"                , Строка(-Выборка.Количество));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Единица%"                   , Строка(Выборка.ЕдиницаИзмерения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%НомерСтроки%"               , Строка(Выборка.НомерСтроки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения,  "%Склад%"                     , Строка(Выборка.Склад));
		
		Если Не ФОИспользоватьСерии Тогда 				
			ТекстСообщения = СтрЗаменить(ТекстСообщения, ", серия %Серия%,", "");
		Иначе 
			ТекстСообщения = СтрЗаменить(ТекстСообщения,"%Серия%"					, Выборка.Серия); 				
		КонецЕсли; 
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЭтотОбъект,,, Отказ);
		
	КонецЦикла; 
	
	
КонецПроцедуры

// Заполняет документ по одному или нескольким заказам
// Параметры:
//   ДанныеЗаполнения - Массив, ДокументСсылка - ссылка на документ заказа или массив ссылок
//   РеквизитыШапки - Структура - значения реквизитов шапки
//   ЗаполнятьНаДату - Дата - дата, на которую нужно получить остатки заказов
//   ОтборТовары - ДанныеФормыКоллекция, ТаблицаЗначений - содержит отбор товаров.
Процедура ЗаполнитьПоЗаказу(ДанныеЗаполнения, РеквизитыШапки = Неопределено, ЗаполнятьНаДату = Истина, ОтборТовары = Неопределено)
	
	ТипДанныеЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныеЗаполнения = Тип("Массив") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыШапки);
		
	ИначеЕсли ТипДанныеЗаполнения = Тип("ДокументСсылка.ЗаказНаВнутреннееПотребление") Тогда
		
		ЗаказНаВнутреннееПотребление = ДанныеЗаполнения;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Заказы.Ссылка КАК ЗаказНаВнутреннееПотребление,
		|	Заказы.Организация КАК Организация,
		|	Заказы.Подразделение КАК Подразделение,
		|	Заказы.Склад КАК Склад,
		|	Заказы.Склад.УчетныйВидЦены КАК ВидЦены,
		|	(Не Заказы.Проведен) КАК ЕстьОшибкиПроведен
		|ИЗ
		|	Документ.ЗаказНаВнутреннееПотребление КАК Заказы
		|ГДЕ
		|	Заказы.Ссылка = &Заказ");
		
		Запрос.УстановитьПараметр("Заказ", ЗаказНаВнутреннееПотребление);
		РеквизитыЗаказа = Запрос.Выполнить().Выбрать();
		РеквизитыЗаказа.Следующий();
		
		МассивДопустимыхСтатусов = Новый Массив();
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыЗаказа);
		
	КонецЕсли;
	
	ПотреблениеПоЗаказам = Истина;
	
	Если ТипДанныеЗаполнения = Тип("Массив") Тогда
		МассивЗаказов = ДанныеЗаполнения;
	Иначе
		МассивЗаказов = Новый Массив;
		МассивЗаказов.Добавить(ЗаказНаВнутреннееПотребление);
	КонецЕсли;
	
	Документы.ВнутреннееПотреблениеТоваров.ЗаполнитьПоОстаткамЗаказов(ЭтотОбъект,Товары,МассивЗаказов);
	
	Если ОтборТовары <> Неопределено Тогда
		СтрокиКУдалению = Новый Массив;
		СтруктураПоиска = Новый Структура("ЗаказНаВнутреннееПотребление,КодСтроки");
		Для каждого ДанныеСтроки Из Товары Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеСтроки);
			СписокСтрок = ОтборТовары.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				СтрокиКУдалению.Добавить(ДанныеСтроки);
			КонецЕсли; 
		КонецЦикла;
		Для каждого ДанныеСтроки Из СтрокиКУдалению Цикл
			Товары.Удалить(ДанныеСтроки);
		КонецЦикла; 
	КонецЕсли; 
	
	ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказНаВнутреннееПотребление, Товары, "ЗаказНаВнутреннееПотребление");
	
КонецПроцедуры

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Подразделение    = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяОрганизация",
		Истина);
		
	КонецЕсли;
	
	
	
	ДатаРаспоряжения = ТекущаяДата();
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		
		Подразделение    = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновноеПодразделение",
		Истина);
		
	КонецЕсли;
	ВидЦены          = Справочники.Склады.УчетныйВидЦены(Склад);
	
	
КонецПроцедуры

Процедура ЗаполнитьЗаказВШапкеПоЗаказамВТабличнойЧасти(ЗаказВШапке, Знач ТабличнаяЧасть, Знач ИмяЗаказаВТабличнойЧасти) Экспорт
	
	// Заполним заказ в шапке, если в табличной части указан один заказ
	ЗаказыТабличнойЧасти = ТабличнаяЧасть.Выгрузить(,ИмяЗаказаВТабличнойЧасти);
	ЗаказыТабличнойЧасти.Свернуть(ИмяЗаказаВТабличнойЧасти);
	
	Если ЗаказыТабличнойЧасти.Количество() = 1 Тогда
		СтрокаТабличнойЧасти = ЗаказыТабличнойЧасти[0];
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти[ИмяЗаказаВТабличнойЧасти]) Тогда
			ЗаказВШапке = СтрокаТабличнойЧасти[ИмяЗаказаВТабличнойЧасти];
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли