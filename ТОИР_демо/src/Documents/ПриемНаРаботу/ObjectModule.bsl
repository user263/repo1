#Если Не ТолстыйКлиентУправляемоеПриложение Или Сервер Тогда

#Область ПрограммныйИнтерфейс
// Подсистема "Управление доступом"

// Процедура ЗаполнитьНаборыЗначенийДоступа по свойствам объекта заполняет наборы значений доступа
// в таблице с полями:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора.
//
//  Вызывается из процедуры УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(),
// если объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьНаборыЗначенийДоступа" и
// из таких же процедур объектов, у которых наборы значений доступа зависят от наборов этого
// объекта (в этом случае объект зарегистрирован в "ПодпискаНаСобытие.ЗаписатьЗависимыеНаборыЗначенийДоступа").
//
// Параметры:
//  Таблица - ТаблицаЗначений - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 ТаблицаЗначений - возвращаемая УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Таблица) Экспорт
	
	ЗарплатаКадры.ЗаполнитьНаборыПоОрганизацииИФизическимЛицам(ЭтотОбъект, Таблица, "Организация", "ФизическоеЛицо");
	
КонецПроцедуры

#КонецОбласти

// Подсистема "Управление доступом"

#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	
	КадровыеДанные = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Сотрудник, "ГоловнаяОрганизация,Организация,ФизическоеЛицо,ДатаПриема,ОформленПриемНаРаботу,ДатаУвольнения");
	Если КадровыеДанные.Количество() > 0 Тогда
		СтрокаДанных = КадровыеДанные[0];
		
		Если СтрокаДанных.ОформленПриемНаРаботу Тогда
			
			Если ЗначениеЗаполнено(СтрокаДанных.ДатаУвольнения) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Сотрудник ""%1"" был оформлен на работу с %2, уволен %3'"),
					Сотрудник,
					Формат(СтрокаДанных.ДатаПриема, "ДЛФ=DD"),
					Формат(СтрокаДанных.ДатаУвольнения, "ДЛФ=DD"));
					
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				отказ = истина;
				
			Иначе
				
				Если ЗначениеЗаполнено(СтрокаДанных.ДатаПриема) Тогда
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Сотрудник ""%1"" уже оформлен на работу с %2'"),
						Сотрудник,
						Формат(СтрокаДанных.ДатаПриема, "ДЛФ=DD"));
					
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					отказ = истина;
					
				Иначе
						
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Сотрудник ""%1"" уже оформлен на работу'"),
						Сотрудник);
						
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
					отказ = истина;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли; 
				
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаДанных.ГоловнаяОрганизация) Тогда
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сотрудник ""%1"" не оформлен на работу'"),
				Сотрудник);
				
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			отказ = истина;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаДанных.ДатаУвольнения) Тогда
				
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Сотрудник ""%1"" уволен %2'"),
				Сотрудник,
				Формат(СтрокаДанных.ДатаУвольнения, "ДЛФ=DD"));
				
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			отказ = истина;
			
		КонецЕсли;
	КонецЕсли;
	
	Если отказ тогда возврат; КонецЕсли;
		
	ПроведениеСервер.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	ДанныеДляПроведения = ПолучитьДанныеДляПроведения();
	
	ЗарплатаКадрыРасширенный.УстановитьВремяРегистрацииДокумента(Движения, ДанныеДляПроведения.СотрудникиДаты, Ссылка);
	
	КадровыйУчет.СформироватьКадровыеДвижения(ЭтотОбъект, Движения, ДанныеДляПроведения.КадровыеДвижения);
	КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков(Движения, ДанныеДляПроведения.КадровыеДвижения);
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ДатаПриема = ТекущаяДатаСеанса();
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.Сотрудники") Тогда
		ЗарплатаКадры.ЗаполнитьПоОснованиюСотрудником(ЭтотОбъект, ДанныеЗаполнения, Истина, Ложь)
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("Действие") И ДанныеЗаполнения.Действие = "Исправить" Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ПриемНаРаботу.Организация,
			|	ПриемНаРаботу.Подразделение,
			|	ПриемНаРаботу.Сотрудник,
			|	ПриемНаРаботу.Должность,
			//|	ПриемНаРаботу.ДолжностьПоШтатномуРасписанию,
			|	ПриемНаРаботу.ДатаПриема,
			|	ПриемНаРаботу.КоличествоСтавок,
			|	ПриемНаРаботу.ВидЗанятости,
			|	ПриемНаРаботу.ДлительностьИспытательногоСрока,
			|	ПриемНаРаботу.ДатаЗавершенияТрудовогоДоговора,
			|	ПриемНаРаботу.ГрафикРаботы,
			//|	ПриемНаРаботу.СпособРасчетаАванса,
			//|	ПриемНаРаботу.Аванс,
			//|	ПриемНаРаботу.УсловияПриема,
			|	ПриемНаРаботу.Руководитель,
			|	ПриемНаРаботу.ДолжностьРуководителя,
			|	ПриемНаРаботу.НачисленияУтверждены,
			|	ПриемНаРаботу.ФизическоеЛицо,
			//|	ПриемНаРаботу.ТрудовойДоговорНомер,
			//|	ПриемНаРаботу.ТрудовойДоговорДата,
			|	ПриемНаРаботу.Ответственный,
			|	ПриемНаРаботу.Комментарий
			//|	ПриемНаРаботу.Начисления.(
			//|		Начисление,
			//|		ИдентификаторСтрокиВидаРасчета,
			//|		Размер
			//|	),
			//|	ПриемНаРаботу.Показатели.(
			//|		ИдентификаторСтрокиВидаРасчета,
			//|		Показатель,
			//|		Значение
			//|	),
			//|	ПриемНаРаботу.ЕжегодныеОтпуска.(
			//|		ВидЕжегодногоОтпуска,
			//|		КоличествоДнейВГод
			//|	)
			|ИЗ
			|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
			|ГДЕ
			|	ПриемНаРаботу.Ссылка = &Ссылка");
			
			Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
			ИсправленныйДокумент = ДанныеЗаполнения.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Или Не ДанныеЗаполнения.Свойство("ЕжегодныеОтпуска") Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			Если ДанныеЗаполнения.Свойство("Сотрудник") Тогда
				Сотрудник						= ДанныеЗаполнения.Сотрудник;
			КонецЕсли;
			Если ДанныеЗаполнения.Свойство("ДатаПриема") Тогда
				ДатаПриема						= ДанныеЗаполнения.ДатаПриема;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ДатаПриема > ДатаЗавершенияТрудовогоДоговора
		И ЗначениеЗаполнено(ДатаЗавершенияТрудовогоДоговора) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Дата завершения трудового договора не может быть меньше даты приема'"), ЭтотОбъект, "ДатаЗавершенияТрудовогоДоговора", ,Отказ);
		
	КонецЕсли;
	
	ПроверитьСоответствиеПозицииШРПодразделению(Отказ, ПроверяемыеРеквизиты);
	
	ПараметрыФО = Новый Структура("Организация", Организация);
	ПроверяемыйРеквизитЕжегодныеОтпуска = ПроверяемыеРеквизиты.Найти("ЕжегодныеОтпуска");
	
	СообщениеПроверкиВидЗанятости = СотрудникиФормы.СообщениеОКонфликтеВидаЗанятостиНовогоСотрудникаССуществующими(
		Сотрудник,
		ФизическоеЛицо,
		Организация,
		ВидЗанятости,
		ДатаПриема);
		
	Если Не ПустаяСтрока(СообщениеПроверкиВидЗанятости) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеПроверкиВидЗанятости, , "ВидЗанятости", "Объект", Отказ);
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		
		ДокументыДляИсключения = Новый Массив;
		ДокументыДляИсключения.Добавить(ЭтотОбъект.Ссылка);
		ДокументыДляИсключения.Добавить(ЭтотОбъект.ИсправленныйДокумент);
		КадровыйУчет.ПроверитьСоответствиеСотрудниковОрганизации(ЭтотОбъект.Организация, ЭтотОбъект.Сотрудник, Отказ);
		
	КонецЕсли;
	
	Если Не ЭтотОбъект.ДополнительныеСвойства.Свойство("НеПроверятьУтверждениеДокумента") Тогда		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КадроваяИсторияСотрудников.Регистратор,
		|	КадроваяИсторияСотрудников.Период,
		|	КадроваяИсторияСотрудников.Сотрудник
		|ИЗ
		|	РегистрСведений.КадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|ГДЕ
		|	КадроваяИсторияСотрудников.Регистратор <> &Регистратор
		|	И КадроваяИсторияСотрудников.Регистратор <> &ИсправленныйДокумент
		|	И КадроваяИсторияСотрудников.Сотрудник В (&Сотрудники)
		|	И КадроваяИсторияСотрудников.Регистратор ССЫЛКА Документ.ПриемНаРаботу";
		
		Запрос.УстановитьПараметр("Регистратор", Ссылка);
		Запрос.УстановитьПараметр("ИсправленныйДокумент", ИсправленныйДокумент);
		Запрос.УстановитьПараметр("Сотрудники", Сотрудник);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			
			ТекстСообщенияПользователю = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Сотрудник %1, оформлен на работу %2 (%3)'"),
			Выборка.Сотрудник,
			Формат(Выборка.Период, "ДЛФ=DD"),
			Выборка.Регистратор);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщенияПользователю,
			Выборка.Регистратор,
			,
			,
			Отказ);
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЗарплатаКадры.ОтключитьБизнесЛогикуПриЗаписи(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Получает данные для формирования движений
// Возвращает Структуру с полями
//		КадровыеДвижения - данные, необходимые для формирования 
//				- кадровой истории (см. КадровыйУчетРасширенный.СформироватьКадровыеДвижения)
//				- авансов (см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхВыплат)
//				- истрии применяемых графиков работы (см. КадровыйУчетРасширенный.СформироватьИсториюИзмененияГрафиков)
//		ПлановыеНачисления - данные, необходимые для формирования истрии плановых начислений 
//		(см. РасчетЗарплатыРасширенный.СформироватьДвиженияПлановыхНачислений)
//		ЗначенияПоказателей (см. там же).
//
Функция ПолучитьДанныеДляПроведения()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДействуетДо,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник,
	|	ПриемНаРаботу.Организация КАК Организация,
	|	ПриемНаРаботу.Подразделение КАК Подразделение,
	|	ПриемНаРаботу.Должность КАК Должность,
	|	ПриемНаРаботу.КоличествоСтавок КАК КоличествоСтавок,
	|	ПриемНаРаботу.ГрафикРаботы КАК ГрафикРаботы,
	|	ПриемНаРаботу.ВидЗанятости,
	|	ПриемНаРаботу.ФизическоеЛицо
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка = &Ссылка 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботу.ДатаПриема КАК ДатаСобытия,
	|	ПриемНаРаботу.Сотрудник КАК Сотрудник
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|ГДЕ
	|	ПриемНаРаботу.Ссылка = &Ссылка";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ДанныеДляПроведения = Новый Структура; 
	
	// Первый набор данных для проведения - таблица для формирования кадровых движений, истрии графиков, авансов.
	КадровыеДвижения = РезультатыЗапроса[0].Выгрузить();
	КадровыеДвижения.Колонки.Добавить("ВидСобытия", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКадровыхСобытий"));
	КадровыеДвижения.ЗаполнитьЗначения(Перечисления.ВидыКадровыхСобытий.Прием, "ВидСобытия");
	ДанныеДляПроведения.Вставить("КадровыеДвижения", КадровыеДвижения);
	
	
	// Девятый набор данных для проведения - таблица для формирования времени регистрации документа.
	СотрудникиДаты = РезультатыЗапроса[1].Выгрузить();
	ДанныеДляПроведения.Вставить("СотрудникиДаты", СотрудникиДаты);

	
	Возврат ДанныеДляПроведения;
	
КонецФункции

Процедура ПроверитьСоответствиеПозицииШРПодразделению(Отказ, ПроверяемыеРеквизиты)
		
КонецПроцедуры	

#КонецОбласти

#КонецЕсли
