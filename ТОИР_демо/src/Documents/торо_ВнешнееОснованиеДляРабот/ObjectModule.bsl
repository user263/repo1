#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
		Организация   = ДанныеЗаполнения.Организация;
		Подразделение = ДанныеЗаполнения.Подразделение;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		
		Запрос = Новый Запрос;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабМероприятия.ОбъектРемонта,
		|	ТабМероприятия.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТабМероприятия
		|ИЗ
		|	&ТабМероприятия КАК ТабМероприятия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ВыходныеДокументы.СписокОбъектов
		|ПОМЕСТИТЬ СпискиОР
		|ИЗ
		|	ТабМероприятия КАК ТабМероприятия
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыходныеДокументы КАК торо_ВыходныеДокументы
		|		ПО ТабМероприятия.ОбъектРемонта = торо_ВыходныеДокументы.СписокОбъектов
		|			И ТабМероприятия.ВидРемонтныхРабот = торо_ВыходныеДокументы.ВидМероприятия
		|ГДЕ
		|	торо_ВыходныеДокументы.ВыходнойДокумент = &ВыходнойДокумент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта
		|ИЗ
		|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
		|ГДЕ
		|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов В
		|			(ВЫБРАТЬ
		|				СпискиОР.СписокОбъектов
		|			ИЗ
		|				СпискиОР КАК СпискиОР)";
		
		Запрос.УстановитьПараметр("ВыходнойДокумент", Перечисления.торо_ВидыВыходныхДокументов.Предписание);
		Запрос.УстановитьПараметр("ТабМероприятия"  , ДанныеЗаполнения.Мероприятия);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НС = ОбследованноеОборудование.Добавить();
			НС.ОбъектРемонта = Выборка.ОбъектРемонта;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	Если Не БезусловнаяЗапись = Истина Тогда
		ПроверкиПриПроведении(Отказ, Режим);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// регистр торо_Предписания
	Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
	Движения.торо_ВнешниеОснованияДляРабот.Очистить();
	
	// регистр торо_Ремонты
	Движения.торо_Ремонты.Записывать = Истина;
	Движения.торо_Ремонты.Очистить();	
	
	Для Каждого ТекСтрокаОбследованноеОборудование Из ОбследованноеОборудование Цикл
		// регистр торо_Предписания
		Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();
        Движение.Период                    = Дата;
        Движение.ОбъектРемонта             = ТекСтрокаОбследованноеОборудование.ОбъектРемонта;
        Движение.ID                        = ТекСтрокаОбследованноеОборудование.ID;
        Движение.Описание                  = ТекСтрокаОбследованноеОборудование.Описание;
        Движение.ПлановаяДатаРемонта       = ТекСтрокаОбследованноеОборудование.ПлановаяДатаРемонта;
        Движение.Организация               = Организация;
        Движение.Подразделение             = Подразделение;
		
		// регистр торо_Ремонты
        Движение = Движения.торо_Ремонты.Добавить();
        Движение.Период                    = Дата;
        Движение.ID                        = ТекСтрокаОбследованноеОборудование.ID;
        Движение.ОбъектРемонта             = ТекСтрокаОбследованноеОборудование.ОбъектРемонта;
        Движение.ДатаОкончанияПлан         = ТекСтрокаОбследованноеОборудование.ПлановаяДатаРемонта;
        Движение.ГарантийныйРемонт         = ТекСтрокаОбследованноеОборудование.ГарантийныйРемонт;
		
	КонецЦикла;

	// регистр торо_ОперацииПредписаний
	Движения.торо_ОперацииВнешнихОснованийДляРабот.Записывать = Истина;
	Движения.торо_ОперацииВнешнихОснованийДляРабот.Очистить();
	
	Для Каждого ТекСтрокаРемонтныеРаботы Из РемонтныеРаботы Цикл
		Движение = Движения.торо_ОперацииВнешнихОснованийДляРабот.Добавить();
		Движение.Предписание_ID  = ТекСтрокаРемонтныеРаботы.Предписание_ID;
		Движение.РемонтнаяРабота = ТекСтрокаРемонтныеРаботы.РемонтнаяРабота;
		Движение.ID              = ТекСтрокаРемонтныеРаботы.ID;
		Движение.Родитель_ID     = ТекСтрокаРемонтныеРаботы.Родитель_ID;
		Движение.Количество      = ТекСтрокаРемонтныеРаботы.Количество;
	КонецЦикла;

	Движения.торо_СтатусыДокументовВнешнихОснований.Записывать = Истина;
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Движения, Перечисления.торо_СтатусыДокументов.Зарегистрирован);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	торо_РаботаСоСтатусамиДокументовСервер.ОчиститьСогласованиеПриКопировании(ЭтотОбъект);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВнешнееОснованиеДляРабот;
		торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Ссылка, ОбследованноеОборудование.ВыгрузитьКолонку("ID"));
	Если МассивIDДляБлокировки <> Неопределено И МассивIDДляБлокировки.Количество() > 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФукции
Процедура ПроверкиПриПроведении(Отказ, Режим)
	
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(Отказ);
	
	// Согласование++
	
	// Проверим использование статусов документов.
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВнешнееОснованиеДляРабот;
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);
	
	Если мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	// Согласование--

	Если ОбследованноеОборудование.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе не заполнена табличная часть обследованного оборудования. Проведение невозможно!'"));
		Отказ = истина;
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = Строка(Ссылка);
	
	ПроверитьЗаполнениеТабличнойЧастиОбследованноеОборудование(Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиОбследованноеОборудование(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонта,ПлановаяДатаРемонта");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ОбследованноеОборудование", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(Отказ)
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	РемонтныеРаботы.Предписание_ID
	|ПОМЕСТИТЬ РемонтныеРаботы
	|ИЗ
	|	&РемонтныеРаботы КАК РемонтныеРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбследованноеОборудование.НомерСтроки,
	|	ОбследованноеОборудование.ID,
	|	ОбследованноеОборудование.ОбъектРемонта,
	|	ОбследованноеОборудование.ПлановаяДатаРемонта
	|ПОМЕСТИТЬ ОбследованноеОборудование
	|ИЗ
	|	&ОбследованноеОборудование КАК ОбследованноеОборудование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбследованноеОборудование.НомерСтроки,
	|	ОбследованноеОборудование.ОбъектРемонта
	|ИЗ
	|	ОбследованноеОборудование КАК ОбследованноеОборудование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РемонтныеРаботы КАК РемонтныеРаботы
	|		ПО ОбследованноеОборудование.ID = РемонтныеРаботы.Предписание_ID
	|ГДЕ
	|	РемонтныеРаботы.Предписание_ID ЕСТЬ NULL ");
	Запрос.УстановитьПараметр("ОбследованноеОборудование", ОбследованноеОборудование);
	Запрос.УстановитьПараметр("РемонтныеРаботы", РемонтныеРаботы);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта ремонта %1 в строке %2 не указано ни одной рекомендуемой операции.'"), Выборка.ОбъектРемонта, Выборка.НомерСтроки);
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

БезусловнаяЗапись = Ложь;

#КонецОбласти

#КонецЕсли