

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.ОбследованноеОборудование.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.ОбследованноеОборудование.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
																			"НастройкиТОиР",
																			"ОсновнаяОрганизация",
																			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
																			"НастройкиТОиР",
																			"ОсновноеПодразделение",
																			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ДатаСоздания) И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
																			"НастройкиТОиР",
																			"ПодставлятьТекущуюДатуВоВнешнееОснованиеИВыявленныеДефекты",
																			Истина) Тогда
			
			Объект.ДатаСоздания = ТекущаяДата();
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
																			"НастройкиТОиР",
																			"ОсновнойОтветственный",
																			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Для каждого ТекСтрока из Объект.ОбследованноеОборудование Цикл
				
				МассивОпераций = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("Предписание_ID",ТекСтрока.ID ));
				
				ТекСтрока.ID = Новый УникальныйИдентификатор();
				
				Для каждого Операция Из МассивОпераций Цикл
					Операция.Предписание_ID = ТекСтрока.ID;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВнешнееОснованиеДляРабот;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование--

	ФОИспользоватьГарантии      = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	
	ОбновитьОстановочные();
	ОбновитьДоступностьДляРедактирования();
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, ДокументыОснования, УстановитьСвойствоЭлементовФормыОтПрав",Истина,Истина, Истина));	
	// Конец ограничение ввода на основании
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "ОбследованноеОборудование");
	КонецЕсли;
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ДеревоРемонтныхРаботОбработкаВыбора(, ВыбранноеЗначение, );	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Согласование++
&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
	
	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СогласующиеРегистр.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение",ЭтотОбъект,Новый Структура("Элемент",Элемент));
		ПоказатьВопрос(ОписаниеОповещения, НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"), РежимДиалогаВопрос.ДаНет);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры
// Согласование--
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбследованноеОборудование

&НаКлиенте
Процедура ОбследованноеОборудованиеПриАктивизацииСтроки(Элемент)

	ТекущиеДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		
		МассивСтрокРемонтныхРабот = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("Предписание_ID",ТекущиеДанные.ID));
		
		СоответствиеID = Новый Соответствие;
		
		Для каждого СтрокаМассива Из МассивСтрокРемонтныхРабот Цикл
			
			ID_Родителя = СтрокаМассива.Родитель_ID;
			
			НайдСоответствие = СоответствиеID.Получить(ID_Родителя);
			
			Если НайдСоответствие = Неопределено Тогда
				МассивСтрокСоответствия = Новый Массив;
				МассивСтрокСоответствия.Добавить(СтрокаМассива);
				СоответствиеID.Вставить(ID_Родителя, МассивСтрокСоответствия);
			Иначе
				МассивСтрокСоответствия = НайдСоответствие;
				МассивСтрокСоответствия.Добавить(СтрокаМассива);
			КонецЕсли; 
			
		КонецЦикла; 
		
		ЭлементыДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();

		ЭлементДерева = ЭлементыДерева.Добавить();
		
		ЭлементДерева.РемонтнаяРабота = "Ремонтные работы";	
		ЭлементДерева.Картинка        = 4; 
		
		ЗаполнитьДерево(ЭлементДерева,СоответствиеID,"");
		
		УстановитьДоступностьДляРедактированияПоТекРемонту(ТекущиеДанные.БлокироватьДляИзменения);
		
	КонецЕсли;
	
	Если ДеревоРемонтныхРабот.ПолучитьЭлементы().Количество() > 0 Тогда
		
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПередУдалением(Элемент, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли;
	
	Если ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтруктураСвязанныхТЧ = Новый Структура("РемонтныеРаботы");
	
	СтруктураПоиска = Новый Структура("Предписание_ID", ТекДанные.ID);
	
	Для Каждого КлючИЗначение Из СтруктураСвязанныхТЧ Цикл
		
		МассивНайденныхСтрок = Объект[КлючИЗначение.Ключ].НайтиСтроки(СтруктураПоиска);
	    Для Каждого ЭлементМассива Из МассивНайденныхСтрок Цикл
		
			Объект[КлючИЗначение.Ключ].Удалить(ЭлементМассива);
		
		КонецЦикла;
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Копирование Тогда
		
		ТекДанные = Элемент.ТекущиеДанные;
		ТекДанные.БлокироватьДляИзменения = Ложь;
		ТекДанные.ID = Новый УникальныйИдентификатор();
		
		ЭлементыДерева = ДеревоРемонтныхРабот.ПолучитьЭлементы();
		ЭлементыДерева.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Если НоваяСтрока И Не ОтменаРедактирования Тогда	
			ТекДанные.ID = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		Если ФОИспользоватьГарантии Тогда
			
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, НачалоДня(ТекДанные.ПлановаяДатаРемонта), ТекДанные.ПлановаяДатаРемонта);
			
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// ОР не выбран
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыДерево") Тогда
		СтрокиПервогоУровня = ВыбранноеЗначение.ПолучитьЭлементы();
		Для Каждого СтрокаОР Из СтрокиПервогоУровня Цикл
			Если СтрокаОР.ЭтоГруппа Тогда 
				ПоказатьПредупреждение(Неопределено, " """ + СтрокаОР.Объект + """ является группой. Регистрация внешних оснований осуществляется только для элементов!", 30);
				Возврат;
			КонецЕсли;
			
			МассивСтрок = Объект.ОбследованноеОборудование.НайтиСтроки(Новый Структура("ОбъектРемонта", СтрокаОР.Объект));
			
			Если МассивСтрок.Количество() = 0 Тогда
			
				СтрокаТЧ = Объект.ОбследованноеОборудование.Добавить();
				СтрокаТЧ.ОбъектРемонта = СтрокаОР.Объект;
				СтрокаТЧ.ID            = Новый УникальныйИдентификатор();
				
			Иначе
				ПоказатьПредупреждение(Неопределено,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'"),
					СтрокаОР.Объект),30);	
			КонецЕсли;
			
		КонецЦикла;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		Для каждого Элем Из ВыбранноеЗначение Цикл
			МассивСтрок = Объект.ОбследованноеОборудование.НайтиСтроки(Новый Структура("ОбъектРемонта", Элем.Значение));
			Если МассивСтрок.Количество() = 0 Тогда
				НовСтрокаОРР = Объект.ОбследованноеОборудование.Добавить();
				НовСтрокаОРР.ОбъектРемонта = Элем.Значение;
				НовСтрокаОРР.ID            = Новый УникальныйИдентификатор();
				
				Элементы.ОбследованноеОборудование.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
				
			Иначе
				ПоказатьПредупреждение(Неопределено,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'"),
				Элем.Значение), 30);
				
			КонецЕсли;
		КонецЦикла;
	Иначе              		
		// Проверка ОР на предмет уже выбранных 
		МассивСтрок = Объект.ОбследованноеОборудование.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыбранноеЗначение));
		Если МассивСтрок.Количество() = 0 Тогда
			НовСтрокаОРР = Объект.ОбследованноеОборудование.Добавить();
			НовСтрокаОРР.ОбъектРемонта = ВыбранноеЗначение;
			НовСтрокаОРР.ID            = Новый УникальныйИдентификатор();
			
			Элементы.ОбследованноеОборудование.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
			
		Иначе
			ПоказатьПредупреждение(Неопределено,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'"),
				ВыбранноеЗначение), 30);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеОбъектРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, Ожидание, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеОбъектРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "ОбследованноеОборудованиеВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.Форма.ФормаДокумента", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Отказ = Истина;
		ПараметрыОтбора = Новый Структура("СписокОР", СписокОРИзАкта());
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОРИзРегламентногоАкта",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеТиповойДефектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОбъектРемонта) Тогда
		Возврат;
	КонецЕсли;	
	
	Отборы = Новый Структура("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДанные.ОбъектРемонта, "Направление"));
	ПараметрыОткрытия = Новый Структура("Отбор", Отборы);
	ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеТиповойДефектОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	текДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОбъектРемонта) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	НаправлениеОР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДанные.ОбъектРемонта, "Направление");
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", НаправлениеОР);
КонецПроцедуры

&НаКлиенте
Процедура ОбследованноеОборудованиеТиповойДефектАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 Тогда
		текДанные = Элементы.ОбследованноеОборудование.ТекущиеДанные;
		Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОбъектРемонта) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		НаправлениеОР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДанные.ОбъектРемонта, "Направление");
		ПараметрыПолученияДанных.Отбор.Вставить("Владелец", НаправлениеОР);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот
&НаКлиенте
Процедура ДеревоРемонтныхРаботПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",ТекущиеДанные.ID));
		Если МассивСтрок.Количество() > 0 Тогда
			
			МассивСтрок[0].Количество = ТекущиеДанные.Количество;
			
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		
		Модифицированность = Истина;
		
		Отказ = Истина;
		
	Иначе
		
		СтруктурыДляПередачи = Новый Структура("ID, Предписание_ID, Родитель_ID, РемонтнаяРабота",
		ТекСтрокаДРР.ID, ТекСтрокаДРР.Предписание_ID, ТекСтрокаДРР.Родитель_ID, ТекСтрокаДРР.РемонтнаяРабота);
		УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева(СтруктурыДляПередачи, ЭтотОбъект, Новый Структура("РемонтныеРаботы"));
		Модифицированность = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекРемонт = Элементы.ОбследованноеОборудование.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
	Иначе
		РемонтыОборудования_ID = "";
	КонецЕсли;
	
	МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("Предписание_ID, РемонтнаяРабота", РемонтыОборудования_ID,ВыбранноеЗначение));
	Если Не МассивСтрок.Количество() > 0 Тогда
		НС = Объект.РемонтныеРаботы.Добавить();
		НС.Предписание_ID  = РемонтыОборудования_ID;
		НС.РемонтнаяРабота = ВыбранноеЗначение;
		НС.ID              = Новый УникальныйИдентификатор;
		НС.Количество      = 1;
		НС.Картинка        = 0;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ремонтная работа <%1> уже добавлена в список ремонтных работ.'"),ВыбранноеЗначение);
		Сообщение.Сообщить(); 
	КонецЕсли; 
	
	Модифицированность = Истина;

	ОбследованноеОборудованиеПриАктивизацииСтроки(ТекРемонт); 	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", , Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование)  Тогда 
		
		ПараметрыОтбора = Новый Структура("СписокОР", СписокОРИзАкта());
		ПараметрыОтбора.Вставить("ЭтоПодбор", Истина);  
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОРИзРегламентногоАкта",ПараметрыОтбора,Элементы.ОбследованноеОборудование,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе	
		ПараметрыОткрытияФормы = Новый Структура("КлючНазначенияИспользования, ЗакрыватьПриВыборе", "торо_ВнешнееОснованиеДляРабот", Ложь);
		
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",ПараметрыОткрытияФормы,Элементы.ОбследованноеОборудование,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора",, Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Согласование++
&НаКлиенте
Процедура УтвердитьСтатус(Команда)

	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);

КонецПроцедуры
// Согласование--
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	Если ФОИспользоватьОстановочные Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
		               |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
		               |ИЗ
		               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
		               |ГДЕ
		               |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
		Запрос = Новый Запрос(ТекстЗапроса);
		Если IDРемонта = Неопределено Тогда
			Запрос.УстановитьПараметр("ID", Объект.ОбследованноеОборудование.Выгрузить().ВыгрузитьКолонку("ID"));
		Иначе
			Запрос.УстановитьПараметр("ID", IDРемонта);
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НайденныеСтроки = Объект.ОбследованноеОборудование.НайтиСтроки(Новый Структура("ID", Выборка.ID));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивIDДляПроверки = Объект.ОбследованноеОборудование.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Объект.Ссылка, МассивIDДляПроверки);
	
	Если Не МассивIDДляБлокировки = Неопределено Тогда
		
		Для Каждого СтрокаРемонта Из Объект.ОбследованноеОборудование Цикл
			СтрокаРемонта.БлокироватьДляИзменения = Не МассивIDДляБлокировки.Найти(СтрокаРемонта.ID) = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДляРедактированияПоТекРемонту(БлокироватьДляИзменения)
	
	Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр = БлокироватьДляИзменения;	
	Элементы.ДеревоРемонтныхРаботДобавитьТехОперацию.Доступность	= Не БлокироватьДляИзменения;
	
КонецПроцедуры


&НаКлиенте
Процедура РазвернутьДеревоРемонтныхРабот(Родитель)
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(Родитель.ПолучитьИдентификатор());
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДерево(ЭлементДерева, Соответствие, Родитель)
	
	МассивПодчиненныхСтрок = Соответствие.Получить(Родитель);
	
	Если Не МассивПодчиненныхСтрок = Неопределено
		И МассивПодчиненныхСтрок.Количество() > 0 Тогда
		ЭлементыДерева = ЭлементДерева.ПолучитьЭлементы();
		Если Не МассивПодчиненныхСтрок = Неопределено Тогда
			Для каждого Строка Из МассивПодчиненныхСтрок Цикл
				Элемент = ЭлементыДерева.Добавить();
				ЗаполнитьЗначенияСвойств(Элемент,Строка);
				Элемент.Картинка = 2;
				ЗаполнитьДерево(Элемент,Соответствие,Строка.ID);
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева(ТекущиеЗначения, ДокументОбъект, СтруктураТабличныхЧастей)
	
	Для Каждого КлючЗначение Из СтруктураТабличныхЧастей Цикл
		
		ПараметрыПоиска = Новый Структура;
		ПараметрыПоиска.Вставить("ID", ТекущиеЗначения.ID);
		ПараметрыПоиска.Вставить("Предписание_ID", ТекущиеЗначения.Предписание_ID);
				
		СтрокиДляУдаления = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыПоиска);
		
		Для Каждого Элемент Из СтрокиДляУдаления Цикл
			
			Объект.РемонтныеРаботы.Удалить(Элемент);
			
		КонецЦикла;
				
	КонецЦикла;
	
КонецПроцедуры

// Согласование++
&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);
			
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(ДокОбъект)
	Элементы = ДокОбъект.Элементы;
	Объект = ДокОбъект.Объект;
	Элементы.ДеревоСогласованияУтвердитьСтатус.Доступность = ЗначениеЗаполнено(Объект.СпособСогласования);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

// Согласование--

&НаСервере 
Функция СписокОРИзАкта()
	СписокОР = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.ОбъектРемонта
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.МероприятияОбъектов КАК торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов
	|ГДЕ
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТЗОР = Результат.Выгрузить();
		СписокОР.ЗагрузитьЗначения(ТЗОР.ВыгрузитьКолонку("ОбъектРемонта"));
	КонецЕсли;
	
	Возврат СписокОР;
	
КонецФункции

фПослеОчистки = Ложь;
#КонецОбласти