#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	////////////////////////////////////////////////////////////////////////////////
	// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
	
	перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
											 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
	Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

	
#Область ОбработчикиСобытий
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок, СтруктураШапкиДокумента;
	
	ДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования();
	УстановитьУправляемыеБлокировки(ДатаОкончанияПланирования);
	// Согласование++
	
	// Проверим использование статусов документов.
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ПланГрафикРемонта;
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);
	
	Если мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	// Согласование--
	
	// Проверим дату документа, если это корректировка
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка И ДокументОснование.Дата >= Дата Тогда
		Отказ = Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата документа должна быть больше даты корректируемого документа!'"));
	КонецЕсли;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ = ПланРемонтов.Выгрузить();
	ТЗ.Свернуть("ОбъектРемонтныхРабот");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТабДоступность.ID,
	|	ТабДоступность.ДоступенДляРедактирования
	|ПОМЕСТИТЬ ТабДоступность
	|ИЗ
	|	&ТабДоступность КАК ТабДоступность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.НомерСтроки,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.Документ,
	|	торо_ПланГрафикРемонтаПланРемонтов.Исполнитель,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Склад,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_базы_расчета,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_замещающего,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта,
	|	торо_ПланГрафикРемонтаПланРемонтов.Перенесенный
	|ПОМЕСТИТЬ ПланРемонтов
	|ИЗ
	|	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.Документ,
	|	торо_ПланГрафикРемонтаПланРемонтов.Исполнитель,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Склад,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_базы_расчета,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_замещающего,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта,
	|	торо_ПланГрафикРемонтаПланРемонтов.Перенесенный
	|ИЗ
	|	ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабДоступность КАК ТабДоступность
	|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТабДоступность.ID
	|ГДЕ
	|	ТабДоступность.ДоступенДляРедактирования
	|	ИЛИ торо_ПланГрафикРемонтаПланРемонтов.Перенесенный";
	
	Запрос.УстановитьПараметр("ПланРемонтов",ПланРемонтов.Выгрузить());
	Запрос.УстановитьПараметр("ТабДоступность", Документы.торо_ПланГрафикРемонта.ОбновитьДоступностьДляРедактирования(Ссылка,ВидОперации,ПланРемонтов.Выгрузить()));
	ПланРемонтовДвижения = Запрос.Выполнить().Выгрузить();
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = Строка(Ссылка);
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено значение реквизита ""Документ-основание"".'"));
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверить заполнение ТЧ
	Если Не БезусловнаяЗапись = Истина Тогда
		ПроверитьЗаполнениеТабличнойЧастиПланРемонтов(Отказ, Заголовок);
	КонецЕсли; 
	
	Если ТЗ.Количество() = 0 Тогда
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'План график не содержит данных.'"), СтатусСообщения.Важное);
		Отказ = Истина;	
		
	КонецЕсли;	
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения,ДатаОкончанияПланирования);
		
	КонецЕсли;
	
	// регистр ПланГрафикРемонтов 
	Движения.торо_ПланГрафикРемонта.Очистить();
	Если Не Отказ Тогда
		
		
		Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				
				Движения.торо_СоответствиеКорректировокДокументамППР.Очистить();
				
				Если ДокументОснование.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
					ИсходныйППР = Неопределено;
					НаборИсходных = РегистрыСведений.торо_СоответствиеКорректировокДокументамППР.СоздатьНаборЗаписей();
					НаборИсходных.Отбор.Регистратор.Установить(Ссылка);
					НаборИсходных.Прочитать(); 
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					|	торо_СоответствиеКорректировокДокументамППР.Корректируемый
					|ИЗ
					|	РегистрСведений.торо_СоответствиеКорректировокДокументамППР КАК торо_СоответствиеКорректировокДокументамППР
					|ГДЕ
					|	торо_СоответствиеКорректировокДокументамППР.Корректировка = &Корректировка";
					Запрос.УстановитьПараметр("Корректировка",ДокументОснование);
					
					НаборИсходных = Запрос.Выполнить().Выгрузить();
					СтрНабора = НаборИсходных.Добавить();
					СтрНабора.Корректируемый = ДокументОснование;
				Иначе
					ИсходныйППР = ДокументОснование;					
				КонецЕсли;
				
				Если ИсходныйППР <> Неопределено Тогда
					Движение = Движения.торо_СоответствиеКорректировокДокументамППР.Добавить();
					Движение.Корректировка = Ссылка;
					Движение.Корректируемый = ИсходныйППР;
				Иначе
					Для Каждого ЗаписьИсходный Из НаборИсходных Цикл
						Движение = Движения.торо_СоответствиеКорректировокДокументамППР.Добавить();
						Движение.Корректировка = Ссылка;
						Движение.Корректируемый = ЗаписьИсходный.Корректируемый;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Движения.торо_ПланГрафикРемонта.Записать();
		
	КонецЕсли;
	
	КлючеваяОперация = Неопределено;
	ВремяНачала = Неопределено;
	Если ДополнительныеСвойства.Свойство("КлючеваяОперация", КлючеваяОперация) И ДополнительныеСвойства.Свойство("ВремяНачала", ВремяНачала) Тогда
		ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачала);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;		
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ДокументОснование = Основание.Ссылка;
		
		Если Основание.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
			ДатаПланирования = Основание.ДатаПланирования;
			КоличествоПериодов = 1;
			ПериодичностьДетализации = Перечисления.Периодичность.Месяц;
		Иначе
			ДатаПланирования = Основание.ДатаПланирования;
			КоличествоПериодов = Основание.КоличествоПериодов;
			ПериодичностьДетализации = Основание.ПериодичностьДетализации;
		КонецЕсли;
		
		ТЗ_ПланРемонтов = Основание.ПланРемонтов.Выгрузить();
		ТЗ_ПланРемонтов.ЗаполнитьЗначения(Основание, "Документ");
		
		ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаКон"), "ДатаКонСт");
		ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаНач"), "ДатаНачСт");
		
		ПланРемонтов.Загрузить(ТЗ_ПланРемонтов);
		
		ОбъектыРемонта.Загрузить(Основание.ОбъектыРемонта.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	торо_РаботаСоСтатусамиДокументовСервер.ОчиститьСогласованиеПриКопировании(ЭтотОбъект);	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
		
		Если Не Отказ Тогда
			ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ПланГрафикРемонта;
			торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства,, Отказ);
		КонецЕсли;
		
	КонецПроцедуры
	
#КонецОбласти
	
	#Область СлужебныеПроцедурыИФункции
	// По результату запроса по шапке документа формируем движения по регистрам.
	//
	// Параметры: 
	//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
	//  Отказ                     - флаг отказа в проведении,
	//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
	//
	Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения, ДатаОкончанияПланирования)
		
		Движения.торо_ПериодыПланированияППР.Очистить();
		// Движение по регистру "торо_ПериодыПланированияППР".
		ДвиженияПоРегистру_торо_ПериодыПланированияППР(РежимПроведения, ДатаОкончанияПланирования, Отказ, Заголовок, ПланРемонтовДвижения);
		
		Движения.торо_ПланГрафикППР.Очистить();
		// Движение по регистру "торо_ПланГрафикППР".
		ДвиженияПоРегистру_торо_ПланГрафикППР(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения);
		
		// Движение по регистру "торо_ПлановыеРемонтныеРаботы".
		ДвиженияПоРегистру_торо_ПлановыеРемонтныеРаботы(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения);
		
		// Движения по регистру сведений торо_Ремонты
		
		Движения.торо_Ремонты.Записывать = Истина;
		Движения.торо_Ремонты.Очистить();
		Для Каждого СтрРемонта Из ПланРемонтовДвижения Цикл
			
			Движение = Движения.торо_Ремонты.Добавить();
			Движение.Период 			= МоментВремени().Дата;
			Движение.ID 				= СтрРемонта.ID;
			Движение.ОбъектРемонта 		= СтрРемонта.ОбъектРемонтныхРабот;
			Движение.ВидРемонта			= СтрРемонта.ВидРемонтныхРабот;
			Движение.ДатаНачалаПлан		= СтрРемонта.ДатаНач;
			Движение.ДатаОкончанияПлан	= СтрРемонта.ДатаКон;
			
		КонецЦикла;
		
	КонецПроцедуры
	
	Функция ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок()
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеРемонтныеРаботы.Период,
		|	ПлановыеРемонтныеРаботы.Регистратор,
		|	ПлановыеРемонтныеРаботы.НомерСтроки,
		|	ПлановыеРемонтныеРаботы.Активность,
		|	ПлановыеРемонтныеРаботы.Организация,
		|	ПлановыеРемонтныеРаботы.ID,
		|	ПлановыеРемонтныеРаботы.ПериодичностьДетализации,
		|	ПлановыеРемонтныеРаботы.ВидРемонтныхРабот,
		|	ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот,
		|	ПлановыеРемонтныеРаботы.Подразделение,
		|	ПлановыеРемонтныеРаботы.ID_Корректировок,
		|	ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот,
		|	ПлановыеРемонтныеРаботы.ДатаОкончанияРемонтныхРабот,
		|	ПлановыеРемонтныеРаботы.Исполнитель,
		|	ПлановыеРемонтныеРаботы.СпособВыполнения,
		|	ПлановыеРемонтныеРаботы.Отменен,
		|	ПлановыеРемонтныеРаботы.ID_базы_расчета,
		|	ПлановыеРемонтныеРаботы.Замещен,
		|	ПлановыеРемонтныеРаботы.ID_замещающего,
		|	ПлановыеРемонтныеРаботы.ДатаНачалаРасчетная,
		|	ПлановыеРемонтныеРаботы.СтоимостьРемонта,
		|	ИСТИНА КАК ДоступенДляРедактирования
		|ИЗ
		|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
		|			&ДатаДок,
		|			ID В (&СписокID)
		|				И НЕ ID В (&СписокIDЗакрытДляРедактирования)
		|				И Регистратор <> &Ссылка) КАК ПлановыеРемонтныеРаботы
		|ГДЕ
		|	НЕ ПлановыеРемонтныеРаботы.Отменен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Период,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.НомерСтроки,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Активность,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Организация,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ПериодичностьДетализации,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Подразделение,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_Корректировок,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаОкончанияРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Исполнитель,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.СпособВыполнения,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_базы_расчета,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_замещающего,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРасчетная,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.СтоимостьРемонта,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
		|			,
		|			Регистратор = &Ссылка
		|				И ID В (&СписокIDЗакрытДляРедактирования)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних";
		
		МассивID = ПланРемонтов.ВыгрузитьКолонку("ID");
		Запрос.УстановитьПараметр("ДатаДок", Дата);
		Запрос.УстановитьПараметр("СписокID", МассивID);
		МассивIDДляБлокировки = торо_Ремонты.ПроверитьДокументНаСвязанныеДокументыПоID(Ссылка, МассивID);	
		Запрос.УстановитьПараметр("СписокIDЗакрытДляРедактирования", МассивIDДляБлокировки);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецФункции
	
	// Процедура выполняет движения документа по регистру "тторо_ПлановыеРемонтныеРаботы".
	//	
	Процедура ДвиженияПоРегистру_торо_ПлановыеРемонтныеРаботы(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения)
		
		ТаблицаСоответствияID = ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок();
		НаборЗаписей = РегистрыСведений.торо_ПлановыеРемонтныеРаботы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаписей.Прочитать();
		СтарыеДвижения = НаборЗаписей.Выгрузить();
		Движения.торо_ПлановыеРемонтныеРаботы.Очистить();	
		Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
			
			Если ТаблицаСоответствияID.Количество() > 0 Или (ПланРемонтов.Выгрузить(Новый Структура("ДатаНачСт,ДатаКонСт",Дата(1,1,1,0,0,0),Дата(1,1,1,0,0,0))).Количество() = ПланРемонтов.Количество()) Тогда
				
				Для Каждого ИсходнаяСтрока Из ПланРемонтовДвижения Цикл
					Если ЗначениеЗаполнено(ИсходнаяСтрока.ДатаНачСт) и ЗначениеЗаполнено(ИсходнаяСтрока.ДатаКонСт) Тогда
						ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
						Если ТаблицаРегистр.Количество() > 0 И ТаблицаРегистр[0].ДоступенДляРедактирования Тогда
							СтрокаРегистр = ТаблицаРегистр[0];
							
							Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
							ЗаполнитьЗначенияСвойств(Движение,СтрокаРегистр);
							
							Движение.Отменен = Истина;
							Движение.Период = Движение.Период + 1;
						Иначе
							ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID, Отменен", ИсходнаяСтрока.ID, Истина));
							Если ТаблицаРегистр.Количество() > 0 Тогда 
								СтрокаРегистр = ТаблицаРегистр[0];
								
								Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
								ЗаполнитьЗначенияСвойств(Движение, СтрокаРегистр);
							КонецЕсли;	
						КонецЕсли;
					КонецЕсли;	
				КонецЦикла;
				
			Иначе
				#Если Клиент Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Невозможно провести документ корректировки план-графика ППР, так как исходный план-график был изменен.
					|Перевыберите исходный план-график в документе корректировки.'"));
				#КонецЕсли
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли; 
		
		Если Не Отказ Тогда
			
			Для Каждого ИсходнаяСтрока Из СтарыеДвижения Цикл
				СтрДостДляРед = ПланРемонтовДвижения.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
				СтрЕстьВДок = ПланРемонтов.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
				Если СтрДостДляРед.Количество() = 0 И СтрЕстьВДок.Количество() > 0 Тогда
					
					Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,ИсходнаяСтрока);
					
				КонецЕсли;
			КонецЦикла;
			
			НаборДвижений = Движения.торо_ПлановыеРемонтныеРаботы;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ПланРемонтныхРабот.ID,
			|	ПланРемонтныхРабот.ВидРемонтныхРабот,
			|	ПланРемонтныхРабот.ОбъектРемонтныхРабот,
			|	ПланРемонтныхРабот.ДатаНач КАК ДатаНачалаРемонтныхРабот,
			|	ПланРемонтныхРабот.ДатаКон КАК ДатаОкончанияРемонтныхРабот,
			|	ПланРемонтныхРабот.Исполнитель,
			|	ПланРемонтныхРабот.Отменен,
			|	ПланРемонтныхРабот.СпособВыполнения,
			|	ПланРемонтныхРабот.Замещен,
			|	ПланРемонтныхРабот.ID_базы_расчета,
			|	ПланРемонтныхРабот.ID_замещающего,
			|	ПланРемонтныхРабот.СуммаРемонта КАК СтоимостьРемонта
			|ПОМЕСТИТЬ ДанныеДляПроведения
			|ИЗ
			|	&ПланРемонтныхРабот КАК ПланРемонтныхРабот
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	&Период КАК Период,
			|	&Организация,
			|	&Подразделение,
			|	&ПериодичностьДетализации,
			|	ДанныеДляПроведения.ID,
			|	ИСТИНА КАК Активность,
			|	ДанныеДляПроведения.ВидРемонтныхРабот,
			|	ДанныеДляПроведения.ОбъектРемонтныхРабот,
			|	ДанныеДляПроведения.ДатаНачалаРемонтныхРабот,
			|	ДанныеДляПроведения.ДатаОкончанияРемонтныхРабот,
			|	ДанныеДляПроведения.Исполнитель,
			|	ДанныеДляПроведения.Отменен,
			|	ДанныеДляПроведения.СпособВыполнения,
			|	ДанныеДляПроведения.Замещен,
			|	ДанныеДляПроведения.ID_базы_расчета,
			|	ДанныеДляПроведения.ID_замещающего,
			|	ДанныеДляПроведения.СтоимостьРемонта
			|ИЗ
			|	ДанныеДляПроведения КАК ДанныеДляПроведения";
			
			Запрос.УстановитьПараметр("ПланРемонтныхРабот", ПланРемонтовДвижения);
			Запрос.УстановитьПараметр("Организация", Организация);
			
			Запрос.УстановитьПараметр("Подразделение", Подразделение);		
			
			Запрос.УстановитьПараметр("ПериодичностьДетализации", ПериодичностьДетализации);
			Запрос.УстановитьПараметр("Период", Дата);
			
			ПланРемонтныхРабот = Запрос.Выполнить().Выгрузить();
			
			// Заполним таблицу движений.
			торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПланРемонтныхРабот, ТаблицаДвижений);
			
			// Недостающие поля.
			
			Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
				
				ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID", СтрокаТаблицыДвижений.ID));
				Если ТаблицаРегистр.Количество() > 0 И Не ТаблицаРегистр[0].ДоступенДляРедактирования Тогда
					СтрокаРегистр = ТаблицаРегистр[0];
					ID_Корректировок = СтрокаРегистр.ID_Корректировок;
				Иначе
					ID_Корректировок = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДвижений.ID_Корректировок) Тогда 
					СтрокаТаблицыДвижений.ID_Корректировок = ID_Корректировок;
				КонецЕсли;	
				
			КонецЦикла;	
			
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			Движения.торо_ПлановыеРемонтныеРаботы.ВыполнитьДвижения();
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура выполняет движения документа по регистру "торо_ПланГрафикППР".
	//	
	Процедура ДвиженияПоРегистру_торо_ПланГрафикППР(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения)
		
		НаборДвижений = Движения.торо_ПланГрафикППР;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		ПланРемонтныхРабот = ПланРемонтовДвижения.Скопировать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПланРемонтныхРабот.ID,
		|	ПланРемонтныхРабот.ВидРемонтныхРабот,
		|	ПланРемонтныхРабот.ОбъектРемонтныхРабот,
		|	ПланРемонтныхРабот.ДатаНач КАК ДатаНачалаРемонтныхРабот,
		|	ПланРемонтныхРабот.ДатаКон КАК ДатаОкончанияРемонтныхРабот,
		|	ПланРемонтныхРабот.Исполнитель,
		|	ПланРемонтныхРабот.СпособВыполнения
		|ПОМЕСТИТЬ ДанныеДляПроведения
		|ИЗ
		|	&ПланРемонтныхРабот КАК ПланРемонтныхРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеДляПроведения.ID,
		|	ИСТИНА КАК Активность,
		|	ДанныеДляПроведения.ВидРемонтныхРабот,
		|	ДанныеДляПроведения.ОбъектРемонтныхРабот,
		|	ДанныеДляПроведения.ДатаНачалаРемонтныхРабот,
		|	ДанныеДляПроведения.ДатаОкончанияРемонтныхРабот,
		|	ДанныеДляПроведения.Исполнитель,
		|	ДанныеДляПроведения.СпособВыполнения
		|ИЗ
		|	ДанныеДляПроведения КАК ДанныеДляПроведения";
		
		Запрос.УстановитьПараметр("ПланРемонтныхРабот", ПланРемонтныхРабот);
		
		ПланРемонтныхРабот = Запрос.Выполнить().Выгрузить();
		
		// Заполним таблицу движений.
		торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПланРемонтныхРабот, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДатаПланирования, "ДатаПланирования");								  
		ТаблицаДвижений.ЗаполнитьЗначения(ПериодичностьДетализации, "ПериодичностьДетализации");
		
		Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
			Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
				СтрокаТаблицыДвижений.ID_Корректировок = Новый УникальныйИдентификатор;
			КонецЕсли;	
		КонецЦикла;	
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Если Не Отказ Тогда
			Движения.торо_ПланГрафикППР.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура выполняет движения документа по регистру "торо_ПериодыПланированияППР".
	//	
	Процедура ДвиженияПоРегистру_торо_ПериодыПланированияППР(РежимПроведения, ДатаОкончанияПланирования, Отказ, Заголовок, ПланРемонтовДвижения)
		
		Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот Тогда
			
			НаборДвижений = Движения.торо_ПериодыПланированияППР;
			
			// Получим таблицу значений, совпадающую со структурой набора записей регистра.
			ТаблицаДвижений = НаборДвижений.Выгрузить();
			
			ТаблицаОбъектовРемонта = ПланРемонтовДвижения.Скопировать(, "ОбъектРемонтныхРабот, ВидРемонтныхРабот");
			ТаблицаОбъектовРемонта.Свернуть("ОбъектРемонтныхРабот, ВидРемонтныхРабот");
			
			// Заполним таблицу движений.
			торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОбъектовРемонта, ТаблицаДвижений);
			
			// Недостающие поля.
			ТаблицаДвижений.ЗаполнитьЗначения(ДатаПланирования, "ДатаПланирования");								  
			ТаблицаДвижений.ЗаполнитьЗначения(ПериодичностьДетализации, "ПериодичностьДетализации");
			ТаблицаДвижений.ЗаполнитьЗначения(ДатаОкончанияПланирования, "ДатаОкончанияПланирования");
			ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект.Ссылка, "Регистратор");
			
			НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
			
			ПроверитьПериодыПланированияРемонтныхРабот(ТаблицаДвижений, Отказ, Заголовок);
			
			Если Не Отказ Тогда
				Движения.торо_ПериодыПланированияППР.ВыполнитьДвижения();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецПроцедуры
	
	// Процедура выполняет проверку на дублирование планов-графиков ППР.
	//
	// Параметры:
	//  Отказ                   - флаг отказа в проведении.
	//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
	//
	Процедура ПроверитьПериодыПланированияРемонтныхРабот(ТаблицаПроверкиПериодовПланирования, Отказ, Заголовок)
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТаблицаПроверкиПериодовПланирования.ОбъектРемонтныхРабот,
		|	ТаблицаПроверкиПериодовПланирования.ПериодичностьДетализации,
		|	ТаблицаПроверкиПериодовПланирования.ДатаПланирования,
		|	ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования,
		|	ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот,
		|	ТаблицаПроверкиПериодовПланирования.Регистратор
		|ПОМЕСТИТЬ ТаблицаПроверкиПериодовПланирования
		|ИЗ
		|	&ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ДатаПланирования),
		|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ПериодичностьДетализации),
		|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.Регистратор),
		|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ВидРемонтныхРабот)
		|ИЗ
		|	ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПериодыПланированияППР КАК торо_ПериодыПланированияППР
		|		ПО ТаблицаПроверкиПериодовПланирования.ОбъектРемонтныхРабот = торо_ПериодыПланированияППР.ОбъектРемонтныхРабот
		|			И ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот = торо_ПериодыПланированияППР.ВидРемонтныхРабот
		|			И ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования >= торо_ПериодыПланированияППР.ДатаПланирования
		|			И ТаблицаПроверкиПериодовПланирования.ДатаПланирования <= торо_ПериодыПланированияППР.ДатаОкончанияПланирования
		|			И ТаблицаПроверкиПериодовПланирования.Регистратор <> торо_ПериодыПланированияППР.Регистратор";
		
		Запрос.УстановитьПараметр("ТаблицаПроверкиПериодовПланирования", ТаблицаПроверкиПериодовПланирования);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда
			
			Отказ = Истина;
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для оборудования %1 и вида ремонта ""%2"" на данный период уже составлен документ планирования:
					|%3!'"),Выборка.ОбъектРемонтныхРаботПредставление,Выборка.ВидРемонтныхРаботПредставление,Выборка.РегистраторПредставление), СтатусСообщения.Важное);
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецПроцедуры
	
	// Проверяет правильность заполнения строк табличной части "ПланРемонтов".
	//
	// Параметры:
	//  Отказ                   - флаг отказа в проведении.
	//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
	//
	Процедура ПроверитьЗаполнениеТабличнойЧастиПланРемонтов(Отказ, Заголовок)
		
		// Укажем, что надо проверить:
		СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ДатаНач, ДатаКон, СпособВыполнения");
		
		// Вызовем общую процедуру проверки.
		торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПланРемонтов", СтруктураОбязательныхПолей, Отказ, Заголовок);
		
		ДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования();
		
		
		ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПланРемонтов"].Представление();
		ПредставлениеРеквизита      = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПланРемонтов"].Реквизиты["Исполнитель"].Представление();
		
		// Проверим принадлежность ремонтов периоду планирования и заполненность Исполнителей.
		Для Каждого СтрокаТЧ Из ПланРемонтов Цикл
			
			Если СтрокаТЧ.ДатаНач < ДатаПланирования Тогда
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В объекте рем. работ: %1
					|Вид рем. работ: %2
					|дата начала работ %3 меньше даты начала планирования!'"),
					СтрокаТЧ.ОбъектРемонтныхРабот,СтрокаТЧ.ВидРемонтныхРабот,СтрокаТЧ.ДатаНач));
				
				Отказ = Истина;
				
			ИначеЕсли СтрокаТЧ.ДатаНач > ДатаОкончанияПланирования Тогда
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В объекте рем. работ: %1
					|Вид рем. работ: %2
					|дата начала работ %3 больше даты окончания планирования!'"),
					СтрокаТЧ.ОбъектРемонтныхРабот, СтрокаТЧ.ВидРемонтныхРабот,СтрокаТЧ.ДатаНач));
				
				Отказ = Истина;
				
			ИначеЕсли СтрокаТЧ.ДатаНач > СтрокаТЧ.ДатаКон Тогда
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В объекте рем. работ: %1
					|Вид рем. работ: %2
					|дата начала работ %3 больше даты окончания работ %4!'"),
					СтрокаТЧ.ОбъектРемонтныхРабот,СтрокаТЧ.ВидРемонтныхРабот,Формат(СтрокаТЧ.ДатаНач, "ДФ=dd.MM.yyyy"),Формат(СтрокаТЧ.ДатаКон, "ДФ=dd.MM.yyyy")));
				
				Отказ = Истина;
				
			КонецЕсли; 
			
			
			Значение = СтрокаТЧ.Исполнитель;
			
			Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьЛоты") Тогда
				ИспользоватьЛоты = Истина;
			Иначе
				ИспользоватьЛоты = Ложь;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Значение) И НЕ(СтрокаТЧ.СпособВыполнения = Перечисления.СпособыСтроительства.Подрядный И ИспользоватьЛоты) Тогда
				
				Если ПредставлениеТабличнойЧасти = Неопределено Тогда
					ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПланРемонтов"].Представление();
				КонецЕсли;
				
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В строке номер ""%1"" табличной части ""%2"": 
					|	Не заполнено значение реквизита ""%3""!'"),
					СокрЛП(СтрокаТЧ.НомерСтроки),ПредставлениеТабличнойЧасти,СокрЛП(ПредставлениеРеквизита));
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
				Отказ = Истина;
				
			КонецЕсли;
			
			
		КонецЦикла;
		
	КонецПроцедуры 
	
	// Функция рассчитывает дату окончания периода планирования.
	//
	Функция РассчитатьДатуОкончанияПланирования()
		
		Если ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(ПериодичностьДетализации) + ", " + ?(КоличествоПериодов=0, 1, КоличествоПериодов) + ") КАК ДатаОкончания";
			
			Запрос.УстановитьПараметр("ДатаНачала", ДатаПланирования);
			
			Попытка
				Выборка = Запрос.Выполнить().Выбрать();
			Исключение
				Возврат Дата(3999,12,31,23,59,59);
			КонецПопытки;
			
			Если Выборка.Следующий() Тогда
				
				Возврат ?(ПериодичностьДетализации = Перечисления.Периодичность.День, Выборка.ДатаОкончания, НачалоДня(Выборка.ДатаОкончания)-1);
				
			КонецЕсли;
			
		Иначе 	
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран период планирования!'"), СтатусСообщения.Важное);
			
		КонецЕсли;
		
	КонецФункции
	
	Процедура УстановитьУправляемыеБлокировки(ДатаОкончанияПланирования)
		
		Блокировка = Новый БлокировкаДанных;
		
		// подготовка таблицы проведения
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_Ремонты");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ПланРемонтов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
		
		// плановые работы
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ПлановыеРемонтныеРаботы");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ПланРемонтов;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
				
		Блокировка.Заблокировать();  
		
	КонецПроцедуры
	
	Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
		ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
		КлючеваяОперация = Справочники.КлючевыеОперации.торо_ПроведениеДокументаПланГрафикППР;
		ДополнительныеСвойства.Вставить("КлючеваяОперация", КлючеваяОперация);
		ДополнительныеСвойства.Вставить("ВремяНачала", ВремяНачала);
	КонецПроцедуры
	#КонецОбласти
	
#КонецЕсли