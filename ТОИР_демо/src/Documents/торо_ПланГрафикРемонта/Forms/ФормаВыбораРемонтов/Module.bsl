
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РассчитатьВФоне = Параметры.РассчитатьВФоне;
	мОтображатьПоложение = Параметры.мОтображатьПоложение;
	СтруктураИерархии = Параметры.СтруктураИерархии;
	ОбъектыРемонта.Загрузить(Параметры.ОбъектыРемонта.Выгрузить());
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка = мОтображатьПоложение;
	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьВсеВетвиДеревьев();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ВыбранныеОбъектыРемонта.Очистить();
	Для каждого СтрокаПоложения из ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы() Цикл
		Если НЕ СтрокаПоложения.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаОР из СтрокаПоложения.ПолучитьЭлементы() Цикл
			Если НЕ СтрокаОР.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектРемонта = СтрокаОР.Ремонты;
			
			Для каждого СтрокаВР из СтрокаОР.ПолучитьЭлементы() Цикл
				Если НЕ СтрокаВР.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
				ВидРемонта = СтрокаВР.Ремонты;
				
				НовСтр = ВыбранныеОбъектыРемонта.Добавить();
				НовСтр.ОбъектРемонтныхРабот = ОбъектРемонта;
				НовСтр.ВидРемонтныхРабот = ВидРемонта;
				НовСтр.ЭтоЦепочка = ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.торо_ЦепочкиРемонта");
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура("ОбъектыРемонта", ВыбранныеОбъектыРемонта);
	Закрыть(СтруктураВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьПоложение(Команда)
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка = НЕ Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка;
	
	мОтображатьПоложение = Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка;
	
 	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();
	РазвернутьВсеВетвиДеревьев();
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	СписокСтруктур = ЗаполнитьСписокСтруктурНаСервере(СтруктураИерархии, Истина);
	
	СтруктураИерархииПредыдущая = СтруктураИерархии;
	
	ТекущаяИерархия = СписокСтруктур.НайтиПоЗначению(СтруктураИерархии);
	СписокСтруктур.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("НастройкаИерархииЗавершение",ЭтотОбъект),НСтр("ru = 'Выберите вид иерархии:'"), ТекущаяИерархия);
		
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РекурсивноИзменитьПометкуПодчиненных(ТекущиеДанные, ТекущиеДанные.Пометка);
	РекурсивноИзменитьПометкуРодителей(ТекущиеДанные, ТекущиеДанные.Пометка);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура РекурсивноИзменитьПометкуПодчиненных(Строка, ЗначениеПометки)
	
	Для каждого ПодчиненнаяСтрока из Строка.ПолучитьЭлементы() Цикл
		ПодчиненнаяСтрока.Пометка = ЗначениеПометки;
		РекурсивноИзменитьПометкуПодчиненных(ПодчиненнаяСтрока, ЗначениеПометки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноИзменитьПометкуРодителей(Строка, ЗначениеПометки)
	
	Родитель = Строка.ПолучитьРодителя();
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеПометки = Истина Тогда
		Родитель.Пометка = Истина;
	Иначе
		
		ЕстьПометка = Ложь;
		Для каждого СтрокаСосед из Родитель.ПолучитьЭлементы() Цикл
			Если СтрокаСосед.Пометка Тогда
				ЕстьПометка = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Родитель.Пометка = ЕстьПометка;
	КонецЕсли;
	
	РекурсивноИзменитьПометкуРодителей(Родитель, ЗначениеПометки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеВетвиДеревьев()
	
	Для Каждого Элемент Из ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции()
	
	ТаблицаОбъектовРемонта = ОбъектыРемонта.Выгрузить();
	
	ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы().Очистить();
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоПланаГрафикаППРСУчетомПозиции");
	
	Запрос = Новый Запрос;
	Если Не мОтображатьПоложение Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
		|ПОМЕСТИТЬ ВТ_Выбранные
		|ИЗ
		|	РегистрСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме КАК торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме
		|ГДЕ
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ДокументППР = &ДокументППР
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРемонтныхРабот,
		|	ОбъектРемонтныхРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НЕОПРЕДЕЛЕНО КАК Положение,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ТаблицаОбъектов.ВидРемонтныхРабот,
		|	ВЫБОР
		|		КОГДА ВТ_Выбранные.ВидРемонтныхРабот ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выбранные КАК ВТ_Выбранные
		|		ПО ТаблицаОбъектов.ВидРемонтныхРабот = ВТ_Выбранные.ВидРемонтныхРабот
		|			И ТаблицаОбъектов.ОбъектРемонтныхРабот = ВТ_Выбранные.ОбъектРемонтныхРабот
		|ИТОГИ
		|	МАКСИМУМ(Пометка)
		|ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
		
	ИначеЕсли СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
		|ПОМЕСТИТЬ ВТ_Выбранные
		|ИЗ
		|	РегистрСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме КАК торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме
		|ГДЕ
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ДокументППР = &ДокументППР
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРемонтныхРабот,
		|	ОбъектРемонтныхРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			&Дата,
		|			СтруктураИерархии = &СтруктураИерархии
		|				И ОбъектИерархии В
		|					(ВЫБРАТЬ
		|						ТаблицаОбъектов.ОбъектРемонтныхРабот
		|					ИЗ
		|						ТаблицаОбъектов КАК ТаблицаОбъектов)) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ТаблицаИерархии.РодительИерархии, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ТаблицаОбъектов.ВидРемонтныхРабот,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ВЫБОР
		|		КОГДА ВТ_Выбранные.ВидРемонтныхРабот ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИерархии КАК ТаблицаИерархии
		|		ПО ТаблицаОбъектов.ОбъектРемонтныхРабот = ТаблицаИерархии.ОбъектИерархии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выбранные КАК ВТ_Выбранные
		|		ПО ТаблицаОбъектов.ВидРемонтныхРабот = ВТ_Выбранные.ВидРемонтныхРабот
		|			И ТаблицаОбъектов.ОбъектРемонтныхРабот = ВТ_Выбранные.ОбъектРемонтныхРабот
		|ИТОГИ
		|	МАКСИМУМ(Пометка)
		|ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());				
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураИерархии) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
		|ПОМЕСТИТЬ ВТ_Выбранные
		|ИЗ
		|	РегистрСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме КАК торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме
		|ГДЕ
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ДокументППР = &ДокументППР
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРемонтныхРабот,
		|	ОбъектРемонтныхРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Положение,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаСтруктуры
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ТаблицаСтруктуры.Положение, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ТаблицаОбъектов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ВЫБОР
		|		КОГДА ВТ_Выбранные.ВидРемонтныхРабот ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтруктуры КАК ТаблицаСтруктуры
		|		ПО ТаблицаОбъектов.ОбъектРемонтныхРабот = ТаблицаСтруктуры.ОбъектИерархии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выбранные КАК ВТ_Выбранные
		|		ПО ТаблицаОбъектов.ВидРемонтныхРабот = ВТ_Выбранные.ВидРемонтныхРабот
		|			И ТаблицаОбъектов.ОбъектРемонтныхРабот = ВТ_Выбранные.ОбъектРемонтныхРабот
		|ИТОГИ
		|	МАКСИМУМ(Пометка)
		|ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
		|ПОМЕСТИТЬ ВТ_Выбранные
		|ИЗ
		|	РегистрСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме КАК торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме
		|ГДЕ
		|	торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.ДокументППР = &ДокументППР
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРемонтныхРабот,
		|	ОбъектРемонтныхРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот.Родитель КАК Положение,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ТаблицаОбъектов.ВидРемонтныхРабот,
		|	ВЫБОР
		|		КОГДА ВТ_Выбранные.ВидРемонтныхРабот ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Пометка
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Выбранные КАК ВТ_Выбранные
		|		ПО ТаблицаОбъектов.ВидРемонтныхРабот = ВТ_Выбранные.ВидРемонтныхРабот
		|			И ТаблицаОбъектов.ОбъектРемонтныхРабот = ВТ_Выбранные.ОбъектРемонтныхРабот
		|ИТОГИ
		|	МАКСИМУМ(Пометка)
		|ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);				
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектовРемонта);
	Запрос.УстановитьПараметр("ДокументППР", Параметры.ДокументППР);
	
	Результат = Запрос.Выполнить();
	
	ДеревоРемонтовПромежуточное = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоРемонтовОбъект.Строки.Очистить();
	ДеревоИзЗапросаВДеревоРемонтов(ДеревоРемонтовПромежуточное.Строки, ДеревоРемонтовОбъект.Строки);
	ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "ДеревоПланаГрафикаППРСУчетомПозиции"); 
	
КонецПроцедуры

&НаСервере
Процедура ДеревоИзЗапросаВДеревоРемонтов(СтрокиДереваИзЗапроса,СтрокиДереваРемонтов)
	
	Для Каждого Строка Из СтрокиДереваИзЗапроса Цикл
		
		Если ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
			НоваяСтрока.Ремонты = Строка.ВидРемонтныхРабот;
			НоваяСтрока.НомерКартинки = 7;
			НоваяСтрока.Пометка = Строка.Пометка;
			СледующийУровень = НоваяСтрока.Строки;
		ИначеЕсли ЗначениеЗаполнено(Строка.ОбъектРемонтныхРабот) И Строка.ЭтоНеГруппа = null Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
			НоваяСтрока.Ремонты = Строка.ОбъектРемонтныхРабот;
			НоваяСтрока.ИнвентарныйНомер = Строка.ОбъектРемонтныхРабот.ИнвентарныйНомер;
			НоваяСтрока.НомерКартинки = 0;
			НоваяСтрока.Пометка = Строка.Пометка;
			СледующийУровень = НоваяСтрока.Строки;
		ИначеЕсли ЗначениеЗаполнено(Строка.Положение) И Строка.ОбъектРемонтныхРабот = null Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
			НоваяСтрока.Ремонты = Строка.Положение;
			НоваяСтрока.НомерКартинки = 2;
			НоваяСтрока.Пометка = Строка.Пометка;
			СледующийУровень = НоваяСтрока.Строки;
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Положение) И НЕ ЗначениеЗаполнено(Строка.ОбъектРемонтныхРабот) И НЕ ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
			НоваяСтрока.Ремонты = "<Объекты и виды ремонта>";
			НоваяСтрока.НомерКартинки = 4;
			НоваяСтрока.Пометка = Строка.Пометка;
			СледующийУровень = НоваяСтрока.Строки;
		Иначе
			СледующийУровень = СтрокиДереваРемонтов;
		КонецЕсли;
		
		ДеревоИзЗапросаВДеревоРемонтов(Строка.Строки,СледующийУровень);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
		
	ВыбранноеЗначение = ВыбранныйЭлемент;
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		СтруктураИерархии = ВыбранноеЗначение.Значение;
		ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();
		РазвернутьВсеВетвиДеревьев();
		
	КонецЕсли; 
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСписокСтруктурНаСервере(ТекСтруктураИерархии, БезТекИерархии = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_СтруктурыОР.Ссылка,
	|	торо_СтруктурыОР.Наименование
	|ИЗ
	|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|ГДЕ
	|	торо_СтруктурыОР.ПометкаУдаления = ЛОЖЬ
	|	И торо_СтруктурыОР.СтроитсяАвтоматически = ЛОЖЬ";
	
	Если БезТекИерархии Тогда
		
		Запрос.Текст = Запрос.Текст + " И торо_СтруктурыОР.Ссылка <> &СтруктураИерархии";
		Запрос.УстановитьПараметр("СтруктураИерархии", ТекСтруктураИерархии);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокСтруктурОР = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СписокСтруктурОР.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
		
	КонецЦикла;
	
	Если БезТекИерархии Тогда
		
		СписокСтруктурОР[0].Пометка = Истина;
	Иначе
		
		Для каждого ЭлементСписка Из СписокСтруктурОР Цикл
			
			ЭлементСписка.Пометка = ЭлементСписка.Значение = ТекСтруктураИерархии;	
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСтруктурОР;

КонецФункции

#КонецОбласти
