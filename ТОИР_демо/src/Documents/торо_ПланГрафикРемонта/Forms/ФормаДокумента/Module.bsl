&НаКлиенте
Перем НужноСортироватьПланРемонтов;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.ПланРемонтов.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	ТекДата = ТекущаяДата();
	
	Если Параметры.Свойство("ВидОперации") Тогда 	
		Объект.ВидОперации = Параметры.ВидОперации;
	ИначеЕсли Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПустаяСсылка() Тогда
		
		Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда 
			ОбъектыРемонтаИзУточняемого.Загрузить(Объект.ДокументОснование.ОбъектыРемонта.Выгрузить());
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ОбъектыРемонтаИзУточняемого.Загрузить(Объект.ДокументОснование.ОбъектыРемонта.Выгрузить());
		КонецЕсли;
		// Заполнить реквизиты значениями по умолчанию.
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Организация = Параметры.ЗначениеКопирования.Организация;
			Объект.Подразделение = Параметры.ЗначениеКопирования.Подразделение;
			Объект.ПериодичностьДетализации = Параметры.ЗначениеКопирования.ПериодичностьДетализации;
			Объект.КоличествоПериодов = Параметры.ЗначениеКопирования.КоличествоПериодов;
			
			Объект.ПланРемонтов.Очистить();
			Если Объект.ПериодичностьДетализации = Перечисления.Периодичность.День Тогда 
				Объект.ДатаПланирования = КонецДня(ТекДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Неделя Тогда 
				Объект.ДатаПланирования = КонецНедели(ТекДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Декада Тогда 
				Объект.ДатаПланирования = КонецМесяца(ТекДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Месяц Тогда 
				Объект.ДатаПланирования = КонецМесяца(ТекДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Квартал Тогда 
				Объект.ДатаПланирования = КонецКвартала(КонецКвартала(ТекДата)+1)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Полугодие Тогда 
				Объект.ДатаПланирования = КонецКвартала(ТекДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Год Тогда 
				Объект.ДатаПланирования = КонецГода(ТекДата)+1;
			КонецЕсли;
		Иначе 
			Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				Объект.ДатаПланирования = КонецГода(ТекДата)+1;
				Объект.ПериодичностьДетализации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновнойПериодПланирования",
				Истина);
				
				Если НЕ ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда
					Объект.ПериодичностьДетализации = Перечисления.Периодичность.Год;
				КонецЕсли;
				
				Объект.КоличествоПериодов = 1;
			КонецЕсли;
			
			ОрганизацияИзНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновнаяОрганизация");
			ПодразделениеИзНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновноеПодразделение");	
				
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = ОрганизацияИзНастроек;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
					Объект.Подразделение = ПодразделениеИзНастроек;
				КонецЕсли;
				
			Иначе
				Объект.Организация = ОрганизацияИзНастроек;
				
				Объект.Подразделение = ПодразделениеИзНастроек;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
				
				Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновнойОтветственный",
				Справочники.Пользователи.ПустаяСсылка());
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ПоказыватьПоложениеОР",
			Истина);
			
	ПоказыватьСообщениеПриРасчетеППР = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ПоказыватьСообщениеПриРасчетеППР",
			Истина);
			
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка = мОтображатьПоложение;
	
	СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);
			
	Если Не ЗначениеЗаполнено(СтруктураИерархии) Тогда
		СтруктураИерархии = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	КонецЕсли; 
	
	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();
	ОбновитьДокументыЗаказНаВнПотреблениеСервер();

		
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента       = Объект.Дата;
	мДатаОкончанияПланирования  = РассчитатьДатуОкончанияПланирования(Объект.ПериодичностьДетализации, Объект.КоличествоПериодов, Объект.ДатаПланирования);
	
	ПравоИнтерактивнаяПометкаУдаленияДокументаЗаказНаВнутреннееПотребление = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоИнтерактивноеДобавлениеДокументаЗаказНаВнутреннееПотребление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_ПланГрафикРемонта);
	
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	ОбновитьДоступностьДляРедактирования();
		
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ПланГрафикРемонта;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --

	// Если открываем документ их обработки и нужно активировать указанную строку
	Если Параметры.Свойство("АктивироватьСтроку") Тогда
		ТекСтрокаИзВнеID = Параметры.ТекСтрокаИзОбработкиID;
	КонецЕсли;
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, УстановитьСвойствоЭлементовФормыОтПрав",Истина, Истина));
	
	// видимость легенды диаграммы
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказательЛегенду.Пометка;
	
	УправлениеВидимостью(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьДоступностьКнопкиНастройкаИерархии();
	РазвернутьВсеВетвиДеревьев();
	УстановитьВнешнийВидФормы();
	// Вывести в заголовке формы вид операции.
	
	// Если открываем документ их обработки и нужно активировать указанную строку
	Если ТекСтрокаИзВнеID<>"" Тогда
		АктивироватьСтрокуИзВне(ТекСтрокаИзВнеID);			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПараметрыЗаписи.Вставить("НужноСортироватьПланРемонтов", НужноСортироватьПланРемонтов);
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	ЗаписатьДеревоППРСУчетомПозиции(ТекущийОбъект);
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	Если ПараметрыЗаписи.НужноСортироватьПланРемонтов Тогда
		
		ТекущийОбъект.ПланРемонтов.Сортировать("ДатаНач возр");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), ТекущийОбъект, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	НужноСортироватьПланРемонтов = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "КорректировкаППРПоЛимитам" Тогда
		МассивСтрокУдаления = Параметр;
		Если МассивСтрокУдаления = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекЗначение Из МассивСтрокУдаления Цикл
			СтрокиРемонта = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("ID",ТекЗначение));
			Для каждого ТекСтрока Из СтрокиРемонта Цикл
				ТекСтрока.Отменен = Истина;
			КонецЦикла;
		КонецЦикла;
		Модифицированность = Истина;
	ИначеЕсли ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_МакетПланаРемонтовНаПериод" И Источник = ЭтаФорма Тогда
		Если Параметр = Неопределено ИЛИ НЕ Параметр.Количество() Тогда			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать хотя бы 1 ремонт!'"), СтатусСообщения.Важное);
		Иначе			
			СтруктураПараметровКоманды = Новый Структура("ДокППР, Параметры", Объект.Ссылка, Параметр);
			МассивПараметровКоманды = Новый Массив();
			МассивПараметровКоманды.Добавить(Объект.Ссылка);
			торо_Печать.НапечататьДокумент("Документ.торо_ПланГрафикРемонта", "МакетПланаРемонтовНаПериод", МассивПараметровКоманды, СтруктураПараметровКоманды);
			 			
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаПланГрафикППР Тогда
		Если НужноСортироватьПланРемонтов Тогда
			параметрОбъект = Объект;
			ИзмОбъект = ВыполнитьСортировкуТЧПланРемонтов(параметрОбъект);
			КопироватьДанныеФормы(ИзмОбъект, Объект);
			НужноСортироватьПланРемонтов = Ложь;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		ДиаграммаГантаППР.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		ДиаграммаГантаППР.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГантаППР.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаГантаППР.КратностьПериодическогоВарианта 	= ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаППРПриОкончанииРедактированияИнтервала(Элемент, Интервал, ОтменаРедактирования)
	
	Если НЕ ПравоРедактирование Тогда
		ОтменаРедактирования = Истина;
		Возврат;
	КонецЕсли;
	
	Если Интервал.Цвет = WebЦвета.Черный
		ИЛИ НЕ Интервал.Расшифровка[3] 
		ИЛИ Интервал.Цвет = WebЦвета.Красный Тогда
		
		ОтменаРедактирования = Истина;
	КонецЕсли;
	
	Если Не ОтменаРедактирования Тогда
		
		Текст = Интервал.Текст;
		Поз = Найти(Текст, "-");
		ДатаНачСтарая = ДиаграммаГантаПреобразоватьТекстВДату(Сред(Текст, 0, Поз - 2));
		ДатаКонСтарая = ДиаграммаГантаПреобразоватьТекстВДату(Сред(Текст, Поз + 2, СтрДлина(Текст) - Поз));
		
		ОР     = Интервал.Значение.Точка.Родитель.Расшифровка;
		ВР     = Интервал.Значение.Точка.Расшифровка;
		
		Для каждого Строка Из Объект.ПланРемонтов Цикл
			
			Если Строка.ОбъектРемонтныхРабот = ОР И Строка.ВидРемонтныхРабот = ВР 
				И Строка.ДатаНач = НачалоДня(ДатаНачСтарая) И Строка.ДатаКон = НачалоДня(ДатаКонСтарая) Тогда
				
				Строка.ДатаНач = Интервал.Начало;
				Строка.ДатаКон = Интервал.Конец;
				НужноСортироватьПланРемонтов = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТочкиДиаграммы = НайтиНужнуюТочкуДиаграммыГанта(ОР, ВР);
		
		Для каждого Точка Из ТочкиДиаграммы Цикл
			ЗначениеДиаграммы = ДиаграммаГантаППР.ПолучитьЗначение(Точка, ДиаграммаГантаППР.Серии[0]);
			
			Для каждого Инт Из ЗначениеДиаграммы Цикл
				
				Если Инт.Начало = ДатаНачСтарая и Инт.Конец = ДатаКонСтарая Тогда
					
					Инт.Начало = Интервал.Начало;
					Инт.Конец = Интервал.Конец;
					Инт.Текст = Строка(Инт.Начало) + " - " + Строка(Инт.Конец);
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;	
	ПараметрыОтбора = Новый Структура("ОтборПоПроведенным", Истина);
	
	ОткрытьФорму("Документ.торо_ПланГрафикРемонта.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ДокументОснованиеПриИзмененииЗавершение", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Данные документа будут очищены! Продолжить?'"), РежимДиалогаВопрос.ДаНет,60);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();

КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьДетализацииПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРемонтыИзДокументаОснования()
	
	мДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования(Объект.ПериодичностьДетализации, Объект.КоличествоПериодов, Объект.ДатаПланирования);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		ТЗ_ПланРемонтов = ПодобратьРемонтыДляКорректировки(мДатаОкончанияПланирования, Объект.ДокументОснование);
		Объект.ПланРемонтов.Загрузить(ТЗ_ПланРемонтов);
	КонецЕсли;

КонецПроцедуры

Функция ПодобратьРемонтыДляКорректировки(мДатаОкончанияПланирования, Основание)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.Документ,
	|	торо_ПланГрафикРемонтаПланРемонтов.Исполнитель,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Склад,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_базы_расчета,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_замещающего,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта,
	|	торо_ПланГрафикРемонтаПланРемонтов.Перенесенный
	|ИЗ
	|	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|ГДЕ
	|	торо_ПланГрафикРемонтаПланРемонтов.Ссылка = &Основание
	|	И торо_ПланГрафикРемонтаПланРемонтов.ДатаНач МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("Основание",Основание);
	Запрос.УстановитьПараметр("ДатаНачала",Объект.ДатаПланирования);
	Запрос.УстановитьПараметр("ДатаОкончания",мДатаОкончанияПланирования);

	ТЗ_ПланРемонтов = Запрос.Выполнить().Выгрузить();
	ТЗ_ПланРемонтов.ЗаполнитьЗначения(Основание, "Документ");
	
	ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаКон"), "ДатаКонСт");
	ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаНач"), "ДатаНачСт");
	
	Возврат ТЗ_ПланРемонтов;
	
КонецФункции


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПланаГрафикаППРСУчетомПозици
&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЭлементСравнения = Неопределено;	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		СтрВыбранноеЗначение = ПолучитьПараметрыОР(ВыбранноеЗначение);
		
		ОРГруппа = ЯвляетсяЛиЭлементГруппой(ВыбранноеЗначение);
		Если ОРГруппа Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В документ нельзя вносить группы объектов ремонтных работ!'"), 60);
			Возврат;
			
		КонецЕсли;
		
		Если СтрВыбранноеЗначение.НеУчаствуетВПланировании Тогда
			
			струкПараметров = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОР", ЭтотОбъект, струкПараметров);
			ПоказатьВопрос(Оповещение,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для объекта ремонта ""%1"" установлен признак ""Не участвует в планировании"". Добавить объект ремонта?'"),
				СтрВыбранноеЗначение.Наименование),
				РежимДиалогаВопрос.ДаНет);
				
			Возврат;
		КонецЕсли;
		
		ДобавитьЭлементВДерево(ВыбранноеЗначение);
				
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		ЭлементДерево = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции;
		
		ТекСтрокаДерева = ЭлементДерево.ТекущиеДанные;
		СтрокаРодитель = ТекСтрокаДерева;
		
		Если ТекСтрокаДерева = Неопределено Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта для ввода ремонтной работы!'"), 60);
			Возврат;
			
		ИначеЕсли ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И ЯвляетсяЛиЭлементГруппой(ТекСтрокаДерева.Ремонты) Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта для ввода ремонтной работы!'"), 60);
			Возврат;
			
		ИначеЕсли ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			СтрокаРодитель = ДеревоПланаГрафикаППРСУчетомПозиции.НайтиПоИдентификатору(ЭлементДерево.ТекущаяСтрока).ПолучитьРодителя();
			
		КонецЕсли; 
		
		СтрВыбранноеЗначение = ПолучитьПараметрыВР(ВыбранноеЗначение, СтрокаРодитель.Ремонты);
		Если СтрВыбранноеЗначение.НеУчаствуетВПланировании = Истина Тогда
			
			струкПараметров = Новый Структура("ВыбранноеЗначение, СтрокаРодитель", ВыбранноеЗначение, СтрокаРодитель);
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаВР", ЭтотОбъект, струкПараметров);
			ПоказатьВопрос(Оповещение, 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для вида ремонта ""%1"" установлен признак ""Не участвует в планировании"". Добавить вид ремонта?'"),
				СтрВыбранноеЗначение.Наименование),
				РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ДеревоРемонтовОбработкаВыбораВРНаСервере(ВыбранноеЗначение, СтрокаРодитель.Ремонты);
		ЭлементСравнения = СтрокаРодитель.Ремонты;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
		
		ЭлементДерево = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции;
		
		ТекСтрокаДерева = ЭлементДерево.ТекущиеДанные;
		СтрокаРодитель = ТекСтрокаДерева;
		
		Если ТекСтрокаДерева = Неопределено Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта для ввода цепочки работ!'"), 60);
			Возврат;
			
		ИначеЕсли ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И ЯвляетсяЛиЭлементГруппой(ТекСтрокаДерева.Ремонты) Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта для ввода цепочки работ!'"), 60);
			Возврат;
			
		ИначеЕсли ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
			
			СтрокаРодитель = ДеревоПланаГрафикаППРСУчетомПозиции.НайтиПоИдентификатору(ЭлементДерево.ТекущаяСтрока).ПолучитьРодителя();
			
		КонецЕсли; 
		
		ДеревоРемонтовОбработкаВыбораВРНаСервере(ВыбранноеЗначение, СтрокаРодитель.Ремонты, ,"Цепочка ");
		ЭлементСравнения = СтрокаРодитель.Ремонты;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыДерево") Тогда
		
		Для Каждого СтрокаОР Из ВыбранноеЗначение.ПолучитьЭлементы() Цикл
			
			МассивВидовРемонта = Новый Массив;
			Если СтрокаОР.Свойство("Цепочка") Тогда
				Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
					МассивВидовРемонта.Добавить(СтрокаВР.Цепочка);
				КонецЦикла;
			Иначе
				Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
					МассивВидовРемонта.Добавить(СтрокаВР.Объект);
				КонецЦикла;
			КонецЕсли;
			ДополнитьДеревоРемонтовНаСервере(СтрокаОР.Объект, МассивВидовРемонта);
			ЭлементСравнения = СтрокаОР.Объект;
		КонецЦикла;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	РазвернутьВсеВетвиДеревьев();
	
	ТекДанные = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы();
	Если ТекДанные.Количество()>0 Тогда
		Для Каждого Строки Из ТекДанные Цикл
			Для Каждого Строка Из Строки.ПолучитьЭлементы() Цикл
				Если ЭлементСравнения <> Неопределено И Строка.Ремонты = ЭлементСравнения Тогда
					Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущаяСтрока = Строка.ПолучитьИдентификатор(); 
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииДобавитьРемонт.Доступность = (СтрокаВыбрана И ТекущаяСтрока.Ремонты <> "<Объекты и виды ремонта>") И ПравоРедактирование;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииДобавитьЦепочку.Доступность = (СтрокаВыбрана И ТекущаяСтрока.Ремонты <> "<Объекты и виды ремонта>") И ПравоРедактирование;
	
	// Отбор строк в плане ремонтов
	Если СтрокаВыбрана Тогда
		УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока);
	КонецЕсли;
	
	ТекОбъект = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	Если НЕ ТекОбъект = Неопределено Тогда
		СтрРодитель = ТекОбъект.ПолучитьРодителя();
		Если СтрРодитель <> Неопределено Тогда
			ЗаблокироватьСтрокиВПланеРемонтовПоID(ТекОбъект.Ремонты, СтрРодитель.Ремонты);
		Иначе
			ЗаблокироватьСтрокиВПланеРемонтовПоID(ТекОбъект.Ремонты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПослеУдаления(Элемент)
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого ЭлементПервогоУровня Из ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы() Цикл
		Если ЭлементПервогоУровня.ПолучитьЭлементы().Количество() = 0 Тогда
			МассивУдаляемыхСтрок.Добавить(ЭлементПервогоУровня);
		КонецЕсли;
	КонецЦикла;	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхСтрок Цикл
		Индекс = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы().Индекс(УдаляемыйЭлемент);
		ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы().Удалить(Индекс);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПередУдалением(Элемент, Отказ)
	
	Отказ = МодифицируемыйОбъектРемонта;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	
	Если ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") ИЛИ ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
		УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.ПолучитьРодителя().Ремонты, ТекСтрокаДерева.Ремонты);
	Иначе
		
		СтрокиВидаРемонтов = ТекСтрокаДерева.ПолучитьЭлементы();
		Для каждого Стр Из СтрокиВидаРемонтов Цикл
			
			УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.Ремонты, Стр.Ремонты, Стр);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииРемонтыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииРемонтыАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланРемонтов
&НаКлиенте
Процедура ПланРемонтовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Копирование Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекСтрокаДерева = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено ИЛИ ТипЗнч(ТекСтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Укажите вид ремонтных работ для ввода данных графика ППР!'"), 20);
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		ТекДанные = Элементы.ПланРемонтов.ТекущиеДанные;
		ТекДанные.ID = Новый УникальныйИдентификатор;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
			ТекДанные.ДатаНачСт = Дата(1,1,1);
			ТекДанные.ДатаКонСт = Дата(1,1,1);
		КонецЕсли;
				
		Если Не Копирование Тогда
			
			ТекСтрокаДереваППР             = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
			ТекДанные.ОбъектРемонтныхРабот = ТекСтрокаДереваППР.ПолучитьРодителя().Ремонты;
			ТекДанные.ВидРемонтныхРабот    = ТекСтрокаДереваППР.Ремонты;
			
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		мНеверныйПериодПоКорректировке = Ложь;			
		ТекСтрокаПланРемонтов = Элемент.ТекущиеДанные;		
		Если ТекСтрокаПланРемонтов.ДатаКонСт < ТекСтрокаПланРемонтов.ДатаНачСт Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Дата окончания периода меньше даты начала (%1 - %2)'"),
				ТекСтрокаПланРемонтов.ДатаНачСт,ТекСтрокаПланРемонтов.ДатаКонСт));
			мНеверныйПериодПоКорректировке = Истина;			
		КонецЕсли;	
		Если ТекСтрокаПланРемонтов.ДатаКон < ТекСтрокаПланРемонтов.ДатаНач Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Дата окончания нового периода меньше даты начала (%1 - %2)'"),
				ТекСтрокаПланРемонтов.ДатаНач,ТекСтрокаПланРемонтов.ДатаКон));
			мНеверныйПериодПоКорректировке = Истина;			
		КонецЕсли;	
	КонецЕсли;
	
	ТекДанныеПланаРемонтов = Элементы.ПланРемонтов.ТекущиеДанные;
	Если ТекДанныеПланаРемонтов<>Неопределено Тогда 
		ДатаНачалаРемонта = ТекДанныеПланаРемонтов.ДатаНач;
		ДатаОкончанияРемонта = ТекДанныеПланаРемонтов.ДатаКон;
	Иначе	
		ДатаНачалаРемонта = Дата(1,1,1);
		ДатаОкончанияРемонта = Дата(1,1,1);	
	КонецЕсли;
	Если  Не ДатаНачалаРемонта = Дата(1,1,1) И Не ДатаОкончанияРемонта = Дата(1,1,1) Тогда
		МассивСтрокВидаРемонта = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот", ТекДанныеПланаРемонтов.ОбъектРемонтныхРабот, ТекДанныеПланаРемонтов.ВидРемонтныхРабот));
		
		Для Каждого СтрокаВидаРемонта Из МассивСтрокВидаРемонта Цикл
			Если СтрокаВидаРемонта.ID <> Элемент.ТекущиеДанные.ID И ((СтрокаВидаРемонта.ДатаНач <= ДатаОкончанияРемонта И СтрокаВидаРемонта.ДатаНач >= ДатаНачалаРемонта)
				ИЛИ (СтрокаВидаРемонта.ДатаКон <= ДатаОкончанияРемонта И СтрокаВидаРемонта.ДатаКон >= ДатаНачалаРемонта)) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для объекта ремонта %1 на период %2 - %3 уже запланирован ремонт с видом %4!'"),
					СтрокаВидаРемонта.ОбъектРемонтныхРабот,ДатаНачалаРемонта,ДатаОкончанияРемонта,СтрокаВидаРемонта.ВидРемонтныхРабот));
				мДублирующиесяРемонтыНаПериод = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПриАктивизацииСтроки(Элемент)
	ДанныеТекущейСтроки = Элементы.ПланРемонтов.ТекущиеДанные;
	Если (НЕ ДанныеТекущейСтроки = Неопределено) Тогда
		Если (НЕ МассивIDДляБлокировки = Неопределено) Тогда
			Если НЕ МассивIDДляБлокировки.НайтиПоЗначению(ДанныеТекущейСтроки.ID) = Неопределено Тогда
				ПопыткаМодификацииСтрокиСоСвязаннымДокументом = Истина;
			Иначе
				ПопыткаМодификацииСтрокиСоСвязаннымДокументом = Ложь;			
			КонецЕсли;	
		КонецЕсли;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
			Элементы.ПланРемонтовУдалить.Доступность = Не ЗначениеЗаполнено(ДанныеТекущейСтроки.ДатаНачСт);
		Иначе
			Элементы.ПланРемонтовУдалить.Доступность = Истина;
		КонецЕсли;
		
		Если ДанныеТекущейСтроки.Замещен Тогда
			Элементы.ДокументыЗаказНаВнПотреблениеДобавитьЗаказ.Доступность = Ложь;
			Элементы.ДокументыЗаказНаВнПотреблениеУдалитьЗаказНаВнПотребление.Доступность = Ложь;
			Элементы.ДокументыЗаказНаВнПотребление.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ДокументыЗаказНаВнПотреблениеДобавитьЗаказ.Доступность = Истина И ПравоИнтерактивноеДобавлениеДокументаЗаказНаВнутреннееПотребление;
			Элементы.ДокументыЗаказНаВнПотреблениеУдалитьЗаказНаВнПотребление.Доступность = Истина И ПравоИнтерактивнаяПометкаУдаленияДокументаЗаказНаВнутреннееПотребление;
			Элементы.ДокументыЗаказНаВнПотребление.ТолькоПросмотр = Ложь;
		КонецЕсли;
		
		Элементы.ДокументыЗаказНаВнПотребление.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ДанныеТекущейСтроки.ID);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередУдалением(Элемент, Отказ)
	Отказ = ПопыткаМодификацииСтрокиСоСвязаннымДокументом Или Не Элементы.ПланРемонтовУдалить.Доступность;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередНачаломИзменения(Элемент, Отказ)
	ТекущаяСтрокаРемонта = Элементы.ПланРемонтов.ТекущиеДанные;
	Если НЕ ТекущаяСтрокаРемонта = Неопределено Тогда
		
		Если ТекущаяСтрокаРемонта.Замещен Или ЗначениеЗаполнено(ТекущаяСтрокаРемонта.ВРамкахОстановочного) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", ТекущаяСтрокаРемонта.ID));
		
		Если МассивСтрок.Количество() > 0 Тогда
			
			СтрокаДляРедактирования = Массивстрок[0];
			
			Если ПопыткаМодификацииСтрокиСоСвязаннымДокументом Тогда
				Отказ = Истина;
			ИначеЕсли Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
				Если ТекущаяСтрокаРемонта.Перенесенный Тогда
					Если ЗначениеКонстантыИспользоватьПриоритетностьПеренесенныхРемонтов() Тогда
						Отказ = Истина;
					Иначе
						Отказ = Ложь;
					КонецЕсли;
				Иначе
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = Элементы.ПланРемонтов.ТекущиеДанные;
	Если ТекущаяСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Хозспособ") Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", , Элемент);
		
	ИначеЕсли ТекущаяСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Подрядный") Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора", , Элемент);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбора исполнителя укажите способ выполнения ремонта.'"));
		Возврат;
	КонецЕсли;
	
	Если ФормаВыбора <> Неопределено Тогда
		ФормаВыбора.Открыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПланРемонтов.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.Исполнитель) = Тип ("СправочникСсылка.Контрагенты") Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСтоимостиРемонтовНаСервере(Новый Структура("ID, ДатаНач, ОбъектРемонтныхРабот, ВидРемонтныхРабот", ТекущиеДанные.ID, ТекущиеДанные.ДатаНач, ТекущиеДанные.ОбъектРемонтныхРабот, ТекущиеДанные.ВидРемонтныхРабот));
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовСпособВыполненияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПланРемонтов.ТекущиеДанные;
	ТекущиеДанные.Исполнитель = "";
	
	РассчитатьСтоимостиРемонтовНаСервере(Новый Структура("ID, ДатаНач, ОбъектРемонтныхРабот, ВидРемонтныхРабот", ТекущиеДанные.ID, ТекущиеДанные.ДатаНач, ТекущиеДанные.ОбъектРемонтныхРабот, ТекущиеДанные.ВидРемонтныхРабот));
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовВидРемонтныхРаботАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовОбъектРемонтныхРаботАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "ПланРемонтовВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.Форма.ФормаДокумента", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыЗаказНаВнПотребление
&НаКлиенте
Процедура ДокументыЗаказНаВнПотреблениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДокументыЗаказНаВнПотребление",ЭтаФорма);
		ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.Форма.ФормаДокумента",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗаказНаВнПотреблениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЭлементТекДанные  = Элемент.ТекущиеДанные;
		Если Не ЭлементТекДанные = Неопределено Тогда
			ЭлементТекДанные.РемонтыОборудования_ID = ТекущиеДанные.ID;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Ложь;
	ПараметрыРасчета_РасчетВыборочный = Ложь;
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета план-графика ППР необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежиме(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Истина;
	ПараметрыРасчета_РасчетВыборочный = Ложь;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета план-графика ППР необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВыборочно(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Ложь;
	ПараметрыРасчета_РасчетВыборочный = Истина;
	
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета план-графика ППР необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежимеВыборочно(Команда)
	
	Если НЕ ОбязательныеПроверкиБезВопросовпередРасчетомППР() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРасчета_РасчетВФоне = Истина;
	ПараметрыРасчета_РасчетВыборочный = Истина;
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Перед выполнением расчета план-графика ППР необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	РассчитатьФрагмент();
	
КонецПроцедуры


&НаКлиенте
Процедура ПоказыватьПоложение(Команда)
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка = НЕ Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка;
	
	мОтображатьПоложение = Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьПоложение.Пометка;
	
	// †6
	ЗаписатьДеревоППРСУчетомПозиции();
 	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();
	РазвернутьВсеВетвиДеревьев();
		
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	СписокСтруктур = ЗаполнитьСписокСтруктурНаСервере(СтруктураИерархии, Истина);
	
	СтруктураИерархииПредыдущая = СтруктураИерархии;
	
	ТекущаяИерархия = СписокСтруктур.НайтиПоЗначению(СтруктураИерархии);
	СписокСтруктур.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("НастройкаИерархииЗавершение",ЭтотОбъект),НСтр("ru = 'Выберите вид иерархии:'"), ТекущаяИерархия);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОР(Команда)
	
	ЭлементДерево = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции;
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",, ЭлементДерево);
	ФормаВыбора.Открыть();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРемонт(Команда)
	
	ЭлементДерево = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции;
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора",, ЭлементДерево);
	ПользовательскийОтбор = ФормаВыбора.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
	ПользовательскийОтбор.Элементы.Очистить();
	
	ЭлементОтбора = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ПланГрафикППР");
	ЭлементОтбора.ВидСравнения         = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
	
	ФормаВыбора.Открыть();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
	Новый Структура("КлючНазначенияИспользования, Организация, Подразделение, НеУчаствуетВПланировании, СтруктураИерархии", 
		"торо_ПланГрафикРемонта", Объект.ОрганизацияВладелец, Объект.ПодразделениеВладелец, Истина,СтруктураИерархии), 
		Элементы.ДеревоПланаГрафикаППРСУчетомПозиции, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей(Команда)
	
    Перем ФормаЗаполненияИсполнителей;
    
    ФормаЗаполненияИсполнителей = ПолучитьФорму("Документ.торо_ПланГрафикРемонта.Форма.ФормаАвтозаполненияИсполнителей",
    	Новый Структура("ДокументППР, ТаблицаРемонтовИзППР", Объект.Ссылка, Объект.ПланРемонтов), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
		
    ФормаЗаполненияИсполнителей.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
    ФормаЗаполненияИсполнителей.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьИсполнителейЗавершение",ЭтотОбъект);
    ФормаЗаполненияИсполнителей.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗамещенные(Команда)
	
	Кнопка = Элементы.ПланРемонтовОтображатьЗамещенные;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ТекущаяСтрока = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	Если СтрокаВыбрана Тогда
		УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГанта(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Неопределено;

	Состояние("Построение диаграммы ремонтов Плана-графика...");
    ПостроитьДиаграммуГантаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованию(Команда)
	
	Если мОтображатьПоложение Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сортировать объекты ремонта в порядке следования в дереве возможно только при отключенной опции ""Отображать положение""'"));
		Возврат;
	КонецЕсли;
	Элементы.СортироватьПоНаименованию.Пометка = НЕ Элементы.СортироватьПоНаименованию.Пометка;
	СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;
	
	Если ДиаграммаГантаППР.Точки.Количество() > 0 Тогда
		
		СписокКнопок = Новый СписокЗначений;
		СписокКнопок.Добавить(КодВозвратаДиалога.Да,НСтр("ru = 'Перестроить сейчас'"));
		СписокКнопок.Добавить(КодВозвратаДиалога.Нет,НСтр("ru = 'Перестроить позже (вручную)'"));
		ПоказатьВопрос(
			Новый ОписаниеОповещения("СортироватьПоНаименованиюЗавершение",ЭтаФорма),
			НСтр("ru = 'Для применения настроек сортировки необходимо перестроить диаграмму.'"),
			СписокКнопок,,КодВозвратаДиалога.Да,НСтр("ru = 'Изменение настроек'"));
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованиюЗавершение(Результат,ДопПараметры = Неопределено) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПостроитьДиаграммуГанта(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректироватьППРПоЛимитам(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Корректировать можно только документ с соответствующим видом операции!'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.ПланРемонтов.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Корректировка ППР по лимитам невозможна, так как отсутствуют запланированные ремонты!'"));	
		Возврат;
	КонецЕсли;
	
	ДатаНачалаЛимита = Дата(3999,1,1);
	ДатаОкончанияЛимита = Дата(1,1,1);
	
	МассивТЧ = Новый Массив;	
	Для каждого Стр Из Объект.ПланРемонтов Цикл
		
		Если Стр.ДатаНач < ДатаНачалаЛимита Тогда
			ДатаНачалаЛимита = Стр.ДатаНач;
		КонецЕсли;
		Если Стр.ДатаКон > ДатаОкончанияЛимита Тогда
			ДатаОкончанияЛимита = Стр.ДатаКон;
		КонецЕсли;
		
		СтрТЧ = Новый Структура("ID, ВидРемонтныхРабот, ДатаКон, ДатаНач, Документ, Исполнитель, ОбъектРемонтныхРабот, СпособВыполнения, Отменен, СуммаРемонта, Замещен");
		ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
		МассивТЧ.Добавить(СтрТЧ);
	
	КонецЦикла; 
	
	ФормаОбработки = ПолучитьФорму("Обработка.торо_КорректировкаППРПоРМ.Форма",Новый Структура("ДатаНачалаЛимита, ДатаОкончанияЛимита, СтруктураПланаРемонтов", Год(ДатаНачалаЛимита), Год(ДатаОкончанияЛимита), МассивТЧ), Объект.Ссылка, Объект.Ссылка);
	ФормаОбработки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОценкуРМ(Команда)
	
	Если объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Установка оценок РМ возможна только для документов с видом операции ""План ремонтов ""!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Модифицированность Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьОценкуРМЗавершение", ЭтотОбъект), НСтр("ru = 'Для продолжения операции необходимо записать документ. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	УстановитьОценкуРМФрагмент();
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьСтоимостиРемонтов(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСтоимостиРемонтовЗавершение", ЭтотОбъект), НСтр("ru = 'Перезаполнить плановые стоимости ремонтов?'"),РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЦепочку(Команда)
	
	ТекОбъектРемонтаЦепочки = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	Если ТипЗнч(ТекОбъектРемонтаЦепочки.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		СписокЦепочек = ПолучитьСписокЦепочек(ТекОбъектРемонтаЦепочки.Ремонты);
		
		ФормаВыбораЦепочек = ПолучитьФорму("Справочник.торо_ЦепочкиРемонта.ФормаВыбора", Новый Структура("СписокОтбора", СписокЦепочек), Элементы.ДеревоПланаГрафикаППРСУчетомПозиции, Объект.Ссылка);
		ФормаВыбораЦепочек.Открыть();
		Модифицированность = истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЦепочек(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовИЦепочекДляПланаГрафикаППР",
		Новый Структура("КлючНазначенияИспользования, Организация, Подразделение, НеУчаствуетВПланировании", 
							"торо_ПланГрафикРемонта", Объект.ОрганизацияВладелец, Объект.ПодразделениеВладелец, Истина), 
		Элементы.ДеревоПланаГрафикаППРСУчетомПозиции, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаППР.Точки Цикл
		ДиаграммаГантаППР.СвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаППР.Точки Цикл
		ДиаграммаГантаППР.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказательЛегенду(Команда)
	Элементы.ПоказательЛегенду.Пометка = НЕ Элементы.ПоказательЛегенду.Пометка;
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказательЛегенду.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказНаВнПотребление(Команда)
	ТекущиеДанные = Элементы.ДокументыЗаказНаВнПотребление.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗаказСсылка",ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"         ,ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,"Удаление связи с заказом на внутреннее потребление");
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказ(Команда)
	
	ТекущийРемонт = Элементы.ПланРемонтов.ТекущиеДанные;
	
	Если Не ТекущийРемонт = Неопределено Тогда
		
		стрПараметров = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ДатаНач, ID, ДатаКон, Склад");
		ЗаполнитьЗначенияСвойств(стрПараметров, ТекущийРемонт);
		
		стрВозврата = СоздатьДокумент_ЗаказНаВнутреннеПотребление(стрПараметров);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов",ЭтаФорма,стрВозврата.СтруктураПередаваемыхВОбработчикПараметров);
		ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.Форма.ФормаДокумента",стрВозврата.СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);

	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнутренниеЗаказы(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Показать(Новый ОписаниеОповещения("СоздатьВнутренниеЗаказыЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВнутренниеЗаказыЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда 
		ВыбранныйПериод = Период;
	Иначе
		Возврат;
	КонецЕсли;	
	
	Для каждого текРемонт из Объект.ПланРемонтов Цикл
		
		Если текРемонт.ДатаНач >= ВыбранныйПериод.ДатаНачала
			и текРемонт.ДатаКон <= ВыбранныйПериод.ДатаОкончания
			и НЕ текРемонт.Замещен
			Тогда
			
			стрПараметров = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ДатаНач, ID, ДатаКон, Склад");
			ЗаполнитьЗначенияСвойств(стрПараметров, ТекРемонт);
			СоздатьДокумент_ЗаказНаВнутреннеПотребление(стрПараметров, Истина);		
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УтвердитьСтатус(Команда)
	
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетППР

///////////////////////////////////////////////
// Расчет сразу

&НаКлиенте
Процедура РассчитатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Запись документа невозможна!'"));
		Если Объект.ДатаПланирования > Дата (3999,12,31,23,59,59) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата планирования не может быть больше 31.12.3999 !'"));
		КонецЕсли;
		Возврат;
	КонецПопытки;
	
	РассчитатьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагмент()
	
	Если ПараметрыРасчета_РасчетВыборочный Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РассчитатьВФоне", ПараметрыРасчета_РасчетВФоне);
		ПараметрыФормы.Вставить("мОтображатьПоложение", мОтображатьПоложение);
		ПараметрыФормы.Вставить("СтруктураИерархии", СтруктураИерархии);
		ПараметрыФормы.Вставить("ОбъектыРемонта", Объект.ОбъектыРемонта);
		ПараметрыФормы.Вставить("ДокументППР", Объект.Ссылка);
		
		Оповещение = Новый ОписаниеОповещения("РассчитатьВыборочноПослеВыбораРемонтов", ЭтотОбъект);
		ОткрытьФорму("Документ.торо_ПланГрафикРемонта.Форма.ФормаВыбораРемонтов", ПараметрыФормы, ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		МассивОР = Новый Массив;
		
		Для каждого Стр Из Объект.ОбъектыРемонта Цикл
			СтрТЧ = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ЭтоЦепочка");
			ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
			МассивОР.Добавить(СтрТЧ);
		КонецЦикла;
		
		РассчитатьПоМассивуОР(МассивОР);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВыборочноПослеВыбораРемонтов(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОР = Новый Массив;
	
	Для каждого Стр Из Результат.ОбъектыРемонта Цикл
		СтрТЧ = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ЭтоЦепочка");
		ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
		МассивОР.Добавить(СтрТЧ);
	КонецЦикла;
	
	РассчитатьПоМассивуОР(МассивОР);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоМассивуОР(МассивОР)
	
	ПараметрыРасчета_МассивВыбранныхОР.Очистить();
	Для каждого СтруктураОР из МассивОР Цикл
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета_МассивВыбранныхОР.Добавить(), СтруктураОР);
	КонецЦикла;
	
	Если НЕ ПараметрыРасчета_РасчетВФоне Тогда
		
		ФОИспользоватьВозможностьОтменыРемонтов = ПолучитьЗначениеОпции("торо_ИспользоватьВозможностьОтменыРемонтов"); 
		
		Если ФОИспользоватьВозможностьОтменыРемонтов Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОкончаниеРассчетаППР", ЭтаФорма);
			
			ПлановыеРемонтыНеНачатыРаботы = ПроверкаНеНачатыРемонтныеРаботы(МассивОР, Объект.ДатаПланирования);
			ОтменятьЗакрытиеЗаявок = НужноЛиОтменятьЗакрытиеЗаявок();
			
			Если ПлановыеРемонтыНеНачатыРаботы.Количество() > 0 Тогда
				
				Если ОтменятьЗакрытиеЗаявок Тогда
					ТекстВопроса = НСтр("ru = 'Не все запланированные работы закрыты актами (начаты работы). Они будут отменены. Хотите оставить какие-либо работы?'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Не все запланированные работы закрыты актами (начаты работы). Хотите внести корректировки (отменить, перенести) в эти работы?'");
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура("ОписаниеОповещения, ПлановыеРемонтыНеНачатыРаботы, ОтменятьЗакрытиеЗаявок", ОписаниеОповещения, ПлановыеРемонтыНеНачатыРаботы, ОтменятьЗакрытиеЗаявок);
				ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьФрагментЗавершение", ЭтотОбъект, СтруктураПараметров), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОкончаниеРассчетаППР(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = ДополнительныеПараметры.ОписаниеОповещения;
	ПлановыеРемонтыНеНачатыРаботы = ДополнительныеПараметры.ПлановыеРемонтыНеНачатыРаботы;
	ОтменятьЗакрытиеЗаявок = ДополнительныеПараметры.ОтменятьЗакрытиеЗаявок;
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ДатаПланирования = Объект.ДатаПланирования - 1;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Владелец", Объект.Ссылка);
		ПараметрыФормы.Вставить("ДатаАктуальности", ДатаПланирования);
		ПараметрыФормы.Вставить("ЗакрываемыеРемонты", ПлановыеРемонтыНеНачатыРаботы);
		ПараметрыФормы.Вставить("ДоступностьКнопкиЗаполнить", Ложь);
		
		ОткрытьФорму("Обработка.торо_ЗакрытиеЗаявокИРемонтов.Форма", ПараметрыФормы, Объект.Ссылка, Объект.Ссылка,,,ОписаниеОповещения);
		
	Иначе
		
		Если ОтменятьЗакрытиеЗаявок Тогда
			СоздатьДокументЗакрытияЗаявокИРемонтов(Объект.Ссылка, Объект.Организация, ПлановыеРемонтыНеНачатыРаботы, Объект.ДатаПланирования);
		КонецЕсли;
		
		ОкончаниеРассчетаППР(Неопределено, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППР(Результат, Параметры) Экспорт
	
	ПроверкаПередРассчетомПланГрафика(Новый ОписаниеОповещения("ОкончаниеРассчетаППРПослеПроверки",ЭтотОбъект,
																				Новый Структура("Результат, Параметры", Результат, Параметры)));
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРПослеПроверки(Результат, Параметры) Экспорт
	
	ВыполнятьРасчет = Результат;
	
	Если ВыполнятьРасчет = Истина Тогда	
		
		ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании = ПолучитьЗначениеОпции("торо_РассчитыватьПлановуюСтоимостьРемонтовПриПланировании");
		
		Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
			Параметры = Новый Структура;
		КонецЕсли;
		Параметры.Вставить("ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании", ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании);
		
		Если ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОкончаниеРассчетаППРЗавершение", ЭтотОбъект, Параметры), НСтр("ru = 'Рассчитать плановые стоимости ремонтов, после расчета план-графика ППР?'"), РежимДиалогаВопрос.ДаНет);
		Иначе
			ОкончаниеРассчетаППРЗавершение(КодВозвратаДиалога.Нет, Параметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании = ДополнительныеПараметры.ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании;
	
	Если ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании 
		И РезультатВопроса = КодВозвратаДиалога.Да 
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		РассчитыватьСтоимости = Истина;
	Иначе
		РассчитыватьСтоимости = Ложь;
	КонецЕсли;
	
	ПланРемонтовID = Новый Массив;
	Для каждого Стр Из Объект.ПланРемонтов Цикл
		ПланРемонтовID.Добавить(Стр.ID);
	КонецЦикла;
	
	ВопросОПерезаполнении = Ложь;
	
	Если НЕ ПараметрыРасчета_РасчетВФоне Тогда
		
		ВопросОПерезаполнении = (Объект.ПланРемонтов.Количество() > 0);
		
	Иначе
		
		СтруктураПоиска = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот");
		Для каждого СтрокаОР из ПараметрыРасчета_МассивВыбранныхОР Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОР);
			СтрокиРемонта = Объект.ПланРемонтов.НайтиСтроки(СтруктураПоиска);
			Если СтрокиРемонта.Количество() > 0 Тогда
				ВопросОПерезаполнении = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ВопросОПерезаполнении Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОкончаниеРассчетаППРЗавершениеЗавершение", ЭтотОбъект, Новый Структура("РассчитыватьСтоимости", РассчитыватьСтоимости)), НСтр("ru = 'Данные запланированных ремонтов будут перезаполнены! Продолжить?'"),
			РежимДиалогаВопрос.ДаНет, 60);
		Возврат;
		
	КонецЕсли; 
	
	ОкончаниеРассчетаППРЗавершениеФрагмент(РассчитыватьСтоимости);
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРЗавершениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    РассчитыватьСтоимости = ДополнительныеПараметры.РассчитыватьСтоимости;
    
    Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ОкончаниеРассчетаППРЗавершениеФрагмент(РассчитыватьСтоимости);

КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеРассчетаППРЗавершениеФрагмент(РассчитыватьСтоимости)    
	
	Если НЕ ПараметрыРасчета_РасчетВФоне Тогда
		
		ЗаписатьДеревоППРСУчетомПозиции();
		
		Если ПараметрыРасчета_МассивВыбранныхОР.Количество() = 0 Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заданы объекты ремонтных работ для заполнения плана-графика ППР!'"));
			Возврат;
			
		КонецЕсли;
		
		РассчитатьППРНаСервере(РассчитыватьСтоимости);
		ОбновитьДоступностьДляРедактирования();
		
		Если ПоказыватьСообщениеПриРасчетеППР Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Внимание! 
			|График ППР рассчитан с учетом выполнения ожидаемых ремонтов в интервале между 
			|последним ремонтом/датой ввода в эксплуатацию/датой фактической наработки (в зависимости от настроек) 
			|и датой планирования графика ППР. Выполненные ремонты ОР за периоды позже периода расчета считаются приоритетными,
			|их наличие может привести к отсутствию плановых ремонтов в результате расчета.'");
			Сообщение.Сообщить();
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыРасчета_МассивВыбранныхОР.Количество() = 0 Тогда
			
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Не заданы объекты ремонтных работ для заполнения плана-графика ППР!'"));
			Возврат;
			
		КонецЕсли;
		
		ЗаписатьДанныеВРегистр(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьППРНаСервере(РассчитыватьСтоимости)
	
	Если НЕ ПараметрыРасчета_РасчетВыборочный Тогда
		
		ПланРемонтов = торо_РасчетППР.РасчетППР(Объект.Ссылка, РассчитыватьСтоимости);
		Если ТипЗнч(ПланРемонтов) = Тип("ТаблицаЗначений") Тогда
			Объект.ПланРемонтов.Загрузить(ПланРемонтов);
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе
		
		ПланРемонтов = торо_РасчетППР.РасчетППР(Объект.Ссылка, РассчитыватьСтоимости,,,ПараметрыРасчета_МассивВыбранныхОР.Выгрузить());
				
		Если ТипЗнч(ПланРемонтов) = Тип("ТаблицаЗначений") Тогда
			СтруктураПоиска = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот");
			
			Для каждого СтрокаОР из ПараметрыРасчета_МассивВыбранныхОР Цикл
				Если СтрокаОР.ЭтоЦепочка Тогда
					Для каждого ВидРемонтаИзЦепочки из СтрокаОР.ВидРемонтныхРабот.ПоследовательностьРемонтов Цикл
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОР);
						СтруктураПоиска.ВидРемонтныхРабот = ВидРемонтаИзЦепочки.ВидРемонта;
						ЗаменитьСтрокиПланаРемонтовПоСтруктуреПоиска(ПланРемонтов, СтруктураПоиска);
					КонецЦикла;
				Иначе
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаОР);
					ЗаменитьСтрокиПланаРемонтовПоСтруктуреПоиска(ПланРемонтов, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
			
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаменитьСтрокиПланаРемонтовПоСтруктуреПоиска(ПланРемонтов, СтруктураПоиска)
	
	СтрокиРемонта = Объект.ПланРемонтов.НайтиСтроки(СтруктураПоиска);
	Для каждого СтрокаРемонта из СтрокиРемонта Цикл
		Объект.ПланРемонтов.Удалить(СтрокаРемонта);
	КонецЦикла;
	
	НовыеСтрокиРемонта = ПланРемонтов.НайтиСтроки(СтруктураПоиска);
	Для каждого НоваяСтрокаРемонта из НовыеСтрокиРемонта Цикл
		НовСтр = Объект.ПланРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, НоваяСтрокаРемонта);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВРегистр(Ссылка)
	
	НачатьТранзакцию();
		
	ПоследниеЗаписиПоППР = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СрезПоследних(ТекущаяДата(),Новый Структура("ДокументППР", Ссылка));
	ИзменениеВыборочностиРасчета = Ложь;
	
	Если (ПоследниеЗаписиПоППР <> Неопределено И ПоследниеЗаписиПоППР.Количество() > 0 И Не ПоследниеЗаписиПоППР[0].Рассчитан) Тогда
		
		СуществующаяЗапись = ПоследниеЗаписиПоППР[0];
		Если СуществующаяЗапись.ВыборочныйРасчет <> ПараметрыРасчета_РасчетВыборочный Тогда
			
			ИзменениеВыборочностиРасчета = Истина;
			
			ППРДляРасчетаМенеджер = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СоздатьМенеджерЗаписи();
			ППРДляРасчетаМенеджер.ДокументППР = СуществующаяЗапись.ДокументППР;
			ППРДляРасчетаМенеджер.Период = СуществующаяЗапись.Период;
			ППРДляРасчетаМенеджер.Прочитать();
			Если ППРДляРасчетаМенеджер.Выбран() Тогда
				ППРДляРасчетаМенеджер.ВыборочныйРасчет = ПараметрыРасчета_РасчетВыборочный;
				ППРДляРасчетаМенеджер.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ППРДляРасчетаМенеджер = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СоздатьМенеджерЗаписи();
		ППРДляРасчетаМенеджер.ДокументППР = Ссылка;
		ППРДляРасчетаМенеджер.Период = ТекущаяДата();
		ППРДляРасчетаМенеджер.ВыборочныйРасчет = ПараметрыРасчета_РасчетВыборочный;
		ППРДляРасчетаМенеджер.Записать();
		
	КонецЕсли;
		
	Если ПараметрыРасчета_РасчетВыборочный Тогда
		
		НаборЗаписейОбъектовРемонта = РегистрыСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.СоздатьНаборЗаписей();
		НаборЗаписейОбъектовРемонта.Отбор.ДокументППР.Установить(Ссылка);
		НаборЗаписейОбъектовРемонта.Прочитать();
		НаборЗаписейОбъектовРемонта.Очистить();
		
		Для каждого СтрокаОР из ПараметрыРасчета_МассивВыбранныхОР Цикл
			НовЗапись = НаборЗаписейОбъектовРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НовЗапись, СтрокаОР);
			НовЗапись.ДокументППР = Ссылка;
		КонецЦикла;
		
		НаборЗаписейОбъектовРемонта.Записать(Истина);
		
	Иначе
		
		Если ИзменениеВыборочностиРасчета Тогда
			НаборЗаписейОбъектовРемонта = РегистрыСведений.торо_ОбъектыРемонтаДляВыборочногоРасчетаППРВФоновомРежиме.СоздатьНаборЗаписей();
			НаборЗаписейОбъектовРемонта.Отбор.ДокументППР.Установить(Ссылка);
			НаборЗаписейОбъектовРемонта.Записать(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры


///////////////////////////////////////////////
// Проверки

&НаКлиенте
Функция ОбязательныеПроверкиБезВопросовПередРасчетомППР()
	
	Отказ = Ложь;
	
	Если ИмеютсяДокументыНаОсновании(Объект.Ссылка) Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Перерасчет графика ППР невозможен, т.к. имеются документы, введенные на его основании.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПроверитьПравоДоступа() Тогда 
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Нарушение прав доступа!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена начальная дата планирования!'"), СтатусСообщения.Внимание);
		Отказ = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда
		ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для расчёта плана-графика ремонтов необходимо задать период планирования!'"));
		Отказ = Истина;
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафика(Знач Оповещение)
	
	ДатаПланированияОкончание = РассчитатьДатуОкончанияПланирования(Объект.ПериодичностьДетализации, Объект.КоличествоПериодов, Объект.ДатаПланирования);
	
	Если ДатаПланированияОкончание = Дата(4000,1,1) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаПередРассчетомПланГрафикаЗавершение1", ЭтотОбъект, Новый Структура("ДатаПланированияОкончание, Оповещение", ДатаПланированияОкончание, Оповещение)), НСтр("ru = 'Расчет план-графика ППР может быть выполнен только до 4000 года!'"));
		Возврат;
	КонецЕсли;
	
	ПроверкаПередРассчетомПланГрафикаФрагмент(ДатаПланированияОкончание, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаЗавершение1(ДополнительныеПараметры) Экспорт
	
	ДатаПланированияОкончание = ДополнительныеПараметры.ДатаПланированияОкончание;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ВыполнитьОбработкуОповещения(Оповещение,Ложь);
	
	ПроверкаПередРассчетомПланГрафикаФрагмент(ДатаПланированияОкончание, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаФрагмент(Знач ДатаПланированияОкончание, Знач Оповещение)
	
	Переменная = Объект.ДатаПланирования;
	НужныеГода = Новый СписокЗначений;
	Пока Переменная < ДатаПланированияОкончание Цикл
		НужныеГода.Добавить(ГОД(Переменная));
		Переменная = ДобавитьМесяц(Переменная,12);
	КонецЦикла;
	Если НужныеГода.НайтиПоЗначению(ГОД(ДатаПланированияОкончание)) = Неопределено Тогда 
		НужныеГода.Добавить(ГОД(ДатаПланированияОкончание));
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		МассивОР = Новый Массив;
		Для каждого Стр Из ПараметрыРасчета_МассивВыбранныхОР Цикл
			СтрТЧ = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, ЭтоЦепочка");
			ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
			МассивОР.Добавить(СтрТЧ);
		КонецЦикла;
		
		Если ПроверкаНаПересеченияСДругимиППР(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.Ссылка, ДатаПланированияОкончание, МассивОР) Тогда
			ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполненностьГрафика(Объект.ДатаПланирования, ДатаПланированияОкончание, НужныеГода, Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаПередРассчетомПланГрафикаЗавершение", ЭтотОбъект,Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Не заполнен календарь в справочнике ""График работ"". Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьОбработкуОповещения(Оповещение,Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Иначе 
		ВыполнитьОбработкуОповещения(Оповещение,Ложь);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////
// вспомогательное

&НаСервереБезКонтекста
Функция ПроверитьправоДоступа()
	
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.торо_ПланГрафикРемонта) 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеОпции(Опция)
	
	Возврат ПолучитьФункциональнуюОпцию(Опция);
	
КонецФункции

&НаСервереБезКонтекста
Функция НужноЛиОтменятьЗакрытиеЗаявок()
	
	Возврат Константы.торо_ОтменятьЗакрытиеЗаявок.Получить();

КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаНеНачатыРемонтныеРаботы(МассивОР, ДатаПланирования)
	
	ОбъектыРемонта = Новый ТаблицаЗначений;
	ОбъектыРемонта.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ОбъектыРемонта.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	
	Для каждого Стр Из МассивОР Цикл
	
		НС = ОбъектыРемонта.Добавить();
		НС.ОбъектРемонтныхРабот = Стр.ОбъектРемонтныхРабот;
		НС.ВидРемонтныхРабот = Стр.ВидРемонтныхРабот;
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОРДокумента.ВидРемонтныхРабот,
	               |	ТаблицаОРДокумента.ОбъектРемонтныхРабот
	               |ПОМЕСТИТЬ ТаблицаОРДокумента
	               |ИЗ
	               |	&ТаблицаОРДокумента КАК ТаблицаОРДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_Ремонты.Регистратор,
	               |	торо_Ремонты.ID,
	               |	торо_Ремонты.ОбъектРемонта,
	               |	торо_Ремонты.ВидРемонта
	               |ПОМЕСТИТЬ РемонтыЗаявок
	               |ИЗ
	               |	РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОРДокумента КАК ТаблицаОРДокумента
	               |		ПО торо_Ремонты.ВидРемонта = ТаблицаОРДокумента.ВидРемонтныхРабот
	               |			И торо_Ремонты.ОбъектРемонта = ТаблицаОРДокумента.ОбъектРемонтныхРабот
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_ЗаявкаНаРемонт)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РемонтыЗаявок.ID,
	               |	РемонтыЗаявок.Регистратор
	               |ПОМЕСТИТЬ РемонтыСАктамиНарядами
	               |ИЗ
	               |	РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтыЗаявок КАК РемонтыЗаявок
	               |		ПО торо_Ремонты.ID = РемонтыЗаявок.ID
	               |ГДЕ
	               |	(ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_НарядНаВыполнениеРемонтныхРабот)
	               |			ИЛИ ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_АктОВыполненииЭтапаРабот))
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_Ремонты.ID,
	               |	РемонтыСАктамиНарядами.Регистратор
	               |ПОМЕСТИТЬ РемонтыЗаявокСАктамиНарядами
	               |ИЗ
	               |	РемонтыСАктамиНарядами КАК РемонтыСАктамиНарядами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО (торо_Ремонты.Регистратор = РемонтыСАктамиНарядами.Регистратор)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот
	               |ПОМЕСТИТЬ РемонтыПлановыеИДефекты
	               |ИЗ
	               |	ТаблицаОРДокумента КАК ТаблицаОРДокумента
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	               |		ПО ТаблицаОРДокумента.ВидРемонтныхРабот = торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот
	               |			И ТаблицаОРДокумента.ОбъектРемонтныхРабот = торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот
	               |ГДЕ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот <= &ДатаАктуальности
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	РемонтыПлановыеИДефекты.ID
	               |ПОМЕСТИТЬ РемонтыПлановыеСПодчиненными
	               |ИЗ
	               |	РемонтыПлановыеИДефекты КАК РемонтыПлановыеИДефекты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО РемонтыПлановыеИДефекты.ID = торо_Ремонты.ID
	               |			И (ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_НарядНаВыполнениеРемонтныхРабот)
	               |				ИЛИ ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_АктОВыполненииЭтапаРабот))
	               |ГДЕ
	               |	торо_Ремонты.Регистратор ЕСТЬ NULL 
	               |	И НЕ РемонтыПлановыеИДефекты.ID В
	               |				(ВЫБРАТЬ
	               |					РемонтыЗаявокСАктамиНарядами.ID
	               |				ИЗ
	               |					РемонтыЗаявокСАктамиНарядами КАК РемонтыЗаявокСАктамиНарядами)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РемонтыЗаявок.Регистратор,
	               |	РемонтыЗаявок.ID,
	               |	РемонтыЗаявок.ОбъектРемонта,
	               |	РемонтыЗаявок.ВидРемонта
	               |ПОМЕСТИТЬ Заявки
	               |ИЗ
	               |	РемонтыЗаявок КАК РемонтыЗаявок
	               |ГДЕ
	               |	НЕ РемонтыЗаявок.ID В
	               |				(ВЫБРАТЬ
	               |					РемонтыЗаявокСАктамиНарядами.ID
	               |				ИЗ
	               |					РемонтыЗаявокСАктамиНарядами КАК РемонтыЗаявокСАктамиНарядами)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот КАК ВидРемонта,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот КАК ДатаНачала,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаОкончанияРемонтныхРабот КАК ДатаОкончания,
	               |	ВЫБОР
	               |		КОГДА Заявки.Регистратор ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЕстьЗаявка,
	               |	Заявки.Регистратор КАК Заявка,
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор,
	               |	Константы.торо_ОтменятьЗакрытиеЗаявок КАК Отменен,
	               |	Константы.торо_ПричинаЗакрытияЗаявок КАК ПричинаЗакрытия
	               |ИЗ
	               |	РемонтыПлановыеСПодчиненными КАК РемонтыПлановыеСПодчиненными
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	               |			ЛЕВОЕ СОЕДИНЕНИЕ Заявки КАК Заявки
	               |			ПО торо_ПлановыеРемонтныеРаботыСрезПоследних.ID = Заявки.ID
	               |		ПО РемонтыПлановыеСПодчиненными.ID = торо_ПлановыеРемонтныеРаботыСрезПоследних.ID,
	               |	Константы КАК Константы
	               |ГДЕ
	               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот <= &ДатаАктуальности
	               |	И НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен
	               |	И НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаНачала";
	Запрос.УстановитьПараметр("ДатаАктуальности", ДатаПланирования-1);
	Запрос.УстановитьПараметр("ТаблицаОРДокумента", ОбъектыРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтрТЧ = Новый Структура("ID, ОбъектРемонта, ВидРемонта, ДатаНачала, ДатаОкончания, ЕстьЗаявка, Заявка, Регистратор, Отменен, ПричинаЗакрытия");
		ЗаполнитьЗначенияСвойств(СтрТЧ, Выборка);
		МассивВозврата.Добавить(СтрТЧ);
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СоздатьДокументЗакрытияЗаявокИРемонтов(Ссылка, Организация, ПлановыеРемонтыНеНачатыРаботы, ДатаПланирования)
	
	ДокументЗакрытиеЗаявокИРемонтов = Документы.торо_ЗакрытиеЗаявокИРемонтов.СоздатьДокумент();
	ДокументЗакрытиеЗаявокИРемонтов.ППРИнициатор = Ссылка;
	ДокументЗакрытиеЗаявокИРемонтов.Организация = Организация;
	
	Для каждого Стр Из ПлановыеРемонтыНеНачатыРаботы Цикл
		НС = ДокументЗакрытиеЗаявокИРемонтов.ЗакрываемыеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
		
		Если Стр.ЕстьЗаявка Тогда
			НСЗаявка = ДокументЗакрытиеЗаявокИРемонтов.ЗакрываемыеЗаявки.Добавить();
			ЗаполнитьЗначенияСвойств(НСЗаявка, Стр);
		КонецЕсли;
	КонецЦикла;
			
	ДокументЗакрытиеЗаявокИРемонтов.ДатаАктуальности = ДатаПланирования-1;
	ДокументЗакрытиеЗаявокИРемонтов.Дата = ТекущаяДата();
	
	Попытка
		ДокументЗакрытиеЗаявокИРемонтов.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать документ ""Закрытие заявок и ремонтов""! '") + ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверкаНаПересеченияСДругимиППР(ДатаПланирования, ПериодичностьДетализации, Ссылка, ДатаОкончанияПланирования, ОбъектыРемонта)
	
	ТаблицаПроверкиПериодовПланирования = Новый ТаблицаЗначений;
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ПериодичностьДетализации", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ДатаПланирования", Новый ОписаниеТипов("Дата"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ДатаОкончанияПланирования", Новый ОписаниеТипов("Дата"));
	ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.торо_ПланГрафикРемонта"));
	
	Для каждого Стр Из ОбъектыРемонта Цикл
	
		НС = ТаблицаПроверкиПериодовПланирования.Добавить();
		НС.ОбъектРемонтныхРабот = Стр.ОбъектРемонтныхРабот;
		НС.ВидРемонтныхРабот = Стр.ВидРемонтныхРабот;
		НС.ПериодичностьДетализации = ПериодичностьДетализации;
		НС.ДатаПланирования = ДатаПланирования;
		НС.ДатаОкончанияПланирования = ДатаОкончанияПланирования;
		НС.Регистратор = Ссылка;
	
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПроверкиПериодовПланирования.ОбъектРемонтныхРабот,
	               |	ТаблицаПроверкиПериодовПланирования.ПериодичностьДетализации,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаПланирования,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования,
	               |	ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот,
	               |	ТаблицаПроверкиПериодовПланирования.Регистратор
	               |ПОМЕСТИТЬ ТаблицаПроверкиПериодовПланирования1
	               |ИЗ
	               |	&ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ДатаПланирования),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ПериодичностьДетализации),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ОбъектРемонтныхРабот),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.Регистратор),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ВидРемонтныхРабот)
	               |ИЗ
	               |	РегистрСведений.торо_ПериодыПланированияППР КАК торо_ПериодыПланированияППР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиПериодовПланирования1 КАК ТаблицаПроверкиПериодовПланирования1
	               |		ПО торо_ПериодыПланированияППР.ОбъектРемонтныхРабот = ТаблицаПроверкиПериодовПланирования1.ОбъектРемонтныхРабот
	               |			И торо_ПериодыПланированияППР.ВидРемонтныхРабот = ТаблицаПроверкиПериодовПланирования1.ВидРемонтныхРабот
	               |			И торо_ПериодыПланированияППР.ДатаПланирования <= ТаблицаПроверкиПериодовПланирования1.ДатаОкончанияПланирования
	               |			И торо_ПериодыПланированияППР.ДатаОкончанияПланирования >= ТаблицаПроверкиПериодовПланирования1.ДатаПланирования
	               |			И торо_ПериодыПланированияППР.Регистратор <> ТаблицаПроверкиПериодовПланирования1.Регистратор";
	
	Запрос.УстановитьПараметр("ТаблицаПроверкиПериодовПланирования", ТаблицаПроверкиПериодовПланирования);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для оборудования %1 и вида ремонта ""%2"" на данный период уже составлен документ планирования:
				|	%3!'"),Выборка.ОбъектРемонтныхРаботПредставление,Выборка.ВидРемонтныхРаботПредставление,Выборка.РегистраторПредставление), СтатусСообщения.Важное); 
			
		КонецЦикла;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции


#КонецОбласти

#Область Согласование

&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт 
	
	торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);
		
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
	
	УправлениеВидимостью(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СогласующиеРегистр.Количество() > 0 Тогда
					
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент",Элемент)),
						НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"), РежимДиалогаВопрос.ДаНет);
								
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	               |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.ПланРемонтов.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивID =Объект.ПланРемонтов.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.ПроверитьДокументНаСвязанныеДокументыПоID(Объект.Ссылка, МассивID);
	Если МассивIDДляБлокировки.Количество() > 0 Тогда
		
		Элементы.Подразделение.ТолькоПросмотр = Истина;
		Элементы.Организация.ТолькоПросмотр = Истина;		
		Элементы.Дата.ТолькоПросмотр = Истина;		
		Элементы.Номер.ТолькоПросмотр = Истина;		
		Элементы.ДатаПланирования.ТолькоПросмотр = Истина;				
		Элементы.КоличествоПериодов.ТолькоПросмотр = Истина;				
		Элементы.ПериодичностьДетализации.ТолькоПросмотр = Истина;				
		Элементы.ДокументОснование.ТолькоПросмотр = Истина;				
		Элементы.Ответственный.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	МассивДоступныхДляКорректировкиСтрок.Загрузить(Документы.торо_ПланГрафикРемонта.ОбновитьДоступностьДляРедактирования(Объект.Ссылка, Объект.ВидОперации, Объект.ПланРемонтов.Выгрузить()));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции()
	
	ТаблицаОбъектовРемонта = Объект.ОбъектыРемонта.Выгрузить();
	
	ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы().Очистить();
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоПланаГрафикаППРСУчетомПозиции");
	
	Запрос = Новый Запрос;
	Если Не мОтображатьПоложение Тогда
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НЕОПРЕДЕЛЕНО КАК Положение,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
		
	ИначеЕсли СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			&Дата,
		|			СтруктураИерархии = &СтруктураИерархии
		|				И ОбъектИерархии В
		|					(ВЫБРАТЬ
		|						ТаблицаОбъектов.ОбъектРемонтныхРабот
		|					ИЗ
		|						ТаблицаОбъектов КАК ТаблицаОбъектов)) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ТаблицаИерархии.РодительИерархии, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ТаблицаОбъектов.ВидРемонтныхРабот,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИерархии КАК ТаблицаИерархии
		|		ПО ТаблицаОбъектов.ОбъектРемонтныхРабот = ТаблицаИерархии.ОбъектИерархии
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());				
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураИерархии) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Положение,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаСтруктуры
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ТаблицаСтруктуры.Положение, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ТаблицаОбъектов.ВидРемонтныхРабот КАК ВидРемонтныхРабот
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтруктуры КАК ТаблицаСтруктуры
		|		ПО ТаблицаОбъектов.ОбъектРемонтныхРабот = ТаблицаСтруктуры.ОбъектИерархии
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот.Родитель КАК Положение,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);				
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектовРемонта);
	
	Результат = Запрос.Выполнить();
	
	ДеревоРемонтовПромежуточное = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ДеревоРемонтовОбъект.Строки.Очистить();
	ДеревоИзЗапросаВДеревоРемонтов(ДеревоРемонтовПромежуточное.Строки, ДеревоРемонтовОбъект.Строки);
	ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "ДеревоПланаГрафикаППРСУчетомПозиции"); 
	
	ЗаписатьДеревоППРСУчетомПозиции();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДеревоППРСУчетомПозиции(ДокОбъект = Неопределено, ОбъектРемонтаДляОтбора = Неопределено)
	
	Если ДокОбъект = Неопределено Тогда
		ТЧДляЗаписи = Объект.ОбъектыРемонта;
	Иначе
		ТЧДляЗаписи = ДокОбъект.ОбъектыРемонта;
	КонецЕсли;
	ТЧДляЗаписи.Очистить();
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоПланаГрафикаППРСУчетомПозиции", Тип ("ДеревоЗначений"));
	Если ОбъектРемонтаДляОтбора = Неопределено Тогда
		Для Каждого СтрокаДерева Из ДеревоРемонтовОбъект.Строки Цикл
			
			ЗаписатьСтрокуДереваВТЧ(СтрокаДерева, ТЧДляЗаписи);
			
		КонецЦикла;
	Иначе
		СтрокаОР = ДеревоРемонтовОбъект.Строки.Найти(ОбъектРемонтаДляОтбора,"Ремонты",Истина);
		ЗаписатьСтрокуДереваВТЧ(СтрокаОР, ТЧДляЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуДереваВТЧ(СтрокаДерева, ТЧДляЗаписи)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") 
		ИЛИ ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
		НоваяСтрокаТЗ = ТЧДляЗаписи.Добавить();
		НоваяСтрокаТЗ.ВидРемонтныхРабот = СтрокаДерева.Ремонты;
		НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.Родитель.Ремонты;
		Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
			НоваяСтрокаТЗ.ЭтоЦепочка = Истина;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И СтрокаДерева.Строки.Количество() = 0 Тогда
		НоваяСтрокаТЗ = ТЧДляЗаписи.Добавить();
		НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.Ремонты;
 	КонецЕсли;
	
	Для Каждого СтрокаДЗ Из СтрокаДерева.Строки Цикл
		
		ЗаписатьСтрокуДереваВТЧ(СтрокаДЗ, ТЧДляЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьДатуОкончанияПланирования(ПериодичностьДетализации, КоличествоПериодов, ДатаПланирования)
	
	Если ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(ПериодичностьДетализации) + ", " + ?(КоличествоПериодов=0, 1, КоличествоПериодов) + ") КАК ДатаОкончания";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаПланирования);
		
		Попытка
			Выборка = Запрос.Выполнить().Выбрать();
		Исключение
			Возврат Дата(3999,12,31,23,59,59);
		КонецПопытки;
		
		Если Выборка.Следующий() Тогда
				
			Возврат ?(ПериодичностьДетализации = Перечисления.Периодичность.День, Выборка.ДатаОкончания, НачалоДня(Выборка.ДатаОкончания)-1);
				
		КонецЕсли;
		
	Иначе 	
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран период планирования!'"), СтатусСообщения.Важное);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьВсеВетвиДеревьев()
	
	Для Каждого Элемент Из ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
		
	ВыбранноеЗначение = ВыбранныйЭлемент;
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		СтруктураИерархии = ВыбранноеЗначение.Значение;
		ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();
		РазвернутьВсеВетвиДеревьев();
		
	КонецЕсли; 
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьСписокСтруктурНаСервере(ТекСтруктураИерархии, БезТекИерархии = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_СтруктурыОР.Ссылка,
	|	торо_СтруктурыОР.Наименование
	|ИЗ
	|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|ГДЕ
	|	торо_СтруктурыОР.ПометкаУдаления = ЛОЖЬ
	|	И торо_СтруктурыОР.СтроитсяАвтоматически = ЛОЖЬ";
	
	Если БезТекИерархии Тогда
		
		Запрос.Текст = Запрос.Текст + " И торо_СтруктурыОР.Ссылка <> &СтруктураИерархии";
		Запрос.УстановитьПараметр("СтруктураИерархии", ТекСтруктураИерархии);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокСтруктурОР = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СписокСтруктурОР.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
		
	КонецЦикла;
	
	Если БезТекИерархии Тогда
		
		СписокСтруктурОР[0].Пометка = Истина;
	Иначе
		
		Для каждого ЭлементСписка Из СписокСтруктурОР Цикл
			
			ЭлементСписка.Пометка = ЭлементСписка.Значение = ТекСтруктураИерархии;	
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСтруктурОР;

КонецФункции

// Если открываем документ их обработки и нужно активировать указанную строку
&НаСервере
Процедура АктивироватьСтрокуИзВне(ТекСтрокаID)
	
	ПараметрПоиска = Новый Структура;
	ПараметрПоиска.Вставить("ID",ТекСтрокаID); 
	НужнаяСтрокаПланРемонтов = Объект.ПланРемонтов.НайтиСтроки(ПараметрПоиска); 
	
	ДеревоРемонтовОбъект = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы()[0].ПолучитьЭлементы();	
	
	Для каждого СтрокаОбъект ИЗ  ДеревоРемонтовОбъект Цикл
		Если СтрокаОбъект.Ремонты =	НужнаяСтрокаПланРемонтов[0].ОбъектРемонтныхРабот Тогда
			Для Каждого СтрокаРемонт ИЗ СтрокаОбъект.ПолучитьЭлементы() Цикл
				Если СтрокаРемонт.Ремонты =	НужнаяСтрокаПланРемонтов[0].ВидРемонтныхРабот Тогда
					Элементы.ПланРемонтов.ТекущаяСтрока = НужнаяСтрокаПланРемонтов[0].НомерСтроки-1;
					Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущаяСтрока = СтрокаРемонт.ПолучитьИдентификатор();	
					Прервать;	
				КонецЕсли;
			КонецЦикла;			
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает внешний вид формы в зависимости от значения реквизита ВидОперации.
//
Процедура УстановитьВнешнийВидФормы()
	
	ЭтоКорректировкаППР = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка");
	
	Если ЭтоКорректировкаППР Тогда
		 
		Элементы.ПериодСт.Видимость 	= Истина;
		
		Элементы.Период.Заголовок = НСтр("ru = 'Новый период'");
		ОтображатьЗамещенные = Ложь;
		Элементы.ПланРемонтовОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
		
	Иначе
		
		Элементы.ПериодСт.Видимость 	= Ложь;
		
		Элементы.Период.Заголовок = НСтр("ru = 'Период'");
		
		ОтображатьЗамещенные = Истина;
		Элементы.ПланРемонтовОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
		
	КонецЕсли; 
	
	Элементы.ДокументОснование.Видимость	= ЭтоКорректировкаППР;
	Элементы.ПланРемонтовОтменен.Видимость	= ЭтоКорректировкаППР;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКнопкиНастройкаИерархии()
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииНастройкаИерархии.Доступность = мОтображатьПоложение;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоИзЗапросаВДеревоРемонтов(СтрокиДереваИзЗапроса,СтрокиДереваРемонтов)
	
	Для Каждого Строка Из СтрокиДереваИзЗапроса Цикл
		
		Если ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
		    НоваяСтрока.Ремонты = Строка.ВидРемонтныхРабот;
			НоваяСтрока.НомерКартинки = 7;
			СледующийУровень = НоваяСтрока.Строки;
		ИначеЕсли ЗначениеЗаполнено(Строка.ОбъектРемонтныхРабот) И Строка.ЭтоНеГруппа = null Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
		    НоваяСтрока.Ремонты = Строка.ОбъектРемонтныхРабот;
			НоваяСтрока.ИнвентарныйНомер = Строка.ОбъектРемонтныхРабот.ИнвентарныйНомер;
			НоваяСтрока.НомерКартинки = 0;
			СледующийУровень = НоваяСтрока.Строки;
		ИначеЕсли ЗначениеЗаполнено(Строка.Положение) И Строка.ОбъектРемонтныхРабот = null Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
		    НоваяСтрока.Ремонты = Строка.Положение;
			НоваяСтрока.НомерКартинки = 2;
			СледующийУровень = НоваяСтрока.Строки;
		ИначеЕсли НЕ ЗначениеЗаполнено(Строка.Положение) И НЕ ЗначениеЗаполнено(Строка.ОбъектРемонтныхРабот) И НЕ ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
		    НоваяСтрока.Ремонты = "<Объекты и виды ремонта>";
			НоваяСтрока.НомерКартинки = 4;
			СледующийУровень = НоваяСтрока.Строки;
		Иначе
			СледующийУровень = СтрокиДереваРемонтов;
		КонецЕсли;
		
		ДеревоИзЗапросаВДеревоРемонтов(Строка.Строки,СледующийУровень);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЯвляетсяЛиЭлементГруппой(ОР)
	Возврат ОР.ЭтоГруппа;
КонецФункции

&НаСервере
Функция ДеревоРемонтовОбработкаВыбораВРНаСервере(ВыбранноеЗначение, ОбъектРемонтаРодитель, ЗаполнитьНормативы = Ложь, ИмяДобавляемогоЭлемента = "Ремонт ")
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоПланаГрафикаППРСУчетомПозиции", Тип("ДеревоЗначений"));
	МассивСтрокаРодитель = ДеревоРемонтовОбъект.Строки.НайтиСтроки(Новый Структура("Ремонты", ОбъектРемонтаРодитель), Истина);
	
	Для каждого Элем из МассивСтрокаРодитель Цикл
		
		Если Элем.Родитель <> Неопределено Тогда 
			СтрокаРодитель = Элем;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаРодитель = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НайденнаяСтрока = СтрокаРодитель.Строки.Найти(ВыбранноеЗначение, "Ремонты");
	
	Если НайденнаяСтрока = Неопределено Тогда
		
		НовСтрокаВидРемРабот = СтрокаРодитель.Строки.Добавить();
		НовСтрокаВидРемРабот.Ремонты = ВыбранноеЗначение;
		НовСтрокаВидРемРабот.НомерКартинки = 7; 		
		
		ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "ДеревоПланаГрафикаППРСУчетомПозиции");
		
	Иначе
		Если ИмяДобавляемогоЭлемента = "Ремонт " Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 ""%2""  уже внесен в список для объекта ""%3"" плана-графика ППР!'"),
				ИмяДобавляемогоЭлемента,ВыбранноеЗначение,СтрокаРодитель.Ремонты));
		Иначе
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 ""%2""  уже внесен в список для объекта ""%3"" плана-графика ППР!'"),
				ИмяДобавляемогоЭлемента,ВыбранноеЗначение,СтрокаРодитель.Ремонты));	
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_НормативныеРемонтыОборудования.ВидРемонта,
		|	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
		|	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании
		|ИЗ
		|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|ГДЕ
		|	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &Объект
		|	И торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
		|	И торо_НормативныеРемонтыОборудования.Приоритет";
		
		Запрос.УстановитьПараметр("Объект", ОбъектРемонтаРодитель);
		Запрос.УстановитьПараметр("ВидРемонта", ВыбранноеЗначение);
		СтрокиНормативныхРемонтов = Запрос.Выполнить().Выбрать();
		
		Если НЕ СтрокиНормативныхРемонтов.Следующий() Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для вида ремонта %1 объекта ремонта %2 не заданы нормативы планирования!'"),ВыбранноеЗначение.Наименование,ОбъектРемонтаРодитель,),СтатусСообщения.Обычное);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДополнитьДеревоРемонтовНаСервере(ОР, МассивВидовРемонта = Неопределено, ЗаполнитьНормативы = Ложь)
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоПланаГрафикаППРСУчетомПозиции", Тип("ДеревоЗначений"));
	
	НайденныеСтроки = ДеревоРемонтовОбъект.Строки.НайтиСтроки(Новый Структура("Ремонты", ОР), Истина);
	
	КолНайденныхСтрок = НайденныеСтроки.Количество();
	Если КолНайденныхСтрок = 0 Тогда
		НайденнаяСтрока = Неопределено;
	ИначеЕсли КолНайденныхСтрок = 1 Тогда
		Если НайденныеСтроки[0].Родитель = Неопределено Тогда
			НайденнаяСтрока = Неопределено;
		Иначе
			НайденнаяСтрока = НайденныеСтроки[0];
		КонецЕсли;
	Иначе
		НайденнаяСтрока = НайденныеСтроки[0];
	КонецЕсли;
	
	СтрокаДерева = НайденнаяСтрока;		
	Если НайденнаяСтрока = Неопределено Тогда
		
		РодительПоИерархии = ОпределитьРодителяОбъектаРемонта(ОР, СтруктураИерархии, ТекущаяДата());//†1 Дата -> ТекущаяДата()
		
		НайденнаяСтрокаРодитель = ДеревоРемонтовОбъект.Строки.Найти(РодительПоИерархии, "Ремонты");
		Если НЕ мОтображатьПоложение Тогда
			
			НовСтрокаОбъект = ДеревоРемонтовОбъект.Строки.Добавить();
			
		ИначеЕсли НайденнаяСтрокаРодитель = Неопределено Тогда
			Если ЗначениеЗаполнено(РодительПоИерархии) Тогда
				НайденнаяСтрокаРодитель = ДеревоРемонтовОбъект.Строки.Добавить();
				НайденнаяСтрокаРодитель.Ремонты = РодительПоИерархии;
				НайденнаяСтрокаРодитель.НомерКартинки = 2;
				НовСтрокаОбъект = НайденнаяСтрокаРодитель.Строки.Добавить(); 
			Иначе
				СтрокаЭлементовВерхУровня = ДеревоРемонтовОбъект.Строки.Найти("<Объекты и виды ремонта>", "Ремонты", Истина);
				Если СтрокаЭлементовВерхУровня = Неопределено Тогда
					НайденнаяСтрокаРодитель = ДеревоРемонтовОбъект.Строки.Добавить();
					НайденнаяСтрокаРодитель.Ремонты = "<Объекты и виды ремонта>";
					НайденнаяСтрокаРодитель.НомерКартинки = 4;
					НовСтрокаОбъект = НайденнаяСтрокаРодитель.Строки.Добавить(); 
				Иначе
					НовСтрокаОбъект = СтрокаЭлементовВерхУровня.Строки.Добавить();
				КонецЕсли;
			КонецЕсли;
		Иначе
			НовСтрокаОбъект = НайденнаяСтрокаРодитель.Строки.Добавить();
			ТекЭлемент = НайденнаяСтрокаРодитель;
		КонецЕсли;
		
		НовСтрокаОбъект.Ремонты = ОР;
		НовСтрокаОбъект.ИнвентарныйНомер = ОР.ИнвентарныйНомер;
		НовСтрокаОбъект.НомерКартинки = 0;
		СтрокаДерева = НовСтрокаОбъект;
		 		
	Иначе
		Если Не ЗаполнитьНормативы И МассивВидовРемонта = Неопределено Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Объект ""%1"" уже внесен в список объектов ремонтных работ плана-графика ППР!'"),ОР));
		КонецЕсли;
	КонецЕсли;
	
	Если МассивВидовРемонта <> Неопределено Тогда
		
		Для Каждого СтрокаВР Из МассивВидовРемонта Цикл
				
			НайденнаяСтрока = СтрокаДерева.Строки.Найти(СтрокаВР, "Ремонты");
			
			Если НайденнаяСтрока = Неопределено Тогда
				НовСтрокаВидРемРабот = СтрокаДерева.Строки.Добавить();
				НовСтрокаВидРемРабот.Ремонты = СтрокаВР;
				НовСтрокаВидРемРабот.НомерКартинки = 7;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "ДеревоПланаГрафикаППРСУчетомПозиции");
КонецФункции

&НаСервере
Функция ОпределитьРодителяОбъектаРемонта(ОбъектРемонтныхРабот, СтруктураИерархии = Неопределено, Дата = '00010101')

	Возврат торо_РаботаСИерархией.ПолучитьТекущихРодителейВИерархии(ОбъектРемонтныхРабот,СтруктураИерархии,Дата)[ОбъектРемонтныхРабот];
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИсполнителейЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатВыбора = РезультатЗакрытия;
	
	Если РезультатВыбора <> Неопределено Тогда
		
		Объект.ПланРемонтов.Очистить();
		ЭтаФорма.Модифицированность = Истина;
		
		Для каждого Стр Из РезультатВыбора Цикл
		
			НС = Объект.ПланРемонтов.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Стр);
		
		КонецЦикла; 
		
		ОбновитьДоступностьДляРедактирования();
	
		РассчитатьСтоимостиРемонтовНаСервере();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока)
	
		Если ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			УбратьУО();
			ОР = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот, ВидРемонтныхРабот", ОР, ТекущаяСтрока.Ремонты);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот, ВидРемонтныхРабот, Замещен", ОР, ТекущаяСтрока.Ремонты, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовОбъектРемонтныхРабот.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") 
			И ТекущаяСтрока.ПолучитьРодителя() <> Неопределено 
			Тогда
			УбратьУО();
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот", ТекущаяСтрока.Ремонты);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот, Замещен", ТекущаяСтрока.Ремонты, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовОбъектРемонтныхРабот.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ЦепочкиРемонта")
			И ТекущаяСтрока.ПолучитьРодителя() <> Неопределено 
			Тогда
			
			ОР = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот", ОР);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот, Замещен", ОР, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовОбъектРемонтныхРабот.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
			
			УстановитьУО(ТекущаяСтрока.Ремонты);
			
		Иначе
			УбратьУО();
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Неопределено;
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовОбъектРемонтныхРабот.Видимость = Истина;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
			
		КонецЕсли; 
		
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьСтрокиВПланеРемонтовПоID(РемонтыТекСтроки, РемонтыСтрокиРодителя = Неопределено)
	
	// Данный блок операторов выясняет, нет ли строк в ДеревоПланаГрафикаППРСУчетомПозиции, у которых есть подчиненные
	// строки в ПланРемонтов, которые должны быть заблокированы по ID строки из-за наличия связанных документов
	// и также устанавливает флаг блокировки изменений для строки в ДеревоПланаГрафикаППРСУчетомПозиции.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.Ссылка,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот
	|ИЗ
	|	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|ГДЕ
	|	торо_ПланГрафикРемонтаПланРемонтов.Ссылка = &Ссылка
	|	И торо_ПланГрафикРемонтаПланРемонтов.ID В (&ID)
	|";
	Если ТипЗнч(РемонтыТекСтроки) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		Запрос.Текст = Запрос.Текст +	
		"	И торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = &ОбъектРемонтныхРабот
		|";
		Запрос.Текст = Запрос.Текст +			
		"	И торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот = &ВидРемонтныхРабот
		|";
		Запрос.УстановитьПараметр("ОбъектРемонтныхРабот", РемонтыСтрокиРодителя);
		Запрос.УстановитьПараметр("ВидРемонтныхРабот", РемонтыТекСтроки);
	ИначеЕсли ТипЗнч(РемонтыТекСтроки) = Тип("СправочникСсылка.торо_ОбъектыРемонта") и РемонтыСтрокиРодителя <> Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст +	
		"	И торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = &ОбъектРемонтныхРабот
		|";
		Запрос.УстановитьПараметр("ОбъектРемонтныхРабот", РемонтыТекСтроки);
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + ";";
	
	Запрос.УстановитьПараметр("ID", МассивIDДляБлокировки.ВыгрузитьЗначения());
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);	
	
	Результат = Запрос.Выполнить();
	ТаблицаБлокируемых = Результат.Выгрузить();
	
	Если ТаблицаБлокируемых.Количество() > 0 Тогда
		МодифицируемыйОбъектРемонта = Истина;
	Иначе
		МодифицируемыйОбъектРемонта = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ОбъектРемонта, ВидРемонта, СтрокаДерева = Неопределено)
	
	Если ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.торо_ВидыРемонтов") ИЛИ ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
		
		Если ТипЗнч(ВидРемонта) = Тип("СправочникСсылка.торо_ЦепочкиРемонта") Тогда
			
			МассивВР = ПолучитьМассивВРЦепочкиНаСервере(ВидРемонта);
			Для каждого ВР Из МассивВР Цикл
				
				// Отбор строк в плане ремонтов по текущей строке
				СтруктураОтбора = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот", ОбъектРемонта, ВР);
			
				МассивСтрок = Объект.ПланРемонтов.НайтиСтроки(СтруктураОтбора);
				Для Каждого Элемент Из МассивСтрок Цикл
					
					Объект.ПланРемонтов.Удалить(Элемент);
					
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			
			// Отбор строк в плане ремонтов по текущей строке
			СтруктураОтбора = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот", ОбъектРемонта, ВидРемонта);
		
			МассивСтрок = Объект.ПланРемонтов.НайтиСтроки(СтруктураОтбора);
			Для Каждого Элемент Из МассивСтрок Цикл
				
				Объект.ПланРемонтов.Удалить(Элемент);
				
			КонецЦикла; 
		КонецЕсли;
	Иначе
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		
		Для каждого Стр Из ПодчиненныеСтроки Цикл
			
			УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(СтрокаДерева.Ремонты, Стр.Ремонты, Стр);
			
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПостроитьДиаграммуГантаНаСервере()
	
	мДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования(Объект.ПериодичностьДетализации, Объект.КоличествоПериодов, Объект.ДатаПланирования);
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоПланаГрафикаППРСУчетомПозиции");
	ОбновитьДоступностьДляРедактирования();
	
	СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;
	Если НЕ СортироватьПоНаименованию Тогда
		ТаблицаОР = Новый ТаблицаЗначений;
		ТаблицаОР.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		ТаблицаОР.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
		
		ЗаполнитьТаблицуОР(ТаблицаОР, ДеревоРемонтовОбъект.Строки);
		
	КонецЕсли;
	
	ОтображатьЗамещенные = Истина;
	ТаблицаПланРемонтовИсходная = ?(ОтображатьЗамещенные, Объект.ПланРемонтов.Выгрузить(), Объект.ПланРемонтов.Выгрузить(Новый Структура("Замещен",Ложь)));
	
	Если Не ОтображатьЗамещенные Тогда
		Для Каждого СтрокаПланаРемонтов Из ТаблицаПланРемонтовИсходная Цикл
			Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка И СтрокаПланаРемонтов.ЗамещенСт Тогда
				СтрокаПланаРемонтов.ДатаНачСт = Дата(1,1,1);
				СтрокаПланаРемонтов.ДатаКонСт = Дата(1,1,1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаРемонтов = ДополнитьПланРемонтовДаннымиПоВЗ(ТаблицаПланРемонтовИсходная);
	
	ТаблицаРемонтов = ЗаполнитьДоступностьДляРедактирования(ТаблицаРемонтов);	
	
	ТаблицаРемонтов.Колонки.Добавить("ДокументППР", Новый ОписаниеТипов("ДокументСсылка.торо_ПланГрафикРемонта"));
	ТаблицаРемонтов.ЗаполнитьЗначения(Объект.Ссылка, "ДокументППР");
	
	Если НЕ СортироватьПоНаименованию Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.ОбъектРемонтныхРабот,
		|	Таб.НомерСтроки
		|ПОМЕСТИТЬ ПорядокОР
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.ID,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования
		|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
		|ИЗ
		|	&ТаблицаРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.ID,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования,
		|	ПорядокОР.НомерСтроки КАК НомерОР
		|ИЗ
		|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОР КАК ПорядокОР
		|		ПО торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ПорядокОР.ОбъектРемонтныхРабот";
		
		Если НЕ ОтображатьЗамещенные Тогда
			Запрос.Текст = Запрос.Текст + " И торо_ПланГрафикРемонтаПланРемонтов.Замещен = ЛОЖЬ ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
		Запрос.УстановитьПараметр("Таб", ТаблицаОР);
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ТабЦепочек = Объект.ОбъектыРемонта.Выгрузить(Новый Структура("ЭтоЦепочка",Истина));
	Если ТабЦепочек.Количество() > 0 и Не СортироватьПоНаименованию Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.ОбъектРемонтныхРабот,
		               |	Таб.НомерСтроки
		               |ПОМЕСТИТЬ ПорядокОР
		               |ИЗ
		               |	&Таб КАК Таб
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования
		               |ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
		               |ИЗ
		               |	&ТаблицаРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабЦепочек.ВидРемонтныхработ КАК Цепочка,
		               |	ТабЦепочек.ОбъектРемонтныхРабот КАК ОбъектРемонта
		               |ПОМЕСТИТЬ ТабЦепочек
		               |ИЗ
		               |	&ТабЦепочек КАК ТабЦепочек
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабЦепочек.ОбъектРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НомерСтроки
		               |ПОМЕСТИТЬ ТабВРЦепочек
		               |ИЗ
		               |	ТабЦепочек КАК ТабЦепочек
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
		               |		ПО ТабЦепочек.Цепочка = торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования,
		               |	ЕСТЬNULL(ТабВРЦепочек.Ссылка, ЗНАЧЕНИЕ(Справочник.торо_ЦепочкиРемонта.ПустаяСсылка)) КАК Цепочка,
		               |	ЕСТЬNULL(ТабВРЦепочек.НомерСтроки, -1) КАК НомерСтрокиВРЦепочки,
		               |	ПорядокОР.НомерСтроки КАК НомерОР
		               |ИЗ
		               |	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабВРЦепочек КАК ТабВРЦепочек
		               |		ПО торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот = ТабВРЦепочек.ВидРемонта
		               |			И торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ТабВРЦепочек.ОбъектРемонта
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОР КАК ПорядокОР
		               |		ПО торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ПорядокОР.ОбъектРемонтныхРабот
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтрокиВРЦепочки";
		Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
		Запрос.УстановитьПараметр("Таб", ТаблицаОР);
		Запрос.УстановитьПараметр("ТабЦепочек", ТабЦепочек);			
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
	ИначеЕсли ТабЦепочек.Количество() > 0 и СортироватьПоНаименованию Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования
		               |ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
		               |ИЗ
		               |	&ТаблицаРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабЦепочек.ВидРемонтныхработ КАК Цепочка,
		               |	ТабЦепочек.ОбъектРемонтныхРабот КАК ОбъектРемонта
		               |ПОМЕСТИТЬ ТабЦепочек
		               |ИЗ
		               |	&ТабЦепочек КАК ТабЦепочек
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабЦепочек.ОбъектРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
		               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НомерСтроки
		               |ПОМЕСТИТЬ ТабВРЦепочек
		               |ИЗ
		               |	ТабЦепочек КАК ТабЦепочек
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
		               |		ПО ТабЦепочек.Цепочка = торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
		               |	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования,
		               |	ЕСТЬNULL(ТабВРЦепочек.НомерСтроки, -1) КАК НомерСтрокиВРЦепочки
		               |ИЗ
		               |	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабВРЦепочек КАК ТабВРЦепочек
		               |		ПО торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот = ТабВРЦепочек.ВидРемонта
		               |			И торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ТабВРЦепочек.ОбъектРемонта
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтрокиВРЦепочки";
		Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
		Запрос.УстановитьПараметр("ТабЦепочек", ТабЦепочек);			
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	торо_Ремонты.ПостроитьДиаграммуГантаДляППР(ДиаграммаГантаППР, ТаблицаРемонтов, СтруктураИерархии, мОтображатьПоложение,,, Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка"), , , ,СортироватьПоНаименованию);
	ДиаграммаГантаППР.УстановитьПолныйИнтервал(НачалоДня(Объект.ДатаПланирования), КонецДня(мДатаОкончанияПланирования));
	ДиаграммаГантаППР.ОтображатьЛегенду = Ложь;
	
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьТаблицуОР(ТаблицаОР, КоллекцияСтрок, Сч = 1)
	
	Если КоллекцияСтрок.Количество() Тогда
		
		Для каждого Элемент Из КоллекцияСтрок Цикл
			Если ТипЗнч(Элемент.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				НС = ТаблицаОР.Добавить();
				НС.ОбъектРемонтныхРабот = Элемент.Ремонты;
				НС.НомерСтроки = Сч;
				Сч = Сч + 1;  
			КонецЕсли;	
			ЗаполнитьТаблицуОР(ТаблицаОР, Элемент.Строки, Сч);
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры
&НаСервере
Функция ЗаполнитьДоступностьДляРедактирования(парамПланРемонтов)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ
	|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
	|ИЗ
	|	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДоступенДляРедакторования.ID,
	|	ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования
	|ПОМЕСТИТЬ ТаблицаДоступенДляРедакторования
	|ИЗ
	|	&ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
	|	ЕстьNULL(ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования,Истина) КАК ДоступенДляРедактирования
	|ИЗ
	|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТаблицаДоступенДляРедакторования.ID";
	
	Запрос.УстановитьПараметр("ПланРемонтов",парамПланРемонтов);
	Запрос.УстановитьПараметр("ТаблицаДоступенДляРедакторования",МассивДоступныхДляКорректировкиСтрок.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Функция ДополнитьПланРемонтовДаннымиПоВЗ(ПланРемонтов)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт
	               |ПОМЕСТИТЬ ТабДокумента
	               |ИЗ
	               |	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабДокумента.ID,
	               |	ТабДокумента.ВидРемонтныхРабот,
	               |	ТабДокумента.ДатаКон,
	               |	ТабДокумента.ДатаНач,
	               |	ТабДокумента.ДатаКонСт,
	               |	ТабДокумента.ДатаНачСт,
	               |	ТабДокумента.ОбъектРемонтныхРабот,
	               |	ТабДокумента.Отменен,
	               |	ТабДокумента.Замещен,
	               |	ТабДокумента.ЗамещенСт,
	               |	ЛОЖЬ КАК ЕстьВЗ,
	               |	ЛОЖЬ КАК ЕстьДвиженияПоВЗ
	               |ИЗ
	               |	ТабДокумента КАК ТабДокумента";
	
	Запрос.УстановитьПараметр("ПланРемонтов",ПланРемонтов);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеКонстантыИспользоватьПриоритетностьПеренесенныхРемонтов()
	
	Возврат Константы.торо_ИспользоватьПриоритетностьПеренесенныхРемонтов.Получить()
	
КонецФункции

&НаКлиенте
Процедура УстановитьОценкуРМЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Записать();
    КонецЕсли;
    
    УстановитьОценкуРМФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОценкуРМФрагмент()
    
    Перем ФормаОбработка;
    
    ФормаОбработка = ПолучитьФорму("Обработка.торо_УстановкаОценкиРМПлановыхРемонтов.Форма", Новый Структура("ПланГрафикРемонта", Объект.Ссылка), Объект.Ссылка, Объект.Ссылка);
    
    ФормаОбработка.Открыть();

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмеютсяДокументыНаОсновании(Ссылка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПланГрафикРемонта.Ссылка
	|ИЗ
	|	Документ.торо_ПланГрафикРемонта КАК торо_ПланГрафикРемонта
	|ГДЕ
	|	торо_ПланГрафикРемонта.ДокументОснование = &ДокументОснование
	|	И торо_ПланГрафикРемонта.Проведен
	|	И НЕ торо_ПланГрафикРемонта.ПометкаУдаления
	|	И НЕ торо_ПланГрафикРемонта.ДокументОснование = ЗНАЧЕНИЕ(Документ.торо_ПланГрафикРемонта.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтДокументыОснования.Ссылка
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ДокументыОснования КАК торо_ЗаявкаНаРемонтДокументыОснования
	|ГДЕ
	|	торо_ЗаявкаНаРемонтДокументыОснования.ДокументОснование = &ДокументОснование
	|	И торо_ЗаявкаНаРемонтДокументыОснования.Ссылка.Проведен
	|	И НЕ торо_ЗаявкаНаРемонтДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.Ссылка
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.ДокументыОснования КАК торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования
	|ГДЕ
	|	торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.ДокументОснование = &ДокументОснование
	|	И торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.Ссылка.Проведен
	|	И НЕ торо_НарядНаВыполнениеРемонтныхРаботДокументыОснования.Ссылка.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ДокументыОснования КАК торо_АктОВыполненииЭтапаРаботДокументыОснования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботДокументыОснования.ДокументОснование = &ДокументОснование
	|	И торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка.Проведен
	|	И НЕ торо_АктОВыполненииЭтапаРаботДокументыОснования.Ссылка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ДокументОснование", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполненностьГрафика(ДатаПланированияНачала, ДатаПланированияОкончание, НужныеГодаСписок, Ссылка)
	
	НужныеГода = Новый ТаблицаЗначений;
	ТипГодГрафика = Новый Массив;
	ТипГодГрафика.Добавить(Тип("Число"));
	НужныеГода.Колонки.Добавить("ГодГрафика",Новый ОписаниеТипов(ТипГодГрафика), "ГодГрафика");
	
	Для каждого Элем Из НужныеГодаСписок Цикл
	
		НужныеГода.Добавить().ГодГрафика = Элем.Значение;
	
	КонецЦикла; 
	
	ГрафикЗаполнен = Истина;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = 

    "ВЫБРАТЬ
    |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот
    |ПОМЕСТИТЬ ТабГрафиков
    |ИЗ
    |	Документ.торо_ПланГрафикРемонта.ОбъектыРемонта КАК торо_ПланГрафикРемонтаОбъектыРемонта
    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
    |		ПО торо_ПланГрафикРемонтаОбъектыРемонта.ОбъектРемонтныхРабот = торо_НормативныеРемонтыОборудования.ОбъектРемонта
    |ГДЕ
    |	торо_ПланГрафикРемонтаОбъектыРемонта.Ссылка = &Ссылка
    |	И торо_НормативныеРемонтыОборудования.Приоритет
    |
    |ОБЪЕДИНИТЬ
    |
    |ВЫБРАТЬ
    |	торо_ОбъектыРемонта.ПлановыйГрафикРаботы
    |ИЗ
    |	Документ.торо_ПланГрафикРемонта.ОбъектыРемонта КАК торо_ПланГрафикРемонтаОбъектыРемонта
    |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
    |		ПО торо_ПланГрафикРемонтаОбъектыРемонта.ОбъектРемонтныхРабот = торо_ОбъектыРемонта.Ссылка
    |ГДЕ
    |	торо_ПланГрафикРемонтаОбъектыРемонта.Ссылка = &Ссылка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ
    |	ТабГрафиков.ГрафикРемонтныхРабот
    |ИЗ
    |	ТабГрафиков КАК ТабГрафиков";
	
	Результат = Запрос.Выполнить();
	МассивГрафиков = Результат.Выгрузить().ВыгрузитьКолонку("ГрафикРемонтныхРабот");
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачалоДня(ДатаПланированияНачала), ДатаПланированияОкончание);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	НужныеГода.ГодГрафика
	|ПОМЕСТИТЬ НужныеГода
	|ИЗ
	|  &НужныеГода КАК НужныеГода
	|;
	|ВЫБРАТЬ
	|	ТабГрафиков.ГрафикРемонтныхРабот,
	|	НужныеГода.ГодГрафика
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ
	|	ТабГрафиков КАК ТабГрафиков,
	|	НужныеГода КАК НужныеГода
	|;
	|ВЫБРАТЬ
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика) КАК ГодГрафика,
	|	СУММА(РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяНачала, ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ОсновноеЗначение
	|ПОМЕСТИТЬ ВТРасписанияРаботыИзм
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика)
	|;
	|ВЫБРАТЬ
	|	ВремТабл.ГрафикРемонтныхРабот КАК ГрафикРаботы,
	|	ВремТабл.ГодГрафика,
	|	ЕСТЬNULL(ВТРасписанияРаботыИзм.ОсновноеЗначение, 0) КАК ОсновноеЗначение
	|ИЗ
	|	ВремТабл КАК ВремТабл
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
	|	ПО ВремТабл.ГодГрафика = ВТРасписанияРаботыИзм.ГодГрафика
	|		И ВремТабл.ГрафикРемонтныхРабот = ВТРасписанияРаботыИзм.ГрафикРаботы";
	
	Запрос.УстановитьПараметр("НужныеГода", НужныеГода);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОсновноеЗначение = 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнен график %1 за %2 год.'"),Выборка.ГрафикРаботы,Выборка.ГодГрафика));
			ГрафикЗаполнен = Ложь;
     	КонецЕсли;
	КонецЦикла;
	
	Возврат ГрафикЗаполнен;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтоимостиРемонтовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да тогда
        РассчитатьСтоимостиРемонтовНаСервере();
		Модифицированность = Истина;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостиРемонтовНаСервере(ТекущиеДанные = Неопределено)
	
	ЗначениеВозврата = Документы.торо_ПланГрафикРемонта.РассчитатьСтоимостиРемонтов(Объект.ПланРемонтов.Выгрузить(), Объект.Ссылка, МассивДоступныхДляКорректировкиСтрок.Выгрузить(), ТекущиеДанные);
	
	Если ТипЗнч(ЗначениеВозврата) = Тип("Число") Тогда
		МассивСтрокТЧ = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID));
		Если МассивСтрокТЧ.Количество() = 0 Тогда
			СтрокаТЧ = МассивСтрокТЧ[0];
			СтрокаТЧ.СуммаРемонта = ЗначениеВозврата;
		КонецЕсли;
	Иначе
		Объект.ПланРемонтов.Загрузить(ЗначениеВозврата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокЦепочек(ОбъектРемонта)
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(ОбъектРемонта);
	СписокОтбора.Добавить(ОбъектРемонта.ТиповойОР);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РемонтныеЦиклыОборудования.ВидЦепочки,
	|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов
	|ИЗ
	|	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
	|ГДЕ
	|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов В (&СписокОтбора)";
	
	Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
	
	ТЗЦепочекОбъекта = Запрос.Выполнить().Выгрузить();
	МассивЦепочек = ТЗЦепочекОбъекта.ВыгрузитьКолонку("ВидЦепочки");
	
	СписокВозврата = Новый СписокЗначений;
	СписокВозврата.ЗагрузитьЗначения(МассивЦепочек);
	
	Возврат СписокВозврата;
	
КонецФункции

&НаКлиенте 
Процедура ДокументОснованиеПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДокументОснованиеПриИзмененииНаСервере();
	КонецЕсли; 	
КонецПроцедуры

&НаСервере 
Функция СоздатьДокумент_ЗаказНаВнутреннеПотребление(ТекущийРемонт, СоздатьДокумент = ложь)
	
		МассивДанных = Новый Массив;
		
		Структура    = Новый Структура;
		Структура.Вставить("ОбъектРемонтныхРабот", ТекущийРемонт.ОбъектРемонтныхРабот);
		Структура.Вставить("ВидРемонтныхРабот"   , ТекущийРемонт.ВидРемонтныхРабот);
		Структура.Вставить("ДатаНач"             , ТекущийРемонт.ДатаНач);
		Структура.Вставить("ID"                  , ТекущийРемонт.ID);
		
		МассивДанных.Добавить(Структура);
		
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКЗаказуСервере(МассивДанных);
		
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			
			// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.
			МассивСтрокНоменклатуры = Новый Массив;
			
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура();
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры",МассивСтрокНоменклатуры);
		ЗначенияЗаполнения.Вставить("ДатаОтгрузки", ТекущийРемонт.ДатаНач);
		
		СтрокаКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='План-график ППР %1 от %2 %3 %4 %5'"),
							Объект.Номер, Объект.Дата, ТекущийРемонт.ОбъектРемонтныхРабот, ТекущийРемонт.ВидРемонтныхРабот, Формат(ТекущийРемонт.ДатаНач, НСтр("ru = 'ДФ=dd.MM.yyyy'")));
		ЗначенияЗаполнения.Вставить("Комментарий" , СтрокаКомментария);
		
		ЗначенияЗаполнения.Вставить("Склад", ТекущийРемонт.Склад);
		ЗначенияЗаполнения.Вставить("Подразделение", Объект.Подразделение);
		ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
		
		СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		СтруктураПараметров.Вставить("КлючНазначенияИспользования", "СОЗДАНИЕ_ЗАКАЗА_ИЗ_ТОИР");
		
		СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
		СтруктураПередаваемыхВОбработчикПараметров.Вставить("ТекущийРемонт_ID",ТекущийРемонт.ID);	
		
		стрВозврата = Новый Структура;
		стрВозврата.Вставить("СтруктураПараметров", СтруктураПараметров);
		стрВозврата.Вставить("СтруктураПередаваемыхВОбработчикПараметров", СтруктураПередаваемыхВОбработчикПараметров);
		
		Если СоздатьДокумент Тогда
			
			Если СтруктураПараметров.Количество() = 0 тогда
				Возврат стрВозврата;
			КонецЕсли;
			
			Попытка
				ДокОбъект = Документы.ЗаказНаВнутреннееПотребление.СоздатьДокумент();
				ДокОбъект.Заполнить(СтруктураПараметров.ЗначенияЗаполнения);
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				СтруктураПередаваемыхВОбработчикПараметров.Вставить("Ссылка", ДокОбъект.Ссылка);
				ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Неопределено, СтруктураПередаваемыхВОбработчикПараметров);
			Исключение
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'При создании документа ""Заказ на внутренне потребеление"" произошла ошибка: %1.'"),ОписаниеОшибки()));
			КонецПопытки;
		КонецЕсли;
		
		Возврат стрВозврата;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(ДокОбъект)
	Элементы = ДокОбъект.Элементы;
	Объект = ДокОбъект.Объект;
	Элементы.ДеревоСогласованияУтвердитьСтатус.Доступность = ЗначениеЗаполнено(Объект.СпособСогласования);
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗакрытияВопросаВР(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДеревоРемонтовОбработкаВыбораВРНаСервере(Параметры.ВыбранноеЗначение, Параметры.СтрокаРодитель.Ремонты);
		ЭлементСравнения = Параметры.СтрокаРодитель.Ремонты;
		
		Модифицированность = Истина;

		РазвернутьВсеВетвиДеревьев();

		ТекДанные = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы();
		Если ТекДанные.Количество() > 0 Тогда
			Для Каждого Строки Из ТекДанные Цикл
				Для Каждого Строка Из Строки.ПолучитьЭлементы() Цикл
					Если ЭлементСравнения <> Неопределено И Строка.Ремонты = ЭлементСравнения Тогда
						Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущаяСтрока = Строка.ПолучитьИдентификатор(); 
						Возврат;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура ПослеЗакрытияВопросаОР(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ДобавитьЭлементВДерево(Параметры.ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЭлементВДерево(ВыбранноеЗначение)
	ДополнитьДеревоРемонтовНаСервере(ВыбранноеЗначение);
	ЭлементСравнения = ВыбранноеЗначение;
	
	Модифицированность = Истина;
	
	РазвернутьВсеВетвиДеревьев();
	
	ТекДанные = ДеревоПланаГрафикаППРСУчетомПозиции.ПолучитьЭлементы();
	Если ТекДанные.Количество()>0 Тогда
		Для Каждого Строки Из ТекДанные Цикл
			Для Каждого Строка Из Строки.ПолучитьЭлементы() Цикл
				Если ЭлементСравнения <> Неопределено И Строка.Ремонты = ЭлементСравнения Тогда
					Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущаяСтрока = Строка.ПолучитьИдентификатор(); 
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

&НаСервере 
Функция ПолучитьПараметрыВР(ВыбранноеЗначение, ОР)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта.Наименование КАК Наименование
	               |ИЗ
	               |	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |ГДЕ
	               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОР
	               |	И торо_НормативныеРемонтыОборудования.ВидРемонта = &ВР";
				   
	Запрос.УстановитьПараметр("ОР", ОР);
	Запрос.УстановитьПараметр("ВР", ВыбранноеЗначение);
	
	стрВозврата = Новый Структура("Наименование, НеУчаствуетВПланировании");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат стрВозврата;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(); 
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(стрВозврата, Выборка);
	Возврат стрВозврата;
	
КонецФункции

&НаСервере 
Функция ПолучитьПараметрыОР(ОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Наименование,
	               |	торо_ОбъектыРемонта.НеУчаствуетВПланировании
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", ОР);
	
	СтрВозврата = Новый Структура("Наименование, НеУчаствуетВПланировании");
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат СтрВозврата;
	КонецЕсли;
	
	Выборка = результат.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(СтрВозврата, Выборка);
	
	Возврат СтрВозврата;
	
КонецФункции

&НаСервере
Функция СформироватьМассивНоменклатурыКЗаказуСервере(МассивДанных)
	
	Если Не МассивДанных.Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НоменклатураКЗаказу.Номенклатура,
	|	НоменклатураКЗаказу.Количество
	|ПОМЕСТИТЬ НоменклатураКЗаказу
	|ИЗ
	|	&НоменклатураКЗаказу КАК НоменклатураКЗаказу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ИнтеграцияДокументов.ДокументЕРП
	|ПОМЕСТИТЬ втДокументыНаОсновании
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|ГДЕ
	|	торо_ИнтеграцияДокументов.ID = &ID
	|	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыНаВнутреннееПотребление.Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказыНаВнутреннееПотребление.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ЗаказыНаВнутреннееПотребление.КОформлению) КАК Количество
	|ПОМЕСТИТЬ УжеЗаказаннаяНоменклатура
	|ИЗ
	|	РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|ГДЕ
	|	ЗаказыНаВнутреннееПотребление.Регистратор В
	|			(ВЫБРАТЬ
	|				втДокументыНаОсновании.ДокументЕРП КАК Регистратор
	|			ИЗ
	|				втДокументыНаОсновании КАК втДокументыНаОсновании)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотребление.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоменклатураКЗаказу.Номенклатура,
	|	НоменклатураКЗаказу.Количество - ЕСТЬNULL(УжеЗаказаннаяНоменклатура.Количество, 0) КАК Количество
	|ИЗ
	|	НоменклатураКЗаказу КАК НоменклатураКЗаказу
	|		ЛЕВОЕ СОЕДИНЕНИЕ УжеЗаказаннаяНоменклатура КАК УжеЗаказаннаяНоменклатура
	|		ПО НоменклатураКЗаказу.Номенклатура = УжеЗаказаннаяНоменклатура.Номенклатура
	|ГДЕ
	|	НоменклатураКЗаказу.Количество - ЕСТЬNULL(УжеЗаказаннаяНоменклатура.Количество, 0) > 0";
		
	Запрос.УстановитьПараметр("ID", МассивДанных[0].ID);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	НоменклатураКЗаказу = ПолучитьТаблицуНоменклатурыКЗаказу(МассивДанных);
	
	НоменклатураКЗаказу.Свернуть("Номенклатура", "Количество");
	Запрос.УстановитьПараметр("НоменклатураКЗаказу", НоменклатураКЗаказу);
	
	Товары = торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Запрос.Выполнить());
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
		
КонецФункции

&НаСервере
Функция ПолучитьТаблицуНоменклатурыКЗаказу(Ремонты)
	
	ТаблицаОРВР = Новый ТаблицаЗначений;
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТаблицаОРВР.Колонки.Добавить("ОбъектРемонтныхРабот",ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.торо_ВидыРемонтов"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив);
	ТаблицаОРВР.Колонки.Добавить("ВидРемонтныхРабот",ОписаниеТипов);
		
	Массив = Новый Массив;
	Массив.Добавить(Тип("Дата"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив,,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	ТаблицаОРВР.Колонки.Добавить("ДатаНач",ОписаниеТипов);
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Строка"));
	ОписаниеТипов = Новый ОписаниеТипов(Массив,,,,Новый КвалификаторыСтроки(36));
	ТаблицаОРВР.Колонки.Добавить("ID",ОписаниеТипов);
	
	Для каждого Строка Из Ремонты Цикл
		НС = ТаблицаОРВР.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Строка);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТаблицаОРВР.ОбъектРемонтныхРабот КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонтныхРабот,
	               |	ТаблицаОРВР.ВидРемонтныхРабот КАК ВидРемонта,
	               |	ТаблицаОРВР.ДатаНач КАК ДатаРемонта,
	               |	ТаблицаОРВР.ID КАК ИД
	               |ПОМЕСТИТЬ ТаблицаОРВР
	               |ИЗ
	               |	&ТаблицаОРВР КАК ТаблицаОРВР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаОРВР.ОбъектРемонтныхРабот,
	               |	ТаблицаОРВР.ВидРемонта,
	               |	ВЫБОР
	               |		КОГДА торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК Приоритет,
	               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	               |	ТаблицаОРВР.ДатаРемонта,
	               |	ТаблицаОРВР.ИД
	               |ПОМЕСТИТЬ ТаблицаНормативов
	               |ИЗ
	               |	ТаблицаОРВР КАК ТаблицаОРВР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |		ПО (ТаблицаОРВР.ОбъектРемонтныхРабот = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	               |				ИЛИ ТаблицаОРВР.ОбъектРемонтныхРабот.ТиповойОР = торо_НормативныеРемонтыОборудования.ТиповойОР)
	               |			И ТаблицаОРВР.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаНормативов.ОбъектРемонтныхРабот,
	               |	ТаблицаНормативов.ВидРемонта,
	               |	МАКСИМУМ(ТаблицаНормативов.Приоритет) КАК Приоритет,
	               |	ТаблицаНормативов.ДатаРемонта,
	               |	ТаблицаНормативов.ИД
	               |ПОМЕСТИТЬ втТабМаксимальныхПриоритетов
	               |ИЗ
	               |	ТаблицаНормативов КАК ТаблицаНормативов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаНормативов.ВидРемонта,
	               |	ТаблицаНормативов.ОбъектРемонтныхРабот,
	               |	ТаблицаНормативов.ДатаРемонта,
	               |	ТаблицаНормативов.ИД
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаНормативов.ОбъектРемонтныхРабот,
	               |	ТаблицаНормативов.ВидРемонта,
	               |	ТаблицаНормативов.НормативныйРемонт КАК ТехКарта,
	               |	ТаблицаНормативов.ДатаРемонта,
	               |	ТаблицаНормативов.ИД
	               |ИЗ
	               |	ТаблицаНормативов КАК ТаблицаНормативов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТабМаксимальныхПриоритетов КАК втТабМаксимальныхПриоритетов
	               |		ПО ТаблицаНормативов.ОбъектРемонтныхРабот = втТабМаксимальныхПриоритетов.ОбъектРемонтныхРабот
	               |			И ТаблицаНормативов.ВидРемонта = втТабМаксимальныхПриоритетов.ВидРемонта
	               |			И ТаблицаНормативов.Приоритет = втТабМаксимальныхПриоритетов.Приоритет";
				   
	Запрос.УстановитьПараметр("ТаблицаОРВР",ТаблицаОРВР);
	
	ТЗНоменклатура = Новый ТаблицаЗначений;
	
	ТЗНоменклатура.Колонки.Добавить("ОбъектРемонтныхРабот");
	ТЗНоменклатура.Колонки.Добавить("ВидРемонта");
	ТЗНоменклатура.Колонки.Добавить("ДатаРемонта");
	ТЗНоменклатура.Колонки.Добавить("ИД");
	ТЗНоменклатура.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТЗНоменклатура.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьТЗНоменклатурой(ТЗНоменклатура, Выборка, Выборка.ТехКарта);	
	КонецЦикла; 
	
	Возврат ТЗНоменклатура;

КонецФункции

&НаСервере
Процедура ЗаполнитьТЗНоменклатурой(ТЗ, Выборка, ТехКарта)
	
	Запрос = Новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТехКарты_СписокОпераций.Операция,
	               |	торо_ТехКарты_СписокОпераций.ID,
	               |	торо_ТехКарты_СписокОпераций.Ссылка
	               |ПОМЕСТИТЬ СписокОпераций
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаРемонта, ИдентификаторТехКарты = &ТехКарта) КАК торо_ВерсииТехКартСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты_СписокОпераций
	               |		ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты_СписокОпераций.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_РемонтыМатериальныеЗатраты.Номенклатура,
	               |	торо_РемонтыМатериальныеЗатраты.Упаковка,
	               |	торо_РемонтыМатериальныеЗатраты.ЕдиницаИзмерения,
	               |	торо_РемонтыМатериальныеЗатраты.КоличествоУпаковок,
	               |	торо_РемонтыМатериальныеЗатраты.ID
	               |ПОМЕСТИТЬ СписокМатериалов
	               |ИЗ
	               |	Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_РемонтыМатериальныеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
	               |		ПО торо_РемонтыМатериальныеЗатраты.Ссылка = СписокОпераций.Ссылка
	               |			И торо_РемонтыМатериальныеЗатраты.ID = СписокОпераций.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СписокОпераций.Операция,
	               |	СписокМатериалов.Номенклатура,
	               |	ВЫБОР
	               |		КОГДА СписокМатериалов.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
	               |			ТОГДА 1
	               |		ИНАЧЕ СписокМатериалов.Упаковка.Коэффициент
	               |	КОНЕЦ * СписокМатериалов.КоличествоУпаковок КАК Количество
	               |ИЗ
	               |	СписокОпераций КАК СписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ СписокМатериалов КАК СписокМатериалов
	               |		ПО (СписокМатериалов.ID = СписокОпераций.ID)";

	Запрос.УстановитьПараметр("ДатаРемонта", Выборка.ДатаРемонта);
	Запрос.УстановитьПараметр("ТехКарта",ТехКарта);

	Результат = Запрос.Выполнить();
	Таблица = Запрос.Выполнить().Выгрузить();

	Для каждого Строка Из Таблица Цикл
		
		Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда

			ЗаполнитьТЗНоменклатурой(ТЗ,Выборка,Строка.Операция);
			
		ИначеЕсли ЗначениеЗаполнено(Строка.Номенклатура) И ЗначениеЗаполнено(Строка.Количество) Тогда	
			
			НС = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Выборка);
			ЗаполнитьЗначенияСвойств(НС, Строка);
			
		КонецЕсли;
	
	КонецЦикла;		
КонецПроцедуры

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов(Результат, ДополнительныеПараметры) Экспорт
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры) 
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИнтеграцияДокументов.ДокументЕРП
		               |ИЗ
		               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		               |ГДЕ
		               |	торо_ИнтеграцияДокументов.ID = &ID
		               |	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
					   |	И торо_ИнтеграцияДокументов.ДокументЕРП  = &СсылкаНаДокЕРП";
					   
		Запрос.УстановитьПараметр("ID",ДополнительныеПараметры.ТекущийРемонт_ID);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП", ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.ТекущийРемонт_ID, Объект.Ссылка, ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ID, ДокументТОИР, ДокументЕРП)
	
	Если Не ДокументЕРП = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		Запись.ID           = ID;
		Запись.ДокументТОИР = ДокументТОИР;
		Запись.ДокументЕРП  = ДокументЕРП;
		Запись.Записать();
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЗаказНаВнПотребление(Парам1 = Неопределено, Парам2 = Неопределено) Экспорт
	 ОбновитьДокументыЗаказНаВнПотреблениеСервер(Парам1, Парам2);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыЗаказНаВнПотреблениеСервер(Парам1 = Неопределено, Парам2 = Неопределено) 
	
	ДокументыЗаказНаВнПотребление.Очистить();
	
	СписокID = Объект.ПланРемонтов.Выгрузить(,"ID");
	Запрос  = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ИнтеграцияДокументов.ДокументЕРП КАК ЗаказНаВнутреннееПотребление,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументТОИР = &ЭтотДокумент
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ЗаказИзЭтогоДокумента,
	               |	ВЫБОР
	               |		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	               |			ТОГДА 1
	               |		ИНАЧЕ 0
	               |	КОНЕЦ КАК ИндексКартинки,
	               |	торо_ИнтеграцияДокументов.ID
	               |ИЗ
	               |	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	               |ГДЕ
	               |	торо_ИнтеграцияДокументов.ID В(&СписокID)
	               |	И НЕ торо_ИнтеграцияДокументов.ДокументЕРП.ПометкаУдаления
	               |	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ЗаказНаВнутреннееПотребление)";

	Запрос.УстановитьПараметр("СписокID",СписокID);
	Запрос.УстановитьПараметр("ЭтотДокумент", Объект.Ссылка);
				   
	ДокументыЗаказНаВнПотребление.Загрузить(Запрос.Выполнить().Выгрузить());
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаказПомечен = ПометитьЗаказНаСервере(ДополнительныеПараметры);
		Если ТипЗнч(ЗаказПомечен) <> Тип("Булево") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ЗаказПомечен;
			Сообщение.Сообщить(); 
		КонецЕсли; 
	КонецЕсли; 	
КонецПроцедуры
 
&НаСервере
Функция ПометитьЗаказНаСервере(СтруктураПараметров)
	
	Попытка
		
		ОбъектЗаказ = СтруктураПараметров.ЗаказСсылка.ПолучитьОбъект();
		
		Если ОбъектЗаказ.Проведен Тогда
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектЗаказ.ПометкаУдаления = Истина;
		ОбъектЗаказ.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ID = СтруктураПараметров.ID;
		МенеджерЗаписи.ДокументЕРП  = СтруктураПараметров.ЗаказСсылка;
		МенеджерЗаписи.ДокументТОИР = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
		
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
		
	Исключение
	    
		Возврат ОписаниеОшибки();
		
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	
	Объект.ПланРемонтов.Очистить();
	Объект.ОбъектыРемонта.Очистить();
	
	Основание = Объект.ДокументОснование;	
	
	Если ЗначениеЗаполнено(Основание) тогда
		Объект.Подразделение = Основание.Подразделение;
		Объект.Организация = Основание.Организация;
	Иначе
		Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
	КонецЕсли;
	
	Если Основание.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		Объект.ДатаПланирования = Основание.ДатаПланирования;
		Объект.КоличествоПериодов = 1;
		Объект.ПериодичностьДетализации = Перечисления.Периодичность.Месяц;
	Иначе
		Объект.ДатаПланирования = Основание.ДатаПланирования;
		Объект.КоличествоПериодов = Основание.КоличествоПериодов;
		Объект.ПериодичностьДетализации = Основание.ПериодичностьДетализации;
	КонецЕсли;
	
	ТЗ_ПланРемонтов = Основание.ПланРемонтов.Выгрузить();
	ТЗ_ПланРемонтов.ЗаполнитьЗначения(Основание, "Документ");
	
	ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаКон"), "ДатаКонСт");
	ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаНач"), "ДатаНачСт");
	
	Объект.ПланРемонтов.Загрузить(ТЗ_ПланРемонтов);
	
	Объект.ОбъектыРемонта.Загрузить(Основание.ОбъектыРемонта.Выгрузить());
	
	РабочаяДата = ТекущаяДата();
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбъектыРемонтаИзУточняемого.Загрузить(Объект.ДокументОснование.ОбъектыРемонта.Выгрузить());
	Иначе
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ОбъектыРемонтаИзУточняемого.Загрузить(Объект.ДокументОснование.ОбъектыРемонта.Выгрузить());
		КонецЕсли;
		// Заполнить реквизиты значениями по умолчанию.
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
		КонецЕсли;	
	КонецЕсли; 	
	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции();	
	
КонецПроцедуры	

&НаКлиенте
Функция НайтиТочку(Искомое, Точки, МассивТочек)
	
	Для каждого текТочка из Точки Цикл
		Если текТочка.Расшифровка = Искомое Тогда
			МассивТочек.Добавить(текТочка);
			Возврат ТекТочка;
		Иначе
			Результат = НайтиТочку(Искомое, ТекТочка.Точки, МассивТочек);
			Если Результат <> Неопределено Тогда
				МассивТочек.Добавить(текТочка);
				возврат Результат
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция НайтиНужнуюТочкуДиаграммыГанта(ОР, ВР)
	
	ТочкаОР = Неопределено;
	ТочкаВР = Неопределено;
	МассивТочек = Новый Массив;
	
	ТочкаОР = НайтиТочку(ОР, ДиаграммаГантаППР.Точки, массивТочек);
	
	Если ТочкаОР = Неопределено тогда
		Возврат Новый Массив;
	Иначе 
		ТочкаВР = НайтиТочку(ВР, ТочкаОР.Точки, массивТочек);
	КонецЕсли;
	
	Если ТочкаВР = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат массивТочек;
	
КонецФункции

&НаКлиенте
// Функция преобразует текст в дату
//
// Параметры:
//  Текст - Строка
//
// Возвращаемое значение:
//  Дата
//
Функция ДиаграммаГантаПреобразоватьТекстВДату(Текст)
	
	Попытка
		
		Поправка = ?(СтрДлина(Текст)>=19, 1, 0);
		День   = Число(Сред(Текст,  0, 2));
		Месяц  = Число(Сред(Текст,  4, 2));
		Год    = Число(Сред(Текст,  7, 4));
		Час    = Число(Сред(Текст,  11 + Поправка, 2));
		Минута = Число(Сред(Текст,  14 + Поправка, 2));
		Сек    = Число(Сред(Текст,  17 + Поправка, 2));
		
	Исключение
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка отображения диаграммы ремонтов'"), СтатусСообщения.Важное);
	КонецПопытки; 
	
	Возврат Дата(Год, Месяц, День, Час, Минута, Сек);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьСортировкуТЧПланРемонтов(параметрОбъект)
	
	ДокОбъект = ДанныеФормыВЗначение(параметрОбъект, Тип("ДокументОбъект.торо_ПланГрафикРемонта"));
	
	ДокОбъект.ПланРемонтов.Сортировать("ДатаНач возр");
	
	ЗначениеВДанныеФормы(ДокОбъект, параметрОбъект);
	
	Возврат параметрОбъект;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивВРЦепочкиНаСервере(Цепочка)
	
	МассивВР = Новый Массив;
	
	Для каждого Элем Из Цепочка.ПоследовательностьРемонтов Цикл
		
		МассивВР.Добавить(Элем.ВидРемонта);
		
	КонецЦикла;
	
	Возврат МассивВР;
	
КонецФункции

&НаСервере 
Процедура УбратьУО()
	масУдаления = Новый Массив;
	Для каждого текЭлем из УсловноеОформление.Элементы цикл
		Если текЭлем.ИдентификаторПользовательскойНастройки = "ВидимостьДляТЧПланРемонтов" Тогда
			масУдаления.Добавить(текЭлем);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого текЭлем из масУдаления Цикл
		УсловноеОформление.Элементы.Удалить(текЭлем);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура УстановитьУО(Цепочка)
	
	УбратьУО();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта
	               |ИЗ
	               |	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	               |ГДЕ
	               |	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Цепочка);
	
	резЗапроса = Запрос.Выполнить();
	сзВидовРемонтов = Новый СписокЗначений;
	Если НЕ резЗапроса.Пустой() Тогда
		Выборка = резЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			сзВидовРемонтов.Добавить(Выборка.ВидРемонта);
		КонецЦикла;
	КонецЕсли;
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ЭлементУО.ИдентификаторПользовательскойНастройки = "ВидимостьДляТЧПланРемонтов";
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	ЭлементУсловия = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементУсловия.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПланРемонтов.ВидРемонтныхРабот"); 
	ЭлементУсловия.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементУсловия.ПравоеЗначение = сзВидовРемонтов;

	Для Каждого Колонка Из Элементы.ПланРемонтов.ПодчиненныеЭлементы Цикл
		ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Колонка.Имя);
	КонецЦикла;

	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовДатаКон");
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовДатаНач");	
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовДатаКонСт");	
	
	ОформляемоеПоле = ЭлементУО.Поля.Элементы.Добавить();    
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ПланРемонтовДатаНачСт");	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

фПослеОчистки = Ложь;

#Если Клиент Тогда
	НужноСортироватьПланРемонтов = Ложь;
#КонецЕсли

#КонецОбласти