#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
		
	МассивНепроверяемыхРеквизитов.Добавить("Товары.ДатаОтгрузки");
	
	ОбщегоНазначенияУТ.ПроверитьЗаполнениеКоличества(ЭтотОбъект, ПроверяемыеРеквизиты, Отказ);
	
	ВсеСтрокиОтменены = ОбщегоНазначенияУТ.ВсеСтрокиОтменены(ЭтотОбъект, "Товары", "Отменено");	
			
	// Дата отгрузки в шапке должна быть не меньше даты документа
	Если ЗначениеЗаполнено(ДатаОтгрузки) И 
		ДатаОтгрузки < НачалоДня(Дата) Тогда
		
		ТекстОшибки = НСтр("ru='Дата отгрузки должна быть не меньше даты документа %Дата%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Дата%", Формат(Дата,"ДЛФ=DD"));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				ЭтотОбъект,
				"ДатаОтгрузки",
				,
				Отказ);
		
	КонецЕсли;
	
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");
	МассивНепроверяемыхРеквизитов.Добавить("Товары.Характеристика");
	Если ФОИспользоватьХарактеристикиНоменклатуры = Истина тогда
		НоменклатураСервер.ПроверитьЗаполнениеХарактеристик(ЭтотОбъект,МассивНепроверяемыхРеквизитов,Отказ);
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)

	ДатаОтгрузки  = Дата(1, 1, 1);

	МаксимальныйКодСтроки = 0;


	Для каждого СтрокаТовары из Товары Цикл

		СтрокаТовары.Отменено           = Ложь;
		СтрокаТовары.КодСтроки          = 0;

	КонецЦикла;
	
	ИнициализироватьДокумент();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		
		Возврат;
		
	КонецЕсли;

	УстановитьКлючВСтрокахТабличнойЧасти(ЭтотОбъект, "Товары");

	Если НЕ Ссылка.Пустая() И
		((РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ПометкаУдаления И Проведен)
		ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.ЗаказНаВнутреннееПотребление КАК ДокИсточник
		               |ИЗ
		               |	Документ.ВнутреннееПотреблениеТоваров КАК Таб
		               |ГДЕ
		               |	Таб.ЗаказНаВнутреннееПотребление = &Ссылка
		               |	И Таб.Ссылка.Проведен";
					   
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		резЗапроса = Запрос.Выполнить();
		Если НЕ резЗапроса.Пустой() Тогда
			Если (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ПометкаУдаления) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'"));
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='Невозможно проведение документа, есть документы, введенные на основании данного!'"));
			КонецЕсли;
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция УстановитьКлючВСтрокахТабличнойЧасти(Объект, ИмяТабличнойЧасти, РеквизитМаксимальныйКодСтроки = "МаксимальныйКодСтроки")

	СтрокиБезКлюча = Объект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("КодСтроки", 0));
	Если СтрокиБезКлюча.Количество() > 0 Тогда
		
		ТекущийКод = Объект[РеквизитМаксимальныйКодСтроки];
		
		Для Каждого СтрокаТовары Из СтрокиБезКлюча Цикл
			
			ТекущийКод = ТекущийКод + 1;
			СтрокаТовары.КодСтроки = ТекущийКод;
			
		КонецЦикла;
		
		Объект[РеквизитМаксимальныйКодСтроки] = ТекущийКод;
		
	КонецЕсли;

КонецФункции

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ФОИспользоватьСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();

	// регистр ЗаказыНаВнутреннееПотребление Приход
	Движения.ЗаказыНаВнутреннееПотребление.Записывать = Истина;
	Для Каждого ТекСтрокаТовары Из Товары Цикл
		Если ТекСтрокаТовары.Номенклатура.ВидНоменклатуры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
			
			Движение = Движения.ЗаказыНаВнутреннееПотребление.Добавить();
			Движение.ВидДвижения    				= ВидДвиженияНакопления.Приход;
			Движение.Период        					= Дата;
			Движение.ЗаказНаВнутреннееПотребление 	= Ссылка;
			Движение.Номенклатура   				= ТекСтрокаТовары.Номенклатура;
			Движение.Характеристика 				= ТекСтрокаТовары.Характеристика;
			Движение.Склад          				= Склад;
			Движение.КодСтроки						= ТекСтрокаТовары.КодСтроки;
			Движение.КОформлению       				= ТекСтрокаТовары.Количество;
			
			Если ФОИспользоватьСерии Тогда
				Движение.Серия      = ТекСтрокаТовары.Серия;
			КонецЕсли; 	

		КонецЕсли;
	КонецЦикла;
	
	Движения.ЗаказыНаВнутреннееПотребление.Записывать = Истина;	
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ИнициализацияИЗаполнение

Процедура ИнициализироватьДокумент(ДанныеЗаполнения = Неопределено)

	Ответственный = Пользователи.ТекущийПользователь();
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Склад) Тогда
		
		Склад = Справочники.Склады.СкладПоУмолчанию();
		
	КонецЕсли;

	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// ТОиР
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("МассивСтрокНоменклатуры") 
		Тогда
		
		Дата = ТекущаяДата();
		
		Если ДанныеЗаполнения.Свойство("Организация") Тогда
			Организация = ДанныеЗаполнения.Организация;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Подразделение") Тогда
			Подразделение = ДанныеЗаполнения.Подразделение;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ДатаОтгрузки") Тогда
			ДатаОтгрузки = ДанныеЗаполнения.ДатаОтгрузки;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Склад") Тогда
			Склад = ДанныеЗаполнения.Склад;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Комментарий") Тогда
			Комментарий = ДанныеЗаполнения.Комментарий;
		КонецЕсли;
				
		Для каждого Строка Из ДанныеЗаполнения.МассивСтрокНоменклатуры Цикл
			НС = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Строка);
			НС.КоличествоУпаковок = Строка.Количество;
		КонецЦикла; 
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяОрганизация",
		Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Подразделение) Тогда
		
		Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновноеПодразделение",
		Истина);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Ответственный) Тогда
		
		Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнойОтветственный",
		Справочники.Пользователи.ПустаяСсылка());
		
	КонецЕсли;
	// ТОиР
	
КонецПроцедуры


#КонецОбласти

#КонецОбласти

#КонецЕсли
