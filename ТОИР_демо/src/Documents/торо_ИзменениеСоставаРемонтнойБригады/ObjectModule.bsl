#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт;  // Структура, хранящая данные для работы с уведомлениями.
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
// Процедура - обработчик "ОбработкаПроведения".
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если СоставРемонтнойБригады.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе не заполнена табличная часть состава ремонтной бригады. Проведение невозможно!'"));
		Отказ = истина;
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = Строка(Ссылка);
	
	Если Не Отказ Тогда
		
		УстановитьУправляемыеБлокировки();
		ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	// проверка на возможность отмены проведения
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_СоставРемонтныхБригад");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("РемонтнаяБригада", РемонтнаяБригада);
		
	Блокировка.Заблокировать();
	
КонецПроцедуры

// Функция возвращает таблицу значений для проведения документа.
//
Функция ПолучитьСоставРемонтнойБригады()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоставРемонтнойБригады.Квалификация,
	               |	СоставРемонтнойБригады.Исполнитель,
	               |	СоставРемонтнойБригады.Ссылка.РемонтнаяБригада,
	               |	СоставРемонтнойБригады.Бригадир
	               |ИЗ
	               |	Документ.торо_ИзменениеСоставаРемонтнойБригады.СоставРемонтнойБригады КАК СоставРемонтнойБригады
	               |ГДЕ
	               |	СоставРемонтнойБригады.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Возврат Запрос.Выполнить().Выгрузить();			   
	
КонецФункции // ПолучитьСостав

// Процедура выполняет движения документа по регистру "торо_СоставРемонтныхБригад".
//	
Процедура ДвиженияПоРегистру_торо_СоставРемонтныхБригад(РежимПроведения, ТаблицаСоставаРемонтнойБригады, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ИзменениеСоставаРемонтнойБригадыСоставРемонтнойБригады.Исполнитель КАК Исполнитель,
	               |	торо_ИзменениеСоставаРемонтнойБригадыСоставРемонтнойБригады.Квалификация КАК Квалификация,
	               |	торо_ИзменениеСоставаРемонтнойБригадыСоставРемонтнойБригады.Ссылка.РемонтнаяБригада,
	               |	торо_ИзменениеСоставаРемонтнойБригадыСоставРемонтнойБригады.Бригадир
	               |ПОМЕСТИТЬ Вт_ДанныеДок
	               |ИЗ
	               |	Документ.торо_ИзменениеСоставаРемонтнойБригады.СоставРемонтнойБригады КАК торо_ИзменениеСоставаРемонтнойБригадыСоставРемонтнойБригады
	               |ГДЕ
	               |	торо_ИзменениеСоставаРемонтнойБригадыСоставРемонтнойБригады.Ссылка = &Ссылка
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Исполнитель,
	               |	Квалификация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_СоставРемонтныхБригадСрезПоследних.Исполнитель КАК Исполнитель,
	               |	торо_СоставРемонтныхБригадСрезПоследних.Квалификация КАК Квалификация,
	               |	торо_СоставРемонтныхБригадСрезПоследних.РемонтнаяБригада,
	               |	торо_СоставРемонтныхБригадСрезПоследних.Бригадир
	               |ПОМЕСТИТЬ ВТ_ДанныеРег
	               |ИЗ
	               |	РегистрСведений.торо_СоставРемонтныхБригад.СрезПоследних(
	               |			&Момент,
	               |			РемонтнаяБригада = &РемБригада
	               |				И ИсключенИзБригады = ЛОЖЬ) КАК торо_СоставРемонтныхБригадСрезПоследних
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Исполнитель,
	               |	Квалификация
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(Вт_ДанныеДок.Исполнитель, ВТ_ДанныеРег.Исполнитель) КАК Исполнитель,
	               |	ЕСТЬNULL(Вт_ДанныеДок.Квалификация, ВТ_ДанныеРег.Квалификация) КАК Квалификация,
	               |	ЕСТЬNULL(Вт_ДанныеДок.Бригадир, ЛОЖЬ) КАК Бригадир,
	               |	ВЫБОР
	               |		КОГДА Вт_ДанныеДок.Исполнитель ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ИсключенИзБригады
	               |ИЗ
	               |	Вт_ДанныеДок КАК Вт_ДанныеДок
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ДанныеРег КАК ВТ_ДанныеРег
	               |		ПО Вт_ДанныеДок.Исполнитель = ВТ_ДанныеРег.Исполнитель
	               |			И Вт_ДанныеДок.Квалификация = ВТ_ДанныеРег.Квалификация";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("РемБригада", РемонтнаяБригада);
	
	Если РежимПроведения = РежимПроведенияДокумента.Оперативный Тогда
		Запрос.УстановитьПараметр("Момент", Неопределено);
	Иначе
		Запрос.УстановитьПараметр("Момент", МоментВремени());
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			нс = Движения.торо_СоставРемонтныхБригад.Добавить();
			ЗаполнитьЗначенияСвойств(нс, Выборка);
			нс.РемонтнаяБригада = РемонтнаяБригада;
			нс.Период = Дата;
		КонецЦикла;
	КонецЕсли;
	
	Движения.торо_СоставРемонтныхБригад.Записать();
	
КонецПроцедуры

// По результату запроса по шапке документа формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
	// Движение по регистру "торо_СоставРемонтныхБригад".
	ТаблицаСоставаРемонтнойБригады = ПолучитьСоставРемонтнойБригады();
	ДвиженияПоРегистру_торо_СоставРемонтныхБригад(РежимПроведения, ТаблицаСоставаРемонтнойБригады, Отказ, Заголовок);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
