#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
		
	КонецЕсли;
	// Заголовок формы++
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	
	// Заголовок формы--
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Заголовок формы++
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	
	// Заголовок формы--
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура РемонтнаяБригадаПриИзменении(Элемент)
	
	Объект.СоставРемонтнойБригады.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.РемонтнаяБригада) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСоставРемонтнойБригады();
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставРемонтнойБригады
&НаКлиенте
Процедура СоставРемонтнойБригадыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ОтменаРедактирования И (Не ЗначениеЗаполнено(ТекДанные.Исполнитель) ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.Квалификация) ИЛИ Объект.СоставРемонтнойБригады.НайтиСтроки(Новый Структура("Исполнитель",ТекДанные.Исполнитель)).Количество() > 1) Тогда
		Объект.СоставРемонтнойБригады.Удалить(ТекДанные);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.Квалификация) И НЕ ОтменаРедактирования Тогда
		Отказ=Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле Квалификация.'"));
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекДанные.Исполнитель) И НЕ ОтменаРедактирования Тогда
		Отказ=Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле Исполнитель.'"));
		Возврат;
	КонецЕсли;
	
	Если Объект.СоставРемонтнойБригады.НайтиСтроки(Новый Структура("Исполнитель", ТекДанные.Исполнитель)).Количество() > 1 И НЕ ОтменаРедактирования Тогда
		Отказ=Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Следующие исполнители внесены в список более одного раза:'") + "  - " + ТекДанные.Исполнитель);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставРемонтнойБригадыКвалификацияПриИзменении(Элемент)
	ТекДанные = Элементы.СоставРемонтнойБригады.ТекущиеДанные;
	
	ТекДанные.Исполнитель = "";
КонецПроцедуры

&НаКлиенте
Процедура СоставРемонтнойБригадыИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Форма = ПолучитьФорму("Справочник.Сотрудники.ФормаВыбора", Новый Структура("РежимВыбора", Истина), Элемент);
	ТекДанные = Элементы.СоставРемонтнойБригады.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Квалификация) Тогда
		СписокСотрудников = торо_ПроцедурыУправленияПерсоналом.ПолучитьСписокСотрудниковСКвалификацией(ТекДанные.Квалификация);
		
		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ПравоеЗначение = СписокСотрудников;
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		СписокСотрудников = торо_ПроцедурыУправленияПерсоналом.ПолучитьСписокНеуволенныхСотрудников();
		
		ЭлементОтбора = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ПравоеЗначение = СписокСотрудников;
		ЭлементОтбора.Использование = Истина;

	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
// Процедура выполняет заполнение таблицы состава ремонтной бригады.
//
Процедура ЗаполнитьСоставРемонтнойБригады()
	
	Ресурсы = Объект.РемонтнаяБригада.РесурсыРемонтнойБригады;
	
	ТаблицаПрежнегоСостава = ПолучитьТаблицуТекущегоСостава();
	
	Для Каждого СтрокаРабочий Из Ресурсы.Рабочие Цикл
		
		Для Счетчик1 = 1 По СтрокаРабочий.Количество Цикл
			
			НовСтрСостава = Объект.СоставРемонтнойБригады.Добавить();
			НовСтрСостава.Квалификация = СтрокаРабочий.Квалификация;
			
			НайденнаяСтрока = ТаблицаПрежнегоСостава.Найти(СтрокаРабочий.Квалификация);
			Если Не НайденнаяСтрока = Неопределено Тогда
				НовСтрСостава.Исполнитель = НайденнаяСтрока.Исполнитель;
				ТаблицаПрежнегоСостава.Удалить(НайденнаяСтрока);
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	
КонецПроцедуры

&НаСервере
// Функция возвращает состав ремонтной бригады по дате документа.
//
Функция ПолучитьТаблицуТекущегоСостава()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СоставБригадСрезПоследних.Исполнитель,
	               |	СоставБригадСрезПоследних.Квалификация
	               |ИЗ
	               |	РегистрСведений.торо_СоставРемонтныхБригад.СрезПоследних(&Дата, РемонтнаяБригада = &РемонтнаяБригада) КАК СоставБригадСрезПоследних
	               |ГДЕ
	               |	СоставБригадСрезПоследних.ИсключенИзБригады = ЛОЖЬ";
				   
	Запрос.УстановитьПараметр("Дата", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("РемонтнаяБригада", Объект.РемонтнаяБригада);

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура СоставРемонтнойБригадыБригадирПриИзменении(Элемент)
	
	Для каждого текСтрока из Объект.СоставРемонтнойБригады Цикл
		текСтрока.бригадир = Ложь;
	КонецЦикла;
	
	ТекСтрока = Элементы.СоставРемонтнойБригады.ТекущиеДанные;
	Если текСтрока <> Неопределено Тогда
		текСтрока.Бригадир = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти