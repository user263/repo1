////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем ПредИерархия;
&НаКлиенте
Перем ПроисходитЗакрытие;
&НаКлиенте
Перем ПроисходитЗапись;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	Иначе
		// Проверка, все ли строки в документе можно редактировать и отбор недоступных строк.
		Если Объект.Проведен Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.ОбъектРемонта КАК Объект,
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель КАК Показатель,
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаИВремяОперации КАК ДатаРаботыПо
			               |ПОМЕСТИТЬ торо_УчетНаработкиОборудованияНаработкаОбъектов
			               |ИЗ
			               |	Документ.торо_УстановкаПроизвольногоЗначенияНаработки.НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
			               |ГДЕ
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка = &Ссылка
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.ОбъектРемонта,
			               |	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель,
			               |	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.ДатаИВремяОперации
			               |ИЗ
			               |	Документ.торо_УстановкаПроизвольногоЗначенияНаработки.НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов
			               |ГДЕ
			               |	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Ссылка = &Ссылка
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_ПериодыНаработкиОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
			               |	торо_ПериодыНаработкиОРСрезПоследних.Показатель КАК Показатель,
			               |	торо_ПериодыНаработкиОРСрезПоследних.Период КАК Период
			               |ПОМЕСТИТЬ ВТ_Даты
			               |ИЗ
			               |	РегистрСведений.торо_ПериодыНаработкиОР.СрезПоследних(
			               |			,
			               |			(ОбъектРемонта, Показатель) В
			               |					(ВЫБРАТЬ
			               |						торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект КАК Объект,
			               |						торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель КАК Показатель
			               |					ИЗ
			               |						торо_УчетНаработкиОборудованияНаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов)
			               |				И Регистратор <> &Ссылка) КАК торо_ПериодыНаработкиОРСрезПоследних
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	ОбъектРемонта,
			               |	Показатель
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект КАК Объект,
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель КАК Показатель,
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо КАК ДатаРаботыПо,
			               |	ВТ_Даты.Период КАК ДатаКон
			               |ИЗ
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Даты КАК ВТ_Даты
			               |		ПО торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект = ВТ_Даты.ОбъектРемонта
			               |			И торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель = ВТ_Даты.Показатель
			               |ГДЕ
			               |	ВТ_Даты.Период > торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо";
		
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				ТабНаработкаНедоступноДляРедактирования.Загрузить(РезультатЗапроса.Выгрузить());
			КонецЕсли;
        КонецЕсли;
	КонецЕсли;
	
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ПоказыватьПоложениеОР",
			Истина);
	Элементы.НаработкаОбъектовОтображатьПоложение.Пометка = мОтображатьПоложение;
	Элементы.НаработкаОбъектовПоложение.Видимость = мОтображатьПоложение;
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОРНаСервере();	
	КонецЕсли;
	
	Для каждого Стр Из Объект.НаработкаОбъектов Цикл
	
		Стр.ЕдиницаИзмерения = Стр.Показатель.ЕдиницаИзмерения;
	
	КонецЦикла; 
	
	Если Параметры.Свойство("МассивНаработки") Тогда
		ЭтоФормаСинхронизации = Истина;
		
		Объект.Организация 	 	 = Параметры.Организация;
		Объект.Подразделение 	 = Параметры.Подразделение;
		Объект.Ответственный 	 = Параметры.Ответственный;
		Объект.ДокументОснование = Параметры.ДокументОснование;
		
		МассивСтрокНаработкиОснованияДляСинхронизации.ЗагрузитьЗначения(Параметры.МассивНаработки);
		
		Для Каждого Строка Из Параметры.МассивНаработки Цикл
			НС = Объект.НаработкаОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Строка);
		КонецЦикла;
	КонецЕсли;
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	
	Если Параметры.Свойство("ИзДокументаУчетНаработки") Тогда
		ЗакрыватьПриЗакрытииВладельца = Истина;
		Элементы.НаработкаОбъектовАбсолютнаяНаработка.Видимость = Ложь;
		Элементы.НаработкаОбъектовНаработкаДоОперации.Видимость = Ложь;
		Элементы.НаработкаОбъектовРаспространятьНаПодчиненных.Видимость = Ложь;
		Элементы.НаработкаОбъектовИерархия.Видимость = Ложь;
		Элементы.НаработкаОбъектовСинхронизировать.Видимость = Ложь;
		Элементы.НаработкаОбъектовКоманднаяПанель.ПодчиненныеЭлементы.НаработкаОбъектовСинхронизировать1.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Элементы.НаработкаОбъектовОтображатьПоложение.Пометка Тогда
		ЗаполнитьПоложенияОРНаСервере();	
	КонецЕсли;
	
	Для каждого Стр Из Объект.НаработкаОбъектов Цикл
		Стр.ЕдиницаИзмерения = Стр.Показатель.ЕдиницаИзмерения;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("РежимЗаписи") И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если Объект.НаработкаОбъектов.Количество() = 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе не заполнена табличная часть наработки оборудования. Проведение невозможно!'"));
			Отказ = истина;
			Возврат;
		КонецЕсли;
		
			
			
		Для каждого СтрокаТЧ Из Объект.НаработкаОбъектов Цикл
			
			Если СтрокаТЧ.НаработкаДоОперации < 0 Тогда
				
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Показания счетчика на момент сброса не могут быть меньше нуля!'");
				Сообщение.Поле = "Объект.НаработкаОбъектов[" + Объект.НаработкаОбъектов.Индекс(СтрокаТЧ) + "].НаработкаДоОперации";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			Если СтрокаТЧ.НаработкаПослеОперации < 0 Тогда
				
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Начальное показание счетчика не может быть меньше нуля!'");
				Сообщение.Поле = "Объект.НаработкаОбъектов[" + Объект.НаработкаОбъектов.Индекс(СтрокаТЧ) + "].НаработкаПослеОперации";
				Сообщение.УстановитьДанные(Объект);
				Сообщение.Сообщить();
				
			КонецЕсли;
			
			Если СтрокаТЧ.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка") Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: Значение ""Объекта ремонта"" должно быть заполнено'"),СтрокаТЧ.НомерСтроки),СтатусСообщения.Важное); 
				Отказ = Истина;
			ИначеЕсли СтрокаТЧ.ДатаИВремяОперации = Дата("00010101000000") Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: Значение ""Дата и время операции"" должно быть заполнено'"),СтрокаТЧ.НомерСтроки),СтатусСообщения.Важное); 
				Отказ = Истина;
			ИначеЕсли СтрокаТЧ.ДатаПоследнейНаработки > СтрокаТЧ.ДатаИВремяОперации Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: Значение ""Дата и время операции"" должно быть больше чем ""Дата последней наработки""'"),СтрокаТЧ.НомерСтроки),СтатусСообщения.Важное); 
				Отказ = Истина;
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаТЧ.Показатель) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка %1: Значение ""Показатель наработки"" должно быть заполнено'"),СтрокаТЧ.НомерСтроки),СтатусСообщения.Важное); 
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Не Отказ И ЭтоФормаСинхронизации Тогда
		Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			СинхронизацияВыполнена = Истина;
			Для Каждого ЭлСписка Из МассивСтрокНаработкиОснованияДляСинхронизации Цикл
				Если Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("ОбъектРемонта,Показатель,ДатаИВремяОперации,ДатаПоследнейНаработки",ЭлСписка.Значение.ОбъектРемонта,ЭлСписка.Значение.Показатель,ЭлСписка.Значение.ДатаИВремяОперации,ЭлСписка.Значение.ДатаПоследнейНаработки)).Количество() = 0 Тогда
					СинхронизацияВыполнена = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СинхронизацияВыполнена Тогда
				Если НЕ ПроисходитЗапись Тогда
					Отказ = Истина;
					ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение",ЭтотОбъект),
									НСтр("ru = 'В результате проведения данного документа периоды регистрации не будут синхронизированы!
									|Возможно это результат корректировки дат операций. Все равно провести?'"),
									РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОРНаСервере();	
	КонецЕсли;
	
	Для каждого Стр Из Объект.НаработкаОбъектов Цикл
		
		Стр.ЕдиницаИзмерения = Стр.Показатель.ЕдиницаИзмерения;
		
	КонецЦикла;
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ПроисходитЗакрытие Тогда
		Закрыть();
		ПроисходитЗакрытие = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЭтоФормаСинхронизации Тогда
		Если Не ПроисходитЗакрытие Тогда
			Отказ = Истина;
			ПроисходитЗакрытие = Истина;
			Если ЗначениеЗаполнено(Объект.Ссылка) И НЕ ЗавершениеРаботы Тогда
				Если НЕ Объект.Проведен Тогда
					
					ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение",ЭтотОбъект),
					НСтр("ru = 'Для синхронизации периодов фиксации наработки необходимо провести документ! Закрыть документ без записи?'"),
					РежимДиалогаВопрос.ДаНет);
					
				Иначе
					Закрыть();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаработкаОбъектов
&НаКлиенте
Процедура НаработкаОбъектовПередУдалением(Элемент, Отказ)
	
	ТекСтрокаНаработкаОбъектов = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрПоиска = Новый Структура("Объект,Показатель, ДатаРаботыПо", ТекСтрокаНаработкаОбъектов.ОбъектРемонта, ТекСтрокаНаработкаОбъектов.Показатель, ТекСтрокаНаработкаОбъектов.ДатаИВремяОперации);
	Если НЕ СтрокаДоступнаДляРедактирования(СтрПоиска) Тогда
		Отказ = Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По объекту ремонта %1 и показателю наработки %2 на дату, более позднюю чем %3, зарегистрирована наработка. Удалить наработку объекта в этом документе нельзя.'"),ТекСтрокаНаработкаОбъектов.ОбъектРемонта,ТекСтрокаНаработкаОбъектов.Показатель, ТекСтрокаНаработкаОбъектов.ДатаИВремяОперации));
		Возврат;
	КонецЕсли;
	
	// удаление ранее введенных наработок подчиненных
	СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",ТекСтрокаНаработкаОбъектов.ОбъектРемонта, ТекСтрокаНаработкаОбъектов.Показатель));
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
		Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПоказательПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	
	// проверяем, не введена ли уже строка для нового показателя наработки
	СтрокиНаработкиСредиПодчиненных = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("ОбъектРемонта,Показатель", СтрокаТабличнойЧасти.ОбъектРемонта, СтрокаТабличнойЧасти.Показатель));
	Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже встречается среди подчиненных объектов ремонта объекта %3.'"),СтрокаТабличнойЧасти.ОбъектРемонта,СтрокаТабличнойЧасти.Показатель,СтрокиНаработкиСредиПодчиненных[0].РодительИерархии)); 
		СтрокаТабличнойЧасти.Показатель = ТекПоказатель;
		Возврат;
	КонецЕсли;
	
	СтрокиНаработкиСредиПодчиненных = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("ОбъектРемонта,Показатель", СтрокаТабличнойЧасти.ОбъектРемонта,СтрокаТабличнойЧасти.Показатель));
	Если СтрокиНаработкиСредиПодчиненных.Количество() > 1 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'"),СтрокаТабличнойЧасти.ОбъектРемонта,СтрокаТабличнойЧасти.Показатель)); 
		СтрокаТабличнойЧасти.Показатель = ТекПоказатель;
		Возврат;
	КонецЕсли;
	
	//
	СтруктураВозврата = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаТабличнойЧасти.ОбъектРемонта, СтрокаТабличнойЧасти.Показатель, Объект.Ссылка);
	СтрокаТабличнойЧасти.ДатаПоследнейНаработки = СтруктураВозврата.НаработаноДата;
	СтрокаТабличнойЧасти.ЗафиксированнаяНаработка = СтруктураВозврата.НаработаноЗначение;
	
	СтрокаТабличнойЧасти.АбсолютнаяНаработка = торо_РаботаСНаработкой.АбсолютноеЗначениеНаработки(Объект.Ссылка, СтрокаТабличнойЧасти.ОбъектРемонта, СтрокаТабличнойЧасти.Показатель);
	
	// удаление ранее введенных наработок подчиненных
	СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",СтрокаТабличнойЧасти.ОбъектРемонта, ТекПоказатель));
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
		Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) Тогда
		ОбработкаВыбораОРПользователем(ТекДанные.ОбъектРемонта, Новый Структура("ТекСтрока", ТекДанные)); 
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите объект ремонта!'");
		Сообщение.Поле = "Объект.НаработкаОбъектов[" + Объект.НаработкаОбъектов.Индекс(ТекДанные) + "].ОбъектРемонта";
		Сообщение.УстановитьДанные(Объект);
		Сообщение.Сообщить();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПриАктивизацииСтроки(Элемент)
	ТекСтрокаНаработкаОбъектов = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекПоказатель = ТекСтрокаНаработкаОбъектов.Показатель;
	ДатаОперации = ТекСтрокаНаработкаОбъектов.ДатаИВремяОперации;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	СписокДоступныхСтатусов = ПолучитьСписокСтатусовНаСервере();
	
	ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораОРПользователем",ЭтаФорма);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбъектПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР(СтрокаТабличнойЧасти.ОбъектРемонта);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОбъектРемонта) Тогда
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Показатель) Тогда
			
			РезультатЗапросаПустой = ЕстьЛиЗаписиПоОРИПоказателю(СтрокаТабличнойЧасти.ОбъектРемонта, СтрокаТабличнойЧасти.Показатель);
			
			Если РезультатЗапросаПустой Тогда
				ФормаВыбораПоказателя = ПолучитьФорму("Документ.торо_УстановкаПроизвольногоЗначенияНаработки.Форма.ФормаВыбораПараметраНаработки");
				ФормаВыбораПоказателя.ОбъектРемонтаФильтр = СтрокаТабличнойЧасти.ОбъектРемонта;
				ФормаВыбораПоказателя.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
				ФормаВыбораПоказателя.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НаработкаОбъектовРемонтаПриИзмененииЗавершение",ЭтотОбъект,
																							Новый Структура("СтрокаТабличнойЧасти",СтрокаТабличнойЧасти));
				ФормаВыбораПоказателя.Открыть();																			
			КонецЕсли;
		Иначе
			ФормаВыбораПоказателя = ПолучитьФорму("Документ.торо_УстановкаПроизвольногоЗначенияНаработки.Форма.ФормаВыбораПараметраНаработки");
			ФормаВыбораПоказателя.ОбъектРемонтаФильтр = СтрокаТабличнойЧасти.ОбъектРемонта;
			ФормаВыбораПоказателя.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
			ФормаВыбораПоказателя.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НаработкаОбъектовРемонтаПриИзмененииЗавершение",ЭтотОбъект,
																							Новый Структура("СтрокаТабличнойЧасти",СтрокаТабличнойЧасти));
			ФормаВыбораПоказателя.Открыть();
			
		КонецЕсли;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Показатель = ПредопределенноеЗначение("Справочник.ПараметрыВыработкиОС.ПустаяСсылка");
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНаработкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекДанные.ДатаИВремяОперации = ТекДанные.ДатаПоследнейНаработки Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно зафиксировать изменение наработки, так как ""Дата и время операции"" совпадает с ""Датой последней наработки"".'"));
		ТекДанные.Наработка = 0;
	КонецЕсли;
	
	СтруктураВозврата = ПолучитьМаксимальноеЗначенияПараметраНаработкиНаСервере(ТекДанные.ОбъектРемонта, ТекДанные.Показатель);
	
	Для каждого Элем Из СтруктураВозврата Цикл
		Если НЕ Элем.МаксимальноеЗначение = 0 И Элем.МаксимальноеЗначение < (ТекДанные.ЗафиксированнаяНаработка + ТекДанные.Наработка) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение наработки в момент сброса счетчика больше, чем максимальное значение наработки для данного показателя.'"));
			ТекДанные.Наработка = ТекДанные.НаработкаДоОперации - ТекДанные.ЗафиксированнаяНаработка;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекДанные.Наработка) Тогда
		ТекДанные.НаработкаДоОперации = ТекДанные.ЗафиксированнаяНаработка + ТекДанные.Наработка;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНаработкаДоОперацииПриИзменении(Элемент)
	
	ТекДанные = Элементы.НаработкаОбъектов.ТекущиеДанные;
	
	СтруктураВозврата = ПолучитьМаксимальноеЗначенияПараметраНаработкиНаСервере(ТекДанные.ОбъектРемонта, ТекДанные.Показатель);
	
	Для каждого Элем Из СтруктураВозврата Цикл
		Если НЕ Элем.МаксимальноеЗначение = 0 И Элем.МаксимальноеЗначение < (ТекДанные.НаработкаДоОперации - ТекДанные.Наработка) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Значение наработки в момент сброса счетчика больше, чем максимальное значение наработки для данного показателя.'"));
			ТекДанные.НаработкаДоОперации = ТекДанные.ЗафиксированнаяНаработка + ТекДанные.Наработка;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекДанные.НаработкаДоОперации) Тогда
		ТекДанные.Наработка = ТекДанные.НаработкаДоОперации - ТекДанные.ЗафиксированнаяНаработка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовРаспространятьНаПодчиненныхПриИзменении(Элемент)
	
	ТекДанные = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.Иерархия) Тогда
		СН = СоздатьСтруктуруНаработкиНаКлиенте();
		ЗаполнитьЗначенияСвойств(СН,ТекДанные);
		РаспространитьНаПодчиненныхДляТекущейСтроки(СН);	
	Иначе
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено значение иерархии, на подчиненные объекты из которой необходимо распространить наработку!'"));
		ТекДанные.РаспространятьНаПодчиненных = Ложь;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхСтатусов = ПолучитьСписокСтатусовНаСервере();
	
	ТекСтрока = Элементы.НаработкаОбъектов.ТекущиеДанные;	
	
	ПараметрыТекСтрока = Новый Структура();
	
	Если Не ТекСтрока = Неопределено Тогда
		
		ПараметрыТекСтрока.Вставить("ТекСтрока", ТекСтрока);

	КонецЕсли; 
	
	ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораОРПользователем",ЭтаФорма,ПараметрыТекСтрока);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	ПараметрыФормы = Новый Структура("ТекСтруктураИерархии", ТекСтруктураИерархии);
	ФормаНастрокиВидаИерархии = ПолучитьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаНастройкиВидаИерархии", ПараметрыФормы, ЭтаФорма);
	ФормаНастрокиВидаИерархии.СписокИерархий = ЗаполнитьСписокСтруктурНаСервере(ТекСтруктураИерархии);
	ФормаНастрокиВидаИерархии.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ФормаНастрокиВидаИерархии.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтотОбъект);
	
	ФормаНастрокиВидаИерархии.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Кнопка = Элементы.НаработкаОбъектовОтображатьПоложение;
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	Элементы.НаработкаОбъектовПоложение.Видимость = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЗаполнитьПоложенияОР(); 
	КонецЕсли;
	
	мОтображатьПоложение = Кнопка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	МассивСтрокНаработки = Новый Массив;
	
	Для Каждого Строка ИЗ Объект.НаработкаОбъектов Цикл
		Если Строка.Синхронизировать Тогда
			МассивСтрокНаработки.Добавить(Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, Иерархия",
			Строка.ОбъектРемонта, Строка.Показатель, Строка.ДатаПоследнейНаработки, Строка.ДатаИВремяОперации, Строка.Иерархия));
		Конецесли;
	КонецЦикла;
		
	Если МассивСтрокНаработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = ПолучитьСтруктуруДанныхДокументаСинхронизацииНаСервере(МассивСтрокНаработки,Объект.Ссылка);
	
	СтруктураДанных.Вставить("Подразделение",Объект.Подразделение);
	СтруктураДанных.Вставить("Организация",Объект.Организация);
	СтруктураДанных.Вставить("Ответственный",Объект.Ответственный);
	СтруктураДанных.Вставить("ДокументОснование",Объект.Ссылка);
	СтруктураДанных.Вставить("МассивСтрокНаработки",МассивСтрокНаработки);
	
	ФормаДопДокумента = ПолучитьФорму("Документ.торо_УстановкаПроизвольногоЗначенияНаработки.ФормаОбъекта",СтруктураДанных,,Объект.Ссылка);
	
	ФормаДопДокумента.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаДопДокумента.Элементы.НаработкаОбъектовАбсолютнаяНаработка.Видимость = Ложь;
	ФормаДопДокумента.Элементы.НаработкаОбъектовНаработкаДоОперации.Видимость = Ложь;
	ФормаДопДокумента.Элементы.НаработкаОбъектовРаспространятьНаПодчиненных.Видимость = Ложь;
	ФормаДопДокумента.Элементы.НаработкаОбъектовИерархия.Видимость = Ложь;
	ФормаДопДокумента.Элементы.НаработкаОбъектовСинхронизировать.Видимость = Ложь;
	
	ТЧСинхронизации = ФормаДопДокумента.Элементы.НаработкаОбъектов;
	НаработкаДляСинхронизации = СтруктураДанных.МассивНаработки;
	
	ФормаДопДокумента.Модифицированность = Истина;
	ФормаДопДокумента.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СинхронизироватьЗавершение",ЭтотОбъект,Новый Структура("ОбъектДопДокумента",ФормаДопДокумента.Объект));
	ФормаДопДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ФормаДопДокумента.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровестиИЗакрыть(Команда)
	
	Если Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение)) Тогда
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомандаПровести(Команда)
	
	Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	Если Объект.Проведен Тогда
		Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
	Иначе
		Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Запись));
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		ТекСтруктураИерархии = РезультатЗакрытия;
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда	
		
		ЗаполнитьПоложенияОР();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоложенияОР(ОР = Неопределено)
	
	ЗначВозврата = ЗаполнитьПоложенияОРНаСервере(ОР);	
	Если ЗначВозврата <> Неопределено Тогда
		Элементы.НаработкаОбъектов.ТекущиеДанные.Положение = ЗначВозврата;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоложенияОРНаСервере(ОР = Неопределено)
	
	СписокПоложений = Новый СписокЗначений;
	Если ОР = Неопределено Тогда
		
		Для каждого Стр Из Объект.НаработкаОбъектов Цикл
			
			Если СписокПоложений.НайтиПоЗначению(Стр.ОбъектРемонта) = Неопределено Тогда
				СписокПоложений.Добавить(Стр.ОбъектРемонта);		
			КонецЕсли;
			
			Стр.Положение = "";
			
		КонецЦикла; 
	Иначе
		
		СписокПоложений.Добавить(ОР);
		
	КонецЕсли;
	
	СтруктураПоложений = ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, ТекСтруктураИерархии, ТекущаяДата());
	
	Если ОР = Неопределено Тогда
		Для каждого Стр Из СтруктураПоложений Цикл
			
			МассивСтрок = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("ОбъектРемонта", Стр.Ключ));
			
			Для каждого Элем Из МассивСтрок Цикл
				
				Элем.Положение = Стр.Значение;
				
			КонецЦикла; 
			
		КонецЦикла;
		Возврат Неопределено;
	Иначе
		Возврат СтруктураПоложений[ОР];
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, СтруктураИерархии, Дата)
	
	Возврат торо_ОбщегоНазначения.ПолучитьПоложенияВИерархииОбъектовРемРабот(СписокПоложений, СтруктураИерархии, Дата);	
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСписокСтруктурНаСервере(СтруктураИерархии, БезТекИерархии = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_СтруктурыОР.Ссылка,
	|	торо_СтруктурыОР.Наименование
	|ИЗ
	|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|ГДЕ
	|	торо_СтруктурыОР.ПометкаУдаления = ЛОЖЬ";
	
	Если БезТекИерархии Тогда
		
		Запрос.Текст = Запрос.Текст + " И торо_СтруктурыОР.Ссылка <> &СтруктураИерархии";
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокСтруктурОР = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СписокСтруктурОР.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
		
	КонецЦикла;
	
	Если БезТекИерархии Тогда
		
		СписокСтруктурОР[0].Пометка = Истина;
	Иначе
		
		Для каждого ЭлементСписка Из СписокСтруктурОР Цикл
			
			ЭлементСписка.Пометка = ЭлементСписка.Значение = СтруктураИерархии;	
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокСтруктурОР;

КонецФункции

&НаКлиенте
Процедура НаработкаОбъектовРемонтаПриИзмененииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Показатель = РезультатЗакрытия;
	СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
	
	Если Показатель <> Неопределено Тогда
		СтрокаТабличнойЧасти.Показатель = Показатель;
	КонецЕсли;
	НаработкаОбъектовПоказательПриИзменении(СтрокаТабличнойЧасти.Показатель);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЛиЗаписиПоОРИПоказателю(ОбъектРемонта, Показатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПервых.Период
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПервых(
	|			,
	|			ОбъектРемонта = &ОбъектРемонта
	|				И Показатель = &Показатель) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПервых";
	
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораОРПользователем(ОбъектРемонта, ПараметрыВыбораОР) Экспорт
	
	Если ОбъектРемонта = Неопределено Тогда
		Возврат;
	Иначе
		ФормаВыбораПоказателя = ПолучитьФорму("Документ.торо_УстановкаПроизвольногоЗначенияНаработки.Форма.ФормаВыбораПараметраНаработки", Новый Структура("ОбъектРемонтаФильтр", ОбъектРемонта));
		ФормаВыбораПоказателя.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработкаВыбораОРПользователемЗавершение",ЭтотОбъект,
																					Новый Структура("ОбъектРемонта, ПараметрыВыбораОР", ОбъектРемонта, ПараметрыВыбораОР));
		ФормаВыбораПоказателя.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ФормаВыбораПоказателя.Открыть();
		Возврат;
		
	КонецЕсли;
	
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмеренияПоказателя(Показатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	ПараметрыВыработкиОС.ЕдиницаИзмерения
	               |ИЗ
	               |	Справочник.ПараметрыВыработкиОС КАК ПараметрыВыработкиОС
	               |ГДЕ
	               |	ПараметрыВыработкиОС.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Показатель);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();  
	Выборка.Следующий();
	
	Возврат Выборка.ЕдиницаИзмерения;
	
КонецФункции
 
&НаКлиенте
Процедура ОбработкаВыбораОРПользователемЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Показатель = РезультатЗакрытия;
	ОбъектРемонта = ДополнительныеПараметры.ОбъектРемонта;
	ПараметрыВыбораОР = ДополнительныеПараметры.ПараметрыВыбораОР;
	
	Если Показатель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// проверяем, чтобы не было дублей показателей и ОР
	СтрокиНаработкиСредиПодчиненных = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("ОбъектРемонта, Показатель", ОбъектРемонта,Показатель));
	Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже встречается среди подчиненных объектов ремонта объекта %3.'"),ОбъектРемонта,Показатель,СтрокиНаработкиСредиПодчиненных[0].РодительИерархии)); 
		Возврат;
	КонецЕсли;
	
	СтрокиНаработкиСредиПодчиненных = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("ОбъектРемонта, Показатель", ОбъектРемонта, Показатель));
	
	Если Не ПараметрыВыбораОР = Неопределено 
		И ПараметрыВыбораОР.Свойство("ТекСтрока") Тогда
		Если СтрокиНаработкиСредиПодчиненных.Количество() > 1 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'"),ОбъектРемонта,Показатель));
			Возврат;
		КонецЕсли;
	Иначе
		Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'"),ОбъектРемонта,Показатель)); 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// заполняем предыдущие значения
	Если Не ПараметрыВыбораОР = Неопределено 
		И ПараметрыВыбораОР.Свойство("ТекСтрока") Тогда
		НовСтрока = ПараметрыВыбораОР.ТекСтрока;
	Иначе
		НовСтрока = Объект.НаработкаОбъектов.Добавить();
	КонецЕсли; 
	НовСтрока.ОбъектРемонта = ОбъектРемонта;
	НовСтрока.Показатель = Показатель;
	НовСтрока.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияПоказателя(Показатель);
	НовСтрока.ДатаИВремяОперации = Объект.Дата;
	
	СтруктураВозврата = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(ОбъектРемонта, Показатель, Объект.Ссылка);
	НовСтрока.ЗафиксированнаяНаработка = СтруктураВозврата.НаработаноЗначение;
	НовСтрока.ДатаПоследнейНаработки = СтруктураВозврата.НаработаноДата;
	
	НовСтрока.НаработкаДоОперации = НовСтрока.ЗафиксированнаяНаработка + НовСтрока.Наработка;
	НовСтрока.АбсолютнаяНаработка = торо_РаботаСНаработкой.АбсолютноеЗначениеНаработки(Объект.Ссылка, ОбъектРемонта, Показатель);
	НовСтрока.Иерархия = ТекСтруктураИерархии;
	Если мОтображатьПоложение Тогда
		НовСтрока.Положение = ЗаполнитьПоложенияОРНаСервере(НовСтрока.ОбъектРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаксимальноеЗначенияПараметраНаработкиНаСервере(ОбъектРемонта, Показатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение
	|ИЗ
	|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|ГДЕ
	|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ОбъектРемонта
	|	И торо_МаксимальныеЗначенияНаработкиОР.Показатель = &Показатель";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	СтруктураВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураВозврата.Добавить(Новый Структура("МаксимальноеЗначение", Выборка.МаксимальноеЗначение));
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура РаспространитьНаПодчиненныхДляТекущейСтроки(ТекСтрокаНаработкаОбъектов)
	
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мОтказ = Ложь;
	
	флагРаспространятьНаПодчиненных = ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных;
	Если флагРаспространятьНаПодчиненных Тогда
						
		СтруктураТаблицыИерархии = торо_РаботаСИерархией.ПолучитьТаблицуИерархии(ТекСтрокаНаработкаОбъектов.Иерархия, Объект.Дата, Истина);
		СтруктураТаблицыИерархии.Колонки.ОбъектИерархии.Имя = "ОбъектРемонта";
		
		ТаблицаИерархииОР.Очистить();
		Для каждого Элем Из СтруктураТаблицыИерархии Цикл
			НС = ТаблицаИерархииОР.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла; 
		
		ПредИерархия = ТекСтрокаНаработкаОбъектов.Иерархия;
		
		СтруктураПодчиненныхОР = ПолучитьЗависимыеОРНаСервере(ТаблицаИерархииОР, ТекСтрокаНаработкаОбъектов.ОбъектРемонта, Неопределено, ТекСтрокаНаработкаОбъектов.ДатаПоследнейНаработки, ТекСтрокаНаработкаОбъектов.ДатаИВремяОперации, ТекСтрокаНаработкаОбъектов.Показатель);
		
		Для каждого Элем Из СтруктураПодчиненныхОР Цикл
		
			НС = ТаблицаПодчиненныхОР.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		
		КонецЦикла; 

		Для Каждого СтрокаСНаработкой Из Объект.НаработкаОбъектов Цикл
			Если Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("ОбъектРемонта,Показатель", СтрокаСНаработкой.ОбъектРемонта,СтрокаСНаработкой.Показатель)).Количество() = 0 Тогда
				Продолжить;
			Иначе
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Невозможно распространить наработку на подчиненные объекты ремонта.
					|	Объект ремонта %1 встречается повторно среди подчиненных объектов ремонта объекта %2.'"),СтрокаСНаработкой.ОбъектРемонта,ТекСтрокаНаработкаОбъектов.ОбъектРемонта)); 
				мОтказ = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		СтруктураАбсолютныхНаработокПодчиненных = ПолучитьАбсолютноеЗначениеНаработкиСтруктураНаСервере(СтруктураПодчиненныхОР, Объект.Ссылка);
		
		НеобходимаСинхронизация = Ложь;
		
		Если Не мОтказ Тогда
			
			Для Каждого СтрПодчиненнаяНаработка Из СтруктураАбсолютныхНаработокПодчиненных Цикл
				Если СтрПодчиненнаяНаработка.ДатаНаработка <> СтрПодчиненнаяНаработка.ДатаНачала Тогда
					НеобходимаСинхронизация = Истина;
					СтрокаТаблицыНаработки = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("ОбъектРемонта,Показатель",ТекСтрокаНаработкаОбъектов.ОбъектРемонта,ТекСтрокаНаработкаОбъектов.Показатель))[0];
					СтрокаТаблицыНаработки.Синхронизировать = Истина;
					СтрокаТаблицыНаработки.РаспространятьНаПодчиненных = Ложь; 
					мОтказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НеобходимаСинхронизация Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для распространения наработки на подчиненные ОР необходимо выполнить синхронизацию периодов регистрации наработки!'"));
			КонецЕсли;

			Если Не мОтказ Тогда
				
				СтруктураДляПередачи = Новый Структура("ОбъектРемонта, Показатель, ДатаПоследнейНаработки, ДатаИВремяОперации,
				|Наработка, НаработкаДоОперации, НаработкаПослеОперации, ПричинаИзмененияНаработки");
				ЗаполнитьЗначенияСвойств(СтруктураДляПередачи, ТекСтрокаНаработкаОбъектов);
				РаспространитьНаПодчиненныхДляТекСтрокиНаСервере(СтруктураДляПередачи, СтруктураАбсолютныхНаработокПодчиненных);
					
			КонецЕсли;
		КонецЕсли;
		
		Если мОтказ Тогда
			ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных = Ложь;
		КонецЕсли;
	Иначе
		СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии,Показатель",ТекСтрокаНаработкаОбъектов.ОбъектРемонта,ТекСтрокаНаработкаОбъектов.Показатель));
		
		Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
			Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
		КонецЦикла;
				
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РаспространитьНаПодчиненныхДляТекСтрокиНаСервере(ТекСтрокаНаработкаОбъектов, СтруктураАбсолютныхНаработокПодчиненных)
	
	ТаблицаИнтервалов.Очистить();
	
	НСТаблицаИнтервалов = ТаблицаИнтервалов.Вставить(0);
	НСТаблицаИнтервалов.ОбъектРемонта = ТекСтрокаНаработкаОбъектов.ОбъектРемонта;
	НСТаблицаИнтервалов.ПлановыйГрафикРаботы = ПолучитьЗначениеПлановогоГрафикаРаботОбъектаРемонта(ТекСтрокаНаработкаОбъектов.ОбъектРемонта);
	НСТаблицаИнтервалов.ДатаНачала = ТекСтрокаНаработкаОбъектов.ДатаПоследнейНаработки;
	НСТаблицаИнтервалов.ДатаОкончания = ТекСтрокаНаработкаОбъектов.ДатаИВремяОперации;
	НСТаблицаИнтервалов.Показатель = ТекСтрокаНаработкаОбъектов.Показатель;
	
	ТабВозврата = торо_РаботаСНаработкой.РасчитатьВремяРаботыОР(ТаблицаИнтервалов.Выгрузить(), ПредопределенноеЗначение("Перечисление.Периодичность.День"));
	
	ВремяРаботыГоловногоОбъекта = ТабВозврата.НайтиСтроки(Новый Структура("ОбъектРемонта,ДатаНачала",
		ТекСтрокаНаработкаОбъектов.ОбъектРемонта,ТекСтрокаНаработкаОбъектов.ДатаПоследнейНаработки))[0].Секунды;
		
	ТаблицаИнтервалов.Очистить();			
	
	Для Каждого ОР ИЗ ТаблицаПодчиненныхОР Цикл
		НСТаблицаИнтервалов = ТаблицаИнтервалов.Добавить();
		НСТаблицаИнтервалов.ОбъектРемонта = ТекСтрокаНаработкаОбъектов.ОбъектРемонта;
		НСТаблицаИнтервалов.ПлановыйГрафикРаботы = ТекСтрокаНаработкаОбъектов.ОбъектРемонта.ПлановыйГрафикРаботы;
		ДатаВвода = ОР.ОбъектРемонта.ДатаВводаВЭксплуатацию;
		НСТаблицаИнтервалов.ДатаНачала = ?(ДатаВвода > ОР.ДатаНачала,ДатаВвода,ОР.ДатаНачала);
		НСТаблицаИнтервалов.ДатаОкончания = ОР.ДатаОкончания;
		НСТаблицаИнтервалов.Показатель = ТекСтрокаНаработкаОбъектов.Показатель;
		
	КонецЦикла;
	
	ТабДляРассчетаВремениРаботы = ТаблицаИнтервалов.Выгрузить();
	ТабДляРассчетаВремениРаботы.Свернуть("ОбъектРемонта,ПлановыйГрафикРаботы,ДатаНачала,ДатаОкончания,Показатель",);
	
	ТаблицаСВременемРаботы = торо_РаботаСНаработкой.РасчитатьВремяРаботыОР(ТабДляРассчетаВремениРаботы, ПредопределенноеЗначение("Перечисление.Периодичность.День"));
	
	ТабПодчиненныхССумНаработкой = ТаблицаПодчиненныхОР.Выгрузить();
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));   
	ОписаниеТиповЧисло = Новый ОписаниеТипов(МассивТипов);
	ТабПодчиненныхССумНаработкой.Колонки.Добавить("СуммНаработка",ОписаниеТиповЧисло);
	Для Каждого СтрокаСЗависимымОР ИЗ ТабПодчиненныхССумНаработкой Цикл
		
		ДатаВвода = СтрокаСЗависимымОР.ОбъектРемонта.ДатаВводаВЭксплуатацию;
		пДатаНачала = ?(ДатаВвода > СтрокаСЗависимымОР.ДатаНачала, ДатаВвода, СтрокаСЗависимымОР.ДатаНачала);
		
		Если ВремяРаботыГоловногоОбъекта = 0 Тогда
			Если ТаблицаСВременемРаботы.НайтиСтроки(Новый Структура("ДатаНачала,ДатаОкончания",пДатаНачала, СтрокаСЗависимымОР.ДатаОкончания))[0].Секунды = 0 Тогда
				КоэфПропорциональностиНаработки = СтрокаСЗависимымОР.Коэффициент;
			Иначе
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Проверьте заполненность графика работы %1 на %2 год.'"),ТекСтрокаНаработкаОбъектов.ОбъектРемонта.ПлановыйГрафикРаботы,Формат(ТекСтрокаНаработкаОбъектов.ДатаПоследнейНаработки,"ДФ=гггг")));
				ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных = Ложь;
				Возврат;
			КонецЕсли;
		Иначе
		    КоэфПропорциональностиНаработки = ТаблицаСВременемРаботы.НайтиСтроки(Новый Структура("ДатаНачала,ДатаОкончания",
			пДатаНачала, СтрокаСЗависимымОР.ДатаОкончания))[0].Секунды / ВремяРаботыГоловногоОбъекта;
		КонецЕсли;
		СтрокаСЗависимымОР.СуммНаработка = ТекСтрокаНаработкаОбъектов.Наработка * КоэфПропорциональностиНаработки * СтрокаСЗависимымОР.Коэффициент;
	КонецЦикла;
	ТабПодчиненныхССумНаработкой.Свернуть("ОбъектРемонта","СуммНаработка");
	СтруктураНаработкиПодчСМаксЗнач = ПолучитьАбсолютноеЗначениеНаработкиСтруктураНаСервере(СтруктураАбсолютныхНаработокПодчиненных,Объект.Ссылка);
	
	МассивСтрокКУдалению = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",ТекСтрокаНаработкаОбъектов.ОбъектРемонта,ТекСтрокаНаработкаОбъектов.Показатель));
	
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаКУдалению);
	КонецЦикла;
	
	Для Каждого СтрокаСЗависимымОР ИЗ СтруктураНаработкиПодчСМаксЗнач Цикл 

		СтрокаПодчНаработка = Объект.НаработкаПодчиненныхОбъектов.Добавить();
		СтрокаПодчНаработка.ДатаИВремяОперации 	 	= ТекСтрокаНаработкаОбъектов.ДатаИВремяОперации;
		СтрокаПодчНаработка.ДатаПоследнейНаработки 	= ТекСтрокаНаработкаОбъектов.ДатаПоследнейНаработки;
		СтрокаПодчНаработка.Показатель 				= ТекСтрокаНаработкаОбъектов.Показатель;
		
		СтрокаПодчНаработка.ОбъектРемонта 			  = СтрокаСЗависимымОР.ОбъектРемонта; 
		СтрокаПодчНаработка.РодительИерархии 		  = ТекСтрокаНаработкаОбъектов.ОбъектРемонта;
		
		СтрокаПодчНаработка.ЗафиксированнаяНаработка  = СтрокаСЗависимымОР.ЗафиксированнаяНаработка;
		СтрокаПодчНаработка.АбсолютнаяНаработка		  = СтрокаСЗависимымОР.АбсолютнаяНаработка;
		
		НаработкаОР = ТабПодчиненныхССумНаработкой.НайтиСтроки(Новый Структура("ОбъектРемонта",СтрокаСЗависимымОР.ОбъектРемонта));
		Если НЕ НаработкаОР.Количество() = 0 Тогда
			СтрокаПодчНаработка.Наработка 		 = НаработкаОР[0].СуммНаработка;
		КонецЕсли;
		
		СтрокаПодчНаработка.НаработкаДоОперации 	  = ТекСтрокаНаработкаОбъектов.НаработкаДоОперации;
		СтрокаПодчНаработка.НаработкаПослеОперации 	  = ТекСтрокаНаработкаОбъектов.НаработкаПослеОперации;
		СтрокаПодчНаработка.ПричинаИзмененияНаработки = ТекСтрокаНаработкаОбъектов.ПричинаИзмененияНаработки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьАбсолютноеЗначениеНаработкиСтруктураНаСервере(СтруктураПодчиненныхОР, Ссылка)
	
	ТЗ = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	ТЗ.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов(МассивТипов));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ПараметрыВыработкиОС"));
	ТЗ.Колонки.Добавить("Показатель", Новый ОписаниеТипов(МассивТипов));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов);
	ТЗ.Колонки.Добавить("ДатаНачала", ОписаниеТиповДата);
	ТЗ.Колонки.Добавить("ДатаОкончания", ОписаниеТиповДата);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(15,3);
	ОписаниеТипаЧисло = Новый ОписаниеТипов(МассивТипов, , , КЧ);
	ТЗ.Колонки.Добавить("Коэффициент", ОписаниеТипаЧисло);
	
	Для каждого Элем Из СтруктураПодчиненныхОР Цикл
	
		НС = ТЗ.Добавить();
		
		ЗаполнитьЗначенияСвойств(НС, Элем);
	
	КонецЦикла; 
	
	ТабЗначенийНаработки = торо_РаботаСНаработкой.АбсолютноеЗначениеНаработкиТаблица(ТЗ, Ссылка);	
	
	СтруктураВозврата = Новый Массив;
	Для каждого СтрТаб Из ТабЗначенийНаработки Цикл
	
		СтруктураВозврата.Добавить(Новый Структура("АбсолютнаяНаработка, ДатаНаработка, ОбъектРемонта, ДатаНачала, Показатель, ЗафиксированнаяНаработка", 
		СтрТаб.АбсолютнаяНаработка, СтрТаб.ДатаНаработка, СтрТаб.ОбъектРемонта, СтрТаб.ДатаНачала, СтрТаб.Показатель,СтрТаб.ЗафиксированнаяНаработка));
	
	КонецЦикла; 
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает таблицу объектов ремонта из переданной в качестве параметра таблицы иерархии, 
// родителями которых является указаный ОР.
//
Функция ПолучитьЗависимыеОРНаСервере(ТаблицаИерархииОР, ОбъектРемонта, ОРДляКоэф, ДатаС, ДатаПо, Показатель, ТекКоэффициент = 1)
	
	ВспомогательнаяТаблица = ТаблицаИерархииОР.НайтиСтроки(Новый Структура("РодительИерархии",ОбъектРемонта));
	
	ТаблицаЗависимыхОР = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаЗависимыхОР.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов(МассивТипов));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	КЧ = Новый КвалификаторыЧисла(15,3);
	ОписаниеТипаЧисло = Новый ОписаниеТипов(МассивТипов, , , КЧ);
	
	ТаблицаЗависимыхОР.Колонки.Добавить("Коэффициент", ОписаниеТипаЧисло);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповДата = Новый ОписаниеТипов(МассивТипов);
	
	ТаблицаЗависимыхОР.Колонки.Добавить("ДатаНачала",ОписаниеТиповДата);
	ТаблицаЗависимыхОР.Колонки.Добавить("ДатаОкончания",ОписаниеТиповДата);
	
	Если Не ВспомогательнаяТаблица.Количество() = 0 Тогда
		
		Для Каждого СтрокаСвязанныхОР Из ВспомогательнаяТаблица Цикл
			
			ОбъектЯвлГруппой = ЯвляетсяЛиОбъектГруппой(СтрокаСвязанныхОР.ОбъектРемонта);
			Если ОбъектЯвлГруппой Тогда
				Если ОРДляКоэф = Неопределено Тогда
					ОрДляКоэф = СтрокаСвязанныхОР.РодительИерархии;
				КонецЕсли;
				СтрокиКоэф = Новый Массив;
			ИначеЕсли ЯвляетсяЛиОбъектГруппой(СтрокаСвязанныхОР.РодительИерархии) Тогда
				СтрокиКоэф = ПолучитьКоэффициентПропорциональности(ОРДляКоэф, СтрокаСвязанныхОР.ОбъектРемонта, Показатель, ДатаПо - 1);
			Иначе
				СтрокиКоэф = ПолучитьКоэффициентПропорциональности(СтрокаСвязанныхОР.РодительИерархии, СтрокаСвязанныхОР.ОбъектРемонта, Показатель, ДатаПо - 1);
			КонецЕсли;
			
			Если СтрокиКоэф.Количество() = 0 Тогда
				Коэф = 1;
				Если ОбъектЯвлГруппой И НЕ ОРДляКоэф = Неопределено Тогда
					ТаблицаПодчиненныхПотомку = ПолучитьЗависимыеОРНаСервере(ТаблицаИерархииОР, СтрокаСвязанныхОР.ОбъектРемонта, ОРДляКоэф, ДатаС,ДатаПо,Показатель,ТекКоэффициент*Коэф);
				Иначе
					ТаблицаПодчиненныхПотомку = ПолучитьЗависимыеОРНаСервере(ТаблицаИерархииОР, СтрокаСвязанныхОР.ОбъектРемонта, Неопределено, ДатаС,ДатаПо,Показатель,ТекКоэффициент*Коэф);
				КонецЕсли;
				Если ТаблицаЗависимыхОР = Неопределено Тогда
					ТаблицаЗависимыхОР = ТаблицаПодчиненныхПотомку.Скопировать(,"ОбъектРемонта,Коэффициент,ДатаС,ДатаПо");
				Иначе
					Для Каждого ПодчиненныйПотомкуОР Из ТаблицаПодчиненныхПотомку Цикл
						ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
						ДобавляемаяСтрока.ОбъектРемонта = ПодчиненныйПотомкуОР.ОбъектРемонта;
						ДобавляемаяСтрока.Коэффициент = ТекКоэффициент * ПодчиненныйПотомкуОР.Коэффициент;
						ДобавляемаяСтрока.ДатаНачала = ПодчиненныйПотомкуОР.ДатаНачала;
						ДобавляемаяСтрока.ДатаОкончания = ПодчиненныйПотомкуОР.ДатаОкончания;
					КонецЦикла;	
				КонецЕсли;
				ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
				ДобавляемаяСтрока.ОбъектРемонта = СтрокаСвязанныхОР.ОбъектРемонта;
				ДобавляемаяСтрока.Коэффициент = ТекКоэффициент * Коэф;
				ДобавляемаяСтрока.ДатаНачала = ДатаС;
				ДобавляемаяСтрока.ДатаОкончания = ДатаПо;
				
			ИначеЕсли СтрокиКоэф[0].Период < ДатаС Тогда
				Коэф = СтрокиКоэф[0].КоэффициентПересчета;
				
				ТаблицаПодчиненныхПотомку = ПолучитьЗависимыеОРНаСервере(ТаблицаИерархииОР, СтрокаСвязанныхОР.ОбъектРемонта, Неопределено,ДатаС,ДатаПо,Показатель,ТекКоэффициент*Коэф);
				Если ТаблицаЗависимыхОР = Неопределено Тогда
					ТаблицаЗависимыхОР = ТаблицаПодчиненныхПотомку.Скопировать(,"ОбъектРемонта,Коэффициент,ДатаС,ДатаПо");
					
				Иначе
					Для Каждого ПодчиненныйПотомкуОР Из ТаблицаПодчиненныхПотомку Цикл
						ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
						ДобавляемаяСтрока.ОбъектРемонта = ПодчиненныйПотомкуОР.ОбъектРемонта;
						ДобавляемаяСтрока.Коэффициент = ТекКоэффициент * ПодчиненныйПотомкуОР.Коэффициент;
						ДобавляемаяСтрока.ДатаНачала = ПодчиненныйПотомкуОР.ДатаНачала;
						ДобавляемаяСтрока.ДатаОкончания = ПодчиненныйПотомкуОР.ДатаОкончания;
					КонецЦикла;	
				КонецЕсли;
				
				ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
				ДобавляемаяСтрока.ОбъектРемонта = СтрокаСвязанныхОР.ОбъектРемонта;
				ДобавляемаяСтрока.Коэффициент = ТекКоэффициент * Коэф;
				ДобавляемаяСтрока.ДатаНачала = ДатаС;
				ДобавляемаяСтрока.ДатаОкончания = ДатаПо;
			Иначе
				мДатаС = СтрокиКоэф[0].Период;
				Коэф = СтрокиКоэф[0].КоэффициентПересчета;
				мДатаПо = ДатаПо;
				Пока Истина Цикл
					
					
					ТаблицаПодчиненныхПотомку = ПолучитьЗависимыеОРНаСервере(ТаблицаИерархииОР, СтрокаСвязанныхОР.ОбъектРемонта, Неопределено, мДатаС, мДатаПо,Показатель,ТекКоэффициент*Коэф);
					Если ТаблицаЗависимыхОР = Неопределено Тогда
						ТаблицаЗависимыхОР = ТаблицаПодчиненныхПотомку.Скопировать(,"ОбъектРемонта,Коэффициент,ДатаС,ДатаПо");
					Иначе
						Для Каждого ПодчиненныйПотомкуОР Из ТаблицаПодчиненныхПотомку Цикл
							ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
							ДобавляемаяСтрока.ОбъектРемонта = ПодчиненныйПотомкуОР.ОбъектРемонта;
							ДобавляемаяСтрока.Коэффициент = ПодчиненныйПотомкуОР.Коэффициент;
							ДобавляемаяСтрока.ДатаНачала = ПодчиненныйПотомкуОР.ДатаНачала;
							ДобавляемаяСтрока.ДатаОкончания = ПодчиненныйПотомкуОР.ДатаОкончания;
						КонецЦикла;	
					КонецЕсли;
					
					ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
					ДобавляемаяСтрока.ОбъектРемонта = СтрокаСвязанныхОР.ОбъектРемонта;
					ДобавляемаяСтрока.Коэффициент = ТекКоэффициент * Коэф;
					ДобавляемаяСтрока.ДатаНачала = мДатаС;
					ДобавляемаяСтрока.ДатаОкончания = мДатаПо;
					
					Если мДатаС > ДатаС Тогда
						мДатаПо = мДатаС;
						
						Коэф = НайтиПредыдущийКоэффициентПересчета(мДатаПо,СтрокаСвязанныхОР,ОРДляКоэф, Показатель, ТаблицаИерархииОР, ТаблицаЗависимыхОР, ТекКоэффициент, ДатаС, ДатаПо);
											
						мДатаС = ДатаС;
						Если Коэф = Неопределено Тогда
							Прервать;
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
						
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	ТаблицаЗависимыхОР.ОбъектРемонта,
	|	ТаблицаЗависимыхОР.ДатаНачала,
	|	ТаблицаЗависимыхОР.ДатаОкончания,
	|	ТаблицаЗависимыхОР.Коэффициент,
	|	&Показатель КАК Показатель
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ
	|	&ТаблицаЗависимыхОР КАК ТаблицаЗависимыхОР
	|ГДЕ
	|	ТаблицаЗависимыхОР.ОбъектРемонта ССЫЛКА Справочник.торо_ОбъектыРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВременнаяТаблица.ОбъектРемонта,
	|	ВременнаяТаблица.ДатаНачала,
	|	ВременнаяТаблица.ДатаОкончания,
	|	ВременнаяТаблица.Коэффициент КАК Коэффициент,
	|	ВременнаяТаблица.Показатель
	|ИЗ
	|	ВременнаяТаблица КАК ВременнаяТаблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних
	|		ПО ВременнаяТаблица.ОбъектРемонта = торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта
	|			И ВременнаяТаблица.Показатель = торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель";
	
	Запрос.УстановитьПараметр("ТаблицаЗависимыхОР", ТаблицаЗависимыхОР);
	Запрос.УстановитьПараметр("Показатель",Показатель);
	ТаблицаЗависимыхОРБезГрупп = Запрос.Выполнить().Выгрузить();
	ТаблицаЗависимыхОРБезГрупп.Колонки.Добавить("ПодчиняющийОР");
	ТаблицаЗависимыхОРБезГрупп.ЗаполнитьЗначения(ОбъектРемонта, "ПодчиняющийОР");
	Возврат ТаблицаЗависимыхОРБезГрупп;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентПропорциональности(ОбъектРемонта, ЗависимыйОбъектРемонта, ПараметрНаработки, ДатаРаботыПо)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.ПараметрНаработки,
		|	торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.ОрганизацияЗависимогоОР,
		|	торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.ПодразделениеЗависимогоОР,
		|	торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.НаправлениеЗависимогоОР,
		|	торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.ТипОРЗависимогоОбъектаРемонта,
		|	торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.ЗависимыйОбъектРемонта,
		|	торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.КоэффициентПересчета,
		|	ВЫБОР
		|		КОГДА НЕ торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.ЗависимыйОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)
		|			ТОГДА 1
		|		КОГДА НЕ торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.ТипОРЗависимогоОбъектаРемонта = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
		|			ТОГДА 2
		|		КОГДА НЕ торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.НаправлениеЗависимогоОР = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
		|			ТОГДА 3
		|		КОГДА НЕ торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.ПодразделениеЗависимогоОР = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
		|			ТОГДА 4
		|		КОГДА НЕ торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.ОрганизацияЗависимогоОР = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА 5
		|	КОНЕЦ КАК Приоритет,
		|	торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.Период
		|ИЗ
		|	РегистрСведений.торо_НастройкаРегистрацииНаработкиЗависимыхОР.СрезПоследних(
		|			&Дата,
		|			ОбъектРемонта = &ОбъектРемонта
		|				И ПараметрНаработки = &ПараметрНаработки
		|				И (ЗависимыйОбъектРемонта = &ЗависимыйОбъектРемонта
		|					ИЛИ ЗависимыйОбъектРемонта = ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка))
		|				И (ПодразделениеЗависимогоОР = &ПодразделениеЗависимогоОР
		|					ИЛИ ПодразделениеЗависимогоОР = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|				И (НаправлениеЗависимогоОР = &НаправлениеЗависимогоОР
		|					ИЛИ НаправлениеЗависимогоОР = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка))
		|				И (ТипОРЗависимогоОбъектаРемонта = &ТипОРЗависимогоОбъектаРемонта
		|					ИЛИ ТипОРЗависимогоОбъектаРемонта = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка))
		|				И (ОрганизацияЗависимогоОР = &Организация
		|					ИЛИ ОрганизацияЗависимогоОР = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет,
		|	торо_НастройкаРегистрацииНаработкиЗависимыхОРСрезПоследних.Период УБЫВ";

		ОрганизацияЗависимогоОР = ЗависимыйОбъектРемонта.Организация;
		ПодразделениеЗависимогоОР = ЗависимыйОбъектРемонта.Подразделение;
		НаправлениеЗависимогоОР = ЗависимыйОбъектРемонта.Направление;
		ТипОРЗависимогоОбъектаРемонта = ЗависимыйОбъектРемонта.ТиповойОР;
		
		
	Запрос.УстановитьПараметр("Дата", ДатаРаботыПо);
	Запрос.УстановитьПараметр("ЗависимыйОбъектРемонта", ЗависимыйОбъектРемонта);
	Запрос.УстановитьПараметр("НаправлениеЗависимогоОР", НаправлениеЗависимогоОР);
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Организация", ОрганизацияЗависимогоОР);
	Запрос.УстановитьПараметр("ПараметрНаработки", ПараметрНаработки);
	Запрос.УстановитьПараметр("ПодразделениеЗависимогоОР", ПодразделениеЗависимогоОР);
	Запрос.УстановитьПараметр("ТипОРЗависимогоОбъектаРемонта", ТипОРЗависимогоОбъектаРемонта);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выгрузить();

	Возврат ВыборкаДетальныеЗаписи;

КонецФункции

&НаСервереБезКонтекста
Функция ЯвляетсяЛиОбъектГруппой(ОбъектРемонта)
		
	Возврат ОбъектРемонта.ЭтоГруппа;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПредыдущийКоэффициентПересчета(мДатаПо,СтрокаСвязанныхОР,ОРДляКоэф, Показатель, ТаблицаИерархииОР, ТаблицаЗависимыхОР, ТекКоэффициент, ДатаС, ДатаПо);
	
	Если СтрокаСвязанныхОР.ОбъектРемонта.ЭтоГруппаОбъектов Тогда
		Если ОРДляКоэф = Неопределено Тогда
			ОрДляКоэф = СтрокаСвязанныхОР.РодительИерархии;
		КонецЕсли;
		СтрокиКоэф = Новый Массив;
	ИначеЕсли СтрокаСвязанныхОР.РодительИерархии.ЭтоГруппаОбъектов Тогда
		СтрокиКоэф = ПолучитьКоэффициентПропорциональности(ОРДляКоэф, СтрокаСвязанныхОР.ОбъектРемонта, Показатель, мДатаПо - 1);
	Иначе
		СтрокиКоэф = ПолучитьКоэффициентПропорциональности(СтрокаСвязанныхОР.РодительИерархии, СтрокаСвязанныхОР.ОбъектРемонта, Показатель, мДатаПо - 1);
	КонецЕсли;
	
	Если СтрокиКоэф.Количество() = 0 Тогда
		Возврат 1;
	ИначеЕсли СтрокиКоэф[0].Период < ДатаС Тогда
		Возврат СтрокиКоэф[0].КоэффициентПересчета;
	Иначе
			
	мДатаС = СтрокиКоэф[0].Период;
	Коэф = СтрокиКоэф[0].КоэффициентПересчета;
	Пока Истина Цикл
		
		
		ТаблицаПодчиненныхПотомку = ПолучитьЗависимыеОРНаСервере(ТаблицаИерархииОР, СтрокаСвязанныхОР.ОбъектРемонта, Неопределено,мДатаС,мДатаПо,Показатель,ТекКоэффициент*Коэф);
		Если ТаблицаЗависимыхОР = Неопределено Тогда
			ТаблицаЗависимыхОР = ТаблицаПодчиненныхПотомку.Скопировать(,"ОбъектРемонта,Коэффициент,ДатаС,ДатаПо");
			
		Иначе
			Для Каждого ПодчиненныйПотомкуОР Из ТаблицаПодчиненныхПотомку Цикл
				ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
				ДобавляемаяСтрока.ОбъектРемонта = ПодчиненныйПотомкуОР.ОбъектРемонта;
				ДобавляемаяСтрока.Коэффициент = ПодчиненныйПотомкуОР.Коэффициент;
				ДобавляемаяСтрока.ДатаНачала = ПодчиненныйПотомкуОР.ДатаНачала;
				ДобавляемаяСтрока.ДатаОкончания = ПодчиненныйПотомкуОР.ДатаОкончания;
			КонецЦикла;	
		КонецЕсли;
		
		ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
		ДобавляемаяСтрока.ОбъектРемонта = СтрокаСвязанныхОР.ОбъектРемонта;
		ДобавляемаяСтрока.Коэффициент = ТекКоэффициент * Коэф;
		ДобавляемаяСтрока.ДатаНачала = мДатаС;
		ДобавляемаяСтрока.ДатаОкончания = мДатаПо;
		
		Если мДатаС > ДатаС Тогда
			мДатаПо = мДатаС;
			
			Коэф = НайтиПредыдущийКоэффициентПересчета(мДатаПо,СтрокаСвязанныхОР,ОРДляКоэф, Показатель, ТаблицаИерархииОР, ТаблицаЗависимыхОР, ТекКоэффициент, ДатаС, ДатаПо);
			
			мДатаС = ДатаС;
			
		Иначе
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СинхронизироватьЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбъектДопДокумента = ДополнительныеПараметры.ОбъектДопДокумента;
	
	Если ОбъектДопДокумента.Проведен Тогда
		Для Каждого Строка Из Объект.НаработкаОбъектов Цикл
			Если Строка.Синхронизировать Тогда
				СН = СоздатьСтруктуруНаработкиНаКлиенте();
				Строка.Синхронизировать = Ложь;
				Строка.РаспространятьНаПодчиненных = Истина;
				НаработкаОбъектовРаспространятьНаПодчиненныхПриИзменении(Неопределено);
				ЗаполнитьЗначенияСвойств(СН,Строка);
				РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеПлановогоГрафикаРаботОбъектаРемонта(ОбъектРемонта)
	
	Возврат ОбъектРемонта.ПлановыйГрафикРаботы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДанныхДокументаСинхронизацииНаСервере(МассивСтрокНаработки,Ссылка,Дата=Неопределено)
	
	Если Дата=Неопределено Тогда
		Дата = Ссылка.Дата;
	КонецЕсли;
	НаработкаОбъектов = Новый ТаблицаЗначений;
	НаработкаОбъектов.Колонки.Добавить("ОбъектРемонта");
	НаработкаОбъектов.Колонки.Добавить("Показатель");
	НаработкаОбъектов.Колонки.Добавить("ДатаИВремяОперации");
	НаработкаОбъектов.Колонки.Добавить("ПричинаИзмененияНаработки");
	НаработкаОбъектов.Колонки.Добавить("ДатаПоследнейНаработки");
	НаработкаОбъектов.Колонки.Добавить("ЗафиксированнаяНаработка");
	НаработкаОбъектов.Колонки.Добавить("НаработкаПослеОперации");
	НаработкаОбъектов.Колонки.Добавить("НаработкаДоОперации");
	
	Для Каждого СтрокаНаработки Из МассивСтрокНаработки Цикл
		
		ТаблицаИерархииОР = торо_РаботаСИерархией.ПолучитьТаблицуИерархии(СтрокаНаработки.Иерархия, Дата, Истина);
		
		ТаблицаПодчиненныхОР = ПолучитьЗависимыеОРНаСервере(ТаблицаИерархииОР, СтрокаНаработки.Объект, Неопределено, СтрокаНаработки.ДатаРаботыС, СтрокаНаработки.ДатаРаботыПо,СтрокаНаработки.Показатель);
		ТаблицаНаработокПодчиненных = торо_РаботаСНаработкой.АбсолютноеЗначениеНаработкиТаблица(ТаблицаПодчиненныхОР,Ссылка);
		
		ДатаСинхронизации = СтрокаНаработки.ДатаРаботыС;
		
		Для Каждого СтрокаСНаработкойПред Из ТаблицаНаработокПодчиненных Цикл
			
			Если СтрокаСНаработкойПред.ДатаНаработка <> СтрокаСНаработкойПред.ДатаНачала Тогда 
				
				Если ДатаСинхронизации < СтрокаСНаработкойПред.ДатаНаработка Тогда
					ДатаСинхронизации = СтрокаСНаработкойПред.ДатаНаработка;
				КонецЕсли;
				
				Если СтрокаСНаработкойПред.ДатаНаработка <> ДатаСинхронизации Тогда
					// Новая строка подчиненного
					НС = НаработкаОбъектов.Добавить();
					ЗначениеНаработки =	торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаСНаработкойПред.ОбъектРемонта,СтрокаНаработки.Показатель,Ссылка);	
					НС.ОбъектРемонта = СтрокаСНаработкойПред.ОбъектРемонта;
					НС.ДатаИВремяОперации = ДатаСинхронизации;
					НС.Показатель = СтрокаСНаработкойПред.Показатель;
					НС.ПричинаИзмененияНаработки = Справочники.торо_ПричиныИзмененияНаработки.СинхронизацияПериодовНаработки;
					НС.ДатаПоследнейНаработки = ЗначениеНаработки.НаработаноДата;
					НС.ЗафиксированнаяНаработка = ЗначениеНаработки.НаработаноЗначение;
					НС.НаработкаПослеОперации = ЗначениеНаработки.НаработаноЗначение;
					НС.НаработкаДоОперации = ЗначениеНаработки.НаработаноЗначение;
				Иначе
					Массив = НаработкаОбъектов.НайтиСтроки(Новый Структура("ОбъектРемонта,Показатель",СтрокаНаработки.Объект,СтрокаНаработки.Показатель));
					Если Массив.Количество() = 0 Тогда
						// Новая строка родителя
						ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаНаработки.Объект,СтрокаНаработки.Показатель,Ссылка);
						НС = НаработкаОбъектов.Добавить();
						НС.ОбъектРемонта  = СтрокаНаработки.Объект;
						НС.ДатаИВремяОперации = ДатаСинхронизации;
						НС.Показатель = СтрокаНаработки.Показатель;
						НС.ПричинаИзмененияНаработки = Справочники.торо_ПричиныИзмененияНаработки.СинхронизацияПериодовНаработки;
						НС.ДатаПоследнейНаработки = ЗначениеНаработки.НаработаноДата;
						НС.ЗафиксированнаяНаработка = ЗначениеНаработки.НаработаноЗначение;
						НС.НаработкаПослеОперации = ЗначениеНаработки.НаработаноЗначение;
						НС.НаработкаДоОперации = ЗначениеНаработки.НаработаноЗначение;
					Иначе
						// Изменение существующей строки родителя
						НС = Массив[0];
						НС.ДатаИВремяОперации = ДатаСинхронизации;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	
	МассивНаработки = Новый Массив;
	
	Для Каждого СтрокаНаработки Из НаработкаОбъектов Цикл
		
		НС = СоздатьСтруктуруНаработкиНаСервере();
		ЗаполнитьЗначенияСвойств(НС,СтрокаНаработки);
		МассивНаработки.Добавить(НС);
		
	КонецЦикла;
	
	СтруктураВозврата.Вставить("МассивНаработки", МассивНаработки);

	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Функция СоздатьСтруктуруНаработкиНаКлиенте()
	
	Возврат Новый Структура("ОбъектРемонта,ДатаИВремяОперации,Показатель,ЗафиксированнаяНаработка,
	|Наработка,НаработкаДоОперации,АбсолютнаяНаработка,НаработкаПослеОперации,ПричинаИзмененияНаработки,
	|РаспространятьНаПодчиненных,Иерархия,ДатаПоследнейНаработки");
	
КонецФункции

&НаСервереБезКонтекста
Функция СоздатьСтруктуруНаработкиНаСервере()
	
	Возврат Новый Структура("ОбъектРемонта,ДатаИВремяОперации,Показатель,ЗафиксированнаяНаработка,
	|Наработка,НаработкаДоОперации,АбсолютнаяНаработка,НаработкаПослеОперации,ПричинаИзмененияНаработки,
	|РаспространятьНаПодчиненных,Иерархия,ДатаПоследнейНаработки");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуВводаВЭксплуатациюОР(ОбъектРемонта)
	
	Возврат ОбъектРемонта.ДатаВводаВЭксплуатацию;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		ПроисходитЗакрытие = Ложь;
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Закрыть();
		ПроисходитЗакрытие = Ложь;
	Иначе
		ПроисходитЗакрытие = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПроисходитЗапись = Истина;
		Записать(Новый Структура("РежимЗаписи",РежимЗаписиДокумента.Проведение));
	Иначе
		ПроисходитЗакрытие = Ложь;
	КонецЕсли;
	ПроисходитЗапись = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусовНаСервере()
	
	СписокЗн = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету Тогда
			СписокЗн.Добавить(Выборка.СтатусОРВУчете);
		КонецЕсли; 
	КонецЦикла;
	Возврат СписокЗн;
КонецФункции

&НаСервере
Функция СтрокаДоступнаДляРедактирования(СтрПоиска)
	СтрокиНедоступноДляРедактирования = ТабНаработкаНедоступноДляРедактирования.НайтиСтроки(СтрПоиска);
	Возврат СтрокиНедоступноДляРедактирования.Количество() = 0; 
КонецФункции

&НаКлиенте
Процедура НаработкаОбъектовПередНачаломИзменения(Элемент, Отказ)
	ТекСтрокаНаработка = ЭтаФорма.Элементы.НаработкаОбъектов.ТекущиеДанные;
	СтрПоиска = Новый Структура("Объект,Показатель, ДатаРаботыПо", ТекСтрокаНаработка.ОбъектРемонта,ТекСтрокаНаработка.Показатель, ТекСтрокаНаработка.ДатаИВремяОперации);
	Если НЕ СтрокаДоступнаДляРедактирования(СтрПоиска) Тогда
		Отказ = Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По объекту ремонта %1 и показателю наработки %2 на дату, более позднюю чем %3, зарегистрирована наработка. Изменять наработку объекта в этом документе нельзя.'"),ТекСтрокаНаработка.ОбъектРемонта,ТекСтрокаНаработка.Показатель, ТекСтрокаНаработка.ДатаИВремяОперации));
	КонецЕсли;
КонецПроцедуры

ПроисходитЗакрытие = Ложь;
ПроисходитЗапись = Ложь;
#КонецОбласти

