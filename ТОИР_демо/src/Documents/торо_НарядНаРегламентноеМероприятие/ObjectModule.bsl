#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										// из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда	
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем СтруктураШапкиДокумента;
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("ДокументыОснования", "Документы основания");
	СписокТЧ.Вставить("РемонтныеРаботы", "Ремонтные работы");
	СписокТЧ.Вставить("РегламентныеМероприятия", "Регламентные мероприятия");
	торо_ОбщегоНазначения.ПроверитьЗаполненностьТабличныхЧастей(ЭтотОбъект, СписокТЧ, Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;	
	
	// Согласование++
	
	// Проверим использование статусов документов.
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_НарядНаРегламентноеМероприятие;
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента, Истина);
	
	Если мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 

	// Согласование--
	
	Если РемонтныеРаботы.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ не содержит ни одной ремонтной работы. Проведение невозможно!'"));
		Отказ = Истина;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = Строка(Ссылка);
	
	// Проверка заполнения табличных частей.
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(РемонтныеРаботы, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(Отказ, Заголовок);
	
	ПроверитьДатуДокумента(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		// Движения по регистру сведений торо_Ремонты
		Движения.торо_Ремонты.Записывать = Истина;
		Для Каждого СтрРемонта Из РегламентныеМероприятия Цикл
			
			Движение = Движения.торо_Ремонты.Добавить();
			Движение.Период 			= МоментВремени().Дата;
			Движение.ID 				= СтрРемонта.ID;
			Движение.ОбъектРемонта 		= СтрРемонта.ОбъектРемонта;
			Движение.ВидРемонта			= СтрРемонта.ВидРемонтныхРабот;
			Движение.ДатаНачалаФакт		= СтрРемонта.ДатаНачала;
			Движение.ДатаОкончанияФакт	= СтрРемонта.ДатаОкончания;
		КонецЦикла;
			
	КонецЕсли;
	
	Движения.торо_СтатусыДокументовНарядовНаМероприятия.Записывать = Истина;
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Движения, Перечисления.торо_СтатусыДокументов.Зарегистрирован);
	
	ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	торо_РаботаСоСтатусамиДокументовСервер.ОчиститьСогласованиеПриКопировании(ЭтотОбъект);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_НарядНаРегламентноеМероприятие;
		торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства, Истина, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	ФоИнтеграцияСПромБезопасностью = ПолучитьФункциональнуюОпцию("торо_ИнтеграцияСПромБезопасностью");
	ЕстьОпасныеРаботы = Ложь;
	Если ФоИнтеграцияСПромБезопасностью = Истина Тогда
		Для каждого текСтрока из РегламентныеМероприятия Цикл
			Если текСтрока.ОпаснаяРабота Тогда
				ЕстьОпасныеРаботы = Истина;
				Если Не ЗначениеЗаполнено(текСтрока.МестоПроведенияРабот) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='В табличной части ""Ремонтные работы"" в строке №%1 не заполнено поле ""Место проведения работ"", для опасных работ это поле должно быть заполнено. Проведение документа было отменено.'"),
									текСтрока.НомерСтроки));
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		масРолей = Новый Массив;

		Если ЕстьОпасныеРаботы Тогда
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.Допускающий);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.ОтветственныйЗаПодготовкуОбъекта);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.РуководительРабот);
		Иначе
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.Допускающий);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.ОтветственныйЗаПодготовкуОбъекта);
			масРолей.Добавить(Перечисления.торо_ОтветственныеЛица.Наблюдающий);
		КонецЕсли;
		
		ЕстьВсеНужныеРоли = ПроверитьНаличиеНеобходимыхРолей(масРолей, Ответственные, ЕстьОпасныеРаботы);
		
		Если НЕ ЕстьВсеНужныеРоли Тогда 
			Отказ = Истина;
		КонецЕсли;
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Ответственные.Сотрудник");
		МассивНепроверяемыхРеквизитов.Добавить("Ответственные.ОтветственноеЛицо");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ПроверитьДатуДокумента(Отказ, Заголовок)
	
	Если Не Отказ Тогда
		МассивОснований = ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
		СписокДатОснований = Новый СписокЗначений;
		Для Каждого Основание Из МассивОснований Цикл
			СписокДатОснований.Добавить(Основание.Дата);
		КонецЦикла;
		СписокДатОснований.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		Если Дата<СписокДатОснований[0].Значение Тогда
			СтрокаСообщения = НСтр("ru = 'Дата документа меньше даты документа-основания!'");
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Отказ = Истина;     
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтныеРаботы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(ТаблицаРемонтныхРабот, Отказ, Заголовок)

	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РемонтнаяРабота,РемонтыОборудования_ID");
	                                                              
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтныеРаботы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(Отказ, Заголовок)
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
	ТабРемРаб = ПодготовитьТаблицуПроведенияРемонтныхРабот();
	ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям(ТабРемРаб, РежимПроведения, Отказ);
	
	ТаблицаРемонтовОборудования = ПолучитьТаблицуРемонтовОборудования();
	
	РемонтыСЗаявками = ТаблицаРемонтовОборудования.Скопировать(Новый Структура("ЕстьЗаявка", Истина));
	РемонтыБезЗаявок = ТаблицаРемонтовОборудования.Скопировать(Новый Структура("ЕстьЗаявка", Ложь));	
	
	ТаблицаНеУчтенныхРабот = ТабНеУчтенныхРабот(ТабРемРаб, РемонтыСЗаявками.ВыгрузитьКолонку("ID"));
	ТаблицаРаботБезЗаявок = ПолучитьТаблицуРемонтныхРаботБезЗаявок(ТабРемРаб, РемонтыБезЗаявок.ВыгрузитьКолонку("ID"));
	ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТаблицаНеУчтенныхРабот, ТаблицаРаботБезЗаявок, РежимПроведения, Отказ);

КонецПроцедуры

Функция ПолучитьТаблицуРемонтовОборудования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID
		|ПОМЕСТИТЬ ТабID
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
		|ГДЕ
		|	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабID.ID,
		|	ВЫБОР
		|		КОГДА торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьЗаявка
		|ИЗ
		|	ТабID КАК ТабID
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
		|				,
		|				IDРемонта В
		|					(ВЫБРАТЬ
		|						Таб.ID
		|					ИЗ
		|						ТабID КАК Таб)) КАК торо_ЗаявкиПоРемонтамСрезПоследних
		|		ПО ТабID.ID = торо_ЗаявкиПоРемонтамСрезПоследних.IDРемонта";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);

	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Функция ТабНеУчтенныхРабот(ТабРемРаб, МассивID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.РемонтнаяРабота,
		|	Таб.IDРемонта,
		|	Таб.ID КАК IDОперации,
		|	Таб.Родитель_ID,
		|	Таб.ПроцентНевыполненныхРабот,
		|	Таб.Количество
		|ПОМЕСТИТЬ ТабРемонтныхРабот
		|ИЗ
		|	&Таб КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРемонтныхРабот.РемонтнаяРабота,
		|	ТабРемонтныхРабот.IDРемонта,
		|	ТабРемонтныхРабот.IDОперации,
		|	ТабРемонтныхРабот.Родитель_ID,
		|	ТабРемонтныхРабот.Количество,
		|	ТабРемонтныхРабот.ПроцентНевыполненныхРабот
		|ИЗ
		|	ТабРемонтныхРабот КАК ТабРемонтныхРабот
		|ГДЕ
		|	ТабРемонтныхРабот.IDРемонта В(&IDРемонта)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРемонтныхРабот.IDРемонта,
		|	ТабРемонтныхРабот.IDОперации,
		|	ТабРемонтныхРабот.Родитель_ID,
		|	ТабРемонтныхРабот.Количество * 100 КАК ПроцентОперацийДок,
		|	ЕСТЬNULL(торо_ЗапланированныеРемонтныеРаботы.ПроцентОпераций, 0) КАК ПроцентОпераций,
		|	ТабРемонтныхРабот.ПроцентНевыполненныхРабот КАК ПроцентРемонта
		|ИЗ
		|	ТабРемонтныхРабот КАК ТабРемонтныхРабот
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы КАК торо_ЗапланированныеРемонтныеРаботы
		|		ПО ТабРемонтныхРабот.IDРемонта = торо_ЗапланированныеРемонтныеРаботы.IDРемонта
		|			И ТабРемонтныхРабот.IDОперации = торо_ЗапланированныеРемонтныеРаботы.IDОперации
		|			И ТабРемонтныхРабот.Родитель_ID = торо_ЗапланированныеРемонтныеРаботы.Родитель_ID
		|			И (ВЫРАЗИТЬ(торо_ЗапланированныеРемонтныеРаботы.Регистратор КАК Документ.торо_ЗаявкаНаРемонт) ССЫЛКА Документ.торо_ЗаявкаНаРемонт)
		|ГДЕ
		|	торо_ЗапланированныеРемонтныеРаботы.ПроцентОпераций < ТабРемонтныхРабот.Количество * 100";

	Запрос.УстановитьПараметр("Таб", ТабРемРаб);
	Запрос.УстановитьПараметр("IDРемонта", МассивID);
	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выгрузить();

КонецФункции

Функция ПолучитьТаблицуРемонтныхРаботБезЗаявок(ТабРемРаб, МассивID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.РемонтнаяРабота,
	|	Таб.IDРемонта,
	|	Таб.ID КАК IDОперации,
	|	Таб.Родитель_ID,
	|	Таб.ПроцентНеВыполненныхРабот,
	|	Таб.Количество
	|ПОМЕСТИТЬ ТабРемонтныхРабот
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабРемонтныхРабот.РемонтнаяРабота,
	|	ТабРемонтныхРабот.IDРемонта,
	|	ТабРемонтныхРабот.IDОперации,
	|	ТабРемонтныхРабот.Родитель_ID,
	|	ТабРемонтныхРабот.Количество,
	|	ТабРемонтныхРабот.ПроцентНеВыполненныхРабот КАК ПроцентРемонта
	|ИЗ
	|	ТабРемонтныхРабот КАК ТабРемонтныхРабот
	|ГДЕ
	|	ТабРемонтныхРабот.IDРемонта В(&IDРемонта)";
	
	Запрос.УстановитьПараметр("Таб", ТабРемРаб);
	Запрос.УстановитьПараметр("IDРемонта", МассивID);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТабНеУчтенныхРабот, ТабРаботБезЗаявки, РежимПроведения, Отказ)
	
	Движения.торо_ЗапланированныеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабНеУчтенныхРабот Цикл
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.IDОперации;
		Движение.IDРемонта = СтрТаб.IDРемонта;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийДок - СтрТаб.ПроцентОпераций;
		
	КонецЦикла;
	
	Для каждого СтрТаб Из ТабРаботБезЗаявки Цикл
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.IDОперации;
		Движение.IDРемонта = СтрТаб.IDРемонта;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		Движение.ПроцентОпераций = СтрТаб.Количество * 100;
		Движение.ПроцентРемонта = СтрТаб.ПроцентРемонта;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПодготовитьТаблицуПроведенияРемонтныхРабот()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтнаяРабота,
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Родитель_ID,
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.РемонтыОборудования_ID КАК IDРемонта,
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.ID,
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Количество
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы
		|ГДЕ
		|	торо_НарядНаРегламентноеМероприятиеРемонтныеРаботы.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаПроведения = Запрос.Выполнить().Выгрузить();
	
	КЧ = Новый КвалификаторыЧисла(5, 2);
	МассивТипов = Новый Массив(1);
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(МассивТипов, , ,КЧ);
	ТаблицаПроведения.Колонки.Добавить("ПроцентНевыполненныхРабот", ОписаниеТиповЧ);
	
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповД = Новый ОписаниеТипов(МассивТипов, , ,КД);
	ТаблицаПроведения.Колонки.Добавить("ДатаНачалаРемонта", ОписаниеТиповД);
	
	Для каждого Строка Из РегламентныеМероприятия Цикл
		
		МассивСтрок = ТаблицаПроведения.НайтиСтроки(Новый Структура("IDРемонта",Строка.ID));
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			СтрокаМассива.ДатаНачалаРемонта = Строка.ДатаНачала;
		КонецЦикла;
		
	КонецЦикла; 

	торо_Ремонты.ЗаполнитьПроцентыНевыполненныхРаботПоНормамВремени("", ТаблицаПроведения);
	
	РасставитьПроцентНаРодительскихУровнях("", ТаблицаПроведения); 
	
	Возврат ТаблицаПроведения;

КонецФункции

Процедура ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям(ТабРемРаб, РежимПроведения, Отказ)
	
	Движения.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		Движение = Движения.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.IDРемонта;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		Движение.РемонтнаяРабота = СтрТаб.РемонтнаяРабота;
		Движение.ПроцентОпераций = СтрТаб.Количество * 100;
		Движение.ПроцентРемонта = СтрТаб.ПроцентНевыполненныхРабот;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает значение процента на родительских уровнях таблицы ремонтных работ акта.
//
// Параметры:
//  СтрокаДерева – строка дерева значений.
//  Процент      – число – устанавливаемый процент.
//
Процедура РасставитьПроцентНаРодительскихУровнях(ID_Поиска, ТаблицаПроведения)
	
	СуммаСПроцентомВыполнения = 0;
	
	МассивСтрок = ТаблицаПроведения.НайтиСтроки(Новый Структура("Родитель_ID", ID_Поиска));
	
	Для Каждого Элемент Из МассивСтрок Цикл
		
		РасставитьПроцентНаРодительскихУровнях(Элемент.ID, ТаблицаПроведения);
		
		СуммаСПроцентомВыполнения = СуммаСПроцентомВыполнения + Элемент.ПроцентНеВыполненныхРабот;
		
	КонецЦикла;
	
	Если СуммаСПроцентомВыполнения > 0 Тогда
		
		СтрокаТЗ = ТаблицаПроведения.Найти(ID_Поиска, "ID");
		Если Не СтрокаТЗ = Неопределено Тогда
			
			СтрокаТЗ.ПроцентНеВыполненныхРабот = СтрокаТЗ.ПроцентНеВыполненныхРабот * СуммаСПроцентомВыполнения / 100;
			
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // РасставитьПроцентНаНижнихУровнях()

Функция ПроверитьНаличиеНеобходимыхРолей(масРолей, тз, ЕстьОпасныеРаботы)
	
	Результат = Истина;
	
	Для каждого ТекРоль из масРолей Цикл
		
		Если тз.Найти(ТекРоль, "ОтветственноеЛицо") = Неопределено Тогда
			Результат = Ложь;
			Если ЕстьОпасныеРаботы Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru = 'В документе присутствуют опасные работы и в табличной части ""Ответственные лица"" обязательно должен быть указан ""%1"". Проведение документа было отменено.'"),
					ТекРоль));
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
					"ru = 'В табличной части ""Ответственные лица"" обязательно должен быть указан ""%1"". Проведение документа было отменено.'"),
					ТекРоль));
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции 

#КонецОбласти

#КонецЕсли