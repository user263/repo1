#Область СлужебныеПроцедурыИФункции

// Заполняет список команд печати.
//
// Параметры:
// КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.торо_НарядНаРегламентноеМероприятие";
	КомандаПечати.Идентификатор = "НарядНаРегламентноеМероприятие";
	КомандаПечати.Представление = НСтр("ru = 'Наряд на выполнение регламентных мероприятий'");
	КомандаПечати.Обработчик = "торо_Печать.ЗапроситьУПользователяДополнительныеПараметрыПередПечатью";
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);	
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НарядНаРегламентноеМероприятие") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"НарядНаРегламентноеМероприятие", 
		"Наряд на выполнение регламентных мероприятий", 
		ПечатьНарядНаВыполнениеРегМероприятий(МассивОбъектов, ПараметрыПечати));		
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьНарядНаВыполнениеРегМероприятий(МассивОбъектов, ПараметрыПечати)
	
	МетаданныеДокумента = ПараметрыПечати.Док.Метаданные();
	Наряд = ПараметрыПечати.Док;
	ID = ПараметрыПечати.ID;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Наряд.Дата,
	               |	Наряд.Номер,
	               |	Наряд.Организация,
	               |	Наряд.Подразделение,
	               |	Наряд.Ответственный
	               |ИЗ
	               |	Документ.торо_НарядНаРегламентноеМероприятие КАК Наряд
	               |ГДЕ
	               |	Наряд.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тчРемонтыОборудования.ОбъектРемонта КАК ОР,
	               |	тчРемонтыОборудования.ВидРемонтныхРабот,
	               |	тчРемонтыОборудования.ДатаНачала,
	               |	тчРемонтыОборудования.ДатаОкончания,
	               |	тчРемонтыОборудования.ОбъектРемонта.ИндивидуальноеОбслуживаниеОР КАК ИндивидуальноеОбслуживаниеОР
	               |ИЗ
	               |	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК тчРемонтыОборудования
	               |ГДЕ
	               |	тчРемонтыОборудования.Ссылка = &Ссылка
	               |	И тчРемонтыОборудования.ID = &ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тчРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ЕСТЬNULL(тчРемонтныеРаботы.РемонтнаяРабота.СодержаниеРабот, """") КАК СодержаниеРабот,
	               |	тчРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	               |	тчРемонтныеРаботы.ID
	               |ИЗ
	               |	Документ.торо_НарядНаРегламентноеМероприятие.РемонтныеРаботы КАК тчРемонтныеРаботы
	               |ГДЕ
	               |	тчРемонтныеРаботы.Ссылка = &Ссылка
	               |	И тчРемонтныеРаботы.РемонтыОборудования_ID = &ID
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Исполнители.Сотрудник,
	               |	Исполнители.Квалификация
	               |ИЗ
	               |	Документ.торо_НарядНаРегламентноеМероприятие.Исполнители КАК Исполнители
	               |ГДЕ
	               |	Исполнители.Ссылка = &Ссылка
	               |	И Исполнители.РемонтыОборудования_ID = &ID";
	             
	Запрос.УстановитьПараметр("Ссылка", Наряд);
	Запрос.УстановитьПараметр("Дата", Наряд.Дата);
	Запрос.УстановитьПараметр("ID", ID);
	РезЗапроса = Запрос.ВыполнитьПакет();
	
	тчШапка = РезЗапроса[0].выбрать();
	тчРемРаботыСтрока = РезЗапроса[1].выбрать();
	тчРемРаботы = РезЗапроса[2].выгрузить();
	тчСотрудникиИКвалификация = РезЗапроса[3].выбрать();
	
	тчШапка.Следующий();
	тчРемРаботыСтрока.Следующий();
	
	ЭтоИндивидуальноеОбслуживание = Ложь;
	Если тчРемРаботыСтрока <> Неопределено Тогда 
		ЭтоИндивидуальноеОбслуживание = тчРемРаботыСтрока.ИндивидуальноеОбслуживаниеОР;
	КонецЕсли;
	
	// для индивидуального обслуживания нужно выводить индивидуальные тех. карты
	Если НЕ ЭтоИндивидуальноеОбслуживание Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.ОбъектРемонта,
		|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.ОбъектРемонта.АдресМестонахождения КАК Местонахождение,
		|	НЕОПРЕДЕЛЕНО КАК НормативныйРемонт,
		|	ЛОЖЬ КАК ЭтоИндивидуальныйРемонт
		|ПОМЕСТИТЬ ВТ_Ремонтов
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.МероприятияОбъектов КАК торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов
		|ГДЕ
		|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.Ссылка = &Ссылка
		|	И торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.Мероприятие_ID = &ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Ремонтов.ОбъектРемонта,
		|	ВТ_Ремонтов.Местонахождение,
		|	ВТ_Ремонтов.НормативныйРемонт КАК НормативныйРемонт,
		|	ВТ_Ремонтов.ЭтоИндивидуальныйРемонт КАК ЭтоИндивидуальныйРемонт
		|ИЗ
		|	ВТ_Ремонтов КАК ВТ_Ремонтов
		|ИТОГИ
		|	МАКСИМУМ(ЭтоИндивидуальныйРемонт)
		|ПО
		|	НормативныйРемонт";
		
		ВыборкаОР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.ОбъектРемонта,
		|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.ОбъектРемонта.АдресМестонахождения КАК Местонахождение
		|ПОМЕСТИТЬ ВТ_СписокОР
		|ИЗ
		|	Документ.торо_НарядНаРегламентноеМероприятие.МероприятияОбъектов КАК торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов
		|ГДЕ
		|	торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.Ссылка = &Ссылка
		|	И торо_НарядНаРегламентноеМероприятиеМероприятияОбъектов.Мероприятие_ID = &ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СписокОР.ОбъектРемонта КАК ОбъектРемонта,
		|	ВТ_СписокОР.Местонахождение,
		|	торо_НормативныеРемонтыОборудования.ВидРемонта,
		|	торо_НормативныеРемонтыОборудования.НормативныйРемонт
		|ПОМЕСТИТЬ ВТ_ТабРемонтов
		|ИЗ
		|	ВТ_СписокОР КАК ВТ_СписокОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудованияУдаленные КАК торо_НормативныеРемонтыОборудованияУдаленные
		|			ПО торо_НормативныеРемонтыОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта
		|				И торо_НормативныеРемонтыОборудования.ВидРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ВидРемонта
		|				И торо_НормативныеРемонтыОборудования.ТиповойОР = торо_НормативныеРемонтыОборудованияУдаленные.ТиповойОР
		|		ПО ВТ_СписокОР.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
		|ГДЕ
		|	торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта ЕСТЬ NULL 
		|	И торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.НормативныйРемонт
		|ПОМЕСТИТЬ ВТ_РемонтПоУмолчанию
		|ИЗ
		|	РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
		|ГДЕ
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов = &СписокОбъектов
		|	И торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия = &ВидРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СписокОР.ОбъектРемонта,
		|	ВТ_СписокОР.Местонахождение,
		|	ЕСТЬNULL(ВТ_ТабРемонтов.НормативныйРемонт, ЕСТЬNULL(ВТ_РемонтПоУмолчанию.НормативныйРемонт, ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяССылка))) КАК НормативныйРемонт,
		|	ВЫБОР
		|		КОГДА ВТ_ТабРемонтов.НормативныйРемонт ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоИндивидуальныйРемонт
		|ПОМЕСТИТЬ ВТ_Итог
		|ИЗ
		|	ВТ_СписокОР КАК ВТ_СписокОР
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТабРемонтов КАК ВТ_ТабРемонтов
		|		ПО ВТ_СписокОР.ОбъектРемонта = ВТ_ТабРемонтов.ОбъектРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РемонтПоУмолчанию КАК ВТ_РемонтПоУмолчанию
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Итог.ОбъектРемонта,
		|	ВТ_Итог.Местонахождение,
		|	ВТ_Итог.НормативныйРемонт КАК НормативныйРемонт,
		|	ВТ_Итог.ЭтоИндивидуальныйРемонт КАК ЭтоИндивидуальныйРемонт
		|ИЗ
		|	ВТ_Итог КАК ВТ_Итог
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтоИндивидуальныйРемонт,
		|	НормативныйРемонт
		|ИТОГИ
		|	МАКСИМУМ(ЭтоИндивидуальныйРемонт)
		|ПО
		|	НормативныйРемонт";

		Запрос.УстановитьПараметр("СписокОбъектов", тчРемРаботыСтрока.ОР);
		Запрос.УстановитьПараметр("ВидРемонта", тчРемРаботыСтрока.ВидРемонтныхРабот);
		
		ВыборкаОР = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	КонецЕсли;
	
	тчМатЗатраты = Новый ТаблицаЗначений;
	тчМатЗатраты.Колонки.Добавить("Наименование");
	тчМатЗатраты.Колонки.Добавить("ЕдИзм");
	тчМатЗатраты.Колонки.Добавить("Количество");
	
	тчИнструменты = Новый ТаблицаЗначений;
	тчИнструменты.Колонки.Добавить("Наименование");
	тчИнструменты.Колонки.Добавить("ЕдИзм");
	тчИнструменты.Колонки.Добавить("Количество");
	
	ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицыЗатрат(тчРемРаботы, тчМатЗатраты, тчИнструменты);
	
	// Начало вывода
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.ИмяПараметровПечати = МетаданныеДокумента.Имя;
	ТабДок.ТолькоПросмотр = Истина;
	
	Макет = ПолучитьМакет("НарядНаРегМероприятие");
	
	обШапка = Макет.ПолучитьОбласть("Шапка");
	
	обШапка.Параметры.Организация = тчШапка.Организация;
	обШапка.Параметры.Подразделение = тчШапка.Подразделение;
	
	обШапка.Параметры.ДатаОткрытия = Формат(тчШапка.Дата,"ДФ=dd.MM.yyyy");
	обШапка.Параметры.Номер = тчШапка.Номер;
	
	обШапка.Параметры.ДатаНачала = Формат(тчРемРаботыСтрока.ДатаНачала,"ДФ=dd.MM.yyyy");
	обШапка.Параметры.ДатаОкончания = Формат(тчРемРаботыСтрока.ДатаОкончания,"ДФ=dd.MM.yyyy");
	
	ПерваяСтрока = Истина;
	массивПроверки = Новый Массив;
	Пока тчСотрудникиИКвалификация.Следующий() Цикл
		Если перваяСтрока Тогда
			ПерваяСтрока = Ложь;
			обШапка.Параметры.СотрудникИКвалификация = Строка(тчСотрудникиИКвалификация.Сотрудник) + " (" + тчСотрудникиИКвалификация.Квалификация + ")";
			обШапка.Параметры.Сотрудник = тчСотрудникиИКвалификация.Сотрудник;
			ТабДок.Вывести(обШапка);
			Продолжить;
		КонецЕсли;
		
		обСотрудник = Макет.ПолучитьОбласть("Сотрудник");
		обСотрудник.Параметры.СотрудникИКвалификация = Строка(тчСотрудникиИКвалификация.Сотрудник) + " (" + тчСотрудникиИКвалификация.Квалификация + ")";
		обСотрудник.Параметры.Сотрудник = тчСотрудникиИКвалификация.Сотрудник;
		
		ПроверитьИВывести(ТабДок, обСотрудник);
		
	КонецЦикла;
	
	Если ПерваяСтрока Тогда
		ТабДок.Вывести(обШапка);
	КонецЕсли;
	
	обОписаниеОР = Макет.ПолучитьОбласть("ОписаниеОР");
	обОписаниеОР.Параметры.НаименованиеСписка = тчРемРаботыСтрока.ор;
	обОписаниеОР.Параметры.Описание = тчРемРаботыСтрока.ВидРемонтныхРабот;
	ПроверитьИВывести(ТабДок, обОписаниеОР);
	
	Если ВыборкаОР.Количество() = 0 Тогда
		
		обШапкаТЧСписокОР = Макет.ПолучитьОбласть("ШапкаТЧСписокОР");
		ПроверитьИВывести(ТабДок, обШапкаТЧСписокОР);
		
		ПечатьНарядНаВыполнениеРегМероприятий_ВывестиТаблицыЗатрат(ТабДок, Макет, тчРемРаботы, тчМатЗатраты, тчИнструменты);
		
	КонецЕсли;
	
	КоличествоТехКарт = ВыборкаОР.Количество();
	НомерТехКарты = 1;
	
	// Обход группировки по различным ремонтам
	Пока ВыборкаОР.Следующий() Цикл
		ВыборкаОРДетали = ВыборкаОР.Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		обШапкаТЧСписокОР = Макет.ПолучитьОбласть("ШапкаТЧСписокОР");
		ПроверитьИВывести(ТабДок, обШапкаТЧСписокОР);
		
		НомерПП = 1;
		Пока ВыборкаОРДетали.Следующий() Цикл
			обСтрокаТЧСписокОР = Макет.ПолучитьОбласть("СтрокаТЧСписокОР");
			обСтрокаТЧСписокОР.Параметры.Ном = НомерПП;
			обСтрокаТЧСписокОР.Параметры.Наименование = торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(ВыборкаОРДетали.ОбъектРемонта);
			обСтрокаТЧСписокОР.Параметры.Местонахождение = ВыборкаОРДетали.Местонахождение;
			
			НомерПП = НомерПП + 1;
			ПроверитьИВывести(ТабДок, обСтрокаТЧСписокОР);
		КонецЦикла;
		
		Если НЕ ВыборкаОР.ЭтоИндивидуальныйРемонт Тогда
			тчРемРаботыДляВывода = тчРемРаботы;
			тчМатЗатратыДляВывода = тчМатЗатраты;
			тчИнструментыДляВывода = тчИнструменты;
		Иначе
			
			тчРемРаботыДляВывода = тчРемРаботы.СкопироватьКолонки();
			тчМатЗатратыДляВывода = тчМатЗатраты.СкопироватьКолонки();
			тчИнструментыДляВывода = тчИнструменты.СкопироватьКолонки();
			
			ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицуРемРаботПоТехКарте(ВыборкаОР.НормативныйРемонт, тчРемРаботыДляВывода, тчРемРаботыСтрока.ДатаНачала);
			ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицыЗатрат(тчРемРаботыДляВывода, тчМатЗатратыДляВывода, тчИнструментыДляВывода);
				
		КонецЕсли;
		
		ПечатьНарядНаВыполнениеРегМероприятий_ВывестиТаблицыЗатрат(ТабДок, Макет, тчРемРаботыДляВывода, тчМатЗатратыДляВывода, тчИнструментыДляВывода);
		
		Если НомерТехКарты < КоличествоТехКарт Тогда
			обРазделитель = Макет.ПолучитьОбласть("РазделительОР");
			ПроверитьИВывести(ТабДок, обРазделитель);
		КонецЕсли;
		НомерТехКарты = НомерТехКарты + 1;
		
	КонецЦикла;
	
	// Подвал
	обОтветственный = Макет.ПолучитьОбласть("Ответственный");
	обОтветственный.Параметры.Сотрудник = тчШапка.Ответственный;
	обОтветственный.Параметры.Дата = Формат(ТекущаяДата(),"ДФ='''""''dd''""'' MMMM yyyy ""г.""'");
	ПроверитьИВывести(ТабДок, обОтветственный);
	
	ПерваяСтрока = Истина;
	обИсполнительСЗаголовоком = Макет.ПолучитьОбласть("ИсполнительСЗаголовоком");
	
	тчСотрудникиИКвалификация.Сбросить();
	Пока тчСотрудникиИКвалификация.Следующий() Цикл
		Если ПерваяСтрока Тогда
			ПерваяСтрока = Ложь;
			обИсполнительСЗаголовоком.Параметры.Сотрудник = тчСотрудникиИКвалификация.Сотрудник;
			обИсполнительСЗаголовоком.Параметры.Дата = Формат(ТекущаяДата(),"ДФ='''""''dd''""'' MMMM yyyy ""г.""'");
			ПроверитьИВывести(ТабДок, обИсполнительСЗаголовоком);
			Продолжить;
		КонецЕсли;
		
		обИсполнитель = Макет.ПолучитьОбласть("Исполнитель");
		обИсполнитель.Параметры.Сотрудник = тчСотрудникиИКвалификация.Сотрудник;
		обИсполнитель.Параметры.дата = Формат(ТекущаяДата(),"ДФ='''""''dd''""'' MMMM yyyy ""г.""'");
		ПроверитьИВывести(ТабДок, обИсполнитель);
	КонецЦикла;
	
	Если ПерваяСтрока Тогда
		ПроверитьИВывести(ТабДок, обИсполнительСЗаголовоком);
	КонецЕсли;
	
	возврат ТабДок;
	
КонецФункции

Процедура ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицуРемРаботПоТехКарте(ИдТехКарты, тчРемРаботы, ДатаНачалаРемонта, Родитель_ID = "")
	
	ID = Новый УникальныйИдентификатор;
	
	НовСтр = тчРемРаботы.Добавить();
	НовСтр.РемонтнаяРабота = ИдТехКарты;
	НовСтр.СодержаниеРабот = "";
	НовСтр.Родитель_ID = Родитель_ID;
	НовСтр.ID = ID;
	
	Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ДатаНачалаРемонта,Новый Структура("ИдентификаторТехКарты", ИдТехКарты));
	Если Таб.Количество() > 0 Тогда
		ТехКарта = Таб[0].ТехКарта;
		Для Каждого ОперацияРемонта Из ТехКарта.СписокОпераций Цикл
			Если ТипЗнч(ОперацияРемонта.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				НовСтр = тчРемРаботы.Добавить();
				НовСтр.РемонтнаяРабота = ОперацияРемонта.Операция;
				НовСтр.СодержаниеРабот = ОперацияРемонта.Операция.СодержаниеРабот;
				НовСтр.Родитель_ID = ID;
				НовСтр.ID = ОперацияРемонта.ID;
			Иначе
				ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицуРемРаботПоТехКарте(ОперацияРемонта.Операция, тчРемРаботы, ДатаНачалаРемонта, ID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры



Процедура ПечатьНарядНаВыполнениеРегМероприятий_ЗаполнитьТаблицыЗатрат(тчРемРаботы, тчМатЗатраты, тчИнструменты)
	
	НайС = тчРемРаботы.НайтиСтроки(Новый Структура("Родитель_ID", ""));
	Дерево = Новый ДеревоЗначений;
	Дерево.Колонки.Добавить("РемонтнаяРабота");
	Дерево.Колонки.Добавить("РемонтыОборудования_ID");
	Дерево.Колонки.Добавить("ID");
	
	Для каждого текСтрока из НайС Цикл
		нс = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока);
		СобратьДерево(нс, тчРемРаботы);
	КонецЦикла;
	
	стрЗатрат = торо_Ремонты.ПолучитьНормыЗатратИзВетвиДереваОпераций(Дерево,,, ТекущаяДата(), ТекущаяДата());
	
	Для каждого текСтрока из СтрЗатрат Цикл
		
		МатЗатраты = текСтрока.СтруктураТаблиц.МатериальныеЗатраты;
		Инструменты = текСтрока.СтруктураТаблиц.ИнструментыИТехника;
		
		Для каждого текСтрокаТЧ из МатЗатраты Цикл
			нс = тчМатЗатраты.Добавить();
			нс.Наименование = текСтрокаТЧ.Номенклатура;
			нс.ЕдИзм = ?(ЗначениеЗаполнено(текСтрокаТЧ.ЕдиницаИзмерения), текСтрокаТЧ.ЕдиницаИзмерения, текСтрокаТЧ.Номенклатура.ЕдиницаИзмерения);
			нс.Количество = текСтрокаТЧ.Количество;
		КонецЦикла;
		
		Для каждого текСтрокаТЧ из Инструменты Цикл
			нс = тчИнструменты.Добавить();
			нс.Наименование = текСтрокаТЧ.Инструмент;
			нс.ЕдИзм = ?(ЗначениеЗаполнено(текСтрокаТЧ.ЕдиницаИзмерения), текСтрокаТЧ.ЕдиницаИзмерения, текСтрокаТЧ.Инструмент.ЕдиницаИзмерения);
			нс.Количество = текСтрокаТЧ.Количество;
		КонецЦикла;
	КонецЦикла;
	
	тчМатЗатраты.Свернуть("Наименование, ЕдИзм", "Количество");
	тчИнструменты.Свернуть("Наименование, ЕдИзм", "Количество");
	
КонецПроцедуры

Процедура ПечатьНарядНаВыполнениеРегМероприятий_ВывестиТаблицыЗатрат(ТабДок, Макет, тчРемРаботы, тчМатЗатраты, тчИнструменты)
	
	обШапкаТЧСостав = Макет.ПолучитьОбласть("ШапкаТЧСостав");
	ПроверитьИВывести(ТабДок, обШапкаТЧСостав);
	
	СтрокиВКорне = тчРемРаботы.НайтиСтроки(Новый структура("Родитель_ID", ""));
	ВывестиРекурсивно(Макет, тчРемРаботы, СтрокиВКорне, ТабДок, "СтрокаТЧСостав", "");
	
	обШапкаТЧМатериалы = Макет.ПолучитьОбласть("ШапкаТЧМатериалы");
	ПроверитьИВывести(ТабДок, обШапкаТЧМатериалы);
	
	номерПП = 1;
	Для каждого ТекСтрока из тчМатЗатраты Цикл
		обСтрокаТЧМатериалы = Макет.ПолучитьОбласть("СтрокаТЧМатериалы");
		обСтрокаТЧМатериалы.Параметры.Ном = НомерПП;
		обСтрокаТЧМатериалы.Параметры.Наименование = ТекСтрока.Наименование;
		обСтрокаТЧМатериалы.Параметры.ЕдИзм = ТекСтрока.ЕдИзм;
		обСтрокаТЧМатериалы.Параметры.Количество = ТекСтрока.Количество;
		
		НомерПП = НомерПП + 1;
		ПроверитьИВывести(ТабДок, обСтрокаТЧМатериалы);
	КонецЦикла;
	
	обШапкаТЧИнструменты = Макет.ПолучитьОбласть("ШапкаТЧИнструменты");
	ПроверитьИВывести(ТабДок, обШапкаТЧИнструменты);
	
	НомерПП = 1;
	Для каждого текСтрока из тчИнструменты Цикл
		обСтрокаТЧИнструменты = Макет.ПолучитьОбласть("СтрокаТЧИнструменты");
		обСтрокаТЧИнструменты.Параметры.Ном = НомерПП;
		обСтрокаТЧИнструменты.Параметры.Наименование = текСтрока.Наименование;
		обСтрокаТЧИнструменты.Параметры.ЕдИзм = текСтрока.ЕдИзм;
		обСтрокаТЧИнструменты.Параметры.Количество = текСтрока.Количество;
		
		НомерПП = НомерПП + 1;
		ПроверитьИВывести(ТабДок, обСтрокаТЧИнструменты);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроверитьИВывести(ТабДок, ТекБлок)
	
	Если НЕ ТабДок.ПроверитьВывод(ТекБлок) Тогда
		ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	ТабДок.Вывести(ТекБлок);	
	
КонецПроцедуры

Процедура СобратьДерево(Корень, Выгрузка)
	
	НайС = Выгрузка.НайтиСтроки(Новый Структура("Родитель_ID", Корень.ID));
	Для каждого текСтрока из НайС Цикл
		нс = Корень.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока);
		СобратьДерево(нс, Выгрузка);
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВывестиРекурсивно(Макет, ТЧ, Мас, ТабДок, ИмяОбластиВМакете, НомерРодителя)
	
	НомерСтроки = 1;
	Для каждого текСтрока из Мас Цикл
		НомерСтрокой = НомерРодителя + Строка(НомерСтроки);
		
		обСтрокаТЧСостав = Макет.ПолучитьОбласть(ИмяОбластиВМакете);
		обСтрокаТЧСостав.Параметры.Ном = НомерСтрокой;
		обСтрокаТЧСостав.Параметры.Наименование = текСтрока.РемонтнаяРабота;
		обСтрокаТЧСостав.Параметры.СодержаниеРабот = текСтрока.СодержаниеРабот;
		ПроверитьИВывести(ТабДок, обСтрокаТЧСостав);
		
		подСтроки = тч.НайтиСтроки(Новый структура("Родитель_ID", текСтрока.ID));
		ВывестиРекурсивно(Макет, тч, подСтроки, ТабДок, ИмяОбластиВМакете, НомерСтрокой + ".");
		НомерСтроки = НомерСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Истина;
	
КонецПроцедуры

Процедура ПриПолученииСлужебныхРеквизитов(Реквизиты) Экспорт
	
	Реквизиты.Добавить("СтатусДокумента");
	Реквизиты.Добавить("ИсторияСтатусов.*");
	Реквизиты.Добавить("Согласующие.*");
		
КонецПроцедуры


#КонецОбласти