#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	Если Параметры.Свойство("ВидОперации") Тогда
		Объект.ВидОперации = Параметры.ВидОперации;
	Иначе
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Объект.ВидОперации = Перечисления.торо_ВидыДокументаВводНачДанных.ПоОбъектуРемонта;
		КонецЕсли;
	КонецЕсли;
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	
	Если Объект.ВидОперации = Перечисления.торо_ВидыДокументаВводНачДанных.ПоОбъектуРемонта Тогда
		Элементы.СтраницыПоВидуОперации.ПодчиненныеЭлементы.СтраницаСпискиОбъектов.Видимость = Ложь;
		Элементы.СтраницыПоВидуОперации.ПодчиненныеЭлементы.СтраницаОбъектыРемонта.Видимость = Истина;
	Иначе
		Элементы.СтраницыПоВидуОперации.ПодчиненныеЭлементы.СтраницаСпискиОбъектов.Видимость = Истина;
		Элементы.СтраницыПоВидуОперации.ПодчиненныеЭлементы.СтраницаОбъектыРемонта.Видимость = Ложь;
	КонецЕсли;

	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);
	
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ПоказыватьПоложениеОР",
			Истина);
	Элементы.ОбъектыРемонтаОтображатьПоложение.Пометка = мОтображатьПоложение;
	Элементы.ОбъектыРемонтаПоложение.Видимость = мОтображатьПоложение;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
		
		СлужебныеРеквизитыЗаполнитьНаСервере();
		
	КонецЕсли;
	
	// функциональные опции
	ФОУчетЗапчастей = ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОУчетКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	ФОУчетНаработкиОборудования = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	ФОУчетПусковОборудования = ПолучитьФункциональнуюОпцию("торо_УчетПусковОборудования");
	ФОУчетСостоянияОборудования = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
	
	
	Элементы.ГруппаЗапчастиОбъектаРемонта.Видимость = ФОУчетЗапчастей;
	Элементы.ГруппаПоказателиОбъектыРемонта.Видимость = ФОУчетКонтролируемыхПоказателей;
	Элементы.ГруппаНаработкаОбъектыРемонта.Видимость = ФОУчетНаработкиОборудования;
	Элементы.ГруппаПускиОР.Видимость = ФОУчетПусковОборудования;
	Элементы.ОбъектыРемонта.ПодчиненныеЭлементы.ИзменятьСостояниеПодчиненных.Видимость = ФОУчетСостоянияОборудования;
	
	Для Каждого Строка Из Объект.ПоказателиОбъектыРемонта Цикл
		
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(Строка.ОбъектРемонта, ?(ЗначениеЗаполнено(Строка.ДатаКонтроля),Строка.ДатаКонтроля,Объект.Дата), Строка.Показатель);
		
		ЗаполнитьЗначенияСвойств(Строка, СтруктураВозврата);
		
	КонецЦикла;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;
	
	ЗаполнитьТаблицуПодчиненныхОР();
	УстановитьВидимостьКолонкиПричина();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), ТекущийОбъект, ЭтаФорма);
	
	Для Каждого Строка Из Объект.ПоказателиОбъектыРемонта Цикл
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(Строка.ОбъектРемонта, ?(ЗначениеЗаполнено(Строка.ДатаКонтроля),Строка.ДатаКонтроля,Объект.Дата), Строка.Показатель);
		ЗаполнитьЗначенияСвойств(Строка, СтруктураВозврата);
	КонецЦикла;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта
&НаКлиенте
Процедура ОбъектыРемонтаПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	Элементы.ВыполненныеРаботыДобавить.Доступность = СтрокаВыбрана;
	Элементы.ПоказателиОбъектыРемонтаДобавить.Доступность = СтрокаВыбрана;
	Элементы.НаработкаОбъектыРемонтаДобавить.Доступность = СтрокаВыбрана;
	Элементы.ЗапчастиОбъектаРемонтаДобавить.Доступность = СтрокаВыбрана;
	
	Если СтрокаВыбрана Тогда 
		ТекОбъект = ТекущаяСтрока.ОбъектРемонта;
		Элементы.ВыполненныеРаботы.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекОбъект);
		Элементы.НаработкаОбъектыРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекОбъект);
		Элементы.ПоказателиОбъектыРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекОбъект);
		Элементы.ЗапчастиОбъектаРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекОбъект);
		Элементы.ПускиОР.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	
	мСтруктураСвязанныхТЧ = Новый Структура();
	мСтруктураСвязанныхТЧ.Вставить("ВыполненныеРаботы");
	мСтруктураСвязанныхТЧ.Вставить("ПоказателиОбъектыРемонта");
	мСтруктураСвязанныхТЧ.Вставить("НаработкаОбъектыРемонта");
	мСтруктураСвязанныхТЧ.Вставить("ЗапчастиОбъектаРемонта");
	
	Для Каждого КлючИЗначение Из мСтруктураСвязанныхТЧ Цикл
		МассивСтрок = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ОбъектРемонта", ТекДанные.ОбъектРемонта));
		Для Каждого ЭлементМассива Из МассивСтрок Цикл
			Объект[КлючИЗначение.Ключ].Удалить(ЭлементМассива);
		КонецЦикла; 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда 
		СтрокаТЧ = Элементы.ОбъектыРемонта.ТекущиеДанные;
		Отбор = Новый Структура;
		Отбор.Вставить("ОбъектРемонта",СтрокаТЧ.ОбъектРемонта);
		Строки = Объект.ОбъектыРемонта.НайтиСтроки(Отбор);
		Если Строки.Количество() > 1 Тогда 
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный объект уже присутствует в документе!'"),СтатусСообщения.Важное);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда 
		ОбъектыРемонтаПриАктивизацииСтроки(Элементы.ОбъектыРемонта);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаПриИзменении(Элемент)
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР(Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта);
	КонецЕсли;
	
	Если Элементы.ОбъектыРемонта.ТекущиеДанные.ИзменятьСостояниеПодчиненныхОР Тогда
		ПроверитьРаспространениеНаПодчиненных();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДеревоВыбранныхСтрок = ВыбранноеЗначение;

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ДеревоВыбранныхСтрок") Тогда
			ДеревоВыбранныхСтрок = ВыбранноеЗначение.ДеревоВыбранныхСтрок;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(ДеревоВыбранныхСтрок) = Тип("ДанныеФормыДерево") Тогда
		
		СписокДобавленныхОбъектов = Новый СписокЗначений;
		ЗаполнитьПоНормативам = Ложь;
		СтрокиПервогоУровня = ДеревоВыбранныхСтрок.ПолучитьЭлементы();
		
		СписокВидовРемонтов = Новый СписокЗначений;
		СписокПараметровНаработки = Новый СписокЗначений;
		СписокВидовПоказателей = Новый СписокЗначений;
		
		Для Каждого СтрокаОР Из СтрокиПервогоУровня Цикл
			
			МассивСтрок = Объект.ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", СтрокаОР.Объект));
			Если МассивСтрок.Количество() = 0 Тогда
				
				НайденнаяСтрока = СписокДобавленныхОбъектов.НайтиПоЗначению(СтрокаОР.Объект);
				
				Если НайденнаяСтрока = Неопределено Тогда
					
					НС = Объект.ОбъектыРемонта.Добавить();
					НС.ОбъектРемонта = СтрокаОР.Объект;
					
					Элементы.ОбъектыРемонта.ТекущаяСтрока = НС.ПолучитьИдентификатор();
					ОбъектыРемонтаОбъектРемонтаПриИзменении(Элементы.ОбъектыРемонта);
					
					НайденнаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
					
					СписокДобавленныхОбъектов.Добавить(СтрокаОР.Объект);
					
				КонецЕсли; 
				Если НЕ ЗаполнитьПоНормативам И СтрокаОР.ЗаполнитьПоНормативам Тогда
					ЗаполнитьПоНормативам = Истина;
				КонецЕсли;
		
				Для каждого СтрокаВидов Из СтрокаОР.ПолучитьЭлементы() Цикл
					Если ЗначениеЗаполнено(СтрокаВидов.Показатель) Тогда
						Если СписокПараметровНаработки.НайтиПоЗначению(СтрокаВидов.Показатель) = Неопределено Тогда
							СписокПараметровНаработки.Добавить(СтрокаВидов.Показатель);
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(СтрокаВидов.ИзмеряемыйПоказатель) Тогда
						Если СписокВидовПоказателей.НайтиПоЗначению(СтрокаВидов.ИзмеряемыйПоказатель) = Неопределено Тогда
							СписокВидовПоказателей.Добавить(СтрокаВидов.ИзмеряемыйПоказатель);
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(СтрокаВидов.Объект) И НЕ ЗначениеЗаполнено(СтрокаВидов.Показатель) И НЕ ЗначениеЗаполнено(СтрокаВидов.ИзмеряемыйПоказатель) Тогда
						Если СписокВидовРемонтов.НайтиПоЗначению(СтрокаВидов.Объект) = Неопределено Тогда
							СписокВидовРемонтов.Добавить(СтрокаВидов.Объект);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
		
			Иначе 
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Объект ремонта %1 уже присутствует в табличном поле!'"),СтрокаОР.Объект),СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаполнитьПоНормативам Тогда
			
			СтруктураПараметров = Новый Структура("СписокВидовРемонтов, СписокПараметровНаработки, СписокВидовПоказателей, СписокДобавленныхОбъектов", 
																	СписокВидовРемонтов, СписокПараметровНаработки, СписокВидовПоказателей, СписокДобавленныхОбъектов);
			
			Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
																	
				Если ВыбранноеЗначение.Свойство("ЗапрашиватьВидРемонтныхРабот") Тогда
					СтруктураПараметров.Вставить("ЗапрашиватьВидРемонтныхРабот", Истина);													
				КонецЕсли;
				Если ВыбранноеЗначение.Свойство("ЗапрашиватьВидПараметровНаработки") Тогда
					СтруктураПараметров.Вставить("ЗапрашиватьВидПараметровНаработки", Истина);													
				КонецЕсли;
				Если ВыбранноеЗначение.Свойство("ЗапрашиватьВидИзмеряемыхПоказателей") Тогда
					СтруктураПараметров.Вставить("ЗапрашиватьВидИзмеряемыхПоказателей", Истина);													
				КонецЕсли;
				
				Если ВыбранноеЗначение.Свойство("ЗапрашиватьВидРемонтныхРабот") Тогда
					СписокВидовРемонтов.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьСписокВидовРемонтов",ЭтотОбъект,СтруктураПараметров),
																		  		НСтр("ru = 'Выберите виды ремонтных работ'"));

				Иначе
					ВыбратьФрагмент1(СтруктураПараметров);
				КонецЕсли;
			Иначе
				ЗаполнитьДанныеПоОбъектамРемонтов(СписокДобавленныхОбъектов, СписокВидовРемонтов, СписокПараметровНаработки, СписокВидовПоказателей);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////

&НаКлиенте
Процедура ВыбратьСписокВидовРемонтов(Список, ДополнительныеПараметры) Экспорт
		
	Если Список <> Неопределено Тогда
		НовыйСписок = Новый СписокЗначений;
		Для каждого ЭлементСписка из Список Цикл
			Если ЭлементСписка.Пометка Тогда
				НовыйСписок.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеПараметры.Вставить("СписокВидовРемонтов", НовыйСписок);
	Иначе	
	   ДополнительныеПараметры.Вставить("ОтказОтВыбораРемонтов", Истина);
	КонецЕсли;
		
	ВыбратьФрагмент1(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФрагмент1(СтруктураПараметров) 
	
	Если СтруктураПараметров.Свойство("ЗапрашиватьВидИзмеряемыхПоказателей") Тогда
		
		СтруктураПараметров.СписокВидовПоказателей.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьСписокВидовПоказателей",ЭтотОбъект,СтруктураПараметров),
																		  НСтр("ru = 'Выберите виды контролируемых показателей'"));
	Иначе
		
		ВыбратьФрагмент2(СтруктураПараметров);	
																		  
	КонецЕсли;
	
КонецПроцедуры // ВыбратьФрагмент1()

&НаКлиенте
Процедура ВыбратьСписокВидовПоказателей(Список, ДополнительныеПараметры) Экспорт
	
	Если Список <> Неопределено Тогда
		НовыйСписок = Новый СписокЗначений;
		Для каждого ЭлементСписка из Список Цикл
			Если ЭлементСписка.Пометка Тогда
				НовыйСписок.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеПараметры.Вставить("СписокВидовПоказателей", НовыйСписок);
	Иначе
		ДополнительныеПараметры.Вставить("ОтказОтВыбораПоказателей", Истина)
	КонецЕсли;
		
	ВыбратьФрагмент2(ДополнительныеПараметры);

КонецПроцедуры // ВыбратьСписокВидовПоказателей()

&НаКлиенте
Процедура ВыбратьФрагмент2(СтруктураПараметров)

	Если СтруктураПараметров.Свойство("ЗапрашиватьВидПараметровНаработки") Тогда
		
		СтруктураПараметров.СписокПараметровНаработки.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьСписокПараметровНаработки",ЭтотОбъект,СтруктураПараметров),
																		  НСтр("ru = 'Выберите виды параметров наработки'"));
	Иначе
		ВыбратьЗавершение(СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры // ВыбратьФрагмент2()

&НаКлиенте
Процедура ВыбратьСписокПараметровНаработки(Список, ДополнительныеПараметры) Экспорт

	Если Список <> Неопределено Тогда
		НовыйСписок = Новый СписокЗначений;
		Для каждого ЭлементСписка из Список Цикл
			Если ЭлементСписка.Пометка Тогда
				НовыйСписок.Добавить(ЭлементСписка.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ДополнительныеПараметры.Вставить("СписокПараметровНаработки", НовыйСписок);
	Иначе
		ДополнительныеПараметры.Вставить("ОтказОтВыбораНаработки", Истина)
	КонецЕсли;
		
	ВыбратьЗавершение(ДополнительныеПараметры);

КонецПроцедуры // ВыбратьСписокВидовПараметров()

&НаКлиенте
Процедура ВыбратьЗавершение(СтруктураПараметров)
	
	ЗаполнитьДанныеПоОбъектамРемонтов(СтруктураПараметров.СписокДобавленныхОбъектов, 
					СтруктураПараметров.СписокВидовРемонтов, 
					СтруктураПараметров.СписокПараметровНаработки, 
					СтруктураПараметров.СписокВидовПоказателей,
					СтруктураПараметров.Свойство("ОтказОтВыбораРемонтов"), 
					СтруктураПараметров.Свойство("ОтказОтВыбораПоказателей"), 
					СтруктураПараметров.Свойство("ОтказОтВыбораНаработки"));	
	
КонецПроцедуры


/////////////////////////////////////////////

&НаКлиенте
Процедура ОбъектыРемонтаТекущееСостояниеПриИзменении(Элемент)
	
	УстановитьВидимостьКолонкиПричина();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПричинаПростояПриИзменении(Элемент)
	УстановитьВидимостьКолонкиПричина();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокДоступныхСтатусов = ПолучитьСписокСтатусовНаСервере();
	
	ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, Ожидание, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаИзменятьСостояниеПодчиненныхОРПриИзменении(Элемент)
	
	Если Элементы.ОбъектыРемонта.ТекущиеДанные.Иерархия <> ПредопределенноеЗначение("Справочник.торо_СтруктурыОР.ПустаяСсылка") Тогда
		ПроверитьРаспространениеНаПодчиненных();
	Иначе
		Элементы.ОбъектыРемонта.ТекущиеДанные.ИзменятьСостояниеПодчиненныхОР = Ложь;
		ТекстСообщения = НСтр("ru = 'Невозможно определить подчиненные объекты ремонта пока не выбрана иерархия! Выберите иерархию!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаИерархияПриИзменении(Элемент)
	
	Если Элементы.ОбъектыРемонта.ТекущиеДанные.Иерархия <> ПредопределенноеЗначение("Справочник.торо_СтруктурыОР.ПустаяСсылка") Тогда
		Если Элементы.ОбъектыРемонта.ТекущиеДанные.ИзменятьСостояниеПодчиненныхОР Тогда
			ПроверитьРаспространениеНаПодчиненных();
		КонецЕсли;
	Иначе
		Элементы.ОбъектыРемонта.ТекущиеДанные.ИзменятьСостояниеПодчиненныхОР = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Иерархия = ТекСтруктураИерархии;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыполненныеРаботы
&НаКлиенте
Процедура ВыполненныеРаботыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Не Копирование Тогда 
		ТекущаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРемонта) Тогда 
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите Объект ремонта!'"), 20);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполненныеРаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если Не Копирование Тогда
			
			ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
			ТекДанные.ОбъектРемонта = ТекСтрока.ОбъектРемонта;
			Если Элемент = Элементы.НаработкаОбъектыРемонта Тогда 
				ТекДанные.ДатаРаботыС	= ПолучитьДатуВводаВЭксплуатацию(ТекСтрока.ОбъектРемонта);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполненныеРаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не (НоваяСтрока И ОтменаРедактирования) Тогда
		ДатаВыпуска = ПолучитьДатуВыпуска(Элемент.ТекущиеДанные.ОбъектРемонта);
		Если Элемент.ТекущиеДанные.ДатаОкончанияРемонта <= ДатаВыпуска Тогда
			ТекстСообщения = НСтр("ru = 'Дата окончания ремонта не может быть меньше даты выпуска объекта ремонта!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		ТекДанные = Элементы.ВыполненныеРаботы.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекДанные.ВидРемонтныхРабот) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить ""Вид ремонтных работ""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			СтруктураПоиска = Новый Структура("ОбъектРемонта, ВидРемонтныхРабот", ТекДанные.ОбъектРемонта, ТекДанные.ВидРемонтныхРабот);
			НайденныеСтроки = Объект.ВыполненныеРаботы.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" уже указаны данные по виду ремонтных работ ""%2""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта, ТекДанные.ВидРемонтныхРабот);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегламентныеМероприятия
&НаКлиенте
Процедура РегламентныеМероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Не Копирование Тогда 
		ТекущаяСтрока = Элементы.СпискиОбъектовРемонта.ТекущиеДанные;
		Если ТекущаяСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекущаяСтрока.СписокОбъектов) Тогда 
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите список объектов ремонта!'"), 20);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если Не Копирование Тогда
			ТекСтрока = Элементы.СпискиОбъектовРемонта.ТекущиеДанные;
			ТекДанные.СписокОбъектов = ТекСтрока.СписокОбъектов;
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаработкаОбъектыРемонта
&НаКлиенте
Процедура НаработкаОбъектыРемонтаПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	
	СписокОтбора = ПолучитьПоказателиНаработкиОР(ТекСтрока.ОбъектРемонта);
	ФормаВыбораПоказателя = ПолучитьФорму("Справочник.ПараметрыВыработкиОС.ФормаВыбора", Новый Структура("СписокПараметровНаработки", СписокОтбора),Элемент, Объект.Ссылка);
	
	ФормаВыбораПоказателя.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ (НоваяСтрока И ОтменаРедактирования) И ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаРаботыПо) Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		ДатаВвода = ТекСтрока.ДатаРаботыС;
		ДатаРаботыПо = ТекСтрока.ДатаРаботыПо;
		Если ДатаВвода >= ДатаРаботыПо Тогда
			ТекстСообщения = НСтр("ru = '""Дата работы по"" не может быть меньше даты ввода в эксплуатацию!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		
		Показатель = ТекСтрока.Показатель;
		ОбъектРемонта = ТекСтрока.ОбъектРемонта;
		Если ЗначениеЗаполнено(Показатель) Тогда
			Отбор = Новый Структура("ОбъектРемонта,Показатель",ОбъектРемонта,Показатель);
			МассивСрезПервых = ПолучитьНачалоДействияПоказателяНаработки(Отбор);
			Если МассивСрезПервых.Количество() = 0 ИЛИ МассивСрезПервых[0] > ДатаРаботыПо Тогда
				ТекстСообщения = НСтр("ru = '""Дата работы по"" не может быть меньше даты начала действия показателя наработки!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("ОбъектРемонта, Показатель, ДатаРаботыПо",
			ТекСтрока.ОбъектРемонта, ТекСтрока.Показатель, ТекСтрока.ДатаРаботыПо);
		НайденныеСтроки = Объект.НаработкаОбъектыРемонта.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" уже указана наработка по показателю ""%2"" на дату %3!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекСтрока.ОбъектРемонта, ТекСтрока.Показатель, ТекСтрока.ДатаРаботыПо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПоказательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СписокОтбора = ПолучитьПоказателиНаработкиОР(ТекСтрока.ОбъектРемонта);
	Параметры.Отбор.Вставить("Ссылка", СписокОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектыРемонтаПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
		СписокОтбора = ПолучитьПоказателиНаработкиОР(ТекСтрока.ОбъектРемонта);
		Если СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказателиОбъектыРемонта

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбъектРемонта = Элемент.Родитель.ТекущиеДанные.ОбъектРемонта;
	СписокПоказателей = ПолучитьИзмеряемыеПоказателиОР(ОбъектРемонта);
	
	ОткрытьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора",
				 Новый Структура("КлючНазначенияИспользования, СписокОтбора",
								 "УчетКонтролируемыхПоказателей", СписокПоказателей),
				 Элемент,
				 Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СписокОтбора = ПолучитьИзмеряемыеПоказателиОР(ТекСтрока.ОбъектРемонта);
	Параметры.Отбор.Вставить("Ссылка", СписокОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
		СписокОтбора = ПолучитьИзмеряемыеПоказателиОР(ТекСтрока.ОбъектРемонта);
		Если СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СписокОтбора = ПолучитьИзмеряемыеПоказателиОР(ТекСтрока.ОбъектРемонта);
	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапчастиОбъектаРемонта
&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не (НоваяСтрока И ОтменаРедактирования) Тогда
	
		ТекДанные = Элемент.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить поле ""Номенклатура""!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекДанные.Количество) Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить ""Количество""!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("ОбъектРемонта, Номенклатура, СерийныйНомер, СтатусДвиженияЗЧ",
									ТекДанные.ОбъектРемонта, ТекДанные.Номенклатура, ТекДанные.СерийныйНомер,ТекДанные.СтатусДвиженияЗЧ);
			НайденныеСтроки = Объект.ЗапчастиОбъектаРемонта.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				Если ЗначениеЗаполнено(ТекДанные.СерийныйНомер) Тогда
					ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" уже указаны данные по запчасти ""%2"" с серией ""%3"" и статусом движения ""%4""!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта,ТекДанные.Номенклатура,ТекДанные.СерийныйНомер,ТекДанные.СтатусДвиженияЗЧ);
				Иначе
					ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" уже указаны данные по запчасти ""%2"" со статусом движения ""%3""!'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта,ТекДанные.Номенклатура,ТекДанные.СтатусДвиженияЗЧ);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);	
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;

	ТекущаяСтрока.СерииИспользуются = ПолучитьСерииИспользуются(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.СерийныйНомер = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		ТипНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидНоменклатуры, "ТипНоменклатуры");
		Если ТипНоменклатуры = ПредопределенноеЗначение("Перечисление.ТипыНоменклатуры.Услуга") Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РазрешенныеВмдыНоменклатуры = ПолучитьВидыНоменклатурыНеУслуги();
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры", РазрешенныеВмдыНоменклатуры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВидыНоменклатурыНеУслуги()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыНоменклатуры.Ссылка
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Форма = ПолучитьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",,Элемент);
		
		ПользовательскийОтбор = Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Форма.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
		ПользовательскийОтбор.Элементы.Очистить();
		
		ЭлементОтбора = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ВидНоменклатуры");
		ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ПравоеЗначение 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДанные.Номенклатура, "ВидНоменклатуры");
		
		Форма.Открыть();
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные;
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоказателиОбъектыРемонта
&НаКлиенте
Процедура ПоказателиОбъектыРемонтаДатаКонтроляПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПоказателиОбъектыРемонта.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ТекДанные.ОбъектРемонта, ?(ЗначениеЗаполнено(ТекДанные.ДатаКонтроля),ТекДанные.ДатаКонтроля, Объект.Дата), ТекДанные.Показатель);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПоказательПриИзменении(Элемент)
	
	ТекДанные = Элементы.ПоказателиОбъектыРемонта.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
		СтруктураВозврата = ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ТекДанные.ОбъектРемонта, ?(ЗначениеЗаполнено(ТекДанные.ДатаКонтроля),ТекДанные.ДатаКонтроля, Объект.Дата), ТекДанные.Показатель);
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиОбъектыРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ПоказателиОбъектыРемонта.ТекущиеДанные;
	Если Не ((НоваяСтрока И ОтменаРедактирования) ИЛИ ТекДанные = Неопределено) Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
			ТекстСообщения = НСтр("ru='Выберите контролируемый показатель!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.ДатаКонтроля) Тогда
			ТекстСообщения = НСтр("ru='Укажите дату контроля!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
		СтруктураПоиска = Новый Структура("ОбъектРемонта, ДатаКонтроля, Показатель", ТекДанные.ОбъектРемонта, ТекДанные.ДатаКонтроля, ТекДанные.Показатель);
		Если Объект.ПоказателиОбъектыРемонта.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
			ШаблонСообщения = НСтр("ru='Для объекта ремонта ""%1"" на дату контроля ""%2"" уже указано значение показателя ""%3""!'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта, ТекДанные.ДатаКонтроля, ТекДанные.Показатель);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПускиОР

&НаКлиенте
Процедура ПускиОРПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ПускиОР.ТекущиеДанные;
	Если ТекДанные <> Неопределено И НЕ ОтменаРедактирования Тогда 
		Если НЕ ЗначениеЗаполнено(ТекДанные.ВидПуска) Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить ""Вид пуска""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		Иначе
			СтруктураПоиска = Новый Структура("ОбъектРемонта, ВидПуска", ТекДанные.ОбъектРемонта, ТекДанные.ВидПуска);
			НайденныеСтроки = Объект.ПускиОР.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 1 Тогда
				ШаблонСообщения = НСтр("ru = 'Для объекта ремонта ""%1"" уже указаны данные по виду пуска ""%2""!'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ТекДанные.ОбъектРемонта, ТекДанные.ВидПуска);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ТекДанные.Количество = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо заполнить ""Количество""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	ПараметрыДляПередачи = Новый Структура("ТекСтруктураИерархии", ТекСтруктураИерархии);
	ОткрытьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаНастройкиВидаИерархии", ПараметрыДляПередачи, ЭтаФорма, Объект.Ссылка,,,Новый ОписаниеОповещения("НастройкаИерархииЗавершение",ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Кнопка = Элементы.ОбъектыРемонтаОтображатьПоложение;
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	Элементы.ОбъектыРемонтаПоложение.Видимость = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЗаполнитьПоложенияОР(); 
	КонецЕсли;
	
	мОтображатьПоложение = Кнопка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура("КлючНазначенияИспользования, ДатаДокумента, СтруктураИерархии", "торо_ВводНачальныхДанных", Объект.Дата, ТекСтруктураИерархии);
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
		ПараметрыФормы, Элементы.ОбъектыРемонта, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.Открыть();
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Оформление поля Серия для запчастей.	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиОбъектаРемонтаСерийныйНомер.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапчастиОбъектаРемонта.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияИзмеряемыхПоказателейНаСервере(ОбъектРемонта, ДатаКонтроля, Показатель = Неопределено)
	
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта,Показатель,Истина);
	
	Если Показатель <> Неопределено Тогда
		Если МассивПоказателей.Количество() > 0 Тогда
			СтруктураВозврата = МассивПоказателей[0];
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ЗначенияКонтролируемыхПоказателейСрезПоследних.Значение,
			|	торо_ЗначенияКонтролируемыхПоказателейСрезПоследних.ДатаКонтроля
			|ИЗ
			|	РегистрСведений.торо_ЗначенияКонтролируемыхПоказателей.СрезПоследних(
			|			&Дата,
			|			ОбъектРемонта = &Объект
			|				И Показатель = &Показатель) КАК торо_ЗначенияКонтролируемыхПоказателейСрезПоследних";
			
			Запрос.УстановитьПараметр("Объект", ОбъектРемонта);
			Запрос.УстановитьПараметр("Показатель", Показатель);
			Запрос.УстановитьПараметр("Дата", ДатаКонтроля);
			
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			
			Если НЕ Выборка.Следующий() Тогда
				СтруктураВозврата.Вставить("ПредыдущееЗначение", Выборка.Значение);
			КонецЕсли;
		Иначе
			СтруктураВозврата = Новый Структура;
		КонецЕсли;
	Иначе
		СтруктураВозврата = МассивПоказателей;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоложенияОР(ОР = Неопределено)
	
	СписокПоложений = Новый СписокЗначений;
	Если ОР = Неопределено Тогда
		Для каждого Стр Из Объект.ОбъектыРемонта Цикл
			Если СписокПоложений.НайтиПоЗначению(Стр.ОбъектРемонта) = Неопределено Тогда
				СписокПоложений.Добавить(Стр.ОбъектРемонта);		
			КонецЕсли;
			Стр.Положение = "";
		КонецЦикла; 
	Иначе
		СписокПоложений.Добавить(ОР);
	КонецЕсли;
	
	СтруктураПоложений = ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, ТекСтруктураИерархии, ТекущаяДата());
	
	Если ОР = Неопределено Тогда
		Для каждого Стр Из СтруктураПоложений Цикл
			МассивСтрок = Объект.ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Стр.Ключ));
			Для каждого Элем Из МассивСтрок Цикл
				Элем.Положение = Стр.Значение;
			КонецЦикла; 
		КонецЦикла;
	Иначе
		Элементы.ОбъектыРемонта.ТекущиеДанные.Положение = СтруктураПоложений[ОР];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПодчиненныхОР()
	
	Для Каждого Строка Из Объект.ОбъектыРемонта Цикл
		Если Строка.ИзменятьСостояниеПодчиненныхОР Тогда
			ПроверитьРаспространениеНаПодчиненныхЗаполнитьПодчиненными(ПолучитьПодчиненныеОбъектыНаСервере(Строка.ОбъектРемонта, Строка.Иерархия), Строка.ОбъектРемонта);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаспространениеНаПодчиненных()
	
	ТекДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если ТекДанные.ИзменятьСостояниеПодчиненныхОР Тогда
		СписокПодчиненныхОбъектов = ПолучитьПодчиненныеОбъектыНаСервере(ТекДанные.ОбъектРемонта, ТекДанные.Иерархия);
		
		ОРРодители = Новый Массив;
		
		Для Каждого ПодчиненныйОбъект Из СписокПодчиненныхОбъектов Цикл
			
			СтруктураОтбора = Новый Структура("ОбъектРемонта", ПодчиненныйОбъект);
			
			НайденныеСтроки = ТаблицаПодчиненныхОбъектов.НайтиСтроки(СтруктураОтбора);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если ОРРодители.Найти(Строка.Родитель) = Неопределено Тогда
					ОРРодители.Добавить(Строка.Родитель);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		Если ОРРодители.Количество() Тогда
			
			Если ОРРодители.Количество() = 1 Тогда
				ШаблонВопроса = НСтр("ru = 'На один или несколько объектов ремонта подчиненных %1 уже распространяются состояния из объекта '");
				ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекДанные.ОбъектРемонта);
				Для Каждого Родитель Из ОРРодители Цикл
					ТекстВопроса = ТекстВопроса + Родитель + ", ";
				КонецЦикла;
				ТекстВопроса = Лев(ТекстВопроса,СтрДлина(ТекстВопроса) - 2);
				ТекстВопроса = ТекстВопроса + НСтр("ru = '. Если продолжить то данный объект распространять состояния на подчиненные перестанет. Продолжить?'");
			Иначе
				ШаблонВопроса = НСтр("ru = 'На один или несколько объектов ремонта подчиненных %1 уже распространяются состояния из объектов '");
				ТекстВопроса = СтрШаблон(ШаблонВопроса, ТекДанные.ОбъектРемонта);
				Для Каждого Родитель Из ОРРодители Цикл
					ТекстВопроса = ТекстВопроса + Родитель + ", ";
				КонецЦикла;
				ТекстВопроса = Лев(ТекстВопроса,СтрДлина(ТекстВопроса) - 2);
				ТекстВопроса = ТекстВопроса + НСтр("ru = '. Если продолжить то вышеперечисленные объекты распространять состояния на подчиненные перестанут. Продолжить?'");
			КонецЕсли;
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьРаспространениеНаПодчиненныхВопрос", ЭтаФорма, 
														Новый Структура("СписокПодчиненныхОбъектов, ОРРодители, ТекДанные", СписокПодчиненныхОбъектов, ОРРодители, ТекДанные));
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			
			ПроверитьРаспространениеНаПодчиненныхЗаполнитьПодчиненными(СписокПодчиненныхОбъектов, ТекДанные.ОбъектРемонта);
			
		КонецЕсли;
		
	Иначе
		СтруктураОтбора = Новый Структура("Родитель", ТекДанные.ОбъектРемонта);
		НайденныеСтрокиДляУдаления = ТаблицаПодчиненныхОбъектов.НайтиСтроки(СтруктураОтбора);
		
		Для Каждого Строка Из НайденныеСтрокиДляУдаления Цикл
			ТаблицаПодчиненныхОбъектов.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаспространениеНаПодчиненныхВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СписокПодчиненныхОбъектов 	= ДополнительныеПараметры.СписокПодчиненныхОбъектов;
	ОРРодители 					= ДополнительныеПараметры.ОРРодители;
	ТекДанные 					= ДополнительныеПараметры.ТекДанные;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		СтруктураОтбораТаблПодчиненных 	= Новый Структура("Родитель");
		СтруктураОтбораТаблОбъектов 	= Новый Структура("ОбъектРемонта");
		
		Для Каждого Родитель Из ОРРодители Цикл
			
			СтруктураОтбораТаблПодчиненных.Родитель = Родитель;
			НайденныеСтроки = ТаблицаПодчиненныхОбъектов.НайтиСтроки(СтруктураОтбораТаблПодчиненных);
			Для Каждого Строка Из НайденныеСтроки Цикл
				ТаблицаПодчиненныхОбъектов.Удалить(Строка);
			КонецЦикла;
			
			СтруктураОтбораТаблОбъектов.ОбъектРемонта = Родитель;
			НайденныеСтроки = Объект.ОбъектыРемонта.НайтиСтроки(СтруктураОтбораТаблОбъектов);
			Для Каждого Строка Из НайденныеСтроки Цикл
				Строка.ИзменятьСостояниеПодчиненныхОР = Ложь;
			КонецЦикла;
			
		КонецЦикла;
		
		ПроверитьРаспространениеНаПодчиненныхЗаполнитьПодчиненными(СписокПодчиненныхОбъектов, ТекДанные.ОбъектРемонта);
		
	Иначе
		ТекДанные.ИзменятьСостояниеПодчиненныхОР = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРаспространениеНаПодчиненныхЗаполнитьПодчиненными(СписокПодчиненныхОбъектов, Родитель)
	
	Для Каждого ОбъектРемонта Из СписокПодчиненныхОбъектов Цикл
		НС = ТаблицаПодчиненныхОбъектов.Добавить();
		НС.ОбъектРемонта = ОбъектРемонта;
		НС.Родитель = Родитель;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПодчиненныеОбъектыНаСервере(ОбъектРемонта, Иерархия)
	
	СписокПодчиненныхОбъектов = Новый Массив;
	ПолучитьПодчиненныеОбъекты(ОбъектРемонта, Иерархия, СписокПодчиненныхОбъектов, , Истина);
	
	Возврат СписокПодчиненныхОбъектов;
	
КонецФункции

&НаСервере
Процедура ПолучитьПодчиненныеОбъекты(ОбъектРемонта, Иерархия, СписокПодчиненныхОбъектов, ТаблицаИерархии = Неопределено, ПолучатьТаблицуВходящих = Ложь)
	
	Если ПолучатьТаблицуВходящих Тогда
				
		Запрос = Новый Запрос;
		
		Если Иерархия.ИзменяетсяДокументами Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	РасположениеОРВСтруктуреИерархии.ОбъектИерархии,
			|	РасположениеОРВСтруктуреИерархии.РодительИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&Дата, СтруктураИерархии = &Иерархия) КАК РасположениеОРВСтруктуреИерархии
			|ГДЕ
			|	НЕ РасположениеОРВСтруктуреИерархии.Удален";
			
			Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(Объект.Дата),Объект.Дата,ТекущаяДата()));
			Запрос.УстановитьПараметр("Иерархия", Иерархия);
			
		Иначе
			
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
			|	торо_ИерархическиеСтруктурыОР.РодительИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &Иерархия";

			Запрос.УстановитьПараметр("Иерархия", Иерархия);

		КонецЕсли;
		
		ТаблицаИерархии = Запрос.Выполнить().Выгрузить();
	КонецЕсли;	
	
	МассивСтрокОР = ТаблицаИерархии.НайтиСтроки(Новый Структура("РодительИерархии", ОбъектРемонта));
	
	Если МассивСтрокОР.Количество() Тогда
		
		Для Каждого ЭлементМассиваОР Из МассивСтрокОР Цикл
			ПолучитьПодчиненныеОбъекты(ЭлементМассиваОР.ОбъектИерархии, Иерархия, СписокПодчиненныхОбъектов, ТаблицаИерархии);
			Если ТипЗнч(ЭлементМассиваОР.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") 
					И Не ЭлементМассиваОР.ОбъектИерархии.ЭтоГруппа 
					И Объект.ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта",ЭлементМассиваОР.ОбъектИерархии)).Количество() = 0 Тогда
				СписокПодчиненныхОбъектов.Добавить(ЭлементМассиваОР.ОбъектИерархии);
			КонецЕсли;
		КонецЦикла;	
			
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, СтруктураИерархии, Дата)
	
	Возврат  торо_ОбщегоНазначения.ПолучитьПоложенияВИерархииОбъектовРемРабот(СписокПоложений, СтруктураИерархии, Дата);	
	
КонецФункции

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	ТекСтруктураИерархии = РезультатЗакрытия;
	
	Если мОтображатьПоложение Тогда	
		ЗаполнитьПоложенияОР();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуВводаВЭксплуатацию(ОбъектРемонта)
	
	Возврат ОбъектРемонта.ДатаВводаВЭксплуатацию;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДатуВыпуска(ОбъектРемонта)
	
	Возврат ОбъектРемонта.ДатаВыпуска;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНачалоДействияПоказателяНаработки(СтруктураОтбора)

	ПерваяЗапись = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПервых(,СтруктураОтбора);

	Возврат ПерваяЗапись.ВыгрузитьКолонку("Период");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПоказателиНаработкиОР(ОР)
	
	НаборЗаписейПН = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
	НаборЗаписейПН.Отбор.ОбъектРемонта.Установить(ОР);
	НаборЗаписейПН.Прочитать();
	СписокОтбора = Новый СписокЗначений;
	Для Каждого ЗаписьНабора Из НаборЗаписейПН Цикл
	    СписокОтбора.Добавить(ЗаписьНабора.Показатель);
	КонецЦикла;
	
	Возврат СписокОтбора;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИзмеряемыеПоказателиОР(ОбъектРемонта)
	
	СписокОтбора = Новый СписокЗначений;
	
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта);
	
	Для Каждого СтруктураПоказателя Из МассивПоказателей Цикл
		СписокОтбора.Добавить(СтруктураПоказателя.Показатель);
	КонецЦикла;
	
	Возврат СписокОтбора;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеПоОбъектамРемонтов(СписокОбъектов, СписокВидовРемонтов, СписокПараметровНаработки, СписокВидовПоказателей,
	ОтказОтВыбораРемонтов=Ложь, ОтказОтВыбораПоказателей=Ложь, ОтказОтВыбораНаработки = Ложь)
	
	Если НЕ ОтказОтВыбораПоказателей Тогда
		МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(СписокОбъектов);
		
		Для Каждого СтруктураПоказателя Из МассивПоказателей Цикл
			Если СписокВидовПоказателей.Количество() > 0 И СписокВидовПоказателей.НайтиПоЗначению(СтруктураПоказателя.Показатель) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НовСтрокаПоказателей = Объект.ПоказателиОбъектыРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаПоказателей, СтруктураПоказателя);
			НовСтрокаПоказателей.ДатаКонтроля = Объект.Дата;
		КонецЦикла;	
	КонецЕсли;
	
	Если НЕ ОтказОтВыбораРемонтов Тогда
		// Виды ремонтов.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
		|	торо_НормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонтныхРабот
		|ИЗ
		|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|ГДЕ 
		|	торо_НормативныеРемонтыОборудования.Приоритет
		|	И торо_НормативныеРемонтыОборудования.ОбъектРемонта В (&СписокОбъектов)";
		
		Если СписокВидовРемонтов.Количество() > 0 Тогда
			Запрос.Текст = Запрос.Текст + Символы.ПС + "	И торо_НормативныеРемонтыОборудования.ВидРемонта В(&СписокВидовРемонтов)";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
		
		Если СписокВидовРемонтов.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("СписокВидовРемонтов", СписокВидовРемонтов);
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НовСтрокаТЧ = Объект.ВыполненныеРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаТЧ, Выборка);
			
		КонецЦикла;
	КонецЕсли;
	
	Если Не ОтказОтВыбораНаработки Тогда
		// Параметры наработки
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
		|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
		|	&ДатаКонтроля КАК ДатаРаботыПо
		|ИЗ
		|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
		|			,
		|			ОбъектРемонта В
		|				(&СписокОбъектов) " + ?(СписокПараметровНаработки.Количество() ,"И Показатель В(&СписокПараметровНаработки)","") + ") КАК торо_ПараметрыНаработкиОбъектовРемонта";
		
		Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
		Запрос.УстановитьПараметр("ДатаКонтроля", Объект.Дата);
		
		Если СписокПараметровНаработки.Количество() > 0 Тогда
			Запрос.УстановитьПараметр("СписокПараметровНаработки", СписокПараметровНаработки);
		КонецЕсли;	
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НовСтрокаПоказателей = Объект.НаработкаОбъектыРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаПоказателей, Выборка);
			
		КонецЦикла;
	КонецЕсли;
	
	// Запчасти
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_Запчасти.ОбъектРемонта,
	               |	торо_Запчасти.Номенклатура,
	               |	торо_Запчасти.Количество
	               |ИЗ
	               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
	               |ГДЕ
	               |	торо_Запчасти.ОбъектРемонта В(&СписокОбъектов)
	               |	И торо_Запчасти.ОбъектРемонта.ВестиУчетСерийныхЗапчастей
	               |	И торо_Запчасти.Приоритет";
	
	Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Для Инд = 1 по Выборка.Количество цикл
			НовСтрокаЗапчастей = Объект.ЗапчастиОбъектаРемонта.Добавить();
			НовСтрокаЗапчастей.Номенклатура = Выборка.Номенклатура;
			НовСтрокаЗапчастей.ОбъектРемонта = Выборка.ОбъектРемонта;
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКолонкиПричина()
	
	ВидимостьКолонкиПричина = Ложь;
	Для Каждого Строка ИЗ Объект.ОбъектыРемонта Цикл
		Если ЗначениеЗаполнено(Строка.ТекущееСостояние) И торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Строка.ТекущееСостояние,"ТипЭксплуатации") = ПредопределенноеЗначение("Перечисление.торо_ТипЭксплуатации.Простой") Тогда
			ВидимостьКолонкиПричина = Истина;
			Строка.СостояниеПростой = НЕ ЗначениеЗаполнено(Строка.ПричинаПростоя);
		Иначе
			Строка.СостояниеПростой = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ОбъектыРемонтаПричинаПростоя.Видимость = ВидимостьКолонкиПричина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокСтатусовНаСервере()
	
	СписокЗн = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету Тогда
			СписокЗн.Добавить(Выборка.СтатусОРВУчете);
		КонецЕсли; 
	КонецЦикла;
	
	Возврат СписокЗн;
	
КонецФункции

&НаСервере
Функция ПолучитьСерииИспользуются(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры.ИспользоватьСерии;
	
КонецФункции

&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.ЗапчастиОбъектаРемонта,
	Новый Структура("ЗаполнитьПризнакСерииИспользуются",
	Новый Структура("Номенклатура", "СерииИспользуются")));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбъектаРемонтаСерийныйНомерСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные.Номенклатура) Тогда
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.ЗапчастиОбъектаРемонта.ТекущиеДанные.Номенклатура, "ВидНоменклатуры"));
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти