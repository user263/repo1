#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Функционаьные опции
	ФОУчетСостоянияОборудования 	 = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
	ФОИспользоватьГарантии      	 = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОИспользоватьУпрощеннуюФормуДефекта = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУпрощеннуюФормуДефекта");
	
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Если Параметры.Свойство("ДанныеДокументаПриСозданииПоСостоянию") Тогда
		
		СтруктураПараметров = торо_РемонтыПоСостоянию.ПолучитьСтруктуруНовогоДокумента(Параметры.ДанныеДокументаПриСозданииПоСостоянию.ПараметрыВводаДефекта);
		ЗаполнитьДокументПараметрамиДефектаПриСозданииПоСостоянию(Параметры.ДанныеДокументаПриСозданииПоСостоянию,СтруктураПараметров);
		
	КонецЕсли;
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.СписокДефектов.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьРеквизитыШапкиПоУмолчанию();
	КонецЕсли;
	
	мВидНаОснованииДВ = Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
										"НастройкиТОиР",
										"ПоказыватьПоложениеОР",
										Истина);
	Элементы.ОбъектыРемонтаОтображатьПоложение.Пометка = мОтображатьПоложение;
	Элементы.ОбъектыРемонтаПоложение.Видимость = мОтображатьПоложение;
	Элементы.ОбъектыРемонта.Видимость = Не ФОИспользоватьУпрощеннуюФормуДефекта;
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);
			
	Если ФОИспользоватьУпрощеннуюФормуДефекта Тогда
		Элементы.СписокДефектов.Доступность = ЗначениеЗаполнено(Объект.ОбъектРемонта);			
	КонецЕсли;
	
	ЗаполнитьСписокОбъектовРемонта(ФОИспользоватьУпрощеннуюФормуДефекта);
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		Для каждого ТекСтрока Из Объект.СписокДефектов Цикл
			ТекСтрока.ID = Новый УникальныйИдентификатор();
		КонецЦикла;
	КонецЕсли;
	
	// Заголовок формы++
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	
	// Заголовок формы--

	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВыявленныеДефекты;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --	
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, ДокументыОснования, УстановитьСвойствоЭлементовФормыОтПрав",Истина,Истина, Истина));	
	// Конец ограничение ввода на основании
	
	Если СтруктураПараметров <> Неопределено
		И СтруктураПараметров.Общее.ЗаписыватьДокумент Тогда
		Попытка
			Объект.Дата = ТекущаяДата();
			Записать(Новый Структура("РежимЗаписи",?(СтруктураПараметров.Общее.ПроводитьДокумент,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись)));
		Исключение
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать документ ""Выявленный дефект"": '")+ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ДефектВыявленВПроцессе) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		ЗаполнитьСписокВыбораОбъектовРемонта(СписокВыбораОР, Объект.ДефектВыявленВПроцессе);
	КонецЕсли; 
	
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	
	ТекущийОР = Объект.ОбъектРемонта;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) 
		И Объект.ДокументыОснования.Количество() > 0
		Тогда
		
		ПодключитьОбработчикОжидания("ПодборПредписанийОбработчикОжидания",0.5,Истина);
		
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда	
		
		ЗаполнитьПоложенияОР();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Индекс = 0;
	ШаблонСообщения = НСтр("ru='Не заполнен объект ремонта в строке %1'");
	Для каждого Строка из ОбъектыРемонта Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Индекс+1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ОбъектыРемонта["+Индекс+"].ОбъектРемонта",,Отказ);
		КонецЕсли;
		Индекс = Индекс+1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	МассивПустыхСтрок = объект.СписокДефектов.НайтиСтроки(Новый Структура("ВидРемонтов", ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка")));
	Для каждого ТекСтрока из МассивПустыхСтрок Цикл
		ТекСтрока.ВидРемонтов = мВидНаОснованииДВ;
	КонецЦикла;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "СписокДефектов");
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ФОУчетСостоянияОборудования И Объект.Проведен И НЕ ЗавершениеРаботы Тогда
		
		МассивОбъектов = ПолучитьМассивОРДляФиксацииПростоя(Объект.Ссылка);
		
		Если МассивОбъектов.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, Новый Структура("МассивОбъектов", МассивОбъектов)), НСтр("ru = 'Зафиксировать фактический простой объектов?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") 
		И ВыбранноеЗначение.Свойство("Описание")
		И ВыбранноеЗначение.Описание = "НовоеЗаполнение" Тогда
		
		Данные = ВыбранноеЗначение.Данные;
		
		Если Данные.Количество() = 0 Тогда
			возврат;
		КонецЕсли;
		
		Если ФОИспользоватьУпрощеннуюФормуДефекта Тогда
			
			СтрокиОР = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Данные[0].ОбъектРемонта));
			Если СтрокиОР.Количество() > 0 Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Объект ремонта %1 уже присутствует в табличном поле!'"),СтрокиОР[0].ОбъектРемонта),СтатусСообщения.Важное);
				Возврат;
			КонецЕсли;
			
			СтрокаДефекта = Объект.СписокДефектов.Добавить();
			ЗаполнитьСтрокуТЧ(СтрокаДефекта, Данные[0], ВыбранноеЗначение.ДокОснование);
			
			Если СтрокиОР.Количество() = 0 Тогда
				СтрокаОР = ОбъектыРемонта.Добавить();
				СтрокаОР.ОбъектРемонта = Данные[0].ОбъектРемонта;
				СтрокаОР.ПодразделениеИсполнитель = ?(ЗначениеЗаполнено(СтрокаДефекта.ПодразделениеИсполнитель), 
							СтрокаДефекта.ПодразделениеИсполнитель, 
							ПолучитьПодразделениеИсполнительОР(СтрокаОР.ОбъектРемонта));
				
				Элементы.ОбъектыРемонта.ТекущаяСтрока = СтрокаОР.ПолучитьИдентификатор();
			КонецЕсли;				
			
			Объект.ОбъектРемонта = Данные[0].ОбъектРемонта;
			Объект.ПодразделениеИсполнитель = СтрокаДефекта.ПодразделениеИсполнитель;
			
			ТекущийОР = Объект.ОбъектРемонта;
			
			Элементы.СписокДефектов.ОтборСтрок = Неопределено;
			Элементы.СписокДефектов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", Объект.ОбъектРемонта);
			Элементы.СписокДефектов.Доступность = ЗначениеЗаполнено(Объект.ОбъектРемонта);
			
		Иначе
			Для каждого текСтрока из Данные Цикл
				
				СтрокиОР = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", текСтрока.ОбъектРемонта));
				Если СтрокиОР.Количество() Тогда
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Объект ремонта ""%1"" уже присутствует в табличном поле!'"), текСтрока.ОбъектРемонта),СтатусСообщения.Важное);
					Возврат;
				КонецЕсли;
				
				СтрокаДефекта = Объект.СписокДефектов.Добавить();
				ЗаполнитьСтрокуТЧ(СтрокаДефекта, текСтрока, ВыбранноеЗначение.ДокОснование);
				
				СтрокиОР = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", текСтрока.ОбъектРемонта));
				Если СтрокиОР.Количество() = 0 Тогда
					СтрокаОР = ОбъектыРемонта.Добавить();
					СтрокаОР.ОбъектРемонта = текСтрока.ОбъектРемонта;
					СтрокаОР.ПодразделениеИсполнитель = ?(ЗначениеЗаполнено(СтрокаДефекта.ПодразделениеИсполнитель), 
								СтрокаДефекта.ПодразделениеИсполнитель, 
								ПолучитьПодразделениеИсполнительОР(СтрокаОР.ОбъектРемонта));
					
					Элементы.ОбъектыРемонта.ТекущаяСтрока = СтрокаОР.ПолучитьИдентификатор();
					
					Если мОтображатьПоложение Тогда
						ЗаполнитьПоложенияОР(СтрокаОР.ОбъектРемонта);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДО = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ВыбранноеЗначение.ДокОснование));
		Если ДО.Количество() = 0 Тогда
			СтрокаДО = Объект.ДокументыОснования.Добавить();
			СтрокаДО.ДокументОснование = ВыбранноеЗначение.ДокОснование;
		КонецЕсли;		
		
		Возврат;
	КонецЕсли;
	
	СтрокиОР = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта));
	Если СтрокиОР.Количество() Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Объект ремонта ""%1"" уже присутствует в табличном поле!'"),СтрокиОР[0].ОбъектРемонта),СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		стрВозврата = ПолучитьДанныеИзДокументаОснования(ВыбранноеЗначение);
		
		СтрокаДефекта = Объект.СписокДефектов.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДефекта, стрВозврата);
		
		СтрокаДефекта.ID 				= ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
		СтрокаДефекта.ОбъектРемонта 	= ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
		СтрокаДефекта.ОтказавшийЭлемент = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
		СтрокаДефекта.ДефектОписание	= ВыбранноеЗначение.СтрокаРемонтовОборудования.ОписаниеРемонта;
		СтрокаДефекта.ЗакрываетПредписание = Истина;
		СтрокаДефекта.ДокументИсточник = ВыбранноеЗначение.ДокументОснование;
		
		Если ФОИспользоватьОстановочные Тогда
			ОбновитьОстановочные(ВыбранноеЗначение.СтрокаРемонтовОборудования.ID);
		КонецЕсли;	
			
		Если ФОИспользоватьУпрощеннуюФормуДефекта Тогда
		
			Объект.ОбъектРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
			Объект.ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(Объект.ОбъектРемонта);
			
			ТекущийОР = Объект.ОбъектРемонта;
			
			Элементы.СписокДефектов.ОтборСтрок = Неопределено;
			Элементы.СписокДефектов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", Объект.ОбъектРемонта);
			Элементы.СписокДефектов.Доступность = ЗначениеЗаполнено(Объект.ОбъектРемонта);
			
		КонецЕсли;
		
		СтрокиОР = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта));
		Если СтрокиОР.Количество() = 0 Тогда
			СтрокаОР = ОбъектыРемонта.Добавить();
			СтрокаОР.ОбъектРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
			СтрокаОР.ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(СтрокаОР.ОбъектРемонта);
			
			Элементы.ОбъектыРемонта.ТекущаяСтрока = СтрокаОР.ПолучитьИдентификатор();
			
			Если мОтображатьПоложение И Не ФОИспользоватьУпрощеннуюФормуДефекта Тогда
				ЗаполнитьПоложенияОР(СтрокаОР.ОбъектРемонта);
			КонецЕсли;
			
		КонецЕсли;
		
		ДО = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ВыбранноеЗначение.ДокументОснование));
		Если ДО.Количество() = 0 Тогда
			СтрокаДО = Объект.ДокументыОснования.Добавить();
			СтрокаДО.ДокументОснование = ВыбранноеЗначение.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия  = "ПАРАМЕТРЫ_ПЕЧАТИ_АктДефектации" И Источник = ЭтаФорма Тогда
		
		Если Не Параметр = Неопределено ИЛИ НЕ Параметр.Количество() = 0 Тогда
			Для каждого Элем Из Параметр Цикл
				
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Объект.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Объект.Ссылка);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Объект.Ссылка);
				
				торо_Печать.НапечататьДокумент("Документ.торо_ВыявленныеДефекты",
												"АктДефектации",
												МассивПараметровКоманды,
												СтруктураПараметровКоманды);
			КонецЦикла;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СогласующиеРегистр.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение",ЭтотОбъект,Новый Структура("Элемент",Элемент)),
						НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"),
						РежимДиалогаВопрос.ДаНет);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаПриИзменении(Элемент)
	
	ОчиститьСписокДефектов();
	ОбъектыРемонта.Очистить();
	
	нс = ОбъектыРемонта.Добавить();
	нс.ОбъектРемонта = Объект.ОбъектРемонта;
	
	ТекущийОР = Объект.ОбъектРемонта;
	
	Объект.ПодразделениеИсполнитель = ПолучитьПодразделениеДляОР(Объект.ОбъектРемонта);
	
	ОР = Объект.ОбъектРемонта;
	Элементы.СписокДефектов.ОтборСтрок = Неопределено;
	Элементы.СписокДефектов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", Объект.ОбъектРемонта);
	Элементы.СписокДефектов.Доступность = ЗначениеЗаполнено(Объект.ОбъектРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеИсполнительПриИзменении(Элемент)
	
	Если ОбъектыРемонта.Количество() > 0 Тогда
		ОбъектыРемонта[0].ПодразделениеИсполнитель = Объект.ПодразделениеИсполнитель;
	Иначе
		нс = ОбъектыРемонта.Добавить();
		нс.ПодразделениеИсполнитель = Объект.ПодразделениеИсполнитель;
	КонецЕсли;
	
	Для Каждого ТекЗапись Из Объект.СписокДефектов Цикл
		ТекЗапись.ПодразделениеИсполнитель = Объект.ПодразделениеИсполнитель;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДефектВыявленВПроцессеПриИзменении(Элемент)
	Если ТипЗнч(Объект.ДефектВыявленВПроцессе) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")
		И ЗначениеЗаполнено(Объект.ДефектВыявленВПроцессе) Тогда
		ЗаполнитьСписокВыбораОбъектовРемонта(СписокВыбораОР, Объект.ДефектВыявленВПроцессе);
	Иначе
		СписокВыбораОР.Очистить();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.ДефектВыявленВПроцессе) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытияФормы = Новый Структура("КлючНазначенияИспользования, СписокВыбораОР", "торо_ВнешнееОснованиеДляРабот", СписокВыбораОР);
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОРВДефектИзРегламентногоАкта", ПараметрыОткрытияФормы, Элементы.ОбъектРемонта,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		СтандартнаяОбработка = Ложь;
		СписокДоступныхСтатусов = ПолучитьСписокСтатусовНаСервере();
		
		ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
		ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
		
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда               		
		СтандартнаяОбработка = Ложь;
		Объект.ОбъектРемонта            = ВыбранноеЗначение.ОбъектРемонта;
		Объект.ПодразделениеИсполнитель = ВыбранноеЗначение.ПодразделениеИсполнитель;
	КонецЕсли;
	
	Элементы.СписокДефектов.Доступность = ЗначениеЗаполнено(Объект.ОбъектРемонта);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта
&НаКлиенте
Процедура ОбъектыРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	текСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если Копирование и текСтрока <> Неопределено тогда
		мИсточникКопирования = текСтрока.ОбъектРемонта;
	Иначе
		мИсточникКопирования = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(ТекущийОР) Тогда 
		Строки = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущийОР));
		Для Каждого СтрокаТЧ Из Строки Цикл 
			Объект.СписокДефектов.Удалить(СтрокаТЧ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	текСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если Копирование и текСтрока <> Неопределено Тогда
		текСтрока.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		текСтрока.Положение = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Элементы.СписокДефектов.ИзменятьСоставСтрок=Ложь;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ОбъектРемонта) Тогда 
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен объект ремонта!'"), СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		Строки = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекСтрока.ОбъектРемонта));
		Если Строки.Количество() >1 Тогда 
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный объект ремонта уже присутствует в табличном поле!'"), СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(мИсточникКопирования) тогда
			Дефекты = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта", мИсточникКопирования));
			Для Каждого ТекЗапись из Дефекты цикл
				НоваяСтрока = Объект.СписокДефектов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекЗапись);
				НоваяСтрока.ОбъектРемонта = ТекСтрока.ОбъектРемонта;
				НоваяСтрока.ОтказавшийЭлемент = ТекСтрока.ОбъектРемонта;
				НоваяСтрока.ID = Новый УникальныйИдентификатор();
			КонецЦикла;
			мИсточникКопирования = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли;	
		
		НовыйОР = ТекСтрока.объектРемонта;
		УбратьЛишиниеСтрокиИзТЧСписокДефектов(НовыйОР, ТекущийОР);
		
		Строки = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущийОР));
		Для Каждого СтрокаТЧ Из Строки Цикл 
			СтрокаТЧ.ОбъектРемонта = НовыйОР;
		КонецЦикла;
			
		Элементы.СписокДефектов.ИзменятьСоставСтрок = Истина;
		Элементы.СписокДефектов.ОтборСтрок = Неопределено;
		Элементы.СписокДефектов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекСтрока.ОбъектРемонта);					
		ТекущийОР = ТекСтрока.ОбъектРемонта;
	Иначе
		ТекСтрока.ОбъектРемонта = ТекущийОР;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриАктивизацииСтроки(Элемент)
	ТекущаяСтрока = Элементы.ОбъектыРемонта.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	
	// Отбор строк по объектам ремонта
	Если СтрокаВыбрана Тогда
		Элементы.СписокДефектов.ОтборСтрок = Неопределено;
		Элементы.СписокДефектов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекущаяСтрока.ОбъектРемонта);					
		ТекущийОР = ТекущаяСтрока.ОбъектРемонта;
		ОР = ТекущаяСтрока.ОбъектРемонта;
		
		Элементы.СписокДефектов.ИзменятьСоставСтрок = ЗначениеЗаполнено(ТекущаяСтрока.ОбъектРемонта);
	КонецЕсли;
	
	Элементы.СписокДефектов.Доступность = СтрокаВыбрана;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаПриИзменении(Элемент)
	
	НовыйОР = Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта;
	
	Если Не ЗначениеЗаполнено(мИсточникКопирования) тогда
		ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
		ТекущиеДанные.ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(ТекущиеДанные.ОбъектРемонта);
	КонецЕсли;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР(Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПодразделениеИсполнительПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	
	Дефекты = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта",ТекущиеДанные.ОбъектРемонта));
	Для Каждого ТекЗапись Из Дефекты Цикл
		ТекЗапись.ПодразделениеИсполнитель = ТекущиеДанные.ПодразделениеИсполнитель;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект.ДефектВыявленВПроцессе) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		СтандартнаяОбработка = Ложь;
		
		ЗаполнитьСписокВыбораОбъектовРемонта(СписокВыбораОР, Объект.ДефектВыявленВПроцессе);
		
		ПараметрыОткрытияФормы = Новый Структура("КлючНазначенияИспользования, СписокВыбораОР", "торо_ВнешнееОснованиеДляРабот", СписокВыбораОР);
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОРВДефектИзРегламентногоАкта", ПараметрыОткрытияФормы,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		СтандартнаяОбработка = Ложь;
		СписокДоступныхСтатусов = ПолучитьСписокСтатусовНаСервере();
		
		ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
		ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
		
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, Ожидание, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
	ПараметрыВыбора.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
	ПараметрыВыбора.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	// ОР не выбран
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыДерево") Тогда
		СтрокиПервогоУровня = ВыбранноеЗначение.ПолучитьЭлементы();
		Для Каждого СтрокаОР Из СтрокиПервогоУровня Цикл
			Если СтрокаОР.ЭтоГруппа Тогда 
				ПоказатьПредупреждение(Неопределено,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = ' ""%1"" является группой. Регистрация внешних оснований осуществляется только для элементов!'"),
					СтрокаОР.Объект),30);
				Возврат;
			КонецЕсли;
			
			МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", СтрокаОР.Объект));
			
			Если МассивСтрок.Количество() = 0 Тогда
			
				СтрокаТЧ = ОбъектыРемонта.Добавить();
				СтрокаТЧ.ОбъектРемонта = СтрокаОР.Объект;
				
				СтрокаТЧ.ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(СтрокаТЧ.ОбъектРемонта);
				
				Элементы.ОбъектыРемонта.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
				
				Если мОтображатьПоложение И СтрокиПервогоУровня.Количество() = 1 Тогда
					ЗаполнитьПоложенияОР(СтрокаТЧ.ОбъектРемонта);
				КонецЕсли;
				
			Иначе
				ПоказатьПредупреждение(Неопределено,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'"),
					СтрокаОР.Объект),30);	
			КонецЕсли;
			
		КонецЦикла;
		
		Если мОтображатьПоложение И НЕ СтрокиПервогоУровня.Количество() = 1 Тогда
			ЗаполнитьПоложенияОР();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда               		
		// Проверка ОР на предмет уже выбранных 
		МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыбранноеЗначение.ОбъектРемонта));
		Если МассивСтрок.Количество() = 0 Тогда
			НовСтрокаОРР = ОбъектыРемонта.Добавить();
			НовСтрокаОРР.ОбъектРемонта = ВыбранноеЗначение.ОбъектРемонта;
			
			НовСтрокаОРР.ПодразделениеИсполнитель = ВыбранноеЗначение.ПодразделениеИсполнитель;
			
			Элементы.ОбъектыРемонта.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
			
			Если мОтображатьПоложение И СтрокиПервогоУровня.Количество() = 1 Тогда
				ЗаполнитьПоложенияОР(НовСтрокаОРР.ОбъектРемонта);
			КонецЕсли;
			
		Иначе
			ПоказатьПредупреждение(Неопределено,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'"),
				ВыбранноеЗначение.ОбъектРемонта),30);
		КонецЕсли;
		
		
	Иначе              		
		// Проверка ОР на предмет уже выбранных 
		МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ВыбранноеЗначение));
		Если МассивСтрок.Количество() = 0 Тогда
			НовСтрокаОРР = ОбъектыРемонта.Добавить();
			НовСтрокаОРР.ОбъектРемонта = ВыбранноеЗначение;
			
			НовСтрокаОРР.ПодразделениеИсполнитель = ПолучитьПодразделениеИсполнительОР(НовСтрокаОРР.ОбъектРемонта);
			
			Элементы.ОбъектыРемонта.ТекущаяСтрока = НовСтрокаОРР.ПолучитьИдентификатор();
			
			Если мОтображатьПоложение И СтрокиПервогоУровня.Количество() = 1 Тогда
				ЗаполнитьПоложенияОР(НовСтрокаОРР.ОбъектРемонта);
			КонецЕсли;
			
		Иначе
			ПоказатьПредупреждение(Неопределено, 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Оборудование ""%1"" уже есть в списке оборудования!'"),
				ВыбранноеЗначение),30);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДефектов
&НаКлиенте
Процедура СписокДефектовТиповойДефектПриИзменении(Элемент)
	
	ЗаполнитьДанныеПоТиповомуДефекту();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрокаСписДеф = Элементы.СписокДефектов.ТекущиеДанные;
		Если ФОИспользоватьУпрощеннуюФормуДефекта Тогда
			ТекСтрокаСписДеф.ОбъектРемонта = Объект.ОбъектРемонта;
			ТекСтрокаСписДеф.ПодразделениеИсполнитель = Объект.ПодразделениеИсполнитель;
		Иначе
			ТекСтрокаОР = Элементы.ОбъектыРемонта.ТекущиеДанные;
			Если ТекСтрокаОР <> Неопределено Тогда 
				ТекСтрокаСписДеф.ОбъектРемонта = ТекСтрокаОР.ОбъектРемонта;
				ТекСтрокаСписДеф.ПодразделениеИсполнитель = ТекСтрокаОР.ПодразделениеИсполнитель;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Копирование Тогда
		ТекСтрокаСписДеф = Элементы.СписокДефектов.ТекущиеДанные;
		ТекСтрокаСписДеф.ID = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Если Не ЗначениеЗаполнено(ТекДанные.ОтказавшийЭлемент) Тогда
			ТекДанные.ОтказавшийЭлемент = ТекДанные.ОбъектРемонта;
			СписокДефектовОтказавшийЭлементПриИзменении(Неопределено);
		КонецЕсли;
		
		Если ФОИспользоватьГарантии Тогда
			
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОтказавшийЭлемент, Объект.ДатаОбнаружения, Дата("00010101"));

		КонецЕсли; 
		
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовТиповойДефектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	текДанные = Элементы.СписокДефектов.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОтказавшийЭлемент) Тогда
		Возврат;
	КонецЕсли;	
	
	Отборы = Новый Структура("Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДанные.ОтказавшийЭлемент, "Направление"));
	ПараметрыОткрытия = Новый Структура("Отбор", Отборы);
	ОткрытьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовТиповойДефектАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание > 0 Тогда
		текДанные = Элементы.СписокДефектов.ТекущиеДанные;
		Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОтказавшийЭлемент) Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		
		НаправлениеОР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДанные.ОтказавшийЭлемент, "Направление");
		ПараметрыПолученияДанных.Отбор.Вставить("Владелец", НаправлениеОР);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовТиповойДефектОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	текДанные = Элементы.СписокДефектов.ТекущиеДанные;
	Если текДанные = Неопределено или Не ЗначениеЗаполнено(текДанные.ОтказавшийЭлемент) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	НаправлениеОР = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(текДанные.ОтказавшийЭлемент, "Направление");
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", НаправлениеОР);
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовДефектПричинаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	
	ТекДанные     = Элементы.СписокДефектов.ТекущиеДанные;
	ТиповойДефект = ТекДанные.ТиповойДефект;
	
	МассивСтрок = ПолучитьМассивПричинДефектовНаСервере(ТиповойДефект);
	
	Для Каждого СтрокаПричины Из МассивСтрок Цикл
		
		НайденныйЭлемент = СписокВыбора.НайтиПоЗначению(СтрокаПричины.Причина);
		Если НайденныйЭлемент = Неопределено Тогда
			
			СписокВыбора.Добавить(СтрокаПричины.Причина);
			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Элемент.СписокВыбора = СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовОтказавшийЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураОтбора",ТекущийОР);
	Форма = ПолучитьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыФормы,Элемент);
	ОткрытьФорму(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовОтказавшийЭлементПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если НЕ ТекДанные.ОтказавшийЭлемент = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка") Тогда
		ТекДанные.ТиповойДефект = ПредопределенноеЗначение("Справочник.торо_ТиповыеДефектыОборудования.ПустаяСсылка");
		ТекДанные.НаправлениеОтказавшийЭлемент = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекДанные.ОтказавшийЭлемент,"Направление");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовОтказавшийЭлементАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, Ожидание, СтандартнаяОбработка)
	
	ПараметрыВыбора.Отбор.Вставить("Документ",             Строка(ТипЗнч(Объект.Ссылка)) + "_ОтказавшийЭлемент");
	ПараметрыВыбора.Отбор.Вставить("ТекСтруктураИерархии", ТекСтруктураИерархии);
	Если ФОИспользоватьУпрощеннуюФормуДефекта Тогда
		ПараметрыВыбора.Отбор.Вставить("ОбъектРемонта",        Объект.ОбъектРемонта);
	Иначе 
		ПараметрыВыбора.Отбор.Вставить("ОбъектРемонта",        Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовОтказавшийЭлементОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбора.Отбор.Вставить("Документ",             Строка(ТипЗнч(Объект.Ссылка)) + "_ОтказавшийЭлемент");
	ПараметрыВыбора.Отбор.Вставить("ТекСтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыВыбора.Отбор.Вставить("ОбъектРемонта",        Элементы.ОбъектыРемонта.ТекущиеДанные.ОбъектРемонта);

КонецПроцедуры

&НаКлиенте
Процедура СписокДефектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "СписокДефектовВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.Форма.ФормаДокумента", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования
&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДоступныеТипы = ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере();	
	Если ДоступныеТипы=Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДокументыОснования1ДокументОснование.ОграничениеТипа =ДоступныеТипы;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если ТекДанные.ДокументОснование = Неопределено ИЛИ ТекДанные.ДокументОснование.Пустая() Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			Сообщение.Сообщить();
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда 
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		Объект.ДокументыОснования.Удалить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Кнопка = Элементы.ОбъектыРемонтаОтображатьПоложение;
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	Элементы.ОбъектыРемонтаПоложение.Видимость = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЗаполнитьПоложенияОР(); 
	КонецЕсли;
	
	мОтображатьПоложение = Кнопка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	ПараметрыДляПередачи = Новый Структура("ТекСтруктураИерархии", ТекСтруктураИерархии);
	ОткрытьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаНастройкиВидаИерархии", ПараметрыДляПередачи, ЭтаФорма, Объект.Ссылка,,,Новый ОписаниеОповещения("НастройкаИерархииЗавершение",ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТиповойДефект(Команда)
	
	ТекДанные = Элементы.СписокДефектов.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите строку списка дефектов для создания типового дефекта!'"));
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ТиповойДефект) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТиповойДефектВопрос", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), НСтр("ru = 'Перезаполнить существующий типовой дефект?'"), РежимДиалогаВопрос.ДаНет, 60);	
	Иначе
		НовыйТиповойДефект = ПолучитьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаОбъекта", ,ЭтаФорма);
		СоздатьТиповойДефектЗавершение(НовыйТиповойДефект, ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПредписаний(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписаний",
	Новый Структура("Владелец", Объект.Ссылка), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	
	ФормаПодбора.ЗакрыватьПриВыборе = ?(ФОИспользоватьУпрощеннуюФормуДефекта, Истина, Ложь);
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьСтатус(Команда)

	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПодборОР(Команда)
	
	Если ТипЗнч(Объект.ДефектВыявленВПроцессе) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		стрПараметров = Новый структура("ТипВыходногоДок, ДокОснование, ФОИспользоватьУпрощеннуюФормуДефекта", 
			ПредопределенноеЗначение("Перечисление.торо_ВидыВыходныхДокументов.ВыявленныйДефект"), 
				Объект.ДефектВыявленВПроцессе, ФОИспользоватьУпрощеннуюФормуДефекта);
				
		ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораОРПриВводеНаОсновании", стрПараметров, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
	ИначеЕсли ЗначениеЗаполнено(СписокВыбораОР) Тогда
		ПараметрыОткрытияФормы = Новый Структура("КлючНазначенияИспользования, ЗакрыватьПриВыборе, СписокВыбораОР", "торо_ВнешнееОснованиеДляРабот", Ложь, СписокВыбораОР);
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОРВДефектИзРегламентногоАкта", ПараметрыОткрытияФормы, Элементы.ОбъектыРемонта,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ПараметрыОткрытияФормы = Новый Структура("КлючНазначенияИспользования, ЗакрыватьПриВыборе, СтруктураИерархии", "торо_ВнешнееОснованиеДляРабот", Ложь, ТекСтруктураИерархии);
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР", ПараметрыОткрытияФормы, Элементы.ОбъектыРемонта,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли; 	
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере 
Процедура УбратьЛишиниеСтрокиИзТЧСписокДефектов(НовыйОР, ТекущийОР);
	
	текИОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	
	масПодчиненныхОР = Справочники.торо_ОбъектыРемонта.ПолучитьВсеПодчиненныеОР(НовыйОР, текИОР);
	масПодчиненныхОР.Добавить(НовыйОР);
		
	МасУдаления = Новый Массив;
	тз = Объект.СписокДефектов.НайтиСтроки(Новый структура("ОбъектРемонта", ТекущийОР));
	Для каждого текСтрока из тз Цикл
		НайС = масПодчиненныхОР.Найти(текСтрока.ОтказавшийЭлемент);
		Если НайС = Неопределено тогда
			МасУдаления.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого текСтрока из МасУдаления Цикл
		Объект.СписокДефектов.Удалить(текСтрока);
	КонецЦикла;
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	               |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.СписокДефектов.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораОбъектовРемонта(СписокВыбораОР, ДокументРегламентногоМероприятия)
	
	СписокВыбораОР.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ОбъектРемонта,
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ВидРемонтныхРабот
	|ПОМЕСТИТЬ ТабМероприятия
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК торо_АктОВыполненииРегламентногоМероприятияМероприятия
	|ГДЕ
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка = &ДокументРегламентногоМероприятия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ВыходныеДокументы.СписокОбъектов
	|ПОМЕСТИТЬ СпискиОР
	|ИЗ
	|	ТабМероприятия КАК ТабМероприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыходныеДокументы КАК торо_ВыходныеДокументы
	|		ПО ТабМероприятия.ОбъектРемонта = торо_ВыходныеДокументы.СписокОбъектов
	|			И ТабМероприятия.ВидРемонтныхРабот = торо_ВыходныеДокументы.ВидМероприятия
	|ГДЕ
	|	торо_ВыходныеДокументы.ВыходнойДокумент = &ВыходнойДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта
	|ИЗ
	|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
	|ГДЕ
	|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов В
	|			(ВЫБРАТЬ
	|				СпискиОР.СписокОбъектов
	|			ИЗ
	|				СпискиОР КАК СпискиОР)";
	
	Запрос.УстановитьПараметр("ВыходнойДокумент", Перечисления.торо_ВидыВыходныхДокументов.ВыявленныйДефект);
	Запрос.УстановитьПараметр("ДокументРегламентногоМероприятия" , ДокументРегламентногоМероприятия);	
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СписокВыбораОР.Добавить(Выборка.ОбъектРемонта);
		
	КонецЦикла;
		
КонецПроцедуры
 
&НаСервереБезКонтекста
Функция ПолучитьПодразделениеДляОР(ОР)
	Возврат ОР.ПодразделениеИсполнитель
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументПараметрамиДефектаПриСозданииПоСостоянию(ПараметрыСобытия,СтруктураПараметров)
	
	Объект.ДатаОбнаружения = ПараметрыСобытия.ДатаДокументаИсточник;
	Для Каждого КлючИЗначение Из СтруктураПараметров.Шапка Цикл
		Объект[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
	СтрокаДокументаОснования = Объект.ДокументыОснования.Добавить();
	СтрокаДокументаОснования.ДокументОснование = ПараметрыСобытия.ДокументИсточник;
	
	СтрокаДефекта = Объект.СписокДефектов.Добавить();
	СтрокаДефекта.ВидРемонтов 		= Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
	СтрокаДефекта.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ПараметрыСобытия.ОбъектРемонта,Объект.ДатаОбнаружения,Объект.ДатаОбнаружения);
	СтрокаДефекта.ДокументИсточник 	= ПараметрыСобытия.ДокументИсточник;
	СтрокаДефекта.ОбъектРемонта 	= ПараметрыСобытия.ОбъектРемонта;
	СтрокаДефекта.ОтказавшийЭлемент = ПараметрыСобытия.ОбъектРемонта;
	
	Для Каждого КлючИЗначение Из СтруктураПараметров.Таблица Цикл
		СтрокаДефекта[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыШапкиПоУмолчанию()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
		Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяОрганизация",
		Справочники.Организации.ПустаяСсылка());
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		
		Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновноеПодразделение",
		Справочники.СтруктураПредприятия.ПустаяСсылка());
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Инициатор) Тогда
		
		Объект.Инициатор = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнойИнициаторДефекта",
		Неопределено);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОбнаружения) И ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ПодставлятьТекущуюДатуВоВнешнееОснованиеИВыявленныеДефекты",
		Ложь) Тогда
		
		Объект.ДатаОбнаружения = ТекущаяДата();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		
		Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнойОтветственный",
		Справочники.Пользователи.ПустаяСсылка());
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура выполняет первоначальное заполнение списка объектов ремонта.
//
// Параметры
//  ФОИспользоватьУпрощеннуюФормуДефекта - Значение функциональной опции "торо_ИспользоватьУпрощеннуюФормуДефекта".
//
Процедура ЗаполнитьСписокОбъектовРемонта(ФОИспользоватьУпрощеннуюФормуДефекта = ложь)
	
	Если ФОИспользоватьУпрощеннуюФормуДефекта = истина Тогда
		Объекты = Объект.СписокДефектов.Выгрузить();
		Если Объекты.Количество() > 0 Тогда
			нс = ОбъектыРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(нс, Объекты[0]);
			
			Объект.ОбъектРемонта = нс.ОбъектРемонта;
			Объект.ПодразделениеИсполнитель = нс.ПодразделениеИсполнитель;
		КонецЕсли;
		
		тОбъектыРемонта = Объект.СписокДефектов.Выгрузить();
		тОбъектыРемонта.Свернуть("ОбъектРемонта, ПодразделениеИсполнитель");
		
		Если тОбъектыРемонта.Количество() > 1 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе указано более одного объекта ремонта. Для того что бы просмотреть все указанные объекты ремонта - отключите настройку ""Использовать упрощенную форму дефекта"". Настройка расположена в ""Настройка параметров подсистемы ТОиР"" на вкладке ""Интерфейс ввода документов"" в блоке настроек «Учет показателей эксплуатации».'"));
		КонецЕсли;
	Иначе
		Объекты = Объект.СписокДефектов.Выгрузить();
		Объекты.Свернуть("ОбъектРемонта, ПодразделениеИсполнитель");
		ОбъектыРемонта.Загрузить(Объекты);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоТиповомуДефекту()
	
	ТекДанные = Элементы.СписокДефектов.ТекущиеДанные;
	
	Если НЕ ТекДанные.ТиповойДефект = ПредопределенноеЗначение("Справочник.торо_ТиповыеДефектыОборудования.ПустаяСсылка") Тогда
		СтруктураТиповогоДефекта = ПолучитьДанныеТиповогоДефектаНаСервере(ТекДанные.ТиповойДефект);
		
		ТекДанные.ВидДефекта         = СтруктураТиповогоДефекта.ВидДефекта;
		ТекДанные.ДефектОписание     = СтруктураТиповогоДефекта.ДефектОписание;
		ТекДанные.КритичностьДефекта = СтруктураТиповогоДефекта.КритичностьДефекта;
		ТекДанные.ДефектПричина = СтруктураТиповогоДефекта.ПричиныВозникновенияДефекта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеТиповогоДефектаНаСервере(ТиповойДефект)
	
	Возврат Новый Структура("ВидДефекта, ДефектОписание, КритичностьДефекта, ПричиныВозникновенияДефекта", ТиповойДефект.ВидДефекта, ТиповойДефект.ОписаниеДефекта, ТиповойДефект.КритичностьДефекта, ?(ТиповойДефект.ПричиныВозникновенияДефекта.Количество() > 0, ТиповойДефект.ПричиныВозникновенияДефекта[0].Причина, Справочники.торо_ПричиныДефектов.ПустаяСсылка()));	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНаправлениеОРНаСервере(ОР)
	
	Возврат ОР.Направление;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивПричинДефектовНаСервере(ТиповойДефект)
	
	Мас = Новый Массив;
	
	Для каждого Стр Из ТиповойДефект.ПричиныВозникновенияДефекта Цикл
	
		Мас.Добавить(Стр.Причина);	
	
	КонецЦикла; 
	
	Возврат Мас;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоложенияОР(ОР = Неопределено)
	
	СписокПоложений = Новый СписокЗначений;
	Если ОР = Неопределено Тогда
		
		Для каждого Стр Из ОбъектыРемонта Цикл
			
			Если СписокПоложений.НайтиПоЗначению(Стр.ОбъектРемонта) = Неопределено Тогда
				СписокПоложений.Добавить(Стр.ОбъектРемонта);		
			КонецЕсли;
			
			Стр.Положение = "";
			
		КонецЦикла; 
	Иначе
		
		СписокПоложений.Добавить(ОР);
		
	КонецЕсли;
	
	СтруктураПоложений = ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, ТекСтруктураИерархии, ТекущаяДата());
	
	Если ОР = Неопределено Тогда
		Для каждого Стр Из СтруктураПоложений Цикл
			
			МассивСтрок = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Стр.Ключ));
			
			Для каждого Элем Из МассивСтрок Цикл
				
				Элем.Положение = Стр.Значение;
				
			КонецЦикла; 
			
		КонецЦикла;
	Иначе
		Элементы.ОбъектыРемонта.ТекущиеДанные.Положение = СтруктураПоложений[ОР];
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, СтруктураИерархии, Дата)
	
	Возврат торо_ОбщегоНазначения.ПолучитьПоложенияВИерархииОбъектовРемРабот(СписокПоложений, СтруктураИерархии, Дата);	
	
КонецФункции

&НаКлиенте
Процедура ПодборПредписанийОбработчикОжидания()
	
	Если Объект.СписокДефектов.Количество() = 0 Тогда
		стрПараметров = Новый структура("ТипВыходногоДок, ДокОснование, ФОИспользоватьУпрощеннуюФормуДефекта", 
		ПредопределенноеЗначение("Перечисление.торо_ВидыВыходныхДокументов.ВыявленныйДефект"), 
			Объект.ДокументыОснования[0].ДокументОснование, ФОИспользоватьУпрощеннуюФормуДефекта);
			
		ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораОРПриВводеНаОсновании", стрПараметров, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия,ДополнительныеПараметры) Экспорт
	
	ТекСтруктураИерархии = РезультатЗакрытия;
	
	Если мОтображатьПоложение Тогда	
		
		ЗаполнитьПоложенияОР();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТиповойДефектВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        НовыйТиповойДефект = ПолучитьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаОбъекта", Новый Структура("Ключ, ОчиститьТабЧасть", ТекДанные.ТиповойДефект, Истина) ,ЭтаФорма);
		
	Иначе
        
        НовыйТиповойДефект = ПолучитьФорму("Справочник.торо_ТиповыеДефектыОборудования.ФормаОбъекта", ,ЭтаФорма);
        
    КонецЕсли;
	
	СоздатьТиповойДефектЗавершение(НовыйТиповойДефект, ТекДанные);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьТиповойДефектЗавершение(НовыйТиповойДефект, ТекДанные)
	
	НаправлениеОР = ПолучитьНаправлениеОРНаСервере(ТекДанные.ОбъектРемонта);
	НовыйТиповойДефект.Объект.Владелец = ?(НаправлениеОР.Пустая(),
		ПредопределенноеЗначение("Справочник.торо_НаправленияОбъектовРемонтныхРабот.БезНаправления"),
		НаправлениеОР);
	
	НовыйТиповойДефект.Объект.ВидДефекта         = ТекДанные.ВидДефекта;	
	НовыйТиповойДефект.Объект.ОписаниеДефекта    = ТекДанные.ДефектОписание;
	НовыйТиповойДефект.Объект.КритичностьДефекта = ТекДанные.КритичностьДефекта;	
	
	Если ЗначениеЗаполнено(ТекДанные.ДефектПричина) Тогда
		
		НовыйТиповойДефект.Объект.ПричиныВозникновенияДефекта.Добавить().Причина = ТекДанные.ДефектПричина;
		
	КонецЕсли;
	
	НовыйТиповойДефект.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПодразделениеИсполнительОР(ОР)
	
	Возврат ОР.ПодразделениеИсполнитель;
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	
		МассивОбъектов = ДополнительныеПараметры.МассивОбъектов;
		
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ВидОперации",ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации"));
		СтруктураПараметров.Вставить("ДокументОснование",Объект.Ссылка);
		СтруктураПараметров.Вставить("Организация",Объект.Организация);
		СтруктураПараметров.Вставить("Подразделение",Объект.Подразделение);
		СтруктураПараметров.Вставить("ДатаОбнаруженияДефекта",Объект.ДатаОбнаружения);
		СтруктураПараметров.Вставить("СтруктураИерархии",ТекСтруктураИерархии);
		СтруктураПараметров.Вставить("МассивОР",МассивОбъектов);
		
		ОткрытьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта",СтруктураПараметров,ЭтаФорма,Объект.Ссылка);
		
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивОРДляФиксацииПростоя(Ссылка)

	МассивВозврата = Новый Массив;
	
	// Проверим, включен ли ввод документов состояний на основании дефектов.
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВводНаОсновании.Значение
	               |ИЗ
	               |	РегистрСведений.торо_ВводНаОсновании КАК торо_ВводНаОсновании
	               |ГДЕ
	               |	торо_ВводНаОсновании.ДокументВводимый = &ДокументВводимый
	               |	И торо_ВводНаОсновании.ДокументОснование = &ДокументОснование
	               |	И торо_ВводНаОсновании.Значение";
	Запрос.УстановитьПараметр("ДокументОснование","торо_ВыявленныеДефекты");
	Запрос.УстановитьПараметр("ДокументВводимый","торо_СостоянияОбъектовРемонта");
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Получим список ОР, для которых на период обнаружения дефекта ещё не введено простоев.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВложенныйЗапрос.ОбъектРемонта
		|ИЗ
		|	(ВЫБРАТЬ
		|		торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта КАК ОбъектРемонта,
		|		ДОБАВИТЬКДАТЕ(торо_ВыявленныеДефекты.ДатаОбнаружения, ДЕНЬ, торо_КоличествоДнейСмещенияВДефектеДляПростоев.Значение) КАК ДатаОкончания,
		|		ДОБАВИТЬКДАТЕ(торо_ВыявленныеДефекты.ДатаОбнаружения, ДЕНЬ, -торо_КоличествоДнейСмещенияВДефектеДляПростоев.Значение) КАК ДатаНачала
		|	ИЗ
		|		Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		|			ПО торо_ВыявленныеДефектыСписокДефектов.Ссылка = торо_ВыявленныеДефекты.Ссылка,
		|		Константа.торо_КоличествоДнейСмещенияВДефектеДляПростоев КАК торо_КоличествоДнейСмещенияВДефектеДляПростоев
		|	ГДЕ
		|		торо_ВыявленныеДефектыСписокДефектов.Ссылка = &Ссылка) КАК ВложенныйЗапрос
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ВидыЭксплуатации КАК торо_ВидыЭксплуатации
		|			ПО торо_ТекущееСостояниеОР.ВидЭксплуатации = торо_ВидыЭксплуатации.Ссылка
		|		ПО ВложенныйЗапрос.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
		|			И (торо_ВидыЭксплуатации.ТипЭксплуатации = ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой))
		|			И ВложенныйЗапрос.ДатаНачала <= торо_ТекущееСостояниеОР.Период
		|			И ВложенныйЗапрос.ДатаОкончания >= торо_ТекущееСостояниеОР.Период
		|ГДЕ
		|	торо_ТекущееСостояниеОР.Регистратор ЕСТЬ NULL ";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивВозврата.Добавить(Выборка.ОбъектРемонта);
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ПолучитьПотомковОР(РодительИерархии, СтруктураИерархии, МассивОбъектов)
	
	Если НЕ РодительИерархии.ЭтоГруппа Тогда
		МассивОбъектов.Добавить(РодительИерархии);
	КонецЕсли;
			
	Запрос = Новый Запрос;
	Если СтруктураИерархии.ИзменяетсяДокументами Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка,
		|	торо_ОбъектыРемонта.Наименование,
		|	торо_ОбъектыРемонта.ТехНомер,
		|	торо_ОбъектыРемонта.Код,
		|	торо_ОбъектыРемонта.ИнвентарныйНомер
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			,
		|			СтруктураИерархии = &СтруктураИерархии
		|				И РодительИерархии = &РодительИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка,
		|	торо_ОбъектыРемонта.Наименование,
		|	торо_ОбъектыРемонта.ТехНомер,
		|	торо_ОбъектыРемонта.Код,
		|	торо_ОбъектыРемонта.ИнвентарныйНомер
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
		|		И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|		И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии",СтруктураИерархии);
	Запрос.УстановитьПараметр("РодительИерархии",РодительИерархии);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ПолучитьПотомковОР(Выборка.Ссылка, СтруктураИерархии, МассивОбъектов);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	   		
	Если Не ДокументОснование = Неопределено Тогда
		
		СтрокиРО = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование)); 			
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			ТекОР =	 ОчереднаяСтрока.ОбъектРемонта;
			Объект.СписокДефектов.Удалить(ОчереднаяСтрока);					
			
			МассивОР = Объект.СписокДефектов.НайтиСтроки(Новый Структура("ОбъектРемонта",ТекОР));				
			Если Не МассивОР.Количество() Тогда					
				СписокОР = ОбъектыРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта",ТекОР));					
				Для Каждого СтрокаОР ИЗ СписокОР Цикл 						
					ОбъектыРемонта.Удалить(СтрокаОР);						
				КонецЦикла; 					
			КонецЕсли;				
			
		КонецЦикла;			
		
	КонецЕсли;  		
		
КонецПроцедуры

&НаСервере 
Процедура ОчиститьСписокДефектов()
	
	стрПоиска = Новый структура("ОбъектРемонта");
	Для каждого строкаТЧ из ОбъектыРемонта Цикл
		
		Если строкаТЧ.ОбъектРемонта = Объект.ОбъектРемонта Тогда продолжить; КонецЕсли;
		
		стрПоиска.ОбъектРемонта = строкаТЧ.ОбъектРемонта;
		масСтрок = Объект.СписокДефектов.НайтиСтроки(стрПоиска); 
		
		Для каждого текСтрока из МасСтрок цикл
			Объект.СписокДефектов.Удалить(текСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры 

&НаСервереБезКонтекста  
Функция ПолучитьВидРемонта()
	Возврат Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить();
КонецФункции

&НаКлиенте 
Процедура ЗаполнитьСтрокуТЧ(Строка, Данные, ДокОснование)
	
	ЗаполнитьЗначенияСвойств(Строка, Данные);
	Строка.ОтказавшийЭлемент = Данные.ОбъектРемонта;
	Строка.ЗакрываетПредписание = Истина;
	Строка.ДокументИсточник = ДокОснование;
	Строка.ВидРемонтов = ПолучитьВидРемонта();
	
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные(Данные.ID);
	КонецЕсли;	
	
КонецПроцедуры

#Область Согласование

&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт 
	
	торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусовНаСервере()
	
	СписокЗн = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокЗн.Добавить(Выборка.СтатусОРВУчете);
	КонецЦикла;
	Возврат СписокЗн;
КонецФункции

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Функция ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере()
	Возврат торо_СобытияФорм.ДокументыОснованияДокументОснованиеНачалоВыбора(ЭтаФорма);	
КонецФункции

&НаКлиенте
Процедура ОбъектыРемонтаОбъектРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.ОбъектыРемонта.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда               		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные.ОбъектРемонта            = ВыбранноеЗначение.ОбъектРемонта;
		ТекущиеДанные.ПодразделениеИсполнитель = ВыбранноеЗначение.ПодразделениеИсполнитель;
		
		Если мОтображатьПоложение Тогда
			ЗаполнитьПоложенияОР(ТекущиеДанные.ОбъектРемонта);
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьДанныеИзДокументаОснования(ВыбЗначение)
	
	стрВозврата = Новый Структура("ТиповойДефект, Исполнитель, ВидДефекта, КритичностьДефекта, ДефектОписание, ДефектПричина");
	
	сд = ВыбЗначение.СтрокаРемонтовОборудования;
	
	Если ТипЗнч(ВыбЗначение.ДокументОснование) = тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда 
		
		Запрос = новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	таб.ТиповойДефект,
		               |	таб.Исполнитель,
		               |	таб.ID,
		               |	таб.ОбъектРемонта,
		               |	торо_ТиповыеДефектыОборудования.ВидДефекта,
		               |	торо_ТиповыеДефектыОборудования.КритичностьДефекта,
		               |	торо_ТиповыеДефектыОборудования.ОписаниеДефекта КАК ДефектОписание,
		               |	торо_ТиповыеДефектыОборудования.ПричиныВозникновенияДефекта.(
		               |		Причина КАК ДефектПричина
		               |	)
		               |ИЗ
		               |	Документ.торо_ВнешнееОснованиеДляРабот.ОбследованноеОборудование КАК таб
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеДефектыОборудования КАК торо_ТиповыеДефектыОборудования
		               |		ПО таб.ТиповойДефект = торо_ТиповыеДефектыОборудования.Ссылка
		               |ГДЕ
		               |	таб.Ссылка = &Ссылка
		               |	И таб.ID = &ID
		               |	И таб.ОбъектРемонта = &ОбъектРемонта";
					   
		Запрос.УстановитьПараметр("Ссылка", ВыбЗначение.ДокументОснование);
		Запрос.УстановитьПараметр("ID", сд.ID);
		Запрос.УстановитьПараметр("ОбъектРемонта", сд.ОбъектРемонта);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Причины = Выборка.ПричиныВозникновенияДефекта.Выгрузить();
			Если Причины.Количество() >= 1 Тогда
				стрВозврата.ДефектПричина = Причины[0].ДефектПричина;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(стрВозврата, Выборка);
		КонецЕсли;
	Иначе
	КонецЕсли;
	
	Возврат стрВозврата;
	
КонецФункции

фПослеОчистки = Ложь;
#КонецОбласти

