#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем СписокОтбора;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		
		ДатаОбнаружения = Основание.Дата;
		Инициатор = Основание.Ответственный;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_СостоянияОбъектовРемонта") Тогда 
		
		ДатаОбнаружения = Основание.Дата;
		Инициатор = Основание.Ответственный;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_УчетКонтролируемыхПоказателей") Тогда
		
		ДатаОбнаружения = Основание.Дата;
		Инициатор = Основание.Ответственный;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
		ДокументОснование = Основание.Ссылка;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
		
		ДатаОбнаружения = Основание.Дата;
		Инициатор = Основание.Ответственный;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;        
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
		ДефектВыявленВПроцессе = Основание.Ссылка;
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("СписокДефектов", "Список дефектов");
	торо_ОбщегоНазначения.ПроверитьЗаполненностьТабличныхЧастей(ЭтотОбъект, СписокТЧ, Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;	
	
	// Согласование++
	
	// Проверим использование статусов документов.
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВыявленныеДефекты;
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);
	
	Если мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	// Согласование--
	
	Если СписокДефектов.Количество() = 0 Тогда
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе не заполнена табличная часть списка дефектов. Проведение невозможно!'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	Движения.торо_ВыявленныеДефекты.Записывать 	= Истина;
	Движения.торо_Ремонты.Записывать 			= Истина;
	
	Для Каждого ТекСтрокаСписокДефектов Из СписокДефектов Цикл
		
		Если ТекСтрокаСписокДефектов.ОбъектРемонта.Пустая() Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан объект ремонта'"));
			Отказ = Истина;
		КонецЕсли;
		
		Если ТекСтрокаСписокДефектов.ВидДефекта.Пустая() Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не указан вид дефекта %1/%2.'"),
				ТекСтрокаСписокДефектов.ОбъектРемонта,ТекСтрокаСписокДефектов.ОтказавшийЭлемент));
			Отказ = Истина;
		КонецЕсли;
		
		// регистр сведений торо_ВыявленныеДефекты 
		Движение = Движения.торо_ВыявленныеДефекты.Добавить();
		Движение.ОбъектРемонта          = ТекСтрокаСписокДефектов.ОбъектРемонта;
		Движение.ОтказавшийЭлемент      = ТекСтрокаСписокДефектов.ОтказавшийЭлемент;
		Движение.Период                 = ДатаОбнаружения;
		Движение.ДефектПричина          = ТекСтрокаСписокДефектов.ДефектПричина;
		Движение.ДефектВыявленВПроцессе = ДефектВыявленВПроцессе;
		Движение.ВидДефекта				= ТекСтрокаСписокДефектов.ВидДефекта;
		Движение.ID			 			= ТекСтрокаСписокДефектов.ID;
		Движение.Организация            = Организация;
		Движение.Подразделение          = Подразделение;
		Движение.ПодразделениеИсполнитель = ТекСтрокаСписокДефектов.ПодразделениеИсполнитель;
		Движение.КритичностьДефекта     = ТекСтрокаСписокДефектов.КритичностьДефекта;
		Движение.ДефектОписание     = ТекСтрокаСписокДефектов.ДефектОписание;
	   Движение.НаправлениеНаУстранение = ТекСтрокаСписокДефектов.НаправлениеНаУстранение;
		
		// регистр сведений торо_Ремонты
		Движение = Движения.торо_Ремонты.Добавить();
		Движение.Период 			= МоментВремени().Дата;
		Движение.ID 				= ТекСтрокаСписокДефектов.ID;
		Движение.ОбъектРемонта 		= ТекСтрокаСписокДефектов.ОтказавшийЭлемент;
		Движение.ВидРемонта			= ТекСтрокаСписокДефектов.ВидРемонтов;
		Движение.ГарантийныйРемонт  = ТекСтрокаСписокДефектов.ГарантийныйРемонт;
		
	КонецЦикла;
	
	Если НЕ Отказ Тогда
		УстановитьУправляемыеБлокировки();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПредписанияСрезПоследних.ОбъектРемонта,
	               |	торо_ПредписанияСрезПоследних.ID,
	               |	торо_ПредписанияСрезПоследних.Описание,
	               |	торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта,
	               |	торо_ПредписанияСрезПоследних.Обработано,
	               |	торо_ПредписанияСрезПоследних.Период,
	               |	торо_ПредписанияСрезПоследних.Организация,
	               |	торо_ПредписанияСрезПоследних.Подразделение
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(
	               |			,
	               |			ID В (&ID)
	               |				И Регистратор <> &Регистратор) КАК торо_ПредписанияСрезПоследних";
	
	Запрос.УстановитьПараметр("ID",СписокДефектов.Выгрузить(СписокДефектов.НайтиСтроки(Новый Структура("ЗакрываетПредписание",Истина)),"ID").ВыгрузитьКолонку("ID"));
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	ТаблицаЗакрывамыхПредписаний = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ОбработанноеПредписание Из ТаблицаЗакрывамыхПредписаний Цикл
		
		Если ОбработанноеПредписание.Обработано Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки закрытого предписания по %1 (%2)'"),
				ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		ИначеЕсли ОбработанноеПредписание.Период >= Дата Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки предписания по %1 (%2) датой раньше даты регистрации!'"),
				ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		Иначе
			
			Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
			Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();	
			
			Движение.Период 				= Дата;
			Движение.ОбъектРемонта 			= ОбработанноеПредписание.ОбъектРемонта;
			Движение.ID 					= ОбработанноеПредписание.ID;
			Движение.Обработано 			= Истина;
			Движение.Описание 				= ОбработанноеПредписание.Описание;
			Движение.ПлановаяДатаРемонта 	= ОбработанноеПредписание.ПлановаяДатаРемонта;
			Движение.Организация 			= ОбработанноеПредписание.Организация;
			Движение.Подразделение 			= ОбработанноеПредписание.Подразделение;
			
		КонецЕсли;
	КонецЦикла;
	
	Движения.торо_СтатусыДокументовВыявленныхДефектов.Записывать = Истина;
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Движения, Перечисления.торо_СтатусыДокументов.Зарегистрирован);
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовОснований(Ссылка);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Для Каждого Дефект Из СписокДефектов Цикл
		Если Не ЗначениеЗаполнено(Дефект.ID) Тогда
			Дефект.ID = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	торо_РаботаСоСтатусамиДокументовСервер.ОчиститьСогласованиеПриКопировании(ЭтотОбъект);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВыявленныеДефекты;
		торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)

	Если Не Отказ Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти
	
#Область СлужебныеПроцедурыИФункции
Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = СписокДефектов.Выгрузить(Новый Структура("ЗакрываетПредписание",Истина),"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

#КонецОбласти
	
#КонецЕсли