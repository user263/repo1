////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем КритерийВыбораПодрядчиковУдаляется;
&НаКлиенте
Перем КандидатУдаляется;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТЗКандидаты = Объект.ДанныеПоКандидатам.Выгрузить().Скопировать();
	ТЗКандидаты.Свернуть("Кандидат");
	
	Кандидаты.Загрузить(ТЗКандидаты);
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаДиаграммаВыбора Тогда
	
		ПеречитатьОценки();
		ДанныеПриСменеСтраницы(Элементы.Данные, Элементы.Данные.ТекущаяСтраница);
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Данные.ТекущаяСтраница = Элементы.СтрДанныеПоКандидатам Тогда
		
		ПостроитьДиаграммуДанныеПоКандидатам();
		
	ИначеЕсли Элементы.Данные.ТекущаяСтраница = Элементы.СтрФакт Тогда 
		
		ПостроитьДиаграммуФактДанныеПоКандидатам();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидОценкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.ВидОценки.ТекущаяСтраница = Элементы.Общая Тогда
		
		ПостроитьОбщуюДиаграмму();
		
	ИначеЕсли Элементы.ВидОценки.ТекущаяСтраница = Элементы.ВРазрезеКритериев Тогда 
		
		ДанныеПриСменеСтраницы(Элементы.Данные, Элементы.Данные.ТекущаяСтраница)
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтныхРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораГрафиков();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтныхРаботОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ПланРемонтныхРаботОчисткаЗавершение", ЭтотОбъект), НСтр("ru = 'Табличная часть ""Ремонты"" будет очищена. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации
&НаКлиенте
Процедура ОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			
			НайдСтроки = Объект.Операции.НайтиСтроки(Новый Структура("ID", ЭлементМассива.ID));
			
			Если Не НайдСтроки.Количество() > 0 Тогда
			
				НС = Объект.Операции.Добавить();
				
				ЗаполнитьЗначенияСвойств(НС, ЭлементМассива);
				НС.ID = ЭлементМассива.ID;
			
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриИзменении(Элемент)
	СуммаРемонтов = Объект.Операции.Итог("СуммаРемонта");
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СуммаРемонтов = Объект.Операции.Итог("СуммаРемонта");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКандидаты
&НаКлиенте
Процедура КандидатыПередУдалением(Элемент, Отказ)
	
	Если Не КандидатУдаляется Тогда
		
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("КандидатыПередУдалениемЗавершение",ЭтотОбъект),
						НСтр("ru = 'Данные в связанных табличных частях будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КандидатыПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		КандидатУдаляется = Истина;
		
		ТекущиеДанные = Элементы.Кандидаты.ТекущиеДанные;
		
		НайдСтроки = Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура ("Кандидат", ТекущиеДанные.Кандидат));
		
		Для каждого Строка Из НайдСтроки Цикл
		
			Объект.ДанныеПоКандидатам.Удалить(Строка.Номерстроки - 1);
		
		КонецЦикла; 
		
		Кандидаты.Удалить(Элементы.Кандидаты.ТекущаяСтрока);
		
	КонецЕсли;
	
	КандидатУдаляется = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КандидатыПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Кандидаты.ТекущиеДанные <> Неопределено Тогда
		
		ТекущийКандидат = Элементы.Кандидаты.ТекущиеДанные.Кандидат;
		
		Если ТекущийКандидат <> Неопределено Тогда
			
			Элементы.ДанныеПоКандидатам.ОтборСтрок = Новый ФиксированнаяСтруктура("Кандидат", ТекущийКандидат);
					
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеПоКандидатам
&НаКлиенте
Процедура ДанныеПоКандидатамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.Кандидаты.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Кандидат не выбран.'");
		Сообщение.Сообщить();
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоКандидатамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанныеПоКандидатам = Элементы.ДанныеПоКандидатам.ТекущиеДанные;
	
	Если Не ОтменаРедактирования И НоваяСтрока Тогда
		
		Если Элементы.Кандидаты.ТекущиеДанные <> Неопределено
			И  ТекущиеДанныеПоКандидатам <> Неопределено Тогда
			
			ТекущиеДанныеПоКандидатам.Кандидат = Элементы.Кандидаты.ТекущиеДанные.Кандидат;	
			
		КонецЕсли;
		
		Если Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура("Критерий, Кандидат", ТекущиеДанныеПоКандидатам.Критерий, ТекущиеДанныеПоКандидатам.Кандидат)).Количество() > 1 Тогда 
			
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("ru = 'Выбранный критерий уже есть в списке.'");
			Сообщение.Сообщить();
			
			Объект.ДанныеПоКандидатам.Удалить(ТекущиеДанныеПоКандидатам.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКритерииВыбораПодрядчиков

&НаКлиенте
Процедура КритерииВыбораПодрядчиковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.КритерииВыбораПодрядчиков.ТекущиеДанные.Коэффициент = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КритерииВыбораПодрядчиковПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ ОтменаРедактирования Тогда
		Если Элемент.ТекущиеДанные.Критерий <> Неопределено Тогда
			Если Объект.КритерииВыбораПодрядчиков.НайтиСтроки(Новый Структура("Критерий",Элемент.ТекущиеДанные.Критерий )).Количество() > 1 Тогда
				
				Отказ = Истина;	
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранный критерий уже есть в списке.'"));
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КритерииВыбораПодрядчиковКритерийПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КритерииВыбораПодрядчиков.ТекущиеДанные;
	Если ТекущиеДанные.Критерий <> Неопределено Тогда
		
		ТипЗначенияКритерия =  ПолучитьТипЗначенияКритерия(ТекущиеДанные.Критерий);
		
		Попытка
			ТекущиеДанные.Показатель = ТипЗначенияКритерия.ПривестиЗначение(ТекущиеДанные.Показатель);
		Исключение
			ТекущиеДанные.Показатель = Неопределено;
		КонецПопытки;
	КонецЕсли
	
	
КонецПроцедуры

&НаКлиенте
Процедура КритерииВыбораПодрядчиковПередУдалением(Элемент, Отказ)
	
	Если Не КритерийВыбораПодрядчиковУдаляется Тогда
		
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("КритерииВыбораПодрядчиковПередУдалениемЗавершение",ЭтотОбъект),
						НСтр("ru = 'Данные в связанных табличных частях будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КритерииВыбораПодрядчиковПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
		
		КритерийВыбораПодрядчиковУдаляется = Истина;
		
		ТекущиеДанные = Элементы.КритерииВыбораПодрядчиков.ТекущиеДанные;
		
		НайдСтроки = Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура ("Критерий", ТекущиеДанные.Критерий));
		
		Для каждого Строка Из НайдСтроки Цикл
		
			Объект.ДанныеПоКандидатам.Удалить(Строка.Номерстроки - 1);
		
		КонецЦикла; 
		
		Объект.КритерииВыбораПодрядчиков.Удалить(Элементы.КритерииВыбораПодрядчиков.ТекущаяСтрока);
		
	КонецЕсли;
	
	КритерийВыбораПодрядчиковУдаляется = Ложь;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыКритерииВыбораПодрядчиков1
&НаКлиенте
Процедура КритерииВыбораПодрядчиков1ПриАктивизацииСтроки(Элемент)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ДанныеПриСменеСтраницы(Элементы.Данные, Элементы.Данные.ТекущаяСтраница);
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодборРемонтныхРабот(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПланРемонтныхРабот) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнено поле ""План ремонтных работ""'");
		Сообщение.Сообщить();
		
	Иначе
		
		ОткрытьФорму("Обработка.торо_ВыборРемонтаИзПланГрафика.Форма",Новый Структура("СсылкаНаППР", Объект.ПланРемонтныхРабот), Элементы.Операции,, ВариантОткрытияОкна.ОтдельноеОкно);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеПоКандидату(Команда)
	
	
	
	Если Элементы.Кандидаты.ТекущиеДанные <> Неопределено Тогда
		
		ТекущийКандидат = Элементы.Кандидаты.ТекущиеДанные.Кандидат;
		
		Для каждого Строка Из Объект.КритерииВыбораПодрядчиков Цикл
			
			Отбор = Новый Структура("Кандидат, Критерий",ТекущийКандидат, Строка.Критерий);
			
			НайдСтр = Объект.ДанныеПоКандидатам.НайтиСтроки(Отбор);
			
			Если НайдСтр.Количество() = 0 Тогда
				
				НС = Объект.ДанныеПоКандидатам.Добавить();
				
				НС.Кандидат = ТекущийКандидат;
				
				НС.Критерий = Строка.Критерий;
				
				Если НС.Критерий <> Неопределено Тогда
					
					Попытка
						НС.Показатель = ПолучитьТипЗначенияКритерия(НС.Критерий).ПривестиЗначение(НС.Показатель);
					Исключение
						НС.Показатель = Неопределено;
					КонецПопытки;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;	
		
		КандидатыПриАктивизацииСтроки(Элементы.Кандидаты);
		
	Иначе 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Кандидат не выбран.'");
		Сообщение.Сообщить();
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлану(Команда)
	
	ВыбранноеЗначение = ПолучитьПланНаСервере(Объект.ПланРемонтныхРабот);
	
	ОперацииОбработкаВыбора(Элементы.Операции, ВыбранноеЗначение, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьПараметрыВыбораГрафиков()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ПланГрафикРемонтаПланРемонтов.Ссылка
		|ИЗ
		|	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|ГДЕ
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен = ЛОЖЬ
		|	И торо_ПланГрафикРемонтаПланРемонтов.Ссылка.Проведен = ИСТИНА
		|	И торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения = ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный)
		|	И торо_ПланГрафикРемонтаПланРемонтов.Исполнитель = НЕОПРЕДЕЛЕНО";

	РезультатЗапроса = Запрос.Выполнить();

	ТЗРезультат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	НовыйМассив = Новый Массив();
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ТЗРезультат);
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	
	Элементы.ПланРемонтныхРабот.ПараметрыВыбора  = НовыеПараметры;


КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПланНаСервере(СсылкаНаППР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот КАК ОбъектРемонта,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта,
		|	торо_ПланГрафикРемонтаПланРемонтов.ID
		|ИЗ
		|	Документ.торо_ПланГрафикРемонта.ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|ГДЕ
		|	торо_ПланГрафикРемонтаПланРемонтов.Ссылка = &Ссылка
		|	И торо_ПланГрафикРемонтаПланРемонтов.Замещен = ЛОЖЬ";

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаППР);

	РезультатЗапроса = Запрос.Выполнить();

	ТЗРезультат = РезультатЗапроса.Выгрузить();

	Массив = Новый Массив;
	
	Для каждого Строка Из ТЗРезультат Цикл
		
		Структура = Новый Структура();
		
		Для каждого Колонка Из ТЗРезультат.Колонки Цикл
		
			 Структура.Вставить(колонка.Имя, Строка[Колонка.Имя]);
		
		КонецЦикла; 
		
		Массив.Добавить(Структура);
	КонецЦикла; 
	
	Возврат Массив;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТипЗначенияКритерия(Свойство)

	Возврат Свойство.ТипЗначения;	

КонецФункции

&НаСервере
Процедура ПеречитатьОценки()

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика.КритерийВыбораПодрядчика,
	               |	торо_ОценкиПодрядчиковПоКритериям.Оценка КАК Критерий,
	               |	торо_ОценкиПодрядчиковПоКритериям.Контрагент,
	               |	торо_ОценкиПодрядчиковПоКритериям.ВидОценки КАК ВидОценки,
	               |	СРЕДНЕЕ(торо_ОценкиПодрядчиковПоКритериям.Значение) КАК Значение
	               |ИЗ
	               |	РегистрСведений.торо_ОценкиПодрядчиковПоКритериям КАК торо_ОценкиПодрядчиковПоКритериям
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_КритерииОценки.БазовыеКритерииВыбораПодрядчика КАК торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика
	               |		ПО торо_ОценкиПодрядчиковПоКритериям.Оценка = торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика.Ссылка
	               |ГДЕ
	               |	торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика.КритерийВыбораПодрядчика В(&СписокКритериев)
	               |	И торо_ОценкиПодрядчиковПоКритериям.Контрагент В(&СписокПодрядчиков)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ОценкиПодрядчиковПоКритериям.Оценка,
	               |	торо_ОценкиПодрядчиковПоКритериям.ВидОценки,
	               |	торо_ОценкиПодрядчиковПоКритериям.Контрагент,
	               |	торо_КритерииОценкиБазовыеКритерииВыбораПодрядчика.КритерийВыбораПодрядчика";
				   
				   
	СписокКандидатов = Новый СписокЗначений;
	СписокКритериев = Новый СписокЗначений;
	
	спКандидаты = Объект.ДанныеПоКандидатам.Выгрузить(,"Кандидат");
	спКандидаты.Свернуть("Кандидат",);
	
	СписокКандидатов.ЗагрузитьЗначения(спКандидаты.ВыгрузитьКолонку("Кандидат"));
	
	Критерии = Объект.ДанныеПоКандидатам.Выгрузить(,"Критерий");
	Критерии.Свернуть("Критерий",);
	
	СписокКритериев.ЗагрузитьЗначения(Критерии.ВыгрузитьКолонку("Критерий"));
	
	
	Запрос.УстановитьПараметр("СписокПодрядчиков", СписокКандидатов);	
	Запрос.УстановитьПараметр("Дата"            , ?(Объект.ДатаПроведения <> Неопределено, Объект.ДатаПроведения, ТекущаяДата()));
	Запрос.УстановитьПараметр("СписокКритериев" , СписокКритериев);
	
	ОценкиФакт.Очистить();
	
	ВыборкаПоГруппировкам = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаПоГруппировкам.Следующий() Цикл
	
		НС = ОценкиФакт.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ВыборкаПоГруппировкам);
	
	КонецЦикла;
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОценкиПоПодрядчикам.Оценка КАК Критерий,
	               |	СУММА(торо_ОценкиПоПодрядчикам.Значение) КАК Значение,
	               |	торо_ОценкиПоПодрядчикам.Контрагент
	               |ИЗ
	               |	РегистрСведений.торо_ОценкиПоПодрядчикам КАК торо_ОценкиПоПодрядчикам
	               |ГДЕ
	               |	торо_ОценкиПоПодрядчикам.Контрагент В(&СписокПодрядчиков)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ОценкиПоПодрядчикам.Оценка,
	               |	торо_ОценкиПоПодрядчикам.Контрагент";
				   
	Запрос.УстановитьПараметр("СписокПодрядчиков",СписокКандидатов);
	
	ОценкиОбщие.Очистить();

	ВыборкаПоГруппировкам = Запрос.Выполнить().Выбрать();

	Пока ВыборкаПоГруппировкам.Следующий() Цикл
	
		НС = ОценкиОбщие.Добавить();
		ЗаполнитьЗначенияСвойств(НС, ВыборкаПоГруппировкам);
	
	КонецЦикла;
	

КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуДанныеПоКандидатам()

	ДиаграммаДанныеПоКандидатам.Очистить();
	
	ТекущаяСтрокаКритерийВыбораПодрядчика = Элементы.КритерииВыбораПодрядчиков1.ТекущиеДанные;
	
	Если ТекущаяСтрокаКритерийВыбораПодрядчика = Неопределено Тогда
		Если Объект.КритерииВыбораПодрядчиков.Количество() > 0 Тогда
			ТекущийКритерийВыбораПодрядчика = Объект.КритерииВыбораПодрядчиков[0].Критерий;			
		Иначе
			Возврат;
		КонецЕсли;
	Иначе
		ТекущийКритерийВыбораПодрядчика = Элементы.КритерииВыбораПодрядчиков1.ТекущиеДанные.Критерий;
    КонецЕсли;
	
	ПредложенныеОценки       = Объект.ДанныеПоКандидатам.НайтиСтроки(Новый Структура("Критерий",ТекущийКритерийВыбораПодрядчика));
	
	Массив = Объект.КритерииВыбораПодрядчиков.НайтиСтроки(Новый Структура("Критерий",ТекущийКритерийВыбораПодрядчика));
	
	Если Массив.Количество() > 0 Тогда
	
		ПредпочтительноеЗначение = Массив[0].Показатель;
		
	Иначе
		
		ПредпочтительноеЗначение = 0;
	
	КонецЕсли; 
	
	
	Серия = ДиаграммаДанныеПоКандидатам.Серии.Добавить("Предложенное");
	Серия.Текст = "Предложенное";
	Серия.ПриоритетЦвета = Ложь;
	
	СерияПредпочтение = ДиаграммаДанныеПоКандидатам.Серии.Добавить("Предпочтительное");
	СерияПредпочтение.Текст     = "Предпочтительное";
	СерияПредпочтение.Индикатор = Истина;
	СерияПредпочтение.Маркер    = ТипМаркераДиаграммы.Нет;
	СерияПредпочтение.Цвет      = WebЦвета.Зеленый;

	
	Если ПредложенныеОценки.Количество() > 0 Тогда
		
		УпорядоченныеОценки = Новый СписокЗначений;
		УпорядоченныеОценки.ЗагрузитьЗначения(ПредложенныеОценки);
		УпорядоченныеОценки.СортироватьПоЗначению(НаправлениеСортировки.Возр);
		
		Если  ТипЗнч(ПредпочтительноеЗначение) = Тип("Дата") Тогда
			МинЗначение     = ?(ЗначениеЗаполнено(УпорядоченныеОценки[0].Значение.Показатель),УпорядоченныеОценки[0].Значение.Показатель,Дата(1,1,1,0,0,0));
			МаксЗначение    = ?(ЗначениеЗаполнено(УпорядоченныеОценки[УпорядоченныеОценки.Количество() - 1].Значение.Показатель),УпорядоченныеОценки[УпорядоченныеОценки.Количество() - 1].Значение.Показатель,МинЗначение+1);
			РазницаЗначений = МаксЗначение - МинЗначение;
			
		Иначе
			МинЗначение     = ?(УпорядоченныеОценки[0].Значение.Показатель,УпорядоченныеОценки[0].Значение.Показатель,0);
			МаксЗначение    = ?(ЗначениеЗаполнено(УпорядоченныеОценки[УпорядоченныеОценки.Количество() - 1].Значение.Показатель),УпорядоченныеОценки[УпорядоченныеОценки.Количество() - 1].Значение.Показатель,1);
			РазницаЗначений = МаксЗначение - МинЗначение;
		КонецЕсли;
		
		Если РазницаЗначений = 0 Тогда 
			Если ТипЗнч(МаксЗначение) = Тип("Дата") Тогда
				РазницаЗначений = МаксЗначение - Дата(1,1,1,0,0,0);
			Иначе
				РазницаЗначений = ?(МаксЗначение<>0,МаксЗначение,1);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ПредпочтительноеЗначение) = Тип("Дата") Тогда
			МинЗначение =  Дата(1,1,1,0,0,0);
		Иначе
			МинЗначение = 0;
		КонецЕсли;
		
		РазницаЗначений = 1;
		
	КонецЕсли;
	
	Если ТипЗнч(ПредпочтительноеЗначение) <> Тип("Число") Тогда
		
		ПредпочтительноеЗначение = (ПредпочтительноеЗначение - МинЗначение) * 9 / РазницаЗначений + 1;
	КонецЕсли;
	
	
	Точка = ДиаграммаДанныеПоКандидатам.УстановитьТочку("Начало");
	Точка.Текст = " ";
	Точка.Цвет = WebЦвета.Белый;
	Точка.ПриоритетЦвета = Истина;
	ДиаграммаДанныеПоКандидатам.УстановитьЗначение(Точка, СерияПредпочтение, ПредпочтительноеЗначение);
	
	
	
	Для Каждого Оценка Из ПредложенныеОценки Цикл
		
		Если ТипЗнч(Оценка.Показатель) = Тип("Число") Тогда
			
			ПоказательДиаграмма = Оценка.Показатель;
		Иначе
			
			
			ПоказательДиаграмма = (?(ЗначениеЗаполнено(Оценка.Показатель),Оценка.Показатель,?(ТипЗнч(Оценка.Показатель) = Тип("Дата"),Дата(1,1,1,0,0,0),0)) - МинЗначение) * 9 / РазницаЗначений + 1;
			
		КонецЕсли;
		
		Точка = ДиаграммаДанныеПоКандидатам.УстановитьТочку(Оценка.Кандидат);
		Точка.Расшифровка = Оценка.Кандидат;
		
		ДиаграммаДанныеПоКандидатам.УстановитьЗначение(Точка, Серия, ПоказательДиаграмма,,Оценка.Показатель);
		ДиаграммаДанныеПоКандидатам.УстановитьЗначение(Точка, СерияПредпочтение, ПредпочтительноеЗначение);
		
	КонецЦикла;	
		
	Точка = ДиаграммаДанныеПоКандидатам.УстановитьТочку("Конец");
	Точка.Текст = " ";
	Точка.Цвет = WebЦвета.Белый;
	Точка.ПриоритетЦвета = Истина;
	ДиаграммаДанныеПоКандидатам.УстановитьЗначение(Точка, СерияПредпочтение, ПредпочтительноеЗначение);
	


КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуФактДанныеПоКандидатам()

	ФактДанныеПоКандидатам.Очистить(); 
	
	ТекущиеДанныеКритериев = Элементы.КритерииВыбораПодрядчиков1.ТекущиеДанные;
	
	Если ТекущиеДанныеКритериев <> Неопределено Тогда
	
		ТекущийКритерий = ТекущиеДанныеКритериев.Критерий;
	
	КонецЕсли;
	
	МассивОценок = ОценкиФакт.НайтиСтроки(Новый Структура ("КритерийВыбораПодрядчика", ТекущийКритерий));
	
	СписокКандидатов = Новый СписокЗначений;
	
	Для каждого Строка Из МассивОценок Цикл
	
		Кандидат = Строка.Контрагент;
		
		Если СписокКандидатов.НайтиПоЗначению(Кандидат) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Серия = ФактДанныеПоКандидатам.Серии.Добавить(Строка.Критерий);
		Серия.Текст = "" + Строка.Критерий + " ("+Строка.ВидОценки +")";

		
		ОценкиПоКонтрагенту = ОценкиФакт.НайтиСтроки(Новый Структура ("КритерийВыбораПодрядчика, Контрагент, Критерий", ТекущийКритерий, Кандидат, Строка.Критерий));
		
		Для каждого ПодСтрока Из ОценкиПоКонтрагенту Цикл
		
			Точка = ФактДанныеПоКандидатам.УстановитьТочку(ПодСтрока.Контрагент);
			Точка.Расшифровка = ПодСтрока.Контрагент;
			
			ФактДанныеПоКандидатам.УстановитьЗначение(Точка, Серия, ПодСтрока.Значение, ПодСтрока.Контрагент, ПодСтрока.Контрагент);

		
		КонецЦикла; 
		
	КонецЦикла; 	
	

КонецПроцедуры

&НаКлиенте
Процедура ПостроитьОбщуюДиаграмму()

	ДиаграммаОбщая.Очистить();
	
	СписокКандидатов = Новый СписокЗначений;
	
	Для каждого Строка Из ОценкиОбщие Цикл
		
		Кандидат = Строка.Контрагент;
		
		Если СписокКандидатов.НайтиПоЗначению(Строка.Контрагент) <> Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли; ;
		
		
		
		Серия = ДиаграммаОбщая.Серии.Добавить(Строка.Критерий);
		Серия.Текст = Строка.Критерий;
		
		ОценкиПодрядчиков = ОценкиОбщие.НайтиСтроки(Новый Структура ("Контрагент", Кандидат));
		
		Для каждого ПодСтрока Из ОценкиПодрядчиков Цикл
			
			Точка = ДиаграммаОбщая.УстановитьТочку(Кандидат);
			Точка.Расшифровка = Кандидат;
			
			ДиаграммаОбщая.УстановитьЗначение(Точка, Серия, ПодСтрока.Значение,ПодСтрока.Контрагент, ПодСтрока.Контрагент);
			
		КонецЦикла;
	КонецЦикла;	
	
КонецПроцедуры
 
&НаКлиенте
Процедура ПланРемонтныхРаботОчисткаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да  Тогда
        
        Объект.Операции.Очистить();
        Объект.ПланРемонтныхРабот = ПредопределенноеЗначение("Документ.торо_ПланГрафикРемонта.ПустаяСсылка");
        
    КонецЕсли;

КонецПроцедуры

КритерийВыбораПодрядчиковУдаляется = Ложь;
КандидатУдаляется = Ложь; 
#КонецОбласти


