#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт;  // Структура, хранящая данные для работы с уведомлениями.
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;

	СуммаДокумента = НаправленияОбъектовРемонтныхРабот.Итог("Лимит");

КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если НаправленияОбъектовРемонтныхРабот.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе не заполнена табличная часть лимитов по направлениям. Проведение невозможно!'"));
		Отказ = истина;
		Возврат;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = Строка(Ссылка);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Проверяет таблицу лимитов на попытку ввода повторных данных
//
Процедура ПроверитьТаблицуЛимитов(ТаблицаЛимитов, Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Организация,
	|	Таб.Направление
	|ПОМЕСТИТЬ ТаблицаЛимитов
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ГодовыеЛимитыРемонтныхРабот.Регистратор,
	|	торо_ГодовыеЛимитыРемонтныхРабот.Организация,
	|	торо_ГодовыеЛимитыРемонтныхРабот.Направление
	|ИЗ
	|	ТаблицаЛимитов КАК ТаблицаЛимитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ГодовыеЛимитыРемонтныхРабот КАК торо_ГодовыеЛимитыРемонтныхРабот
	|		ПО ТаблицаЛимитов.Организация = торо_ГодовыеЛимитыРемонтныхРабот.Организация
	|			И ТаблицаЛимитов.Направление = торо_ГодовыеЛимитыРемонтныхРабот.Направление
	|ГДЕ
	|	торо_ГодовыеЛимитыРемонтныхРабот.Период = &Период";
	Запрос.УстановитьПараметр("Таб",ТаблицаЛимитов);
	Запрос.УстановитьПараметр("Период",НачалоГода(ГодУтверждения));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Отказ = НЕ РезультатЗапроса.Пустой();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЕстьОрганизация 	= ЗначениеЗаполнено(Выборка.Организация);
		ЕстьНаправление 	= ЗначениеЗаполнено(Выборка.Направление);
		Если ЕстьОрганизация Тогда
			Если ЕстьНаправление Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для организации %1 по направлению %2 уже заданы лимиты плановых работ (документ: %3)'"),Выборка.Организация,Выборка.Направление,Выборка.Регистратор);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для организации %1 уже заданы лимиты плановых работ (документ: %2)'"),Выборка.Организация,Выборка.Регистратор);	
			КонецЕсли;
		Иначе
			Если ЕстьНаправление Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По направлению %1 уже заданы лимиты плановых работ (документ: %2)'"),Выборка.Направление,Выборка.Регистратор);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = Уже заданы лимиты плановых работ (документ: %1)'"),Выборка.Регистратор);	
			КонецЕсли;
		КонецЕсли;
				
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,СтатусСообщения.Важное);
				
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ГодовыеЛимитыРемонтныхРабот".
//	
Процедура ДвиженияПоРегистру_торо_ГодовыеЛимитыРемонтныхРабот(РежимПроведения, ТаблицаЛимитов, Отказ, Заголовок)
	
	УстановитьУправляемыеБлокировки();
	ПроверитьТаблицуЛимитов(ТаблицаЛимитов, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	НаборДвижений = Движения.торо_ГодовыеЛимитыРемонтныхРабот;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
		
	// Заполним таблицу движений.
	торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЛимитов, ТаблицаДвижений);
	
	Если НЕ Константы.ВалютаУправленческогоУчета.Получить() = Валюта Тогда
		
		Для каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
		
			СтрокаТаблицыДвижений.Лимит = СтрокаТаблицыДвижений.Лимит * Курс / Кратность ;
		
		КонецЦикла; 
		
	КонецЕсли;
	
	ТаблицаДвижений.ЗаполнитьЗначения(НачалоГода(ГодУтверждения), "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
		
	Если Не Отказ Тогда
		
		Движения.торо_ГодовыеЛимитыРемонтныхРабот.Загрузить(ТаблицаДвижений);
		Движения.торо_ГодовыеЛимитыРемонтныхРабот.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// По документу формируем движения по регистрам.
//
// Параметры: 
//  РежимПроведения           - режим проведения документа (оперативный или неоперативный),
//  Отказ                     - флаг отказа в проведении,
//  Заголовок                 - строка, заголовок сообщения об ошибке проведения.
//
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
	// Движение по регистру "торо_ГодовыеЛимитыРемонтныхРабот".
	ТаблицаЛимитов = НаправленияОбъектовРемонтныхРабот.Выгрузить();
	ТаблицаЛимитов.Свернуть("Организация, Направление , СпособВыполнения", "Лимит");
	
	ДвиженияПоРегистру_торо_ГодовыеЛимитыРемонтныхРабот(РежимПроведения, ТаблицаЛимитов, Отказ, Заголовок);
	
КонецПроцедуры

Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ГодовыеЛимитыРемонтныхРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = НаправленияОбъектовРемонтныхРабот;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация","Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Направление","Направление");
	ЭлементБлокировки.УстановитьЗначение("Период",НачалоГода(ГодУтверждения));
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли