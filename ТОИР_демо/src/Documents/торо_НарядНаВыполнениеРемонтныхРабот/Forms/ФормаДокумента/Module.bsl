////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем РемонтОборудованияУдаляется;

&НаКлиенте
Перем ИДВыбраннойСтроки;

&НаКлиенте
Перем СтруктураДанныхДоРедактирования;


#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		СсылкаНаДок = Параметры.Основание;
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(СсылкаНаДок,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		Если СсылкаНаДок <> Неопределено Тогда
			ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(СсылкаНаДок);
			Неотмененный = торо_ЗаполнениеДокументов.ВернутьIDНеотмененногоРемонта(СсылкаНаДок, СсылкаНаДок[ИмяТЧ]);
			
			Если ИмяТЧ <> Неопределено И Неотмененный <> "" Тогда
				СоответствиеИДДокументам = Новый Соответствие;
				СоответствиеИДДокументам.Вставить(Неотмененный, СсылкаНаДок);   
				торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(СоответствиеИДДокументам, Объект);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("РабочееМесто") Тогда
		Если ТипЗнч(Параметры.РабочееМесто) = Тип("Соответствие") Тогда
			торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(Параметры.РабочееМесто, Объект);
		КонецЕсли;
	КонецЕсли;

	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	УстановитьУсловноеОформление();

	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДеревоРемонтныхРаботНаСервере();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_НарядНаВыполнениеРемонтныхРабот;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;	
	КонецЦикла;

	// ФункциональныеОпции
	ФОУчетСостоянияОборудования = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");	
	ФОИспользоватьГарантии      = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОЗапретитьРемонтГарантийногоОборудованияХозспособом = ПолучитьФункциональнуюОпцию("торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом");
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_НарядНаВыполнениеРемонтныхРабот);
	
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	
	ОбновитьДоступностьДляРедактирования();
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, УстановитьСвойствоЭлементовФормыОтПрав",Истина, Истина));

	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.РемонтыОборудования.Количество() = 0 И Объект.ДокументыОснования.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
	КонецЕсли;
	
	ЭтоПервыйДокументВЦепочке = ЭтоПервыйДокументВЦепочке();
	ЭтоПоследнийДокументВЦепочке = ЭтоПоследнийДокументВЦепочке();
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	Массив = Новый Массив;
	Массив.Добавить("ДокументыОснования");
	торо_СобытияФормКлиент.ЗаполнитьСтруктуруДанныхДоРедактирования(СтруктураДанныхДоРедактирования,Массив);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "РемонтыОборудования");
		
		Если ФОЗапретитьРемонтГарантийногоОборудованияХозспособом Тогда
			
			торо_ГарантийноеОбслуживание.ПроверитьНаличиеКонтрагентов(ТекущийОбъект, "Подрядчики", "Контрагент", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	РемонтыОборудованияОбновитьДокументыИсточники();


КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("СозданДокументЧерезРМТехСпец", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ФОУчетСостоянияОборудования И Объект.Проведен И Не ЗавершениеРаботы Тогда
		
		МассивОбъектов = ПроверитьНаличиеДокументаПростоя();
		
		Если МассивОбъектов.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, Новый Структура("МассивОбъектов", МассивОбъектов)), НСтр("ru = 'Зафиксировать фактический простой объектов?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ДеревоРемонтныхРаботОбработкаВыбора(, ВыбранноеЗначение, );
	
	ЭтоПервыйДокументВЦепочке = ЭтоПервыйДокументВЦепочке();
	ЭтоПоследнийДокументВЦепочке = ЭтоПоследнийДокументВЦепочке();
	РемонтыОборудованияОбновитьДокументыИсточники();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаВыполнениеОгневыхРабот" И Источник = ЭтаФорма Тогда
		Если НЕ (Параметр = Неопределено ИЛИ НЕ Параметр.Количество()) Тогда
			
			Для каждого Элем Из Параметр Цикл
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Объект.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Объект.Ссылка);
				торо_Печать.НапечататьДокумент("Документ.торо_НарядНаВыполнениеРемонтныхРабот", "НарядНаВыполнениеОгневыхРабот", МассивПараметровКоманды,СтруктураПараметровКоманды);
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядДопускДляРаботыВЭлектроустановках" И Источник = ЭтаФорма Тогда
		Если НЕ (Параметр = Неопределено ИЛИ НЕ Параметр.Количество()) Тогда
			
			Для каждого Элем Из Параметр Цикл
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Объект.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Объект.Ссылка);
				торо_Печать.НапечататьДокумент("Документ.торо_НарядНаВыполнениеРемонтныхРабот", "НарядДопускДляРаботыВЭлектроустановках", МассивПараметровКоманды,СтруктураПараметровКоманды);
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаПроизводствоРаботПовышеннойОпасности" И Источник = ЭтаФорма Тогда
		Если НЕ (Параметр = Неопределено ИЛИ НЕ Параметр.Количество()) Тогда
			
			Для каждого Элем Из Параметр Цикл
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Объект.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Объект.Ссылка);
				торо_Печать.НапечататьДокумент("Документ.торо_НарядНаВыполнениеРемонтныхРабот", "НарядНаПроизводствоРаботПовышеннойОпасности", МассивПараметровКоманды,СтруктураПараметровКоманды);
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_НарядНаРаботы_НеОпасные" И Источник = ЭтаФорма Тогда
		Если НЕ (Параметр = Неопределено ИЛИ НЕ Параметр.Количество()) Тогда
			
			Для каждого Элем Из Параметр Цикл
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Объект.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Объект.Ссылка);
				торо_Печать.НапечататьДокумент("Документ.торо_НарядНаВыполнениеРемонтныхРабот", "НарядНаРаботы_НеОпасные", МассивПараметровКоманды,СтруктураПараметровКоманды);
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "РабочееМестоТехСпец" Тогда
		Объект.Организация = Параметр.Организация;
		Объект.Подразделение = Параметр.Подразделение;
		Для каждого Элем Из Параметр.МассивСтруктур Цикл
			ДеревоРемонтныхРаботОбработкаВыбора(, Элем, );
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
	
	УправлениеВидимостью(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СогласующиеРегистр.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение",ЭтотОбъект,Новый Структура("Элемент", Элемент)),
						НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	
	ТекРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
	Иначе
		РемонтыОборудования_ID = "";
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID", РемонтыОборудования_ID, СтрокаРодитель.ID, СтрокаРодитель.РемонтыОборудования_ID, СтрокаРодитель.Родитель_ID);
	СтруктураПараметры = Новый Структура;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивСтруктурВозврата = ДеревоРемонтныхРаботОбработкаВыбораНаСервереДляМассива(ВыбранноеЗначение, ТекущиеДанные, СтруктураПараметры);
	Иначе
		СтруктураВозврата = ДеревоРемонтныхРаботОбработкаВыбораНаСервере(ВыбранноеЗначение, ТекущиеДанные, СтруктураПараметры);
		МассивСтруктурВозврата = Новый Массив;
		МассивСтруктурВозврата.Добавить(СтруктураВозврата);
	КонецЕсли;
		
	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;	
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Массивстрок = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ВыбранноеЗначение.СтрокаРемонтовОборудования.ID));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.РемонтыОборудования.ТекущаяСтрока = Идентиф;
			Если ФОИспользоватьОстановочные Тогда
				ОбновитьОстановочные(ВыбранноеЗначение.СтрокаРемонтовОборудования.ID);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;

	Если Элементы.РемонтыОборудования.ТекущаяСтрока = Неопределено Тогда
		Если Объект.РемонтыОборудования.Количество() > 0 Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Объект.РемонтыОборудования[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования); 
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот = Новый Структура();
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("Исполнители");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("Подрядчики");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("РемонтныеРаботы");
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот Цикл
			
			Объект[КлючИЗначение.Ключ].Очистить();
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
		Отказ = Истина;
	Иначе
		
		СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
		ТекСтрокаДРР.ID, ТекСтрокаДРР.РемонтыОборудования_ID, ТекСтрокаДРР.Родитель_ID, ТекСтрокаДРР.РемонтнаяРабота);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи);
	КонецЕсли;
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Для каждого Строка Из ЭлементыДереваРемРабот Цикл
		Элементы.ДеревоРемонтныхРабот.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		Если ТекДанные.РемонтнаяРабота = "Ремонтные работы" Тогда
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборПоИсполнителям();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество = 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		
			КоличествоБуфер = ?(СтрТЧ.Количество = 0, 1, СтрТЧ.Количество);
			Коэффициент = ТекСтрока.Количество / КоличествоБуфер;
			СтрТЧ.Количество = ТекСтрока.Количество;
			ПересчитатьКоличествоВПодчиненныхСтроках(ТекСтрока, Коэффициент);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования
&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ЗаполнитьДеревоРемонтныхРаботНаСервере(ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		УстановитьДоступностьДляРедактированияПоТекРемонту(ТекущиеДанные.БлокироватьДляИзменения);
	Иначе
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
	КонецЕсли;
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Для каждого Строка Из ЭлементыДереваРемРабот Цикл
		Элементы.ДеревоРемонтныхРабот.Развернуть(Строка.ПолучитьИдентификатор(),Истина);
	КонецЦикла; 
	
	Если ЗначениеЗаполнено(ИДВыбраннойСтроки) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ДеревоРемонтныхРабот.ПолучитьЭлементы(), ИДВыбраннойСтроки, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Если Не РемонтОборудованияУдаляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("РемонтыОборудованияПередУдалениемЗавершение", ЭтотОбъект,Новый Структура("Элемент",Элемент)),
						Вопрос,РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если ФОИспользоватьГарантии Тогда
			
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, ТекДанные.ДатаНачала, ТекДанные.ДатаОкончания);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "РемонтыОборудованияВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.Форма.ФормаДокумента", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодрядчики
&НаКлиенте
Процедура ПодрядчикиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда 
			Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
			Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекСтрокаИсполнитель = Элементы.Подрядчики.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Контрагент",
									  ТекСтрокаИсполнитель.ID,
									  ТекСтрокаИсполнитель.РемонтыОборудования_ID, 
									  ТекСтрокаИсполнитель.Контрагент);
									  
	Если Объект.Подрядчики.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя указать одного исполнителя дважды для одного ремонта или операции!'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для ремонтов!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнители
&НаКлиенте
Процедура ИсполнителиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда 
			Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
			Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьИсполнителей(ВыбранноеЗначение);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования
&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДоступныеТипы = ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере();	
	Если ДоступныеТипы=Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДокументыОснованияДокументОснование.ОграничениеТипа =ДоступныеТипы;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			Сообщение.Сообщить();
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда 
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				Сообщение.Сообщить();
			Иначе
				СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
				Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
					Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
					СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)   	
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтветственные

&НаКлиенте
Процедура ОтветственныеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.Ответственные.ТекущиеДанные;
	
	Если Не (ОтменаРедактирования Или ТекДанные = Неопределено) тогда
	
		стрПоиска = Новый Структура("ОтветственноеЛицо");
		стрПоиска.ОтветственноеЛицо = ТекДанные.ОтветственноеЛицо;
		
		НайС = Объект.Ответственные.НайтиСтроки(стрПоиска);
		
		Если НайС.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Эта роль уже добавлена. Выберите другую.'"));
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора",, Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", Новый Структура("ОтборПоСтатусам, МножественныйВыбор", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"), Истина), Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот",
		Новый Структура("Владелец, Организация, Подразделение", Объект.Ссылка, Объект.Организация, Объект.Подразделение), 
		ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();

	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПредписаний(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписаний",
	Новый Структура("Владелец", Объект.Ссылка), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьСтатус(Команда)

	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляДокумента(Команда)
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.Исполнители);
	стрПараметров.Вставить("ВидПодбора", "ПоДокументу");
	стрПараметров.Вставить("ID", Неопределено);
	стрПараметров.Вставить("РемонтыОборудования_ID", Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.Исполнители,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляОперации(Команда)
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов = Неопределено тогда
		ID_Отбора = Неопределено;
	Иначе
		МасИД = Новый Массив;
		ID_Отбора = Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасИД, ТекСтрокаДереваРемонтов.ПолучитьЭлементы());
		ID_Отбора.Добавить(ТекСтрокаДереваРемонтов.ID);
		
		Для каждого текСтрока из МасИД цикл
			ID_Отбора.Добавить(текСтрока.ID);
		КонецЦикла;
	КонецЕсли;
	
	ID_ОтбораРемонтов = ?(ТекСтрокаРемонтовОборудования = Неопределено, Неопределено, ТекСтрокаРемонтовОборудования.ID);
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.Исполнители);
	стрПараметров.Вставить("ВидПодбора", "ПоОперации");
	стрПараметров.Вставить("ID", ID_Отбора);
	стрПараметров.Вставить("РемонтыОборудования_ID", ID_ОтбораРемонтов);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.Исполнители,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.Исполнители Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.Исполнители.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеРемонты(Команда)
	
	Если Объект.Исполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.Исполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.Исполнители.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.Исполнители.Очистить();
		КонецЕсли;
		ЗаполнитьИсполнителейПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "Исполнители");
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаленияПодрядчики = Новый Массив;
	Для каждого Строка из Объект.Подрядчики Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияПодрядчики.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокДляУдаленияИсполнители = Новый Массив;
	Для каждого Строка из Объект.Исполнители Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияИсполнители.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;

	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаленияПодрядчики = Объект.Подрядчики.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	МассивСтрокДляУдаленияИсполнители = Объект.Исполнители.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.Подрядчики.Количество() > 0 
		ИЛИ Объект.Исполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", Объект.Подрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", Объект.Исполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики Цикл
				Объект.Подрядчики.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.Подрядчики.Очистить();
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители Цикл
				Объект.Исполнители.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.Исполнители.Очистить();
		КонецЕсли;
		
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоОснованиюНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоОснованию(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура УстановитьУсловноеОформление()

	// доступость вида ремонта для редактирования
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияВидРемонтныхРабот.Имя);


	ГруппаЭлементов = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПервыйДокументВЦепочке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	

	//// ИЛИ (	
	ГруппаЭлементовВложенная = ГруппаЭлементов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовВложенная.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ТипДокументаОснования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "торо_ВнешнееОснованиеДляРабот";
	///( И	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПоследнийДокументВЦепочке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	 //) ИЛИ
	 
	ГруппаЭлементовВложенная = ГруппаЭлементов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовВложенная.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ТипДокументаОснования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "торо_ВыявленныеДефекты";
	///( И	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПоследнийДокументВЦепочке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);

	
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	               |	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
	               |ИЗ
	               |	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	               |ГДЕ
	               |	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивIDДляПроверки = Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Объект.Ссылка, МассивIDДляПроверки);
	
	Если Не МассивIDДляБлокировки = Неопределено Тогда
		
		Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
			СтрокаРемонта.БлокироватьДляИзменения = Не МассивIDДляБлокировки.Найти(СтрокаРемонта.ID) = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДляРедактированияПоТекРемонту(БлокироватьДляИзменения)
	
	Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр	= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.Исполнители.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.Подрядчики.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование;
		
	Элементы.ДеревоРемонтныхРаботДобавитьТехКарту.Доступность		= Не БлокироватьДляИзменения И ПравоРедактирование;
	Элементы.ДеревоРемонтныхРаботДобавитьТехОперацию.Доступность	= Не БлокироватьДляИзменения И ПравоРедактирование;
	
КонецПроцедуры

&НаСервере
Функция ДеревоРемонтныхРаботОбработкаВыбораНаСервере(ТехОперация, ТекущиеДанные, СтруктураПараметры)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ТехОперация, ДокОбъект, ДокОбъект.РемонтыОборудования, ДокОбъект.РемонтныеРаботы, ДокОбъект.ДокументыОснования, ТекущиеДанные, СтруктураПараметры, ДокОбъект.Исполнители, ДокОбъект.Подрядчики);
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		ЗначениеВРеквизитФормы(СтруктураВозврата.ДокументОбъект, "Объект");
		ЗначениеВРеквизитФормы(СтруктураВозврата.Дерево, "ДеревоРемонтныхРабот");
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		Возврат Истина;
	ИначеЕсли ТипЗнч(СтруктураВозврата) = Тип("Строка") Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
		
КонецФункции

// Функция добавлена для обработки выбора сразу нескольких тех операций или тех карт.
&НаСервере
Функция ДеревоРемонтныхРаботОбработкаВыбораНаСервереДляМассива(МассивТехОпераций, ТекущиеДанные, СтруктураПараметры)
		
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	МассивВозврата = Новый Массив;
	СтруктураПоследнегоДобавленного = Неопределено;
	Для Каждого ЭлементМассива Из МассивТехОпераций Цикл
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ЭлементМассива, ДокОбъект, ДокОбъект.РемонтыОборудования, ДокОбъект.РемонтныеРаботы, ДокОбъект.ДокументыОснования, ТекущиеДанные, СтруктураПараметры, ДокОбъект.Исполнители, ДокОбъект.Подрядчики);
		Если Не ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			МассивВозврата.Добавить(СтруктураВозврата);
		Иначе
			СтруктураПоследнегоДобавленного = СтруктураВозврата;
		КонецЕсли;
	КонецЦикла;	
	
	Если СтруктураПоследнегоДобавленного <> Неопределено Тогда
		ЗначениеВРеквизитФормы(СтруктураПоследнегоДобавленного.ДокументОбъект, "Объект");
		ЗначениеВРеквизитФормы(СтруктураПоследнегоДобавленного.Дерево, "ДеревоРемонтныхРабот");
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоРемонтныхРаботНаСервере(РемонтыОборудования_ID = Неопределено)
	
	ДеревоСФормы = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	ДеревоСФормы.Строки.Очистить();
	
	КорневаяСтрока = ДеревоСФормы.Строки.Добавить();
	КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";	
	КорневаяСтрока.Картинка = 4;
	
	Если Не РемонтыОборудования_ID = Неопределено Тогда
		ТЗРемонтныеРаботы = Объект.РемонтныеРаботы.Выгрузить(Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID)));
	Иначе
		ТЗРемонтныеРаботы = Неопределено;
	КонецЕсли;
	
	СоздатьВетвьДереваПоТЧ(КорневаяСтрока, ТЗРемонтныеРаботы);
	
	ЗначениеВРеквизитФормы(ДеревоСФормы, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВетвьДереваПоТЧ(СтрокаДерева, ТЧРемонтныеРаботы = Неопределено, ЕстьКартинка = Истина)
	
		Если Объект.РемонтныеРаботы.Количество() > 0 И ЗначениеЗаполнено(Объект.РемонтныеРаботы[0].ID) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Родитель_ID", СтрокаДерева.ID);
		
		Если ТЧРемонтныеРаботы = Неопределено Тогда
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		Иначе
			МассивСтрок = ТЧРемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		Для Каждого Элемент Из МассивСтрок Цикл
			
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Элемент);
			
			Если ЕстьКартинка Тогда  
				НовСтрокаДерева.Картинка = торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(Элемент.РемонтнаяРабота);
			КонецЕсли;
			
			СоздатьВетвьДереваПоТЧ(НовСтрокаДерева, ТЧРемонтныеРаботы, ЕстьКартинка);
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалениемЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Ответ  = РезультатВопроса;
	Строки = Элемент.ВыделенныеСтроки;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для каждого идСтрока из Строки Цикл
			текСтрока = Объект.РемонтыОборудования.НайтиПоИдентификатору(идСтрока);
			
			РемонтОборудованияУдаляется = Истина;
			ОчиститьСвязанныеТабличныеЧасти(, , текСтрока.ID);
			Объект.РемонтыОборудования.Удалить(текСтрока);
			РемонтОборудованияУдаляется = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("Исполнители, Подрядчики");
	
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
		
		Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
			Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
				Объект.РемонтныеРаботы.Очистить();
			КонецЕсли
		КонецЕсли;
		
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		
		Если Объект.РемонтныеРаботы.Количество() = 0 Тогда
			Объект.РемонтныеРаботы.Добавить();
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Объект.РемонтныеРаботы[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
					
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
		Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
			Объект.РемонтныеРаботы.Очистить();
		КонецЕсли
	КонецЕсли;
	
	ЗаполнитьДеревоРемонтныхРаботНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Дерево = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	СтруктураСвязанныхТЧ = Новый Структура();
	СтруктураСвязанныхТЧ.Вставить("Исполнители");
	СтруктураСвязанныхТЧ.Вставить("Подрядчики");
	
	СтруктураСвязанныхТЧ.Вставить("РемонтныеРаботы");

	
	торо_Ремонты.УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева(Дерево, СтруктурыДляПередачи, ДокОбъект, СтруктураСвязанныхТЧ);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МассивОбъектов = ДополнительныеПараметры.МассивОбъектов;
    
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        ФормаСостояния = ПолучитьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта",,ЭтаФорма, Объект.Ссылка);
        ФормаСостояния.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод");
        ФормаСостояния.Объект.ДокументОснование = Объект.Ссылка;
        ФормаСостояния.Объект.Организация = Объект.Организация;
        ФормаСостояния.Объект.Подразделение = Объект.Подразделение;
        
        МассивДляЗаполненияТЧ = ПолучитьСтруктуруОбъектовРемонтаИПростоев(МассивОбъектов);
        Для каждого Элем Из МассивДляЗаполненияТЧ Цикл
            
            НС = ФормаСостояния.Объект.ОбъектыРемонта.Добавить();
            НС.ОбъектРемонта = Элем.ОбъектРемонта;
            НС.ДатаНачала = Элем.ДатаНачала;
            НС.ДатаОкончания = Элем.ДатаОкончания;
            НС.ВидЭксплуатацииНаПериод = Элем.ВидПростоя;
            НС.Иерархия = ПредопределенноеЗначение("Справочник.торо_СтруктурыОР.СтруктураПоМестонахождению");
            
        КонецЦикла; 
        
        ФормаСостояния.Открыть();
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОбъектовРемонтаИПростоев(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабРемонтовОборудования.ОбъектРемонта,
	|	ТабРемонтовОборудования.ВидРемонтныхРабот,
	|	ТабРемонтовОборудования.ДатаНачала,
	|	ТабРемонтовОборудования.ДатаОкончания,
	|	ТабРемонтовОборудования.ID
	|ПОМЕСТИТЬ ТабРемонтовОборудования
	|ИЗ
	|	&ТабРемонтовОборудования КАК ТабРемонтовОборудования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабРемонтовОборудования.ОбъектРемонта,
	|	ТабРемонтовОборудования.ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(ТабРемонтовОборудования.ДатаНачала, СЕКУНДА, торо_ВерсииТехКартСрезПоследних.ТехКарта.ВремяПростоя) КАК ДатаОкончания,
	|	торо_ВерсииТехКартСрезПоследних.ТехКарта.ВидПростоя КАК ВидПростоя
	|ИЗ
	|	ТабРемонтовОборудования КАК ТабРемонтовОборудования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних КАК торо_ВерсииТехКартСрезПоследних
	|			ПО торо_НормативныеРемонтыОборудования.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
	|		ПО ТабРемонтовОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	|			И ТабРемонтовОборудования.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	|ГДЕ
	|	ТабРемонтовОборудования.ОбъектРемонта В(&МассивОбъектов)
	|	И торо_НормативныеРемонтыОборудования.Приоритет = ИСТИНА";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТабРемонтовОборудования", Объект.РемонтыОборудования.Выгрузить());
	Запрос.УстановитьПараметр("ТабРемонтныхРабот", Объект.РемонтныеРаботы.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		МассивВозврата.Добавить(Новый Структура("ОбъектРемонта, ДатаНачала, ДатаОкончания, ВидПростоя", 
		Выборка.ОбъектРемонта, Выборка.ДатаНачала, Выборка.ДатаОкончания, Выборка.ВидПростоя));
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеДокументаПростоя()
	
	ТабРемонтов = Объект.РемонтыОборудования.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабОР.ОбъектРемонта,
	|	ТабОР.ДатаНачала,
	|	ТабОР.ДатаОкончания
	|ПОМЕСТИТЬ ВТОбъектовРемонта
	|ИЗ
	|	&Таб КАК ТабОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбъектовРемонта.ОбъектРемонта,
	|	ЕСТЬNULL(торо_ТекущееСостояниеОР.ВидЭксплуатации, ЛОЖЬ) КАК ВидЭксплуатации
	|ИЗ
	|	ВТОбъектовРемонта КАК ВТОбъектовРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|		ПО ВТОбъектовРемонта.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	|			И (торо_ТекущееСостояниеОР.Период >= ВТОбъектовРемонта.ДатаНачала)
	|			И (торо_ТекущееСостояниеОР.Период <= ВТОбъектовРемонта.ДатаОкончания)
	|			И (торо_ТекущееСостояниеОР.ВидЭксплуатации.ТипЭксплуатации = ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой))";
	
	Запрос.УстановитьПараметр("Таб", ТабРемонтов);
	
	ТабСостояний = Запрос.Выполнить().Выгрузить();
	
	МассивСтрокТЗ = ТабСостояний.НайтиСтроки(Новый Структура("ВидЭксплуатации", Ложь));
	
	МассивВозврата = Новый Массив;
	
	Для каждого Стр Из МассивСтрокТЗ Цикл
	
		МассивВозврата.Добавить(Стр.ОбъектРемонта);
	
	КонецЦикла; 
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборПоИсполнителям()
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов <> Неопределено Тогда
		
		ID_Отбора = ТекСтрокаДереваРемонтов.ID;
		Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
			ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
		Иначе
			ID_ОтбораРемонтов = ТекСтрокаДереваРемонтов.РемонтыОборудования_ID;
		КонецЕсли;
		
		ОтредактироватьУсловноеОформление(ТекСтрокаДереваРемонтов.ПолучитьИдентификатор(), ID_ОтбораРемонтов);
		
		Если ЗначениеЗаполнено(ID_ОтбораРемонтов) Тогда
			
			Элементы.Исполнители.ОтборСтрок = Неопределено;
			Элементы.Подрядчики.ОтборСтрок  = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
		Иначе
			
			Элементы.Исполнители.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			Элементы.Подрядчики.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(ДокОбъект)
	Элементы = ДокОбъект.Элементы;
	Объект = ДокОбъект.Объект;
	Элементы.ДеревоСогласованияУтвердитьСтатус.Доступность = ЗначениеЗаполнено(Объект.СпособСогласования);
КонецПроцедуры

#Область Согласование

&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере()
	Возврат торо_СобытияФорм.ДокументыОснованияДокументОснованиеНачалоВыбора(ЭтаФорма);	
КонецФункции

&НаСервере
// Проверяет, есть ли документы, созданные на основании данного и документы, на оснвоании которого был введен текущий, 
// кроме Выявленных дефектов и Внешнего основания.
Функция ЭтоПервыйДокументВЦепочке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументыОснования.ДокументИсточник
	               |ПОМЕСТИТЬ ДокументыОснования_
	               |ИЗ
	               |	&ДокументыОснования КАК ДокументыОснования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокументыОснования_.ДокументИсточник КАК ДокументОснование
	               |ИЗ
	               |	ДокументыОснования_ КАК ДокументыОснования_
	               |ГДЕ
	               |	(ДокументыОснования_.ДокументИсточник ССЫЛКА Документ.торо_ЗаявкаНаРемонт
	               |			ИЛИ ДокументыОснования_.ДокументИсточник ССЫЛКА Документ.торо_ПланГрафикРемонта)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник
	               |ИЗ
	               |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	               |ГДЕ
	               |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументыОснования", Объект.РемонтыОборудования.Выгрузить());
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;				   
	КонецЕсли;

КонецФункции

&НаСервере
// Проверяет, есть ли документы, введенные на основании текущего
Функция ЭтоПоследнийДокументВЦепочке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_АктПриемкиОборудованияРемонтыОборудования.ДокументИсточник
	               |ИЗ
	               |	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК торо_АктПриемкиОборудованияРемонтыОборудования
	               |ГДЕ
	               |	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И торо_АктПриемкиОборудованияРемонтыОборудования.ДокументИсточник = &ДокументОснование";
	//Запрос.УстановитьПараметр("ДокументыОснования", Объект.ДокументыОснования.Выгрузить());
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	

	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() <> 0 Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;				   
	КонецЕсли;

КонецФункции

&НаСервере
Процедура РемонтыОборудованияОбновитьДокументыИсточники()
	
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ТипДокументаОснования = "" и СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ОтредактироватьУсловноеОформление(ИдСтроки, ИДРемонта)
	
	ЭлементОформления1 = Неопределено;
	ЭлементОформления2 = Неопределено;
	Для каждого ТекУо из УсловноеОформление.Элементы Цикл
		Если ТекУо.Представление = "ВидимостьИсполнителей1" Тогда
			ЭлементОформления1 = ТекУо;
		КонецЕсли;
		
		Если ТекУо.Представление = "ВидимостьИсполнителей2" Тогда
			ЭлементОформления2 = ТекУо;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекСтрокаДереваРемонтов = ДеревоРемонтныхРабот.НайтиПоИдентификатору(ИдСтроки);
	
	масСтрок = Новый Массив;
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(масСтрок, ТекСтрокаДереваРемонтов.ПолучитьЭлементы());
	
	сзИД = Новый СписокЗначений;
	Для каждого текСтрока из масСтрок Цикл
		сзИД.Добавить(текСтрока.ID);
	КонецЦикла;
	сзИД.Добавить(ТекСтрокаДереваРемонтов.ID);
	
	Если ЭлементОформления1 <> Неопределено Тогда
		ЭлементОформления1.Использование = Истина;
		ЭлементОформления1.Отбор.Элементы[0].ПравоеЗначение = сзИД;
	КонецЕсли;
	
	Если ЭлементОформления2 <> Неопределено Тогда
		ЭлементОформления2.Использование = ЗначениеЗаполнено(ИДРемонта);
		ЭлементОформления2.Отбор.Элементы[0].ПравоеЗначение = ИДРемонта;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьИсполнителей(Адрес)
	
	Если Адрес = Неопределено Тогда возврат; КонецЕсли;
	
	тз = ПолучитьИзВременногоХранилища(Адрес);
	
	стрОтбора = Новый Структура("РемонтыОборудования_ID, ID, Квалификация");
	
	Для каждого текСтрока из Тз Цикл
		ЗаполнитьЗначенияСвойств(стрОтбора, текСтрока);
		НайС = Объект.Исполнители.НайтиСтроки(стрОтбора);
		
		Для каждого ТезЗапись из НайС Цикл
			Объект.Исполнители.Удалить(ТезЗапись);
			Модифицированность = Истина;
		КонецЦикла;
		
		нс = Объект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока);
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДокОсн = Элементы.ДокументыОснования.текущиеДанные.ДокументОснование;
	ФОИспользоватьСтатусыДокументов = ПолучитьЗначениеФОНаСервере("торо_ИспользоватьСтатусыДокументовТОиР");
	
	Если ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВыявленныеДефекты.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ПланГрафикРемонта.ФормаВыбора",Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
    ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаРегламентноеМероприятие.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ФормаВыбора",Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);		
	ИначеЕсли ДокОсн = Неопределено Тогда 
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = СформироватьСписокВыбораНаСервере();
		
		СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение",ЭтотОбъект, Новый Структура("Элемент, ФОИспользоватьСтатусыДокументов", Элемент, ФОИспользоватьСтатусыДокументов)),НСтр("ru = 'Выбор типа данных'"));
	
	КонецЕсли;
	
	Если ДокОсн <> Неопределено Тогда
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ФОИспользоватьСтатусыДокументов = ДополнительныеПараметры.ФОИспользоватьСтатусыДокументов;
	ВыбЭлемент = ВыбранныйЭлемент;
	
	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВыявленныеДефекты.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ПланГрафикРемонта.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаРегламентноеМероприятие.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект)
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеФОНаСервере(ИмяФО)
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяФО);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСписокВыбораНаСервере()
	
	СписокВыбора = Новый СписокЗначений;
	
	Для каждого ТипОснования Из Метаданные.Документы.торо_НарядНаВыполнениеРемонтныхРабот.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.Типы() Цикл
		СписокВыбора.Добавить(ТипОснования);
	КонецЦикла;
	
	// Строки добавлены для учета настроек ввода на основании
	НаборЗаписейВводНаОсновании = РегистрыСведений.торо_ВводНаОсновании.СоздатьНаборЗаписей();
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Значение = "торо_НарядНаВыполнениеРемонтныхРабот";
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Использование = Истина;
	НаборЗаписейВводНаОсновании.Прочитать();
	
	Для каждого ЗаписьРегистр из НаборЗаписейВводНаОсновании Цикл
		Если НЕ ЗаписьРегистр.Значение Тогда
			СтрокаЛишняя = СписокВыбора.НайтиПоЗначению(Тип("ДокументСсылка."+ЗаписьРегистр.ДокументОснование));		
			Если СтрокаЛишняя <> Неопределено Тогда
				СписокВыбора.Удалить(СтрокаЛишняя);	
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ввод данного документа на основании запрещен настройками ввода на основании.
		|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интерфейс и ввод документов.'"));
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаНачала) И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаОкончания) Тогда
				СтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
				Элемент.ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
				Элемент.ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

фПослеОчистки = Ложь;
РемонтОборудованияУдаляется = Ложь;
#КонецОбласти

