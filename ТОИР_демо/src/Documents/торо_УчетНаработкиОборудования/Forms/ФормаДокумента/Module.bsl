////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем ПредИерархия;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	Иначе
		// Проверка, все ли строки в документе можно редактировать и отбор недоступных строк.
		Если Объект.Проведен Тогда
			МВТ = Новый МенеджерВременныхТаблиц;
			
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МВТ;
			Запрос.Текст = "ВЫБРАТЬ
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект КАК Объект,
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель КАК Показатель,
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо КАК ДатаРаботыПо
			               |ПОМЕСТИТЬ торо_УчетНаработкиОборудованияНаработкаОбъектов
			               |ИЗ
			               |	Документ.торо_УчетНаработкиОборудования.НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
			               |ГДЕ
			               |	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка = &Ссылка
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
			               |	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель,
			               |	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.ДатаРаботыПо
			               |ИЗ
			               |	Документ.торо_УчетНаработкиОборудования.НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов
			               |ГДЕ
			               |	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Ссылка = &Ссылка
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Объект,
			               |	Показатель";
		
			Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
			Запрос.Выполнить();
			РезультатЗапроса = торо_РаботаСНаработкой.ПолучитьОбъектыРемонтаСНаработкойВБудущем(МВТ, Объект.Ссылка);
			Если Не РезультатЗапроса.Пустой() Тогда
				ТабНаработкаНедоступноДляРедактирования.Загрузить(РезультатЗапроса.Выгрузить());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	мОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ПоказыватьПоложениеОР",
			Истина);
			
	Элементы.НаработкаОбъектовОтображатьПоложение.Пометка = мОтображатьПоложение;
	Элементы.НаработкаОбъектовПоложение.Видимость = мОтображатьПоложение;
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяСтруктураИерархии",
			Истина);;
	
	Если Параметры.Свойство("ОбъектРемонта") Тогда
		
		НС = Объект.НаработкаОбъектов.Добавить();
		НС.ДатаРаботыПо = ТекущаяДата();
		НС.Показатель   = Параметры.Показатель;
		НС.Объект       = Параметры.ОбъектРемонта;
		НС.Иерархия 	= Параметры.Иерархия;
	КонецЕсли; 
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		ИЛИ Параметры.Свойство("ОбъектРемонта") Тогда
		
		Объект.НаработкаПодчиненныхОбъектов.Очистить();
		
		Для Каждого СтрокаНаработки ИЗ Объект.НаработкаОбъектов Цикл
			
			ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаНаработки.Объект, СтрокаНаработки.Показатель, Объект.Ссылка);	
			Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
				
				Если ЗначениеЗаполнено(ЗначениеНаработки.НаработаноДата) Тогда
					СтрокаНаработки.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
				Иначе 
					СтрокаНаработки.ДатаРаботыС = СтрокаНаработки.Объект.ДатаВводаВЭксплуатацию;
				КонецЕсли;
				                                                         
				СтрокаНаработки.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
			КонецЕсли;
			
			СтрокаНаработки.НаработкаСНачалаЭксплуатации = СтрокаНаработки.Наработка + СтрокаНаработки.НаработкаСНачалаЭксплуатацииНачало;
			СтрокаНаработки.НовоеЗначение = СтрокаНаработки.Наработка + СтрокаНаработки.СтароеЗначение;
			
			РаспространитьНаПодчиненныхДляТекущейСтроки(СтрокаНаработки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьСтруктуруПоложенийОРПриСозданииНаСервере();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--	
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
				
		мТаблицаСбросаСчетчика.Очистить();
		МассивВозврата = Новый Массив;
		ПолучитьТаблицуСбросаСчетчикаНаСервере(Объект.Ссылка,МассивВозврата);
		
		Для Каждого Эл Из МассивВозврата Цикл
			
			НС = мТаблицаСбросаСчетчика.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Эл);
	
		КонецЦикла;
		
	Иначе
		
		мТаблицаСбросаСчетчика.Очистить();
		
		Объект.Дата = ТекущаяДата();
				
	КонецЕсли;
	
	ПредИерархия = Неопределено;
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР(); 	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если КлючНазначенияИспользования = "ОбъектыРемонта" 
		И ПараметрыЗаписи.РежимПроведения <> РежимЗаписиДокумента.Запись Тогда
		
		ОповеститьОЗаписиНового(Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаработкаОбъектов
&НаКлиенте
Процедура НаработкаОбъектовОбъектПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Объект) Тогда
		Возврат;
	Иначе
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Показатель) Тогда
			
			РезультатЗапросаПустой = ЕстьЛиЗаписиПоОРИПоказателю(СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель,мОтображатьПоложение);
						
			Если РезультатЗапросаПустой Тогда				
				
				ОткрытьФорму( "Документ.торо_УчетНаработкиОборудования.Форма.ФормаВыбораПараметраНаработки", Новый Структура("ОбъектРемонтаФильтр", СтрокаТабличнойЧасти.Объект),,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
				
			КонецЕсли;
		Иначе
			ОткрытьФорму( "Документ.торо_УчетНаработкиОборудования.Форма.ФормаВыбораПараметраНаработки", Новый Структура("ОбъектРемонтаФильтр", СтрокаТабличнойЧасти.Объект),,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
		
	КонецЕсли;
	Если мОтображатьПоложение Тогда
		ЗаполнитьПоложенияОР(СтрокаТабличнойЧасти.Объект);
	КонецЕсли;	
	НаработкаОбъектовПоказательПриИзменении(СтрокаТабличнойЧасти.Показатель);
	
	СтрокаТабличнойЧасти.Показатель = ПредопределенноеЗначение("Справочник.ПараметрыВыработкиОС.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПриАктивизацииСтроки(Элемент)
	ТекСтрокаНаработкаОбъектов = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекПоказатель = ТекСтрокаНаработкаОбъектов.Показатель;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если НЕ Копирование Тогда
		
		
		Отказ = Истина;
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
			
			ПараметрыОтбора = Новый Структура("СписокОР", СписокОРИзАкта());
			ПараметрыОтбора.Вставить("ПараметрыНаработки", Истина);
			ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОРИзРегламентногоАкта",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе 
			СписокДоступныхСтатусов = ПолучитьСписокСтатусовНаСервере();
			
			ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
			ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораОРПользователем",ЭтаФорма);
			
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПередУдалением(Элемент, Отказ)
	
	ТекСтрокаНаработкаОбъектов = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрПоиска = Новый Структура("Объект,Показатель, ДатаРаботыПо", ТекСтрокаНаработкаОбъектов.Объект, ТекСтрокаНаработкаОбъектов.Показатель, ТекСтрокаНаработкаОбъектов.ДатаРаботыПо);
	Если НЕ СтрокаДоступнаДляРедактирования(СтрПоиска) Тогда
		Отказ = Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По объекту ремонта %1 и показателю наработки %2 на дату, более позднюю чем %3, зарегистрирована наработка. Удалить наработку объекта в этом документе нельзя.'"),ТекСтрокаНаработкаОбъектов.Объект,ТекСтрокаНаработкаОбъектов.Показатель, ТекСтрокаНаработкаОбъектов.ДатаРаботыПо));
		Возврат;
	КонецЕсли;

	
	// удаление ранее введенных наработок подчиненных
	СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",ТекСтрокаНаработкаОбъектов.Объект, ТекПоказатель));
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
		Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыДерево") Тогда
		
		ЗначениеНаработкиМассив	= ПолучитьЗначениеНаработкиНаСервереМассив(ВыбранноеЗначение);
		
		Для Каждого СтрокаОР Из ВыбранноеЗначение.ПолучитьЭлементы() Цикл
			Если СтрокаОР.ПроставлятьПлановуюНаработку Тогда			
				ЗаполнитьПлановуюНаработку(СтрокаОР.УчитыватьПростоиОР);			
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Объект.НаработкаОбъектов Цикл
			Если мОтображатьПоложение Тогда
				ЗаполнитьПоложенияОР(СтрокаТЧ.Объект);
			КонецЕсли;
		КонецЦикла;
		
	Иначеесли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ЗначениеНаработкиМассив	= ПолучитьЗначениеНаработкиНаСервереИзТаблицыЗначений(ВыбранноеЗначение);
		
		Для Каждого СтрокаОР Из ВыбранноеЗначение.ТаблицаПоказателей Цикл
			Если СтрокаОР.ПроставлятьПлановуюНаработку Тогда			
				ЗаполнитьПлановуюНаработку(СтрокаОР.УчитыватьПростоиОР);			
			КонецЕсли; 
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из Объект.НаработкаОбъектов Цикл
			Если мОтображатьПоложение Тогда
				ЗаполнитьПоложенияОР(СтрокаТЧ.Объект);
			КонецЕсли;
		КонецЦикла;
		
	Иначе

		ОбработкаВыбораОРПользователем(ВыбранноеЗначение, Неопределено); 

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПоказательПриИзменении(Элемент)
	
	НаработкаОбъектовПоказательПриИзмененииСервер(Элементы.НаработкаОбъектов.ТекущаяСтрока);	
	
	НаработкаОбъектовСтароеЗначениеПриИзменении();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик очуществляет пересчет нового значения наработки
// 
Процедура НаработкаОбъектовСтароеЗначениеПриИзменении()
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатацииНачало;
	СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.СтароеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовРаспространятьНаПодчиненныхПриИзменении(Элемент)
	
	ТекДанные = Элементы.НаработкаОбъектов.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ЗначениеЗаполнено(ТекДанные.Иерархия) Тогда
		СН =  Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
	|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
	|Иерархия,РаспространятьНаПодчиненных");
		ЗаполнитьЗначенияСвойств(СН,ТекДанные);
		РаспространитьНаПодчиненныхДляТекущейСтроки(СН);	
	Иначе
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено значение иерархии, на подчиненные объекты из которой необходимо распространить наработку!'"));
		ТекДанные.РаспространятьНаПодчиненных = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	
	РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("НаработкаОбъектовПоказательНачалоВыбораЗавершение",ЭтотОбъект,
																				Новый Структура("СтрокаТабличнойЧасти, Элемент", СтрокаТабличнойЧасти, Элемент));
	
	ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.Форма.ФормаВыбораПараметраНаработки", Новый Структура("ОбъектРемонтаФильтр", СтрокаТабличнойЧасти.Объект),,,,,ОписаниеОповещенияОЗакрытии,РежимОткрытияОкна);
	
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНаработкаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	СтараяНаработкаОР = СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации - СтрокаТабличнойЧасти.СтароеЗначение;
	СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатацииНачало;
	СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.СтароеЗначение;
	
	МаксимальноеЗначение = ПолучитьМаксимальноеЗначениеНаработкиДляОбъекта(СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель);
	
	Если НЕ МаксимальноеЗначение = 0 И СтрокаТабличнойЧасти.НовоеЗначение > МаксимальноеЗначение Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("НаработкаОбъектовНаработкаПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("МаксимальноеЗначение, СтараяНаработкаОР, СтрокаТабличнойЧасти", МаксимальноеЗначение, СтараяНаработкаОР, СтрокаТабличнойЧасти)), НСтр("ru = 'Новое значение наработки больше, чем максимальное значение счетчика. При проведении документа будет выполнен сброс счетчика. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	// изменение ранее введенных наработок подчиненных
	НаработкаОбъектовНаработкаПриИзмененииФрагмент(СтараяНаработкаОР, СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНовоеЗначениеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.НаработкаОбъектов.ТекущиеДанные;
	НовЗнач = СтрокаТабличнойЧасти.НовоеЗначение;
	Если СтрокаТабличнойЧасти.СтароеЗначение > СтрокаТабличнойЧасти.НовоеЗначение Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Новое значение наработки не может быть меньше предыдущего.'"));
		СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.СтароеЗначение;
	КонецЕсли; 
	СтрокаТабличнойЧасти.Наработка = СтрокаТабличнойЧасти.НовоеЗначение - СтрокаТабличнойЧасти.СтароеЗначение;	
	СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатации = СтрокаТабличнойЧасти.Наработка + СтрокаТабличнойЧасти.НаработкаСНачалаЭксплуатацииНачало;
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокДоступныхСтатусов = ПолучитьСписокСтатусовНаСервере();
	
	ТекСтрока = Элементы.НаработкаОбъектов.ТекущиеДанные;	
	
	ПараметрыТекСтрока = Новый Структура();
	
	Если Не ТекСтрока = Неопределено Тогда
		
		ПараметрыТекСтрока.Вставить("ТекСтрока", ТекСтрока);

	КонецЕсли; 
	
	ПараметрыОтбора = Новый Структура("СписокСтатусов", СписокДоступныхСтатусов);
	ПараметрыОтбора.Вставить("СтруктураИерархии",       ТекСтруктураИерархии);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораОРПользователем",ЭтаФорма,ПараметрыТекСтрока);
	
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбъектАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, Ожидание, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовОбъектОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыВыбора, СтандартнаяОбработка)
	ПараметрыВыбора.Отбор.Вставить("Документ", Строка(ТипЗнч(Объект.Ссылка)));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Подбор(Команда)
	
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда 		
		
		ПараметрыОтбора = Новый Структура("СписокОР", СписокОРИзАкта());
		ПараметрыОтбора.Вставить("ПараметрыНаработки", Истина);
		ПараметрыОтбора.Вставить("ЭтоПодбор", Истина);
		
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОРИзРегламентногоАкта",ПараметрыОтбора,Элементы.НаработкаОбъектов,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе       	
		ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
		Новый Структура("КлючНазначенияИспользования, ЗакрыватьПриВыборе, ДатаДокумента, СтруктураИерархии, ДатаСнятияПоказателей", "торо_УчетНаработкиОборудования", Ложь, Объект.Дата, ТекСтруктураИерархии, Объект.Дата),Элементы.НаработкаОбъектов,Объект.Ссылка,ВариантОткрытияОкна.ОтдельноеОкно);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Кнопка = Элементы.НаработкаОбъектовОтображатьПоложение;
	Кнопка.Пометка = НЕ Кнопка.Пометка;	
	Элементы.НаработкаОбъектовПоложение.Видимость = Кнопка.Пометка;
	Если Кнопка.Пометка Тогда
		ЗаполнитьПоложенияОР(); 
	КонецЕсли;
	
	мОтображатьПоложение = Кнопка.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	ПараметрыФормы = Новый Структура();	
	ПараметрыФормы.Вставить("ТекСтруктураИерархии",ТекСтруктураИерархии);
	ОткрытьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаНастройкиВидаИерархии",ПараметрыФормы,ЭтотОбъект,,,,Новый ОписаниеОповещения("НастройкаИерархииЗавершение", ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлановойНаработке(Команда)
	
	Результат = ЗаполнитьПоПлановойНаработкеПредварительноНаСервере();
	                                                                   	
	Если Результат<> неопределено Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПлановойНаработкеЗавершение", ЭтотОбъект),Результат , РежимДиалогаВопрос.ДаНет);
	КонецЕслИ;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВышестоящемуОР(Команда)
	ЗаполнитьПоВышестоящемуОРНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Синхронизировать(Команда)
	
	МассивСтрокНаработки = Новый Массив;
	
	Для Каждого Строка ИЗ Объект.НаработкаОбъектов Цикл
		Если Строка.Синхронизировать Тогда
			МассивСтрокНаработки.Добавить(Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, Иерархия",
			Строка.Объект, Строка.Показатель, Строка.ДатаРаботыС, Строка.ДатаРаботыПо, Строка.Иерархия));
		Конецесли;
	КонецЦикла;
		
	Если МассивСтрокНаработки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанных = торо_РаботаСНаработкой.ПолучитьСтруктуруДанныхДокументаСинхронизации(МассивСтрокНаработки,Объект.Ссылка);
	
	СтруктураДанных.Вставить("Подразделение",Объект.Подразделение);
	СтруктураДанных.Вставить("Организация",Объект.Организация);
	СтруктураДанных.Вставить("Ответственный",Объект.Ответственный);
	СтруктураДанных.Вставить("ДокументОснование",Объект.Ссылка);
	СтруктураДанных.Вставить("МассивСтрокНаработки",МассивСтрокНаработки);                                                                                             
	СтруктураДанных.Вставить("ИзДокументаУчетНаработки",Истина);

	ФормаДопДокумента = ПолучитьФорму("Документ.торо_УстановкаПроизвольногоЗначенияНаработки.ФормаОбъекта",СтруктураДанных,,Объект.Ссылка);
	ФормаДопДокумента.Модифицированность = Истина;
	ФормаДопДокумента.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СинхронизироватьЗавершение",ЭтотОбъект,Новый Структура("ОбъектДопДокумента",ФормаДопДокумента.Объект));
	ФормаДопДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	ФормаДопДокумента.Открыть();
	
КонецПроцедуры

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьПоложенияОР(ОР = Неопределено)
	
	ЗначВозврата = ЗаполнитьПоложенияОРНаКлиенте(ОР);	
	Если Элементы.НаработкаОбъектов.ТекущиеДанные <> Неопределено И ЗначВозврата <> Неопределено Тогда
		Элементы.НаработкаОбъектов.ТекущиеДанные.Положение = ЗначВозврата;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьПоложенияОРНаКлиенте(ОР = Неопределено)
		
	Если ОР = Неопределено Тогда
		Для каждого Стр Из СтруктураПоложений Цикл
			
			МассивСтрок = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект", Стр.Ключ));
			
			Для каждого Элем Из МассивСтрок Цикл
				
				Элем.Положение = Стр.Значение;
				
			КонецЦикла; 
			
		КонецЦикла;
		Возврат Неопределено;
	Иначе
		НужныеСтроки = СтруктураПоложений.НайтиСтроки(Новый Структура("Ключ",ОР));
		Если НужныеСтроки.Количество()>0 Тогда
			Возврат НужныеСтроки[0].Значение;
		КонецЕсли;
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтруктуруПоложенийОРПриСозданииНаСервере(ОР = Неопределено)
	СписокПоложений = Новый СписокЗначений;	
	Если ОР = Неопределено Тогда 
		
		Для каждого Стр Из Объект.НаработкаОбъектов Цикл			
			Если СписокПоложений.НайтиПоЗначению(Стр.Объект) = Неопределено Тогда
				СписокПоложений.Добавить(Стр.Объект);		
			КонецЕсли;			
			Стр.Положение = "";			
		КонецЦикла; 
	Иначе 		
		СписокПоложений.Добавить(ОР); 		
	КонецЕсли;


	СтруктураПоложенийСоответствие = ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, ТекСтруктураИерархии, ТекущаяДата());
	Для каждого ПоложениеИзСтруктуры ИЗ СтруктураПоложенийСоответствие Цикл		
		НоваяСтрока = СтруктураПоложений.Добавить();
		НоваяСтрока.Ключ = ПоложениеИзСтруктуры.Ключ;
		НоваяСтрока.Значение = ПоложениеИзСтруктуры.Значение;		
	КонецЦикла; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруПоложенийОРНаСервере(СписокПоложений, СтруктураИерархии, Дата)
	
	Возврат торо_ОбщегоНазначения.ПолучитьПоложенияВИерархииОбъектовРемРабот(СписокПоложений, СтруктураИерархии, Дата);	
	
КонецФункции

&НаСервере
Функция ЕстьЛиЗаписиПоОРИПоказателю(ОбъектРемонта, Показатель,мОтображатьПоложение = Ложь)
	
	
	Если мОтображатьПоложение Тогда
		ЗаполнитьСтруктуруПоложенийОРПриСозданииНаСервере(ОбъектРемонта);
	КонецЕсли;

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПервых.Период
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПервых(
	|			,
	|			ОбъектРемонта = &ОбъектРемонта
	|				И Показатель = &Показатель) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПервых";
	
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Показатель", Показатель);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
		
	ТекСтруктураИерархии = РезультатЗакрытия;
	
	Если мОтображатьПоложение Тогда	
		
		ЗаполнитьПоложенияОР();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораОРПользователем(ОбъектРемонта, ПараметрыВыбораОР) Экспорт
	
	Если ОбъектРемонта = Неопределено Тогда
		Возврат;
	Иначе
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ОписаниеОповещенияОЗакрытии2 = Новый ОписаниеОповещения("ОбработкаВыбораОРПользователемЗавершение",ЭтотОбъект,Новый Структура("ОбъектРемонта, ПараметрыВыбораОР",ОбъектРемонта, ПараметрыВыбораОР));  		
		ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.Форма.ФормаВыбораПараметраНаработки", Новый Структура("ОбъектРемонтаФильтр", ОбъектРемонта),,,,,ОписаниеОповещенияОЗакрытии2,РежимОткрытияОкна);
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработкаВыбораОРПользователемЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Показатель = РезультатЗакрытия;
	ОбъектРемонта = ДополнительныеПараметры.ОбъектРемонта;
	Если ДополнительныеПараметры.ПараметрыВыбораОР <> Неопределено Тогда
		ПараметрыВыбораОР = ДополнительныеПараметры.ПараметрыВыбораОР;
	КонецЕсли;
	
	Если Показатель <> Неопределено Тогда
		// проверяем, чтобы не было дублей показателей и ОР
		СтрокиНаработкиСредиПодчиненных = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", ОбъектРемонта,Показатель));
		Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже встречается среди подчиненных объектов ремонта объекта %3.'"),ОбъектРемонта,Показатель,СтрокиНаработкиСредиПодчиненных[0].РодительИерархии)); 
			Возврат;
		КонецЕсли;
		
		СтрокиНаработкиСредиПодчиненных = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", ОбъектРемонта, Показатель));
		Если Не ПараметрыВыбораОР = Неопределено 
			И ПараметрыВыбораОР.Свойство("ТекСтрока") Тогда
			Если СтрокиНаработкиСредиПодчиненных.Количество() > 1 Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'"),ОбъектРемонта,Показатель)); 
				Возврат;
			КонецЕсли;
		Иначе
			Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'"),ОбъектРемонта,Показатель)); 
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		// заполняем предыдущие значения
		
		СтароеЗначение = Неопределено;
		РеальноеЗначение = Неопределено;
		ДатаРаботы = Неопределено;
		
		ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(ОбъектРемонта, Показатель,Объект.Ссылка);	
		Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
			СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
			РеальноеЗначение = ЗначениеНаработки.НаработаноЗначение;
			ДатаРаботы = ЗначениеНаработки.НаработаноДата;
		КонецЕсли;
		
		// заполняем предыдущие значения
		Если Не ПараметрыВыбораОР = Неопределено 
			И ПараметрыВыбораОР.Свойство("ТекСтрока") Тогда
			НовСтрока = ПараметрыВыбораОР.ТекСтрока;
		Иначе
			НовСтрока = Объект.НаработкаОбъектов.Добавить();
		КонецЕсли;
		
		НовСтрока.Объект 	= ОбъектРемонта;
		НовСтрока.Показатель = Показатель;
		НовСтрока.ДатаРаботыС = ДатаРаботы;
		НовСтрока.ДатаРаботыПо                       = Объект.Дата;
		НовСтрока.СтароеЗначение                     = СтароеЗначение;
		НовСтрока.НаработкаСНачалаЭксплуатации       = РеальноеЗначение;
		НовСтрока.НаработкаСНачалаЭксплуатацииНачало = РеальноеЗначение;
		НовСтрока.НовоеЗначение                     = НовСтрока.СтароеЗначение + НовСтрока.Наработка;
		
		НовСтрока.Иерархия = ТекСтруктураИерархии;
		
		Если мОтображатьПоложение Тогда 			
			ЗаполнитьСтруктуруПоложенийОРПриСозданииНаСервере(ОбъектРемонта);
			НовСтрока.Положение = ЗаполнитьПоложенияОРНаКлиенте(ОбъектРемонта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеНаработкиНаСервереМассив(ВыбранноеЗначение)
	
	Для Каждого СтрокаОР Из ВыбранноеЗначение.ПолучитьЭлементы() Цикл
		
		ДатаСнятия = СтрокаОР.ДатаСнятия;
		СтрокиВторогоУровня = СтрокаОР.ПолучитьЭлементы();
		Если СтрокиВторогоУровня.Количество() > 0 Тогда
			Для Каждого СтрокаПоказатель Из СтрокиВторогоУровня Цикл 
				
				МассивСтрок = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект, Показатель",СтрокаПоказатель.Объект,СтрокаПоказатель.Показатель));
				
				Если МассивСтрок.Количество() = 0 Тогда 
					СтрокаТЧ = Объект.НаработкаОбъектов.Добавить();
					СтрокаТЧ.Объект = СтрокаПоказатель.Объект;
					СтрокаТЧ.Показатель = СтрокаПоказатель.Показатель;
					
					ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаПоказатель.Объект, СтрокаПоказатель.Показатель, Объект.Ссылка);	
					Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
						СтрокаТЧ.СтароеЗначение = ?(ЗначениеЗаполнено(ЗначениеНаработки.НаработаноЗначение), ЗначениеНаработки.НаработаноЗначение, 0);
						СтрокаТЧ.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
					Иначе
						СтрокаТЧ.СтароеЗначение = 0;
						СтрокаТЧ.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
					КонецЕсли;
					
					СтрокаТЧ.ДатаРаботыПо = СтрокаПоказатель.ДатаСнятия; //Объект.Дата; //СтрокаПоказатель.ДатаСнятия;
					
					СтрокаТЧ.НаработкаСНачалаЭксплуатации = СтрокаТЧ.СтароеЗначение;
					СтрокаТЧ.НаработкаСНачалаЭксплуатацииНачало = СтрокаТЧ.СтароеЗначение;
					
					СтрокаТЧ.Иерархия = ТекСтруктураИерархии;
					
					Если СтрокаОР.ПроставлятьПлановуюНаработку Тогда 
						НС = ТаблицаПодобранныхОР.Добавить();
						НС.Объект = СтрокаТЧ.Объект;
						НС.НомерСтроки = ТаблицаПодобранныхОР.Количество();
						НС.ПлановыйГрафикРаботы = торо_РаботаСНаработкой.ПолучитьЗначениеПлановогоГрафикаРаботОбъектаРемонта(СтрокаТЧ.Объект);
						НС.Показатель = СтрокаТЧ.Показатель;
						НС.ДатаРаботыС = СтрокаТЧ.ДатаРаботыС;
						НС.ДатаРаботыПо = СтрокаТЧ.ДатаРаботыПо;
					КонецЕсли;
					
					Если мОтображатьПоложение Тогда
						
						Элементы.НаработкаОбъектов.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
						ЗаполнитьСтруктуруПоложенийОРПриСозданииНаСервере(СтрокаТЧ.Объект);
						
					КонецЕсли;
				Иначе
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'"),СтрокаПоказатель.Объект,СтрокаПоказатель.Показатель)); 
				КонецЕсли;
			КонецЦикла;
			
		Иначе			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку для объекта ремонта %1 отсутствуют параметры наработки!'"),СтрокаОР.Объект);
			Сообщение.Сообщить();
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецФункции

&НаСервере
Функция ПолучитьЗначениеНаработкиНаСервереИзТаблицыЗначений(ВыбранноеЗначение)
	
	Для Каждого Элем Из ВыбранноеЗначение.СписокОр Цикл
		
		СтрПоиска = ВыбранноеЗначение.ТаблицаПоказателей.НайтиСтроки(Новый Структура("Объект, Выбран", Элем.Значение, Истина));
		
		Если СтрПоиска.Количество() Тогда
			
			Для Каждого СтрокаПоказатель Из СтрПоиска Цикл 				
				ДатаСнятия = СтрокаПоказатель.ДатаСнятия;			
				МассивСтрок = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект, Показатель",СтрокаПоказатель.Объект,СтрокаПоказатель.Параметр));
				
				Если МассивСтрок.Количество() = 0 Тогда 
					СтрокаТЧ = Объект.НаработкаОбъектов.Добавить();
					СтрокаТЧ.Объект = СтрокаПоказатель.Объект;
					СтрокаТЧ.Показатель = СтрокаПоказатель.Параметр;
					
					ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаПоказатель.Объект, СтрокаПоказатель.Параметр, Объект.Ссылка);	
					Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
						СтрокаТЧ.СтароеЗначение = ?(ЗначениеЗаполнено(ЗначениеНаработки.НаработаноЗначение), ЗначениеНаработки.НаработаноЗначение, 0);
						СтрокаТЧ.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
					Иначе
						СтрокаТЧ.СтароеЗначение = 0;
						СтрокаТЧ.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
					КонецЕсли;
					
					СтрокаТЧ.ДатаРаботыПо = СтрокаПоказатель.ДатаСнятия;
					
					СтрокаТЧ.НаработкаСНачалаЭксплуатации = СтрокаТЧ.СтароеЗначение;
					СтрокаТЧ.НаработкаСНачалаЭксплуатацииНачало = СтрокаТЧ.СтароеЗначение;
					
					СтрокаТЧ.Иерархия = ТекСтруктураИерархии;
					
					Если СтрокаПоказатель.ПроставлятьПлановуюНаработку Тогда 
						НС = ТаблицаПодобранныхОР.Добавить();
						НС.Объект = СтрокаТЧ.Объект;
						НС.НомерСтроки = ТаблицаПодобранныхОР.Количество();
						НС.ПлановыйГрафикРаботы = торо_РаботаСНаработкой.ПолучитьЗначениеПлановогоГрафикаРаботОбъектаРемонта(СтрокаТЧ.Объект);
						НС.Показатель = СтрокаТЧ.Показатель;
						НС.ДатаРаботыС = СтрокаТЧ.ДатаРаботыС;
						НС.ДатаРаботыПо = СтрокаТЧ.ДатаРаботыПо;
					КонецЕсли;
					
					Если мОтображатьПоложение Тогда
						
						Элементы.НаработкаОбъектов.ТекущаяСтрока = СтрокаТЧ.ПолучитьИдентификатор();
						ЗаполнитьСтруктуруПоложенийОРПриСозданииНаСервере(СтрокаТЧ.Объект);
						
					КонецЕсли;
				Иначе
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'"), СтрокаПоказатель.Объект, СтрокаПоказатель.Параметр)); 
				КонецЕсли; 				
			КонецЦикла;	
			
		Иначе 
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку для объекта ремонта %1 отсутствуют параметры наработки!'"), Элем.Значение)); 
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПлановуюНаработку(УчитыватьПростои)
	
	МассивСтрок = ПроверитьЗаполненностьГрафика(Истина,УчитыватьПростои);
	Если МассивСтрок.Количество() <> 0 Тогда
		
		СтрокаНомеровСтрок = "";
		СтрокаОбъектовРемонта = "";
		Для Каждого Строка Из МассивСтрок Цикл
			СтрокаНомеровСтрок = СтрокаНомеровСтрок + Строка.НомерСтроки + ", ";
			СтрокаОбъектовРемонта = СтрокаОбъектовРемонта + Строка.Объект + ", ";
		КонецЦикла;
		Ответ = Неопределено;
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для объектов ремонта %1 (строки с номерами %2) не заполнен график работы оборудования.
			|Выполнить расчет?'"),
			Лев(СтрокаОбъектовРемонта, СтрДлина(СтрокаОбъектовРемонта)-2),Лев(СтрокаНомеровСтрок, СтрДлина(СтрокаНомеровСтрок)-2));
			
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПлановуюНаработкуЗавершение", ЭтотОбъект, Новый Структура("УчитыватьПростои", УчитыватьПростои)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлановуюНаработкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    УчитыватьПростои = ДополнительныеПараметры.УчитыватьПростои;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        ЗаполнитьПоПлановойНаработкеНаСервере(Истина, УчитыватьПростои);
        
    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура НаработкаОбъектовПоказательПриИзмененииСервер(ТекСтрока) 
	СтрокаТабличнойЧасти = Объект.НаработкаОбъектов.НайтиПоИдентификатору(ТекСтрока);
	
	// проверяем, не введена ли уже строка для нового показателя наработки
	СтрокиНаработкиСредиПодчиненных = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель));
	Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже встречается среди подчиненных объектов ремонта объекта %3.'"),СтрокаТабличнойЧасти.Объект,СтрокаТабличнойЧасти.Показатель,СтрокиНаработкиСредиПодчиненных[0].РодительИерархии)); 
		СтрокаТабличнойЧасти.Показатель = ТекПоказатель;
		Возврат;
	КонецЕсли;
	
	СтрокиНаработкиСредиПодчиненных = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", СтрокаТабличнойЧасти.Объект,СтрокаТабличнойЧасти.Показатель));
	Если СтрокиНаработкиСредиПодчиненных.Количество() > 1 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'"),СтрокаТабличнойЧасти.Объект,СтрокаТабличнойЧасти.Показатель)); 
		СтрокаТабличнойЧасти.Показатель = ТекПоказатель;
		Возврат;
	КонецЕсли;
	
	// изменяем начальное значение наработки	
	ЗначениеНаработки = торо_РаботаСНаработкой.ПолучитьТекущееЗначениеНаработки(СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Показатель, Объект.Ссылка);	
	Если ЗначениеЗаполнено(ЗначениеНаработки) Тогда
		
			СтрокаТабличнойЧасти.ДатаРаботыС = ЗначениеНаработки.НаработаноДата;
		
		СтрокаТабличнойЧасти.СтароеЗначение = ЗначениеНаработки.НаработаноЗначение;
	КонецЕсли;
		
	// удаление ранее введенных наработок подчиненных
	СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",СтрокаТабличнойЧасти.Объект, ТекПоказатель));
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
		Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
	КонецЦикла;

	СН = Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
	|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
	|Иерархия,РаспространятьНаПодчиненных");

	ЗаполнитьЗначенияСвойств(СН,СтрокаТабличнойЧасти);
	РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
	
КонецПроцедуры

&НаСервере
Процедура РаспространитьНаПодчиненныхДляТекущейСтроки(ТекСтрокаНаработкаОбъектов)
	
	Если ТекСтрокаНаработкаОбъектов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мОтказ = Ложь;
	
	флагРаспространятьНаПодчиненных = ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных;
	Если флагРаспространятьНаПодчиненных Тогда
						
		ТаблицаИерархииОР = торо_РаботаСИерархией.ПолучитьТаблицуИерархии(ТекСтрокаНаработкаОбъектов.Иерархия,Объект.Дата,Истина);
		ПредИерархия = ТекСтрокаНаработкаОбъектов.Иерархия;
		
		ТаблицаПодчиненныхОР = торо_РаботаСНаработкой.ПолучитьЗависимыеОР(ТаблицаИерархииОР, ТекСтрокаНаработкаОбъектов.Объект, Неопределено, ТекСтрокаНаработкаОбъектов.ДатаРаботыС, ТекСтрокаНаработкаОбъектов.ДатаРаботыПо, ТекСтрокаНаработкаОбъектов.Показатель);
		
		Для Каждого СтрокаСНаработкой Из Объект.НаработкаОбъектов Цикл
			Если ТаблицаПодчиненныхОР.НайтиСтроки(Новый Структура("ОбъектИерархии,Показатель", СтрокаСНаработкой.Объект,СтрокаСНаработкой.Показатель)).Количество() = 0 Тогда
				Продолжить;
			Иначе
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Невозможно распространить наработку на подчиненные объекты ремонта. Объект ремонта %1 встречается повторно среди подчиненных объектов ремонта объекта %2.'"),СтрокаСНаработкой.Объект,ТекСтрокаНаработкаОбъектов.Объект)); 
				мОтказ = Истина;
			КонецЕсли;
		КонецЦикла; 
		
		ТабЗначенийНаработки = торо_РаботаСНаработкой.ТекущееЗначениеНаработкиТаблица(ТаблицаПодчиненныхОР, Объект.Ссылка);
		
		НеобходимаСинхронизация = Ложь;
		
		Если Не мОтказ Тогда
			
			Для Каждого СтрПодчиненнаяНаработка Из ТабЗначенийНаработки Цикл
				Если СтрПодчиненнаяНаработка.НаработаноДата <> СтрПодчиненнаяНаработка.ДатаНачала Тогда
					НеобходимаСинхронизация = Истина;
					СтрокаТаблицыНаработки = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель",ТекСтрокаНаработкаОбъектов.Объект,ТекСтрокаНаработкаОбъектов.Показатель))[0];
					СтрокаТаблицыНаработки.Синхронизировать = Истина;
					СтрокаТаблицыНаработки.РаспространятьНаПодчиненных = Ложь; 
					мОтказ = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если НеобходимаСинхронизация Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для распространения наработки на подчиненные ОР необходимо выполнить синхронизацию периодов регистрации наработки!'"));
			КонецЕсли;
			
			Если Не мОтказ Тогда
				
				СтруктураДляПередачи = Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, Наработка");
				ЗаполнитьЗначенияСвойств(СтруктураДляПередачи, ТекСтрокаНаработкаОбъектов);
				торо_РаботаСНаработкой.РаспространитьНаработкуНаПодчиненныхДляТекСтроки(СтруктураДляПередачи, ТабЗначенийНаработки, ТаблицаПодчиненныхОР, Объект);
				
			КонецЕсли;
		КонецЕсли;
		
		Если мОтказ Тогда
			СтрокаТаблицыНаработки = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель",ТекСтрокаНаработкаОбъектов.Объект,ТекСтрокаНаработкаОбъектов.Показатель))[0];
			СтрокаТаблицыНаработки.РаспространятьНаПодчиненных = Ложь;
		КонецЕсли;
	Иначе
		СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии,Показатель",ТекСтрокаНаработкаОбъектов.Объект,ТекСтрокаНаработкаОбъектов.Показатель));
		
		Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
			Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПолучитьТаблицуСбросаСчетчикаНаСервере(Ссылка,МассивВозврата)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.НовоеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.СтароеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Наработка
	|ИЗ
	|	Документ.торо_УчетНаработкиОборудования.НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|		ПО торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект = торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта
	|			И торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель = торо_МаксимальныеЗначенияНаработкиОР.Показатель
	|ГДЕ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0),
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.НовоеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.СтароеЗначение,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Наработка
	|ИЗ
	|	Документ.торо_УчетНаработкиОборудования.НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|		ПО торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект = торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта
	|			И торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель = торо_МаксимальныеЗначенияНаработкиОР.Показатель
	|ГДЕ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.НовоеЗначение < Выборка.СтароеЗначение Тогда
			Если НЕ Выборка.МаксимальноеЗначение = 0 Тогда
				
				КоличествоСбросовСчетчика = Цел((Выборка.СтароеЗначение + Выборка.Наработка) / Выборка.МаксимальноеЗначение);
				НовоеЗначениеАбсолютное = Выборка.СтароеЗначение + Выборка.Наработка;
				
				МассивВозврата.Добавить(Новый Структура("ОбъектРемонта,Показатель,ДатаработыПо,КоличествоСбросовСчетчика,НовоеЗначениеАбсолютное,Наработка,НовоеЗначение",
				Выборка.Объект,Выборка.Показатель,Выборка.ДатаработыПо,КоличествоСбросовСчетчика,НовоеЗначениеАбсолютное,Выборка.Наработка,Выборка.НовоеЗначение));
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовПоказательНачалоВыбораЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Показатель = РезультатЗакрытия;
	СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если НЕ Показатель = Неопределено Тогда
		СтрокаТабличнойЧасти.Показатель = Показатель;
		НаработкаОбъектовПоказательПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНаработкаПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МаксимальноеЗначение = ДополнительныеПараметры.МаксимальноеЗначение;
    СтараяНаработкаОР = ДополнительныеПараметры.СтараяНаработкаОР;
    СтрокаТабличнойЧасти = ДополнительныеПараметры.СтрокаТабличнойЧасти;     
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        КоличествоСбросовСчетчика = Цел(СтрокаТабличнойЧасти.НовоеЗначение / МаксимальноеЗначение);
        НовоеЗначениеАбсолютное = СтрокаТабличнойЧасти.НовоеЗначение;
        СтрокаТабличнойЧасти.НовоеЗначение = СтрокаТабличнойЧасти.НовоеЗначение - КоличествоСбросовСчетчика * МаксимальноеЗначение;
    Иначе
        СтрокаТабличнойЧасти.НовоеЗначение = 0;
        СтрокаТабличнойЧасти.Наработка = 0;
        Возврат;
    КонецЕсли;
    
    НаработкаОбъектовНаработкаПриИзмененииФрагмент(СтараяНаработкаОР, СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовНаработкаПриИзмененииФрагмент(Знач СтараяНаработкаОР, Знач СтрокаТабличнойЧасти)
    
	НаработкаОбъектовНаработкаПриИзмененииФрагментНаСервере(СтараяНаработкаОР,СтрокаТабличнойЧасти.Объект, СтрокаТабличнойЧасти.Наработка);

КонецПроцедуры

&НаСервере
Процедура НаработкаОбъектовНаработкаПриИзмененииФрагментНаСервере(Знач СтараяНаработкаОР, Знач ТекОбъектРемонта, ТекНаработка)
	Перем Коэффициент, МаксЗнач, СтароеЗначение, СтрокаПодчиненного, СтрокиПодчиненныхНаИзменение;
		
	
	СтрокиПодчиненныхНаИзменение = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",ТекОбъектРемонта, ТекПоказатель));
	
	
	
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаИзменение Цикл
        СтароеЗначение = СтрокаПодчиненного.Наработка;
        Коэффициент = ?(СтароеЗначение = СтараяНаработкаОР,1,СтароеЗначение / СтараяНаработкаОР);
        СтрокаПодчиненного.Наработка = ТекНаработка * Коэффициент;
        СтрокаПодчиненного.НаработкаСНачалаЭксплуатации = СтрокаПодчиненного.НаработкаСНачалаЭксплуатацииНачало + СтрокаПодчиненного.Наработка;
        
        МаксЗнач = ПолучитьМаксимальноеЗначениеНаработкиДляОбъекта(СтрокаПодчиненного.Объект, СтрокаПодчиненного.Показатель);
        Если СтрокаПодчиненного.Наработка < МаксЗнач Тогда
            СтрокаПодчиненного.НовоеЗначение = СтрокаПодчиненного.Наработка;
        Иначе
            СтрокаПодчиненного.НовоеЗначение = СтрокаПодчиненного.Наработка - МаксЗнач;
        КонецЕсли;
    КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМаксимальноеЗначениеНаработкиДляОбъекта(ОбъектРемонта, Показатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,0) КАК МаксимальноеЗначение
		|ИЗ
		|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
		|ГДЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ОбъектРемонта
		|	И торо_МаксимальныеЗначенияНаработкиОР.Показатель = &Показатель";

	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("Показатель", Показатель);

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.МаксимальноеЗначение;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьМаксимальныеЗначенияНаработкиДляОбъектовДокумента()
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель
	|ПОМЕСТИТЬ НаработкаОбъектов
	|ИЗ
	|	&НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель
	|ПОМЕСТИТЬ НаработкаПодчиненныхОбъектов
	|ИЗ
	|	&НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель
	|ПОМЕСТИТЬ ОбъектыИПоказатели
	|ИЗ
	|	НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель
	|ИЗ
	|	НаработкаПодчиненныхОбъектов КАК торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Объект,
	|	торо_УчетНаработкиОборудованияНаработкаПодчиненныхОбъектов.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыИПоказатели.Объект,
	|	ОбъектыИПоказатели.Показатель,
	|	ЕСТЬNULL(торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение, 0) КАК МаксимальноеЗначение
	|ИЗ
	|	ОбъектыИПоказатели КАК ОбъектыИПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	|		ПО (торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = ОбъектыИПоказатели.Объект)
	|			И (торо_МаксимальныеЗначенияНаработкиОР.Показатель = ОбъектыИПоказатели.Показатель)");

	Запрос.УстановитьПараметр("НаработкаОбъектов", Объект.НаработкаОбъектов.Выгрузить(, "Объект, Показатель"));
	Запрос.УстановитьПараметр("НаработкаПодчиненныхОбъектов", Объект.НаработкаПодчиненныхОбъектов.Выгрузить(, "Объект, Показатель"));

	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьГрафика(ПроверятьПоПодобраннымОбъектам = Ложь,УчитыватьПростои = Ложь) 
	
	Если ПроверятьПоПодобраннымОбъектам Тогда
		ТаблицаДляПроверки = ТаблицаПодобранныхОР.Выгрузить();
	Иначе
		ТаблицаДляПроверки = Объект.НаработкаОбъектов.Выгрузить();
	КонецЕсли;
	
	Если Не ТаблицаДляПроверки.Количество() > 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНаработкиОбъектов.НомерСтроки,
	|	ТаблицаНаработкиОбъектов.ДатаРаботыПо,
	|	ВЫРАЗИТЬ(ТаблицаНаработкиОбъектов.Объект КАК Справочник.торо_ОбъектыРемонта) КАК Объект
	|ПОМЕСТИТЬ ТабДок
	|ИЗ
	|	&ТаблицаНаработкиОбъектов КАК ТаблицаНаработкиОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ТаблицаДокумента.Объект,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.ДатаРаботыПо <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА НАЧАЛОПЕРИОДА(ТаблицаДокумента.ДатаРаботыПо, ДЕНЬ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&Дата, ДЕНЬ)
	|	КОНЕЦ КАК ДатаРаботыПо,
	|	ТаблицаДокумента.Объект.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	ТабДок КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки,
	|	ВЫРАЗИТЬ(КалендарныеГрафики.ДатаГрафика КАК ДАТА) КАК Дата,
	|	ТаблицаДокумента.Объект
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО ТаблицаДокумента.ПлановыйГрафикРаботы = КалендарныеГрафики.Календарь
	|			И ТаблицаДокумента.ДатаРаботыПо = КалендарныеГрафики.ДатаГрафика";

	Запрос.УстановитьПараметр("ТаблицаНаработкиОбъектов", ТаблицаДляПроверки);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	
	МассивСтрокТЗ = Запрос.Выполнить().Выгрузить().НайтиСтроки(Новый Структура("Дата", Null));
	Массив = Новый Массив;
	Для каждого Строка Из МассивСтрокТЗ Цикл
		Массив.Добавить(Новый Структура("НомерСтроки, Объект", Строка.НомерСтроки, Строка.Объект));
	КонецЦикла;
	
	Если Массив.Количество() = 0 Тогда
		ЗаполнитьПоПлановойНаработкеНаСервере(Истина, УчитыватьПростои);
	КонецЕсли;
	
	Возврат Массив;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоПлановойНаработкеНаСервере(ПоПодобраннымОбъектам = Ложь, УчитыватьПростои = Истина)
	
	Если ПоПодобраннымОбъектам Тогда
		ТаблицаДляРассчета = ТаблицаПодобранныхОР.Выгрузить();
	Иначе
		ТаблицаДляРассчета = Объект.НаработкаОбъектов.Выгрузить();
	КонецЕсли;
	
	ТаблицаДанных = торо_РаботаСНаработкой.ПолучитьИнтервалыРасчетаПлановойНаработки(ТаблицаДляРассчета, Объект.Дата, УчитыватьПростои);

	Если ТаблицаДляРассчета = Неопределено Тогда
		ОчиститьЗначениеНаработки();
	КонецЕсли;
	
	ВариантыПериодов = ТаблицаДанных.Скопировать(,"ПериодПлановойНаработки");
	ВариантыПериодов.Свернуть("ПериодПлановойНаработки",);
	Для Каждого Период Из ВариантыПериодов Цикл
		ТаблицаСПериодом = ТаблицаДанных.Скопировать(Новый Структура("ПериодПлановойНаработки",Период.ПериодПлановойНаработки));
		ТаблицаСНаработкой = торо_РаботаСНаработкой.РассчитатьВремяРаботыОРСПериодами(ТаблицаСПериодом,Период.ПериодПлановойНаработки);
		Для Каждого ЗаписьСНаработкой Из ТаблицаСНаработкой Цикл
			МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ОбъектРемонта,ДатаНачала,ДатаОкончания,Показатель",
												ЗаписьСНаработкой.ОбъектРемонта,ЗаписьСНаработкой.ДатаНачала,ЗаписьСНаработкой.ДатаОкончания,ЗаписьСНаработкой.Показатель));
												
												
			Для Каждого Строка Из МассивСтрок Цикл
				Строка.ФактическаяНаработка = Строка.ФактическаяНаработка 
												+ ЗаписьСНаработкой.Периодов / ?(Строка.ПродолжительностьПериодаПлановойНаработки = 0,1,Строка.ПродолжительностьПериодаПлановойНаработки) 
														* Строка.КоэффициентИспользованияОборудования * Строка.ПлановаяНаработка;									
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;     
	
	ТаблицаДанных.Свернуть("ОбъектРемонта, ДатаРаботыС, ДатаРаботыПо, Показатель", "ФактическаяНаработка");
	
	ТабМаксЗначений = ПолучитьМаксимальныеЗначенияНаработкиДляОбъектовДокумента();
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		МассивСтрокТЧ = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо",
												СтрокаТЗ.ОбъектРемонта, СтрокаТЗ.Показатель, СтрокаТЗ.ДатаРаботыС, СтрокаТЗ.ДатаРаботыПо));
												
		МаксЗначение = 0;
		НайденныеСтрокиМаксЗнач = ТабМаксЗначений.НайтиСтроки(Новый Структура("Объект, Показатель", СтрокаТЗ.ОбъектРемонта, СтрокаТЗ.Показатель));
		Если НайденныеСтрокиМаксЗнач.Количество() > 0 Тогда
			МаксЗначение = НайденныеСтрокиМаксЗнач[0].МаксимальноеЗначение;
		КонецЕсли;
		
		Для Каждого ЭлементМассива Из МассивСтрокТЧ Цикл
			
			ЭлементМассива.Наработка    = СтрокаТЗ.ФактическаяНаработка;
			ЭлементМассива.ДатаРаботыПо = ?(ЗначениеЗаполнено(СтрокаТЗ.ДатаРаботыПо),СтрокаТЗ.ДатаРаботыПо,Объект.Дата);
			ЭлементМассива.НаработкаСНачалаЭксплуатации = ЭлементМассива.Наработка + 
																ЭлементМассива.НаработкаСНачалаЭксплуатацииНачало;
			ЭлементМассива.НовоеЗначение = ЭлементМассива.Наработка + ЭлементМассива.СтароеЗначение;
			Если МаксЗначение <> 0 И ЭлементМассива.НовоеЗначение > МаксЗначение Тогда
				КоличествоСбросовСчетчика = Цел(ЭлементМассива.НовоеЗначение / МаксЗначение);
				ЭлементМассива.НовоеЗначение = ЭлементМассива.НовоеЗначение - КоличествоСбросовСчетчика * МаксЗначение;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Наработка по объекту %1 и показателю %2 превысила максимальное значение. Будет выполнен сброс счетчика.'"), ЭлементМассива.Объект, ЭлементМассива.Показатель);
				Сообщение.Сообщить();
			КонецЕсли;			
			
		КонецЦикла; 
		
	КонецЦикла;
	
	Для Каждого СтрокаНаработка Из Объект.НаработкаОбъектов Цикл
		// Изменение ранее введенных наработок подчиненных.
		// Удаление ранее введенных наработок подчиненных.
		СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",СтрокаНаработка.Объект, СтрокаНаработка.Показатель));
		Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
			Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
		КонецЦикла;
		
		СН = Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
		|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
		|Иерархия,РаспространятьНаПодчиненных");
		
		ЗаполнитьЗначенияСвойств(СН,СтрокаНаработка);
		РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьПоПлановойНаработкеПредварительноНаСервере()
	МассивСтрок = ПроверитьЗаполненностьГрафика();
	Если МассивСтрок.Количество() = 0 Тогда
		
		ЗаполнитьПоПлановойНаработкеНаСервере();
		Возврат Неопределено;
	Иначе
		СтрокаНомеровСтрок = "";
		СтрокаОбъектовРемонта = "";
		Для Каждого Строка Из МассивСтрок Цикл
			СтрокаНомеровСтрок = СтрокаНомеровСтрок + Строка.НомерСтроки + ", ";
			СтрокаОбъектовРемонта = СтрокаОбъектовРемонта + Строка.Объект + ", ";
		КонецЦикла;
		Ответ = Неопределено;
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для объектов ремонта %1 (строки с номерами %2) не заполнен график работы оборудования.
			|Выполнить расчет?'"),
			Лев(СтрокаОбъектовРемонта, СтрДлина(СтрокаОбъектовРемонта)-2),Лев(СтрокаНомеровСтрок, СтрДлина(СтрокаНомеровСтрок)-2));
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоПлановойНаработкеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        ЗаполнитьПоПлановойНаработкеНаСервере();
        
    Иначе
        Возврат;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОчиститьЗначениеНаработки()
	
	Для Каждого СтрокаТЧ Из Объект.НаработкаОбъектов Цикл
		СтрокаТЧ.Наработка = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВышестоящемуОРНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
	               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
	               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии
	               |ПОМЕСТИТЬ ТаблицаСтруктураИерархии
	               |ИЗ
	               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, ) КАК торо_ИерархическиеСтруктурыОР
	               |ГДЕ
	               |	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
	               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
	               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии
	               |ИЗ
	               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.Объект,
	               |	ТаблицаДанных.Показатель,
	               |	ТаблицаДанных.ДатаРаботыС,
	               |	ТаблицаДанных.ДатаРаботыПо,
	               |	ТаблицаДанных.Иерархия
	               |ПОМЕСТИТЬ ТаблицаДанных
	               |ИЗ
	               |	&ТаблицаДанных КАК ТаблицаДанных
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.Объект,
	               |	ТаблицаДанных.ДатаРаботыС,
	               |	ТаблицаДанных.ДатаРаботыПо,
	               |	ТаблицаДанных.Показатель,
	               |	ЕСТЬNULL(ТаблицаСтруктураИерархии.РодительИерархии, ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаСРодителем
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтруктураИерархии КАК ТаблицаСтруктураИерархии
	               |		ПО ТаблицаДанных.Иерархия = ТаблицаСтруктураИерархии.СтруктураИерархии.Ссылка
	               |			И ТаблицаДанных.Объект = ТаблицаСтруктураИерархии.ОбъектИерархии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСРодителем.Объект,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСРодителем.ДатаРаботыС > торо_НаработкаОбъектовРемонта.ДатаНач
	               |			ТОГДА ТаблицаСРодителем.ДатаРаботыС
	               |		ИНАЧЕ торо_НаработкаОбъектовРемонта.ДатаНач
	               |	КОНЕЦ КАК НачалоИнтервала,
	               |	ТаблицаСРодителем.Показатель,
	               |	торо_НаработкаОбъектовРемонта.Наработка / ВЫБОР
	               |		КОГДА торо_НаработкаОбъектовРемонта.ДатаНач = торо_НаработкаОбъектовРемонта.ДатаКон
	               |			ТОГДА 1
	               |		ИНАЧЕ РАЗНОСТЬДАТ(торо_НаработкаОбъектовРемонта.ДатаНач, торо_НаработкаОбъектовРемонта.ДатаКон, СЕКУНДА)
	               |	КОНЕЦ КАК СредняяНаработка,
	               |	ТаблицаСРодителем.ДатаРаботыС,
	               |	ТаблицаСРодителем.РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаНачалоИнтервала
	               |ИЗ
	               |	ТаблицаСРодителем КАК ТаблицаСРодителем
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	               |		ПО ТаблицаСРодителем.РодительИерархии = торо_НаработкаОбъектовРемонта.ОбъектРемонта
	               |			И (ТаблицаСРодителем.ДатаРаботыС <= торо_НаработкаОбъектовРемонта.ДатаНач
	               |					И ТаблицаСРодителем.ДатаРаботыПо > торо_НаработкаОбъектовРемонта.ДатаНач
	               |				ИЛИ ТаблицаСРодителем.ДатаРаботыС < торо_НаработкаОбъектовРемонта.ДатаКон
	               |					И ТаблицаСРодителем.ДатаРаботыПо > торо_НаработкаОбъектовРемонта.ДатаНач)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСРодителем.Объект,
	               |	ВЫБОР
	               |		КОГДА ТаблицаСРодителем.ДатаРаботыПо < торо_НаработкаОбъектовРемонта.ДатаКон
	               |			ТОГДА ТаблицаСРодителем.ДатаРаботыПо
	               |		ИНАЧЕ торо_НаработкаОбъектовРемонта.ДатаКон
	               |	КОНЕЦ КАК КонецИнтервала,
	               |	ТаблицаСРодителем.Показатель,
	               |	торо_НаработкаОбъектовРемонта.Наработка / ВЫБОР
	               |		КОГДА торо_НаработкаОбъектовРемонта.ДатаНач = торо_НаработкаОбъектовРемонта.ДатаКон
	               |			ТОГДА 1
	               |		ИНАЧЕ РАЗНОСТЬДАТ(торо_НаработкаОбъектовРемонта.ДатаНач, торо_НаработкаОбъектовРемонта.ДатаКон, СЕКУНДА)
	               |	КОНЕЦ КАК СредняяНаработка,
	               |	ТаблицаСРодителем.ДатаРаботыС
	               |ПОМЕСТИТЬ ТаблицаКонецИнтервала
	               |ИЗ
	               |	ТаблицаСРодителем КАК ТаблицаСРодителем
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	               |		ПО ТаблицаСРодителем.РодительИерархии = торо_НаработкаОбъектовРемонта.ОбъектРемонта
	               |			И (ТаблицаСРодителем.ДатаРаботыС <= торо_НаработкаОбъектовРемонта.ДатаНач
	               |					И ТаблицаСРодителем.ДатаРаботыПо > торо_НаработкаОбъектовРемонта.ДатаНач
	               |				ИЛИ ТаблицаСРодителем.ДатаРаботыС < торо_НаработкаОбъектовРемонта.ДатаКон
	               |					И ТаблицаСРодителем.ДатаРаботыПо > торо_НаработкаОбъектовРемонта.ДатаНач)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаКонецИнтервала.Объект,
	               |	МИНИМУМ(ТаблицаКонецИнтервала.КонецИнтервала) КАК КонецИнтервала,
	               |	ТаблицаКонецИнтервала.Показатель,
	               |	ТаблицаКонецИнтервала.СредняяНаработка,
	               |	ТаблицаКонецИнтервала.ДатаРаботыС
	               |ПОМЕСТИТЬ ТаблицаКонецИнтервалаПервый
	               |ИЗ
	               |	ТаблицаКонецИнтервала КАК ТаблицаКонецИнтервала
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаКонецИнтервала.Объект,
	               |	ТаблицаКонецИнтервала.Показатель,
	               |	ТаблицаКонецИнтервала.СредняяНаработка,
	               |	ТаблицаКонецИнтервала.ДатаРаботыС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаНачалоИнтервала.Объект,
	               |	ТаблицаНачалоИнтервала.НачалоИнтервала,
	               |	ТаблицаКонецИнтервала.КонецИнтервала,
	               |	ТаблицаКонецИнтервала.Показатель,
	               |	ТаблицаНачалоИнтервала.СредняяНаработка,
	               |	ТаблицаНачалоИнтервала.ДатаРаботыС,
	               |	ТаблицаНачалоИнтервала.РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаВозможныхИнтервалов
	               |ИЗ
	               |	ТаблицаНачалоИнтервала КАК ТаблицаНачалоИнтервала
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонецИнтервала КАК ТаблицаКонецИнтервала
	               |		ПО ТаблицаНачалоИнтервала.Объект = ТаблицаКонецИнтервала.Объект
	               |			И ТаблицаНачалоИнтервала.Показатель = ТаблицаКонецИнтервала.Показатель
	               |			И ТаблицаНачалоИнтервала.НачалоИнтервала < ТаблицаКонецИнтервала.КонецИнтервала
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаВозможныхИнтервалов.Объект,
	               |	МАКСИМУМ(ТаблицаВозможныхИнтервалов.НачалоИнтервала) КАК НачалоИнтервала,
	               |	ТаблицаВозможныхИнтервалов.КонецИнтервала,
	               |	ТаблицаВозможныхИнтервалов.Показатель,
	               |	ТаблицаВозможныхИнтервалов.СредняяНаработка,
	               |	ТаблицаВозможныхИнтервалов.ДатаРаботыС,
	               |	ТаблицаВозможныхИнтервалов.РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаИнтерваловПромежуточная
	               |ИЗ
	               |	ТаблицаВозможныхИнтервалов КАК ТаблицаВозможныхИнтервалов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаВозможныхИнтервалов.Объект,
	               |	ТаблицаВозможныхИнтервалов.КонецИнтервала,
	               |	ТаблицаВозможныхИнтервалов.Показатель,
	               |	ТаблицаВозможныхИнтервалов.СредняяНаработка,
	               |	ТаблицаВозможныхИнтервалов.ДатаРаботыС,
	               |	ТаблицаВозможныхИнтервалов.РодительИерархии
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.Объект,
	               |	ТаблицаДанных.ДатаРаботыС,
	               |	МИНИМУМ(ТаблицаКонецИнтервалаПервый.КонецИнтервала),
	               |	ТаблицаДанных.Показатель,
	               |	ТаблицаКонецИнтервалаПервый.СредняяНаработка,
	               |	ТаблицаКонецИнтервалаПервый.ДатаРаботыС,
	               |	ТаблицаДанных.РодительИерархии
	               |ИЗ
	               |	ТаблицаСРодителем КАК ТаблицаДанных
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКонецИнтервалаПервый КАК ТаблицаКонецИнтервалаПервый
	               |		ПО ТаблицаДанных.Объект = ТаблицаКонецИнтервалаПервый.Объект
	               |			И ТаблицаДанных.Показатель = ТаблицаКонецИнтервалаПервый.Показатель
	               |			И ТаблицаДанных.ДатаРаботыС < ТаблицаКонецИнтервалаПервый.КонецИнтервала
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаДанных.Объект,
	               |	ТаблицаДанных.ДатаРаботыС,
	               |	ТаблицаДанных.Показатель,
	               |	ТаблицаКонецИнтервалаПервый.СредняяНаработка,
	               |	ТаблицаКонецИнтервалаПервый.ДатаРаботыС,
	               |	ТаблицаДанных.РодительИерархии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИнтерваловПромежуточная.Объект,
	               |	МИНИМУМ(ТаблицаИнтерваловПромежуточная.НачалоИнтервала) КАК НачалоИнтервала,
	               |	ТаблицаИнтерваловПромежуточная.КонецИнтервала,
	               |	ТаблицаИнтерваловПромежуточная.Показатель,
	               |	ТаблицаИнтерваловПромежуточная.СредняяНаработка,
	               |	ТаблицаИнтерваловПромежуточная.ДатаРаботыС,
	               |	ТаблицаИнтерваловПромежуточная.РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаИнтервалов
	               |ИЗ
	               |	ТаблицаИнтерваловПромежуточная КАК ТаблицаИнтерваловПромежуточная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаИнтерваловПромежуточная.Показатель,
	               |	ТаблицаИнтерваловПромежуточная.КонецИнтервала,
	               |	ТаблицаИнтерваловПромежуточная.Объект,
	               |	ТаблицаИнтерваловПромежуточная.СредняяНаработка,
	               |	ТаблицаИнтерваловПромежуточная.ДатаРаботыС,
	               |	ТаблицаИнтерваловПромежуточная.РодительИерархии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИнтервалов.Объект,
	               |	ТаблицаИнтервалов.НачалоИнтервала КАК НачалоИнтервала,
	               |	ТаблицаИнтервалов.КонецИнтервала КАК КонецИнтервала,
	               |	ТаблицаИнтервалов.Показатель,
	               |	ТаблицаИнтервалов.СредняяНаработка,
	               |	ТаблицаИнтервалов.ДатаРаботыС,
	               |	торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период,
	               |	ТаблицаИнтервалов.РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаИнтерваловСДатамиПараметровПересчета
	               |ИЗ
	               |	ТаблицаИнтервалов КАК ТаблицаИнтервалов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкаРегистрацииНаработкиЗависимыхОР КАК торо_НастройкаРегистрацииНаработкиЗависимыхОР
	               |		ПО ТаблицаИнтервалов.Объект = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ЗависимыйОбъектРемонта
	               |			И ТаблицаИнтервалов.РодительИерархии = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ОбъектРемонта
	               |			И ТаблицаИнтервалов.Показатель = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ПараметрНаработки
	               |			И ТаблицаИнтервалов.НачалоИнтервала <= торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период
	               |			И ТаблицаИнтервалов.КонецИнтервала > торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Объект,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.НачалоИнтервала,
	               |	ЕСТЬNULL(ТаблицаИнтерваловСДатамиПараметровПересчета.Период, ТаблицаИнтерваловСДатамиПараметровПересчета.КонецИнтервала) КАК КонецИнтервала,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Показатель,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.СредняяНаработка,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.ДатаРаботыС,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаИнтерваловСУчетомПараметровПересчета
	               |ИЗ
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета КАК ТаблицаИнтерваловСДатамиПараметровПересчета
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Объект,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Период,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.КонецИнтервала,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.Показатель,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.СредняяНаработка,
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета.ДатаРаботыС,
	               |	NULL
	               |ИЗ
	               |	ТаблицаИнтерваловСДатамиПараметровПересчета КАК ТаблицаИнтерваловСДатамиПараметровПересчета
	               |ГДЕ
	               |	НЕ ТаблицаИнтерваловСДатамиПараметровПересчета.Период ЕСТЬ NULL 
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.Объект,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.НачалоИнтервала,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.КонецИнтервала,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.Показатель,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.СредняяНаработка,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.ДатаРаботыС,
	               |	торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период,
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета.РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаКоэфициентовПересчета
	               |ИЗ
	               |	ТаблицаИнтерваловСУчетомПараметровПересчета КАК ТаблицаИнтерваловСУчетомПараметровПересчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкаРегистрацииНаработкиЗависимыхОР КАК торо_НастройкаРегистрацииНаработкиЗависимыхОР
	               |		ПО ТаблицаИнтерваловСУчетомПараметровПересчета.Объект = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ЗависимыйОбъектРемонта
	               |			И ТаблицаИнтерваловСУчетомПараметровПересчета.РодительИерархии = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ОбъектРемонта
	               |			И ТаблицаИнтерваловСУчетомПараметровПересчета.Показатель = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ПараметрНаработки
	               |			И ТаблицаИнтерваловСУчетомПараметровПересчета.НачалоИнтервала >= торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаКоэфициентовПересчета.Объект,
	               |	ТаблицаКоэфициентовПересчета.НачалоИнтервала,
	               |	ТаблицаКоэфициентовПересчета.КонецИнтервала,
	               |	ТаблицаКоэфициентовПересчета.Показатель,
	               |	ТаблицаКоэфициентовПересчета.СредняяНаработка,
	               |	ТаблицаКоэфициентовПересчета.ДатаРаботыС,
	               |	МАКСИМУМ(ТаблицаКоэфициентовПересчета.Период) КАК ДатаСреза,
	               |	ТаблицаКоэфициентовПересчета.РодительИерархии
	               |ПОМЕСТИТЬ ТаблицаДатСрезаКоэфициентовПересчета
	               |ИЗ
	               |	ТаблицаКоэфициентовПересчета КАК ТаблицаКоэфициентовПересчета
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаКоэфициентовПересчета.Объект,
	               |	ТаблицаКоэфициентовПересчета.НачалоИнтервала,
	               |	ТаблицаКоэфициентовПересчета.КонецИнтервала,
	               |	ТаблицаКоэфициентовПересчета.Показатель,
	               |	ТаблицаКоэфициентовПересчета.ДатаРаботыС,
	               |	ТаблицаКоэфициентовПересчета.СредняяНаработка,
	               |	ТаблицаКоэфициентовПересчета.РодительИерархии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДатСрезаКоэфициентовПересчета.Объект,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.НачалоИнтервала,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.КонецИнтервала,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.Показатель,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.СредняяНаработка,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.ДатаРаботыС,
	               |	ТаблицаДатСрезаКоэфициентовПересчета.ДатаСреза,
	               |	ЕСТЬNULL(торо_НастройкаРегистрацииНаработкиЗависимыхОР.КоэффициентПересчета, 1) КАК КоэффициентПересчета
	               |ПОМЕСТИТЬ ТаблицаИнтерваловСКоэффициентамиПересчета
	               |ИЗ
	               |	ТаблицаДатСрезаКоэфициентовПересчета КАК ТаблицаДатСрезаКоэфициентовПересчета
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НастройкаРегистрацииНаработкиЗависимыхОР КАК торо_НастройкаРегистрацииНаработкиЗависимыхОР
	               |		ПО ТаблицаДатСрезаКоэфициентовПересчета.Объект = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ЗависимыйОбъектРемонта
	               |			И ТаблицаДатСрезаКоэфициентовПересчета.РодительИерархии = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ОбъектРемонта
	               |			И ТаблицаДатСрезаКоэфициентовПересчета.Показатель = торо_НастройкаРегистрацииНаработкиЗависимыхОР.ПараметрНаработки
	               |			И ТаблицаДатСрезаКоэфициентовПересчета.ДатаСреза = торо_НастройкаРегистрацииНаработкиЗависимыхОР.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаИнтервалов.Объект,
	               |	МИНИМУМ(ТаблицаИнтервалов.НачалоИнтервала) КАК НачалоИнтервала,
	               |	МАКСИМУМ(ТаблицаИнтервалов.КонецИнтервала) КАК КонецИнтервала,
	               |	ТаблицаИнтервалов.Показатель,
	               |	СУММА(ТаблицаИнтервалов.СредняяНаработка * ТаблицаИнтервалов.КоэффициентПересчета * РАЗНОСТЬДАТ(ТаблицаИнтервалов.НачалоИнтервала, ТаблицаИнтервалов.КонецИнтервала, СЕКУНДА)) КАК Наработка,
	               |	ТаблицаИнтервалов.ДатаРаботыС
	               |ИЗ
	               |	ТаблицаИнтерваловСКоэффициентамиПересчета КАК ТаблицаИнтервалов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаИнтервалов.Объект,
	               |	ТаблицаИнтервалов.Показатель,
	               |	ТаблицаИнтервалов.ДатаРаботыС";
				   
				   
				   
	Запрос.УстановитьПараметр("ТаблицаДанных", Объект.НаработкаОбъектов.Выгрузить());
	ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
	
	ОчиститьЗначениеНаработки();
	
	ТаблицаДанныхДляРасчетаПоПлановойНаработке = Объект.НаработкаОбъектов.Выгрузить().СкопироватьКолонки();
	
	Для Каждого СтрокаТЧ Из Объект.НаработкаОбъектов Цикл
		МассивСтрокРезультата = ТаблицаРезультатов.НайтиСтроки(Новый Структура("Объект, Показатель, ДатаРаботыС", СтрокаТЧ.Объект, СтрокаТЧ.Показатель, СтрокаТЧ.ДатаРаботыС));
		
		Если Не МассивСтрокРезультата.Количество() = 0 Тогда
			СтрокаТЧ.Наработка = МассивСтрокРезультата[0].Наработка;
			СтрокаТЧ.НаработкаСНачалаЭксплуатации = СтрокаТЧ.Наработка + 
																СтрокаТЧ.НаработкаСНачалаЭксплуатацииНачало;
			СтрокаТЧ.НовоеЗначение = СтрокаТЧ.Наработка + СтрокаТЧ.СтароеЗначение;

			ДатаНачалаИнтервала = МассивСтрокРезультата[0].КонецИнтервала;
			Если ДатаНачалаИнтервала <> СтрокаТЧ.ДатаРаботыПо Тогда
				НС = ТаблицаДанныхДляРасчетаПоПлановойНаработке.Добавить();
				НС.ДатаРаботыС = ДатаНачалаИнтервала;
				НС.ДатаРаботыПо = СтрокаТЧ.ДатаРаботыПо;
				НС.Объект = СтрокаТЧ.Объект;
				НС.Показатель = СтрокаТЧ.Показатель;
			КонецЕсли;
		Иначе
			НС = ТаблицаДанныхДляРасчетаПоПлановойНаработке.Добавить();
			НС.ДатаРаботыС = СтрокаТЧ.ДатаРаботыС;
			НС.ДатаРаботыПо = СтрокаТЧ.ДатаРаботыПо;
			НС.Объект = СтрокаТЧ.Объект;
			НС.Показатель = СтрокаТЧ.Показатель;
		КонецЕсли;	
	КонецЦикла;
	
	
	ТаблицаДанных = ПолучитьИнтервалыРасчетаПлановойНаработки(ТаблицаДанныхДляРасчетаПоПлановойНаработке, Объект.Дата);
	
	ВариантыПериодов = ТаблицаДанных.Скопировать(,"ПериодПлановойНаработки");
	ВариантыПериодов.Свернуть("ПериодПлановойНаработки",);
	Для Каждого Период Из ВариантыПериодов Цикл
		ТаблицаСПериодом = ТаблицаДанных.Скопировать(Новый Структура("ПериодПлановойНаработки",Период.ПериодПлановойНаработки));
		ТаблицаСНаработкой = торо_РаботаСНаработкой.РассчитатьВремяРаботыОРСПериодами(ТаблицаСПериодом,Период.ПериодПлановойНаработки);
		Для Каждого ЗаписьСНаработкой Из ТаблицаСНаработкой Цикл
			МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ОбъектРемонта,ДатаНачала,ДатаОкончания",
												ЗаписьСНаработкой.ОбъектРемонта,ЗаписьСНаработкой.ДатаНачала,ЗаписьСНаработкой.ДатаОкончания));
												
												
			Для Каждого Строка Из МассивСтрок Цикл
				Строка.ФактическаяНаработка = Строка.ФактическаяНаработка 
												+ ЗаписьСНаработкой.Периодов / Строка.ПродолжительностьПериодаПлановойНаработки 
														* Строка.КоэффициентИспользованияОборудования * Строка.ПлановаяНаработка;									
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаДанных.Свернуть("ОбъектРемонта, ДатаРаботыС, ДатаРаботыПо, Показатель", "ФактическаяНаработка");
	
	Для Каждого СтрокаТЗ Из ТаблицаДанных Цикл
		
		МассивСтрокТЧ = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект, Показатель, ДатаРаботыПо",
												СтрокаТЗ.ОбъектРемонта, СтрокаТЗ.Показатель, СтрокаТЗ.ДатаРаботыПо));
			Для Каждого ЭлементМассива Из МассивСтрокТЧ Цикл
			
			ЭлементМассива.Наработка    = ЭлементМассива.Наработка + СтрокаТЗ.ФактическаяНаработка;
			ЭлементМассива.ДатаРаботыПо = ?(ЗначениеЗаполнено(СтрокаТЗ.ДатаРаботыПо),СтрокаТЗ.ДатаРаботыПо, Объект.Дата);
			ЭлементМассива.НаработкаСНачалаЭксплуатации = ЭлементМассива.Наработка + 
																ЭлементМассива.НаработкаСНачалаЭксплуатацииНачало;
			ЭлементМассива.НовоеЗначение = ЭлементМассива.Наработка + ЭлементМассива.СтароеЗначение;
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИнтервалыРасчетаПлановойНаработки(НаработкаОбъектов, Дата)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(ТаблицаДокументаБаза.Объект КАК Справочник.торо_ОбъектыРемонта) КАК Объект,
	               |	ТаблицаДокументаБаза.Показатель,
	               |	ТаблицаДокументаБаза.ДатаРаботыС,
	               |	ТаблицаДокументаБаза.ДатаРаботыПо
	               |ПОМЕСТИТЬ ТаблицаДокументаБаза
	               |ИЗ
	               |	&ТаблицаДокумента КАК ТаблицаДокументаБаза
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ВЫБОР
	               |		КОГДА ТаблицаДокумента.ДатаРаботыС = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА ТаблицаДокумента.Объект.ДатаВводаВЭксплуатацию
	               |		ИНАЧЕ ТаблицаДокумента.ДатаРаботыС
	               |	КОНЕЦ КАК ДатаРаботыСДляОтбораСтрок,
	               |	ВЫБОР
	               |		КОГДА ТаблицаДокумента.ДатаРаботыПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	               |			ТОГДА &ДатаДокумента
	               |		ИНАЧЕ ТаблицаДокумента.ДатаРаботыПо
	               |	КОНЕЦ КАК ДатаРаботыПоДляОтбораСтрок
	               |ПОМЕСТИТЬ ТаблицаДокумента
	               |ИЗ
	               |	ТаблицаДокументаБаза КАК ТаблицаДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.Период,ТаблицаДокумента.ДатаРаботыС) КАК Период,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,Значение(Перечисление.Периодичность.День)) КАК ПериодПлановойНаработки,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,1) КАК ПродолжительностьПериодаПлановойНаработки,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,1) КАК КоэффициентИспользованияОборудования,
	               |	ЕСТЬNULL(торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,0) КАК ПлановаяНаработка
	               |ПОМЕСТИТЬ ТаблицаДокументаСПредшествующимиПараметрами
	               |ИЗ
	               |	ТаблицаДокумента КАК ТаблицаДокумента
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	               |		ПО ТаблицаДокумента.Объект = торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта
	               |			И ТаблицаДокумента.Показатель = торо_ПараметрыНаработкиОбъектовРемонта.Показатель
	               |			И ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок >= торо_ПараметрыНаработкиОбъектовРемонта.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	МАКСИМУМ(ТаблицаДокумента.Период) КАК ДатаСреза
	               |ПОМЕСТИТЬ ТаблицаДокументаСДатойСреза
	               |ИЗ
	               |	ТаблицаДокументаСПредшествующимиПараметрами КАК ТаблицаДокумента
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокументаСПредшествующимиПараметрами.Объект,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.Показатель,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыС,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыПо,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыПоДляОтбораСтрок,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.Период,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ПериодПлановойНаработки,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ПродолжительностьПериодаПлановойНаработки,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.КоэффициентИспользованияОборудования,
	               |	ТаблицаДокументаСПредшествующимиПараметрами.ПлановаяНаработка
	               |ПОМЕСТИТЬ ТаблицаДокументаСНачальнымиПараметрами
	               |ИЗ
	               |	ТаблицаДокументаСПредшествующимиПараметрами КАК ТаблицаДокументаСПредшествующимиПараметрами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаДокументаСДатойСреза КАК ТаблицаДокументаСДатойСреза
	               |		ПО ТаблицаДокументаСПредшествующимиПараметрами.Объект = ТаблицаДокументаСДатойСреза.Объект
	               |			И ТаблицаДокументаСПредшествующимиПараметрами.Показатель = ТаблицаДокументаСДатойСреза.Показатель
	               |			И ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыСДляОтбораСтрок = ТаблицаДокументаСДатойСреза.ДатаРаботыСДляОтбораСтрок
	               |			И ТаблицаДокументаСПредшествующимиПараметрами.ДатаРаботыПоДляОтбораСтрок = ТаблицаДокументаСДатойСреза.ДатаРаботыПоДляОтбораСтрок
	               |			И ТаблицаДокументаСПредшествующимиПараметрами.Период = ТаблицаДокументаСДатойСреза.ДатаСреза
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.Период,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка
	               |ПОМЕСТИТЬ ТаблицаДокументаСПараметрамиЗаИнтервал
	               |ИЗ
	               |	ТаблицаДокумента КАК ТаблицаДокумента
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	               |		ПО ТаблицаДокумента.Объект = торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта
	               |			И ТаблицаДокумента.Показатель = торо_ПараметрыНаработкиОбъектовРемонта.Показатель
	               |			И ТаблицаДокумента.ДатаРаботыС <= торо_ПараметрыНаработкиОбъектовРемонта.Период
	               |			И ТаблицаДокумента.ДатаРаботыПо > торо_ПараметрыНаработкиОбъектовРемонта.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	ТаблицаДокумента.Период,
	               |	ТаблицаДокумента.ПериодПлановойНаработки,
	               |	ТаблицаДокумента.ПродолжительностьПериодаПлановойНаработки,
	               |	ТаблицаДокумента.КоэффициентИспользованияОборудования,
	               |	ТаблицаДокумента.ПлановаяНаработка
	               |ПОМЕСТИТЬ ТаблицаДокументаСПараметрами
	               |ИЗ
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал КАК ТаблицаДокумента
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ТаблицаДокумента.Объект,
	               |	ТаблицаДокумента.Показатель,
	               |	ТаблицаДокумента.ДатаРаботыС,
	               |	ТаблицаДокумента.ДатаРаботыПо,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыПоДляОтбораСтрок,
	               |	ТаблицаДокумента.ДатаРаботыСДляОтбораСтрок,
	               |	ТаблицаДокумента.ПериодПлановойНаработки,
	               |	ТаблицаДокумента.ПродолжительностьПериодаПлановойНаработки,
	               |	ТаблицаДокумента.КоэффициентИспользованияОборудования,
	               |	ТаблицаДокумента.ПлановаяНаработка
	               |ИЗ
	               |	ТаблицаДокументаСНачальнымиПараметрами КАК ТаблицаДокумента
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.Объект,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.Показатель,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыС,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыПо,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.Период НачалоПериода,
	               |	ЕСТЬNULL(ТаблицаДокументаСПараметрамиЗаИнтервал1.Период, ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыПоДляОтбораСтрок) КАК КонецПериода,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ПериодПлановойНаработки,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ПродолжительностьПериодаПлановойНаработки,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.КоэффициентИспользованияОборудования,
	               |	ТаблицаДокументаСПараметрамиЗаИнтервал.ПлановаяНаработка
	               |ПОМЕСТИТЬ СоединениеТаблицСПараметрамиЗаИнтервал
	               |ИЗ
	               |	ТаблицаДокументаСПараметрами КАК ТаблицаДокументаСПараметрамиЗаИнтервал
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДокументаСПараметрами КАК ТаблицаДокументаСПараметрамиЗаИнтервал1
	               |		ПО ТаблицаДокументаСПараметрамиЗаИнтервал.Объект = ТаблицаДокументаСПараметрамиЗаИнтервал1.Объект
	               |			И ТаблицаДокументаСПараметрамиЗаИнтервал.Показатель = ТаблицаДокументаСПараметрамиЗаИнтервал1.Показатель
	               |			И ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыС = ТаблицаДокументаСПараметрамиЗаИнтервал1.ДатаРаботыС
	               |			И ТаблицаДокументаСПараметрамиЗаИнтервал.ДатаРаботыПо = ТаблицаДокументаСПараметрамиЗаИнтервал1.ДатаРаботыПо
	               |			И ТаблицаДокументаСПараметрамиЗаИнтервал.Период < ТаблицаДокументаСПараметрамиЗаИнтервал1.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Объект КАК ОбъектРемонта,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Показатель,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ДатаРаботыС,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ДатаРаботыПо,
	               |	МАКСИМУМ(СоединениеТаблицСПараметрамиЗаИнтервал.НачалоПериода) КАК ДатаНачала,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.КонецПериода КАК ДатаОкончания,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Объект.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПериодПлановойНаработки,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПродолжительностьПериодаПлановойНаработки,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.КоэффициентИспользованияОборудования,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПлановаяНаработка,
				   |	0 КАК ФактическаяНаработка
	               |ИЗ
	               |	СоединениеТаблицСПараметрамиЗаИнтервал КАК СоединениеТаблицСПараметрамиЗаИнтервал
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Показатель,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Объект,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ДатаРаботыС,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ДатаРаботыПо,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.Объект.ПлановыйГрафикРаботы,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.КонецПериода,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПериодПлановойНаработки,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПродолжительностьПериодаПлановойНаработки,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.КоэффициентИспользованияОборудования,
	               |	СоединениеТаблицСПараметрамиЗаИнтервал.ПлановаяНаработка";
				   
				   
	Запрос.УстановитьПараметр("ТаблицаДокумента", НаработкаОбъектов);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
								
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

&НаКлиенте
Процедура СинхронизироватьЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбъектДопДокумента = ДополнительныеПараметры.ОбъектДопДокумента;
	
	Если ОбъектДопДокумента.Проведен Тогда
		Для Каждого Строка Из Объект.НаработкаОбъектов Цикл
			Если Строка.Синхронизировать Тогда
				СН = Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
	|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
	|Иерархия,РаспространятьНаПодчиненных");

				НаработкаОбъектовПоказательПриИзменении(Неопределено);
				Строка.Синхронизировать = Ложь;
				Строка.РаспространятьНаПодчиненных = Истина;
				ЗаполнитьЗначенияСвойств(СН,Строка);
				РаспространитьНаПодчиненныхДляТекущейСтроки(СН);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСтатусовНаСервере()
	
	СписокЗн = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету Тогда
			СписокЗн.Добавить(Выборка.СтатусОРВУчете);
		КонецЕсли; 
	КонецЦикла;
	Возврат СписокЗн;
	
КонецФункции

&НаКлиенте
Процедура НаработкаОбъектовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока и НЕ ОтменаРедактирования Тогда
		ОбъектРемонта = Элемент.ТекущиеДанные.Объект;
		Показатель = Элемент.ТекущиеДанные.Показатель;
		
		// Проверяем, чтобы не было дублей показателей и ОР.
		СтрокиНаработкиСредиПодчиненных = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", ОбъектРемонта,Показатель));
		Если СтрокиНаработкиСредиПодчиненных.Количество() > 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже встречается среди подчиненных объектов ремонта объекта %3.'"),ОбъектРемонта,Показатель,СтрокиНаработкиСредиПодчиненных[0].РодительИерархии)); 
			Отказ = Истина;
		КонецЕсли;
		
		СтрокиНаработкиСредиПодчиненных = Объект.НаработкаОбъектов.НайтиСтроки(Новый Структура("Объект,Показатель", ОбъектРемонта,Показатель));
		Если СтрокиНаработкиСредиПодчиненных.Количество() > 1 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Невозможно добавить строку регистрации наработки, поскольку объект ремонта %1 с показателем %2 уже добавлен в документ.'"),ОбъектРемонта,Показатель)); 
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаработкаОбъектовДатаРаботыПоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.НаработкаОбъектов.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// удаление ранее введенных наработок подчиненных
	СтрокиПодчиненныхНаУдаление = Объект.НаработкаПодчиненныхОбъектов.НайтиСтроки(Новый Структура("РодительИерархии, Показатель",ТекСтрока.Объект, ТекСтрока.Показатель));
	Для Каждого СтрокаПодчиненного Из СтрокиПодчиненныхНаУдаление Цикл 
		Объект.НаработкаПодчиненныхОбъектов.Удалить(СтрокаПодчиненного);
	КонецЦикла;

	СН = Новый Структура("Объект,ДатаРаботыС,Показатель,ДатаРаботыПо,
	|СтароеЗначение,НовоеЗначение,НаработкаСНачалаЭксплуатации,Наработка,НаработкаСНачалаЭксплуатацииНачало,
	|Иерархия,РаспространятьНаПодчиненных");

	ЗаполнитьЗначенияСвойств(СН,ТекСтрока);
	РаспространитьНаПодчиненныхДляТекущейСтроки(СН);

	
КонецПроцедуры

&НаСервере 
Функция СписокОРИзАкта()
	СписокОР = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.ОбъектРемонта
	|ИЗ
	|	Документ.торо_АктОВыполненииРегламентногоМероприятия.МероприятияОбъектов КАК торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов
	|ГДЕ
	|	торо_АктОВыполненииРегламентногоМероприятияМероприятияОбъектов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.ДокументОснование);
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ТЗОР = Результат.Выгрузить();
		СписокОР.ЗагрузитьЗначения(ТЗОР.ВыгрузитьКолонку("ОбъектРемонта"));
	КонецЕсли;
	
	Возврат СписокОР;
	
КонецФункции

&НаСервере
Функция СтрокаДоступнаДляРедактирования(СтрПоиска)
	СтрокиНедоступноДляРедактирования = ТабНаработкаНедоступноДляРедактирования.НайтиСтроки(СтрПоиска);
	Возврат СтрокиНедоступноДляРедактирования.Количество() = 0; 
КонецФункции

&НаКлиенте
Процедура НаработкаОбъектовПередНачаломИзменения(Элемент, Отказ)
	ТекСтрокаНаработка = ЭтаФорма.Элементы.НаработкаОбъектов.ТекущиеДанные;
	СтрПоиска = Новый Структура("Объект,Показатель, ДатаРаботыПо", ТекСтрокаНаработка.Объект,ТекСтрокаНаработка.Показатель, ТекСтрокаНаработка.ДатаРаботыПо);
	Если НЕ СтрокаДоступнаДляРедактирования(СтрПоиска) Тогда
		Отказ = Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'По объекту ремонта %1 и показателю наработки %2 на дату, более позднюю чем %3, зарегистрирована наработка. Изменять наработку объекта в этом документе нельзя.'"),ТекСтрокаНаработка.Объект,ТекСтрокаНаработка.Показатель, ТекСтрокаНаработка.ДатаРаботыПо));
	КонецЕсли;
	 
КонецПроцедуры

#КонецОбласти

