#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт;  // Структура, хранящая данные для работы с уведомлениями.
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
		
	Если Не Отказ Тогда
		УстановитьУправляемыеБлокировки();
		ДвиженияПоРегистрам(Отказ);
		торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовОснований(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Не ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзОбработки") И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения ИЛИ ПометкаУдаления И Проведен Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор,
		               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID,
		               |	торо_ПлановыеРемонтныеРаботыСрезПоследних.Период
		               |ПОМЕСТИТЬ торо_ПлановыеРЕмонтныеРаботы
		               |ИЗ
		               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
		               |ГДЕ
		               |	НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен
		               |	И НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПлановыеРЕмонтныеРаботы.Период,
		               |	торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ID,
		               |	торо_ПлановыеРЕмонтныеРаботы.Регистратор
		               |ИЗ
		               |	Документ.торо_ЗакрытиеЗаявокИРемонтов.ЗакрываемыеРемонты КАК торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ торо_ПлановыеРЕмонтныеРаботы КАК торо_ПлановыеРЕмонтныеРаботы
		               |		ПО торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.ID = торо_ПлановыеРЕмонтныеРаботы.ID
		               |ГДЕ
		               |	торо_ЗакрытиеЗаявокИРемонтовЗакрываемыеРемонты.Ссылка = &Ссылка
		               |	И торо_ПлановыеРЕмонтныеРаботы.Период >= &ДатаДокумента
		               |	И торо_ПлановыеРЕмонтныеРаботы.Регистратор <> &Ссылка";
					   
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("ДатаДокумента", Дата);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно отменить проведение документа, т.к. на некоторые перемещенные ремонты уже введены новые документы планирования!'"));
			Отказ = Истина;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ППРИнициатор) И ППРИнициатор.Проведен Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно отменить проведение документа, т.к. план-график ППР, при расчете которого он был создан, уже проведен!'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ДвиженияПоРегистрам(Отказ)
	ДвиженияПоРегистру_торо_ОтмененныеЗаявки(Отказ);
	ДвиженияПоРегистру_торо_ОтмененныеРемонты(Отказ);
	ДвиженияПоРегистру_торо_ПлановыеРемонтныеРаботы(Отказ);
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ОтмененныеЗаявки(Отказ)
	
	Для Каждого Строка Из ЗакрываемыеЗаявки Цикл
		Движение = Движения.торо_ОтмененныеЗаявки.Добавить();
		Движение.Заявка = Строка.Заявка;
		Движение.ПричинаЗакрытия = Строка.ПричинаЗакрытия;
	КонецЦикла;
	Если не Отказ Тогда
		Движения.торо_ОтмененныеЗаявки.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ОтмененныеРемонты(Отказ)
	
	Для Каждого Строка Из ЗакрываемыеРемонты Цикл
		Движение = Движения.торо_ОтмененныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Строка);
		Движение.Период = Дата;
	КонецЦикла;
	Если Не Отказ Тогда
		Движения.торо_ОтмененныеРемонты.Записать();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПлановыеРемонтныеРаботы(Отказ)
	ТаблицаСоответствияID = ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок();
	
	Если ТаблицаСоответствияID.Количество() > 0 Тогда
		
		Для Каждого ИсходнаяСтрока Из ЗакрываемыеРемонты Цикл
			ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
			Если ТаблицаРегистр.Количество() > 0 Тогда
				СтрокаРегистр = ТаблицаРегистр[0];
				
				Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, СтрокаРегистр);
				Движение.Отменен = Истина;
				Движение.Период = СтрокаРегистр.Период+1;
				
				Если ИсходнаяСтрока.Перенесен Тогда
					Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
					Движение.ID = СтрокаРегистр.ID;
					Движение.ВидРемонтныхРабот = СтрокаРегистр.ВидРемонтныхРабот;
					Движение.ОбъектРемонтныхРабот = СтрокаРегистр.ОбъектРемонтныхРабот;
					Движение.Организация = СтрокаРегистр.Организация;
					Движение.Подразделение = СтрокаРегистр.Подразделение;
					Движение.ПериодичностьДетализации = СтрокаРегистр.ПериодичностьДетализации;
					Движение.ДатаНачалаРасчетная = СтрокаРегистр.ДатаНачалаРасчетная;
					Движение.Замещен = СтрокаРегистр.Замещен;
					Движение.Исполнитель = СтрокаРегистр.Исполнитель;
					Движение.Отменен = Ложь;
					Движение.СпособВыполнения = СтрокаРегистр.СпособВыполнения;
					Движение.СтоимостьРемонта = СтрокаРегистр.СтоимостьРемонта;
					Движение.ID_базы_расчета = СтрокаРегистр.ID_базы_расчета;
					Движение.ID_замещающего = СтрокаРегистр.ID_замещающего;
					Движение.ID_Корректировок = Новый УникальныйИдентификатор;
					Движение.ДатаНачалаРемонтныхРабот = ИсходнаяСтрока.НоваяДатаНачала;
					Движение.ДатаОкончанияРемонтныхРабот = ИсходнаяСтрока.НоваяДатаОкончания;
					Движение.Период = СтрокаРегистр.Период+1;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
	
	Если Не Отказ Тогда
		Движения.торо_ПлановыеРемонтныеРаботы.Записать();
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Период,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.НомерСтроки,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Активность,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Организация,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ПериодичностьДетализации,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Подразделение,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_Корректировок,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаОкончанияРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Исполнитель,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.СпособВыполнения,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_базы_расчета,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_замещающего,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРасчетная,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.СтоимостьРемонта
	|ИЗ
	|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	|			,
	|			ID В (&СписокID)
	|				И Регистратор <> &Ссылка) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних
	|ГДЕ
	|	НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен
	|	И НЕ торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен";
	
	Запрос.УстановитьПараметр("СписокID", ЗакрываемыеРемонты.ВыгрузитьКолонку("ID"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	// проверка на возможность отмены проведения
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ПлановыеРемонтныеРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗакрываемыеРемонты;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
		
	Блокировка.Заблокировать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
