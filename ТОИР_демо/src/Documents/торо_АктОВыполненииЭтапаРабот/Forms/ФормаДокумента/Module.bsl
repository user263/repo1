////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем РемонтОборудованияУдаляется;

&НаКлиенте
Перем СтруктураДанныхДоРедактирования;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") 
		И Не Параметры.Свойство("РабочееМесто") Тогда
		
		СсылкаНаДок = Параметры.Основание;
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(СсылкаНаДок,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если СсылкаНаДок <> Неопределено Тогда
			
			ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(СсылкаНаДок);
			
			Неотмененный = торо_ЗаполнениеДокументов.ВернутьIDНеотмененногоРемонта(СсылкаНаДок, СсылкаНаДок[ИмяТЧ]);
			
			Если ИмяТЧ <> Неопределено И Неотмененный <> "" Тогда
				СоответствиеИДДокументам = Новый Соответствие;
				СоответствиеИДДокументам.Вставить(Неотмененный, СсылкаНаДок);    
				торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(СоответствиеИДДокументам, Объект);
			КонецЕсли; 
			
		
		КонецЕсли; 
	КонецЕсли;
	
	Если Параметры.Свойство("РабочееМесто") Тогда
		Если ТипЗнч(Параметры.РабочееМесто) = Тип("Соответствие") Тогда
			торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(Параметры.РабочееМесто, Объект);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	УстановитьУсловноеОформление();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
		
		СлужебныеРеквизитыЗаполнитьНаСервере();
		
	КонецЕсли;
	
	ЗаполнитьДеревоРемонтныхРаботНаСервере();
	
	ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов");
	Элементы.ДеревоРемонтныхРаботВыполнено.Видимость = НЕ ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов;
	
	ОбновитьДокументыВнутреннегоПотребленияСервер();
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_АктОВыполненииЭтапаРабот;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
	ОтметитьНаличиеАналогов();
	
	РемонтыОборудованияОбновитьДокументыИсточники();
	
	// функциональные опции
	ФОУчетЗапчастей             = ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОУчетСостоянияОборудования = ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
	ФОИспользоватьГарантии      = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОЗапретитьРемонтГарантийногоОборудованияХозспособом = ПолучитьФункциональнуюОпцию("торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом");
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_АктОВыполненииЭтапаРабот);
	ПравоИнтерактивноеДобвалениеВнутреннихПотреблений = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	ПравоИнтерактивнаяПометкаУдаленияВнутреннихПотреблений = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.ВнутреннееПотреблениеТоваров);
	
	Элементы.СтраницаЗапчасти.Видимость = ФОУчетЗапчастей;
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, ДокументыОснования, УстановитьСвойствоЭлементовФормыОтПрав",Истина, Истина, Истина));
	// Конец ограничение ввода на основании
	
	Если Параметры.Свойство("РабочееМесто") Тогда
		Для каждого Стр Из Параметры.РабочееМесто Цикл
			Если ТипЗнч(Стр.Значение) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
				ДокОснованиеЗаявка = Стр.Значение;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ДокОснованиеЗаявка = Параметры.Основание;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно") И ТипЗнч(ДокОснованиеЗаявка) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
		|	торо_ТехнологическиеОперации.РаботаПовышеннойОпасности КАК РаботаПовышеннойОпасности
		|ПОМЕСТИТЬ РемРаб
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.РемонтныеРаботы КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехнологическиеОперации КАК торо_ТехнологическиеОперации
		|		ПО торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота = торо_ТехнологическиеОперации.Ссылка
		|ГДЕ
		|	торо_ЗаявкаНаРемонтРемонтныеРаботы.Ссылка = &Ссылка
		|	И ВЫРАЗИТЬ(торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота КАК Справочник.торо_ТехнологическиеОперации) ССЫЛКА Справочник.торо_ТехнологическиеОперации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РемРаб.РемонтнаяРабота,
		|	РемРаб.Родитель_ID,
		|	РемРаб.РемонтыОборудования_ID,
		|	РемРаб.ID,
		|	РемРаб.РаботаПОвышеннойОпасности,
		|	торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка
		|ПОМЕСТИТЬ НарядыНаРемРаб
		|ИЗ
		|	РемРаб КАК РемРаб
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтныеРаботы КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы
		|		ПО РемРаб.РемонтыОборудования_ID = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.РемонтыОборудования_ID
		|			И РемРаб.ID = торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.ID
		|ГДЕ
		|	РемРаб.РаботаПОвышеннойОпасности = ИСТИНА
		|	И торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка.Проведен
		|	И НЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтныеРаботы.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РемРаб.РемонтнаяРабота,
		|	РемРаб.РемонтыОборудования_ID,
		|	РемРаб.РаботаПОвышеннойОпасности
		|ПОМЕСТИТЬ РаботыПовышеннойОпасности
		|ИЗ
		|	РемРаб КАК РемРаб
		|ГДЕ
		|	РемРаб.РаботаПОвышеннойОпасности = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИСТИНА КАК ВводитьНаряд,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ВидРемонтныхРабот КАК ВидРемонта,
		|	РаботыПовышеннойОпасности.РемонтнаяРабота КАК РемонтнаяРабота,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК ДатаНачалаРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ДатаОкончанияРемонта,
		|	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID
		|ИЗ
		|	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		|		ЛЕВОЕ СОЕДИНЕНИЕ НарядыНаРемРаб КАК НарядыНаРемРаб
		|		ПО (НарядыНаРемРаб.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтыОборудования.ID)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РаботыПовышеннойОпасности КАК РаботыПовышеннойОпасности
		|		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = РаботыПовышеннойОпасности.РемонтыОборудования_ID
		|ГДЕ
		|	НарядыНаРемРаб.Ссылка ЕСТЬ NULL 
		|	И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ДокОснованиеЗаявка);
		
		Результат = Запрос.Выполнить();
		ТабОперацийБезНаряда.Загрузить(Результат.Выгрузить());
		
	КонецЕсли;
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла;
	
	ОбщееВремяВыполнения        = СформироватьПродолжительность(Объект.ОбщееВремяВыполнения);
	
	ОбновитьДоступностьДляРедактирования();
	
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	
	УправлениеВидимостью(ЭтотОбъект);
	
	ЭтоПервыйДокументВЦепочке = ЭтоПервыйДокументВЦепочке();
	ЭтоПоследнийДокументВЦепочке = ЭтоПоследнийДокументВЦепочке();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТабОперацийБезНаряда.Количество() = 0 Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.РемонтыОборудования.Количество() = 0 И Объект.ДокументыОснования.Количество() > 0 Тогда
			ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.РемонтыОборудования.Количество() > 0 Тогда
			РемОборудования = Объект.РемонтыОборудования[0].ID;
			НайденныеСтрокиМатериала = Объект.МатериальныеЗатраты.НайтиСтроки( Новый Структура("РемонтыОборудования_ID", РемОборудования )); 
			НайденныеСтрокиРемонта = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", РемОборудования ));
			Если НайденныеСтрокиРемонта.Количество() <> 0 И НайденныеСтрокиМатериала.Количество() = 0 Тогда
				НомерСтроки = НайденныеСтрокиРемонта[0].ПолучитьИдентификатор();
				ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, НомерСтроки);
			КонецЕсли; 
		КонецЕсли;
	Иначе
		
		Отказ = Истина;
		ОткрытьФорму("ОбщаяФорма.торо_ФормаОперацийБезНарядов", Новый Структура("ТабОперацийБезНаряда, ДокОснование", ТабОперацийБезНаряда, ДокОснованиеЗаявка),,,ВариантОткрытияОкна.ОтдельноеОкно,,);
		
	КонецЕсли;
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	Массив = Новый Массив;
	Массив.Добавить("ДокументыОснования");
	торо_СобытияФормКлиент.ЗаполнитьСтруктуруДанныхДоРедактирования(СтруктураДанныхДоРедактирования,Массив);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Для Каждого Строка Из Объект.РемонтыОборудования Цикл
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке номер %1 списка ремонтов оборудования дата начала периода ремонтных работ больше даты окончания (%2 - %3). Документ не записан!'"),
			Строка.НомерСтроки,Строка.ДатаНачала,Строка.ДатаОкончания));
			Отказ = Истина;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "РемонтыОборудования");
		
		Если ФОЗапретитьРемонтГарантийногоОборудованияХозспособом Тогда
			
			торо_ГарантийноеОбслуживание.ПроверитьНаличиеКонтрагентов(ТекущийОбъект, "ПодрядчикиРемонтныхРабот", "Контрагент", Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
	ОтметитьНаличиеАналогов();
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла; 
	
	ОбщееВремяВыполнения        = СформироватьПродолжительность(Объект.ОбщееВремяВыполнения);
	
	Для каждого Строка Из Объект.РемонтыОборудования Цикл
		Если ЗначениеЗаполнено(Строка.ДокументИсточник)
			И ТипЗнч(Строка.ДокументИсточник) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			Строка.ТипДокументаОснования = "торо_ВнешнееОснованиеДляРабот";
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("СозданДокументЧерезРМТехСпец", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ФОУчетСостоянияОборудования И Объект.Проведен И НЕ ЗавершениеРаботы Тогда
		
		МассивОбъектов = ПроверитьНаличиеДокументаПростоя();
		
		Если МассивОбъектов.Количество() > 0 Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект, Новый Структура("МассивОбъектов", МассивОбъектов)), НСтр("ru = 'Зафиксировать фактический простой объектов?'"), РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ВыполняемаяОперация")
		И ВыбранноеЗначение.ВыполняемаяОперация = "ВыборАналогаНоменклатурыДляРемонта" Тогда
		ЗаменитьМатериалыНаАналоги(ВыбранноеЗначение.АдресВХранилище);
		Модифицированность = Истина;
		
	ИначеЕсли ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
		Если ТекДанныеРемРаб = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ИмяТЧ = "МатериальныеЗатраты";
		ИмяРеквизита = "Номенклатура";
		СтруктураСтрокиОпераций = Новый Структура("РемонтыОборудования_ID, ID, Количество", ТекДанныеРемРаб.РемонтыОборудования_ID, ТекДанныеРемРаб.ID, ТекДанныеРемРаб.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
		
	Иначе
		ДеревоРемонтныхРаботОбработкаВыбора(, ВыбранноеЗначение, );
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("СтрокаРемонтовОборудования") Тогда
			УстановкаМатериалов(ВыбранноеЗначение);
			Если ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
				УстановкаИсполнителей(ВыбранноеЗначение);
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для каждого Элемент Из ВыбранноеЗначение Цикл
				УстановкаМатериалов(Элемент);
				Если ТипЗнч(Элемент.ДокументОснование) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
					УстановкаИсполнителей(Элемент);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли; 

	КонецЕсли;
	
	ЭтоПервыйДокументВЦепочке = ЭтоПервыйДокументВЦепочке();
	ЭтоПоследнийДокументВЦепочке = ЭтоПоследнийДокументВЦепочке();
	РемонтыОборудованияОбновитьДокументыИсточники();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "РабочееМестоТехСпец" Тогда
		
		Объект.Организация   = Параметр.Организация;
		Объект.Подразделение = Параметр.Подразделение;
		
		Для каждого Элем Из Параметр.МассивСтруктур Цикл
			ДеревоРемонтныхРаботОбработкаВыбора(, Элем, );
		КонецЦикла;
		
	ИначеЕсли (ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьАктНаПриемкуОборудованияИзРемонта" 
		        ИЛИ ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_АктНаПриемкуОборудованияИзРемонта")
					И Источник = ЭтаФорма Тогда
		
		Если НЕ (Параметр = Неопределено ИЛИ НЕ Параметр.Количество()) Тогда
			
			Для каждого Элем Из Параметр Цикл
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Объект.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Объект.Ссылка);
				торо_Печать.НапечататьДокумент("Документ.торо_АктОВыполненииЭтапаРабот", "АктНаПриемкуОборудованияИзРемонта", МассивПараметровКоманды,СтруктураПараметровКоманды);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли (ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьАктВыполненныхРемонтныхРабот"
					ИЛИ ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРемонтныхРабот")
					И Источник = ЭтаФорма Тогда
		
		Если НЕ (Параметр = Неопределено ИЛИ НЕ Параметр.Количество()) Тогда
			
			Для каждого Элем Из Параметр Цикл
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Объект.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Объект.Ссылка);
				торо_Печать.НапечататьДокумент("Документ.торо_АктОВыполненииЭтапаРабот", "АктВыполненныхРемонтныхРабот", МассивПараметровКоманды,СтруктураПараметровКоманды);
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли (ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьФормаКС2" 
		        ИЛИ ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьФормаКС3")
				И Источник = ЭтаФорма Тогда		
		Если НЕ (Параметр = Неопределено ИЛИ НЕ Параметр.Количество()) Тогда			
			
			Если ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьФормаКС2" Тогда
				ТекстЭлементаВсеПодрядчики = НСтр("ru = '(КС-2 для всех подрядчиков)'");
				ТекстПредупреждения = НСтр("ru = 'В документе для выбранных ремонтов не указан ни один подрядчик. Формы КС-2 не будут созданы.'");
				ЗаголовокСпискаВыбора = НСтр("ru = 'Формировать КС-2 для...'");
				ПечатнаяФорма = "ФормаКС2";
			Иначе
				ТекстЭлементаВсеПодрядчики = НСтр("ru = '(КС-3 для всех подрядчиков)'");
				ТекстПредупреждения = НСтр("ru = 'В документе для выбранных ремонтов не указан ни один подрядчик. Формы КС-3 не будут созданы.'");
				ЗаголовокСпискаВыбора = НСтр("ru = 'Формировать КС-3 для...'");
				ПечатнаяФорма = "ФормаКС3";
			КонецЕсли;
			
			МассивПодрядчиков = ПолучитьСписокПодрядчиков(Параметр);

			Если МассивПодрядчиков.Количество() = 0 Тогда
				ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);				
			Иначе
				// Перенесено из ТОиР 1.3
				УникальныйНомерВсе = Новый УникальныйИдентификатор;
				СписокПодрядчиков = Новый СписокЗначений;
				СписокПодрядчиков.Добавить(УникальныйНомерВсе, ТекстЭлементаВсеПодрядчики);
				//	
								Для Каждого ТекПодрядчик Из МассивПодрядчиков Цикл
					СписокПодрядчиков.Добавить(ТекПодрядчик);
				КонецЦикла;		
	
				СписокПодрядчиков.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОбработкаОповещенияФормироватьКС", ЭтотОбъект, Новый Структура("СписокПодрядчиков, УникальныйНомерВсе, Элем, ПечатнаяФорма", СписокПодрядчиков, УникальныйНомерВсе, Параметр, ПечатнаяФорма)), ЗаголовокСпискаВыбора);

			КонецЕсли;				
						
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ЗавершитьРемонтныеРаботыПриИзменении(Элемент)
	
	Если Объект.ЗавершитьРемонтныеРаботы Тогда
		
		Если Объект.РемонтыОборудования.Количество() <> 0 Тогда
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				Стр.ПроцентВыполненияРабот = 100;
				Стр.Выполнено = Истина;
				
				ПроставитьГалкиВВетке(Стр, Истина, 100);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Стр Из Объект.РемонтныеРаботы Цикл
			
			Стр.ПроцентВыполненияРабот = 100;
			Стр.Выполнено = Истина;
			
		КонецЦикла; 
		
		Для каждого Стр Из Объект.РемонтыОборудования Цикл
			
			Стр.ЗавершитьРемонт = Истина;	
			
		КонецЦикла; 
		
	Иначе
		
		Если Объект.РемонтыОборудования.Количество() <> 0 Тогда
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				Стр.ПроцентВыполненияРабот = 0;
				Стр.Выполнено = Ложь;
				
				ПроставитьГалкиВВетке(Стр, Ложь, 0);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Стр Из Объект.РемонтныеРаботы Цикл
			
			Стр.ПроцентВыполненияРабот = 0;
			Стр.Выполнено = Ложь;
			
		КонецЦикла;
		
		Для каждого Стр Из Объект.РемонтыОборудования Цикл
			
			Стр.ЗавершитьРемонт = Ложь;
			
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
	
	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СогласующиеРегистр.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Элемент",Элемент)),
		НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"),
		РежимДиалогаВопрос.ДаНет, 60);		
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееВремяВыполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(Объект.ОбщееВремяВыполнения,Элемент,Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееВремяВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщееВремяВыполнения        = СформироватьПродолжительность(ВыбранноеЗначение);
	Объект.ОбщееВремяВыполнения = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот
&НаКлиенте
Процедура ДеревоРемонтныхРаботПроцентВыполненияРаботПриИзменении(Элемент)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаДерева.ПроцентВыполненияРабот = мин(100, ТекСтрокаДерева.ПроцентВыполненияРабот);
	ТекСтрокаДерева.Выполнено = (ТекСтрокаДерева.ПроцентВыполненияРабот = 100);
	СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
	ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
	
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	
	строка = ВыполнитьПоискПоДереву(СтруктураСтроки);
	Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = строка.ПолучитьИдентификатор();
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПоискПоДереву(СтруктураСтроки)
	
	Для каждого СтрокаДерева из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> СтрокаДерева[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева)
	
	Для каждого Подстрока из СтрокаДерева.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> Подстрока[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат Подстрока;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, Подстрока); 
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
		ДатаНачалаРемонта      = ТекРемонт.ДатаНачала;
	Иначе
		РемонтыОборудования_ID = "";
		ДатаНачалаРемонта      = Неопределено;       
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID, ДатаНачалаРемонта", 
		РемонтыОборудования_ID, СтрокаРодитель.ID, СтрокаРодитель.РемонтыОборудования_ID, СтрокаРодитель.Родитель_ID, ДатаНачалаРемонта);
		СтруктураПараметры = Новый Структура;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивСтруктурВозврата = ДеревоРемонтныхРаботОбработкаВыбораНаСервереДляМассива(ВыбранноеЗначение, ТекущиеДанные, СтруктураПараметры);
	Иначе
		СтруктураВозврата = ДеревоРемонтныхРаботОбработкаВыбораНаСервере(ВыбранноеЗначение, ТекущиеДанные, СтруктураПараметры);
		МассивСтруктурВозврата = Новый Массив;
		МассивСтруктурВозврата.Добавить(СтруктураВозврата);
	КонецЕсли;
	
	Для Каждого СтруктураВозврата Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(СтруктураВозврата) = Тип("Строка") Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозврата);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Массивстрок = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ВыбранноеЗначение.СтрокаРемонтовОборудования.ID));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.РемонтыОборудования.ТекущаяСтрока = Идентиф;
			Если ФОИспользоватьОстановочные Тогда
				ОбновитьОстановочные(ВыбранноеЗначение.СтрокаРемонтовОборудования.ID);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РемонтыОборудованияПриАктивизацииСтроки(Элементы.РемонтыОборудования);
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		МассивID = Новый Массив;
		Для Каждого СтрокаРР Из ВыбранноеЗначение.МассивСтрокРемонтныхРабот Цикл
			МассивID.Добавить(СтрокаРР.ID);
		КонецЦикла;
		ОтметитьНаличиеАналогов(МассивID);
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		ОтметитьНаличиеАналогов();
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		Для Каждого СтрокаРР Из Объект.РемонтныеРаботы Цикл
			Если СтрокаРР.РемонтнаяРабота = ВыбранноеЗначение Тогда
				ОтметитьНаличиеАналогов(СтрокаРР.ID);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ИДВыбраннойСтроки) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ДеревоРемонтныхРабот.ПолучитьЭлементы(), ИДВыбраннойСтроки, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот = Новый Структура();
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("МатериальныеЗатраты");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("СерийныеЗапчасти");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("ТрудовыеЗатраты");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("ПодрядчикиРемонтныхРабот");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("РемонтныеРаботы");
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот Цикл
			
			Объект[КлючИЗначение.Ключ].Очистить();
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
		Отказ = Истина;
	Иначе
		
		СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
		ТекСтрокаДРР.ID, ТекСтрокаДРР.РемонтыОборудования_ID, ТекСтрокаДРР.Родитель_ID, ТекСтрокаДРР.РемонтнаяРабота);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи);
	КонецЕсли;
	
	Если Объект.РемонтыОборудования.Количество() Тогда
		ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Объект.РемонтыОборудования[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Для каждого Строка Из ЭлементыДереваРемРабот Цикл
		Элементы.ДеревоРемонтныхРабот.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		УстановитьОтборСтрокПоЗатратам();
		
		Если ТекДанные.РемонтнаяРабота = "Ремонтные работы" Тогда
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество = 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	РемID = ТекСтрока.РемонтыОборудования_ID;
	СтрукПоиска = Новый Структура("ID, РемонтыОборудования_ID", ID, РемID);
	
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(СтрукПоиска);
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		
		КоличествоБуфер = ?(СтрТЧ.Количество = 0, 1, СтрТЧ.Количество);
		Коэффициент = ТекСтрока.Количество / КоличествоБуфер;
		СтрТЧ.Количество = ТекСтрока.Количество;
		
		ПересчитатьЗатратыПоКоличеству(СтрукПоиска, Коэффициент);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекСтрока, Коэффициент);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботВыполненоПриИзменении(Элемент)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекСтрокаДерева.ПроцентВыполненияРабот = ?(ТекСтрокаДерева.Выполнено, 100, 0);
	СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
	
	Если НЕ ТекСтрокаДерева = Неопределено Тогда 
		МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураСтроки);
		Если МассивСтрок.Количество() Тогда
			МассивСтрок[0].Выполнено = ТекСтрокаДерева.Выполнено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
	
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	
	Если ТекСтрокаДерева.Выполнено Тогда
		
		Сумма = 0;
		КоличествоСтрок = 0;
		
		Для каждого Стр Из Объект.РемонтныеРаботы Цикл
			
			Сумма = Сумма + Стр.ПроцентВыполненияРабот;
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла; 
		
		Если КоличествоСтрок = 0 Тогда
			Если Объект.РемонтыОборудования.Количество() <= 1 Тогда
				Объект.ЗавершитьРемонтныеРаботы = Истина;
			Иначе
				МасСтр = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID));
				Если МасСтр.Количество() > 0 Тогда
					МасСтр[0].ЗавершитьРемонт = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Рез = Сумма / КоличествоСтрок;
			Если Рез <> 100 Тогда
				
				Для каждого Стр Из Объект.РемонтыОборудования Цикл
					флВсеРемонтныеРаботыЗавершены = Истина;
					МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Стр.ID));
					Для каждого Элем Из МассивСтрок Цикл
						Если Элем.ПроцентВыполненияРабот <> 100 Тогда 
							флВсеРемонтныеРаботыЗавершены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если флВсеРемонтныеРаботыЗавершены Тогда
						Стр.ЗавершитьРемонт = Истина;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Объект.ЗавершитьРемонтныеРаботы = Истина;
				Для каждого Стр Из Объект.РемонтыОборудования Цикл
					Стр.ЗавершитьРемонт = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.ЗавершитьРемонтныеРаботы = Ложь;
		Если НЕ Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено Тогда
			МасСтр = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID));
			Если МасСтр.Количество() > 0 Тогда
				МасСтр[0].ЗавершитьРемонт = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования
&НаКлиенте
Процедура РемонтыОборудованияЗавершитьРемонтПриИзменении(Элемент)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Если ТекДанные.ЗавершитьРемонт Тогда
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				
				Стр.ПроцентВыполненияРабот = 100;
				Стр.Выполнено = Истина;
				
				ПроставитьГалкиВВетке(Стр, Истина, 100);
				
			КонецЦикла; 
			
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекДанные.ID));
			
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ПроцентВыполненияРабот = 100;
				Стр.Выполнено = Истина;
				
			КонецЦикла; 
			
			ФлВсеРемонтыЗавершены = Истина;
			
			Для каждого Стр Из Объект.РемонтыОборудования Цикл
				Если НЕ Стр.ЗавершитьРемонт Тогда
					ФлВсеРемонтыЗавершены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ФлВсеРемонтыЗавершены Тогда 
				Объект.ЗавершитьРемонтныеРаботы = Истина;
			КонецЕсли;
			
		Иначе
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				
				Стр.ПроцентВыполненияРабот = 0;
				Стр.Выполнено = Ложь;
				
				ПроставитьГалкиВВетке(Стр, Ложь, 0);
				
			КонецЦикла; 
			
			Объект.ЗавершитьРемонтныеРаботы = Ложь;
			
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекДанные.ID));
			
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ПроцентВыполненияРабот = 0;
				Стр.Выполнено = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		ЗаполнитьДеревоРемонтныхРаботНаСервере(Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		
		Если ТекДанные.ЗавершитьРемонт Тогда
			Строки = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Строки[0].ПроцентВыполненияРабот = 100;
			Строки[0].Выполнено = Истина;
		КонецЕсли;
		
		УстановитьДоступностьДляРедактированияПоТекРемонту(ТекДанные.БлокироватьДляИзменения);
		
	Иначе
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
	КонецЕсли;
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
	УстановитьОтборыСвязанныхТаблицРемонты();
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	
	Если НЕ РемонтОборудованияУдаляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("РемонтыОборудованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),
		Вопрос,РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Строки = ДополнительныеПараметры.Элемент.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого идСтрока из Строки Цикл
			
			текСтрока = Объект.РемонтыОборудования.НайтиПоИдентификатору(идСтрока);
			
			ОчиститьСвязанныеТабличныеЧасти(, , текСтрока.ID);
			РемонтОборудованияУдаляется = Истина;
			Объект.РемонтыОборудования.Удалить(текСтрока);
			РемонтОборудованияУдаляется = Ложь;
		КонецЦикла;
		
		Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
			РазвернутьДеревоРемонтныхРабот(Строка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияДатаНачалаПриИзменении(Элемент)
	ТекРемонтID = Элементы.РемонтыОборудования.ТекущиеДанные.ID;
	МассивID = Новый Массив;
	Для Каждого СтрокаРР Из Объект.РемонтныеРаботы Цикл
		Если СтрокаРР.РемонтыОборудования_ID = ТекРемонтID Тогда
			МассивID.Добавить(СтрокаРР.ID);
		КонецЕсли;
	КонецЦикла;
	ОтметитьНаличиеАналогов(МассивID);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если ФОИспользоватьГарантии Тогда
			
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, ТекДанные.ДатаНачала, ТекДанные.ДатаОкончания);
			
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "РемонтыОборудованияВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.Форма.ФормаДокумента", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты
&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоЕдиницПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "МатериальныеЗатратыЕстьАналоги" Тогда
		ПодобратьАналогиНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		//
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		ТекСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		ОтметитьНаличиеАналогов(ТекСтрока.ID);
	КонецЕсли;
	
	Если НЕ НоваяСтрока ИЛИ (НоваяСтрока И Не ОтменаРедактирования) Тогда
		ТекСтрокаНоменклатура = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Номенклатура,ХарактеристикаНоменклатуры",
		ТекСтрокаНоменклатура.ID,
		ТекСтрокаНоменклатура.РемонтыОборудования_ID, 
		ТекСтрокаНоменклатура.Номенклатура,
		ТекСтрокаНоменклатура.ХарактеристикаНоменклатуры);
		
		Если Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
			Если НЕ ЗначениеЗаполнено(СтруктураПоиска.ХарактеристикаНоменклатуры) Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для технологической операции номенклатура %1 уже добавлена!"),СтруктураПоиска.Номенклатура);
			Иначе
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для технологической операции номенклатура %1 с характеристикой %2 уже добавлена!"),СтруктураПоиска.Номенклатура,СтруктураПоиска.ХарактеристикаНоменклатуры);
			КонецЕсли;
			ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодрядчикиРемонтныхРабот
&НаКлиенте
Процедура ПодрядчикиРемонтныхРаботПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	ТекСтрокаИсполнитель = Элементы.ПодрядчикиРемонтныхРабот.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Контрагент",
	ТекСтрокаИсполнитель.ID,
	ТекСтрокаИсполнитель.РемонтыОборудования_ID, 
	ТекСтрокаИсполнитель.Контрагент);
	
	Если Объект.ПодрядчикиРемонтныхРабот.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя указать одного исполнителя дважды для одного ремонта или операции!'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для ремонтов!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"), ТекстПредупреждения, Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты
&НаКлиенте
Процедура ТрудовыеЗатратыСотрудникПриИзменении(Элемент)
	ТекДанныеРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	МассивID = Новый Массив;
	ЗаполнитьМассивID(МассивID,ТекДанныеРабот);
	ОтметитьНаличиеАналогов(МассивID);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяРаботы,Элемент,Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
		ТекущиеДанные.ВремяРаботы      = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьИсполнителейПоБригадам(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.КТУ = 1;
			
			Если Не ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Тогда
				СтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
				ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
				ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
				ТекущиеДанные.ВремяРаботы = СтрокаРемонта.ДатаОкончания - СтрокаРемонта.ДатаНачала;
				ТекущиеДанные.ВремяРаботыТекст = СформироватьПродолжительность(ТекущиеДанные.ВремяРаботы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыДатаНачалаПриИзменении(Элемент)
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		РассчитатьВремя(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыДатаОкончанияПриИзменении(Элемент)
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		РассчитатьВремя(ТекДанные.ПолучитьИдентификатор());
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСерийныеЗапчасти

&НаКлиенте
Процедура СерийныеЗапчастиЕдиницаИзмеренияНоваяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока.СерииИспользуются = ПолучитьСерииИспользуются(ТекущаяСтрока.Номенклатура);
	ТекущаяСтрока.СерияНоменклатуры = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиНоменклатураНоваяПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуютсяДляНовой = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.НоменклатураНовая);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуютсяДляНовой Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатурыНовая = Неопределено;
	КонецЕсли;
	
	ТекущаяСтрока.СерииИспользуютсяДляНовой = ПолучитьСерииИспользуются(ТекущаяСтрока.НоменклатураНовая);
	ТекущаяСтрока.СерияНоменклатурыНовая = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Форма = ПолучитьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",,Элемент);
		
		ПользовательскийОтбор = Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Форма.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
		ПользовательскийОтбор.Элементы.Очистить();
		
		ЭлементОтбора = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ВидНоменклатуры");
		ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ПравоеЗначение 	= ВидНоменклатуры(ТекДанные.Номенклатура); 
		
		Форма.Открыть();
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Форма = ПолучитьФорму("Справочник.СерииНоменклатуры.ФормаВыбора",,Элемент);
		
		ПользовательскийОтбор = Форма.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Форма.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
		ПользовательскийОтбор.Элементы.Очистить();
		
		ЭлементОтбора = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ВидНоменклатуры");
		ЭлементОтбора.ВидСравнения      = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.Использование 	= Истина;
		ЭлементОтбора.ПравоеЗначение 	= ВидНоменклатуры(ТекДанные.НоменклатураНовая); 
		
		Форма.Открыть();
		
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
		ВидНоменклатурыВыбранный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ВидНоменклатуры");
		Если ВидНоменклатуры <> ВидНоменклатурыВыбранный Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
		ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СерийныеЗапчасти.ТекущиеДанные;
	ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
	ПараметрыПолученияДанных.Отбор.Вставить("ВидНоменклатуры",ВидНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанныеРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ОтменаРедактирования И НоваяСтрока И ТекДанныеРемонт <> Неопределено Тогда
		
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекДанныеРемонт.ID;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрываемыеПредписания
&НаКлиенте
Процедура ЗакрываемыеПредписанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекДанныеРемОборуд = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанныеРемОборуд = Неопределено Тогда
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран ремонт оборудования'"));
		Возврат;
		
	КонецЕсли;
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписанийОпераций",
	Новый Структура("ОбъектРемонтаДляОтбора", ТекДанныеРемОборуд.ОбъектРемонта), Элементы.ЗакрываемыеПредписания, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ТекСтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если ТекСтрокаРемонта = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран ремонт для прикрепления предписаний!'"));
			Возврат;
		КонецЕсли;
		
		СтрокиПредписания = Объект.ЗакрываемыеПредписания.НайтиСтроки(Новый Структура("ID", ВыбранноеЗначение.СтрокаРемонтовОборудования.ID));
		
		Если СтрокиПредписания.Количество() = 0 ИЛИ СтрокиПредписания[0].РемонтыОборудования_ID = ТекСтрокаРемонта.ID Тогда
			Если СтрокиПредписания.Количество() = 0 Тогда
				СтрокаПредписания = Объект.ЗакрываемыеПредписания.Добавить();
				
				СтрокаПредписания.ID 						= ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
				СтрокаПредписания.ОбъектРемонта 			= ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
				СтрокаПредписания.ПлановаяДатаРемонта 		= ВыбранноеЗначение.СтрокаРемонтовОборудования.ПлановаяДата;
				СтрокаПредписания.Описание					= ВыбранноеЗначение.СтрокаРемонтовОборудования.ОписаниеРемонта;
				СтрокаПредписания.РемонтыОборудования_ID 	= ТекСтрокаРемонта.ID;
			КонецЕсли;
			
			УвеличиватьКоличествоОпераций = Ложь;
			СтрДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
			ТекСтрокаДерева = Новый Структура("РемонтнаяРабота, ID, Родитель_ID", СтрДерева.РемонтнаяРабота, СтрДерева.ID, СтрДерева.Родитель_ID);
			
			Если ВыбранноеЗначение.Свойство("СтрокаРемонтныхРабот") Тогда
				ОбработкаВыборкаСтрокиРемРаботИзПредписаний(Неопределено, Неопределено, ВыбранноеЗначение,ВыбранноеЗначение.СтрокаРемонтныхРабот,ТекСтрокаРемонта, ТекСтрокаДерева, УвеличиватьКоличествоОпераций);
			ИначеЕсли ВыбранноеЗначение.Свойство("МассивСтрокРемонтныхРабот") Тогда
				
				ОбработкаВыборкаСтрокиРемРаботИзПредписанийНаСервере(ВыбранноеЗначение, ТекСтрокаРемонта.ID, ТекСтрокаДерева, УвеличиватьКоличествоОпераций);
				
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранное предписание уже прикреплено за другим ремонтом!'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыВнутреннееПотребление
&НаКлиенте
Процедура ДокументыВнутреннееПотреблениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ВнутреннееПотребление);
		ОписаниеОповещения  = Новый ОписаниеОповещения("ОбновитьДокументыВнутреннегоПотребления",ЭтаФорма);
		ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВнутреннееПотреблениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЭлементТекДанные  = Элемент.ТекущиеДанные;
		Если Не ЭлементТекДанные = Неопределено Тогда
			ЭлементТекДанные.РемонтыОборудования_ID = ТекущиеДанные.ID;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования
&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДоступныеТипы = ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере();	
	Если ДоступныеТипы=Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДокументыОснованияДокументОснование.ОграничениеТипа =ДоступныеТипы;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			Сообщение.Сообщить();
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда 
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				Сообщение.Сообщить();
			Иначе
				СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
				Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
					Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
					СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоЗаявке(Команда)
	
	ТекущийРемонтОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонтОборудования <> Неопределено Тогда
		IDРемонта = ТекущийРемонтОборудования.ID;
		СерийныеЗапчастиРемонта = Объект.СерийныеЗапчасти.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", IDРемонта));
		СерийныеЗапчасти = Объект.СерийныеЗапчасти;
		Если СерийныеЗапчастиРемонта.Количество() > 0 тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоЗаявкеЗавершение", ЭтотОбъект, Новый Структура("СерийныеЗапчасти", СерийныеЗапчасти)), НСтр("ru = 'Очистить табличную часть Серийные Запчасти документа?'"),РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьЗапчастиПоЗаявкеФрагмент(СерийныеЗапчасти);
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьЗапчастиПоНормам_ТекущийРемонт(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.СерийныеЗапчасти.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Запчасти"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗапчастиПоНормамНаСервере(ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоНормам_ВсеРемонты(Команда)
	
	Если Объект.СерийныеЗапчасти.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.СерийныеЗапчасти);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Запчасти"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗапчастиПоНормамНаСервере(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.СерийныеЗапчасти.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.СерийныеЗапчасти.Очистить();
		КонецЕсли;
		ЗаполнитьЗапчастиПоНормамНаСервере(ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗапчастиПоНормамНаСервере(ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьЗапчастиПоНормам(ЭтаФорма, ИДТекущегоРемонта);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьЗапчастиПоОснованию_ТекущийРемонт(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.СерийныеЗапчасти.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Запчасти"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗапчастиПоОснованиюНаСервере(ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.СерийныеЗапчасти.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.СерийныеЗапчасти);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Запчасти"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЗапчастиПоОснованиюНаСервере(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.СерийныеЗапчасти.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.СерийныеЗапчасти.Очистить();
		КонецЕсли;
		ЗаполнитьЗапчастиПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗапчастиПоОснованиюНаСервере(ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьЗапчастиПоОснованию(ЭтаФорма, ИДТекущегоРемонта);
	
КонецПроцедуры



&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.ТрудовыеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеРемонты(Команда)
	
	Если Объект.ТрудовыеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.ТрудовыеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ТрудовыеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьИсполнителейПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "ТрудовыеЗатраты");
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.МатериальныеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ВсеРемонты(Команда)
	
	Если Объект.МатериальныеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.МатериальныеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.МатериальныеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьМатериалыПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьМатериалыПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "МатериальныеЗатраты");
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
	МассивСтрокДляУдаленияПодрядчики = Новый Массив;
	Для каждого Строка из Объект.ПодрядчикиРемонтныхРабот Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияПодрядчики.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокДляУдаленияИсполнители = Новый Массив;
	Для каждого Строка из Объект.ТрудовыеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияИсполнители.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаленияПодрядчики = Объект.ПодрядчикиРемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	МассивСтрокДляУдаленияИсполнители = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.ПодрядчикиРемонтныхРабот.Количество() > 0 
		ИЛИ Объект.ТрудовыеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", Объект.ПодрядчикиРемонтныхРабот);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики Цикл
				Объект.ПодрядчикиРемонтныхРабот.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ПодрядчикиРемонтныхРабот.Очистить();
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители Цикл
				Объект.ТрудовыеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ТрудовыеЗатраты.Очистить();
		КонецЕсли;
		
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоОснованиюНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоОснованию(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта);
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьМатериалыПоОснованию_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
	МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.МатериальныеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоОснованиюНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОснованию_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоОснованиюНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.МатериальныеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоОснованиюНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.МатериальныеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.МатериальныеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьМатериалыПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоОснованиюНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьМатериалыПоОснованию(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьСтоимостиПоТарифнойСтавкеСотрудника(Команда)
	ЗаполнитьСтоимостиПоТарифнойСтавкеСотрудникаНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиПоСтоимостиЧасаКвалификации(Команда)
	ЗаполнитьСтоимостиПоСтоимостиЧасаКвалификацииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиПоРасценкеТехОперации(Команда)
	ЗаполнитьСтоимостиПоРасценкеТехОперацииНаСервере();
КонецПроцедуры



&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", Новый Структура("ОтборПоСтатусам, МножественныйВыбор", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"), Истина), Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот", 
	Новый Структура("Владелец", Объект.Ссылка), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	ФормаПодбора.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТрудоемкости(Команда)
	
	Объект.ОбщееВремяВыполнения = Объект.ТрудовыеЗатраты.Итог("ВремяРаботы");
	ОбщееВремяВыполнения        = СформироватьПродолжительность(Объект.ОбщееВремяВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПредписаний(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписаний",
	Новый Структура("Владелец", Объект.Ссылка), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьСтатус(Команда)
	
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВнутреннееПотребление(Команда)
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущийРемонт = Неопределено Тогда
		
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКСписаниюНаСервере(ТекущийРемонт.ID);
		
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			
			// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.			
			МассивСтрокНоменклатуры = Новый Массив;
			
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("МассивСтрокНоменклатуры",МассивСтрокНоменклатуры);
		
		СтруктураПараметров.Вставить("Комментарий" , Строка(Объект.Ссылка) + " " + ТекущийРемонт.ОбъектРемонта + " " + 
		ТекущийРемонт.ВидРемонтныхРабот + " " + ТекущийРемонт.ДатаНачала + " - " + 
		ТекущийРемонт.ДатаОкончания);
		
		СтруктураПараметров.Вставить("КлючНазначенияИспользования", "СОЗДАНИЕ_ПОТРЕБЛЕНИЯ_ИЗ_ТОИР");
		
		СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
		СтруктураПередаваемыхВОбработчикПараметров.Вставить("ТекущийРемонт_ID",ТекущийРемонт.ID);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов",ЭтаФорма,СтруктураПередаваемыхВОбработчикПараметров);
		ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументВнутреннееПотребление(Команда)
	ТекущиеДанные = Элементы.ДокументыВнутреннееПотребление.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПотреблениеСсылка",ТекущиеДанные.ВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"               ,ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,НСтр("ru = 'Удаление связи с заказом на внутреннее потребление'"));
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей(Команда)
	
	ПараметрыОткрытия = Новый Структура("Ссылка, МассивИсполнителей", Объект.Ссылка, ПолучитьМассивСтруктурИсполнителей());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаАвтоматическогоЗаполненияИсполнителей", ЭтаФорма);
	ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаАвтозаполненияИсполнителей",ПараметрыОткрытия, ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляДокумента(Команда)
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.ТрудовыеЗатраты);
	стрПараметров.Вставить("ВидПодбора", "ПоДокументу");
	стрПараметров.Вставить("ID", Неопределено);
	стрПараметров.Вставить("РемонтыОборудования_ID", Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.ТрудовыеЗатраты,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляОперации(Команда)
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов = Неопределено тогда
		ID_Отбора = Неопределено;
	Иначе
		МасИД = Новый Массив;
		ID_Отбора = Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасИД, ТекСтрокаДереваРемонтов.ПолучитьЭлементы());
		ID_Отбора.Добавить(ТекСтрокаДереваРемонтов.ID);
		
		Для каждого текСтрока из МасИД цикл
			ID_Отбора.Добавить(текСтрока.ID);
		КонецЦикла;
	КонецЕсли;
	
	ID_ОтбораРемонтов = ?(ТекСтрокаРемонтовОборудования = Неопределено, Неопределено, ТекСтрокаРемонтовОборудования.ID);
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.ТрудовыеЗатраты);
	стрПараметров.Вставить("ВидПодбора", "ПоОперации");
	стрПараметров.Вставить("ID", ID_Отбора);
	стрПараметров.Вставить("РемонтыОборудования_ID", ID_ОтбораРемонтов);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.ТрудовыеЗатраты,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте 
Процедура РассчитатьВремя(ИдСтроки)
	текДанные = Объект.ТрудовыеЗатраты.НайтиПоИдентификатору(ИдСтроки);
	текДанные.ВремяРаботы = текДанные.ДатаОкончания - текДанные.ДатаНачала;
	текДанные.ВремяРаботыТекст = СформироватьПродолжительность(текДанные.ВремяРаботы);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)
	
	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	|	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	|ГДЕ
	|	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивIDДляПроверки = Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Объект.Ссылка, МассивIDДляПроверки);
	
	Если Не МассивIDДляБлокировки = Неопределено Тогда
		
		Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
			СтрокаРемонта.БлокироватьДляИзменения = Не МассивIDДляБлокировки.Найти(СтрокаРемонта.ID) = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДляРедактированияПоТекРемонту(БлокироватьДляИзменения)
	
	Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр			= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.МатериальныеЗатраты.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.ДокументыВнутреннееПотребление.ТолькоПросмотр	= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.ТрудовыеЗатраты.ТолькоПросмотр					= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.ПодрядчикиРемонтныхРабот.ТолькоПросмотр		= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.СерийныеЗапчасти.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование;
	
	Элементы.ДобавитьВнутреннееПотребление.Доступность				= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивноеДобвалениеВнутреннихПотреблений;
	Элементы.УдалитьДокументВнутреннееПотребление.Доступность		= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивнаяПометкаУдаленияВнутреннихПотреблений;
	Элементы.ДеревоРемонтныхРаботДобавитьТехКарту.Доступность		= Не БлокироватьДляИзменения И ПравоРедактирование;
	Элементы.ДеревоРемонтныхРаботДобавитьТехОперацию.Доступность	= Не БлокироватьДляИзменения И ПравоРедактирование;
	Элементы.Заполнить.Доступность									= Не БлокироватьДляИзменения И ПравоРедактирование;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьХарактеристикиИспользуются(Номенклатура)
	
	Возврат НЕ Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать = Номенклатура.ИспользованиеХарактеристик;
	
КонецФункции

&НаСервере
Функция ПолучитьСерииИспользуются(Номенклатура)
	
	Возврат Номенклатура.ВидНоменклатуры.ИспользоватьСерии;
	
КонецФункции


&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.МатериальныеЗатраты,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.СерийныеЗапчасти,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура, НоменклатураНовая", "ХарактеристикиИспользуются", "ХарактеристикиИспользуютсяДляНовой")));
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.СерийныеЗапчасти,
	Новый Структура("ЗаполнитьПризнакСерииИспользуются",
	Новый Структура("Номенклатура, НоменклатураНовая", "СерииИспользуются", "СерииИспользуютсяДляНовой")));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	// Оформление поля характеристики для запчастей.	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерийныеЗапчастиХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеЗапчасти.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерийныеЗапчастиХарактеристикаНоменклатурыНовая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеЗапчасти.ХарактеристикиИспользуютсяДляНовой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	// Оформление поля Серия для запчастей.	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерийныеЗапчастиСерияНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеЗапчасти.СерииИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СерийныеЗапчастиСерияНоменклатурыНовая.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.СерийныеЗапчасти.СерииИспользуютсяДляНовой");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<серии не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);

	
	//
	
	// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТрудовыеЗатратыВремяРаботыТекст.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ТрудовыеЗатраты.ВремяРаботы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	
	
	// доступость вида ремонта для редактирования
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияВидРемонтныхРабот.Имя);
	
	
	ГруппаЭлементов = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПервыйДокументВЦепочке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	
	//// ИЛИ (	
	ГруппаЭлементовВложенная = ГруппаЭлементов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовВложенная.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ТипДокументаОснования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "торо_ВнешнееОснованиеДляРабот";
	///( И	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПоследнийДокументВЦепочке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	//) ИЛИ
	
	ГруппаЭлементовВложенная = ГруппаЭлементов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовВложенная.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ТипДокументаОснования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "торо_ВыявленныеДефекты";
	///( И	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПоследнийДокументВЦепочке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	
	//
	
	
	// Согласование++
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияСтатусДокумента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияСогласующий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияЗамещающий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	// Согласование--
	
КонецПроцедуры


&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПредписанийОбработчикОжидания()
	
	ПодборПредписаний(Элементы.РемонтыОборудованияПодборПредписаний);
	
КонецПроцедуры

&НаСервере
Функция ДеревоРемонтныхРаботОбработкаВыбораНаСервере(ТехОперация, ТекущиеДанные, СтруктураПараметры)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ТехОперация, ДокОбъект, ДокОбъект.РемонтыОборудования, 
		ДокОбъект.РемонтныеРаботы, ДокОбъект.ДокументыОснования, ТекущиеДанные, СтруктураПараметры, ДокОбъект.ТрудовыеЗатраты, 
		ДокОбъект.ПодрядчикиРемонтныхРабот);
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		ЗначениеВРеквизитФормы(СтруктураВозврата.ДокументОбъект, "Объект");
		ЗначениеВРеквизитФормы(СтруктураВозврата.Дерево, "ДеревоРемонтныхРабот");
		
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		Возврат Истина;
	ИначеЕсли ТипЗнч(СтруктураВозврата) = Тип("Строка") Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции

// Функция добавлена для обработки выбора сразу нескольких тех операций или тех карт.
&НаСервере
Функция ДеревоРемонтныхРаботОбработкаВыбораНаСервереДляМассива(МассивТехОпераций, ТекущиеДанные, СтруктураПараметры)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	МассивВозврата = Новый Массив;
	СтруктураПоследнегоДобавленного = Неопределено;
	
	Для Каждого ТехОперация Из МассивТехОпераций Цикл
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ТехОперация, ДокОбъект, ДокОбъект.РемонтыОборудования, 
		ДокОбъект.РемонтныеРаботы, ДокОбъект.ДокументыОснования, ТекущиеДанные,
		СтруктураПараметры, ДокОбъект.ТрудовыеЗатраты, 
		ДокОбъект.ПодрядчикиРемонтныхРабот);
		Если ТипЗнч(СтруктураВозврата) <> Тип("Структура") Тогда
			МассивВозврата.Добавить(СтруктураВозврата);
		Иначе
			СтруктураПоследнегоДобавленного = СтруктураВозврата;
		КонецЕсли;
	КонецЦикла;
	
	Если СтруктураПоследнегоДобавленного <> Неопределено Тогда
		ЗначениеВРеквизитФормы(СтруктураВозврата.ДокументОбъект, "Объект");
		ЗначениеВРеквизитФормы(СтруктураВозврата.Дерево, "ДеревоРемонтныхРабот");
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
	КонецЕсли;
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоРемонтныхРаботНаСервере(РемонтыОборудования_ID = Неопределено)
	
	ДеревоСФормы = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	ДеревоСФормы.Строки.Очистить();
	
	КорневаяСтрока = ДеревоСФормы.Строки.Добавить();
	КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";	
	КорневаяСтрока.Картинка = 4;
	
	Если Не РемонтыОборудования_ID = Неопределено Тогда
		ТЗРемонтныеРаботы = Объект.РемонтныеРаботы.Выгрузить(Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID)));
	Иначе
		ТЗРемонтныеРаботы = Неопределено;
	КонецЕсли;
	
	СоздатьВетвьДереваПоТЧ(КорневаяСтрока, ТЗРемонтныеРаботы);
	
	СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
	торо_Ремонты.РасставитьПроцентыРодительскихСтрок(ДеревоСФормы, СтруктураРодСтроки);
	
	ЗначениеВРеквизитФормы(ДеревоСФормы, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРемонтныхРабот(Родитель)
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(Родитель.ПолучитьИдентификатор());
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВетвьДереваПоТЧ(СтрокаДерева, ТЧРемонтныеРаботы = Неопределено, ЕстьКартинка = Истина)
	
	Если Объект.РемонтныеРаботы.Количество() > 0 И ЗначениеЗаполнено(Объект.РемонтныеРаботы[0].ID) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Родитель_ID", СтрокаДерева.ID);
		
		Если ТЧРемонтныеРаботы = Неопределено Тогда
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		Иначе
			МассивСтрок = ТЧРемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		Для Каждого Элемент Из МассивСтрок Цикл
			
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Элемент);
			
			Если ЕстьКартинка Тогда  
				НовСтрокаДерева.Картинка = торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(Элемент.РемонтнаяРабота);
			КонецЕсли;
			
			СоздатьВетвьДереваПоТЧ(НовСтрокаДерева, ТЧРемонтныеРаботы, ЕстьКартинка);
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("МатериальныеЗатраты");
	СтруктураТабличныхЧастей.Вставить("ТрудовыеЗатраты");
	СтруктураТабличныхЧастей.Вставить("ПодрядчикиРемонтныхРабот");
	СтруктураТабличныхЧастей.Вставить("СерийныеЗапчасти");
	СтруктураТабличныхЧастей.Вставить("ЗакрываемыеПредписания");
	
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					Если КлючИЗначение.Ключ = "СерийныеЗапчасти" Тогда
						Если Объект.СерийныеЗапчасти.Количество() > 0 Тогда
							СтрокиТЧ = Объект.СерийныеЗапчасти.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
							
							Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
								Объект.СерийныеЗапчасти.Удалить(СтрокаТЧ);
							КонецЦикла;
							
							
						КонецЕсли;
					Иначе
						
						Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
							
							СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
							
							Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
								Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
		
		Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
			Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
				Объект.РемонтныеРаботы.Очистить();
			КонецЕсли
		КонецЕсли;
		
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		
		Если Объект.РемонтныеРаботы.Количество() = 0 Тогда
			Объект.РемонтныеРаботы.Добавить();
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Объект.РемонтныеРаботы[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				
				Если КлючИЗначение.Ключ = "СерийныеЗапчасти" Тогда
					Если Объект.СерийныеЗапчасти.Количество() > 0 Тогда
						СтрокиТЧ = Объект.СерийныеЗапчасти.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект.СерийныеЗапчасти.Удалить(СтрокаТЧ);
						КонецЦикла;						
						
					КонецЕсли;
				Иначе
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
		Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
			Объект.РемонтныеРаботы.Очистить();
		КонецЕсли
	КонецЕсли;
	
	
	СтрокиЗапчастей = Объект.СерийныеЗапчасти.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
	
	Для Каждого СтрокаТЧ Из СтрокиЗапчастей Цикл
		Объект.СерийныеЗапчасти.Удалить(СтрокаТЧ);
	КонецЦикла;
	
	ЗаполнитьДеревоРемонтныхРаботНаСервере();  	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Дерево = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	СтруктураСвязанныхТЧ = Новый Структура();
	СтруктураСвязанныхТЧ.Вставить("МатериальныеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("СерийныеЗапчасти");
	СтруктураСвязанныхТЧ.Вставить("ТрудовыеЗатраты");
	СтруктураСвязанныхТЧ.Вставить("ПодрядчикиРемонтныхРабот");
	
	СтруктураСвязанныхТЧ.Вставить("РемонтныеРаботы");
	
	торо_Ремонты.УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева(Дерево, СтруктурыДляПередачи, ДокОбъект, СтруктураСвязанныхТЧ);
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыборкаСтрокиРемРаботИзПредписанийНаСервере(ВыбранноеЗначение, ТекСтрокаРемонтаID, ТекСтрокаДерева, УвеличиватьКоличествоОпераций)
	
	Дерево = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока из ВыбранноеЗначение.МассивСтрокРемонтныхРабот Цикл
		ДанныеТекСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота, Количество", 
		ТекСтрока.ID, ТекСтрока.РемонтыОборудования_ID, ТекСтрока.Родитель_ID, ТекСтрока.РемонтнаяРабота, ТекСтрока.Количество);
		ОбработкаВыборкаСтрокиРемРаботИзПредписаний(ДокОбъект, Дерево, ВыбранноеЗначение,ДанныеТекСтроки,ТекСтрокаРемонтаID, ТекСтрокаДерева, УвеличиватьКоличествоОпераций);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРемонтныхРабот");
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыборкаСтрокиРемРаботИзПредписаний(ДокОбъект, Дерево, ВыбранноеЗначение,ТекСтрока,ТекСтрокаРемонтаID, ТекСтрокаДерева, УвеличиватьКоличествоОпераций)
	
	Если Дерево = Неопределено Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	КонецЕсли;
	
	Если ДокОбъект = Неопределено Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	МассивСтрокОпераций = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID,РемонтнаяРабота",ТекСтрокаРемонтаID, ТекСтрока.РемонтнаяРабота));
	
	Если МассивСтрокОпераций.Количество() = 0 Тогда
		
		СтрокиДерева = Дерево.Строки.НайтиСтроки(Новый Структура("РемонтнаяРабота, ID, Родитель_ID", ТекСтрокаДерева.РемонтнаяРабота, ТекСтрокаДерева.ID, ТекСтрокаДерева.Родитель_ID), Истина);
		Если СтрокиДерева.Количество() Тогда
			СтрокаДерева = СтрокиДерева[0];
			Если ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				Пока ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Цикл
					СтрокаДерева = СтрокаДерева.Родитель;
				КонецЦикла;
			КонецЕсли;
			
			СтрокаРодитель = СтрокаДерева;
			
			РемонтыОборудования_ID = ТекСтрокаРемонтаID;
			
			ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID",
			РемонтыОборудования_ID,СтрокаРодитель.ID, СтрокаРодитель.РемонтыОборудования_ID, СтрокаРодитель.Родитель_ID);
			
			ОбработкаВыбораРемонтаНаСервере(Дерево, ДокОбъект, ТекСтрока, ТекущиеДанные);
			
		КонецЕсли;
		
	Иначе
		
		Если УвеличиватьКоличествоОпераций Тогда 
			
			УвеличиватьКоличествоОперацийНаСервере(Дерево, ДокОбъект, ТекСтрока, ТекСтрокаРемонтаID);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УвеличиватьКоличествоОперацийНаСервере(Дерево, ДокОбъект, ТекСтрока, ТекСтрокаРемонтаID)
	
	МассивСтрокДерева = Дерево.Строки.НайтиСтроки(Новый Структура("РемонтыОборудования_ID,РемонтнаяРабота",ТекСтрокаРемонтаID, ТекСтрока.РемонтнаяРабота),Истина);
	
	Для каждого ТекСтрокаДерева Из МассивСтрокДерева Цикл
		ТекСтрокаДерева.Количество = ТекСтрокаДерева.Количество + ТекСтрока.Количество;
		
		ID = ТекСтрокаДерева.ID;
		СтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если СтрТЧ.Количество() Тогда
			
			КоличествоБуфер = СтрТЧ[0].Количество;
			Коэффициент = ?(КоличествоБуфер = 0, 1, (СтрТЧ[0].Количество + ТекСтрока.Количество) / КоличествоБуфер);
			СтрТЧ[0].Количество = СтрТЧ[0].Количество + ТекСтрока.Количество;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРемонтаНаСервере(Дерево, ДокОбъект, ТекСтрока, ТекущиеДанные)
	
	торо_Ремонты.ОбработкаВыбораРемонта(Дерево, ТекСтрока.РемонтнаяРабота, ДокОбъект,ДокОбъект.РемонтыОборудования,ДокОбъект.РемонтныеРаботы,ДокОбъект.ДокументыОснования,ТекущиеДанные,Новый Структура);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор строк табличных полей затрат по строке  дерева ремонтных работ.
//
Процедура УстановитьОтборСтрокПоЗатратам()
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	ID_Отбора = ТекСтрокаДереваРемонтов.ID;
	
	Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
		ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
		
		// Материальные затраты.
		Элементы.МатериальныеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
		// Трудовые затраты.
		Элементы.ТрудовыеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
		// Исполнители ремонтных работ.
		Элементы.ПодрядчикиРемонтныхРабот.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
	Иначе
		
		// Материальные затраты.
		Элементы.МатериальныеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
		// Трудовые затраты.
		Элементы.ТрудовыеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
		// Исполнители ремонтных работ.
		Элементы.ПодрядчикиРемонтныхРабот.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоЗаявкеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СерийныеЗапчасти = ДополнительныеПараметры.СерийныеЗапчасти;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗапчастиПоЗаявкеФрагмент(СерийныеЗапчасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоЗаявкеФрагмент(Знач СерийныеЗапчасти)
	
	Перем IDРемонта, ЗаявкаНаРемонт, МассивДляУдаления, МассивЗапчастей, НС, Строка, ТекущийРемонтОборудования, Элемент, ЭлЗапчасть;
	
	ТекущийРемонтОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	IDРемонта = ТекущийРемонтОборудования.ID;
	МассивДляУдаления = Новый Массив;
	Для Каждого Строка Из СерийныеЗапчасти Цикл
		Если Строка.РемонтыОборудования_ID = IDРемонта Тогда
			МассивДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Элемент Из МассивДляУдаления Цикл
		СерийныеЗапчасти.Удалить(Элемент);
	КонецЦикла;
	
	ЗаявкаНаРемонт = ПолучитьЗаявкуНаСервере(ТекущийРемонтОборудования.ДокументИсточник,IDРемонта);
	
	Если ЗаявкаНаРемонт <> Неопределено Тогда
		МассивЗапчастей = ПолучитьЗапчастиПоЗаявкеНаСервере(ЗаявкаНаРемонт,IDРемонта);
		Если МассивЗапчастей <> Неопределено Тогда
			
			Для Каждого ЭлЗапчасть Из МассивЗапчастей Цикл
				НС = СерийныеЗапчасти.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ЭлЗапчасть);
				НС.РемонтыОборудования_ID = IDРемонта;
			КонецЦикла;
			
		Иначе
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для данного объекта ремонта не ведётся учет серийных запчастей.'"));
		КонецЕсли;
	Иначе
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗапчастиПоЗаявкеФрагментЗавершение", ЭтотОбъект, Новый Структура("IDРемонта, СерийныеЗапчасти, ТекущийРемонтОборудования", IDРемонта, СерийныеЗапчасти, ТекущийРемонтОборудования)), НСтр("ru = 'Невозможно заполнить серийные запчасти из заявки. Заполнить по нормативам?'"),РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗапчастиПоЗаявкеФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	IDРемонта = ДополнительныеПараметры.IDРемонта;
	СерийныеЗапчасти = ДополнительныеПараметры.СерийныеЗапчасти;
	ТекущийРемонтОборудования = ДополнительныеПараметры.ТекущийРемонтОборудования;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		МассивЗапчастей = ПолучитьЗапчастиПоНормативамНаСервере(ТекущийРемонтОборудования.ОбъектРемонта,ТекущийРемонтОборудования.ВидРемонтныхРабот);
		Если МассивЗапчастей <> Неопределено Тогда
			
			Для Каждого ЭлЗапчасть Из МассивЗапчастей Цикл
				НС = СерийныеЗапчасти.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ЭлЗапчасть);
				НС.РемонтыОборудования_ID = IDРемонта;
			КонецЦикла;
			
		Иначе
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для данного объекта ремонта не ведётся учет серийных запчастей.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗапчастиПоЗаявкеНаСервере(Заявка, IDРемонта)
	
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура,
	|	СУММА(торо_ЗаявкаНаРемонтЗапчастиРемонта.Количество) КАК Количество,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.торо_ЗаявкаНаРемонт.ЗапчастиРемонта КАК торо_ЗаявкаНаРемонтЗапчастиРемонта
	|ГДЕ
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Ссылка = &Ссылка
	|	И торо_ЗаявкаНаРемонтЗапчастиРемонта.РемонтыОборудования_ID = &ID
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.Номенклатура,
	|	торо_ЗаявкаНаРемонтЗапчастиРемонта.ЕдиницаИзмерения";
	
	Запрос.УстановитьПараметр("Ссылка",Заявка);
	Запрос.УстановитьПараметр("ID", IDРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивВозврата.Добавить(Новый Структура("Номенклатура,Количество,ЕдиницаИзмерения",
		Выборка.Номенклатура,Выборка.Количество,Выборка.ЕдиницаИзмерения));
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗапчастиПоНормативамНаСервере(ОбъектРемонта,ВидРемонтныхРабот)
	
	Если НЕ ОбъектРемонта.ВестиУчетСерийныхЗапчастей Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
	|	СУММА(торо_НормыЗапчастейНаОбъектыРемонта.Количество) КАК Количество,
	|	ЗНАЧЕНИЕ(Перечисление.ГрадацииКачества.Новый) КАК Качество,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК ХарактеристикаНоменклатуры
	|ИЗ
	|	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
	|ГДЕ
	|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
	|	И торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта = &ВидРемонта
	|	И торо_НормыЗапчастейНаОбъектыРемонта.Количество <> 0
	|	И торо_НормыЗапчастейНаОбъектыРемонта.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта,
	|	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика,
	|	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектРемонта);
	Запрос.УстановитьПараметр("ТиповойОР",ОбъектРемонта.ТиповойОР);
	Запрос.УстановитьПараметр("ВидРемонта",ВидРемонтныхРабот);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		МассивВозврата.Добавить(Новый Структура("Номенклатура,Количество,Качество,ЕдиницаИзмерения",
		Выборка.Номенклатура,Выборка.Количество,Выборка.Качество,Выборка.ЕдиницаИзмерения));
	КонецЦикла;
	
	Возврат МассивВозврата;
	
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗаявкуНаСервере(Источник,IDРемонта)
	
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		Возврат Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		Запрос = новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	торо_НарядНаВыполнениеРемонтныхРабот.ДокументИсточник
		|ИЗ
		|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРабот
		|ГДЕ
		|	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка = &Ссылка
		|   	И торо_НарядНаВыполнениеРемонтныхРабот.ID = &ID";
		
		Запрос.УстановитьПараметр("Ссылка",Источник);
		Запрос.УстановитьПараметр("ID",IDРемонта);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если ТипЗнч(Выборка.ДокументИсточник) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
				Возврат Выборка.ДокументИсточник;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборыСвязанныхТаблицРемонты()
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		СтруктураОтбораID =  Новый ФиксированнаяСтруктура("РемонтыОборудования_ID",ТекДанные.ID);
		Элементы.СерийныеЗапчасти.ОтборСтрок = СтруктураОтбораID;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	МассивОбъектов = ДополнительныеПараметры.МассивОбъектов;
	
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ФормаСостояния = ПолучитьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта",,ЭтаФорма, Объект.Ссылка);
		ФормаСостояния.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод");
		ФормаСостояния.Объект.ДокументОснование = Объект.Ссылка;
		ФормаСостояния.Объект.Организация = Объект.Организация;
		ФормаСостояния.Объект.Подразделение = Объект.Подразделение;
		
		МассивДляЗаполненияТЧ = ПолучитьСтруктуруОбъектовРемонтаИПростоев(МассивОбъектов);
		Для каждого Элем Из МассивДляЗаполненияТЧ Цикл
			
			НС = ФормаСостояния.Объект.ОбъектыРемонта.Добавить();
			НС.ОбъектРемонта = Элем.ОбъектРемонта;
			НС.ДатаНачала = Элем.ДатаНачала;
			НС.ДатаОкончания = Элем.ДатаОкончания;
			НС.ВидЭксплуатацииНаПериод = Элем.ВидПростоя;
			НС.Иерархия = ПредопределенноеЗначение("Справочник.торо_СтруктурыОР.СтруктураПоМестонахождению");
			
		КонецЦикла; 
		
		ФормаСостояния.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОбъектовРемонтаИПростоев(МассивОбъектов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабРемонтовОборудования.ОбъектРемонта,
	|	ТабРемонтовОборудования.ВидРемонтныхРабот,
	|	ТабРемонтовОборудования.ДатаНачала,
	|	ТабРемонтовОборудования.ДатаОкончания,
	|	ТабРемонтовОборудования.ID
	|ПОМЕСТИТЬ ТабРемонтовОборудования
	|ИЗ
	|	&ТабРемонтовОборудования КАК ТабРемонтовОборудования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабРемонтовОборудования.ОбъектРемонта,
	|	ТабРемонтовОборудования.ДатаНачала,
	|	ДОБАВИТЬКДАТЕ(ТабРемонтовОборудования.ДатаНачала, СЕКУНДА, торо_ВерсииТехКартСрезПоследних.ТехКарта.ВремяПростоя) КАК ДатаОкончания,
	|	торо_ВерсииТехКартСрезПоследних.ТехКарта.ВидПростоя КАК ВидПростоя
	|ИЗ
	|	ТабРемонтовОборудования КАК ТабРемонтовОборудования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних КАК торо_ВерсииТехКартСрезПоследних
	|			ПО торо_НормативныеРемонтыОборудования.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
	|		ПО ТабРемонтовОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	|			И ТабРемонтовОборудования.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	|			И торо_НормативныеРемонтыОборудования.Приоритет = ИСТИНА
	|ГДЕ
	|	ТабРемонтовОборудования.ОбъектРемонта В(&МассивОбъектов)";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТабРемонтовОборудования", Объект.РемонтыОборудования.Выгрузить());
	Запрос.УстановитьПараметр("ТабРемонтныхРабот", Объект.РемонтныеРаботы.Выгрузить());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	МассивВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		МассивВозврата.Добавить(Новый Структура("ОбъектРемонта, ДатаНачала, ДатаОкончания, ВидПростоя", 
		Выборка.ОбъектРемонта, Выборка.ДатаНачала, Выборка.ДатаОкончания, Выборка.ВидПростоя));
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеДокументаПростоя()
	
	ТабРемонтов = Объект.РемонтыОборудования.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабОР.ОбъектРемонта,
	|	ТабОР.ДатаНачала,
	|	ТабОР.ДатаОкончания
	|ПОМЕСТИТЬ ВТОбъектовРемонта
	|ИЗ
	|	&Таб КАК ТабОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТОбъектовРемонта.ОбъектРемонта,
	|	ЕСТЬNULL(торо_ТекущееСостояниеОР.ВидЭксплуатации, ЛОЖЬ) КАК ВидЭксплуатации
	|ИЗ
	|	ВТОбъектовРемонта КАК ВТОбъектовРемонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|		ПО ВТОбъектовРемонта.ОбъектРемонта = торо_ТекущееСостояниеОР.ОбъектРемонта
	|			И (торо_ТекущееСостояниеОР.Период >= ВТОбъектовРемонта.ДатаНачала)
	|			И (торо_ТекущееСостояниеОР.Период <= ВТОбъектовРемонта.ДатаОкончания)
	|			И (торо_ТекущееСостояниеОР.ВидЭксплуатации.ТипЭксплуатации = ЗНАЧЕНИЕ(Перечисление.торо_ТипЭксплуатации.Простой))";
	
	Запрос.УстановитьПараметр("Таб", ТабРемонтов);
	
	ТабСостояний = Запрос.Выполнить().Выгрузить();
	
	МассивСтрокТЗ = ТабСостояний.НайтиСтроки(Новый Структура("ВидЭксплуатации", Ложь));
	
	МассивВозврата = Новый Массив;
	
	Для каждого Стр Из МассивСтрокТЗ Цикл
		
		МассивВозврата.Добавить(Стр.ОбъектРемонта);
		
	КонецЦикла; 
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
// Процедура выполняет пересчет затрат по количеству операций.
//
Процедура ПересчитатьЗатратыПоКоличеству(СтрукПоиска, Коэффициент)
	
	МассивСтрокМЗ = Объект.МатериальныеЗатраты.НайтиСтроки(СтрукПоиска);
	Для Каждого СтрокаТЧ Из МассивСтрокМЗ Цикл
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество * Коэффициент;
		СтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.КоличествоЕдиниц * Коэффициент;
		
	КонецЦикла; 
	
	МассивСтрокТЗ = Объект.ТрудовыеЗатраты.НайтиСтроки(СтрукПоиска);
	Для Каждого СтрокаТЧ Из МассивСтрокТЗ Цикл
		
		СтрокаТЧ.ВремяРаботы = СтрокаТЧ.ВремяРаботы * Коэффициент;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		РемID = СтрДерева.РемонтыОборудования_ID;
		СтрукПоиска = Новый Структура("ID, РемонтыОборудования_ID", ID, РемID);
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(СтрукПоиска);
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьЗатратыПоКоличеству(СтрукПоиска, Коэффициент);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
// Процедура выполняет заполнение процентов выполнения ремонтных работ.
//
// Параметры
//  СтрокаДерева – строка дерева ремонтных работ.
//
Процедура ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	торо_Ремонты.РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, СтруктураСтроки);
	
	Если НЕ СтруктураРодСтроки = Неопределено Тогда	
		торо_Ремонты.РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтруктураРодСтроки);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоРемонтныхРабот");
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьПроцентВыполненияВСтрокахТЧ(СтрокаДерева)
	
	Если ЗначениеЗаполнено(СтрокаДерева.ID) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ID",СтрокаДерева.ID);
		СтруктураПоиска.Вставить("Родитель_ID",СтрокаДерева.Родитель_ID);
		СтруктураПоиска.Вставить("РемонтыОборудования_ID",СтрокаДерева.РемонтыОборудования_ID);
		
		СтрокиРемРаботы = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиРемРаботы.Количество() <> 0 Тогда
			СтрокиРемРаботы[0].ПроцентВыполненияРабот = СтрокаДерева.ПроцентВыполненияРабот;
			СтрокиРемРаботы[0].Выполнено = ?(СтрокаДерева.ПроцентВыполненияРабот = 100, Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ТекСтрокаДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ОбновитьПроцентВыполненияВСтрокахТЧ(ТекСтрокаДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьГалкиВВетке(Строка, ЗначФлага, ЗначПроцента)
	
	Для каждого Стр Из Строка.ПолучитьЭлементы() Цикл
		
		Стр.ПроцентВыполненияРабот = ЗначПроцента;
		Стр.Выполнено = ЗначФлага;
		
		ПроставитьГалкиВВетке(Стр, ЗначФлага, ЗначПроцента);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещенияФормироватьКС(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	СписокПодрядчиков = ДополнительныеПараметры.СписокПодрядчиков;
	УникальныйНомерВсе = ДополнительныеПараметры.УникальныйНомерВсе;
	Элем = ДополнительныеПараметры.Элем;
	ПечатнаяФорма = ДополнительныеПараметры.ПечатнаяФорма;
	
	Выбор = ВыбранныйЭлемент;
	
	Если Выбор <> Неопределено Тогда
		ПодрядчикДляКС = Выбор.Значение;
		
		ФормироватьКСДля = Новый СписокЗначений;
		Если ПодрядчикДляКС = УникальныйНомерВсе Тогда
			СписокПодрядчиков.Удалить(СписокПодрядчиков.НайтиПоЗначению(УникальныйНомерВсе));
			ФормироватьКСДля = СписокПодрядчиков.Скопировать();
		Иначе
			ФормироватьКСДля.Добавить(Выбор.Значение);
		КонецЕсли; 
		
		СтруктураПараметровКоманды = Новый Структура("Док, ID, Подрядчик", Объект.Ссылка, Элем, ФормироватьКСДля);
		МассивПараметровКоманды = Новый Массив();
		МассивПараметровКоманды.Добавить(Объект.Ссылка);
		торо_Печать.НапечататьДокумент("Документ.торо_АктОВыполненииЭтапаРабот", ПечатнаяФорма, МассивПараметровКоманды,СтруктураПараметровКоманды);
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает список контрагентов для выбранного ремонта
&НаСервере
Функция ПолучитьСписокПодрядчиков(СписокIDРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Контрагент
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ПодрядчикиРемонтныхРабот КАК торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
	|	И торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокIDРемонта);
	
	МассивПодрядчиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат МассивПодрядчиков; 	
	
КонецФункции


&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт 
	
	торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеЗначенийКоличестваИлиУпаковки(ТекущиеДанные, ИзменениеКоличестваЕдиниц = Ложь)
	
	КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиНаСервере(ТекущиеДанные.ЕдиницаИзмерения);	
	
	Если КоэффициентУпаковки = 0 Тогда
		КоэффициентУпаковки = 1;
	КонецЕсли; 
	
	Если ИзменениеКоличестваЕдиниц Тогда
		
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоЕдиниц / КоэффициентУпаковки;
		
	Иначе	
		
		ТекущиеДанные.КоличествоЕдиниц = ТекущиеДанные.Количество * КоэффициентУпаковки;
		
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	
	Возврат Упаковка.Коэффициент;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДокументыВнутреннегоПотребления(Парам1 = Неопределено, Парам2 = Неопределено)	Экспорт
	ОбновитьДокументыВнутреннегоПотребленияСервер(Парам1, Парам2);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыВнутреннегоПотребленияСервер(Парам1 = Неопределено, Парам2 = Неопределено)	 	
	
	МассивID = Объект.РемонтыОборудования.Выгрузить(,"ID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ИнтеграцияДокументов.ДокументЕРП КАК ВнутреннееПотребление,
	|	ВЫБОР
	|		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	
	|	торо_ИнтеграцияДокументов.ID
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|ГДЕ
	|	торо_ИнтеграцияДокументов.ID В(&ID)
	|	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ВнутреннееПотреблениеТоваров)";
	
	Запрос.УстановитьПараметр("ID", МассивID);
	
	ДокументыВнутреннееПотребление.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивНоменклатурыКСписаниюНаСервере(ID)
	
	УжеСписаннаяНоменклатура = ПолучитьТаблицуСписаннойНоменклатурыНоменклатуры(ID);
	
	НоменклатураКЗаказу = Объект.МатериальныеЗатраты.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
	
	НоменклатураКЗаказу.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, ХарактеристикиИспользуются", "КоличествоЕдиниц");
	
	Товары = Новый Массив;
	
	Для каждого Строка Из НоменклатураКЗаказу Цикл
		
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеСписаннаяНоменклатура.Количество() > 0 Тогда
			НайдСтроки = УжеСписаннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры));
			
			
			Если Не НайдСтроки = Неопределено Тогда
				Для каждого НайденнаяСтрока Из НайдСтроки Цикл
					КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если УжеСписаннаяНоменклатура.Количество() = 0
			ИЛИ Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			Структура = Новый Структура("Номенклатура, Характеристика, ХарактеристикиИспользуются, Количество",
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			Строка.ХарактеристикиИспользуются,
			(Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры));
			Товары.Добавить(Структура);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуСписаннойНоменклатурыНоменклатуры(ID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыНаВнутреннееПотребление.Номенклатура,
	|	ЗаказыНаВнутреннееПотребление.Характеристика,
	|	СУММА(ЗаказыНаВнутреннееПотребление.КОформлению) КАК Количество
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|		ПО торо_ИнтеграцияДокументов.ДокументЕРП = ЗаказыНаВнутреннееПотребление.Регистратор
	|ГДЕ
	|	торо_ИнтеграцияДокументов.ID = &ID
	|	И торо_ИнтеграцияДокументов.ДокументТОИР = &ДокументТОИР
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотребление.Характеристика,
	|	ЗаказыНаВнутреннееПотребление.Номенклатура";
	
	Запрос.УстановитьПараметр("ID"           ,ID);
	Запрос.УстановитьПараметр("ДокументТОИР" , Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов(Результат, ДополнительныеПараметры) Экспорт
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ИнтеграцияДокументов.ДокументЕРП
		|ИЗ
		|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		|ГДЕ
		|	торо_ИнтеграцияДокументов.ID = &ID
		|	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
		|	И торо_ИнтеграцияДокументов.ДокументЕРП  = &СсылкаНаДокЕРП";
		
		Запрос.УстановитьПараметр("ID"             , ДополнительныеПараметры.ТекущийРемонт_ID);
		Запрос.УстановитьПараметр("Ссылка"         , Объект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП" , ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.ТекущийРемонт_ID, Объект.Ссылка, ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ID, ДокументТОИР, ДокументЕРП)
	
	Если Не ДокументЕРП = Документы.ВнутреннееПотреблениеТоваров.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		Запись.ID           = ID;
		Запись.ДокументТОИР = ДокументТОИР;
		Запись.ДокументЕРП  = ДокументЕРП;
		Запись.Записать();
		ОбновитьДокументыВнутреннегоПотребленияСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Помечен = ПометитьПотреблениеНаСервере(ДополнительныеПараметры);
		Если ТипЗнч(Помечен) <> Тип("Булево") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Помечен;
			Сообщение.Сообщить(); 
		КонецЕсли; 
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ПометитьПотреблениеНаСервере(СтруктураПараметров)
	
	Попытка
		
		ОбъектПотребление = СтруктураПараметров.ПотреблениеСсылка.ПолучитьОбъект();
		
		Если ОбъектПотребление.Проведен Тогда
			ОбъектПотребление.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектПотребление.ПометкаУдаления = Истина;
		ОбъектПотребление.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ID           = СтруктураПараметров.ID;
		МенеджерЗаписи.ДокументЕРП  = СтруктураПараметров.ПотреблениеСсылка;
		МенеджерЗаписи.ДокументТОИР = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
		
		ОбновитьДокументыВнутреннегоПотребленияСервер();
		
	Исключение
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМассивID(МассивID,ЭлементДерева)
	МассивID.Добавить(ЭлементДерева.ID);
	Для Каждого ЭлементДерева1 Из ЭлементДерева.ПолучитьЭлементы() Цикл
		ЗаполнитьМассивID(МассивID,ЭлементДерева1);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаменитьМатериалыНаАналоги(АдресВХранилище, Отказ = Ложь)
	
	ЗначенияРеквизитовНовыхСтрок = Новый Структура;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МассивКлючей						= Новый Массив;
	МассивУдаляемыхСтрок				= Новый Массив;
	ИзменяемыеСтроки					= Новый Соответствие;
	СтруктураОтбора						= Новый Структура;
	
	НаборыМатериалов					= ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// Проверяем возможность применения замены.
	
	Для Каждого СтрокаМатериал из НаборыМатериалов.Материалы Цикл
		
		СтруктураОтбора.Вставить("ID",СтрокаМатериал.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаМатериал.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаМатериал.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(СтруктураОтбора.ХарактеристикаНоменклатуры) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдено строки с материалом: %1, %2.'"),
				СтруктураОтбора.Номенклатура,СтруктураОтбора.ХарактеристикаНоменклатуры));
			Иначе
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдено строки с материалом: %1.'"),
				СтруктураОтбора.Номенклатура));
			КонецЕсли;
			
			
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокаМатЗатрат = НайденныеСтроки[0];
		
		Если СтрокаМатЗатрат.КоличествоЕдиниц < СтрокаМатериал.Количество Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка применения аналога. Материала ""%1"" недостаточно для замены.'"),
			СтрокаМатЗатрат.Номенклатура));
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаМатЗатрат.Количество = СтрокаМатериал.Количество Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаМатЗатрат);
		Иначе
			ИзменяемыеСтроки.Вставить(СтрокаМатЗатрат,Новый Структура("КоличествоЕдиниц,Количество",СтрокаМатЗатрат.КоличествоЕдиниц - СтрокаМатериал.Количество,СтрокаМатЗатрат.Количество - СтрокаМатериал.КоличествоУпаковок));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление строк или изменение количества.
	//
	Для Каждого СтрокаМатЗатрат из МассивУдаляемыхСтрок Цикл
		Объект.МатериальныеЗатраты.Удалить(СтрокаМатЗатрат);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ИзменяемыеСтроки Цикл
		КлючИЗначение.Ключ.Количество = КлючИЗначение.Значение.Количество;
		КлючИЗначение.Ключ.КоличествоЕдиниц = КлючИЗначение.Значение.КоличествоЕдиниц;
	КонецЦикла;
	
	// Добавление новых строк
	Для Каждого СтрокаАналога ИЗ НаборыМатериалов.Аналоги Цикл
		СтруктураОтбора.Вставить("ID",СтрокаАналога.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаАналога.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаАналога.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаАналога.ХарактеристикаНоменклатуры);
		
		МассивСтрок = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаНоменклатуры = МассивСтрок[0];
			СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.Количество + СтрокаАналога.Количество;
			СтрокаНоменклатуры.КоличествоЕдиниц = СтрокаНоменклатуры.КоличествоЕдиниц + СтрокаАналога.КоличествоЕдиниц;
		Иначе
			СтрокаНоменклатуры = Объект.МатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаАналога);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналогиНаКлиенте()
	СтрокаНоменклатуры = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если СтрокаНоменклатуры.ЕстьАналоги Тогда
		СтрокаРемонта = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.РемонтыОборудования_ID))[0];
		СтрокаРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.ID))[0];
		МассивСтрокРРТехКарта = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаРР.Родитель_ID));
		Если МассивСтрокРРТехКарта.Количество() Тогда
			ТехКарта = МассивСтрокРРТехКарта[0].РемонтнаяРабота;
		Иначе
			ТехКарта = ПредопределенноеЗначение("Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка");
		КонецЕсли;
		МассивИсполнителей = Новый Массив;
		Для Каждого СтрокаИсполнителя Из Объект.ТрудовыеЗатраты Цикл
			МассивИсполнителей.Добавить(СтрокаИсполнителя.Сотрудник);
		КонецЦикла;
		МассивИсполнителей = ПолучитьМассивПодразделений(МассивИсполнителей);
		
		СтруктураПараметров = (Новый Структура(
		"ID,РемонтыОборудования_ID,Номенклатура,
		|ХарактеристикаНоменклатуры,ЕдиницаИзмерения,КоличествоЕдиниц
		|,Количество, ОбъектРемонта, ВидРемонта,
		|МассивПодразделений, ТехКарта, ДатаРемонта",
		СтрокаНоменклатуры.ID,СтрокаНоменклатуры.РемонтыОборудования_ID,СтрокаНоменклатуры.Номенклатура,
		СтрокаНоменклатуры.ХарактеристикаНоменклатуры,СтрокаНоменклатуры.ЕдиницаИзмерения,СтрокаНоменклатуры.КоличествоЕдиниц,
		СтрокаНоменклатуры.Количество,СтрокаРемонта.ОбъектРемонта,СтрокаРемонта.ВидРемонтныхРабот,
		МассивИсполнителей,ТехКарта,СтрокаРемонта.ДатаНачала));
		
		
		ОткрытьФорму("ОбщаяФорма.торо_ФормаВыбораАналогаНоменклатурыДляРемонта",СтруктураПараметров,ЭтаФорма,Объект.Ссылка,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПодразделений(МассивИсполнителей)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСотрудников",МассивИсполнителей);
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник В(&МассивСотрудников)";
	Выборка = Запрос.Выполнить().Выбрать();
	МассивИсполнителей.Очистить();
	Пока Выборка.Следующий() Цикл
		МассивИсполнителей.Добавить(Выборка.ТекущееПодразделение);
	КонецЦикла;
	Возврат МассивИсполнителей;
КонецФункции

&НаСервере
Процедура ОтметитьНаличиеАналогов(МассивКлючей = Неопределено)
	
	Если НЕ ПолучитьФункциональнуюОпцию("торо_ИспользоватьАналогиНоменклатурыДляРемонтов") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ID КАК ID,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Таблица.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	|ПОМЕСТИТЬ МатериалыИУслуги
	|ИЗ
	|	&Материалы КАК Таблица
	|&&БлокОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ID,
	|	Таблица.РемонтнаяРабота,
	|	Таблица.Родитель_ID,
	|	Таблица.РемонтыОборудования_ID
	|ПОМЕСТИТЬ РемРаботы
	|ИЗ
	|	&РемРаботы КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ID,
	|	Таблица.Сотрудник КАК Исполнитель,
	|	Таблица.РемонтыОборудования_ID
	|ПОМЕСТИТЬ Исполнители
	|ИЗ
	|	&Исполнители КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Ремонты.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
	|	Ремонты.ID КАК РемонтыОборудования_ID,
	|	Ремонты.ВидРемонтныхРабот,
	|	Ремонты.ДатаНачала
	|ПОМЕСТИТЬ Ремонты
	|ИЗ
	|	&Ремонты КАК Ремонты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Номенклатура КАК Материал,
	|	МатериалыИУслуги.Характеристика КАК ХарактеристикаМатериала,
	|	ЕСТЬNULL(РемРаботыТехКарты.РемонтнаяРабота, ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка)) КАК ТехКарта,
	|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|	Ремонты.ОбъектРемонта.Организация КАК Организация,
	|	Ремонты.ВидРемонтныхРабот КАК ВидРемонта,
	|	Ремонты.ОбъектРемонта,
	|	Ремонты.ОбъектРемонта.Направление КАК НаправлениеОбъектаРемонта,
	|	Ремонты.ДатаНачала КАК ДатаРемонта,
	|	МатериалыИУслуги.ID,
	|	МатериалыИУслуги.РемонтыОборудования_ID
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	МатериалыИУслуги КАК МатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РемРаботы КАК РемРаботы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РемРаботы КАК РемРаботыТехКарты
	|			ПО РемРаботы.Родитель_ID = РемРаботыТехКарты.ID
	|				И (ВЫРАЗИТЬ(РемРаботы.РемонтнаяРабота КАК Справочник.торо_ТехнологическиеОперации) ССЫЛКА Справочник.торо_ТехнологическиеОперации)
	|				И (ВЫРАЗИТЬ(РемРаботыТехКарты.РемонтнаяРабота КАК Справочник.торо_ИдентификаторыТехКарт) ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	|		ПО МатериалыИУслуги.ID = РемРаботы.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Ремонты КАК Ремонты
	|		ПО МатериалыИУслуги.РемонтыОборудования_ID = Ремонты.РемонтыОборудования_ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Исполнители КАК Исполнители
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|			ПО Исполнители.Исполнитель = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|		ПО МатериалыИУслуги.ID = Исполнители.ID
	|			И МатериалыИУслуги.РемонтыОборудования_ID = Исполнители.РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Материал,
	|	ТаблицаНоменклатуры.ХарактеристикаМатериала,
	|	ТаблицаНоменклатуры.ID,
	|	ТаблицаНоменклатуры.РемонтыОборудования_ID,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА торо_АналогиНоменклатурыДляРемонтов.Регистратор ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьАналоги
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АналогиНоменклатурыДляРемонтов КАК торо_АналогиНоменклатурыДляРемонтов
	|		ПО ТаблицаНоменклатуры.Материал = торо_АналогиНоменклатурыДляРемонтов.Материал
	|			И ТаблицаНоменклатуры.ХарактеристикаМатериала = торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала
	|			И ТаблицаНоменклатуры.ДатаРемонта >= торо_АналогиНоменклатурыДляРемонтов.Период
	|			И (ВЫБОР
	|				КОГДА торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаНоменклатуры.ДатаРемонта <= торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения
	|			КОНЕЦ)
	|			И (торо_АналогиНоменклатурыДляРемонтов.ТехКарта = ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка)
	|				ИЛИ ЕСТЬNULL(ТаблицаНоменклатуры.ТехКарта, ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка)) = торо_АналогиНоменклатурыДляРемонтов.ТехКарта)
	|			И (&ИспользоватьУправлениеПерсоналом = ЛОЖЬ
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.Подразделение = ТаблицаНоменклатуры.Подразделение)
	|			И (торо_АналогиНоменклатурыДляРемонтов.ВидРемонта = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ВидРемонта = ТаблицаНоменклатуры.ВидРемонта)
	|			И (торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ТаблицаНоменклатуры.НаправлениеОбъектаРемонта)
	|			И (торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.Организация = ТаблицаНоменклатуры.Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.Материал,
	|	ТаблицаНоменклатуры.ХарактеристикаМатериала,
	|	ТаблицаНоменклатуры.ID,
	|	ТаблицаНоменклатуры.РемонтыОборудования_ID";
	
	Запрос.УстановитьПараметр("Исполнители",Объект.ТрудовыеЗатраты.Выгрузить(,"Сотрудник,ID,РемонтыОборудования_ID"));
	Запрос.УстановитьПараметр("Материалы",Объект.МатериальныеЗатраты.Выгрузить());
	Запрос.УстановитьПараметр("РемРаботы",Объект.РемонтныеРаботы.Выгрузить());
	Запрос.УстановитьПараметр("Ремонты",Объект.РемонтыОборудования.Выгрузить());
	Запрос.УстановитьПараметр("МассивID",МассивКлючей);
	Запрос.УстановитьПараметр("ИспользоватьУправлениеПерсоналом",ПолучитьФункциональнуюОпцию("торо_ИспользоватьУправлениеПерсоналом"));
	
	Если МассивКлючей = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&&БлокОтбора","");
	ИначеЕсли ТипЗнч(МассивКлючей) = Тип("Строка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&&БлокОтбора","ГДЕ
		|	Таблица.ID = &МассивID");
	ИначеЕсли ТипЗнч(МассивКлючей) = Тип("Массив") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&&БлокОтбора","ГДЕ
		|	Таблица.ID В (&МассивID)");
	Иначе
		Возврат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ID,РемонтыОборудования_ID",
		Выборка.Материал,Выборка.ХарактеристикаМатериала,Выборка.ID,Выборка.РемонтыОборудования_ID))[0].ЕстьАналоги = Выборка.ЕстьАналоги;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере()
	Возврат торо_СобытияФорм.ДокументыОснованияДокументОснованиеНачалоВыбора(ЭтаФорма);	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах)
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " мин. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивСтруктурИсполнителей()
	Массив = Новый Массив;
	
	Для каждого СтрокаРемонтовОборудования Из Объект.РемонтыОборудования Цикл
		
		МассивСтрокРемонныхРабот = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID));
		
		Для каждого СтрокаРемонтныхРабот Из МассивСтрокРемонныхРабот Цикл
			
			МассивИсполнителей = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID, ID", СтрокаРемонтовОборудования.ID, СтрокаРемонтныхРабот.ID));
			
			Для каждого СтрокаИсполнителя Из МассивИсполнителей Цикл
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				СтруктураСтроки.Вставить("Квалификация"          , СтрокаИсполнителя.Квалификация);
				СтруктураСтроки.Вставить("ДатаНачала"            , СтрокаИсполнителя.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончания"         , СтрокаИсполнителя.ДатаОкончания);
				СтруктураСтроки.Вставить("КТУ"                   , СтрокаИсполнителя.КТУ);
				СтруктураСтроки.Вставить("ВремяРаботы"           , СтрокаИсполнителя.ВремяРаботы);
				СтруктураСтроки.Вставить("СуммаКНачислению"      , СтрокаИсполнителя.СуммаКНачислению);
				СтруктураСтроки.Вставить("Сотрудник"             , СтрокаИсполнителя.Сотрудник);
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЦикла;
			
			Если Не ТипЗнч(СтрокаРемонтныхРабот.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт")
				И Не МассивИсполнителей.Количество() > 0 Тогда //нужно отразить хотя бы тех операции.
				
				СтруктураСтроки = Новый Структура();
				СтруктураСтроки.Вставить("РемонтыОборудования_ID", СтрокаРемонтовОборудования.ID);
				СтруктураСтроки.Вставить("ID"                    , СтрокаРемонтныхРабот.ID);
				СтруктураСтроки.Вставить("Родитель_ID"           , СтрокаРемонтныхРабот.Родитель_ID);
				СтруктураСтроки.Вставить("РемонтнаяРабота"       , СтрокаРемонтныхРабот.РемонтнаяРабота);
				СтруктураСтроки.Вставить("ОбъектРемонта"         , СтрокаРемонтовОборудования.ОбъектРемонта);
				СтруктураСтроки.Вставить("ВидРемонта"            , СтрокаРемонтовОборудования.ВидРемонтныхРабот);
				СтруктураСтроки.Вставить("ДатаНачалаРемонта"     , СтрокаРемонтовОборудования.ДатаНачала);
				СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  , СтрокаРемонтовОборудования.ДатаОкончания);
				
				СтруктураСтроки.Вставить("Квалификация");
				СтруктураСтроки.Вставить("ДатаНачала");
				СтруктураСтроки.Вставить("ДатаОкончания");
				СтруктураСтроки.Вставить("КТУ");
				СтруктураСтроки.Вставить("ВремяРаботы");
				СтруктураСтроки.Вставить("СуммаКНачислению");
				СтруктураСтроки.Вставить("Сотрудник");
				
				Массив.Добавить(СтруктураСтроки);
				
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЦикла; 
	
	Возврат Массив;
	
КонецФункции	

&НаКлиенте
Процедура ОбработкаАвтоматическогоЗаполненияИсполнителей(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		Объект.ТрудовыеЗатраты.Очистить();
		Для каждого СтрокаМассива Из Результат Цикл
			НС = Объект.ТрудовыеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, СтрокаМассива);
			НС.ВремяРаботы = НС.ДатаОкончания - НС.ДатаНачала;
			НС.ВремяРаботыТекст = СформироватьПродолжительность(НС.ВремяРаботы);
		КонецЦикла; 
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(ДокОбъект)
	Элементы = ДокОбъект.Элементы;
	Объект = ДокОбъект.Объект;
	Элементы.ДеревоСогласованияУтвердитьСтатус.Доступность = ЗначениеЗаполнено(Объект.СпособСогласования);
КонецПроцедуры

&НаСервере
// Проверяет, есть ли документы, созданные на основании данного и документы, на оснвоании которого был введен текущий, 
// кроме Выявленных дефектов и Внешнего основания
Функция ЭтоПервыйДокументВЦепочке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументыОснования.ДокументИсточник
	|ПОМЕСТИТЬ ДокументыОснования_
	|ИЗ
	|	&ДокументыОснования КАК ДокументыОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОснования_.ДокументИсточник КАК Ссылка
	|ПОМЕСТИТЬ ТабДокументовОснований
	|ИЗ
	|	ДокументыОснования_ КАК ДокументыОснования_
	|ГДЕ
	|	(ДокументыОснования_.ДокументИсточник ССЫЛКА Документ.торо_ЗаявкаНаРемонт
	|			ИЛИ ДокументыОснования_.ДокументИсточник ССЫЛКА Документ.торо_ПланГрафикРемонта
	|			ИЛИ ДокументыОснования_.ДокументИсточник ССЫЛКА Документ.торо_НарядНаВыполнениеРемонтныхРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка
	|ПОМЕСТИТЬ ТабДокументов
	|ИЗ
	|	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК торо_АктПриемкиОборудованияРемонтыОборудования
	|ГДЕ
	|	торо_АктПриемкиОборудованияРемонтыОборудования.ДокументИсточник = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТабДокументов.Ссылка
	|ИЗ
	|	ТабДокументов КАК ТабДокументов
	|ГДЕ
	|	ТабДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабДокументовОснований.Ссылка
	|ИЗ
	|	ТабДокументовОснований КАК ТабДокументовОснований";
	Запрос.УстановитьПараметр("ДокументыОснования", Объект.РемонтыОборудования.Выгрузить());
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Пустой();
	
КонецФункции

&НаСервере
// Проверяет, есть ли документы, введенные на основании текущего
Функция ЭтоПоследнийДокументВЦепочке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТабДокументов
	|ИЗ
	|	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК торо_АктПриемкиОборудованияРемонтыОборудования
	|ГДЕ
	|	торо_АктПриемкиОборудованияРемонтыОборудования.ДокументИсточник = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТабДокументов.Ссылка
	|ИЗ
	|	ТабДокументов КАК ТабДокументов
	|ГДЕ
	|	ТабДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Пустой();
	
КонецФункции

&НаСервере
Процедура РемонтыОборудованияОбновитьДокументыИсточники()
	
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ТипДокументаОснования = "" и СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора",, Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	РемонтыОборудования_ID = СтруктураСтроки.РемонтыОборудования_ID;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, ID, Номенклатура, ХарактеристикаНоменклатуры", РемонтыОборудования_ID, ID, текСтрока.Номенклатура, текСтрока.Характеристика);
		
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			нс.Количество = текСтрока.КоличествоУпаковок * ?(ЗначениеЗаполнено(нс.Единицаизмерения), 1, КоэфУпаковкиВыбр);
			
			нс.КоличествоЕдиниц = нс.Количество * КоэфУпаковкиВыбр;
			
			нс.ID = ID;
			нс.РемонтыОборудования_ID = РемонтыОборудования_ID;
			нс.ХарактеристикаНоменклатуры = текСтрока.Характеристика;
			
			
		Иначе
			
			нс = НайС[0];
			
			КоэфУпаковкиСтар = ?(ЗначениеЗаполнено(нс.ЕдиницаИзмерения), нс.ЕдиницаИзмерения.Коэффициент, 1);
			КоличествоЕдиниц = (нс.Количество*КоэфУпаковкиСтар + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр);
			нс.Количество = КоличествоЕдиниц / КоэфУпаковкиВыбр;
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			
			нс.КоличествоЕдиниц = КоличествоЕдиниц;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоБригадам(Адрес)
	
	Если Адрес = Неопределено Тогда возврат; КонецЕсли;
	
	тз = ПолучитьИзВременногоХранилища(Адрес);
	
	стрОтбора = Новый Структура("РемонтыОборудования_ID, ID, Квалификация");	
	Для каждого текСтрока из Тз Цикл
		ЗаполнитьЗначенияСвойств(стрОтбора, текСтрока);
		НайС = Объект.ТрудовыеЗатраты.НайтиСтроки(стрОтбора);
		
		Для каждого ТезЗапись из НайС Цикл
			пДатаНачала = ТезЗапись.ДатаНачала;
			пДатаОкончания = ТезЗапись.ДатаОкончания;
			Объект.ТрудовыеЗатраты.Удалить(ТезЗапись);
			Модифицированность = Истина;
		КонецЦикла;
		
		нс = Объект.ТрудовыеЗатраты.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока,,"ДатаНачала,ДатаОкончания");
		нс.ДатаНачала = пДатаНачала;
		нс.ДатаОкончания = пДатаОкончания;
		нс.ВремяРаботы = нс.ДатаОкончания - нс.ДатаНачала;
	КонецЦикла;	
КонецПроцедуры 

&НаСервереБезКонтекста 
Функция ВидНоменклатуры(Номенклатура)
	Возврат Номенклатура.ВидНоменклатуры;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтоимостиПоТарифнойСтавкеСотрудникаНаСервере()
	
	МассивСотрудников = Новый Массив;
	Для Каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если МассивСотрудников.Найти(Строка.Сотрудник) = Неопределено Тогда
			МассивСотрудников.Добавить(Строка.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_Трудозатраты.ID,
	|	ВТ_Трудозатраты.Сотрудник,
	|	ВТ_Трудозатраты.ДатаНачала,
	|	ВТ_Трудозатраты.ДатаОкончания,
	|	ВТ_Трудозатраты.ВремяРаботы,
	|	ВТ_Трудозатраты.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	|ПОМЕСТИТЬ ВТ_Трудозатраты
	|ИЗ
	|	&ВТ_Трудозатраты КАК ВТ_Трудозатраты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Ремонты.ID КАК ID,
	|	ВТ_Ремонты.ДатаНачала,
	|	ВТ_Ремонты.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_Ремонты
	|ИЗ
	|	&ВТ_Ремонты КАК ВТ_Ремонты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Трудозатраты.ID,
	|	ВТ_Трудозатраты.Сотрудник КАК Сотрудник,
	|	ВТ_Трудозатраты.ВремяРаботы,
	|	ВЫБОР
	|		КОГДА ВТ_Трудозатраты.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Ремонты.ДатаНачала
	|		ИНАЧЕ ВТ_Трудозатраты.ДатаНачала
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ВТ_Трудозатраты.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА ВТ_Ремонты.ДатаОкончания
	|		ИНАЧЕ ВТ_Трудозатраты.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	ВТ_Трудозатраты КАК ВТ_Трудозатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Ремонты КАК ВТ_Ремонты
	|		ПО ВТ_Трудозатраты.РемонтыОборудования_ID = ВТ_Ремонты.ID
	|ГДЕ
	|	ВТ_Трудозатраты.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|	И ВЫБОР
	|			КОГДА ВТ_Трудозатраты.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВТ_Ремонты.ДатаНачала
	|			ИНАЧЕ ВТ_Трудозатраты.ДатаНачала
	|		КОНЕЦ <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ВЫБОР
	|			КОГДА ВТ_Трудозатраты.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ВТ_Ремонты.ДатаОкончания
	|			ИНАЧЕ ВТ_Трудозатраты.ДатаОкончания
	|		КОНЕЦ <> ДАТАВРЕМЯ(1, 1, 1)";
	
	Запрос.УстановитьПараметр("ВТ_Трудозатраты", Объект.ТрудовыеЗатраты.Выгрузить());
	Запрос.УстановитьПараметр("ВТ_Ремонты", Объект.РемонтыОборудования.Выгрузить());
	
	ТаблицаСДатами = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСдатамиПомесяцам = ТаблицаСДатами.СкопироватьКолонки();
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("НачалоМесяца", Новый ОписаниеТипов("Дата"));
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("КонецМесяца", Новый ОписаниеТипов("Дата"));
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("НачалоИнтервала", Новый ОписаниеТипов("Дата"));
	ТаблицаСдатамиПоМесяцам.Колонки.Добавить("КонецИнтервала", Новый ОписаниеТипов("Дата"));
	
	Для каждого СтрокаТаблицыСдатами из ТаблицаСДатами Цикл
		ТекНачалоМесяца = НачалоМесяца(СтрокаТаблицыСдатами.ДатаНачала);
		Пока ТекНачалоМесяца <= НачалоМесяца(СтрокаТаблицыСдатами.ДатаОкончания) Цикл
			НовСтр = ТаблицаСдатамиПомесяцам.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, СтрокаТаблицыСдатами);
			
			НовСтр.НачалоМесяца = ТекНачалоМесяца;
			НовСтр.КонецМесяца = КонецМесяца(ТекНачалоМесяца);
			НовСтр.НачалоИнтервала = Макс(НовСтр.НачалоМесяца, НовСтр.ДатаНачала);
			НовСтр.КонецИнтервала = Мин(НовСтр.КонецМесяца, НовСтр.ДатаОкончания);
			
			ТекНачалоМесяца = ДобавитьМесяц(ТекНачалоМесяца, 1);
		КонецЦикла;	
	КонецЦикла;
	
	// рассчет рабочего времени сотрудника в период ремонта за определенный месяц
	ТаблицаИнтервалов = ТаблицаСдатамиПоМесяцам.Скопировать();
	ТаблицаИнтервалов.Свернуть("Сотрудник, НачалоИнтервала, КонецИнтервала");
	ТаблицаИнтервалов.Колонки.НачалоИнтервала.Имя = "ДатаНачала";
	ТаблицаИнтервалов.Колонки.КонецИнтервала.Имя = "ДатаОкончания";
	
	ТаблицаИнтервалов = РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаИнтервалов);
	ТаблицаСдатамиПомесяцам.Колонки.Добавить("РабочееВремяЗаИнтервал", Новый ОписаниеТипов("Число"));
	
	СтруктураПоиска = Новый Структура("Сотрудник, ДатаНачала, ДатаОкончания");
	Для каждого СтрокаТаблицыСДатами из ТаблицаСдатамиПомесяцам Цикл
		СтруктураПоиска.Сотрудник = СтрокаТаблицыСДатами.Сотрудник;
		СтруктураПоиска.ДатаНачала = СтрокаТаблицыСДатами.НачалоИнтервала;
		СтруктураПоиска.ДатаОкончания = СтрокаТаблицыСДатами.КонецИнтервала;
		СтрокиВремени = ТаблицаИнтервалов.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиВремени.Количество() > 0 Тогда
			СтрокаТаблицыСДатами.РабочееВремяЗаИнтервал = СтрокиВремени[0].ВремяРаботы;
		КонецЕсли;
	КонецЦикла;
	
	// рассчет рабочего времени сотрудника всего в месяце
	ТаблицаМесяцев = ТаблицаСдатамиПоМесяцам.Скопировать();
	ТаблицаМесяцев.Свернуть("Сотрудник, НачалоМесяца, КонецМесяца");
	ТаблицаМесяцев.Колонки.НачалоМесяца.Имя = "ДатаНачала";
	ТаблицаМесяцев.Колонки.КонецМесяца.Имя = "ДатаОкончания";
	
	ТаблицаМесяцев = РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаМесяцев);
	ТаблицаСдатамиПоМесяцам.Колонки.Добавить("РабочееВремяЗаМесяц", Новый ОписаниеТипов("Число"));

	СтруктураПоиска = Новый Структура("Сотрудник, ДатаНачала, ДатаОкончания");
	Для каждого СтрокаТаблицыСДатами из ТаблицаСдатамиПомесяцам Цикл
		СтруктураПоиска.Сотрудник = СтрокаТаблицыСДатами.Сотрудник;
		СтруктураПоиска.ДатаНачала = СтрокаТаблицыСДатами.НачалоМесяца;
		СтруктураПоиска.ДатаОкончания = СтрокаТаблицыСДатами.КонецМесяца;
		СтрокиВремени = ТаблицаМесяцев.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиВремени.Количество() > 0 Тогда
			СтрокаТаблицыСДатами.РабочееВремяЗаМесяц = СтрокиВремени[0].ВремяРаботы;
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВТ_Данные.ID,
	|	ВТ_Данные.Сотрудник,
	|	ВТ_Данные.ВремяРаботы,
	|	ВТ_Данные.ДатаНачала,
	|	ВТ_Данные.ДатаОкончания,
	|	ВТ_Данные.НачалоИнтервала,
	|	ВТ_Данные.КонецИнтервала,
	|	ВТ_Данные.НачалоМесяца,
	|	ВТ_Данные.КонецМесяца,
	|	ВТ_Данные.РабочееВремяЗаИнтервал,
	|	ВТ_Данные.РабочееВремяЗаМесяц
	|ПОМЕСТИТЬ ВТ_Данные
	|ИЗ
	|	&ВТ_Данные КАК ВТ_Данные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ID КАК ID,
	|	СУММА(ВТ_Данные.РабочееВремяЗаИнтервал) КАК РабочееВремяЗаРемонт
	|ПОМЕСТИТЬ ВТ_РабочееВремяЗаРемонт
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Данные.ID
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Данные.ID,
	|	ВТ_Данные.Сотрудник,
	|	ВТ_Данные.ВремяРаботы,
	|	ВТ_Данные.ДатаНачала,
	|	ВТ_Данные.ДатаОкончания,
	|	ВТ_Данные.НачалоИнтервала,
	|	ВТ_Данные.КонецИнтервала,
	|	ВТ_Данные.НачалоМесяца,
	|	ВТ_Данные.КонецМесяца,
	|	ВТ_Данные.РабочееВремяЗаИнтервал,
	|	ВТ_Данные.РабочееВремяЗаМесяц,
	|	ЕСТЬNULL(ВТ_РабочееВремяЗаРемонт.РабочееВремяЗаРемонт, 0) КАК РабочееВремяЗаРемонт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_РабочееВремяЗаРемонт.РабочееВремяЗаРемонт, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВТ_Данные.РабочееВремяЗаИнтервал / ЕСТЬNULL(ВТ_РабочееВремяЗаРемонт.РабочееВремяЗаРемонт, 0)
	|	КОНЕЦ КАК ДоляИнтервалаВРемонте
	|ИЗ
	|	ВТ_Данные КАК ВТ_Данные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РабочееВремяЗаРемонт КАК ВТ_РабочееВремяЗаРемонт
	|		ПО ВТ_Данные.ID = ВТ_РабочееВремяЗаРемонт.ID";
	
	Запрос.УстановитьПараметр("ВТ_Данные", ТаблицаСдатамиПомесяцам);
	
	ТаблицаДляРасчетаСтавок = Запрос.Выполнить().Выгрузить();
	ТаблицаДляРасчетаСтавок.Индексы.Добавить("ID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Сотрудник,
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Премия / 100 КАК Премия,
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Оклад КАК Оклад
	|ИЗ
	|	РегистрСведений.торо_ТекущиеТарифныеСтавкиСотрудников КАК торо_ТекущиеТарифныеСтавкиСотрудников
	|ГДЕ
	|	торо_ТекущиеТарифныеСтавкиСотрудников.Организация = &Организация
	|	И торо_ТекущиеТарифныеСтавкиСотрудников.Сотрудник В(&Сотрудники)";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Сотрудники", МассивСотрудников);
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
				
		ДанныеСотрудника = Результат.Найти(Строка.Сотрудник,"Сотрудник");
		Если ДанныеСотрудника <> Неопределено Тогда
			//Строка.СуммаКНачислению = (Строка.ВремяРаботы / 3600)* Строка.КТУ * ДанныеСотрудника.Премия * ДанныеСотрудника.ТарифнаяСтавка;
			
			ДанныеДляРасчетаСтавки = ТаблицаДляРасчетаСтавок.НайтиСтроки(Новый Структура("ID", Строка.ID));
			СуммаКНачислению = 0;
			
			Для каждого СтрокаДанныхЗаМесяц из ДанныеДляРасчетаСтавки Цикл
				ТарифнаяСтавка = ?(СтрокаДанныхЗаМесяц.РабочееВремяЗаМесяц = 0, 0, (ДанныеСотрудника.Оклад * 3600)/СтрокаДанныхЗаМесяц.РабочееВремяЗаМесяц);
				ЧастьСуммы = (Строка.ВремяРаботы / 3600)* Строка.КТУ * (1 + ДанныеСотрудника.Премия) * ТарифнаяСтавка * СтрокаДанныхЗаМесяц.ДоляИнтервалаВРемонте;
				СуммаКНачислению = СуммаКНачислению + ЧастьСуммы;
			КонецЦикла;
			
			Строка.СуммаКНачислению = СуммаКНачислению;
			
		Иначе
			Строка.СуммаКНачислению = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьРабочееВремяСотрудникаПоТаблице(ТаблицаПериодов)
	
	Если ТаблицаПериодов.Количество() = 0 Тогда
		ТаблицаПериодов.Колонки.Добаить("ВремяРаботы", Новый ОписаниеТипов("Число"));
		Возврат ТаблицаПериодов;
	КонецЕсли;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	ЗапросГрафиков = Новый Запрос;
	ЗапросГрафиков.МенеджерВременныхТаблиц = МенеджерВТ;
	ЗапросГрафиков.Текст = 
	"ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ИсходныеДанные
	|ИЗ
	|	&ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикРаботыСотрудников.Период КАК Период,
	|	ГрафикРаботыСотрудников.Сотрудник КАК Сотрудник,
	|	ГрафикРаботыСотрудников.ГрафикРаботы,
	|	ГрафикРаботыСотрудников.ДействуетДо
	|ПОМЕСТИТЬ ВТ_ГрафикиРаботыСотрудников
	|ИЗ
	|	РегистрСведений.ГрафикРаботыСотрудников КАК ГрафикРаботыСотрудников
	|ГДЕ
	|	ГрафикРаботыСотрудников.Сотрудник В
	|			(ВЫБРАТЬ
	|				ВТ_ИсходныеДанные.Сотрудник
	|			ИЗ
	|				ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ВТ_ГрафикиРаботыСотрудников.Период) КАК ПериодГрафика,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ПериодыГрафиковНаНачалоРемонта
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ИсходныеДанные.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И ВТ_ИсходныеДанные.ДатаНачала >= ВТ_ГрафикиРаботыСотрудников.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.Сотрудник,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаНачала,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания,
	|	ВТ_ГрафикиРаботыСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаНачала КАК НачалоИнтервала,
	|	ВЫБОР
	|		КОГДА ВТ_ГрафикиРаботыСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТ_ГрафикиРаботыСотрудников.ДействуетДо > ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания
	|			ТОГДА ВТ_ПериодыГрафиковНаНачалоРемонта.ДатаОкончания
	|		ИНАЧЕ ВТ_ГрафикиРаботыСотрудников.ДействуетДо
	|	КОНЕЦ КАК КонецИнтервала
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиков
	|ИЗ
	|	ВТ_ПериодыГрафиковНаНачалоРемонта КАК ВТ_ПериодыГрафиковНаНачалоРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ПериодыГрафиковНаНачалоРемонта.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И ВТ_ПериодыГрафиковНаНачалоРемонта.ПериодГрафика = ВТ_ГрафикиРаботыСотрудников.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ИсходныеДанные.Сотрудник,
	|	ВТ_ИсходныеДанные.ДатаНачала,
	|	ВТ_ИсходныеДанные.ДатаОкончания,
	|	ВТ_ГрафикиРаботыСотрудников.ГрафикРаботы,
	|	ВТ_ГрафикиРаботыСотрудников.Период,
	|	ВЫБОР
	|		КОГДА ВТ_ГрафикиРаботыСотрудников.ДействуетДо = ДАТАВРЕМЯ(1, 1, 1)
	|				ИЛИ ВТ_ГрафикиРаботыСотрудников.ДействуетДо > ВТ_ИсходныеДанные.ДатаОкончания
	|			ТОГДА ВТ_ИсходныеДанные.ДатаОкончания
	|		ИНАЧЕ ВТ_ГрафикиРаботыСотрудников.ДействуетДо
	|	КОНЕЦ
	|ИЗ
	|	ВТ_ИсходныеДанные КАК ВТ_ИсходныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ГрафикиРаботыСотрудников КАК ВТ_ГрафикиРаботыСотрудников
	|		ПО ВТ_ИсходныеДанные.Сотрудник = ВТ_ГрафикиРаботыСотрудников.Сотрудник
	|			И (ВТ_ГрафикиРаботыСотрудников.Период > ВТ_ИсходныеДанные.ДатаНачала)
	|			И (ВТ_ГрафикиРаботыСотрудников.Период < ВТ_ИсходныеДанные.ДатаОкончания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиков.Сотрудник,
	|	ВТ_ПериодыДействияГрафиков.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиков.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиков.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиков.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиков.КонецИнтервала
	|ИЗ
	|	ВТ_ПериодыДействияГрафиков КАК ВТ_ПериодыДействияГрафиков";
	
	ЗапросГрафиков.УстановитьПараметр("ВТ_ИсходныеДанные", ТаблицаПериодов);
	
	ТабГрафиков = ЗапросГрафиков.Выполнить().Выгрузить();
	МассивГрафиков = ТабГрафиков.ВыгрузитьКолонку("ГрафикРаботы");
	
	МинДата = ТаблицаПериодов[0].ДатаНачала;
	МаксДата = ТаблицаПериодов[0].ДатаОкончания;
	
	Для каждого Строка из ТаблицаПериодов Цикл
		Если Строка.ДатаНачала < МинДата Тогда
			МинДата = Строка.ДатаНачала;
		КонецЕсли;
		Если Строка.ДатаОкончания > МаксДата Тогда
			МаксДата = Строка.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, МинДата, МаксДата);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиков.Сотрудник,
	|	ВТ_ПериодыДействияГрафиков.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиков.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиков.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиков.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиков.КонецИнтервала,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.НачалоИнтервала, ДЕНЬ), ВТ_ПериодыДействияГрафиков.НачалоИнтервала, СЕКУНДА) КАК НачалоИнтервалаСек,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.КонецИнтервала, ДЕНЬ), ВТ_ПериодыДействияГрафиков.КонецИнтервала, СЕКУНДА) КАК КонецИнтервалаСек,
	|	ВТРасписанияРаботы.ДатаГрафика,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВТРасписанияРаботы.ВремяНачала, СЕКУНДА) КАК ВремяНачалаСек,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ВЫБОР
	|			КОГДА МИНУТА(ВТРасписанияРаботы.ВремяОкончания) = 59
	|				ТОГДА ДОБАВИТЬКДАТЕ(ВТРасписанияРаботы.ВремяОкончания, МИНУТА, 1)
	|			ИНАЧЕ ВТРасписанияРаботы.ВремяОкончания
	|		КОНЕЦ, СЕКУНДА) КАК ВремяОкончанияСек
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиковПоДням
	|ИЗ
	|	ВТ_ПериодыДействияГрафиков КАК ВТ_ПериодыДействияГрафиков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|		ПО ВТ_ПериодыДействияГрафиков.ГрафикРаботы = ВТРасписанияРаботы.ГрафикРаботы
	|			И (ВТРасписанияРаботы.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиков.НачалоИнтервала, ДЕНЬ) И КОНЕЦПЕРИОДА(ВТ_ПериодыДействияГрафиков.КонецИнтервала, ДЕНЬ))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиковПоДням.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаОкончания,
	|	ВТ_ПериодыДействияГрафиковПоДням.ГрафикРаботы,
	|	ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала,
	|	ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала,
	|	ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек > ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала, ДЕНЬ)
	|			И ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек < ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек
	|		ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням.ВремяНачалаСек
	|	КОНЕЦ КАК ВремяНачалаСек,
	|	ВЫБОР
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек < ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.КонецИнтервалаСек
	|		КОГДА ВТ_ПериодыДействияГрафиковПоДням.ДатаГрафика = НАЧАЛОПЕРИОДА(ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервала, ДЕНЬ)
	|				И ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек > ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|			ТОГДА ВТ_ПериодыДействияГрафиковПоДням.НачалоИнтервалаСек
	|		ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням.ВремяОкончанияСек
	|	КОНЕЦ КАК ВремяОкончанияСек
	|ПОМЕСТИТЬ ВТ_ПериодыДействияГрафиковПоДням2
	|ИЗ
	|	ВТ_ПериодыДействияГрафиковПоДням КАК ВТ_ПериодыДействияГрафиковПоДням
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыДействияГрафиковПоДням2.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаОкончания,
	|	СУММА(ВЫБОР
	|			КОГДА ВТ_ПериодыДействияГрафиковПоДням2.ВремяОкончанияСек = 86399
	|				ТОГДА 86400
	|			ИНАЧЕ ВТ_ПериодыДействияГрафиковПоДням2.ВремяОкончанияСек
	|		КОНЕЦ - ВТ_ПериодыДействияГрафиковПоДням2.ВремяНачалаСек) КАК ВремяРаботы
	|ИЗ
	|	ВТ_ПериодыДействияГрафиковПоДням2 КАК ВТ_ПериодыДействияГрафиковПоДням2
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ПериодыДействияГрафиковПоДням2.Сотрудник,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаНачала,
	|	ВТ_ПериодыДействияГрафиковПоДням2.ДатаОкончания";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтоимостиПоСтоимостиЧасаКвалификацииНаСервере()
	
	МассивКвалификаций = Новый Массив;
	Для Каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если МассивКвалификаций.Найти(Строка.Квалификация) = Неопределено Тогда 
			МассивКвалификаций.Добавить(Строка.Квалификация);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_СтоимостьЧасаКвалификацииСрезПоследних.Квалификация,
	|	КурсыВалютСрезПоследних.Курс * торо_СтоимостьЧасаКвалификацииСрезПоследних.Стоимость КАК Стоимость
	|ИЗ
	|	РегистрСведений.торо_СтоимостьЧасаКвалификации.СрезПоследних КАК торо_СтоимостьЧасаКвалификацииСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО торо_СтоимостьЧасаКвалификацииСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
	|ГДЕ
	|	торо_СтоимостьЧасаКвалификацииСрезПоследних.Квалификация В(&МассивКвалификаций)";
	
	Запрос.УстановитьПараметр("МассивКвалификаций", МассивКвалификаций);
	СтоимостиКвалификаций = Запрос.Выполнить().Выгрузить();	
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		
		ДанныеПоКвалификации = СтоимостиКвалификаций.Найти(Строка.Квалификация, "Квалификация");
		Если ДанныеПоКвалификации <> Неопределено Тогда
			Строка.СуммаКНачислению = (Строка.ВремяРаботы / 3600)* Строка.КТУ * ДанныеПоКвалификации.Стоимость;
		Иначе
			Строка.СуммаКНачислению = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтоимостиПоРасценкеТехОперацииНаСервере()
	
	МассивID = Новый Массив;
	Для Каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Если МассивID.Найти(Строка.ID) = Неопределено Тогда 
			МассивID.Добавить(Строка.ID);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ * ПОМЕСТИТЬ ТабРемРабот ИЗ &ТабРемРабот КАК ТабРемРабот ГДЕ ТабРемРабот.ID В (&МассивID);
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабРемРабот.ID КАК ID,
	|	1 КАК Количество,
	|	КурсыВалютСрезПоследних.Курс * ТабРемРабот.РемонтнаяРабота.Расценка КАК Стоимость
	|ИЗ
	|	ТабРемРабот КАК ТабРемРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|		ПО ТабРемРабот.РемонтнаяРабота.Валюта = КурсыВалютСрезПоследних.Валюта";
	
	Запрос.УстановитьПараметр("МассивID", МассивID);
	Запрос.УстановитьПараметр("ТабРемРабот", Объект.РемонтныеРаботы.Выгрузить());
	РасценкаОпераций = Запрос.Выполнить().Выгрузить();	
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		ДанныеПоОперации = РасценкаОпераций.Найти(Строка.ID,"ID");
		Если ДанныеПоОперации <> Неопределено Тогда
			Строка.СуммаКНачислению = Строка.КТУ * ДанныеПоОперации.Стоимость * ДанныеПоОперации.Количество;
		Иначе
			Строка.СуммаКНачислению = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДокОсн = Элементы.ДокументыОснования.текущиеДанные.ДокументОснование;
	ФОИспользоватьСтатусыДокументов = ПолучитьЗначениеФОНаСервере("торо_ИспользоватьСтатусыДокументовТОиР");
	
	Если ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВыявленныеДефекты.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ПланГрафикРемонта.ФормаВыбора",Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
    ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаРегламентноеМероприятие.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ФормаВыбора",Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);		
	ИначеЕсли ДокОсн = Неопределено Тогда 
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = СформироватьСписокВыбораНаСервере();
		
		СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение",ЭтотОбъект, Новый Структура("Элемент, ФОИспользоватьСтатусыДокументов", Элемент, ФОИспользоватьСтатусыДокументов)),НСтр("ru = 'Выбор типа данных'"));
	
	КонецЕсли;
	
	Если ДокОсн <> Неопределено Тогда
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ФОИспользоватьСтатусыДокументов = ДополнительныеПараметры.ФОИспользоватьСтатусыДокументов;
	ВыбЭлемент = ВыбранныйЭлемент;
	
	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВыявленныеДефекты.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ПланГрафикРемонта.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаРегламентноеМероприятие.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект)
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеФОНаСервере(ИмяФО)
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяФО);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСписокВыбораНаСервере()
	
	СписокВыбора = Новый СписокЗначений;
	
	Для каждого ТипОснования Из Метаданные.Документы.торо_АктОВыполненииЭтапаРабот.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.Типы() Цикл
		СписокВыбора.Добавить(ТипОснования);
	КонецЦикла;
	
	// Строки добавлены для учета настроек ввода на основании
	НаборЗаписейВводНаОсновании = РегистрыСведений.торо_ВводНаОсновании.СоздатьНаборЗаписей();
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Значение = "торо_АктОВыполненииЭтапаРабот";
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Использование = Истина;
	НаборЗаписейВводНаОсновании.Прочитать();
	
	Для каждого ЗаписьРегистр из НаборЗаписейВводНаОсновании Цикл
		Если НЕ ЗаписьРегистр.Значение Тогда
			СтрокаЛишняя = СписокВыбора.НайтиПоЗначению(Тип("ДокументСсылка."+ЗаписьРегистр.ДокументОснование));		
			Если СтрокаЛишняя <> Неопределено Тогда
				СписокВыбора.Удалить(СтрокаЛишняя);	
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ввод данного документа на основании запрещен настройками ввода на основании.
		|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интерфейс и ввод документов.'"));
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура УстановкаМатериалов(ВыбранноеЗначение)
	РемОборудования = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
	НайденныеСтрокиМатериала = Объект.МатериальныеЗатраты.НайтиСтроки( Новый Структура("РемонтыОборудования_ID", РемОборудования )); 
	НайденныеСтрокиРемонта = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", РемОборудования ));
	Если НайденныеСтрокиРемонта.Количество() <> 0 И НайденныеСтрокиМатериала.Количество() = 0 Тогда
		НомерСтроки = НайденныеСтрокиРемонта[0].ПолучитьИдентификатор();
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, НомерСтроки);
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура УстановкаИсполнителей(ВыбранноеЗначение)
	РемОборудования = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
	НайденныеСтрокиРемонта = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", РемОборудования ));	
	РемОборудования = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
	НайденныеСтрокиТрудозатрат = Объект.ТрудовыеЗатраты.НайтиСтроки( Новый Структура("РемонтыОборудования_ID", РемОборудования ));
	Если НайденныеСтрокиРемонта.Количество() <> 0 И НайденныеСтрокиТрудозатрат.Количество() = 0 Тогда
		НомерСтроки = НайденныеСтрокиРемонта[0].ПолучитьИдентификатор();
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, НомерСтроки);
	КонецЕсли; 
КонецПроцедуры


&НаКлиенте
Процедура СерийныеЗапчастиХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.СерийныеЗапчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.СерийныеЗапчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура) Тогда
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.СерийныеЗапчасти.ТекущиеДанные.Номенклатура, "ВидНоменклатуры"));
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиСерияНоменклатурыНоваяСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.СерийныеЗапчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая) Тогда
		СтруктураПараметров = Новый Структура("ВидНоменклатуры", торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры"));
		ОткрытьФорму("Справочник.СерииНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СерийныеЗапчастиХарактеристикаНоменклатурыНоваяСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.СерийныеЗапчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.СерийныеЗапчасти.ТекущиеДанные.НоменклатураНовая);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

фПослеОчистки = Ложь;
РемонтОборудованияУдаляется = Ложь;

#КонецОбласти

