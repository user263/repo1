

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
    НеОчищатьСотрудника        = Истина;
    НеОчищатьКвалификацию      = Истина;
    ЗаполнятьПериодИВремяРабот = Истина;
	ЗаполнятьКТУИСумму         = Истина;
	
	
	Если Параметры.Свойство("Ссылка") Тогда
		ДокументАкт = Параметры.Ссылка;
		Элементы.Декорация1.Заголовок = Строка(ДокументАкт);
	КонецЕсли; 
	
	Если Не Параметры.Свойство("МассивИсполнителей") Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо заполнить Ремонты оборудования и ремонтные работы по ним.'"));
		Отказ = Истина;
	КонецЕсли; 
	
	ТаблицаДанныхДляЗаполненияДерева = ПодготовитьТаблицуДанных(Параметры.МассивИсполнителей);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанныхДляЗаполненияДерева.РемонтыОборудования_ID,
	               |	ТаблицаДанныхДляЗаполненияДерева.ID,
	               |	ТаблицаДанныхДляЗаполненияДерева.Родитель_ID,
	               |	ТаблицаДанныхДляЗаполненияДерева.РемонтнаяРабота,
	               |	ТаблицаДанныхДляЗаполненияДерева.ОбъектРемонта,
	               |	ТаблицаДанныхДляЗаполненияДерева.ВидРемонта,
	               |	ТаблицаДанныхДляЗаполненияДерева.Квалификация,
	               |	ТаблицаДанныхДляЗаполненияДерева.ДатаНачала,
	               |	ТаблицаДанныхДляЗаполненияДерева.ДатаОкончания,
	               |	ТаблицаДанныхДляЗаполненияДерева.КТУ,
	               |	ТаблицаДанныхДляЗаполненияДерева.ВремяРаботы,
	               |	ТаблицаДанныхДляЗаполненияДерева.СуммаКНачислению,
	               |	ТаблицаДанныхДляЗаполненияДерева.Сотрудник,
	               |	ТаблицаДанныхДляЗаполненияДерева.ДатаНачалаРемонта,
	               |	ТаблицаДанныхДляЗаполненияДерева.ДатаОкончанияРемонта
	               |ПОМЕСТИТЬ ТаблицаДанных
	               |ИЗ
	               |	&ТаблицаДанныхДляЗаполненияДерева КАК ТаблицаДанныхДляЗаполненияДерева
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДанных.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	               |	ТаблицаДанных.ID КАК ID,
	               |	ТаблицаДанных.Родитель_ID,
	               |	ТаблицаДанных.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ТаблицаДанных.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТаблицаДанных.ВидРемонта КАК ВидРемонта,
	               |	ТаблицаДанных.Квалификация,
	               |	ТаблицаДанных.ДатаНачала,
	               |	ТаблицаДанных.ДатаОкончания,
	               |	ТаблицаДанных.КТУ,
	               |	ТаблицаДанных.ВремяРаботы,
	               |	ТаблицаДанных.СуммаКНачислению,
	               |	ТаблицаДанных.Сотрудник,
	               |	ТаблицаДанных.ДатаНачалаРемонта,
	               |	ТаблицаДанных.ДатаОкончанияРемонта
	               |ИЗ
	               |	ТаблицаДанных КАК ТаблицаДанных
	               |ИТОГИ
	               |	МАКСИМУМ(РемонтнаяРабота),
	               |	МАКСИМУМ(ВидРемонта)
	               |ПО
	               |	ОбъектРемонта,
	               |	РемонтыОборудования_ID,
	               |	ID";
				   
	Запрос.УстановитьПараметр("ТаблицаДанныхДляЗаполненияДерева", ТаблицаДанныхДляЗаполненияДерева);
	Результат = Запрос.Выполнить();
	ПостроитьДеревоИсполнителей(Результат);
	
	Квалификация = "<основная>";
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Для Каждого Строка Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КвалификацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить("<основная>" ,"Основная");
	СписокВыбора.Добавить("Выбрать..." ,"Произвольная");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораСпособаЗаполненияКвалификации", ЭтаФорма);
	ПоказатьВыборИзСписка(ОписаниеОповещения,СписокВыбора, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура КвалификацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьПериодИВремяРаботПриИзменении(Элемент)
	Элементы.ДеревоИсполнителейДатаНачала.Видимость       = ЗаполнятьПериодИВремяРабот;
	Элементы.ДеревоИсполнителейДатаОкончания.Видимость    = ЗаполнятьПериодИВремяРабот;
	Элементы.ДеревоИсполнителейВремяРаботыТекст.Видимость = ЗаполнятьПериодИВремяРабот;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнятьКТУИСуммуПриИзменении(Элемент)
	Элементы.ДеревоИсполнителейКТУ.Видимость              = ЗаполнятьКТУИСумму;
	Элементы.ДеревоИсполнителейСуммаКНачислению.Видимость = ЗаполнятьКТУИСумму;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийДервоИсполнителей

&НаКлиенте
Процедура ДеревоИсполнителейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		Если Не (ТекущиеДанные.Уровень = 2
			ИЛИ ТекущиеДанные.Уровень = 3) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Исполнителей можно дабавлять только для ремонтных работ.'"));
		Иначе
			
			СтрокаРодитель = ?(ТекущиеДанные.Уровень = 2, ТекущиеДанные, ТекущиеДанные.ПолучитьРодителя());
			
			НовыйИсполнитель = СтрокаРодитель.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовыйИсполнитель, СтрокаРодитель, "ID, РемонтыОборудования_ID, Родитель_ID, ДатаНачалаРемонта");

			
			НовыйИсполнитель.Исполнитель_ID = Строка(Новый УникальныйИдентификатор);
			НовыйИсполнитель.Уровень = 3;
			
			ИдентификаторСтроки = НовыйИсполнитель.ПолучитьИдентификатор();
			Элементы.ДеревоИсполнителей.ТекущаяСтрока = ИдентификаторСтроки;
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	РазрешеноДобавление = Ложь;
	
	Если Не ТекущиеДанные = Неопределено И Не (ТекущиеДанные.Уровень = 2 ИЛИ ТекущиеДанные.Уровень = 3) Тогда
		РазрешеноДобавление = Ложь;
	ИначеЕсли Не ТекущиеДанные = Неопределено Тогда
		РазрешеноДобавление = Истина;
	КонецЕсли; 
	
	Элементы.ДеревоИсполнителейДобавить.Доступность                = РазрешеноДобавление;
	Элементы.ДеревоИсполнителейКонтекстноеМенюДобавить.Доступность = РазрешеноДобавление;
	
	РазрешеноУдаление = Ложь;
	
	Если Не ТекущиеДанные = Неопределено И ТекущиеДанные.Уровень = 3 Тогда
		РазрешеноУдаление = Истина;
	ИначеЕсли Не ТекущиеДанные = Неопределено Тогда
		РазрешеноУдаление = Ложь;
	КонецЕсли;	
	
	Элементы.ДеревоИсполнителейУдалить.Доступность                 = РазрешеноУдаление;
	Элементы.ДеревоИсполнителейКонтекстноеМенюУдалить.Доступность  = РазрешеноУдаление;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяРаботы, Элемент, Этаформа.УникальныйИдентификатор);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейВремяРаботыТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
		ТекущиеДанные.ВремяРаботы      = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоИсполнителейСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ДеревоИсполнителей.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И Не ВыбранноеЗначение = Неопределено Тогда
		ТекДанные.Квалификация = торо_ПроцедурыУправленияПерсоналом.ПолучитьОсновнуюКвалификацию(ВыбранноеЗначение);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	Массив = Новый Массив;
	
	Для каждого Объекты Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
		Для каждого Ремонт Из Объекты.ПолучитьЭлементы() Цикл
			Для каждого РемРабота Из Ремонт.ПолучитьЭлементы() Цикл
				Для каждого СтрокаИсполнитель Из РемРабота.ПолучитьЭлементы() Цикл
					
					СтруктураСтроки = Новый Структура;
					СтруктураСтроки = Новый Структура();
					СтруктураСтроки.Вставить("РемонтыОборудования_ID");
					СтруктураСтроки.Вставить("ID"                    );
					СтруктураСтроки.Вставить("Родитель_ID"           );
					СтруктураСтроки.Вставить("РемонтнаяРабота"       );
					СтруктураСтроки.Вставить("ОбъектРемонта"         );
					СтруктураСтроки.Вставить("ВидРемонтныхРабот"     );
					СтруктураСтроки.Вставить("ДатаНачалаРемонта"     );
					СтруктураСтроки.Вставить("ДатаОкончанияРемонта"  );
					СтруктураСтроки.Вставить("Квалификация"          );
					СтруктураСтроки.Вставить("ДатаНачала"            );
					СтруктураСтроки.Вставить("ДатаОкончания"         );
					СтруктураСтроки.Вставить("КТУ"                   );
					СтруктураСтроки.Вставить("ВремяРаботы"           ); 
					СтруктураСтроки.Вставить("ВремяРаботыТекст"      );
					СтруктураСтроки.Вставить("СуммаКНачислению"      );
					СтруктураСтроки.Вставить("Сотрудник"             );
					
					ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаИсполнитель);
					СтруктураСтроки.ВидРемонтныхРабот = СтрокаИсполнитель.ВидРемонта;
					Массив.Добавить(СтруктураСтроки);
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
	
	ЭтаФорма.Закрыть(Массив);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	
	ЗаполнитьДеревоНаСервере();
	
	Для Каждого Строка Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	УстановитьФлаги(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВыделение(Команда)
	УстановитьФлаги(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Инвертировать(Команда)
	УстановитьФлаги();
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах)
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " мин. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораСпособаЗаполненияКвалификации(ВыбранноеЗначение, ДопПараметры) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ВыбранноеЗначение.Представление = "Произвольная" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораКвалификации", ЭтаФорма);
		
		ОткрытьФорму("Справочник.торо_КвалификацииРемонтногоПерсонала.ФормаВыбора",,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);		
		
	Иначе
		Квалификация = "<основная>";
	КонецЕсли;
	
КонецПроцедуры
 
&НаКлиенте
Процедура ОбработкаВыбораКвалификации(ВыбраннаяКвалификация, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ВыбраннаяКвалификация) Тогда
		Квалификация = ВыбраннаяКвалификация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КвалификацияОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Квалификация = "<основная>";
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуДанных(МассивИсполнителей)
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ДобавитьКолонкиВТаблицу(ТаблицаДанных);
	
	Если МассивИсполнителей.Количество() > 0 Тогда
		Для каждого СтруктураДанных Из МассивИсполнителей Цикл
			
			ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), СтруктураДанных);
			
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат ТаблицаДанных;
	
КонецФункции
 
&НаСервере
Процедура ПостроитьДеревоИсполнителей(Результат)
	
	ДеревоИсполнителей.ПолучитьЭлементы().Очистить();

	ВыборкаОР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОР.Следующий() Цикл
		
		СтрокаОР = ДеревоИсполнителей.ПолучитьЭлементы().Добавить();
		СтрокаОР.ОбъектРемонта = ВыборкаОР.ОбъектРемонта;
		СтрокаОР.Уровень = 0;
		
		ВыборкаВР = ВыборкаОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаВР.Следующий() Цикл
			
			СтрокаВР = СтрокаОР.ПолучитьЭлементы().Добавить();
			СтрокаВР.ВидРемонта = ВыборкаВР.ВидРемонта;
			СтрокаВР.Уровень = 1;
			
			ВыборкаРР = ВыборкаВР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаРР.Следующий() Цикл
				
				СтрокаРР = СтрокаВР.ПолучитьЭлементы().Добавить();
				СтрокаРР.РемонтнаяРабота = ВыборкаРР.РемонтнаяРабота;
				СтрокаРР.Уровень = 2;
				
				ВыборкаДетальныеЗаписи = ВыборкаРР.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					
					ЗаполнитьЗначенияСвойств(СтрокаРР, ВыборкаДетальныеЗаписи,"ID, РемонтыОборудования_ID, Родитель_ID, ДатаНачалаРемонта");
					СтрокаДетЗаписи = СтрокаРР.ПолучитьЭлементы().Добавить();
					
					ЗаполнитьЗначенияСвойств(СтрокаДетЗаписи,ВыборкаДетальныеЗаписи);
					СтрокаДетЗаписи.Исполнитель_ID = Новый УникальныйИдентификатор;
					СтрокаДетЗаписи.Уровень = 3;
					СтрокаДетЗаписи.ВремяРаботыТекст = СформироватьПродолжительность(СтрокаДетЗаписи.ВремяРаботы);
				КонецЦикла;
				
			КонецЦикла;
			
			СтрокаВР.Ремонт = Строка(ВыборкаВР.ВидРемонта) + " ("+СтрокаДетЗаписи.ДатаНачалаРемонта+" - "+СтрокаДетЗаписи.ДатаОкончанияРемонта+")";
			
			СтрокаВР.ДатаНачалаРемонта = СтрокаДетЗаписи.ДатаНачалаРемонта;
			СтрокаВР.ДатаОкончанияРемонта = СтрокаДетЗаписи.ДатаОкончанияРемонта;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере 
Процедура ДобавитьКолонкиВТаблицу(ТаблицаДанных)
	
	// идентификаторы
	МассивТиповСтрока = Новый Массив;
	МассивТиповСтрока.Добавить(Тип("Строка"));
	
	ТипСтрока = Новый ОписаниеТипов(МассивТиповСтрока,,,,Новый КвалификаторыСтроки(36));
	
	// даты
	МассивТиповДата = Новый Массив;
	МассивТиповДата.Добавить(Тип("Дата"));
	
	ТипДата = Новый ОписаниеТипов(МассивТиповДата,,,,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя));
	
	
		
	ТаблицаДанных.Колонки.Добавить("РемонтыОборудования_ID", ТипСтрока);
	ТаблицаДанных.Колонки.Добавить("ID"                    , ТипСтрока);
	ТаблицаДанных.Колонки.Добавить("Родитель_ID"           , ТипСтрока);
	ТаблицаДанных.Колонки.Добавить("Исполнитель_ID"        , ТипСтрока);
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ТехнологическиеОперации"));
	
	Тип = Новый ОписаниеТипов(МассивТипов);
	ТаблицаДанных.Колонки.Добавить("РемонтнаяРабота"       , Тип);
	
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	
	Тип = Новый ОписаниеТипов(МассивТипов);
	
	ТаблицаДанных.Колонки.Добавить("ОбъектРемонта"         , Тип);
	
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ВидыРемонтов"));
	
	Тип = Новый ОписаниеТипов(МассивТипов);

	ТаблицаДанных.Колонки.Добавить("ВидРемонта"            , Тип);
	
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_КвалификацииРемонтногоПерсонала"));
	
	Тип = Новый ОписаниеТипов(МассивТипов);
	ТаблицаДанных.Колонки.Добавить("Квалификация"          , Тип);
	
	//
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	
	Тип = Новый ОписаниеТипов(МассивТипов);
	ТаблицаДанных.Колонки.Добавить("Сотрудник"             , Тип);

    // Дата
	ТаблицаДанных.Колонки.Добавить("ДатаНачала"            , ТипДата);
	ТаблицаДанных.Колонки.Добавить("ДатаОкончания"         , ТипДата);
	ТаблицаДанных.Колонки.Добавить("ДатаНачалаРемонта"     , ТипДата);
	ТаблицаДанных.Колонки.Добавить("ДатаОкончанияРемонта"  , ТипДата);
	
	// Число
	МассивТиповЧисло = Новый Массив;
	МассивТиповЧисло.Добавить(Тип("Число"));
	
	ТаблицаДанных.Колонки.Добавить("КТУ"                   , Новый ОписаниеТипов(МассивТиповЧисло,,,Новый КвалификаторыЧисла(5 ,2,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанных.Колонки.Добавить("ВремяРаботы"           , Новый ОписаниеТипов(МассивТиповЧисло,,,Новый КвалификаторыЧисла(10,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанных.Колонки.Добавить("СуммаКНачислению"      , Новый ОписаниеТипов(МассивТиповЧисло,,,Новый КвалификаторыЧисла(15,2,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаДанных.Колонки.Добавить("Уровень"               , Новый ОписаниеТипов(МассивТиповЧисло,,,Новый КвалификаторыЧисла(3 ,0,ДопустимыйЗнак.Неотрицательный)));
		
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРемонтныхРабот(Родитель)
	
	Элементы.ДеревоИсполнителей.Развернуть(Родитель.ПолучитьИдентификатор());
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоИсполнителей");
	
	МассивСтрокДерева = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("Уровень, Выбран",3,Истина),Истина);
	
	ТЗИсполнителей = Новый ТаблицаЗначений;
	
	ДобавитьКолонкиВТаблицу(ТЗИсполнителей);
		
	
	Для каждого СтрокаДерева Из МассивСтрокДерева Цикл  // исполнителей из каждой работы переносим в ТЗИсполнителей
		ЗаполнитьЗначенияСвойств(ТЗИсполнителей.Добавить(),СтрокаДерева);
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабИсполнителей.РемонтыОборудования_ID,
	               |	ТабИсполнителей.ОбъектРемонта,
	               |	ТабИсполнителей.ВидРемонта,
	               |	ТабИсполнителей.ДатаНачалаРемонта,
	               |	ТабИсполнителей.ДатаОкончанияРемонта,
	               |	ТабИсполнителей.РемонтнаяРабота,
	               |	ТабИсполнителей.Сотрудник,
	               |	ТабИсполнителей.ДатаНачала,
	               |	ТабИсполнителей.ДатаОкончания,
	               |	ТабИсполнителей.КТУ,
	               |	ТабИсполнителей.ВремяРаботы,
	               |	ТабИсполнителей.СуммаКНачислению,
	               |	ТабИсполнителей.ID,
	               |	ТабИсполнителей.Уровень,
	               |	ТабИсполнителей.Квалификация,
	               //|	ТабИсполнителей.Выбран,
	               |	ТабИсполнителей.Исполнитель_ID
	               |ПОМЕСТИТЬ ТабИсполнителей
	               |ИЗ
	               |	&ТабИсполнителей КАК ТабИсполнителей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	МАКСИМУМ(торо_КвалификацияРемонтногоПерсонала.Период) КАК Период,
	               |	ВЫБОР
	               |		КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |				И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |					ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
	               |			ТОГДА &Сотрудник
	               |		ИНАЧЕ ТабИсполнителей.Сотрудник
	               |	КОНЕЦ КАК Сотрудник
	               |ПОМЕСТИТЬ МаксПериоды
	               |ИЗ
	               |	ТабИсполнителей КАК ТабИсполнителей
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_КвалификацияРемонтногоПерсонала КАК торо_КвалификацияРемонтногоПерсонала
	               |		ПО ТабИсполнителей.ДатаНачалаРемонта > торо_КвалификацияРемонтногоПерсонала.Период
	               |			И (НЕ торо_КвалификацияРемонтногоПерсонала.Удаленная)
	               |			И (ВЫБОР
	               |				КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |						И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |							ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
	               |					ТОГДА торо_КвалификацияРемонтногоПерсонала.Сотрудник = &Сотрудник
	               |				ИНАЧЕ ТабИсполнителей.Сотрудник = торо_КвалификацияРемонтногоПерсонала.Сотрудник
	               |			КОНЕЦ)
	               |			И (ВЫБОР
	               |				КОГДА ТабИсполнителей.Квалификация = ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)
	               |						ИЛИ НЕ &НеОчищатьКвалификацию
	               |					ТОГДА ВЫБОР
	               |							КОГДА &ЗаполнятьОснКвалификацию
	               |								ТОГДА торо_КвалификацияРемонтногоПерсонала.Основная
	               |							КОГДА &Квалификация <> ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)
	               |								ТОГДА торо_КвалификацияРемонтногоПерсонала.Квалификация = &Квалификация
	               |							ИНАЧЕ ТабИсполнителей.Квалификация = торо_КвалификацияРемонтногоПерсонала.Квалификация
	               |						КОНЕЦ
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВЫБОР
	               |		КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |				И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |					ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
	               |			ТОГДА &Сотрудник
	               |		ИНАЧЕ ТабИсполнителей.Сотрудник
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_КвалификацияРемонтногоПерсонала.Период,
	               |	торо_КвалификацияРемонтногоПерсонала.НомерСтроки,
	               |	торо_КвалификацияРемонтногоПерсонала.Сотрудник,
	               |	торо_КвалификацияРемонтногоПерсонала.Квалификация,
	               |	торо_КвалификацияРемонтногоПерсонала.Основная,
	               |	торо_КвалификацияРемонтногоПерсонала.Удаленная
	               |ПОМЕСТИТЬ КвалификацииМаксПериоды
	               |ИЗ
	               |	МаксПериоды КАК МаксПериоды
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_КвалификацияРемонтногоПерсонала КАК торо_КвалификацияРемонтногоПерсонала
	               |		ПО МаксПериоды.Период = торо_КвалификацияРемонтногоПерсонала.Период
	               |			И МаксПериоды.Сотрудник = торо_КвалификацияРемонтногоПерсонала.Сотрудник
	               |			И (ВЫБОР
	               |				КОГДА &ЗаполнятьОснКвалификацию
	               |					ТОГДА торо_КвалификацияРемонтногоПерсонала.Основная
	               |				КОГДА ТИПЗНАЧЕНИЯ(&Квалификация) = ТИП(Справочник.торо_КвалификацииРемонтногоПерсонала)
	               |						И &Квалификация <> ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)
	               |					ТОГДА торо_КвалификацияРемонтногоПерсонала.Квалификация = &Квалификация
	               |				ИНАЧЕ ЛОЖЬ
	               |			КОНЕЦ)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабИсполнителей.РемонтыОборудования_ID,
	               |	ТабИсполнителей.ОбъектРемонта КАК ОбъектРемонта,
	               |	ТабИсполнителей.ВидРемонта КАК ВидРемонта,
	               |	ТабИсполнителей.ДатаНачалаРемонта,
	               |	ТабИсполнителей.ДатаОкончанияРемонта,
	               |	ТабИсполнителей.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	ТабИсполнителей.ДатаНачала,
	               |	ТабИсполнителей.ДатаОкончания,
	               |	ТабИсполнителей.КТУ,
	               |	ТабИсполнителей.ВремяРаботы,
	               |	ТабИсполнителей.СуммаКНачислению,
	               |	ТабИсполнителей.ID,
	               |	ТабИсполнителей.Уровень,
	               |	ВЫБОР
	               |		КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |				И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |					ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
	               |			ТОГДА &Сотрудник
	               |		ИНАЧЕ ТабИсполнителей.Сотрудник
	               |	КОНЕЦ КАК Сотрудник,
	               |	ВЫБОР
	               |		КОГДА КвалификацииМаксПериоды.Квалификация ЕСТЬ NULL 
	               |			ТОГДА ВЫБОР
	               |					КОГДА &НеОчищатьКвалификацию
	               |						ТОГДА ТабИсполнителей.Квалификация
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка)
	               |				КОНЕЦ
	               |		ИНАЧЕ КвалификацииМаксПериоды.Квалификация
	               |	КОНЕЦ КАК Квалификация,
	               //|	ТабИсполнителей.Обрабатывать КАК Обрабатывать,
	               |	ТабИсполнителей.Исполнитель_ID
	               |ИЗ
	               |	ТабИсполнителей КАК ТабИсполнителей
	               |		ЛЕВОЕ СОЕДИНЕНИЕ КвалификацииМаксПериоды КАК КвалификацииМаксПериоды
	               |		ПО (ВЫБОР
	               |				КОГДА &Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |						И (ТабИсполнителей.Сотрудник = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |							ИЛИ НЕ &ТолькоДляНеустановленныхСотрудников)
	               |					ТОГДА &Сотрудник = КвалификацииМаксПериоды.Сотрудник
	               |				ИНАЧЕ ТабИсполнителей.Сотрудник = КвалификацииМаксПериоды.Сотрудник
	               |			КОНЕЦ)";
				   	
	Запрос.УстановитьПараметр("ТабИсполнителей"                    , ТЗИсполнителей);
	Запрос.УстановитьПараметр("ТолькоДляНеустановленныхСотрудников", НеОчищатьСотрудника);
	Запрос.УстановитьПараметр("Сотрудник"                          , Сотрудник);
	Запрос.УстановитьПараметр("НеОчищатьКвалификацию"              , НеОчищатьКвалификацию);
	Запрос.УстановитьПараметр("Квалификация"                       , ?(Квалификация = "<основная>",Справочники.торо_КвалификацииРемонтногоПерсонала.ПустаяСсылка(),Квалификация));
	Запрос.УстановитьПараметр("ЗаполнятьОснКвалификацию"           , Квалификация = "<основная>");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МассивСтрокДерева = ДеревоЗначений.Строки.НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID,Исполнитель_ID", Выборка.ID,Выборка.РемонтыОборудования_ID,Выборка.Исполнитель_ID), Истина);
		
		Для Каждого СтрокаДерева Из МассивСтрокДерева Цикл
			ЗаполнитьЗначенияСвойств(СтрокаДерева, Выборка);
		КонецЦикла;

	КонецЦикла; 
	
	ЗначениеВРеквизитФормы(ДеревоЗначений,"ДеревоИсполнителей");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлаги(НужноУстановить = Неопределено)
	
	Для каждого Объекты Из ДеревоИсполнителей.ПолучитьЭлементы() Цикл
		Для каждого Ремонт Из Объекты.ПолучитьЭлементы() Цикл
			Для каждого РемРабота Из Ремонт.ПолучитьЭлементы() Цикл
				Для каждого СтрокаИсполнитель Из РемРабота.ПолучитьЭлементы() Цикл
					СтрокаИсполнитель.Выбран = ?(НужноУстановить = Неопределено, Не СтрокаИсполнитель.Выбран, НужноУстановить);				
				КонецЦикла; 
			КонецЦикла; 
		КонецЦикла; 
	КонецЦикла;
		
КонецПроцедуры


#КонецОбласти



 
 
