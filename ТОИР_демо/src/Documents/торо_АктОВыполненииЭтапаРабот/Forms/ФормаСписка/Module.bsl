#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, ДокументыОснования,ЗаполнитьКолонкуЕстьФайлы, УстановитьСвойствоЭлементовФормыОтПрав",Истина,Истина,Истина, Истина));	
	// Конец ограничение ввода на основании

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьАктНаПриемкуОборудованияИзРемонта" 
		        ИЛИ ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_АктНаПриемкуОборудованияИзРемонта")
				  И Источник = ЭтаФорма Тогда
		Если Параметр = Неопределено ИЛИ НЕ Параметр.Количество() Тогда			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать хотя бы 1 ремонт!'"), СтатусСообщения.Важное);			
		Иначе			
			Для каждого Элем Из Параметр Цикл
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Элементы.Список.ТекущиеДанные.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Элементы.Список.ТекущиеДанные.Ссылка);
				торо_Печать.НапечататьДокумент("Документ.торо_АктОВыполненииЭтапаРабот", "АктНаПриемкуОборудованияИзРемонта", МассивПараметровКоманды, СтруктураПараметровКоманды);
			КонецЦикла; 			
		КонецЕсли;
	ИначеЕсли (ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьАктВыполненныхРемонтныхРабот"
					ИЛИ ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРемонтныхРабот")
					И Источник = ЭтаФорма Тогда
		Если Параметр = Неопределено ИЛИ НЕ Параметр.Количество() Тогда			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать хотя бы 1 ремонт!'"), СтатусСообщения.Важное);			
		Иначе			
			Для каждого Элем Из Параметр Цикл
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Элементы.Список.ТекущиеДанные.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Элементы.Список.ТекущиеДанные.Ссылка);
				торо_Печать.НапечататьДокумент("Документ.торо_АктОВыполненииЭтапаРабот", "АктВыполненныхРемонтныхРабот", МассивПараметровКоманды, СтруктураПараметровКоманды);
			КонецЦикла; 			
		КонецЕсли;		
	ИначеЕсли (ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьФормаКС2" 
		   	 ИЛИ ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьФормаКС3")
					И Источник = ЭтаФорма Тогда
		
		Если НЕ (Параметр = Неопределено ИЛИ НЕ Параметр.Количество()) Тогда
			
			Если ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПечатьФормаКС2" Тогда
				ТекстЭлементаВсеПодрядчики = НСтр("ru = '(КС-2 для всех подрядчиков)'");
				ТекстПредупреждения = НСтр("ru = 'В документе для выбранных ремонтов не указан ни один подрядчик. Формы КС-2 не будут созданы.'");
				ЗаголовокСпискаВыбора = НСтр("ru = 'Формировать КС-2 для...'");
				ПечатнаяФорма = "ФормаКС2";
			Иначе
				ТекстЭлементаВсеПодрядчики = НСтр("ru = '(КС-3 для всех подрядчиков)'");
				ТекстПредупреждения = НСтр("ru = 'В документе для выбранных ремонтов не указан ни один подрядчик. Формы КС-3 не будут созданы.'");
				ЗаголовокСпискаВыбора = НСтр("ru = 'Формировать КС-3 для...'");
				ПечатнаяФорма = "ФормаКС3";
			КонецЕсли;
			
			Документ=Элементы.Список.ТекущиеДанные.Ссылка;
				
			МассивПодрядчиков = ПолучитьСписокПодрядчиков(Документ, Параметр);
			Если МассивПодрядчиков.Количество()=0 Тогда					
				ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);	
			Иначе	
				// Перенесено из ТОиР 1.3
				УникальныйНомерВсе = Новый УникальныйИдентификатор;
				СписокПодрядчиков = Новый СписокЗначений;
				СписокПодрядчиков.Добавить(УникальныйНомерВсе, ТекстЭлементаВсеПодрядчики);
				//
				Для Каждого ТекПодрядчик Из МассивПодрядчиков Цикл
					СписокПодрядчиков.Добавить(ТекПодрядчик);
				КонецЦикла;		
					
				СписокПодрядчиков.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ОбработкаОповещенияЗавершение", ЭтотОбъект, Новый Структура("Документ, СписокПодрядчиков, УникальныйНомерВсе, Элем, ПечатнаяФорма", Документ, СписокПодрядчиков, УникальныйНомерВсе, Параметр, ПечатнаяФорма)), ЗаголовокСпискаВыбора);
			КонецЕсли;
						
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаОповещенияЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    Документ = ДополнительныеПараметры.Документ;
    СписокПодрядчиков = ДополнительныеПараметры.СписокПодрядчиков;
    УникальныйНомерВсе = ДополнительныеПараметры.УникальныйНомерВсе;
    Элем = ДополнительныеПараметры.Элем;
	 ПечатнаяФорма = ДополнительныеПараметры.ПечатнаяФорма;
    
    Выбор = ВыбранныйЭлемент;
    
    Если Выбор <> Неопределено Тогда
        ПодрядчикДляКС = Выбор.Значение;
        
        ФормироватьКСДля = Новый СписокЗначений;
        Если ПодрядчикДляКС = УникальныйНомерВсе Тогда
            СписокПодрядчиков.Удалить(СписокПодрядчиков.НайтиПоЗначению(УникальныйНомерВсе));
            ФормироватьКСДля = СписокПодрядчиков.Скопировать();
        Иначе
            ФормироватьКСДля.Добавить(Выбор.Значение);
        КонецЕсли; 
        
        СтруктураПараметровКоманды = Новый Структура("Док, ID, Подрядчик", Документ, Элем, ФормироватьКСДля);
        МассивПараметровКоманды = Новый Массив();
        МассивПараметровКоманды.Добавить(Документ);
        торо_Печать.НапечататьДокумент("Документ.торо_АктОВыполненииЭтапаРабот", ПечатнаяФорма, МассивПараметровКоманды,СтруктураПараметровКоманды);
    КонецЕсли;

КонецПроцедуры

// Функция возвращает список контрагентов для выбранного ремонта
&НаСервере
Функция ПолучитьСписокПодрядчиков(Документ, СписокIDРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Контрагент
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ПодрядчикиРемонтныхРабот КАК торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.РемонтыОборудования_ID В(&РемонтыОборудования_ID)
	|	И торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Документ);
	Запрос.УстановитьПараметр("РемонтыОборудования_ID", СписокIDРемонта);
	
	МассивПодрядчиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Контрагент");
	
	Возврат МассивПодрядчиков; 	
	
КонецФункции
#КонецОбласти