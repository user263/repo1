

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 

Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа
Перем ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов;

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		
		ТекДата = ТекущаяДата();
		Дата = ?(ТекДата < Основание.Дата, Основание.Дата, ТекДата);
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда 
		
		ТекДата = ТекущаяДата();
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("ДокументыОснования", "Документы основания");
	СписокТЧ.Вставить("РемонтныеРаботы", "Ремонтные работы");
	СписокТЧ.Вставить("РемонтыОборудования", "Ремонты оборудования");
	торо_ОбщегоНазначения.ПроверитьЗаполненностьТабличныхЧастей(ЭтотОбъект, СписокТЧ, Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСРемонтом Из РемонтыОборудования Цикл
		МассивСтрок = РемонтныеРаботы.НайтиСтроки(Новый структура("РемонтыОборудования_ID", СтрокаСРемонтом.ID));
		Если Не МассивСтрок.Количество() Тогда			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для объекта ремонта ""%1"" с видом ремонта ""%2"" отсутствуют строки в дереве ремонтных работ.'"),
			СтрокаСРемонтом.ОбъектРемонта,СтрокаСРемонтом.ВидРемонтныхРабот));
			Отказ = Истина;
			Возврат;			
		КонецЕсли;
	КонецЦикла;
	
	// Согласование++
	
	// Проверим использование статусов документов.
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_АктОВыполненииЭтапаРабот;
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);
	
	Если мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	// Согласование--
	
	
	Если РемонтыОборудования.Количество() = 0 Тогда
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе не заполнена табличная часть ремонтов оборудования. Проведение невозможно!'"));
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	// Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	Заголовок = Строка(Ссылка);        
	// Проверка заполнения табличных частей.
	ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(РемонтныеРаботы, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиТрудовыеЗатраты(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиСерийныеЗапчасти(Отказ, Заголовок);
	
	ПроверитьЗавершенностьОстановочных(Отказ);
	
	ПроверитьДатуДокумента(Отказ, Заголовок);
	
	Если НЕ Отказ Тогда
		УстановитьУправляемыеБлокировки();
		ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
	КонецЕсли;
	
	// закрытие предписаний (вырожденных в ремонты)
  
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПредписанияСрезПоследних.ОбъектРемонта,
	               |	торо_ПредписанияСрезПоследних.ID,
	               |	торо_ПредписанияСрезПоследних.Описание,
	               |	торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта,
	               |	торо_ПредписанияСрезПоследних.Обработано,
	               |	торо_ПредписанияСрезПоследних.Период,
	               |	торо_ПредписанияСрезПоследних.Организация,
	               |	торо_ПредписанияСрезПоследних.Подразделение
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(
	               |			,
	               |			ID В (&ID)
	               |				И Регистратор <> &Регистратор) КАК торо_ПредписанияСрезПоследних";
			
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ID",РемонтыОборудования.Выгрузить(РемонтыОборудования.НайтиСтроки(Новый Структура("ЗакрываетПредписание",Истина)),"ID").ВыгрузитьКолонку("ID"));
	ТаблицаЗакрывамыхПредписаний = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ОбработанноеПредписание Из ТаблицаЗакрывамыхПредписаний Цикл
		
		Если ОбработанноеПредписание.Обработано Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки закрытого предписания по %1 (%2)'"),
				ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		ИначеЕсли ОбработанноеПредписание.Период >= Дата Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки предписания по %1 (%2) датой раньше даты регистрации!'"),
				ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		Иначе
			Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
			Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();	
			
			Движение.Период 				= Дата;
			Движение.ОбъектРемонта 			= ОбработанноеПредписание.ОбъектРемонта;
			Движение.ID 					= ОбработанноеПредписание.ID;
			Движение.Обработано 			= Истина;
			Движение.Описание 				= ОбработанноеПредписание.Описание;
			Движение.ПлановаяДатаРемонта 	= ОбработанноеПредписание.ПлановаяДатаРемонта;
			Движение.Организация 			= ОбработанноеПредписание.Организация;
			Движение.Подразделение 			= ОбработанноеПредписание.Подразделение;

		КонецЕсли;
	КонецЦикла;
	
	// закрытие предписаний с закладки закрываемые предписания
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаID.ID,
	               |	ТаблицаID.РемонтыОборудования_ID
	               |ПОМЕСТИТЬ ТаблицаID
	               |ИЗ
	               |	&ТаблицаID КАК ТаблицаID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПредписанияСрезПоследних.ОбъектРемонта,
	               |	торо_ПредписанияСрезПоследних.ID,
	               |	торо_ПредписанияСрезПоследних.Описание,
	               |	торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта,
	               |	торо_ПредписанияСрезПоследних.Обработано,
	               |	торо_ПредписанияСрезПоследних.Период,
	               |	ТаблицаID.РемонтыОборудования_ID,
	               |	торо_ПредписанияСрезПоследних.Организация,
	               |	торо_ПредписанияСрезПоследних.Подразделение
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(
	               |			,
	               |			ID В
	               |				(ВЫБРАТЬ
	               |					ТаблицаID.ID
	               |				ИЗ
	               |					ТаблицаID)) КАК торо_ПредписанияСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаID КАК ТаблицаID
	               |		ПО торо_ПредписанияСрезПоследних.ID = ТаблицаID.ID";
			
	Запрос.УстановитьПараметр("ТаблицаID",ЗакрываемыеПредписания.Выгрузить(,"ID,РемонтыОборудования_ID"));
	ТаблицаЗакрывамыхПредписанийТЧ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ОбработанноеПредписание Из ТаблицаЗакрывамыхПредписанийТЧ Цикл
		
		Если ОбработанноеПредписание.Обработано Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки закрытого предписания по %1 (%2)'"),
				ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		ИначеЕсли ОбработанноеПредписание.Период >= Дата Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки предписания по %1 (%2) датой раньше даты регистрации!'"),
				ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		Иначе
			Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
			Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();	
			
			Движение.Период 				= Дата;
			Движение.ОбъектРемонта 			= ОбработанноеПредписание.ОбъектРемонта;
			Движение.ID 					= ОбработанноеПредписание.ID;
			Движение.Обработано 			= Истина;
			Движение.Описание 				= ОбработанноеПредписание.Описание;
			Движение.ПлановаяДатаРемонта 	= ОбработанноеПредписание.ПлановаяДатаРемонта;
			Движение.РемонтыОборудования_id = ОбработанноеПредписание.РемонтыОборудования_ID;
			Движение.Организация 			= ОбработанноеПредписание.Организация;
			Движение.Подразделение 			= ОбработанноеПредписание.Подразделение;

		КонецЕсли;
	КонецЦикла;
	
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовОснований(Ссылка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	 торо_РаботаСоСтатусамиДокументовСервер.ОчиститьСогласованиеПриКопировании(ЭтотОбъект);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_АктОВыполненииЭтапаРабот;
		торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Ссылка, РемонтыОборудования.ВыгрузитьКолонку("ID"));
	Если МассивIDДляБлокировки <> Неопределено И МассивIDДляБлокировки.Количество() > 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Не Отказ Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗавершенностьОстановочных(Отказ)
	
	Если ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты") Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	РемонтыОборудования.ОбъектРемонта,
		|	РемонтыОборудования.ВидРемонтныхРабот,
		|	РемонтыОборудования.ДатаНачала,
		|	РемонтыОборудования.ДатаОкончания,
		|	РемонтыОборудования.ID,
		|	РемонтыОборудования.ЗавершитьРемонт
		|ПОМЕСТИТЬ РемонтыОборудования
		|ИЗ
		|	&РемонтыОборудования КАК РемонтыОборудования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ВидРемонтныхРабот,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаНачала,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаОкончания
		|ИЗ
		|	РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, НЕ Отвязан) КАК торо_ОстановочныеРемонтыСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		|			ПО торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого = торо_ЗавершенныеРемонтныеРаботы.ID
		|			ЛЕВОЕ СОЕДИНЕНИЕ РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования1
		|			ПО торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого = торо_АктОВыполненииЭтапаРаботРемонтыОборудования1.ID
		|				И (торо_АктОВыполненииЭтапаРаботРемонтыОборудования1.ЗавершитьРемонт)
		|		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID = торо_ОстановочныеРемонтыСрезПоследних.IDОсновного
		|			И (торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт)
		|ГДЕ
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования1.ID ЕСТЬ NULL 
		|	И торо_ЗавершенныеРемонтныеРаботы.ID ЕСТЬ NULL ";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("РемонтыОборудования", РемонтыОборудования.Выгрузить());
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			Отказ = Истина;
			Пока Выборка.Следующий() Цикл
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ремонт с видом <%1> по объекту <%2> за период <%3 - %4> является остановочным. Для основного завершены не все зависимые ремонты!'"),
					Выборка.ВидРемонтныхРабот,Выборка.ОбъектРемонта,Выборка.ДатаНачала,Выборка.ДатаОкончания);
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	// закрытие предписаний (по таблице ремонты оборудования)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтыОборудования.Выгрузить(Новый Структура("ЗакрываетПредписание",Истина),"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// закрытие предписаний (по таблице закрываемых предписаний)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗакрываемыеПредписания.Выгрузить(,"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// подготовка таблицы проведения (по списку ремонтных работ)
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ВыполняемыеРемонтныеРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтныеРаботы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "РемонтыОборудования_ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDОперации","ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Родитель_ID","Родитель_ID");
	
	// подготовка таблицы проведения (по списку ремонтных работ)
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтныеРаботы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "РемонтыОборудования_ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDОперации","ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Родитель_ID","Родитель_ID");
	
	// движения по регистру РегистрСведений.торо_ВыполненныеРемонтныеРаботы
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВыполненныеРемонтныеРаботы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтныеРаботы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDРемонта", "РемонтыОборудования_ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("IDОперации","ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Родитель_ID","Родитель_ID");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Процедура ПроверитьДатуДокумента(Отказ, Заголовок)
	
	МассивОснований = ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	СписокДатОснований = Новый СписокЗначений;
	Для Каждого Основание Из МассивОснований Цикл
		СписокДатОснований.Добавить(Основание.Дата);
	КонецЦикла;
	СписокДатОснований.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Если Дата < СписокДатОснований[0].Значение Тогда
		СтрокаСообщения = НСтр("ru = 'Дата документа меньше даты документа-основания!'");
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ДокументыОснования";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");
	
	// Теперь вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		Для Каждого СтрокаТЧ Из ДокументыОснования Цикл
			Если НЕ СтрокаТЧ.ДокументОснование.Проведен Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Акт можно вводить только на основании проведенного документа (строка № %1).'"),
					СтрокаТЧ.НомерСтроки));
				Отказ = Истина;
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "МатериальныеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ДокументыОснования";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Теперь вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "МатериальныеЗатраты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты()

// Проверяет правильность заполнения строк табличной части "МатериальныеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиТрудовыеЗатраты(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ТрудовыеЗатраты";
	
	СтруктураОбязательныхПолей = Новый Структура("Сотрудник");
	Если Константы.торо_ЗапретитьПроведениеАктовСИсполнителямиБезУказанияКвал.Получить() Тогда
		СтруктураОбязательныхПолей.Вставить("Квалификация");
	КонецЕсли;
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры  

// Проверяет правильность заполнения строк табличной части "МатериальныеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиСерийныеЗапчасти(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "СерийныеЗапчасти";
	
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, СтатусДвиженияСерийныхЗЧ, НоменклатураНовая, СтатусДвиженияНовойЗЧ");
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонта,ВидРемонтныхРабот,ДатаНачала,ДатаОкончания");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтыОборудования", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	// Проверка существования дефектов в документах-основаниях (выявленнх дефектах).
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ИДДефекта КАК ИДДефекта,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник КАК ДокументИсточник,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.НомерСтроки
	|ПОМЕСТИТЬ ВТ_РемонтыОборудования
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументИсточник,
	|	ИДДефекта,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ВыявленныеДефектыСписокДефектов.ID КАК ID,
	|	торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта,
	|	торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент,
	|	торо_ВыявленныеДефектыСписокДефектов.Ссылка КАК ДокументИсточник
	|ПОМЕСТИТЬ ВТ_СписокДефектов
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	|ГДЕ
	|	торо_ВыявленныеДефектыСписокДефектов.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_РемонтыОборудования.ДокументИсточник
	|			ИЗ
	|				ВТ_РемонтыОборудования КАК ВТ_РемонтыОборудования)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументИсточник,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_РемонтыОборудования.ID,
	|	ВТ_РемонтыОборудования.ОбъектРемонта,
	|	ВТ_РемонтыОборудования.ИДДефекта,
	|	ВТ_РемонтыОборудования.ДокументИсточник,
	|	ВТ_РемонтыОборудования.НомерСтроки
	|ИЗ
	|	ВТ_РемонтыОборудования КАК ВТ_РемонтыОборудования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СписокДефектов КАК ВТ_СписокДефектов
	|		ПО ВТ_РемонтыОборудования.ДокументИсточник = ВТ_СписокДефектов.ДокументИсточник
	|			И ВТ_РемонтыОборудования.ИДДефекта = ВТ_СписокДефектов.ID
	|			И ВТ_РемонтыОборудования.ОбъектРемонта = ВТ_СписокДефектов.ОтказавшийЭлемент
	|ГДЕ
	|	ВТ_СписокДефектов.ОбъектРемонта ЕСТЬ NULL 
	|	И ВТ_РемонтыОборудования.ДокументИсточник ССЫЛКА Документ.торо_ВыявленныеДефекты";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ВыборкаОшибок = Результат.Выбрать();
	Пока ВыборкаОшибок.Следующий() Цикл
		ШаблонСообщения = НСтр("ru = 'Дефект объекта ремонта ""%1"" удален из документа-основания ""%2""'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ВыборкаОшибок.ОбъектРемонта, ВыборкаОшибок.ДокументИсточник);
		ИндексСтроки = ВыборкаОшибок.НомерСтроки - 1;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Ссылка, "Объект.РемонтыОборудования["+ИндексСтроки+"].ОбъектРемонта");
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтныеРаботы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(ТаблицаРемонтныхРабот, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РемонтнаяРабота");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтныеРаботы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
	ТаблицаПроведения			= ПодготовитьТаблицуПроведения();
	ТаблицаЗапчастей			= ПодготовитьТаблицуЗапчастей();
	ТаблицаМатериальныхЗатрат 	= ПодготовитьТаблицуМатериальныхЗатрат(ТаблицаПроведения);
	ТаблицаТрудовыхЗатрат		= ПодготовитьТаблицуТрудовыхЗатрат(ТаблицаПроведения);
	ТаблицаПодрядчиков		  = ПодрядчикиРемонтныхРабот.Выгрузить();
	
	ДвиженияПоРегистру_торо_ЗатратыПоИсполнителямВыполненныхРемонтов(РежимПроведения, ТаблицаПодрядчиков, Отказ, Заголовок);
	
	ДвиженияПоРегистру_торо_СоответствиеТехОперацийИСпособовСтроительства(Отказ);

	ДвиженияПоРегистру_торо_Ремонты(РежимПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_АктыПоРемонтам(РежимПроведения, Отказ);	
	
	ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботы(РежимПроведения, ТаблицаПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(РежимПроведения, ТаблицаПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_ВыполненныеРемонтныеРаботы(РежимПроведения, ТаблицаПроведения, Отказ);
	
	// Движение по регистру "торо_ЗавершенныеРемонтныеРаботы".
	ДвиженияПоРегистру_торо_ЗавершенныеРемонтныеРаботы(РежимПроведения, Отказ);
	
	// Движение по регистру "торо_ИсторияЗапчастейОбъектаРемонта".
	ДвиженияПоРегистру_торо_ИсторияЗапчастейОбъектаРемонта(РежимПроведения, ТаблицаЗапчастей, Отказ);
	
	// Движение по регистру "торо_фактическиеМатериальныеЗатратыРемонтныхРабот".
	ДвиженияПоРегистру_торо_фактическиеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ, Заголовок);
	
	// Движение по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
	ДвиженияПоРегистру_торо_фактическиеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ, Заголовок);
	
	ДвиженияПоРегистру_торо_ФактическиеЗатратыЗапчастей(РежимПроведения, ТаблицаЗапчастей, Отказ, Заголовок);
	
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботы(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ВыполняемыеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстаток;
		ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстаток;
				
		Если НЕ ЗавершитьРемонтныеРаботы  Тогда
			
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				ВыполненоОперации = СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот / СтрТаб.КолОперацийВТехКарте;
				
				ПроцентОперацииДляЗаписи = Мин(ВыполненоОперации, СтрТаб.ПроцентОперацийОстаток);
				ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстаток * СтрТаб.ПроцентВыполненияРабот / 100;
			Иначе
				
				ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстаток;
				
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстаток Тогда
					ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстаток;
				Иначе
					ПроцентОперацииДляЗаписи = СтрТаб.Количество * 100;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроцентОперацииДляЗаписи = 0 И ПроцентРемонтаДляЗаписи = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.торо_ВыполняемыеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.РемонтнаяРабота = СтрТаб.РемонтнаяРабота;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		
		Движение.ПроцентОпераций = ПроцентОперацииДляЗаписи;
		Движение.ПроцентРемонта  = ПроцентРемонтаДляЗаписи;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ЗапланированныеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстатокЗаплРем;
		ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстатокЗаплРем;
				
		Если НЕ ЗавершитьРемонтныеРаботы  Тогда
			
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстатокЗаплРем Тогда
					ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстатокЗаплРем;
				Иначе
					ПроцентОперацииДляЗаписи = СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот;
				КонецЕсли;
				
				ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстатокЗаплРем * СтрТаб.ПроцентВыполненияРабот / 100;
				
			Иначе
				
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстатокЗаплРем Тогда
					ПроцентОперацииДляЗаписи = СтрТаб.ПроцентОперацийОстатокЗаплРем;
				Иначе
					ПроцентОперацииДляЗаписи = СтрТаб.Количество * 100;
				КонецЕсли;
				
				ПроцентРемонтаДляЗаписи = СтрТаб.ПроцентРемонтаОстатокЗаплРем;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПроцентОперацииДляЗаписи = 0 И ПроцентРемонтаДляЗаписи = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		
		Движение.ПроцентОпераций = ПроцентОперацииДляЗаписи;
		Движение.ПроцентРемонта	 = ПроцентРемонтаДляЗаписи;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВыполненныеРемонтныеРаботы(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ВыполненныеРемонтныеРаботы.Записывать = Истина;
	
	Если ЗавершитьРемонтныеРаботы Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВремТаб.РемонтыОборудования_ID КАК IDРемонта,
		|	ВремТаб.ID КАК IDОперации,
		|	ВремТаб.Родитель_ID
		|ПОМЕСТИТЬ Таб
		|ИЗ 
		|	&Таб КАК ВремТаб
		|
		|;
		|
		|ВЫБРАТЬ
		|	торо_ВыполненныеРемонтныеРаботыСрезПоследних.IDРемонта,
		|	торо_ВыполненныеРемонтныеРаботыСрезПоследних.IDОперации,
		|	торо_ВыполненныеРемонтныеРаботыСрезПоследних.Родитель_ID
		|ИЗ
		|	РегистрСведений.торо_ВыполненныеРемонтныеРаботы.СрезПоследних(, (IDОперации, IDРемонта, Родитель_ID) В (ВЫБРАТЬ Таб.IDОперации, Таб.IDРемонта, Таб.Родитель_ID ИЗ Таб КАК Таб)) КАК торо_ВыполненныеРемонтныеРаботыСрезПоследних";
		
		Запрос.УстановитьПараметр("Таб", ТабРемРаб);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТабЗакрытыхРабот = РезультатЗапроса.Выгрузить();
		
	КонецЕсли;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		ДелатьДвижение = Ложь;
		Если ЗавершитьРемонтныеРаботы Тогда
			МассивСтрок = ТабЗакрытыхРабот.НайтиСтроки(Новый Структура("IDОперации, IDРемонта, Родитель_ID", СтрТаб.ID, СтрТаб.РемонтыОборудования_ID, СтрТаб.Родитель_ID));
			Если МассивСтрок.Количество() Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗавершитьРемонтныеРаботы Тогда
			ПроцентВыполнения = (100 - (СтрТаб.ПроцентОперацийОстатокЗаплРем - СтрТаб.ПроцентВыполненияРабот)) * СтрТаб.Количество;
			ДелатьДвижение = Истина;
		Иначе
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				Если СтрТаб.ПроцентВыполненияРабот = 100 Тогда
					ПроцентВыполнения = 100;
					ДелатьДвижение = Истина;
				КонецЕсли;
			Иначе
				Если СтрТаб.Выполнено Тогда
					ПроцентВыполнения = 100;
					ДелатьДвижение = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ДелатьДвижение Тогда 
			Движение = Движения.торо_ВыполненныеРемонтныеРаботы.Добавить();
			Движение.Период = Дата;
			Движение.IDОперации = СтрТаб.ID;
			Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
			Движение.Родитель_ID = СтрТаб.Родитель_ID;
			Движение.ПроцентВыполнения = ПроцентВыполнения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_Ремонты(РежимПроведения, Отказ)
	
	// Движения по регистру сведений торо_Ремонты
	Движения.торо_Ремонты.Записывать = Истина;
	Для Каждого СтрРемонта Из РемонтыОборудования Цикл
		
		Движение = Движения.торо_Ремонты.Добавить();
		Движение.Период 			= МоментВремени().Дата;
		Движение.ID 				= СтрРемонта.ID;
		Движение.ОбъектРемонта 		= СтрРемонта.ОбъектРемонта;
		Движение.ВидРемонта			= СтрРемонта.ВидРемонтныхРабот;
		Движение.ДатаНачалаФакт		= СтрРемонта.ДатаНачала;
		Движение.ДатаОкончанияФакт	= СтрРемонта.ДатаОкончания;
		Движение.ГарантийныйРемонт  = СтрРемонта.ГарантийныйРемонт;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_АктыПоРемонтам(РежимПроведения, Отказ)
	
	// Движения по регистру сведений торо_АктыПоРемонтам
	Движения.торо_АктыПоРемонтам.Записывать = Истина;
	Для Каждого СтрРемонта Из РемонтыОборудования Цикл
		
		Движение = Движения.торо_АктыПоРемонтам.Добавить();
		Движение.Период 			= МоментВремени().Дата;
		Движение.IDРемонта			= СтрРемонта.ID;
		
	КонецЦикла;		
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ЗавершенныеРемонтныеРаботы".
//
Процедура ДвиженияПоРегистру_торо_ЗавершенныеРемонтныеРаботы(РежимПроведения, Отказ)
	
	Для Каждого СтрокаРО Из РемонтыОборудования Цикл
		
		Если ЗавершитьРемонтныеРаботы ИЛИ СтрокаРО.ЗавершитьРемонт Тогда
			
			Движение = Движения.торо_ЗавершенныеРемонтныеРаботы.Добавить();
			
			Движение.ВидРемонтныхРабот = СтрокаРО.ВидРемонтныхРабот;
			Движение.ОбъектРемонта = СтрокаРО.ОбъектРемонта;
			
			Движение.ДатаНачала = СтрокаРО.ДатаНачала;
			Движение.ДатаОкончания = СтрокаРО.ДатаОкончания;
			
			Движение.ID = СтрокаРО.ID;
			
			Движение.Период = Дата;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.торо_ЗавершенныеРемонтныеРаботы.Записать();
	
КонецПроцедуры // ДвиженияПоРегистру_торо_ЗавершенныеРемонтныеРаботы()

// Процедура выполняет движения документа по регистру "торо_ИсторияЗапчастейОбъектаРемонта".
//
Процедура ДвиженияПоРегистру_торо_ИсторияЗапчастейОбъектаРемонта(РежимПроведения, ТаблицаЗапчастей, Отказ)
	
	Для каждого ТекСтрока из ТаблицаЗапчастей цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ОбъектРемонта) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ошибка проведения по регистру ""История запчастей объекта ремонта""'"));
			Возврат;	
		КонецЕсли;
		
		Движение=Движения.торо_ИсторияЗапчастейОбъектаРемонта.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение,ТекСтрока);		
		
		Движение.Период = Дата;
		Движение.Количество = ?(ЗначениеЗаполнено(ТекСтрока.Количество) И Не ЗначениеЗаполнено(ТекСтрока.СерийныйНомер) ,ТекСтрока.Количество,1);
		
	КонецЦикла;
	
	// †
	Движения.торо_ИсторияЗапчастейОбъектаРемонта.Записать(Истина);
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ФактическиеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ, Заголовок)
	
	Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьМатериальныеЗатраты ИЗ ТаблицаМатериальныхЗатрат Цикл
		Движение = Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Добавить();
		Движение.ID = ЗаписьМатериальныеЗатраты.ID;
		Движение.РемонтыОборудования_ID = ЗаписьМатериальныеЗатраты.РемонтыОборудования_ID;
		Движение.Количество = ЗаписьМатериальныеЗатраты.Количество;
		Движение.Номенклатура = ЗаписьМатериальныеЗатраты.Номенклатура;
		Движение.Период = ЗаписьМатериальныеЗатраты.Период;
		Движение.РемонтнаяРабота = ЗаписьМатериальныеЗатраты.РемонтнаяРабота;
		Движение.ХарактеристикаНоменклатуры = ЗаписьМатериальныеЗатраты.ХарактеристикаНоменклатуры;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
//	
Процедура ДвиженияПоРегистру_торо_ФактическиеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ, Заголовок)
		
	Движения.торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьТрудовыеЗатраты ИЗ ТаблицаТрудовыхЗатрат Цикл
		Движение = Движения.торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.Добавить();
		Движение.РемонтыОборудования_ID = ЗаписьТрудовыеЗатраты.РемонтыОборудования_ID;
		Движение.ID = ЗаписьТрудовыеЗатраты.ID;
		Движение.Квалификация = ЗаписьТрудовыеЗатраты.Квалификация;
		Движение.Количество = ЗаписьТрудовыеЗатраты.Количество;
		Движение.Период = ЗаписьТрудовыеЗатраты.ДатаНачала;
		Движение.Сотрудник = ЗаписьТрудовыеЗатраты.Сотрудник;
		Движение.РемонтнаяРабота = ЗаписьТрудовыеЗатраты.РемонтнаяРабота;
		Движение.Сумма = ЗаписьТрудовыеЗатраты.Сумма;
		Движение.ВремяРаботы = ЗаписьТрудовыеЗатраты.ВремяРаботы;
	КонецЦикла;

	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
//	
Процедура ДвиженияПоРегистру_торо_ФактическиеЗатратыЗапчастей(РежимПроведения, ТаблицаЗапчастей, Отказ, Заголовок)
	
	НаборДвижений = Движения.торо_ФактическиеЗатратыЗапчастей;
	
	// Получим таблицу значений, совпадающую со структурой набора записей регистра.
	ТаблицаДвижений = НаборДвижений.Выгрузить();
	
	// Заполним таблицу движений.
	торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаЗапчастей.Скопировать(Новый Структура("Установлена", Истина)), ТаблицаДвижений);
	
	НаборДвижений.мПериод            = Дата;
	НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
	
	Если Не Отказ Тогда
		Движения.торо_ФактическиеЗатратыЗапчастей.ВыполнитьДвижения();
	КонецЕсли;
	
	Движения.торо_ФактическиеЗатратыЗапчастей.Записать(Истина);
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗатратыПоИсполнителямВыполненныхРемонтов(РежимПроведения, ТаблицаПодрядчиков, Отказ, Заголовок)
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	Движения.торо_ЗатратыПоИсполнителямВыполненныхРемонтов.Записывать = Истина;
	
	// Запись по исполнителям удалена, т.к. дублирует информацию в регистре торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.
	// Оставлены только подрядчики.
	Для Каждого Подрядчик Из ТаблицаПодрядчиков Цикл
		
		Если РемонтныеРаботы.Найти(Подрядчик.ID,"ID") = Неопределено Тогда
						
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нет ремонтной работы с ИД '") + Подрядчик.ID);
			Продолжить;
			
		КонецЕсли;
		
		Если Подрядчик.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли; 
		
		Движение = Движения.торо_ЗатратыПоИсполнителямВыполненныхРемонтов.Добавить();
		Движение.Исполнитель = Подрядчик.Контрагент;
		Движение.Период = Дата;
		Движение.Сумма = Подрядчик.Сумма;
		Движение.УникальныйИдентификатор = Подрядчик.ID;
		СтрокаРемонта = РемонтныеРаботы.Найти(Подрядчик.ID,"ID");
		Движение.ТехнологическаяОперация = СтрокаРемонта.РемонтнаяРабота;
		Движение.РемонтыОборудования_ID = СтрокаРемонта.РемонтыОборудования_ID;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_СоответствиеТехОперацийИСпособовСтроительства".
Процедура ДвиженияПоРегистру_торо_СоответствиеТехОперацийИСпособовСтроительства(Отказ)
	
	Если Не Отказ Тогда
		
		Движения.торо_СоответствиеТехОперацийИСпособовСтроительства.Записывать = Истина;
		
		Запрос 			= Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст 	= 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID,
		|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&РемонтныеРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID,
		|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.РемонтыОборудования_ID
		|ПОМЕСТИТЬ Хозспособ
		|ИЗ
		|	&ТрудовыеЗатраты КАК торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.РемонтыОборудования_ID
		|ПОМЕСТИТЬ Подряд
		|ИЗ
		|	&ПодрядчикиРемонтныхРабот КАК торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.ID,
		|	ВТ.РемонтыОборудования_ID,
		|	ВЫБОР
		|		КОГДА Подряд.РемонтыОборудования_ID ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьКонтрагент,
		|	ВЫБОР
		|		КОГДА Хозспособ.РемонтыОборудования_ID ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьКвалификация
		|ПОМЕСТИТЬ ВТ_ПодрядХозспособ
		|ИЗ
		|	ВТ КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Подряд КАК Подряд
		|		ПО ВТ.РемонтыОборудования_ID = Подряд.РемонтыОборудования_ID
		|		ЛЕВОЕ СОЕДИНЕНИЕ Хозспособ КАК Хозспособ
		|		ПО ВТ.РемонтыОборудования_ID = Хозспособ.РемонтыОборудования_ID
		|			И ВТ.ID = Хозспособ.ID
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВТ.РемонтыОборудования_ID,
		|	ВТ.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ПодрядХозспособ.ID,
		|	ВТ_ПодрядХозспособ.РемонтыОборудования_ID,
		|	ВЫБОР
		|		КОГДА ВТ_ПодрядХозспособ.ЕстьКонтрагент
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный)
		|		КОГДА ВТ_ПодрядХозспособ.ЕстьКвалификация
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Хозспособ)
		|		ИНАЧЕ NULL
		|	КОНЕЦ КАК СпособСтроительства
		|ПОМЕСТИТЬ ВСпособыСтроительства
		|ИЗ
		|	ВТ_ПодрядХозспособ КАК ВТ_ПодрядХозспособ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_СоответствиеТехОперацийИСпособовСтроительства.ID_ТехОперация,
		|	торо_СоответствиеТехОперацийИСпособовСтроительства.РемонтыОборудования_ID,
		|	торо_СоответствиеТехОперацийИСпособовСтроительства.СпособСтроительства,
		|	торо_СоответствиеТехОперацийИСпособовСтроительства.НаименованиеТехОперации,
		|	торо_СоответствиеТехОперацийИСпособовСтроительства.Регистратор
		|ПОМЕСТИТЬ ТабРегистра
		|ИЗ
		|	РегистрСведений.торо_СоответствиеТехОперацийИСпособовСтроительства КАК торо_СоответствиеТехОперацийИСпособовСтроительства
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	торо_СоответствиеТехОперацийИСпособовСтроительства.РемонтыОборудования_ID,
		|	торо_СоответствиеТехОперацийИСпособовСтроительства.ID_ТехОперация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ.РемонтыОборудования_ID,
		|	ВТ.ID КАК ID_ТехОперация,
		|	ЕСТЬNULL(торо_СоответствиеТехОперацийИСпособовСтроительства.СпособСтроительства, ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.ПустаяСсылка)) КАК СпособСтроительства,
		|	торо_СоответствиеТехОперацийИСпособовСтроительства.НаименованиеТехОперации,
		|	торо_СоответствиеТехОперацийИСпособовСтроительства.Регистратор,
		|	ВТ.СпособСтроительства КАК СпособСтроительстваВТекущемДокументе
		|ИЗ
		|	ВСпособыСтроительства КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабРегистра КАК торо_СоответствиеТехОперацийИСпособовСтроительства
		|		ПО (торо_СоответствиеТехОперацийИСпособовСтроительства.РемонтыОборудования_ID = ВТ.РемонтыОборудования_ID)
		|			И (торо_СоответствиеТехОперацийИСпособовСтроительства.ID_ТехОперация = ВТ.ID)";
		
		Запрос.УстановитьПараметр("РемонтныеРаботы",РемонтныеРаботы);				  
		Запрос.УстановитьПараметр("ТрудовыеЗатраты",ТрудовыеЗатраты);				  		
		Запрос.УстановитьПараметр("ПодрядчикиРемонтныхРабот",ПодрядчикиРемонтныхРабот);				  		
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если НЕ Выборка.СпособСтроительства = Выборка.СпособСтроительстваВТекущемДокументе И НЕ Выборка.СпособСтроительства = Перечисления.СпособыСтроительства.ПустаяСсылка() И ЗначениеЗаполнено(Выборка.СпособСтроительстваВТекущемДокументе) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для Тех. операции %1 с ID = %2 уже заведен другой способ строительства %3 документом: %4.'"),
					Выборка.НаименованиеТехОперации,Выборка.ID_ТехОперация,Выборка.СпособСтроительства,Выборка.Регистратор));
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ТЗРабот = Результат.Выгрузить();
		
		Для Каждого СтрокаТЗРабот из ТЗРабот Цикл
			Если ЗначениеЗаполнено(СтрокаТЗРабот.СпособСтроительства) Тогда
				Продолжить;
			КонецЕсли;	
			МассивРабот = РемонтныеРаботы.НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаТЗРабот.ID_ТехОперация, СтрокаТЗРабот.РемонтыОборудования_ID));
			Если МассивРабот.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРемРабот = МассивРабот[0];
			
			Если ТипЗнч(СтрокаРемРабот.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				
				СтрокаРемонтаОборудования = РемонтыОборудования.Найти(СтрокаРемРабот.РемонтыОборудования_ID);
				
				СтрокиТрудЗатрат =  ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID",СтрокаРемРабот.ID,СтрокаРемРабот.РемонтыОборудования_ID));
				Если СтрокиТрудЗатрат.Количество() <> 0 Тогда					
					Движение = Движения.торо_СоответствиеТехОперацийИСпособовСтроительства.Добавить();
					Движение.Период = Дата;
					Движение.ID_ТехОперация = СтрокаРемРабот.ID;
					Движение.РемонтыОборудования_ID = СтрокаРемРабот.РемонтыОборудования_ID;
					Движение.НаименованиеТехОперации = СтрокаРемРабот.РемонтнаяРабота.Наименование;
					Движение.СпособСтроительства = Перечисления.СпособыСтроительства.Хозспособ;
				Иначе // берем из подрядчика
					ID_Ремонта = СтрокаРемРабот.Родитель_ID;
					
					СтрокиПодряда = ПодрядчикиРемонтныхРабот.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID",ID_Ремонта,СтрокаРемРабот.РемонтыОборудования_ID));
					Если СтрокиПодряда.Количество() <> 0 Тогда
						Движение = Движения.торо_СоответствиеТехОперацийИСпособовСтроительства.Добавить();
						Движение.Период = Дата;
						Движение.ID_ТехОперация = СтрокаРемРабот.ID;
						Движение.РемонтыОборудования_ID = СтрокаРемРабот.РемонтыОборудования_ID;
						Движение.НаименованиеТехОперации = СтрокаРемРабот.РемонтнаяРабота.Наименование;
						Движение.СпособСтроительства = Перечисления.СпособыСтроительства.Подрядный;					
					Иначе						
						#Если Клиент Тогда
						 	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru = 'Для Тех.Операции %1 ремонта %2(%3) не задан исполнитель %4.'"),
								Строка(СтрокаРемРабот.РемонтнаяРабота),СтрокаРемонтаОборудования.ОбъектРемонта,СтрокаРемонтаОборудования.ВидРемонтныхРабот,Строка(Ссылка)));
						#КонецЕсли						
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

// Выгружает данные в табличной части в таблицу значений, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуЗапчастей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Ссылка,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияСерийныхЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Количество,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияНовойЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.КоличествоНовое,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатурыНовая
	|ПОМЕСТИТЬ ТабСерийныеЗапчасти
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.СерийныеЗапчасти КАК торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Ссылка = &Ссылка
	|	И (торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая <> торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры
	|			ИЛИ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
	|				И торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID
	|ПОМЕСТИТЬ ТабРемОборудования
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Ссылка,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияСерийныхЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Количество,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияНовойЗЧ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.КоличествоНовое,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатурыНовая,
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ОбъектРемонта
	|ПОМЕСТИТЬ СерийныеЗапчасти
	|ИЗ
	|	ТабСерийныеЗапчасти КАК торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабРемОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|		ПО торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID = торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатуры КАК СерийныйНомер,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура КАК Запчасть,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура КАК Номенклатура,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры КАК Характеристика,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияСерийныхЗЧ КАК СтатусДвиженияЗЧ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Количество = 0
	|			ТОГДА 1
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Количество
	|	КОНЕЦ КАК Количество,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID,
	|	ЛОЖЬ КАК Установлена
	|ПОМЕСТИТЬ ИтоговаяТабБезГруппировок
	|ИЗ
	|	СерийныеЗапчасти КАК торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти
	|ГДЕ
	|	НЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияСерийныхЗЧ = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДвиженияСерийныхЗЧ.ПустаяСсылка)
	|	И НЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ОбъектРемонта,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СерияНоменклатурыНовая,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.Номенклатура
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатурыНовая
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.НоменклатураНовая = ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка)
	|			ТОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатуры
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.ХарактеристикаНоменклатурыНовая
	|	КОНЕЦ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияНовойЗЧ,
	|	ВЫБОР
	|		КОГДА торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.КоличествоНовое = 0
	|			ТОГДА 1
	|		ИНАЧЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.КоличествоНовое
	|	КОНЕЦ,
	|	торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.РемонтыОборудования_ID,
	|	ИСТИНА
	|ИЗ
	|	СерийныеЗапчасти КАК торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти
	|ГДЕ
	|	НЕ торо_АктОВыполненииЭтапаРаботСерийныеЗапчасти.СтатусДвиженияНовойЗЧ = ЗНАЧЕНИЕ(Перечисление.торо_ВидыДвиженияСерийныхЗЧ.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИтоговаяТабБезГруппировок.ОбъектРемонта,
	|	ИтоговаяТабБезГруппировок.СерийныйНомер,
	|	ИтоговаяТабБезГруппировок.Запчасть,
	|	ИтоговаяТабБезГруппировок.Номенклатура,
	|	ИтоговаяТабБезГруппировок.ХарактеристикаНоменклатуры,
	|	ИтоговаяТабБезГруппировок.Характеристика,
	|	ИтоговаяТабБезГруппировок.СтатусДвиженияЗЧ,
	|	СУММА(ИтоговаяТабБезГруппировок.Количество) КАК Количество,
	|	ИтоговаяТабБезГруппировок.РемонтыОборудования_ID,
	|	ИтоговаяТабБезГруппировок.Установлена
	|ИЗ
	|	ИтоговаяТабБезГруппировок КАК ИтоговаяТабБезГруппировок
	|
	|СГРУППИРОВАТЬ ПО
	|	ИтоговаяТабБезГруппировок.ОбъектРемонта,
	|	ИтоговаяТабБезГруппировок.СерийныйНомер,
	|	ИтоговаяТабБезГруппировок.Запчасть,
	|	ИтоговаяТабБезГруппировок.Номенклатура,
	|	ИтоговаяТабБезГруппировок.ХарактеристикаНоменклатуры,
	|	ИтоговаяТабБезГруппировок.Характеристика,
	|	ИтоговаяТабБезГруппировок.СтатусДвиженияЗЧ,
	|	ИтоговаяТабБезГруппировок.РемонтыОборудования_ID,
	|	ИтоговаяТабБезГруппировок.Установлена";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	ТаблицаЗапчастей = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаЗапчастей;
	
КонецФункции 

// Функция возвращает таблицу значений для движения по регистру "торо_ФактическиеМатериальныеЗатратыРемонтныхРабот".
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуМатериальныхЗатрат(ТаблицаДвижений)
	
	ТаблицаМатериальныхЗатрат = Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Выгрузить();
			
	Если МатериальныеЗатраты.Количество()=0 Тогда
		
		Возврат ТаблицаМатериальныхЗатрат;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДвижений.РемонтыОборудования_ID,
	               |	ТаблицаДвижений.ID,
	               |	ТаблицаДвижений.Родитель_ID,
	               |	ТаблицаДвижений.РемонтнаяРабота
	               |ПОМЕСТИТЬ ТаблицаРемонтныхРабот
	               |ИЗ
	               |	&ТаблицаДвижений КАК ТаблицаДвижений
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаДвижений.РемонтыОборудования_ID,
	               |	ТаблицаДвижений.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПлановыеМатериальныеЗатраты.РемонтыОборудования_ID,
	               |	ПлановыеМатериальныеЗатраты.ID,
	               |	ПлановыеМатериальныеЗатраты.Номенклатура,
	               |	ПлановыеМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	               |	ПлановыеМатериальныеЗатраты.КоличествоОборот КАК Количество
	               |ПОМЕСТИТЬ ПлановыеМатериальныеЗатраты
	               |ИЗ
	               |	РегистрНакопления.торо_ПлановыеМатериальныеЗатратыРемонтныхРабот.Обороты(
	               |			,
	               |			,
	               |			Регистратор,
	               |			(РемонтыОборудования_ID, ID) В
	               |				(ВЫБРАТЬ
	               |					ТаблицаРемонтныхРабот.РемонтыОборудования_ID,
	               |					ТаблицаРемонтныхРабот.ID
	               |				ИЗ
	               |					ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот)) КАК ПлановыеМатериальныеЗатраты
	               |ГДЕ
	               |	ПлановыеМатериальныеЗатраты.Регистратор = ЗНАЧЕНИЕ(Документ.торо_ЗаявкаНаРемонт.ПустаяСсылка)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ПлановыеМатериальныеЗатраты.РемонтыОборудования_ID,
	               |	ПлановыеМатериальныеЗатраты.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРемонтныхРабот.ID,
	               |	ТаблицаРемонтныхРабот.Родитель_ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	               |	ПлановыеМатериальныеЗатраты.Номенклатура,
	               |	ПлановыеМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	               |	ЕСТЬNULL(ПлановыеМатериальныеЗатраты.Количество, 0) КАК КоличествоПлан
	               |ИЗ
	               |	ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеМатериальныеЗатраты КАК ПлановыеМатериальныеЗатраты
	               |		ПО ТаблицаРемонтныхРабот.РемонтыОборудования_ID = ПлановыеМатериальныеЗатраты.РемонтыОборудования_ID
	               |			И ТаблицаРемонтныхРабот.ID = ПлановыеМатериальныеЗатраты.ID";
	
	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	
	ТаблицаПМЗ_Процент = Запрос.Выполнить().Выгрузить();
	
	Счетчик = ТаблицаПМЗ_Процент.Количество()-1;
	Пока Счетчик >= 0 Цикл
		
		СтрокаТЗ = ТаблицаПМЗ_Процент[Счетчик];
		
		Если ТипЗнч(СтрокаТЗ.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ТаблицаПМЗ_Процент.Удалить(СтрокаТЗ);
		КонецЕсли; 
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла; 
	
	БуферМЗ = МатериальныеЗатраты.Выгрузить();
	БуферМЗ.Колонки.Добавить("Период");
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		
		КоэффициентЕИ = СтрокаТЗ.ЕдиницаИзмерения.Коэффициент;
		
		СтрокаТЗ.Количество = СтрокаТЗ.Количество * ?(КоэффициентЕИ = 0, 1, КоэффициентЕИ);
		
		СтрокаРемонта = РемонтыОборудования.Найти(СтрокаТЗ.РемонтыОборудования_ID);
		Если СтрокаРемонта <> Неопределено Тогда
			СтрокаТЗ.Период = СтрокаРемонта.ДатаОкончания;
		КонецЕсли;
		
	КонецЦикла;
	
	БуферМЗ.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период", "Количество");
	
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ID) Тогда
			
			НайденнаяСтрокаТЗ = РемонтныеРаботы.Найти(СтрокаТЗ.ID, "ID");
			Если Не НайденнаяСтрокаТЗ = Неопределено Тогда
				
				НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, СтрокаТЗ);
				НовСтрокаТЗ.РемонтнаяРабота = НайденнаяСтрокаТЗ.РемонтнаяРабота;
				
			КонецЕсли; 
			
		Иначе
			
			МассивСтрок = ТаблицаПМЗ_Процент.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",
			СтрокаТЗ.Номенклатура, СтрокаТЗ.ХарактеристикаНоменклатуры));
			Если МассивСтрок.Количество() > 0 Тогда
				
				СуммаНормаПроцент = 0;
				Для Каждого Элемент Из МассивСтрок Цикл
					
					СуммаНормаПроцент = СуммаНормаПроцент + Элемент.ПроцентНеВыполненныхРабот * Элемент.КоличествоПлан;
					
				КонецЦикла; 
				
				Для Каждого Элемент Из МассивСтрок Цикл
					
					НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, Элемент);
					
					НовСтрокаТЗ.Количество = Элемент.ПроцентНеВыполненныхРабот * Элемент.КоличествоПлан * СтрокаТЗ.Количество / СуммаНормаПроцент;
					
				КонецЦикла;
				
			Иначе
				
				СуммаНормаПроцент = ТаблицаПМЗ_Процент.Итог("ПроцентНеВыполненныхРабот");
				Для Каждого СтрокаРР Из ТаблицаПМЗ_Процент Цикл
					
					НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, СтрокаРР);
					
					НовСтрокаТЗ.Номенклатура = СтрокаТЗ.Номенклатура;
					НовСтрокаТЗ.ХарактеристикаНоменклатуры = СтрокаТЗ.ХарактеристикаНоменклатуры;
					
					НовСтрокаТЗ.Количество = СтрокаРР.ПроцентНеВыполненныхРабот* СтрокаТЗ.Количество / СуммаНормаПроцент;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли;
		
		
	КонецЦикла; 
	
	ТаблицаМатериальныхЗатрат.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период, РемонтнаяРабота", "Количество");
	
	Возврат ТаблицаМатериальныхЗатрат;
	
КонецФункции

// Функция формирует таблицу значений с данными по движениям документа.
//
Функция ПодготовитьТаблицуПроведения() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ID КАК ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтнаяРабота,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Выполнено,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.ПроцентВыполненияРабот,
	|	торо_АктОВыполненииЭтапаРаботРемонтныеРаботы.Количество";
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ РемРаботыАкта";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТабРемРабот";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	&РемРаботы КАК торо_АктОВыполненииЭтапаРаботРемонтныеРаботы
	|ИНДЕКСИРОВАТЬ ПО
	|";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ID
		|;
		|";
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|	РемонтыОборудования_ID,
		|	ID,
		|	Родитель_ID
		|
		|;
		|";
	КонецЕсли;
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = Запрос.Текст + "
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ЗапланированныеРемонтныеРаботыОбороты.Регистратор,
		|	торо_ЗапланированныеРемонтныеРаботыОбороты.Родитель_ID КАК Родитель_ID
		|ПОМЕСТИТЬ ЗаплРемРаб
		|ИЗ
		|	РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			Родитель_ID В
		|				(ВЫБРАТЬ
		|					РемРаботыАкта.ID
		|				ИЗ
		|					РемРаботыАкта КАК РемРаботыАкта)) КАК торо_ЗапланированныеРемонтныеРаботыОбороты
		|ГДЕ
		|	торо_ЗапланированныеРемонтныеРаботыОбороты.Регистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель_ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабРемРаботАкта.ID КАК ID,
		|	ТабРемРаботАкта.РемонтнаяРабота,
		|	ТабРемРаботАкта.Родитель_ID КАК Родитель_ID,
		|	ТабРемРаботАкта.РемонтыОборудования_ID КАК РемонтыОборудования_ID,
		|	ТабРемРаботАкта.Выполнено,
		|	ТабРемРаботАкта.ПроцентВыполненияРабот,
		|	ТабРемРаботАкта.Количество,
		|	СУММА(1) КАК КолОперацийВТехКарте
		|ПОМЕСТИТЬ ТабРемРабот
		|ИЗ
		|	РемРаботыАкта КАК ТабРемРаботАкта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаплРемРаб КАК ЗаплРемРаб
		|		ПО ТабРемРаботАкта.ID = ЗаплРемРаб.Родитель_ID
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабРемРаботАкта.ID,
		|	ТабРемРаботАкта.РемонтнаяРабота,
		|	ТабРемРаботАкта.Родитель_ID,
		|	ТабРемРаботАкта.РемонтыОборудования_ID,
		|	ТабРемРаботАкта.Выполнено,
		|	ТабРемРаботАкта.ПроцентВыполненияРабот,
		|	ТабРемРаботАкта.Количество
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	РемонтыОборудования_ID,
		|	ID,
		|	Родитель_ID
		|;
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	|	торо_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	|ПОМЕСТИТЬ ВТ_ВыполняемыеРемонтныеРаботыОстатки
	|ИЗ
	|	РегистрНакопления.торо_ВыполняемыеРемонтныеРаботы.Остатки(
	|			&МоментВремени,
	|			(IDРемонта, IDОперации, Родитель_ID) В
	|				(ВЫБРАТЬ
	|					ТабРемРабот.РемонтыОборудования_ID,
	|					ТабРемРабот.ID,
	|					ТабРемРабот.Родитель_ID
	|				ИЗ
	|					ТабРемРабот КАК ТабРемРабот)) КАК торо_ВыполняемыеРемонтныеРаботыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации,
	|	Родитель_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	|	торо_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	|ПОМЕСТИТЬ ВТ_ЗапланированныеРемонтныеРаботыОстатки
	|ИЗ
	|	РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы.Остатки(
	|			&МоментВремени,
	|			(IDРемонта, IDОперации, Родитель_ID) В
	|				(ВЫБРАТЬ
	|					ТабРемРабот.РемонтыОборудования_ID,
	|					ТабРемРабот.ID,
	|					ТабРемРабот.Родитель_ID
	|				ИЗ
	|					ТабРемРабот КАК ТабРемРабот)) КАК торо_ЗапланированныеРемонтныеРаботыОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	IDРемонта,
	|	IDОперации,
	|	Родитель_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	// Текст запроса по выполняемым рем. работам.
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБРАТЬ
	|	ТабРемРабот.ID,
	|	ТабРемРабот.РемонтнаяРабота,
	|	ТабРемРабот.Родитель_ID,
	|	ТабРемРабот.РемонтыОборудования_ID,
	|	ТабРемРабот.Выполнено,
	|	ТабРемРабот.ПроцентВыполненияРабот,
	|	ТабРемРабот.Количество,
	|	ВТ_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	|	ВТ_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ТабРемРабот.КолОперацийВТехКарте";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТ_ВыполняемыеРемонтныеРаботы
	|ИЗ
	|	ТабРемРабот КАК ТабРемРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВыполняемыеРемонтныеРаботыОстатки КАК ВТ_ВыполняемыеРемонтныеРаботыОстатки
	|		ПО ТабРемРабот.РемонтыОборудования_ID = ВТ_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта
	|			И ТабРемРабот.ID = ВТ_ВыполняемыеРемонтныеРаботыОстатки.IDОперации
	|			И ТабРемРабот.Родитель_ID = ВТ_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID;";
	
	// Текст запроса по запланированным рем. работам.
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБРАТЬ
	|	ТабРемРабот.ID,
	|	ТабРемРабот.РемонтнаяРабота,
	|	ТабРемРабот.Родитель_ID,
	|	ТабРемРабот.РемонтыОборудования_ID,
	|	ТабРемРабот.Выполнено,
	|	ТабРемРабот.ПроцентВыполненияРабот,
	|	ТабРемРабот.Количество,
	|	ВТ_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток КАК ПроцентОперацийОстатокЗаплРем,
	|	ВТ_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстатокЗаплРем";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ТабРемРабот.КолОперацийВТехКарте";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТ_ЗапланированныеРемонтныеРаботы
	|ИЗ
	|	ТабРемРабот КАК ТабРемРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЗапланированныеРемонтныеРаботыОстатки КАК ВТ_ЗапланированныеРемонтныеРаботыОстатки
	|		ПО ТабРемРабот.РемонтыОборудования_ID = ВТ_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта
	|			И ТабРемРабот.ID = ВТ_ЗапланированныеРемонтныеРаботыОстатки.IDОперации
	|			И ТабРемРабот.Родитель_ID = ВТ_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID;";
	
	// Объединим две таблицы.
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБРАТЬ
	|	ВТ_ВыполняемыеРемонтныеРаботы.ID,
	|	ВТ_ВыполняемыеРемонтныеРаботы.РемонтнаяРабота,
	|	ВТ_ВыполняемыеРемонтныеРаботы.Родитель_ID,
	|	ВТ_ВыполняемыеРемонтныеРаботы.РемонтыОборудования_ID,
	|	ВТ_ВыполняемыеРемонтныеРаботы.Выполнено,
	|	ВТ_ВыполняемыеРемонтныеРаботы.ПроцентВыполненияРабот,
	|	ВТ_ВыполняемыеРемонтныеРаботы.Количество,
	|	ВТ_ВыполняемыеРемонтныеРаботы.ПроцентОперацийОстаток КАК ПроцентОперацийОстаток,
	|	ВТ_ВыполняемыеРемонтныеРаботы.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстаток,
	|	0 КАК ПроцентОперацийОстатокЗаплРем,
	|	0 КАК ПроцентРемонтаОстатокЗаплРем";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ВТ_ВыполняемыеРемонтныеРаботы.КолОперацийВТехКарте";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТ_СводнаяТаблицаРемонтов
	|ИЗ
	|	ВТ_ВыполняемыеРемонтныеРаботы КАК ВТ_ВыполняемыеРемонтныеРаботы
	|		
	|ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|	ВТ_ЗапланированныеРемонтныеРаботы.ID,
	|	ВТ_ЗапланированныеРемонтныеРаботы.РемонтнаяРабота,
	|	ВТ_ЗапланированныеРемонтныеРаботы.Родитель_ID,
	|	ВТ_ЗапланированныеРемонтныеРаботы.РемонтыОборудования_ID,
	|	ВТ_ЗапланированныеРемонтныеРаботы.Выполнено,
	|	ВТ_ЗапланированныеРемонтныеРаботы.ПроцентВыполненияРабот,
	|	ВТ_ЗапланированныеРемонтныеРаботы.Количество,
	|	0,
	|	0,
	|	ВТ_ЗапланированныеРемонтныеРаботы.ПроцентОперацийОстатокЗаплРем,
	|	ВТ_ЗапланированныеРемонтныеРаботы.ПроцентРемонтаОстатокЗаплРем";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ВТ_ЗапланированныеРемонтныеРаботы.КолОперацийВТехКарте";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ВТ_ЗапланированныеРемонтныеРаботы КАК ВТ_ЗапланированныеРемонтныеРаботы;";
	
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБРАТЬ
	|	ВТ_СводнаяТаблицаРемонтов.ID,
	|	ВТ_СводнаяТаблицаРемонтов.РемонтнаяРабота,
	|	ВТ_СводнаяТаблицаРемонтов.Родитель_ID,
	|	ВТ_СводнаяТаблицаРемонтов.РемонтыОборудования_ID,
	|	ВТ_СводнаяТаблицаРемонтов.Выполнено,
	|	ВТ_СводнаяТаблицаРемонтов.ПроцентВыполненияРабот,
	|	ВТ_СводнаяТаблицаРемонтов.Количество,
	|	СУММА(ВТ_СводнаяТаблицаРемонтов.ПроцентОперацийОстаток) КАК ПроцентОперацийОстаток,
	|	СУММА(ВТ_СводнаяТаблицаРемонтов.ПроцентРемонтаОстаток) КАК ПроцентРемонтаОстаток,
	|	СУММА(ВТ_СводнаяТаблицаРемонтов.ПроцентОперацийОстатокЗаплРем) КАК ПроцентОперацийОстатокЗаплРем,
	|	СУММА(ВТ_СводнаяТаблицаРемонтов.ПроцентРемонтаОстатокЗаплРем) КАК ПроцентРемонтаОстатокЗаплРем";
	
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ВТ_СводнаяТаблицаРемонтов.КолОперацийВТехКарте";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|ИЗ
	|	ВТ_СводнаяТаблицаРемонтов КАК ВТ_СводнаяТаблицаРемонтов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СводнаяТаблицаРемонтов.ID,
	|	ВТ_СводнаяТаблицаРемонтов.РемонтнаяРабота,
	|	ВТ_СводнаяТаблицаРемонтов.Родитель_ID,
	|	ВТ_СводнаяТаблицаРемонтов.РемонтыОборудования_ID,
	|	ВТ_СводнаяТаблицаРемонтов.Выполнено,
	|	ВТ_СводнаяТаблицаРемонтов.ПроцентВыполненияРабот,
	|	ВТ_СводнаяТаблицаРемонтов.Количество";
	Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
		Запрос.Текст = запрос.Текст + "
		|	,ВТ_СводнаяТаблицаРемонтов.КолОперацийВТехКарте";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени());
	Запрос.УстановитьПараметр("ЗавершитьРемонтныеРаботы", ЗавершитьРемонтныеРаботы);
	Запрос.УстановитьПараметр("РемРаботы", РемонтныеРаботы.Выгрузить());
	
	ТаблицаПроведения = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПроведения;
	
КонецФункции

// Функция возвращает таблицу значений для движения по регистру "торо_ФактическиеТрудовыеЗатратыРемонтныхРабот".
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТрудовыхЗатрат(ТаблицаДвижений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаДвижений.ID,
	|	ТаблицаДвижений.Родитель_ID,
	|	ТаблицаДвижений.РемонтыОборудования_ID,
	|	ТаблицаДвижений.РемонтнаяРабота
	|ПОМЕСТИТЬ ТаблицаРемонтныхРаботНачало
	|ИЗ
	|	&ТаблицаДвижений КАК ТаблицаДвижений
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРемонтов.ID,
	|	ТаблицаРемонтов.ДатаНачала
	|ПОМЕСТИТЬ ТаблицаРемонтов
	|ИЗ &ТаблицаРемонтов КАК ТаблицаРемонтов
	|;
	| ВЫБРАТЬ
	| 	ТаблицаДвижений.ID,
	|	ТаблицаДвижений.Родитель_ID,
	|	ТаблицаДвижений.РемонтыОборудования_ID,
	|	ТаблицаДвижений.РемонтнаяРабота,
	|	ТаблицаРемонтов.ДатаНачала
	|ПОМЕСТИТЬ ТаблицаРемонтныхРабот
	|ИЗ ТаблицаРемонтныхРаботНачало КАК ТаблицаДвижений
	|	ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРемонтов КАК ТаблицаРемонтов
	|	ПО ТаблицаДвижений.РемонтыОборудования_ID = ТаблицаРемонтов.ID
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаДвижений.РемонтыОборудования_ID,
	|	ТаблицаДвижений.ID
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Квалификация,
	|	СУММА(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.СуммаКНачислению) КАК СуммаКНачислению,
	|	СУММА(1) КАК Количество,
	|	СУММА(торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ВремяРаботы) КАК ВремяРаботы,
	|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID,
	|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.РемонтыОборудования_ID,
	|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Сотрудник
	|ПОМЕСТИТЬ ТаблицаТрудозатратАкт
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.ТрудовыеЗатраты КАК торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Квалификация,
	|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.ID,
	|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.Сотрудник,
	|	торо_АктОВыполненииЭтапаРаботТрудовыеЗатраты.РемонтыОборудования_ID
	|ИНДЕКСИРОВАТЬ ПО
	|	РемонтыОборудования_ID,
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТрудозатратАкт.Квалификация,
	|	СУММА(ТаблицаТрудозатратАкт.СуммаКНачислению) КАК Сумма,
	|	СУММА(ТаблицаТрудозатратАкт.Количество) КАК Количество,
	|	СУММА(ТаблицаТрудозатратАкт.ВремяРаботы) КАК ВремяРаботы,
	|	ТаблицаТрудозатратАкт.ID,                
	|	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	|	ТаблицаТрудозатратАкт.Сотрудник,
	|	ТаблицаТрудозатратАкт.РемонтыОборудования_ID,
	|	ТаблицаРемонтныхРабот.ДатаНачала
	|ИЗ
	|	ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТрудозатратАкт КАК ТаблицаТрудозатратАкт
	|		ПО ТаблицаРемонтныхРабот.ID = ТаблицаТрудозатратАкт.ID
	|		И ТаблицаРемонтныхРабот.РемонтыОборудования_ID = ТаблицаТрудозатратАкт.РемонтыОборудования_ID
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаТрудозатратАкт.Квалификация,
	|	ТаблицаТрудозатратАкт.ID,
	|	ТаблицаТрудозатратАкт.РемонтыОборудования_ID,
	|	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	|	ТаблицаРемонтныхРабот.ДатаНачала,
	|	ТаблицаТрудозатратАкт.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДвижений", РемонтныеРаботы.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаРемонтов", РемонтыОборудования.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов");

#КонецОбласти

#КонецЕсли