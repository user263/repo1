
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа
перем СтруктураДанных Экспорт;  // Структура, хранящая данные для работы с уведомлениями.

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.торо_ОстановочныеРемонты") Тогда
			
			ВидОперации = Перечисления.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка;
			КорректируемыйДокумент = ДанныеЗаполнения;
			ДокументОснование = ДанныеЗаполнения.ДокументОснование;
			IDОсновногоРемонта = ДанныеЗаполнения.IDОсновногоРемонта;
			ОбъектРемонта = ДанныеЗаполнения.ОбъектРемонта;
			ВидРемонта = ДанныеЗаполнения.ВидРемонта;
			ДатаНачалаРемонта = ДанныеЗаполнения.ДатаНачалаРемонта;
			ДатаОкончанияРемонта = ДанныеЗаполнения.ДатаОкончанияРемонта;
			ДатаНачалаРемонтаСт = ДанныеЗаполнения.ДатаНачалаРемонта;
			ДатаОкончанияРемонтаСт = ДанныеЗаполнения.ДатаОкончанияРемонта;
			
			Для Каждого Строка Из ДанныеЗаполнения.СвязанныеРемонты Цикл
				Если Не Строка.Отвязать Тогда
					НС = СвязанныеРемонты.Добавить();
					ЗаполнитьЗначенияСвойств(НС, Строка, ,"ДатаНачалаРемонтаСтарая, ДатаОкончанияРемонтаСтарая");
					НС.ДатаНачалаРемонтаСтарая = Строка.ДатаНачалаРемонта;
					НС.ДатаОкончанияРемонтаСтарая = Строка.ДатаОкончанияРемонта;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ВидОперации = Перечисления.торо_ВидыОперацийДокументаОстановочныйРемонт.ОстановочныйРемонт;
			ДокументОснование = ДанныеЗаполнения;
		КонецЕсли;
		Организация = ДанныеЗаполнения.Организация;
		Подразделение = ДанныеЗаполнения.Подразделение;
	Иначе
		ВидОперации = Перечисления.торо_ВидыОперацийДокументаОстановочныйРемонт.ОстановочныйРемонт;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	ПроверкиПередПроведением(Отказ);
	
	Если Не Отказ Тогда
		ДвиженияПоРегистрам(Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	торо_СоответствиеКорректировокДокументамППР.Корректировка
	|ИЗ
	|	РегистрСведений.торо_СоответствиеКорректировокДокументамППР КАК торо_СоответствиеКорректировокДокументамППР
	|ГДЕ
	|	торо_СоответствиеКорректировокДокументамППР.Корректируемый = &Корректируемый";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Корректируемый", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'На основании документа введены корректировки!'");
		Сообщение.Сообщить();
	КонецЕсли;
			
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ОстановочныеРемонты;
		торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства,, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	торо_РаботаСоСтатусамиДокументовСервер.ОчиститьСогласованиеПриКопировании(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверкиПередПроведением(Отказ)
	
	// Согласование++
	
	// Проверим использование статусов документов.
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ОстановочныеРемонты;
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);
	
	Если мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	// Согласование--
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите основной ремонт!'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если СвязанныеРемонты.Количество() = 0 Тогда	
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Добавьте хотя бы один зависимый ремонт!'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка Тогда
		
		Если Не КорректируемыйДокумент.Проведен Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Корректируемый документ должен быть проведен!'");
			Сообщение.Сообщить();
		КонецЕсли;
		
		Если Дата <= КорректируемыйДокумент.Дата Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дата корректировки должна быть больше даты корректируемого!'");
			Сообщение.Сообщить();
		КонецЕсли;
			
	КонецЕсли;
	
	Если ДатаНачалаРемонта > ДатаОкончанияРемонта Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Дата начала остановочного ремонта больше даты окончания!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	// Проверим чтобы ни один ремонт в таблице зависимых не выходил за пределы даты начала и окончания основного.
	Для Каждого Зависимый Из СвязанныеРемонты Цикл
		Если Не Зависимый.Отвязать Тогда
			Если Зависимый.ДатаНачалаРемонта < ДатаНачалаРемонта Или Зависимый.ДатаНачалаРемонта > ДатаОкончанияРемонта Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата начала зависимого ремонта в строке №%1 выходит за пределы периода основного ремонта!'"),Зависимый.НомерСтроки);
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
			
			Если Зависимый.ДатаОкончанияРемонта < ДатаНачалаРемонта Или Зависимый.ДатаОкончанияРемонта > ДатаОкончанияРемонта Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата окончания зависимого ремонта в строке №%1  выходит за пределы периода основного ремонта!'"),Зависимый.НомерСтроки);
				Сообщение.Сообщить();
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка Тогда
		Если НЕ ЗначениеЗаполнено(КорректируемыйДокумент) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнено значение реквизита ""Корректируемый документ"".'");
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		
		Если КорректируемыйДокумент.Дата >= Дата Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дата документа должна быть больше даты корректируемого документа!'");
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДвиженияПоРегистрам(Отказ)
	
	ТаблицаРемонтовСОсновным = ПолучитьТаблицуРемонтовСОсновным();
	
	ДвиженияПоРегистру_торо_ОстановочныеРемонты(Отказ, ТаблицаРемонтовСОсновным);
	
	ДвиженияПоРегистру_торо_СоответствиеКорректировокДокументамППР();	
		
	// Движения по регистрам торо_ПлановыеРемонтныеРаботы и торо_ЗаявкиПоРемонтам
	// корректируют даты начала и даты окончания ремонтов.
	
	ДвиженияПоРегистру_торо_ПлановыеРемонтныеРаботы(Отказ, ТаблицаРемонтовСОсновным);
	ДвиженияПоРегистру_торо_ЗаявкиПоРемонтам(Отказ, ТаблицаРемонтовСОсновным);
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗаявкиПоРемонтам(Отказ, ТаблицаРемонтовСОсновным)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СвязанныеРемонты.ID,
	|	СвязанныеРемонты.ДатаНачалаРемонта,
	|	СвязанныеРемонты.ДатаОкончанияРемонта,
	|	СвязанныеРемонты.Отвязать
	|ПОМЕСТИТЬ СвязанныеРемонты
	|ИЗ
	|	&СвязанныеРемонты КАК СвязанныеРемонты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДоступность.ID,
	|	ТабДоступность.ДоступенДляРедактирования
	|ПОМЕСТИТЬ ТабДоступность
	|ИЗ
	|	&ТабДоступность КАК ТабДоступность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ЗаявкиПоРемонтам.IDРемонта,
	|	СвязанныеРемонты.ДатаОкончанияРемонта КАК ДатаКон,
	|	СвязанныеРемонты.ДатаНачалаРемонта КАК ДатаНач,
	|	СвязанныеРемонты.Отвязать КАК Отменен
	|ПОМЕСТИТЬ ПланРемонтов
	|ИЗ
	|	СвязанныеРемонты КАК СвязанныеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
	|				,
	|				IDРемонта В
	|						(ВЫБРАТЬ
	|							СвязанныеРемонты.ID
	|						ИЗ
	|							СвязанныеРемонты КАК СвязанныеРемонты)
	|					И НЕ Отменен) КАК торо_ЗаявкиПоРемонтам
	|		ПО СвязанныеРемонты.ID = торо_ЗаявкиПоРемонтам.IDРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЗаявкиПоРемонтам.IDРемонта, 
	|	торо_ЗаявкиПоРемонтам.ДатаКон КАК ДатаОкончанияРемонтныхРабот,
	|	торо_ЗаявкиПоРемонтам.ДатаНач КАК ДатаНачалаРемонтныхРабот,
	|	торо_ЗаявкиПоРемонтам.Отменен
	|ИЗ
	|	ПланРемонтов КАК торо_ЗаявкиПоРемонтам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабДоступность КАК ТабДоступность
	|		ПО торо_ЗаявкиПоРемонтам.IDРемонта = ТабДоступность.ID
	|ГДЕ
	|	ТабДоступность.ДоступенДляРедактирования";
	
	Запрос.УстановитьПараметр("СвязанныеРемонты", ТаблицаРемонтовСОсновным);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ТабДоступность", Документы.торо_ОстановочныеРемонты.ОбновитьДоступностьДляРедактирования(Ссылка,ПолучитьТаблицуРемонтовСОсновным()));
	ПланРемонтовДвижения = Запрос.Выполнить().Выгрузить();
	
	Если ПланРемонтовДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаСоответствияID = ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок("торо_ЗаявкиПоРемонтам", ТаблицаРемонтовСОсновным);
	НаборЗаписей = РегистрыСведений.торо_ЗаявкиПоРемонтам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	СтарыеДвижения = НаборЗаписей.Выгрузить();
	Движения.торо_ЗаявкиПоРемонтам.Очистить();	
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка Тогда
		Если ТаблицаСоответствияID.Количество() > 0 Тогда
			
			Для Каждого ИсходнаяСтрока Из ПланРемонтовДвижения Цикл
				ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("IDРемонта", ИсходнаяСтрока.IDРемонта));
				Если ТаблицаРегистр.Количество() > 0 И ТаблицаРегистр[0].ДоступенДляРедактирования Тогда
					СтрокаРегистр = ТаблицаРегистр[0];
					
					Движение = Движения.торо_ЗаявкиПоРемонтам.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,СтрокаРегистр);
					
					Движение.Отменен = Истина;
					Движение.Период = Макс(Движение.Период + 1,Дата);
				Иначе
					ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("IDРемонта, Отменен", ИсходнаяСтрока.IDРемонта, Истина));
					Если ТаблицаРегистр.Количество() > 0 Тогда 
						СтрокаРегистр = ТаблицаРегистр[0];
						
						Движение = Движения.торо_ЗаявкиПоРемонтам.Добавить();
						ЗаполнитьЗначенияСвойств(Движение, СтрокаРегистр);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Для Каждого ИсходнаяСтрока Из СтарыеДвижения Цикл
			СтрДостДляРед = ПланРемонтовДвижения.НайтиСтроки(Новый Структура("IDРемонта", ИсходнаяСтрока.IDРемонта));
			СтрЕстьВДок = ТаблицаРемонтовСОсновным.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.IDРемонта));
			Если СтрДостДляРед.Количество() = 0 И СтрЕстьВДок.Количество() > 0 Тогда
				
				Движение = Движения.торо_ЗаявкиПоРемонтам.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,ИсходнаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
		НаборДвижений = Движения.торо_ЗаявкиПоРемонтам;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ЗаявкиПоРемонтам.IDРемонта,
		|	торо_ЗаявкиПоРемонтам.ДатаНачалаРемонтныхРабот,
		|	торо_ЗаявкиПоРемонтам.ДатаОкончанияРемонтныхРабот,
		|	торо_ЗаявкиПоРемонтам.Отменен
		|ПОМЕСТИТЬ ДанныеДляПроведения
		|ИЗ
		|	&ПланРемонтныхРабот КАК торо_ЗаявкиПоРемонтам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	ДанныеДляПроведения.IDРемонта,
		|	ИСТИНА КАК Активность,
		|	ДанныеДляПроведения.ДатаНачалаРемонтныхРабот,
		|	ДанныеДляПроведения.ДатаОкончанияРемонтныхРабот,
		|	ДанныеДляПроведения.Отменен
		|ИЗ
		|	ДанныеДляПроведения КАК ДанныеДляПроведения";
		
		Запрос.УстановитьПараметр("ПланРемонтныхРабот", ПланРемонтовДвижения);
		Запрос.УстановитьПараметр("Период", (Дата));
		
		ПланРемонтныхРабот = Запрос.Выполнить().Выгрузить();
		
		// Заполним таблицу движений.
		торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПланРемонтныхРабот, ТаблицаДвижений);
		
		Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДвижений.ID_Корректировок) Тогда
				
				ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("IDРемонта", СтрокаТаблицыДвижений.IDРемонта));
				
				Если ТаблицаРегистр.Количество() > 0 И Не ТаблицаРегистр[0].ДоступенДляРедактирования Тогда
					СтрокаРегистр = ТаблицаРегистр[0];
					ID_Корректировок = СтрокаРегистр.ID_Корректировок;
				ИначеЕсли ТаблицаРегистр.Количество() > 0 И ЗначениеЗаполнено(ТаблицаРегистр[0].ID_КорректировокПозднегоДокумента) Тогда
					СтрокаРегистр = ТаблицаРегистр[0];
					ID_Корректировок = СтрокаРегистр.ID_КорректировокПозднегоДокумента;	
				Иначе
					
					ID_Корректировок = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				
				СтрокаТаблицыДвижений.ID_Корректировок = ID_Корректировок;
			КонецЕсли;	
			
		КонецЦикла;	
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.торо_ЗаявкиПоРемонтам.ВыполнитьДвижения();
		
	КонецЕсли;
	
	Движения.торо_ЗаявкиПоРемонтам.Записывать = Истина;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ОстановочныеРемонты(Отказ, ТабРемонтовСОсновным)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СвязанныеРемонты.ID,
	|	СвязанныеРемонты.Отвязать
	|ПОМЕСТИТЬ СвязанныеРемонты
	|ИЗ
	|	&СвязанныеРемонты КАК СвязанныеРемонты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДоступность.ID,
	|	ТабДоступность.ДоступенДляРедактирования
	|ПОМЕСТИТЬ ТабДоступность
	|ИЗ
	|	&ТабДоступность КАК ТабДоступность
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&IDОсновного КАК IDОсновного,
	|	торо_ОстановочныеРемонты.ID КАК IDЗависимого, 
	|	торо_ОстановочныеРемонты.Отвязать КАК Отвязан
	|ИЗ
	|	СвязанныеРемонты КАК торо_ОстановочныеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабДоступность КАК ТабДоступность
	|		ПО торо_ОстановочныеРемонты.ID = ТабДоступность.ID
	|ГДЕ
	|	ТабДоступность.ДоступенДляРедактирования";
	
	Запрос.УстановитьПараметр("СвязанныеРемонты", ТабРемонтовСОсновным);
	Запрос.УстановитьПараметр("IDОсновного",IDОсновногоРемонта);
	Запрос.УстановитьПараметр("ТабДоступность", Документы.торо_ОстановочныеРемонты.ОбновитьДоступностьДляРедактирования(Ссылка,ТабРемонтовСОсновным));
	ПланРемонтовДвижения = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСоответствияID = ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок("торо_ОстановочныеРемонты", ТабРемонтовСОсновным);
	НаборЗаписей = РегистрыСведений.торо_ОстановочныеРемонты.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	СтарыеДвижения = НаборЗаписей.Выгрузить();
	Движения.торо_ОстановочныеРемонты.Очистить();	
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка Тогда
		
		Если ТаблицаСоответствияID.Количество() > 0 Тогда
			
			Для Каждого ИсходнаяСтрока Из ПланРемонтовДвижения Цикл
				ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("IDЗависимого", ИсходнаяСтрока.IDЗависимого));
				Если ТаблицаРегистр.Количество() > 0 И ТаблицаРегистр[0].ДоступенДляРедактирования Тогда
					СтрокаРегистр = ТаблицаРегистр[0];
					
					Движение = Движения.торо_ОстановочныеРемонты.Добавить();
					ЗаполнитьЗначенияСвойств(Движение,СтрокаРегистр);
					
					Движение.Отвязан = Истина;
					Движение.Период = Макс(Движение.Период + 1,Дата);
				Иначе
					ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("IDЗависимого, Отвязан", ИсходнаяСтрока.IDЗависимого, Истина));
					Если ТаблицаРегистр.Количество() > 0 Тогда 
						СтрокаРегистр = ТаблицаРегистр[0];
						
						Движение = Движения.торо_ОстановочныеРемонты.Добавить();
						ЗаполнитьЗначенияСвойств(Движение, СтрокаРегистр);
					КонецЕсли;	
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Для Каждого ИсходнаяСтрока Из СтарыеДвижения Цикл
			СтрДостДляРед = ПланРемонтовДвижения.НайтиСтроки(Новый Структура("IDЗависимого", ИсходнаяСтрока.IDЗависимого));
			СтрЕстьВДок = ТабРемонтовСОсновным.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.IDЗависимого));
			Если СтрДостДляРед.Количество() = 0 И СтрЕстьВДок.Количество() > 0 Тогда
				
				Движение = Движения.торо_ОстановочныеРемонты.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,ИсходнаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
		НаборДвижений = Движения.торо_ОстановочныеРемонты;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ОстановочныеРемонты.IDОсновного,
		|	торо_ОстановочныеРемонты.IDЗависимого,
		|	торо_ОстановочныеРемонты.Отвязан
		|ПОМЕСТИТЬ ДанныеДляПроведения
		|ИЗ
		|	&ПланРемонтныхРабот КАК торо_ОстановочныеРемонты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	ДанныеДляПроведения.IDОсновного,
		|	ДанныеДляПроведения.IDЗависимого,
		|	ИСТИНА КАК Активность,
		|	ДанныеДляПроведения.Отвязан
		|ИЗ
		|	ДанныеДляПроведения КАК ДанныеДляПроведения";
		
		Запрос.УстановитьПараметр("ПланРемонтныхРабот", ПланРемонтовДвижения);
		Запрос.УстановитьПараметр("Период", (Дата));
		
		ПланРемонтныхРабот = Запрос.Выполнить().Выгрузить();
		
		// Заполним таблицу движений.
		торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПланРемонтныхРабот, ТаблицаДвижений);
		
		Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДвижений.ID_Корректировок) Тогда
				
				ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("IDЗависимого", СтрокаТаблицыДвижений.IDЗависимого));
				
				Если ТаблицаРегистр.Количество() > 0 И Не ТаблицаРегистр[0].ДоступенДляРедактирования Тогда
					СтрокаРегистр = ТаблицаРегистр[0];
					ID_Корректировок = СтрокаРегистр.ID_Корректировок;
				ИначеЕсли ТаблицаРегистр.Количество() > 0 И ЗначениеЗаполнено(ТаблицаРегистр[0].ID_КорректировокПозднегоДокумента) Тогда
					СтрокаРегистр = ТаблицаРегистр[0];
					ID_Корректировок = СтрокаРегистр.ID_КорректировокПозднегоДокумента;	
				Иначе
					
					ID_Корректировок = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				
				СтрокаТаблицыДвижений.ID_Корректировок = ID_Корректировок;
			КонецЕсли;	
			
		КонецЦикла;	
		
		ТаблицаДвижений.ЗаполнитьЗначения(IDОсновногоРемонта, "IDОсновного");
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.торо_ОстановочныеРемонты.ВыполнитьДвижения();
		
	КонецЕсли;
	
	Движения.торо_ОстановочныеРемонты.Записывать = Истина;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПлановыеРемонтныеРаботы(Отказ, ТаблицаРемонтовСОсновным)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СвязанныеРемонты.ID,
	|	СвязанныеРемонты.ОбъектРемонта,
	|	СвязанныеРемонты.ВидРемонта,
	|	СвязанныеРемонты.ДатаНачалаРемонта,
	|	СвязанныеРемонты.ДатаОкончанияРемонта,
	|	СвязанныеРемонты.ДатаНачалаРемонтаСтарая,
	|	СвязанныеРемонты.ДатаОкончанияРемонтаСтарая,
	|	СвязанныеРемонты.Отвязать
	|ПОМЕСТИТЬ СвязанныеРемонты
	|ИЗ
	|	&СвязанныеРемонты КАК СвязанныеРемонты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДоступность.ID,
	|	ТабДоступность.ДоступенДляРедактирования
	|ПОМЕСТИТЬ ТабДоступность
	|ИЗ
	|	&ТабДоступность КАК ТабДоступность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	СвязанныеРемонты.ДатаОкончанияРемонта КАК ДатаКон,
	|	СвязанныеРемонты.ДатаНачалаРемонта КАК ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.Исполнитель,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения,
	|	СвязанныеРемонты.Отвязать КАК Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_базы_расчета,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_замещающего,
	|	СвязанныеРемонты.ДатаНачалаРемонтаСтарая КАК ДатаНачСт,
	|	СвязанныеРемонты.ДатаОкончанияРемонтаСтарая КАК ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.СтоимостьРемонта КАК СуммаРемонта,
	|	торо_ПланГрафикРемонтаПланРемонтов.Организация,
	|	торо_ПланГрафикРемонтаПланРемонтов.ПериодичностьДетализации,
	|	торо_ПланГрафикРемонтаПланРемонтов.Подразделение
	|ПОМЕСТИТЬ ПланРемонтов
	|ИЗ
	|	СвязанныеРемонты КАК СвязанныеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
	|				,
	|				ID В
	|					(ВЫБРАТЬ
	|						СвязанныеРемонты.ID
	|					ИЗ
	|						СвязанныеРемонты КАК СвязанныеРемонты)) КАК торо_ПланГрафикРемонтаПланРемонтов
	|		ПО (СвязанныеРемонты.ID = торо_ПланГрафикРемонтаПланРемонтов.ID
	|				И НЕ торо_ПланГрафикРемонтаПланРемонтов.Отменен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.Исполнитель,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_базы_расчета,
	|	торо_ПланГрафикРемонтаПланРемонтов.ID_замещающего,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта,
	|	торо_ПланГрафикРемонтаПланРемонтов.Организация,
	|	торо_ПланГрафикРемонтаПланРемонтов.ПериодичностьДетализации,
	|	торо_ПланГрафикРемонтаПланРемонтов.Подразделение
	|ИЗ
	|	ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабДоступность КАК ТабДоступность
	|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТабДоступность.ID
	|ГДЕ
	|	ТабДоступность.ДоступенДляРедактирования";
	
	Запрос.УстановитьПараметр("СвязанныеРемонты",ТаблицаРемонтовСОсновным);
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("ТабДоступность", Документы.торо_ОстановочныеРемонты.ОбновитьДоступностьДляРедактирования(Ссылка,ПолучитьТаблицуРемонтовСОсновным()));
	ПланРемонтовДвижения = Запрос.Выполнить().Выгрузить();
	
	Если ПланРемонтовДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТаблицаСоответствияID = ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок("торо_ПлановыеРемонтныеРаботы", ТаблицаРемонтовСОсновным);
	НаборЗаписей = РегистрыСведений.торо_ПлановыеРемонтныеРаботы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	СтарыеДвижения = НаборЗаписей.Выгрузить();
	Движения.торо_ПлановыеРемонтныеРаботы.Очистить();	
	
		Если ТаблицаСоответствияID.Количество() > 0 Тогда
			
			Для Каждого ИсходнаяСтрока Из ПланРемонтовДвижения Цикл
				Если ЗначениеЗаполнено(ИсходнаяСтрока.ДатаНачСт) и ЗначениеЗаполнено(ИсходнаяСтрока.ДатаКонСт) Тогда
					ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
					Если ТаблицаРегистр.Количество() > 0 И ТаблицаРегистр[0].ДоступенДляРедактирования  Тогда
						СтрокаРегистр = ТаблицаРегистр[0];
						
						Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
						ЗаполнитьЗначенияСвойств(Движение,СтрокаРегистр);
						
						Движение.Отменен = Истина;
						Движение.Период = Движение.Период + 1;
					Иначе
						ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID, Отменен", ИсходнаяСтрока.ID, Истина));
						Если ТаблицаРегистр.Количество() > 0 Тогда 
							СтрокаРегистр = ТаблицаРегистр[0];
							
							Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
							ЗаполнитьЗначенияСвойств(Движение, СтрокаРегистр);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
		Иначе
			Отказ = Истина;
		КонецЕсли;
	
	Если Не Отказ Тогда
		
		Для Каждого ИсходнаяСтрока Из СтарыеДвижения Цикл
			СтрДостДляРед = ПланРемонтовДвижения.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
			СтрЕстьВДок = ТаблицаРемонтовСОсновным.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
			Если СтрДостДляРед.Количество() = 0 И СтрЕстьВДок.Количество() > 0 Тогда
				
				Движение = Движения.торо_ПлановыеРемонтныеРаботы.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,ИсходнаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
		НаборДвижений = Движения.торо_ПлановыеРемонтныеРаботы;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланРемонтныхРабот.ID,
		|	ПланРемонтныхРабот.ВидРемонтныхРабот,
		|	ПланРемонтныхРабот.ОбъектРемонтныхРабот,
		|	ПланРемонтныхРабот.ДатаНач КАК ДатаНачалаРемонтныхРабот,
		|	ПланРемонтныхРабот.ДатаКон КАК ДатаОкончанияРемонтныхРабот,
		|	ПланРемонтныхРабот.Исполнитель,
		|	ПланРемонтныхРабот.Отменен,
		|	ПланРемонтныхРабот.СпособВыполнения,
		|	ПланРемонтныхРабот.Замещен,
		|	ПланРемонтныхРабот.ID_базы_расчета,
		|	ПланРемонтныхРабот.ID_замещающего,
		|	ПланРемонтныхРабот.СуммаРемонта КАК СтоимостьРемонта,
		|	ПланРемонтныхРабот.Организация,
		|	ПланРемонтныхРабот.Подразделение,
		|	ПланРемонтныхРабот.ПериодичностьДетализации
		|ПОМЕСТИТЬ ДанныеДляПроведения
		|ИЗ
		|	&ПланРемонтныхРабот КАК ПланРемонтныхРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	ДанныеДляПроведения.Организация,
		|	ДанныеДляПроведения.Подразделение,
		|	ДанныеДляПроведения.ПериодичностьДетализации,
		|	ДанныеДляПроведения.ID,
		|	ИСТИНА КАК Активность,
		|	ДанныеДляПроведения.ВидРемонтныхРабот,
		|	ДанныеДляПроведения.ОбъектРемонтныхРабот,
		|	ДанныеДляПроведения.ДатаНачалаРемонтныхРабот,
		|	ДанныеДляПроведения.ДатаОкончанияРемонтныхРабот,
		|	ДанныеДляПроведения.Исполнитель,
		|	ДанныеДляПроведения.Отменен,
		|	ДанныеДляПроведения.СпособВыполнения,
		|	ДанныеДляПроведения.Замещен,
		|	ДанныеДляПроведения.ID_базы_расчета,
		|	ДанныеДляПроведения.ID_замещающего,
		|	ДанныеДляПроведения.СтоимостьРемонта
		|ИЗ
		|	ДанныеДляПроведения КАК ДанныеДляПроведения";
		
		Запрос.УстановитьПараметр("ПланРемонтныхРабот", ПланРемонтовДвижения);
		Запрос.УстановитьПараметр("Период", (Дата));
		
		ПланРемонтныхРабот = Запрос.Выполнить().Выгрузить();
		
		// Заполним таблицу движений.
		торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПланРемонтныхРабот, ТаблицаДвижений);
		
			Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
				
				ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID", СтрокаТаблицыДвижений.ID));
				Если ТаблицаРегистр.Количество() > 0 И Не ТаблицаРегистр[0].ДоступенДляРедактирования Тогда
					СтрокаРегистр = ТаблицаРегистр[0];
					ID_Корректировок = СтрокаРегистр.ID_Корректировок;
				Иначе
					ID_Корректировок = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДвижений.ID_Корректировок) Тогда 
					СтрокаТаблицыДвижений.ID_Корректировок = ID_Корректировок;
				КонецЕсли;	
				
			КонецЦикла;	
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.торо_ПлановыеРемонтныеРаботы.ВыполнитьДвижения();
		
	КонецЕсли;
	
	Движения.торо_ПлановыеРемонтныеРаботы.Записывать = Истина;
	
КонецПроцедуры

Функция ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок(ИмяРегистра, ТаблицаРемонтовСОсновным)
	
	Если ИмяРегистра = "торо_ПлановыеРемонтныеРаботы" Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПлановыеРемонтныеРаботы.Период,
		|	ПлановыеРемонтныеРаботы.Регистратор,
		|	ПлановыеРемонтныеРаботы.НомерСтроки,
		|	ПлановыеРемонтныеРаботы.Активность,
		|	ПлановыеРемонтныеРаботы.Организация,
		|	ПлановыеРемонтныеРаботы.ID,
		|	ПлановыеРемонтныеРаботы.ПериодичностьДетализации,
		|	ПлановыеРемонтныеРаботы.ВидРемонтныхРабот,
		|	ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот,
		|	ПлановыеРемонтныеРаботы.Подразделение,
		|	ПлановыеРемонтныеРаботы.ID_Корректировок,
		|	ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот,
		|	ПлановыеРемонтныеРаботы.ДатаОкончанияРемонтныхРабот,
		|	ПлановыеРемонтныеРаботы.Исполнитель,
		|	ПлановыеРемонтныеРаботы.СпособВыполнения,
		|	ПлановыеРемонтныеРаботы.Отменен,
		|	ПлановыеРемонтныеРаботы.ID_базы_расчета,
		|	ПлановыеРемонтныеРаботы.Замещен,
		|	ПлановыеРемонтныеРаботы.ID_замещающего,
		|	ПлановыеРемонтныеРаботы.ДатаНачалаРасчетная,
		|	ПлановыеРемонтныеРаботы.СтоимостьРемонта,
		|	ИСТИНА КАК ДоступенДляРедактирования
		|ИЗ
		|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
		|			&ДатаДок,
		|			ID В (&СписокID)
		|				И НЕ ID В (&СписокIDЗакрытДляРедактирования)
		|				И Регистратор <> &Ссылка) КАК ПлановыеРемонтныеРаботы
		|ГДЕ
		|	НЕ ПлановыеРемонтныеРаботы.Отменен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Период,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.НомерСтроки,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Активность,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Организация,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ПериодичностьДетализации,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ОбъектРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Подразделение,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_Корректировок,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаОкончанияРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Исполнитель,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.СпособВыполнения,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_базы_расчета,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Замещен,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_замещающего,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачалаРасчетная,
		|	торо_ПлановыеРемонтныеРаботыСрезПоследних.СтоимостьРемонта,
		|	ЛОЖЬ
		|ИЗ
		|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
		|			,
		|			Регистратор = &Ссылка
		|				И ID В (&СписокIDЗакрытДляРедактирования)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних";


		МассивID = ТаблицаРемонтовСОсновным.ВыгрузитьКолонку("ID");
		Запрос.УстановитьПараметр("ДатаДок" , Дата);
		Запрос.УстановитьПараметр("СписокID", МассивID);
		
		МассивIDДляБлокировки = Новый Массив;
		МассивОснований = ПолучитьМассивДокументовОснований();
		Для Каждого Основание Из МассивОснований Цикл
			МассивIDПоОснованию = Новый Массив;
			НайденныеСтроки = ТаблицаРемонтовСОсновным.НайтиСтроки(Новый Структура("ДокументИсточник", Основание));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивIDПоОснованию.Добавить(НайденнаяСтрока);
			КонецЦикла;
			МассивIDДляБлокировкиДляДобавления = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Основание, МассивIDПоОснованию);
			Если МассивIDДляБлокировкиДляДобавления <> Неопределено Тогда
				Для Каждого Элемент Из МассивIDДляБлокировкиДляДобавления Цикл
					МассивIDДляБлокировки.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокIDЗакрытДляРедактирования", МассивIDДляБлокировки);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Возврат Запрос.Выполнить().Выгрузить();
	ИначеЕсли ИмяРегистра = "торо_ЗаявкиПоРемонтам" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ЗаявкиНаРемонтСрезПоследних.Период,
		|	торо_ЗаявкиНаРемонтСрезПоследних.Регистратор,
		|	торо_ЗаявкиНаРемонтСрезПоследних.НомерСтроки,
		|	торо_ЗаявкиНаРемонтСрезПоследних.Активность,
		|	торо_ЗаявкиНаРемонтСрезПоследних.IDРемонта,
		|	торо_ЗаявкиНаРемонтСрезПоследних.ID_Корректировок,
		|	торо_ЗаявкиНаРемонтСрезПоследних.ДатаНачалаРемонтныхРабот,
		|	торо_ЗаявкиНаРемонтСрезПоследних.ДатаОкончанияРемонтныхРабот,
		|	торо_ЗаявкиНаРемонтСрезПоследних.Отменен
		|	
		|ПОМЕСТИТЬ ДвиженияСамогоДокумента
		|ИЗ
		|	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(, Регистратор = &Ссылка) КАК торо_ЗаявкиНаРемонтСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ЗаявкиНаРемонт.Период,
		|	торо_ЗаявкиНаРемонт.Регистратор,
		|	торо_ЗаявкиНаРемонт.НомерСтроки,
		|	торо_ЗаявкиНаРемонт.Активность,
		|	торо_ЗаявкиНаРемонт.IDРемонта,
		|	торо_ЗаявкиНаРемонт.ID_Корректировок,
		|	торо_ЗаявкиНаРемонт.ДатаНачалаРемонтныхРабот,
		|	торо_ЗаявкиНаРемонт.ДатаОкончанияРемонтныхРабот,
		|	торо_ЗаявкиНаРемонт.Отменен,
		|	ЛОЖЬ КАК ДоступенДляРедактирования
		|ПОМЕСТИТЬ РемонтыИзмененныеПозднее
		|ИЗ
		|	РегистрСведений.торо_ЗаявкиПоРемонтам КАК торо_ЗаявкиНаРемонт
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияСамогоДокумента КАК ДвиженияСамогоДокумента
		|		ПО торо_ЗаявкиНаРемонт.IDРемонта = ДвиженияСамогоДокумента.IDРемонта
		|			И торо_ЗаявкиНаРемонт.ID_Корректировок = ДвиженияСамогоДокумента.ID_Корректировок
		|ГДЕ
		|	торо_ЗаявкиНаРемонт.Регистратор <> &Ссылка
		|	И торо_ЗаявкиНаРемонт.IDРемонта В(&СписокID)
		|	И торо_ЗаявкиНаРемонт.Период >= &ДатаДок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ЗаявкиНаРемонт.Период,
		|	торо_ЗаявкиНаРемонт.Регистратор,
		|	торо_ЗаявкиНаРемонт.НомерСтроки,
		|	торо_ЗаявкиНаРемонт.Активность,
		|	торо_ЗаявкиНаРемонт.IDРемонта,
		|	торо_ЗаявкиНаРемонт.ID_Корректировок,
		|	торо_ЗаявкиНаРемонт.ДатаНачалаРемонтныхРабот,
		|	торо_ЗаявкиНаРемонт.ДатаОкончанияРемонтныхРабот,
		|	торо_ЗаявкиНаРемонт.Отменен,
		|	ИСТИНА КАК ДоступенДляРедактирования,
		|	РемонтыИзмененныеПозднее.ID_Корректировок КАК ID_КорректировокПозднегоДокумента
		|ИЗ
		|	РегистрСведений.торо_ЗаявкиПоРемонтам.СрезПоследних(
		|			&ДатаДок,
		|			IDРемонта В (&СписокID)
		|				И НЕ IDРемонта В (&СписокIDЗакрытДляРедактирования)
		|				И Регистратор <> &Ссылка И Регистратор ССЫЛКА Документ.торо_ОстановочныеРемонты) КАК торо_ЗаявкиНаРемонт
		|		ЛЕВОЕ СОЕДИНЕНИЕ РемонтыИзмененныеПозднее КАК РемонтыИзмененныеПозднее
		|		ПО торо_ЗаявкиНаРемонт.IDРемонта = РемонтыИзмененныеПозднее.IDРемонта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияСамогоДокумента.Период,
		|	ДвиженияСамогоДокумента.Регистратор,
		|	ДвиженияСамогоДокумента.НомерСтроки,
		|	ДвиженияСамогоДокумента.Активность,
		|	ДвиженияСамогоДокумента.IDРемонта,
		|	ДвиженияСамогоДокумента.ID_Корректировок,
		|	ДвиженияСамогоДокумента.ДатаНачалаРемонтныхРабот,
		|	ДвиженияСамогоДокумента.ДатаОкончанияРемонтныхРабот,
		|	ДвиженияСамогоДокумента.Отменен,
		|	ЛОЖЬ,
		|	""""
		|ИЗ
		|	ДвиженияСамогоДокумента КАК ДвиженияСамогоДокумента
		|ГДЕ
		|	ДвиженияСамогоДокумента.IDРемонта В(&СписокIDЗакрытДляРедактирования)";
		
		МассивID = ТаблицаРемонтовСОсновным.ВыгрузитьКолонку("ID");
		Запрос.УстановитьПараметр("ДатаДок" , Дата);
		Запрос.УстановитьПараметр("СписокID", МассивID);
		
		МассивIDДляБлокировки = Новый Массив;
		МассивОснований = ПолучитьМассивДокументовОснований();
		Для Каждого Основание Из МассивОснований Цикл
			МассивIDПоОснованию = Новый Массив;
			НайденныеСтроки = ТаблицаРемонтовСОсновным.НайтиСтроки(Новый Структура("ДокументИсточник", Основание));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивIDПоОснованию.Добавить(НайденнаяСтрока);
			КонецЦикла;
			МассивIDДляБлокировкиДляДобавления = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Основание, МассивIDПоОснованию);
			Если МассивIDДляБлокировкиДляДобавления <> Неопределено Тогда
				Для Каждого Элемент Из МассивIDДляБлокировкиДляДобавления Цикл
					МассивIDДляБлокировки.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокIDЗакрытДляРедактирования", МассивIDДляБлокировки);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Возврат Запрос.Выполнить().Выгрузить();
	ИначеЕсли ИмяРегистра = "торо_ОстановочныеРемонты" Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ОстановочныеРемонтыСрезПоследних.Период,
		|	торо_ОстановочныеРемонтыСрезПоследних.Регистратор,
		|	торо_ОстановочныеРемонтыСрезПоследних.НомерСтроки,
		|	торо_ОстановочныеРемонтыСрезПоследних.Активность,
		|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого,
		|	торо_ОстановочныеРемонтыСрезПоследних.ID_Корректировок,
		|	торо_ОстановочныеРемонтыСрезПоследних.Отвязан
		|	
		|ПОМЕСТИТЬ ДвиженияСамогоДокумента
		|ИЗ
		|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, Регистратор = &Ссылка) КАК торо_ОстановочныеРемонтыСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ОстановочныеРемонты.Период,
		|	торо_ОстановочныеРемонты.Регистратор,
		|	торо_ОстановочныеРемонты.НомерСтроки,
		|	торо_ОстановочныеРемонты.Активность,
		|	торо_ОстановочныеРемонты.IDЗависимого,
		|	торо_ОстановочныеРемонты.ID_Корректировок,
		|	торо_ОстановочныеРемонты.Отвязан,
		|	ЛОЖЬ КАК ДоступенДляРедактирования
		|ПОМЕСТИТЬ РемонтыИзмененныеПозднее
		|ИЗ
		|	РегистрСведений.торо_ОстановочныеРемонты КАК торо_ОстановочныеРемонты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДвиженияСамогоДокумента КАК ДвиженияСамогоДокумента
		|		ПО торо_ОстановочныеРемонты.IDЗависимого = ДвиженияСамогоДокумента.IDЗависимого
		|			И торо_ОстановочныеРемонты.ID_Корректировок = ДвиженияСамогоДокумента.ID_Корректировок
		|ГДЕ
		|	торо_ОстановочныеРемонты.Регистратор <> &Ссылка
		|	И торо_ОстановочныеРемонты.IDЗависимого В(&СписокID)
		|	И торо_ОстановочныеРемонты.Период >= &ДатаДок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ОстановочныеРемонты.Период,
		|	торо_ОстановочныеРемонты.Регистратор,
		|	торо_ОстановочныеРемонты.НомерСтроки,
		|	торо_ОстановочныеРемонты.Активность,
		|	торо_ОстановочныеРемонты.IDЗависимого,
		|	торо_ОстановочныеРемонты.ID_Корректировок,
		|	торо_ОстановочныеРемонты.Отвязан,
		|	ИСТИНА КАК ДоступенДляРедактирования,
		|	РемонтыИзмененныеПозднее.ID_Корректировок КАК ID_КорректировокПозднегоДокумента
		|ИЗ
		|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(
		|			&ДатаДок,
		|			IDЗависимого В (&СписокID)
		|				И НЕ IDЗависимого В (&СписокIDЗакрытДляРедактирования)
		|				И Регистратор <> &Ссылка) КАК торо_ОстановочныеРемонты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РемонтыИзмененныеПозднее КАК РемонтыИзмененныеПозднее
		|		ПО торо_ОстановочныеРемонты.IDЗависимого = РемонтыИзмененныеПозднее.IDЗависимого
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДвиженияСамогоДокумента.Период,
		|	ДвиженияСамогоДокумента.Регистратор,
		|	ДвиженияСамогоДокумента.НомерСтроки,
		|	ДвиженияСамогоДокумента.Активность,
		|	ДвиженияСамогоДокумента.IDЗависимого,
		|	ДвиженияСамогоДокумента.ID_Корректировок,
		|	ДвиженияСамогоДокумента.Отвязан,
		|	ЛОЖЬ,
		|	""""
		|ИЗ
		|	ДвиженияСамогоДокумента КАК ДвиженияСамогоДокумента
		|ГДЕ
		|	ДвиженияСамогоДокумента.IDЗависимого В(&СписокIDЗакрытДляРедактирования)";
		
		МассивID = ТаблицаРемонтовСОсновным.ВыгрузитьКолонку("ID");
		Запрос.УстановитьПараметр("ДатаДок" , Дата);
		Запрос.УстановитьПараметр("СписокID", МассивID);
		
		МассивIDДляБлокировки = Новый Массив;
		МассивОснований = ПолучитьМассивДокументовОснований();
		Для Каждого Основание Из МассивОснований Цикл
			МассивIDПоОснованию = Новый Массив;
			НайденныеСтроки = ТаблицаРемонтовСОсновным.НайтиСтроки(Новый Структура("ДокументИсточник", Основание));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				МассивIDПоОснованию.Добавить(НайденнаяСтрока);
			КонецЦикла;
			МассивIDДляБлокировкиДляДобавления = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Основание, МассивIDПоОснованию);
			Если МассивIDДляБлокировкиДляДобавления <> Неопределено Тогда
				Для Каждого Элемент Из МассивIDДляБлокировкиДляДобавления Цикл
					МассивIDДляБлокировки.Добавить(Элемент);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокIDЗакрытДляРедактирования", МассивIDДляБлокировки);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецФункции

// Отражаем какие документы ППР, Заявки и Остановочные ремонты корректируем
Процедура ДвиженияПоРегистру_торо_СоответствиеКорректировокДокументамППР()
	
	МассивКорректируемых = Новый Массив;
	Для Каждого Строка Из СвязанныеРемонты Цикл
		Если МассивКорректируемых.Найти(Строка.ДокументИсточник) = Неопределено Тогда
			МассивКорректируемых.Добавить(Строка.ДокументИсточник);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка Тогда 
		НаборИсходных = ПолучитьКорректируемыеДокументы();
		Для Каждого ЗаписьИсходный Из НаборИсходных Цикл
			Если МассивКорректируемых.Найти(ЗаписьИсходный.Корректируемый) = Неопределено Тогда
				МассивКорректируемых.Добавить(ЗаписьИсходный.Корректируемый);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если МассивКорректируемых.Найти(ДокументОснование) = Неопределено Тогда
			МассивКорректируемых.Добавить(ДокументОснование);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого Корректируемый Из МассивКорректируемых Цикл
		Движение = Движения.торо_СоответствиеКорректировокДокументамППР.Добавить();
		Движение.Корректировка = Ссылка;
		Движение.Корректируемый = Корректируемый;
	КонецЦикла;
	
	Движения.торо_СоответствиеКорректировокДокументамППР.Записывать = Истина;
	
КонецПроцедуры

Функция ПолучитьКорректируемыеДокументы(ППР = Истина, Заявки = Истина, Остановочные = Истина)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	торо_СоответствиеКорректировокДокументамППР.Корректируемый
	|ИЗ
	|	РегистрСведений.торо_СоответствиеКорректировокДокументамППР КАК торо_СоответствиеКорректировокДокументамППР
	|ГДЕ
	|	торо_СоответствиеКорректировокДокументамППР.Корректировка = &Корректировка
	|	%Условие%";
	
	ТекстУсловия = "";
	
	Если Не (ППР И Заявки И Остановочные) Тогда
		Если ППР И Заявки Тогда
			ТекстУсловия = "И ТИПЗНАЧЕНИЯ(торо_СоответствиеКорректировокДокументамППР.Корректируемый) <> ТИП(Документ.торо_ОстановочныеРемонты)";
		ИначеЕсли ППР И Остановочные Тогда
			ТекстУсловия = "И ТИПЗНАЧЕНИЯ(торо_СоответствиеКорректировокДокументамППР.Корректируемый) <> ТИП(Документ.торо_ЗаявкаНаРемонт)";
		ИначеЕсли Заявки И Остановочные Тогда
			ТекстУсловия = "И ТИПЗНАЧЕНИЯ(торо_СоответствиеКорректировокДокументамППР.Корректируемый) <> ТИП(Документ.торо_ПланГрафикРемонта)";
		ИначеЕсли ППР Тогда
			ТекстУсловия = "И ТИПЗНАЧЕНИЯ(торо_СоответствиеКорректировокДокументамППР.Корректируемый) = ТИП(Документ.торо_ПланГрафикРемонта)";
		ИначеЕсли Заявки Тогда
			ТекстУсловия = "И ТИПЗНАЧЕНИЯ(торо_СоответствиеКорректировокДокументамППР.Корректируемый) = ТИП(Документ.торо_ЗаявкаНаРемонт)";
		ИначеЕсли Остановочные Тогда
			ТекстУсловия = "И ТИПЗНАЧЕНИЯ(торо_СоответствиеКорректировокДокументамППР.Корректируемый) = ТИП(Документ.торо_ОстановочныеРемонты)";
		КонецЕсли;
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%Условие%", ТекстУсловия);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Корректировка",КорректируемыйДокумент);
	
	ТЗКорректируемых = Запрос.Выполнить().Выгрузить();
	Если Остановочные Тогда
		НС = ТЗКорректируемых.Добавить();
		НС.Корректируемый = КорректируемыйДокумент;
	КонецЕсли;
	
	Возврат ТЗКорректируемых;
	
КонецФункции

Функция ПолучитьМассивДокументовОснований()
	
	МассивОснований = Новый Массив;
	МассивОснований.Добавить(ДокументОснование);
	Для Каждого Строка Из СвязанныеРемонты Цикл
		Если МассивОснований.Найти(Строка.ДокументИсточник) = Неопределено Тогда
			МассивОснований.Добавить(Строка.ДокументИсточник);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивОснований;
	
КонецФункции

Функция ПолучитьТаблицуРемонтовСОсновным()
	
	ТаблицаРемонтовСОсновным = СвязанныеРемонты.Выгрузить();
	НС = ТаблицаРемонтовСОсновным.Добавить();
	НС.ID = IDОсновногоРемонта;
	НС.ОбъектРемонта = ОбъектРемонта;
	НС.ВидРемонта = ВидРемонта;
	НС.ДатаНачалаРемонта = ДатаНачалаРемонта;
	НС.ДатаОкончанияРемонта = ДатаОкончанияРемонта;
	НС.ДатаНачалаРемонтаСтарая = ДатаНачалаРемонтаСт;
	НС.ДатаОкончанияРемонтаСтарая = ДатаОкончанияРемонтаСт;
	НС.ДокументИсточник = ДокументОснование;
	
	Возврат ТаблицаРемонтовСОсновным;
	
КонецФункции

#КонецОбласти

#КонецЕсли