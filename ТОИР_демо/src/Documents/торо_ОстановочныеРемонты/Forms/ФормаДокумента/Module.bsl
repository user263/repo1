#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СсылкаНаДок = Параметры.Основание;
		Если СсылкаНаДок <> Неопределено Тогда
			ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(СсылкаНаДок);
			Неотмененный = торо_ЗаполнениеДокументов.ВернутьIDНеотмененногоРемонта(СсылкаНаДок, СсылкаНаДок[ИмяТЧ]);
			
			Если ИмяТЧ <> Неопределено И Неотмененный <> "" Тогда
				СоответствиеИДДокументам = Новый Соответствие;
				СоответствиеИДДокументам.Вставить(Неотмененный, СсылкаНаДок);    
				торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(СоответствиеИДДокументам, Объект);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.СвязанныеРемонты.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.СвязанныеРемонты.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		ИначеЕсли Параметры.ID = Объект.IDОсновногоРемонта Тогда
			ЭтаФорма.ТекущийЭлемент = Элементы.ДокументОснование;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	КонецЕсли;

	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ОстановочныеРемонты;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
	УстановитьУсловноеОформление();
	
	ОбновитьДоступностьДляРедактирования();
	
	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимостьДоступность();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийДокументаОстановочныйРемонт.ОстановочныйРемонт") И ЗначениеЗаполнено(Объект.ДокументОснование) И Объект.IDОсновногоРемонта = "" Тогда
		ПодключитьОбработчикОжидания("ОткрытьФормуДляПодбораОстановочногоРемонта", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	Для Каждого СвязанныйРемонт Из Объект.СвязанныеРемонты Цикл
		СвязанныйРемонт.Добавлен = Ложь;
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "ЗагрузкаИзПроджект" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Все данные по выбранному ремонту будут очищены. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДокументОснованиеОчисткаЗавершение", ЭтотОбъект, Новый Структура("ВыбиратьНовый, СтароеОснование", Истина, Объект.ДокументОснование)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФормуДляПодбораОстановочногоРемонта();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Параметры = Новый Структура("ПолнотекстовыйПоиск, Отбор", ПолнотекстовыйПоискПриВводеПоСтроке.НеИспользовать, Новый Структура("Истина", Истина));
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Объект.ДокументОснование = ВыбранноеЗначение.ДокументОснование;
	Объект.IDОсновногоРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
	Объект.ОбъектРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
	Объект.ВидРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ВидРемонтныхРабот;
	Объект.ДатаНачалаРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала;
	Объект.ДатаОкончанияРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаОкончания;
	Объект.ДатаНачалаРемонтаСт = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала;
	Объект.ДатаОкончанияРемонтаСт = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаОкончания;
	ОбновитьДоступностьДляРедактирования();
	УстановитьВидимостьДоступность();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьДокументСРемонтом(Объект.ДокументОснование, Объект.IDОсновногоРемонта);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ТекстВопроса = НСтр("ru = 'Все данные по выбранному ремонту будут очищены. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДокументОснованиеОчисткаЗавершение", ЭтотОбъект, Новый Структура("ВыбиратьНовый", Ложь)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеОчисткаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ВыбиратьНовый = ДополнительныеПараметры.ВыбиратьНовый;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Не ВыбиратьНовый Тогда
			Объект.ДокументОснование = Неопределено;
		КонецЕсли;
		Объект.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		Объект.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
		Объект.ДатаНачалаРемонта = Дата(1,1,1);
		Объект.ДатаОкончанияРемонта = Дата(1,1,1);
		Объект.IDОсновногоРемонта = "";
		Объект.СвязанныеРемонты.Очистить();
		
		Если ВыбиратьНовый Тогда
			ОткрытьФормуДляПодбораОстановочногоРемонта();
		КонецЕсли;
		
		Модифицированность = Истина;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаРемонтаПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаРемонта > Объект.ДатаОкончанияРемонта Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Дата начала ремонта больше даты окончания!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияРемонтаПриИзменении(Элемент)
	
	Если Объект.ДатаНачалаРемонта > Объект.ДатаОкончанияРемонта Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Дата начала ремонта больше даты окончания!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСвязанныеРемонты

&НаКлиенте
Процедура СвязанныеРемонтыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого ЭлементМассива из ВыбранноеЗначение Цикл
			СвязанныеРемонтыДобавитьСтроку(ЭлементМассива);
		КонецЦикла;
	Иначе
		СвязанныеРемонтыДобавитьСтроку(ВыбранноеЗначение);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыДобавитьСтроку(ВыбранноеЗначение)
	
	Если Объект.СвязанныеРемонты.НайтиСтроки(Новый Структура("ID",ВыбранноеЗначение.СтрокаРемонтовОборудования.ID)).Количество() = 0 
		И ВыбранноеЗначение.СтрокаРемонтовОборудования.ID <> Объект.IDОсновногоРемонта Тогда
		
		ДатаНачалаВыбранного = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаНачала;
		ДатаОкончанияВыбранного = ВыбранноеЗначение.СтрокаРемонтовОборудования.ДатаОкончания;
		
		НС = Объект.СвязанныеРемонты.Добавить();
		НС.ID = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
		НС.ОбъектРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
		НС.ВидРемонта = ВыбранноеЗначение.СтрокаРемонтовОборудования.ВидРемонтныхРабот;
		НС.ДатаНачалаРемонта = ДатаНачалаВыбранного;
		НС.ДатаОкончанияРемонта = ДатаОкончанияВыбранного;
		НС.ДатаНачалаРемонтаСтарая = ДатаНачалаВыбранного;
		НС.ДатаОкончанияРемонтаСтарая = ДатаОкончанияВыбранного;
		НС.ДокументИсточник = ВыбранноеЗначение.ДокументОснование;
		НС.Добавлен = Истина;
		
		Если Объект.ДатаНачалаРемонта > ДатаНачалаВыбранного Или Объект.ДатаОкончанияРемонта < ДатаОкончанияВыбранного Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выбранный ремонт выходит за границы интервала основного ремонта!'");
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЕсли;
		ОбновитьДоступностьДляРедактирования();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыПередНачаломИзменения(Элемент, Отказ)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", ДанныеСтроки.ID));
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДляРедактирования = Массивстрок[0];
		Если Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ((НоваяСтрока И ОтменаРедактирования) Или ТекДанные = Неопределено) Тогда
		Если ТекДанные.ДатаНачалаРемонта > ТекДанные.ДатаОкончанияРемонта Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дата начала ремонта больше даты окончания!'");
			Сообщение.Сообщить();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.ДатаНачалаРемонта) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дата начала ремонта не заполнена!'");
			Сообщение.Сообщить();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.ДатаОкончанияРемонта) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дата окончания ремонта не заполнена!'");
			Сообщение.Сообщить();
		КонецЕсли;
		НачалоВыходитЗаГраницы = ТекДанные.ДатаНачалаРемонта < Объект.ДатаНачалаРемонта;
		ОкончаниеВыходитЗаГраницы = ТекДанные.ДатаОкончанияРемонта > Объект.ДатаОкончанияРемонта;
		Если НачалоВыходитЗаГраницы Или ОкончаниеВыходитЗаГраницы Тогда
			ТекстВопроса = НСтр("ru = 'Границы периода редактируемого ремонта выходят за границы периода остановочного ремонта! Сдвинуть границы периода:'");
			ВариантыДействий = Новый СписокЗначений;
			ВариантыДействий.Добавить("СдвинутьВШапке", НСтр("ru = 'Остановочного ремонта'"));
			ВариантыДействий.Добавить("СдвинутьУТекущего", НСтр("ru = 'Редактируемого'"));
			ВариантыДействий.Добавить("Отмена", НСтр("ru = 'Ничего не предпринимать'"));
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОСдвигеДат", ЭтотОбъект, Новый Структура("ТекДанные, Начало, Окончание", ТекДанные, НачалоВыходитЗаГраницы, ОкончаниеВыходитЗаГраницы)), ТекстВопроса, ВариантыДействий);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя <> "СвязанныеРемонтыОтвязать" И Поле.Имя <> "СвязанныеРемонтыДатаНачалаРемонта" И Поле.Имя <> "СвязанныеРемонтыДатаОкончанияРемонта" Тогда
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
		ОткрытьДокументСРемонтом(ДанныеСтроки.ДокументИсточник, ДанныеСтроки.ID);
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Подбор(Команда)
	ОткрытьФормуДляПодбораЗависимыхРемонтов();
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьСтатус(Команда)
	
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументРемонта(Команда)
	
	Для Каждого ВыдСтрока Из Элементы.СвязанныеРемонты.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Элементы.СвязанныеРемонты.ДанныеСтроки(ВыдСтрока);
		ОткрытьДокументСРемонтом(ДанныеСтроки.ДокументИсточник, ДанныеСтроки.ID);
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ВопросОСдвигеДат(Ответ, ДополнительныеПараметры) Экспорт 
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	НачалоВыходитЗаГраницы = ДополнительныеПараметры.Начало;
	ОкончаниеВыходитЗаГраницы = ДополнительныеПараметры.Окончание;
	
	Если Ответ = "СдвинутьВШапке" Тогда
		Если НачалоВыходитЗаГраницы Тогда
			Объект.ДатаНачалаРемонта = ТекДанные.ДатаНачалаРемонта;
		КонецЕсли;
		Если ОкончаниеВыходитЗаГраницы Тогда
			Объект.ДатаОкончанияРемонта = ТекДанные.ДатаОкончанияРемонта;
		КонецЕсли;
	ИначеЕсли Ответ = "СдвинутьУТекущего" Тогда
		Если НачалоВыходитЗаГраницы Тогда
			ТекДанные.ДатаНачалаРемонта = Объект.ДатаНачалаРемонта;
			Если ТекДанные.ДатаОкончанияРемонта < ТекДанные.ДатаНачалаРемонта Тогда
				ТекДанные.ДатаОкончанияРемонта = ТекДанные.ДатаНачалаРемонта;
			КонецЕсли;
		КонецЕсли;
		Если ОкончаниеВыходитЗаГраницы Тогда
			ТекДанные.ДатаОкончанияРемонта = Объект.ДатаОкончанияРемонта;
			Если ТекДанные.ДатаОкончанияРемонта < ТекДанные.ДатаНачалаРемонта Тогда
				ТекДанные.ДатаНачалаРемонта = ТекДанные.ДатаОкончанияРемонта;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументСРемонтом(Документ, ID)
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ОткрытьФорму("Документ.торо_ПланГрафикРемонта.ФормаОбъекта", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаОбъекта", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДляПодбораОстановочногоРемонта()
	
	ДокументыОснования = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДокументыОснования.Добавить(Объект.ДокументОснование);
	КонецЕсли;
	Для Каждого Ремонт Из Объект.СвязанныеРемонты Цикл
		Если ДокументыОснования.НайтиПоЗначению(Ремонт.ДокументИсточник) = Неопределено Тогда
			ДокументыОснования.Добавить(Ремонт.ДокументИсточник);
		КонецЕсли;
	КонецЦикла;
		
	Форма = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот",
				Новый Структура("Владелец, ДокументыОснования, IDОстановочного, ЗакрыватьПриВыборе, ОР, ВР", 
								Объект.Ссылка, ДокументыОснования, Объект.IDОсновногоРемонта, Истина, Объект.ОбъектРемонта, Объект.ВидРемонта),
				ЭтаФорма, ЭтаФорма, ВариантОткрытияОкна.ОтдельноеОкно);
	Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	Форма.Заголовок = НСтр("ru = 'Подбор остановочного ремонта'");
	Форма.Открыть();			
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДляПодбораЗависимыхРемонтов()
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ДокументыОснования = Новый СписокЗначений;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			ДокументыОснования.Добавить(Объект.ДокументОснование);
		КонецЕсли;
		Для Каждого Ремонт Из Объект.СвязанныеРемонты Цикл
			Если ДокументыОснования.НайтиПоЗначению(Ремонт.ДокументИсточник) = Неопределено Тогда
				ДокументыОснования.Добавить(Ремонт.ДокументИсточник);
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот",
		Новый Структура("Владелец, ДокументыОснования, IDОстановочного, ЗакрыватьПриВыборе, ОР, ВР", 
		Объект.Ссылка, ДокументыОснования, Объект.IDОсновногоРемонта, Ложь, Объект.ОбъектРемонта, Объект.ВидРемонта),
		ЭтаФорма, ЭтаФорма, ВариантОткрытияОкна.ОтдельноеОкно);
		Форма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		Форма.Заголовок = НСтр("ru = 'Подбор зависимых ремонтов'");
		Форма.Открыть();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран остановочный ремонт!'");
		Сообщение.Поле = "ДокументОснование";
		Сообщение.ПутьКДанным = "Объект";
		Сообщение.КлючДанных = Объект.Ссылка;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность() экспорт
	
	ВидОперацииКорректировка = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка");
	
	Элементы.КорректируемыйДокумент.Видимость = ВидОперацииКорректировка;
	Элементы.СвязанныеРемонтыОтвязать.Видимость = ВидОперацииКорректировка;
	Элементы.Шапка.ТолькоПросмотр = ВидОперацииКорректировка;
	ТолькоПросмотрДатОсновного = Ложь;
	МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", Объект.IDОсновногоРемонта));
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДляРедактирования = Массивстрок[0];
		Если Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
			 ТолькоПросмотрДатОсновного = Истина;
		КонецЕсли;
		 
	КонецЕсли;
	 
	Элементы.ДатаНачалаИДатаОкончанияРемонта.ТолькоПросмотр = ТолькоПросмотрДатОсновного;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивДоступныхДляКорректировкиСтрок.Загрузить(Документы.торо_ОстановочныеРемонты.ОбновитьДоступностьДляРедактирования(Объект.Ссылка, ПолучитьТаблицуРемонтовСОсновным()));
	
	МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", Объект.IDОсновногоРемонта));
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДляРедактирования = Массивстрок[0];
		Если Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
			ТолькоПросмотрДатОсновного = Истина;
		Иначе
			 ТолькоПросмотрДатОсновного = Ложь;
		КонецЕсли;
		 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуРемонтовСОсновным()
	
	ТаблицаРемонтовСОсновным = Объект.СвязанныеРемонты.Выгрузить();
	НС = ТаблицаРемонтовСОсновным.Добавить();
	НС.ID = Объект.IDОсновногоРемонта;
	НС.ОбъектРемонта = Объект.ОбъектРемонта;
	НС.ВидРемонта = Объект.ВидРемонта;
	НС.ДатаНачалаРемонта = Объект.ДатаНачалаРемонта;
	НС.ДатаОкончанияРемонта = Объект.ДатаОкончанияРемонта;
	НС.ДатаНачалаРемонтаСтарая = Объект.ДатаНачалаРемонтаСт;
	НС.ДатаОкончанияРемонтаСтарая = Объект.ДатаОкончанияРемонтаСт;
	НС.ДокументИсточник = Объект.ДокументОснование;
	
	Возврат ТаблицаРемонтовСОсновным;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(ДокОбъект)
	Элементы = ДокОбъект.Элементы;
	Объект = ДокОбъект.Объект;
	Элементы.ДеревоСогласованияУтвердитьСтатус.Доступность = ЗначениеЗаполнено(Объект.СпособСогласования);
КонецПроцедуры

#Область Согласование

&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
	
	УправлениеВидимостью(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если СогласующиеРегистр.Количество() > 0 Тогда
					
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("Элемент",Элемент)),
						НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"), РежимДиалогаВопрос.ДаНет);
								
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Согласование++
   Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияСтатусДокумента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
   	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияСогласующий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	//
   	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияЗамещающий.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	// Согласование--
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеРемонтыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ЭтоКорректировка = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийДокументаОстановочныйРемонт.Корректировка");
	
	Для Каждого ВыдСтрока Из Элемент.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элемент.ДанныеСтроки(ВыдСтрока);
		НайденныеСтроки = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", ДанныеСтроки.ID));
		Если НайденныеСтроки.Количество() > 0 И НайденныеСтроки[0].ДоступенДляРедактирования И ((Не ЭтоКорректировка И Не Объект.Проведен) Или ДанныеСтроки.Добавлен) Тогда
			Объект.СвязанныеРемонты.Удалить(ДанныеСтроки);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

фПослеОчистки = Ложь;

#КонецОбласти
