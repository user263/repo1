#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот И Не БезусловнаяЗапись = Истина И ЭтоНовый() Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	Маршруты.СписокОбъектовРемонта,
		|	Маршруты.ВидМероприятия
		|ПОМЕСТИТЬ Маршруты
		|ИЗ
		|	&Маршруты КАК Маршруты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Маршруты.СписокОбъектовРемонта КАК ОбъектРемонтныхРабот,
		|	Маршруты.ВидМероприятия КАК ВидРемонтныхРабот,
		|	&ДатаПланирования КАК ДатаПланирования,
		|	&ПериодичностьДетализации КАК ПериодичностьДетализации,
		|	&ДатаОкончанияПланирования КАК ДатаОкончанияПланирования,
		|	&Регистратор КАК Регистратор
		|ИЗ
		|	Маршруты КАК Маршруты");
		
		Запрос.УстановитьПараметр("Маршруты", Маршруты.Выгрузить());
		Запрос.УстановитьПараметр("ДатаПланирования", ДатаПланирования);								  
		Запрос.УстановитьПараметр("ПериодичностьДетализации", ПериодичностьДетализации);
		Запрос.УстановитьПараметр("ДатаОкончанияПланирования", РассчитатьДатуОкончанияПланирования());
		Запрос.УстановитьПараметр("Регистратор", ЭтотОбъект.Ссылка);
		ТаблицаОбъектовРемонта = Запрос.Выполнить().Выгрузить();

		ПроверитьПериодыПланированияРемонтныхРабот(ТаблицаОбъектовРемонта, Отказ, "");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Перем Заголовок;
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("ПланРемонтов", "План ремонтов");
	торо_ОбщегоНазначения.ПроверитьЗаполненностьТабличныхЧастей(ЭтотОбъект, СписокТЧ, Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;	
	
	// Согласование++
	
	// Проверим использование статусов документов.
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_ГрафикРегламентныхМероприятийТОиР;
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента, Истина);
	
	Если мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	// Согласование--

	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ = ПланРемонтов.Выгрузить();
	ТЗ.Свернуть("СписокОбъектовРемонта");

	Если ТЗ.Количество() = 0 Тогда
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'План график не содержит данных.'"), СтатусСообщения.Важное);
		Отказ = Истина;	
		
	КонецЕсли;	
		
	Заголовок = Строка(Ссылка);
	
	ДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования();
	
	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиПланРемонтов(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		ТЗ = Новый ТаблицаЗначений;
		ТЗ = ПланРемонтов.Выгрузить();
		ТЗ.Свернуть("СписокОбъектовРемонта");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ТабДоступность.ID,
		|	ТабДоступность.ДоступенДляРедактирования
		|ПОМЕСТИТЬ ТабДоступность
		|ИЗ
		|	&ТабДоступность КАК ТабДоступность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПланГрафикРемонтаПланРемонтов.НомерСтроки,
		|	торо_ПланГрафикРемонтаПланРемонтов.ID,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.Документ,
		|	торо_ПланГрафикРемонтаПланРемонтов.Исполнитель,
		|	торо_ПланГрафикРемонтаПланРемонтов.СписокОбъектовРемонта,
		|	торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения,
		|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		|	торо_ПланГрафикРемонтаПланРемонтов.Склад,
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		|	торо_ПланГрафикРемонтаПланРемонтов.ID_базы_расчета,
		|	торо_ПланГрафикРемонтаПланРемонтов.ID_замещающего,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта
		|ПОМЕСТИТЬ ПланРемонтов
		|ИЗ
		|	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ПланГрафикРемонтаПланРемонтов.ID,
		|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
		|	торо_ПланГрафикРемонтаПланРемонтов.Документ,
		|	торо_ПланГрафикРемонтаПланРемонтов.Исполнитель,
		|	торо_ПланГрафикРемонтаПланРемонтов.СписокОбъектовРемонта,
		|	торо_ПланГрафикРемонтаПланРемонтов.СпособВыполнения,
		|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
		|	торо_ПланГрафикРемонтаПланРемонтов.Склад,
		|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
		|	торо_ПланГрафикРемонтаПланРемонтов.ID_базы_расчета,
		|	торо_ПланГрафикРемонтаПланРемонтов.ID_замещающего,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
		|	торо_ПланГрафикРемонтаПланРемонтов.СуммаРемонта
		|ИЗ
		|	ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабДоступность КАК ТабДоступность
		|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТабДоступность.ID
		|ГДЕ
		|	ТабДоступность.ДоступенДляРедактирования";
		
		Запрос.УстановитьПараметр("ПланРемонтов",ПланРемонтов.Выгрузить());
		Запрос.УстановитьПараметр("ТабДоступность", Документы.торо_ГрафикРегламентныхМероприятийТОиР.ОбновитьДоступностьДляРедактирования(Ссылка,ВидОперации,ПланРемонтов.Выгрузить()));
		ПланРемонтовДвижения = Запрос.Выполнить().Выгрузить();
		
		ДвиженияПоРегистру_торо_ПериодыПланированияППР(РежимПроведения, ДатаОкончанияПланирования, Отказ, Заголовок, ПланРемонтовДвижения);
		
		ДвиженияПоРегистру_торо_ПлановыеМероприятия(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения);
		
		// Движение по регистру "торо_ПлановыеРемонтныеРаботы".
		ДвиженияПоРегистру_торо_ЗапланированныеМероприятияОбъектов(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения);
		
		ДвиженияПоРегистру_торо_СоответствиеКорректировокДокументамППР(РежимПроведения, Отказ, Заголовок);
		// Движения по регистру сведений торо_Ремонты
		Движения.торо_Ремонты.Записывать = Истина;
		Для Каждого СтрРемонта Из ПланРемонтов Цикл
			
			Движение = Движения.торо_Ремонты.Добавить();
			Движение.Период 			= МоментВремени().Дата;
			Движение.ID 				= СтрРемонта.ID;
			Движение.ОбъектРемонта 		= СтрРемонта.СписокОбъектовРемонта;
			Движение.ВидРемонта			= СтрРемонта.ВидРемонтныхРабот;
			Движение.ДатаНачалаПлан		= СтрРемонта.ДатаНач;
			Движение.ДатаОкончанияПлан	= СтрРемонта.ДатаКон;
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(Основание)
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		
		ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		ДокументОснование = Основание.Ссылка;
		
		Если Основание.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
			ДатаПланирования = Основание.ДатаПланирования;
			КоличествоПериодов = 1;
			ПериодичностьДетализации = Перечисления.Периодичность.Месяц;
		Иначе
			ДатаПланирования = Основание.ДатаПланирования;
			КоличествоПериодов = Основание.КоличествоПериодов;
			ПериодичностьДетализации = Основание.ПериодичностьДетализации;
		КонецЕсли;
		
		ТЗ_ПланРемонтов = Основание.ПланРемонтов.Выгрузить();
		ТЗ_ПланРемонтов.ЗаполнитьЗначения(Основание, "Документ");
		
		ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаКон"), "ДатаКонСт");
		ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаНач"), "ДатаНачСт");
		
		ПланРемонтов.Загрузить(ТЗ_ПланРемонтов);
		
		Маршруты.Загрузить(Основание.Маршруты.Выгрузить());
		ОбъектыМаршрутов.Загрузить(Основание.ОбъектыМаршрутов.Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПриКопировании(ОбъектКопирования)
	торо_РаботаСоСтатусамиДокументовСервер.ОчиститьСогласованиеПриКопировании(ЭтотОбъект);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_ГрафикРегламентныхМероприятийТОиР;
		торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства, Истина, Отказ);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ДвиженияПоРегистру_торо_СоответствиеКорректировокДокументамППР(РежимПроведения, Отказ, Заголовок)
	Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		Если ЗначениеЗаполнено(ДокументОснование) Тогда
			
			Движения.торо_СоответствиеКорректировокДокументамППР.Очистить();
			Движения.торо_СоответствиеКорректировокДокументамППР.Записывать = Истина;
			
			Если ДокументОснование.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
				ИсходныйППР = Неопределено;
				НаборИсходных = РегистрыСведений.торо_СоответствиеКорректировокДокументамППР.СоздатьНаборЗаписей();
				НаборИсходных.Отбор.Регистратор.Установить(Ссылка);
				НаборИсходных.Прочитать(); 
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	торо_СоответствиеКорректировокДокументамППР.Корректируемый
				|ИЗ
				|	РегистрСведений.торо_СоответствиеКорректировокДокументамППР КАК торо_СоответствиеКорректировокДокументамППР
				|ГДЕ
				|	торо_СоответствиеКорректировокДокументамППР.Корректировка = &Корректировка";
				Запрос.УстановитьПараметр("Корректировка",ДокументОснование);
				
				НаборИсходных = Запрос.Выполнить().Выгрузить();
				СтрНабора = НаборИсходных.Добавить();
				СтрНабора.Корректируемый = ДокументОснование;
			Иначе
				ИсходныйППР = ДокументОснование;					
			КонецЕсли;
			
			Если ИсходныйППР <> Неопределено Тогда
				Движение = Движения.торо_СоответствиеКорректировокДокументамППР.Добавить();
				Движение.Корректировка = Ссылка;
				Движение.Корректируемый = ИсходныйППР;
			Иначе
				Для Каждого ЗаписьИсходный Из НаборИсходных Цикл
					Движение = Движения.торо_СоответствиеКорректировокДокументамППР.Добавить();
					Движение.Корректировка = Ссылка;
					Движение.Корректируемый = ЗаписьИсходный.Корректируемый;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РассчитатьДатуОкончанияПланирования()Экспорт
	
	Если ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(ПериодичностьДетализации) + ", " + ?(КоличествоПериодов=0, 1, КоличествоПериодов) + ") КАК ДатаОкончания";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаПланирования);
		
		Попытка
			Выборка = Запрос.Выполнить().Выбрать();
		Исключение
			Возврат Дата(3999,12,31,23,59,59);
		КонецПопытки;
		
		Если Выборка.Следующий() Тогда
			
			Возврат ?(ПериодичностьДетализации = Перечисления.Периодичность.День, Выборка.ДатаОкончания, НачалоДня(Выборка.ДатаОкончания)-1);
			
		КонецЕсли;
		
	Иначе 	
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран период планирования!'"), СтатусСообщения.Важное);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеРемонтныеРаботы.Период,
	|	ПлановыеРемонтныеРаботы.Регистратор,
	|	ПлановыеРемонтныеРаботы.НомерСтроки,
	|	ПлановыеРемонтныеРаботы.Активность,
	|	ПлановыеРемонтныеРаботы.Организация,
	|	ПлановыеРемонтныеРаботы.ID,
	|	ПлановыеРемонтныеРаботы.ВидМероприятия,
	|	ПлановыеРемонтныеРаботы.СписокОбъектов,
	|	ПлановыеРемонтныеРаботы.Подразделение,
	|	ПлановыеРемонтныеРаботы.ID_Корректировок,
	|	ПлановыеРемонтныеРаботы.ДатаНачала,
	|	ПлановыеРемонтныеРаботы.ДатаОкончания,
	|	ПлановыеРемонтныеРаботы.Исполнитель,
	|	ПлановыеРемонтныеРаботы.Отменен,
	|	ИСТИНА КАК ДоступенДляРедактирования
	|ИЗ
	|	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних(
	|			&ДатаДок,
	|			ID В (&СписокID)
	|				И НЕ ID В (&СписокIDЗакрытДляРедактирования)
	|				И Регистратор <> &Ссылка) КАК ПлановыеРемонтныеРаботы
	|ГДЕ
	|	НЕ ПлановыеРемонтныеРаботы.Отменен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Период,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Регистратор,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.НомерСтроки,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Активность,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Организация,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ВидМероприятия,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.СписокОбъектов,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Подразделение,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ID_Корректировок,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаНачала,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.ДатаОкончания,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Исполнитель,
	|	торо_ПлановыеРемонтныеРаботыСрезПоследних.Отменен,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних(
	|			,
	|			Регистратор = &Ссылка
	|				И ID В (&СписокIDЗакрытДляРедактирования)) КАК торо_ПлановыеРемонтныеРаботыСрезПоследних";
	
	МассивID = ПланРемонтов.ВыгрузитьКолонку("ID");
	Запрос.УстановитьПараметр("ДатаДок", Дата);
	Запрос.УстановитьПараметр("СписокID", МассивID);
	МассивIDДляБлокировки = торо_Ремонты.ПроверитьДокументНаСвязанныеДокументыРеглМероприятийПоID(Ссылка, МассивID);	
	Запрос.УстановитьПараметр("СписокIDЗакрытДляРедактирования", МассивIDДляБлокировки);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ДвиженияПоРегистру_торо_ПлановыеМероприятия(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения)
	
	ТаблицаСоответствияID = ПолучитьТаблицуСоответствияIDРемонтовIDКорректировок();
	НаборЗаписей = РегистрыСведений.торо_ПлановыеМероприятия.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	СтарыеДвижения = НаборЗаписей.Выгрузить();
	Движения.торо_ПлановыеМероприятия.Очистить();	
	Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
		
		Если ТаблицаСоответствияID.Количество() > 0 Или (ПланРемонтов.Выгрузить(Новый Структура("ДатаНачСт,ДатаКонСт",Дата(1,1,1,0,0,0),Дата(1,1,1,0,0,0))).Количество() = ПланРемонтов.Количество()) Тогда
			
			Для Каждого ИсходнаяСтрока Из ПланРемонтовДвижения Цикл
				Если ЗначениеЗаполнено(ИсходнаяСтрока.ДатаНачСт) и ЗначениеЗаполнено(ИсходнаяСтрока.ДатаКонСт) Тогда
					ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
					Если ТаблицаРегистр.Количество() > 0 И ТаблицаРегистр[0].ДоступенДляРедактирования Тогда
						СтрокаРегистр = ТаблицаРегистр[0];
						
						Движение = Движения.торо_ПлановыеМероприятия.Добавить();
						ЗаполнитьЗначенияСвойств(Движение,СтрокаРегистр);
						
						Движение.Отменен = Истина;
						Движение.Период = Движение.Период + 1;
					Иначе
						ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID, Отменен", ИсходнаяСтрока.ID, Истина));
						Если ТаблицаРегистр.Количество() > 0 Тогда 
							СтрокаРегистр = ТаблицаРегистр[0];
							
							Движение = Движения.торо_ПлановыеМероприятия.Добавить();
							ЗаполнитьЗначенияСвойств(Движение, СтрокаРегистр);
						КонецЕсли;	
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
		Иначе
			#Если Клиент Тогда
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Невозможно провести документ корректировки Графика регламентных мероприятий, так как исходный график был изменен. Перевыберите исходный план-график в документе корректировки.'"));
			#КонецЕсли
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли; 
	
	Если Не Отказ Тогда
		
		Для Каждого ИсходнаяСтрока Из СтарыеДвижения Цикл
			СтрДостДляРед = ПланРемонтовДвижения.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
			СтрЕстьВДок = ПланРемонтов.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.ID));
			Если СтрДостДляРед.Количество() = 0 И СтрЕстьВДок.Количество() > 0 Тогда
				
				Движение = Движения.торо_ПлановыеМероприятия.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,ИсходнаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
		НаборДвижений = Движения.торо_ПлановыеМероприятия;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПланРемонтныхРабот.ID,
		|	ПланРемонтныхРабот.ВидРемонтныхРабот,
		|	ПланРемонтныхРабот.СписокОбъектовРемонта,
		|	ПланРемонтныхРабот.ДатаНач КАК ДатаНачала,
		|	ПланРемонтныхРабот.ДатаКон КАК ДатаОкончания,
		|	ПланРемонтныхРабот.Исполнитель,
		|	ПланРемонтныхРабот.Отменен,
		|	ПланРемонтныхРабот.СпособВыполнения,
		|	ПланРемонтныхРабот.Замещен,
		|	ПланРемонтныхРабот.ID_базы_расчета,
		|	ПланРемонтныхРабот.ID_замещающего,
		|	ПланРемонтныхРабот.СуммаРемонта КАК СтоимостьРемонта
		|ПОМЕСТИТЬ ДанныеДляПроведения
		|ИЗ
		|	&ПланРемонтныхРабот КАК ПланРемонтныхРабот
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	&Организация,
		|	&Подразделение,
		//|	&ПериодичностьДетализации,
		|	ДанныеДляПроведения.ID,
		|	ИСТИНА КАК Активность,
		|	ДанныеДляПроведения.ВидРемонтныхРабот КАК ВидМероприятия,
		|	ДанныеДляПроведения.СписокОбъектовРемонта КАК СписокОбъектов,
		|	ДанныеДляПроведения.ДатаНачала,
		|	ДанныеДляПроведения.ДатаОкончания,
		|	ДанныеДляПроведения.Исполнитель,
		|	ДанныеДляПроведения.Отменен,
		|	ДанныеДляПроведения.СпособВыполнения,
		|	ДанныеДляПроведения.Замещен,
		|	ДанныеДляПроведения.ID_базы_расчета,
		|	ДанныеДляПроведения.ID_замещающего,
		|	ДанныеДляПроведения.СтоимостьРемонта
		|ИЗ
		|	ДанныеДляПроведения КАК ДанныеДляПроведения";
		
		Запрос.УстановитьПараметр("ПланРемонтныхРабот", ПланРемонтовДвижения);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		Запрос.УстановитьПараметр("Подразделение", Подразделение);		
		
		Запрос.УстановитьПараметр("Период", Дата);
		
		ПланРемонтныхРабот = Запрос.Выполнить().Выгрузить();
		
		// Заполним таблицу движений.
		торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ПланРемонтныхРабот, ТаблицаДвижений);
		
		// Недостающие поля.
		
		Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
			
			ТаблицаРегистр = ТаблицаСоответствияID.НайтиСтроки(Новый Структура("ID", СтрокаТаблицыДвижений.ID));
			Если ТаблицаРегистр.Количество() > 0 И Не ТаблицаРегистр[0].ДоступенДляРедактирования Тогда
				СтрокаРегистр = ТаблицаРегистр[0];
				ID_Корректировок = СтрокаРегистр.ID_Корректировок;
			Иначе
				ID_Корректировок = Новый УникальныйИдентификатор;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДвижений.ID_Корректировок) Тогда 
				СтрокаТаблицыДвижений.ID_Корректировок = ID_Корректировок;
			КонецЕсли;	
			
		КонецЦикла;	
		
		Движения.торо_ПлановыеМероприятия.Записывать = Истина;

		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.торо_ПлановыеМероприятия.ВыполнитьДвижения();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗапланированныеМероприятияОбъектов(РежимПроведения, Отказ, Заголовок, ПланРемонтовДвижения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПланРемонтныхРабот.ID,
	|	ПланРемонтныхРабот.СписокОбъектовРемонта
	|ПОМЕСТИТЬ ДанныеИзПланаРемонтов
	|ИЗ
	|	&ПланРемонтныхРабот КАК ПланРемонтныхРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланРемонтныхРабот.СписокОбъектовРемонта,
	|	ПланРемонтныхРабот.ОбъектРемонта
	|ПОМЕСТИТЬ ДанныеИзОбъектовМаршрутов
	|ИЗ
	|	&ТабОбъектыМаршрутов КАК ПланРемонтныхРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеИзПланаРемонтов.ID,
	|	ИСТИНА КАК Активность,
	|	ДанныеИзОбъектовМаршрутов.ОбъектРемонта,
	|	&Период КАК Период
	|ИЗ
	|	ДанныеИзПланаРемонтов КАК ДанныеИзПланаРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеИзОбъектовМаршрутов КАК ДанныеИзОбъектовМаршрутов
	|		ПО ДанныеИзПланаРемонтов.СписокОбъектовРемонта = ДанныеИзОбъектовМаршрутов.СписокОбъектовРемонта";
	
	Запрос.УстановитьПараметр("ПланРемонтныхРабот", ПланРемонтовДвижения);
	Запрос.УстановитьПараметр("ТабОбъектыМаршрутов", ОбъектыМаршрутов);
	Запрос.УстановитьПараметр("Период", Дата);
	
	ПланРемонтныхРабот = Запрос.Выполнить().Выгрузить();
		
	Движения.торо_ЗапланированныеМероприятияОбъектов.Записывать = Истина;
	Для Каждого СтрРемонта Из ПланРемонтныхРабот Цикл
		
		Движение = Движения.торо_ЗапланированныеМероприятияОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрРемонта);
		
	КонецЦикла;
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПериодыПланированияППР(РежимПроведения, ДатаОкончанияПланирования, Отказ, Заголовок, ПланРемонтовДвижения)
	
	Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот Тогда
		
		НаборДвижений = Движения.торо_ПериодыПланированияППР;
		Движения.торо_ПериодыПланированияППР.Записывать = Истина;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабПланРемонтов.СписокОбъектовРемонта,
		|	ТабПланРемонтов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТабПланРемонтов
		|ИЗ
		|	&ТабПланРемонтов КАК ТабПланРемонтов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТабПланРемонтов.СписокОбъектовРемонта КАК ОбъектРемонтныхРабот,
		|	ТабПланРемонтов.ВидРемонтныхРабот
		|ИЗ
		|	ТабПланРемонтов КАК ТабПланРемонтов";
		
		Запрос.УстановитьПараметр("ТабПланРемонтов", ПланРемонтовДвижения);
		
		ТаблицаОбъектовРемонта = Запрос.Выполнить().Выгрузить();
		
		// Заполним таблицу движений.
		торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаОбъектовРемонта, ТаблицаДвижений);
		
		// Недостающие поля.
		ТаблицаДвижений.ЗаполнитьЗначения(ДатаПланирования, "ДатаПланирования");								  
		ТаблицаДвижений.ЗаполнитьЗначения(ПериодичностьДетализации, "ПериодичностьДетализации");
		ТаблицаДвижений.ЗаполнитьЗначения(ДатаОкончанияПланирования, "ДатаОкончанияПланирования");
		ТаблицаДвижений.ЗаполнитьЗначения(ЭтотОбъект.Ссылка, "Регистратор");
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		ПроверитьПериодыПланированияРемонтныхРабот(ТаблицаДвижений, Отказ, Заголовок);
		
		Если Не Отказ Тогда
			Движения.торо_ПериодыПланированияППР.ВыполнитьДвижения();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьПериодыПланированияРемонтныхРабот(ТаблицаПроверкиПериодовПланирования, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПроверкиПериодовПланирования.ОбъектРемонтныхРабот,
	               |	ТаблицаПроверкиПериодовПланирования.ПериодичностьДетализации,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаПланирования,
	               |	ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования,
				   |	ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот,
				   |	ТаблицаПроверкиПериодовПланирования.Регистратор
	               |ПОМЕСТИТЬ ТаблицаПроверкиПериодовПланирования
	               |ИЗ
	               |	&ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ДатаПланирования),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ПериодичностьДетализации),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ОбъектРемонтныхРабот),
	               |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.Регистратор),
				   |	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ВидРемонтныхРабот)
	               |ИЗ
	               |	ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПериодыПланированияППР КАК торо_ПериодыПланированияППР
	               |		ПО ТаблицаПроверкиПериодовПланирования.ОбъектРемонтныхРабот = торо_ПериодыПланированияППР.ОбъектРемонтныхРабот
					|			И ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот = торо_ПериодыПланированияППР.ВидРемонтныхРабот
					|			И ((ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования > торо_ПериодыПланированияППР.ДатаПланирования
					|					И ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования < торо_ПериодыПланированияППР.ДатаОкончанияПланирования)
					|				ИЛИ (ТаблицаПроверкиПериодовПланирования.ДатаПланирования > торо_ПериодыПланированияППР.ДатаПланирования
					|					И ТаблицаПроверкиПериодовПланирования.ДатаПланирования < торо_ПериодыПланированияППР.ДатаОкончанияПланирования)
					|				ИЛИ (ТаблицаПроверкиПериодовПланирования.ДатаПланирования < торо_ПериодыПланированияППР.ДатаПланирования
					|					И ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования > торо_ПериодыПланированияППР.ДатаПланирования)
					|				ИЛИ (ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования > торо_ПериодыПланированияППР.ДатаОкончанияПланирования
					|					И ТаблицаПроверкиПериодовПланирования.ДатаПланирования < торо_ПериодыПланированияППР.ДатаОкончанияПланирования))
				   |			И ТаблицаПроверкиПериодовПланирования.Регистратор <> торо_ПериодыПланированияППР.Регистратор";
					
					
	Запрос.УстановитьПараметр("ТаблицаПроверкиПериодовПланирования", ТаблицаПроверкиПериодовПланирования);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Отказ = Истина;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для списка объектов %1 и вида мероприятия ""%2"" на данный период уже составлен документ планирования:
				|%3!'"),Выборка.ОбъектРемонтныхРаботПредставление,Выборка.ВидРемонтныхРаботПредставление,Выборка.РегистраторПредставление), СтатусСообщения.Важное); 
			
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ПланРемонтов".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПланРемонтов(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот, ДатаНач, ДатаКон, СпособВыполнения");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ПланРемонтов", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования();
	
	
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПланРемонтов"].Представление();
	ПредставлениеРеквизита      = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПланРемонтов"].Реквизиты["Исполнитель"].Представление();
	ИспользоватьЛоты = ПолучитьФункциональнуюОпцию("торо_ИспользоватьЛоты");
	
	// Проверим принадлежность ремонтов периоду планирования и заполненность Исполнителей.
	Для Каждого СтрокаТЧ Из ПланРемонтов Цикл
		
		Если СтрокаТЧ.ДатаНач < ДатаПланирования Тогда
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В списке объектов ремонта: %1
				|Вид мероприятия: %2
				|дата начала работ %3 меньше даты начала планирования!'"),
				СтрокаТЧ.СписокОбъектовРемонта,СтрокаТЧ.ВидРемонтныхРабот,Формат(СтрокаТЧ.ДатаНач, "ДФ=dd.MM.yyyy")));			
				
			Отказ = Истина;
			
		ИначеЕсли СтрокаТЧ.ДатаНач > ДатаОкончанияПланирования Тогда
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В списке объектов ремонта: %1
				|Вид мероприятия: %2
				|дата начала работ %3 больше даты окончания планирования!'"),
				СтрокаТЧ.СписокОбъектовРемонта,СтрокаТЧ.ВидРемонтныхРабот,Формат(СтрокаТЧ.ДатаНач, "ДФ=dd.MM.yyyy")));
			
			Отказ = Истина;
			
		ИначеЕсли СтрокаТЧ.ДатаНач > СтрокаТЧ.ДатаКон Тогда
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В списке объектов ремонта: %1
				|Вид мероприятия: %2
				|дата начала работ %3 больше даты окончания работ %4!'"),
				СтрокаТЧ.ОбъектРемонтныхРабот,СтрокаТЧ.ВидРемонтныхРабот,Формат(СтрокаТЧ.ДатаНач, "ДФ=dd.MM.yyyy"),Формат(СтрокаТЧ.ДатаКон, "ДФ=dd.MM.yyyy")));
			
			Отказ = Истина;
		
		КонецЕсли; 
		
		Значение = СтрокаТЧ.Исполнитель;
		
		Если НЕ ЗначениеЗаполнено(Значение) И НЕ(СтрокаТЧ.СпособВыполнения = Перечисления.СпособыСтроительства.Подрядный И ИспользоватьЛоты) Тогда
			
			Если ПредставлениеТабличнойЧасти = Неопределено Тогда
				ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти["ПланРемонтов"].Представление();
			КонецЕсли;
			
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В строке номер ""%1"" табличной части ""%2"": 
			|	Не заполнено значение реквизита ""%3""!'"),
			СокрЛП(СтрокаТЧ.НомерСтроки),ПредставлениеТабличнойЧасти,СокрЛП(ПредставлениеРеквизита));
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#КонецЕсли