
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	РабочаяДата = ТекущаяДата();
	
	Если Параметры.Свойство("ВидОперации") Тогда 	
		Объект.ВидОперации = Параметры.ВидОперации;
	ИначеЕсли Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПустаяСсылка() Тогда
		
		Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот;
		
	КонецЕсли;
	
	СтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнаяСтруктураИерархии",
	Истина);;
	
	ТЗМаршрутов = Объект.Маршруты.Выгрузить(,"СписокОбъектовРемонта");
	ТЗМаршрутов.Свернуть("СписокОбъектовРемонта");
	Если ТЗМаршрутов.Найти(Справочники.торо_СписокОбъектовРегламентногоМероприятия.ПустаяСсылка()) = Неопределено Тогда
		ГруппировкаПоМаршруту = Истина;
	Иначе
		ГруппировкаПоМаршруту = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ Объект.ОбъектыМаршрутов.Количество() <> 0 Тогда
		ПоказыватьОбъекты = Истина;
	Иначе
		ПоказыватьОбъекты = Ложь;
	КонецЕсли;
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьОР.Пометка = ПоказыватьОбъекты;
	
	Если ПоказыватьОбъекты Тогда
		ЗаполнитьДерево(ГруппировкаПоМаршруту);
	Иначе
		ЗаполнитьДеревоБезОбъектов(ГруппировкаПоМаршруту);
	КонецЕсли;
	
	УстановитьЗаголовокКолонкиРемонтов();
	
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииГруппировкаПоМаршруту.Пометка = ГруппировкаПоМаршруту;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьОР.Пометка = ПоказыватьОбъекты;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			Объект.Организация = Параметры.ЗначениеКопирования.Организация;
			Объект.Подразделение = Параметры.ЗначениеКопирования.Подразделение;
			Объект.ПериодичностьДетализации = Параметры.ЗначениеКопирования.ПериодичностьДетализации;
			Объект.КоличествоПериодов = Параметры.ЗначениеКопирования.КоличествоПериодов;
			
			Объект.ПланРемонтов.Очистить();
			Если Объект.ПериодичностьДетализации = Перечисления.Периодичность.День Тогда 
				Объект.ДатаПланирования = КонецДня(РабочаяДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Неделя Тогда 
				Объект.ДатаПланирования = КонецНедели(РабочаяДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Декада Тогда 
				Объект.ДатаПланирования = КонецМесяца(РабочаяДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Месяц Тогда 
				Объект.ДатаПланирования = КонецМесяца(РабочаяДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Квартал Тогда 
				Объект.ДатаПланирования = КонецКвартала(КонецКвартала(РабочаяДата)+1)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Полугодие Тогда 
				Объект.ДатаПланирования = КонецКвартала(РабочаяДата)+1;
			ИначеЕсли Объект.ПериодичностьДетализации = Перечисления.Периодичность.Год Тогда 
				Объект.ДатаПланирования = КонецГода(РабочаяДата)+1;
			КонецЕсли;
		Иначе 
			Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				Объект.ДатаПланирования = КонецМесяца(РабочаяДата)+1;
				Объект.ПериодичностьДетализации = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновнойПериодПланирования",
				Истина);
				
				Если НЕ ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда
					Объект.ПериодичностьДетализации = Перечисления.Периодичность.Месяц;
				КонецЕсли;
				
				Объект.КоличествоПериодов = 1;
			КонецЕсли;
			
			ОрганизацияИзНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация");
			ПодразделениеИзНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение");	
			
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				
				Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
					Объект.Организация = ОрганизацияИзНастроек;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
					Объект.Подразделение = ПодразделениеИзНастроек;
				КонецЕсли;
				
			Иначе
				Объект.Организация = ОрганизацияИзНастроек;
				
				Объект.Подразделение = ПодразделениеИзНастроек;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
				
				Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ОсновнойОтветственный",
				Справочники.Пользователи.ПустаяСсылка());
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Объект.Дата;
	мДатаОкончанияПланирования   = РассчитатьДатуОкончанияПланирования(Объект.ПериодичностьДетализации, Объект.КоличествоПериодов, Объект.ДатаПланирования);
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_ГрафикРегламентныхМероприятийТОиР);
	
	ОбновитьДоступностьДляРедактирования();
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_ГрафикРегламентныхМероприятийТОиР;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента, Истина);
	// Согласование --
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	// Если открываем документ их обработки и нужно активировать указанную строку
	Если Параметры.Свойство("АктивироватьСтроку") Тогда
		ТекСтрокаИзВнеID = Параметры.ТекСтрокаИзОбработкиID;
	КонецЕсли;
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, УстановитьСвойствоЭлементовФормыОтПрав",Истина, Истина));
	
	
	// видимость легенды диаграммы
	Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказательЛегенду.Пометка;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	РазвернутьВсеВетвиДеревьев();
	
	УстановитьВнешнийВидФормы();
	
	// Если открываем документ их обработки и нужно активировать указанную строку
	Если ТекСтрокаИзВнеID<>"" Тогда
		АктивироватьСтрокуИзВне(ТекСтрокаИзВнеID);			
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаписатьДерево(ТекущийОбъект);
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Заголовок формы++
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(Объект.ВидОперации), ТекущийОбъект, ЭтаФорма);
	
	// Заголовок формы--
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_МакетПланаРемонтовНаПериод" И Источник = ЭтаФорма Тогда
		Если Параметр = Неопределено ИЛИ НЕ Параметр.Количество() Тогда			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать хотя бы 1 ремонт!'"), СтатусСообщения.Важное);			
		Иначе			
			СтруктураПараметровКоманды = Новый Структура("ДокППР, Параметры", Объект.Ссылка, Параметр);
			МассивПараметровКоманды = Новый Массив();
			МассивПараметровКоманды.Добавить(Объект.Ссылка);
			торо_Печать.НапечататьДокумент("Документ.торо_ГрафикРегламентныхМероприятийТОиР", "МакетПланаРемонтовНаПериод", МассивПараметровКоманды, СтруктураПараметровКоманды);
		КонецЕсли;	
		
	ИначеЕсли ИмяСобытия = "ЗагрузкаИзПроджект" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;	
	ПараметрыОтбора = Новый Структура("ОтборПоПроведенным", Истина);
	
	ОткрытьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ФормаВыбора",ПараметрыОтбора,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
	ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		ДиаграммаГантаППР.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		ДиаграммаГантаППР.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГантаППР.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаГантаППР.КратностьПериодическогоВарианта 	= ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СогласующиеРегистр.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение",ЭтотОбъект,Новый Структура("Элемент",Элемент)),
		НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПериодовПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьДетализацииПриИзменении(Элемент)
	
	ЗагрузитьРемонтыИзДокументаОснования();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРемонтыИзДокументаОснования()
	
	мДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования(Объект.ПериодичностьДетализации, Объект.КоличествоПериодов, Объект.ДатаПланирования);
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		ТЗ_ПланРемонтов = ПодобратьРемонтыДляКорректировки(мДатаОкончанияПланирования, Объект.ДокументОснование);
		Объект.ПланРемонтов.Загрузить(ТЗ_ПланРемонтов);
	КонецЕсли;

КонецПроцедуры

Функция ПодобратьРемонтыДляКорректировки(мДатаОкончанияПланирования, Основание)
	
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ГрафикРегламентныхМероприятийТОиР.ID,
	|	торо_ГрафикРегламентныхМероприятийТОиР.СписокОбъектовРемонта,
	|	торо_ГрафикРегламентныхМероприятийТОиР.ВидРемонтныхРабот,
	|	торо_ГрафикРегламентныхМероприятийТОиР.ДатаКон,
	|	торо_ГрафикРегламентныхМероприятийТОиР.ДатаНач,
	|	торо_ГрафикРегламентныхМероприятийТОиР.Документ,
	|	торо_ГрафикРегламентныхМероприятийТОиР.Исполнитель,
	|	торо_ГрафикРегламентныхМероприятийТОиР.СпособВыполнения,
	|	торо_ГрафикРегламентныхМероприятийТОиР.Отменен,
	|	торо_ГрафикРегламентныхМероприятийТОиР.Склад,
	|	торо_ГрафикРегламентныхМероприятийТОиР.Замещен,
	|	торо_ГрафикРегламентныхМероприятийТОиР.ID_базы_расчета,
	|	торо_ГрафикРегламентныхМероприятийТОиР.ID_замещающего,
	|	торо_ГрафикРегламентныхМероприятийТОиР.ДатаНачСт,
	|	торо_ГрафикРегламентныхМероприятийТОиР.ДатаКонСт,
	|	торо_ГрафикРегламентныхМероприятийТОиР.ЗамещенСт,
	|	торо_ГрафикРегламентныхМероприятийТОиР.СуммаРемонта
	|ИЗ
	|	Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиР
	|ГДЕ
	|	торо_ГрафикРегламентныхМероприятийТОиР.Ссылка = &Основание
	|	И торо_ГрафикРегламентныхМероприятийТОиР.ДатаНач МЕЖДУ &ДатаНачала И &ДатаОкончания";
	
	Запрос.УстановитьПараметр("Основание",Основание);
	Запрос.УстановитьПараметр("ДатаНачала",Объект.ДатаПланирования);
	Запрос.УстановитьПараметр("ДатаОкончания",мДатаОкончанияПланирования);

	ТЗ_ПланРемонтов = Запрос.Выполнить().Выгрузить();
	ТЗ_ПланРемонтов.ЗаполнитьЗначения(Основание, "Документ");
	
	ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаКон"), "ДатаКонСт");
	ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаНач"), "ДатаНачСт");
	
	Возврат ТЗ_ПланРемонтов;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПланаГрафикаППРСУчетомПозиции
&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ГруппировкаПоМаршруту Тогда
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
			
			Если ВыбранноеЗначениеЭтоГруппа(ВыбранноеЗначение) Тогда
				
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В документ нельзя вносить группы маршрутов!'"), 60);
				Возврат;
				
			КонецЕсли;
			
			ЗначВозврата = ДеревоОбработкаВыбораНаСервере(ВыбранноеЗначение);
			
			Если НЕ ЗначВозврата = Неопределено И НЕ ЗначВозврата Тогда
				
				ПоказатьПредупреждение(Неопределено,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Маршрут ""%1"" уже внесен в список маршрутов графика регламентных мероприятий!'"),
				ВыбранноеЗначение),60);
				
			КонецЕсли;
			
			Модифицированность = Истина;
			
			РазвернутьВсеВетвиДеревьев();
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			ТекСтрокаДерева = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
			
			СтрокаРодитель = ТекСтрокаДерева;
			
			Если ТекСтрокаДерева = Неопределено Тогда
				
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите маршрут для ввода вида мероприятий!'"), 60);
				Возврат;
				
			ИначеЕсли Не ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
				
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите маршрут для ввода вида мероприятий!'"), 60);
				Возврат;
				
			ИначеЕсли ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
				
				СтрокаРодитель = ТекСтрокаДерева.ПолучитьРодителя();
				
			КонецЕсли; 
			
			ЗначВозврата = ПроверитьОРНеУчаствуетВПланировании(ТекСтрокаДерева.Ремонты, ВыбранноеЗначение);
			
			Если ЗначВозврата <> Неопределено Тогда
				Если ЗначВозврата Тогда
					Ответ = Неопределено;
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для вида мероприятия %1 маршрута %2 установлен признак 'Не участвует в планировании'. Добавить вид мероприятия в документ?'"),
					Строка(ВыбранноеЗначение),ТекСтрокаДерева.Ремонты);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораЗавершение", ЭтотОбъект, 
					Новый Структура("ВыбранноеЗначение, СтрокаРодитель, ТекСтрокаДерева", ВыбранноеЗначение, СтрокаРодитель, ТекСтрокаДерева)),
					ТекстВопроса,РежимДиалогаВопрос.ДаНет);
					Возврат;
					
				Иначе
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для вида мероприятия %1 маршрута %2 не заданы нормативы планирования!'"),
					ВыбранноеЗначение,ТекСтрокаДерева.Ремонты),СтатусСообщения.Обычное);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораФрагмент(ВыбранноеЗначение, СтрокаРодитель, ТекСтрокаДерева);
			
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыДерево") Тогда
			
			Для Каждого СтрокаОР Из ВыбранноеЗначение.ПолучитьЭлементы() Цикл
				
				МассивВидовРемонта = Новый Массив;
				Если СтрокаОР.Свойство("Цепочка") Тогда
					Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
						МассивВидовРемонта.Добавить(СтрокаВР.Цепочка);
					КонецЦикла;
				Иначе
					Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
						МассивВидовРемонта.Добавить(СтрокаВР.Объект);
					КонецЦикла;
				КонецЕсли;
				
				ДополнитьДеревоРемонтовНаСервере(СтрокаОР.Объект,МассивВидовРемонта);
				
			КонецЦикла;
			
			Модифицированность = Истина;
			
			РазвернутьВсеВетвиДеревьев();
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			Для Каждого СтрокаОР Из ВыбранноеЗначение.Дерево.ПолучитьЭлементы() Цикл
				
				МассивВидовРемонта = Новый Массив;
				Если СтрокаОР.Свойство("Цепочка") Тогда
					Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
						МассивВидовРемонта.Добавить(СтрокаВР.Цепочка);
					КонецЦикла;
				Иначе
					Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
						Если ВыбранноеЗначение.ТолькоГрафикиМероприятий И ГрафикМероприятий(СтрокаВР.Объект) Тогда 							
							МассивВидовРемонта.Добавить(СтрокаВР.Объект);
						ИначеЕсли Не ВыбранноеЗначение.ТолькоГрафикиМероприятий Тогда
							МассивВидовРемонта.Добавить(СтрокаВР.Объект);							
						КонецЕсли;     						
					КонецЦикла;
				КонецЕсли;
				
				ДополнитьДеревоРемонтовНаСервере(СтрокаОР.Объект,МассивВидовРемонта);
				
			КонецЦикла;
			
			Модифицированность = Истина;
			
			РазвернутьВсеВетвиДеревьев();	
		КонецЕсли;			
		
	Иначе
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			Если ВыбранноеЗначениеЭтоГруппа(ВыбранноеЗначение) Тогда
				
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В документ нельзя вносить группы мероприятий!'"), 60);
				Возврат;
				
			КонецЕсли;
			
			ЗначВозврата = ДеревоОбработкаВыбораНаСервере(ВыбранноеЗначение);
			
			Если НЕ ЗначВозврата Тогда
				
				ПоказатьПредупреждение(Неопределено,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Маршрут ""%1"" уже внесен в список маршрутов графика регламентных мероприятий!'"),
				ВыбранноеЗначение),60);
				
			КонецЕсли;
			
			РазвернутьВсеВетвиДеревьев();
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
			
			ТекСтрокаДерева = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
			
			СтрокаРодитель = ТекСтрокаДерева;
			
			Если ТекСтрокаДерева = Неопределено Тогда
				
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вид мероприятия для ввода маршрута!'"), 60);
				Возврат;
				
			ИначеЕсли Не ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
				
				ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вид мероприятия для ввода маршрута!'"), 60);
				Возврат;
				
			ИначеЕсли ЗначениеЗаполнено(ТекСтрокаДерева.Ремонты) Тогда
				
				СтрокаРодитель = ТекСтрокаДерева.ПолучитьРодителя();
				
			КонецЕсли; 
			
			ЗначВозврата = ПроверитьОРНеУчаствуетВПланировании(ВыбранноеЗначение, ТекСтрокаДерева.Ремонты);
			
			Если НЕ ЗначВозврата = Неопределено Тогда
				Если ЗначВозврата Тогда
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для вида мероприятия %1 маршрута %2 установлен признак 'Не участвует в планировании'. Добавить маршрут в документ?'"),
					ТекСтрокаДерева.ВидМероприятия,ВыбранноеЗначение.Наименование);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораЗавершение1", ЭтотОбъект, Новый Структура("ВыбранноеЗначение, СтрокаРодитель, ТекСтрокаДерева", ВыбранноеЗначение, СтрокаРодитель, ТекСтрокаДерева)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
					Возврат;
				Иначе
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для вида мероприятия %1 маршрута %2 не заданы нормативы планирования!'"),
					ТекСтрокаДерева.Ремонты,ВыбранноеЗначение),СтатусСообщения.Обычное);
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
			ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораФрагмент1(ВыбранноеЗначение, СтрокаРодитель, ТекСтрокаДерева);
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
			Для Каждого СтрокаОР Из ВыбранноеЗначение.Дерево.ПолучитьЭлементы() Цикл
				
				МассивВидовРемонта = Новый Массив;
				Если СтрокаОР.Свойство("Цепочка") Тогда
					Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
						МассивВидовРемонта.Добавить(СтрокаВР.Цепочка);
					КонецЦикла;
				Иначе
					Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
						Если ВыбранноеЗначение.ТолькоГрафикиМероприятий И ГрафикМероприятий(СтрокаВР.Объект) Тогда 							
							МассивВидовРемонта.Добавить(СтрокаВР.Объект);
						ИначеЕсли Не ВыбранноеЗначение.ТолькоГрафикиМероприятий Тогда
							МассивВидовРемонта.Добавить(СтрокаВР.Объект);							
						КонецЕсли;     						
					КонецЦикла;
				КонецЕсли;
				
				ДополнитьДеревоРемонтовНаСервере(СтрокаОР.Объект,МассивВидовРемонта);
				
			КонецЦикла;
			
			Модифицированность = Истина;
			
			РазвернутьВсеВетвиДеревьев();	
		
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыДерево") Тогда 
			РазвернутьВсеВетвиДеревьев();
		КонецЕсли;
	КонецЕсли;

ПроставитьИнвНомера();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт

ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
СтрокаРодитель = ДополнительныеПараметры.СтрокаРодитель;
ТекСтрокаДерева = ДополнительныеПараметры.ТекСтрокаДерева;


Ответ = РезультатВопроса;
Если Ответ = КодВозвратаДиалога.Нет Тогда
	Возврат;
КонецЕсли;

ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораФрагмент1(ВыбранноеЗначение, СтрокаРодитель, ТекСтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораФрагмент1(ВыбранноеЗначение, Знач СтрокаРодитель, Знач ТекСтрокаДерева)

Перем ЗначВозврата;

ЗначВозврата = ДобавитьСписокОбъектовВДеревоНаСервере(ВыбранноеЗначение, ТекСтрокаДерева.Ремонты);

Если НЕ ЗначВозврата = Неопределено тогда
	Если НЕ ЗначВозврата Тогда
		
		ПоказатьПредупреждение(Неопределено,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Маршрут ""%1"" уже внесен в список маршрутов ""%2"" графика регламентных мероприятий!'"),
		ВыбранноеЗначение,СтрокаРодитель.ВидМероприятия),60);
		
	КонецЕсли;
КонецЕсли;
РазвернутьВсеВетвиДеревьев();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
СтрокаРодитель = ДополнительныеПараметры.СтрокаРодитель;
ТекСтрокаДерева = ДополнительныеПараметры.ТекСтрокаДерева;


Ответ = РезультатВопроса;
Если Ответ = КодВозвратаДиалога.Нет Тогда
	Возврат;
КонецЕсли;

ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораФрагмент(ВыбранноеЗначение, СтрокаРодитель, ТекСтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииОбработкаВыбораФрагмент(ВыбранноеЗначение, Знач СтрокаРодитель, Знач ТекСтрокаДерева)

Перем ЗначВозврата;

ЗначВозврата = ДобавитьВидМероприятияВДеревоНаСервере(ВыбранноеЗначение, ТекСтрокаДерева.Ремонты);

Если НЕ ЗначВозврата = Неопределено Тогда
	Если НЕ ЗначВозврата Тогда
		
		ПоказатьПредупреждение(Неопределено,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Мероприятие ""%1"" уже внесено в список мероприятий маршрута ""%2"" графика регламентных мероприятий!'"),
		ВыбранноеЗначение,СтрокаРодитель.Ремонты),60);
	КонецЕсли;
КонецЕсли;  		
Модифицированность = Истина;

РазвернутьВсеВетвиДеревьев();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
	ТекСтрокаЕстьКорень = ?(СтрокаВыбрана, (ТекущаяСтрока.НомерКартинки = 4 И ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("Строка")), Ложь);
	
	ВидЕстьКорректировка = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка"));
	
	ДоступностьКнопкиОтПравИВида = Не ВидЕстьКорректировка И ПравоРедактирование;
	Если ГруппировкаПоМаршруту Тогда
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииДобавитьРемонт.Доступность = ДоступностьКнопкиОтПравИВида И СтрокаВыбрана И Не ТекСтрокаЕстьКорень;
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииДобавитьОР.Доступность = ДоступностьКнопкиОтПравИВида;
	Иначе
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииДобавитьРемонт.Доступность = ДоступностьКнопкиОтПравИВида;
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииДобавитьОР.Доступность = ДоступностьКнопкиОтПравИВида И СтрокаВыбрана И Не ТекСтрокаЕстьКорень;
	КонецЕсли;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииУдалить.Доступность = ДоступностьКнопкиОтПравИВида;
	Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПодбор.Доступность = ДоступностьКнопкиОтПравИВида;
	// Отбор строк в плане ремонтов
	Если СтрокаВыбрана Тогда
		УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока);
	КонецЕсли;
	
	ТекОбъект = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
	Если НЕ ТекОбъект = Неопределено Тогда
		СтрРодитель = ТекОбъект.ПолучитьРодителя();
		Если СтрРодитель <> Неопределено Тогда
			ЗаблокироватьСтрокиВПланеРемонтовПоID(ТекОбъект.Ремонты, СтрРодитель.Ремонты);
		Иначе
			ЗаблокироватьСтрокиВПланеРемонтовПоID(ТекОбъект.Ремонты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииПередУдалением(Элемент, Отказ)

Отказ = МодифицируемыйОбъектРемонта;
Если Отказ Тогда
	Возврат;
КонецЕсли;

ТекСтрокаДерева = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;

Если ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя удалить объект ремонта, входящий в состав маршрута обхода'"));
	Отказ = Истина;
	Возврат;
КонецЕсли;
Если ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("Строка") И ТекСтрокаДерева.НомерКартинки = 4 Тогда
	Отказ = Истина;
	КоллекцияПодчиненных = ТекСтрокаДерева.ПолучитьЭлементы();
	Для Каждого СтрокаПодчиненная Из КоллекцияПодчиненных Цикл
		УдалитьСтрокуДерева(СтрокаПодчиненная);
		КоллекцияПодчиненных.Удалить(СтрокаПодчиненная);
	КонецЦикла;
Иначе
	УдалитьСтрокуДерева(ТекСтрокаДерева);
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПланаГрафикаППРСУчетомПозицииРемонтыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПланРемонтов
&НаКлиенте
Процедура ПланРемонтовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
Если Копирование Тогда
	
	Возврат;
	
КонецЕсли;

ТекСтрокаДерева = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;

Если ГруппировкаПоМаршруту Тогда
	Если ТекСтрокаДерева = Неопределено ИЛИ ТипЗнч(ТекСтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите вид ремонтных работ для ввода данных графика ППР!'"), 20);
		Возврат;
		
	КонецЕсли;
Иначе
	
	Если ТекСтрокаДерева = Неопределено ИЛИ ТипЗнч(ТекСтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите маршрут для ввода данных графика регламентных мероприятий!'"), 20);
		Возврат;
		
	КонецЕсли;
	
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
Если НоваяСтрока Тогда
	
	ТекДанные = Элементы.ПланРемонтов.ТекущиеДанные;
	ТекДанные.ID = Новый УникальныйИдентификатор;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		ТекДанные.ДатаНачСт = Дата(1,1,1);
		ТекДанные.ДатаКонСт = Дата(1,1,1);
	КонецЕсли;
	
	Если Не Копирование Тогда
		
		Если ГруппировкаПоМаршруту Тогда
			
			ТекСтрокаДереваППР             = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
			ТекДанные.СписокОбъектовРемонта = ТекСтрокаДереваППР.ПолучитьРодителя().Ремонты;
			ТекДанные.ВидРемонтныхРабот    = ТекСтрокаДереваППР.Ремонты;
			
		Иначе
			
			ТекСтрокаДереваППР             = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
			ТекДанные.ВидРемонтныхРабот     = ТекСтрокаДереваППР.ПолучитьРодителя().Ремонты;
			ТекДанные.СписокОбъектовРемонта = ТекСтрокаДереваППР.Ремонты;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПриАктивизацииСтроки(Элемент)
ДанныеТекущейСтроки = Элементы.ПланРемонтов.ТекущиеДанные;
Если (НЕ ДанныеТекущейСтроки = Неопределено) Тогда
	Если (НЕ МассивIDДляБлокировки = Неопределено) Тогда
		Если НЕ МассивIDДляБлокировки.НайтиПоЗначению(ДанныеТекущейСтроки.ID) = Неопределено Тогда
			ПопыткаМодификацииСтрокиСоСвязаннымДокументом = Истина;
		Иначе
			ПопыткаМодификацииСтрокиСоСвязаннымДокументом = Ложь;			
		КонецЕсли;	
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
		Элементы.ПланРемонтовУдалить.Доступность = Не ЗначениеЗаполнено(ДанныеТекущейСтроки.ДатаНачСт);
	Иначе
		Элементы.ПланРемонтовУдалить.Доступность = Истина;
	КонецЕсли;
	
КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередУдалением(Элемент, Отказ)
Отказ = ПопыткаМодификацииСтрокиСоСвязаннымДокументом Или Не Элементы.ПланРемонтовУдалить.Доступность;
Если Отказ Тогда
	Возврат;
КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередНачаломИзменения(Элемент, Отказ)
ТекущаяСтрокаРемонта = Элементы.ПланРемонтов.ТекущиеДанные;
Если НЕ ТекущаяСтрокаРемонта = Неопределено Тогда
	
	Если ТекущаяСтрокаРемонта.Замещен Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МассивСтрок = МассивДоступныхДляКорректировкиСтрок.НайтиСтроки(Новый Структура("ID", ТекущаяСтрокаРемонта.ID));
	
	Если МассивСтрок.Количество() > 0 Тогда
		
		СтрокаДляРедактирования = Массивстрок[0];
		
		Если ПопыткаМодификацииСтрокиСоСвязаннымДокументом Тогда
			Отказ = Истина;
		ИначеЕсли Не СтрокаДляРедактирования = Неопределено И Не СтрокаДляРедактирования.ДоступенДляРедактирования Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

СтандартнаяОбработка = Ложь;
ТекущаяСтрока = Элементы.ПланРемонтов.ТекущиеДанные;
Если ТекущаяСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Хозспособ") Тогда
	ФормаВыбора = ПолучитьФорму("Справочник.СтруктураПредприятия.ФормаВыбора", , Элемент);
	
ИначеЕсли ТекущаяСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Подрядный") Тогда
	ФормаВыбора = ПолучитьФорму("Справочник.Контрагенты.ФормаВыбора", , Элемент);
Иначе
	ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Для выбора исполнителя укажите способ выполнения ремонта.'"));
	Возврат;
КонецЕсли;

Если ФормаВыбора <> Неопределено Тогда
	ФормаВыбора.Открыть();
КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка") Тогда
	мНеверныйПериодПоКорректировке = Ложь;			
	ТекСтрокаПланРемонтов = Элемент.ТекущиеДанные;		
	Если ТекСтрокаПланРемонтов.ДатаКонСт < ТекСтрокаПланРемонтов.ДатаНачСт Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата окончания периода меньше даты начала (%1 - %2).'"),
		ТекСтрокаПланРемонтов.ДатаНачСт,ТекСтрокаПланРемонтов.ДатаКонСт));
		мНеверныйПериодПоКорректировке = Истина;			
	КонецЕсли;	
	Если ТекСтрокаПланРемонтов.ДатаКон < ТекСтрокаПланРемонтов.ДатаНач Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата окончания нового периода меньше даты начала (%1 - %2).'"),
		ТекСтрокаПланРемонтов.ДатаНач,ТекСтрокаПланРемонтов.ДатаКон));
		мНеверныйПериодПоКорректировке = Истина;
	КонецЕсли;	
КонецЕсли;

ТекДанныеПланаРемонтов = Элементы.ПланРемонтов.ТекущиеДанные;
Если ТекДанныеПланаРемонтов<>Неопределено Тогда 
	ДатаНачалаРемонта = ТекДанныеПланаРемонтов.ДатаНач;
	ДатаОкончанияРемонта = ТекДанныеПланаРемонтов.ДатаКон;
Иначе	
	ДатаНачалаРемонта = Дата(1,1,1);
	ДатаОкончанияРемонта = Дата(1,1,1);	
КонецЕсли;
Если  Не ДатаНачалаРемонта = Дата(1,1,1) И Не ДатаОкончанияРемонта = Дата(1,1,1) Тогда
	МассивСтрокВидаРемонта = Объект.ПланРемонтов.НайтиСтроки(Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот", ТекДанныеПланаРемонтов.СписокОбъектовРемонта, ТекДанныеПланаРемонтов.ВидРемонтныхРабот));
	
	Для Каждого СтрокаВидаРемонта Из МассивСтрокВидаРемонта Цикл
		Если СтрокаВидаРемонта.ID <> Элемент.ТекущиеДанные.ID И ((СтрокаВидаРемонта.ДатаНач <= ДатаОкончанияРемонта И СтрокаВидаРемонта.ДатаНач >= ДатаНачалаРемонта)
			ИЛИ (СтрокаВидаРемонта.ДатаКон <= ДатаОкончанияРемонта И СтрокаВидаРемонта.ДатаКон >= ДатаНачалаРемонта)) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для объекта ремонта %1 на период %2 - %3 уже запланирован ремонт с видом %4!'"),
			СтрокаВидаРемонта.СписокОбъектовРемонта,ДатаНачалаРемонта,ДатаОкончанияРемонта,СтрокаВидаРемонта.ВидРемонтныхРабот));
			мДублирующиесяРемонтыНаПериод = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПланРемонтовСпособВыполненияПриИзменении(Элемент)
ТекущиеДанные = Элементы.ПланРемонтов.ТекущиеДанные;
ТекущиеДанные.Исполнитель = "";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Рассчитать(Команда)

Если ИмеютсяДокументыНаОсновании(Объект.Ссылка) Тогда
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Перерасчет графика регламентных мероприятий невозможен, т.к. имеются документы, введенные на его основании.'"));
	Возврат;
КонецЕсли;	

Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
	ТекстВопроса = НСтр("ru = 'Перед выполнением расчета графика регламентных мероприятий необходимо записать документ. Продолжить?'");
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Возврат;
КонецЕсли;

РассчитатьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежиме(Команда)

Если ИмеютсяДокументыНаОсновании(Объект.Ссылка) Тогда
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Перерасчет графика регламентных мероприятий невозможен, т.к. имеются документы, введенные на его основании.'"));
	Возврат;
КонецЕсли;	

Если Модифицированность Тогда
	ТекстВопроса = НСтр("ru = 'Перед выполнением расчета графика регламентных мероприятий необходимо записать документ. Продолжить?'");
	Ответ = Неопределено;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьВФоновомРежимеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Возврат;
КонецЕсли;

РассчитатьВФоновомРежимеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаПоМаршруту(Команда)

Отказ = ПроверитьВозможностьПерегруппировкиДерева();

Кнопка = Элементы.ДеревоПланаГрафикаППРСУчетомПозицииГруппировкаПоМаршруту;

Если НЕ Отказ Тогда
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	ЗаписатьДерево();
	
	ГруппировкаПоМаршруту = Кнопка.Пометка;
	
	ЗаполнитьДеревоНаСервере();
	
	РазвернутьВсеВетвиДеревьев();
	
	ДеревоПланаГрафикаППРСУчетомПозицииПриАктивизацииСтроки(Элементы.ДеревоПланаГрафикаППРСУчетомПозиции);
	
Иначе 
	
	Если Кнопка.Пометка Тогда
		ТекстСообщения = НСтр("ru = 'Смена группировки не может быть выполнена. Не у всех списков объектов регл. мероприятий указан вид ремонта.'");
	Иначе
		ТекстСообщения = НСтр("ru = 'Смена группировки не может быть выполнена. Не у всех видов ремонта указан список объектов регл. мероприятий.'");
	КонецЕсли;
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецЕсли;

Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПодбор.Доступность = ГруппировкаПоМаршруту;

КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОР(Команда)

Кнопка = Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьОР;

Кнопка.Пометка = НЕ Кнопка.Пометка;

ЗаписатьДерево();

ПоказыватьОбъекты = Кнопка.Пометка;

ЗаполнитьДеревоНаСервере();

РазвернутьВсеВетвиДеревьев();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОР(Команда)

ЭлементДерево = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции;
ФормаВыбора = ПолучитьФорму("Справочник.торо_СписокОбъектовРегламентногоМероприятия.ФормаВыбора",, ЭлементДерево);
ФормаВыбора.Открыть();
Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРемонт(Команда)

ЭлементДерево = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции;
ФормаВыбора = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора",, ЭлементДерево);
ПользовательскийОтбор = ФормаВыбора.Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ФормаВыбора.Список.КомпоновщикНастроек.Настройки.Отбор.ИдентификаторПользовательскойНастройки);
ПользовательскийОтбор.Элементы.Очистить();

ЭлементОтбора = ПользовательскийОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
ЭлементОтбора.ЛевоеЗначение     = Новый ПолеКомпоновкиДанных("ГрафикМероприятий");
ЭлементОтбора.ВидСравнения         = ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.Использование = Истина;
ЭлементОтбора.ПравоеЗначение = Истина;
ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;


ФормаВыбора.Открыть();
Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)

ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораСписковОРДляГрафикаРегламентныхМероприятий",
Новый Структура("КлючНазначенияИспользования", "торо_ГрафикРегламентныхМероприятийТОиР"), 
Элементы.ДеревоПланаГрафикаППРСУчетомПозиции, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);

ФормаПодбора.ЗакрыватьПриВыборе = Ложь;

ФормаПодбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителей(Команда)

Перем ФормаЗаполненияИсполнителей;

ФормаЗаполненияИсполнителей = ПолучитьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.Форма.ФормаАвтозаполненияИсполнителей",
Новый Структура("ДокументППР, ТаблицаРемонтовИзППР", Объект.Ссылка, Объект.ПланРемонтов), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
ФормаЗаполненияИсполнителей.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
ФормаЗаполненияИсполнителей.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьИсполнителейЗавершение",ЭтотОбъект);
ФормаЗаполненияИсполнителей.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗамещенные(Команда)

Кнопка = Элементы.ПланРемонтовОтображатьЗамещенные;
Кнопка.Пометка = НЕ Кнопка.Пометка;
ТекущаяСтрока = Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущиеДанные;
СтрокаВыбрана = Не (ТекущаяСтрока = Неопределено);
Если СтрокаВыбрана Тогда
	УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока);
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГанта(Команда)

Режим = РежимДиалогаВопрос.ДаНет;
Ответ = Неопределено;

ПоказатьВопрос(Новый ОписаниеОповещения("ПостроитьДиаграммуГантаЗавершение", ЭтотОбъект), НСтр("ru = 'Данное действие требует длительного времени. Продолжить?'"), Режим, 0, КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура УтвердитьСтатус(Команда)

торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаППР.Точки Цикл
	ДиаграммаГантаППР.СвернутьТочку(ТочкаДиаграммыГанта, Истина);
КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
Для каждого ТочкаДиаграммыГанта Из ДиаграммаГантаППР.Точки Цикл
	ДиаграммаГантаППР.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоНаименованию(Команда)

Элементы.СортироватьПоНаименованию.Пометка = НЕ Элементы.СортироватьПоНаименованию.Пометка;
СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура ПоказательЛегенду(Команда)
Элементы.ПоказательЛегенду.Пометка = НЕ Элементы.ПоказательЛегенду.Пометка;
Элементы.ЛегендаДиаграммы.Видимость = Элементы.ПоказательЛегенду.Пометка;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтоимостиРемонтов(Команда)

ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСтоимостиРемонтовЗавершение", ЭтотОбъект), НСтр("ru = 'Перезаполнить плановые стоимости ремонтов?'"),РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Функция ГрафикМероприятий(ВидРемонта)
	Возврат ВидРемонта.ГрафикМероприятий; 
КонецФункции

&НаКлиенте
Процедура УдалитьСтрокуДерева(ТекСтрокаДерева)

Если ГруппировкаПоМаршруту Тогда 
	Если ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.ПолучитьРодителя().Ремонты, ТекСтрокаДерева.Ремонты, Ложь);
		
	Иначе 
		
		СтрокиВидаРемонтов = ТекСтрокаДерева.ПолучитьЭлементы();
		Для каждого Стр Из СтрокиВидаРемонтов Цикл
			
			УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.Ремонты, Стр.Ремонты, Истина, Истина);
			
		КонецЦикла;
		
		УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.Ремонты, ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка"), Истина, Истина);
		
	КонецЕсли;
	
Иначе
	
	Если ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
		
		ОчищатьОбъектыМаршрутов = НайтиВДеревеМаршруты(ТекСтрокаДерева.Ремонты);
		УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(ТекСтрокаДерева.Ремонты, ТекСтрокаДерева.ПолучитьРодителя().Ремонты, ОчищатьОбъектыМаршрутов);
		
	Иначе 
		
		СтрокиВидаРемонтов = ТекСтрокаДерева.ПолучитьЭлементы();
		Для каждого Стр Из СтрокиВидаРемонтов Цикл
			
			ОчищатьОбъектыМаршрутов = НайтиВДеревеМаршруты(Стр.Ремонты);
			УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(Стр.Ремонты, ТекСтрокаДерева.Ремонты, ОчищатьОбъектыМаршрутов, Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроставитьИнвНомера()

элементыДерева = Дерево.ПолучитьЭлементы();
массивЭлементов = Новый Массив;
Для каждого текСтрока из элементыДерева Цикл
	Если типЗнч(текСтрока.Ремонты) = тип("СправочникСсылка.торо_ОбъектыРемонта") тогда 
		МассивЭлементов.Добавить(текСтрока.Ремонты);
	КонецЕсли;
	ПолучитьСписокОР(текСтрока.ПолучитьЭлементы(), МассивЭлементов);
КонецЦикла;

Запрос = Новый запрос;
Запрос.Текст = "ВЫБРАТЬ
|	торо_ОбъектыРемонта.Ссылка,
|	торо_ОбъектыРемонта.ИнвентарныйНомер
|ИЗ
|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
|ГДЕ
|	торо_ОбъектыРемонта.Ссылка В(&МассивОР)";

Запрос.УстановитьПараметр("МассивОР", массивЭлементов);

Результат = Запрос.Выполнить();
Если Результат.Пустой() тогда
	Возврат;
КонецЕсли;

ТЗ = Результат.Выгрузить(); 
тз.Индексы.Добавить("Ссылка");

Для каждого текСтрока из элементыДерева Цикл
	Если типЗнч(текСтрока.Ремонты) = тип("СправочникСсылка.торо_ОбъектыРемонта") тогда 
		НайС = тз.найти(текСтрока.ремонты, "Ссылка");
		Если найс <> Неопределено Тогда текСтрока.ИнвентарныйНомер =  Найс.ИнвентарныйНомер КонецЕсли;
	КонецЕсли;
	УстановитьИнвНомера(текСтрока.ПолучитьЭлементы(), тз);
КонецЦикла;

КонецПроцедуры

&НаСервере 
Процедура УстановитьИнвНомера (ЭлементыДерева, тз)
Для каждого текСтрока из ЭлементыДерева Цикл
	Если типЗнч(текСтрока.Ремонты) = тип("СправочникСсылка.торо_ОбъектыРемонта") тогда 
		НайС = тз.найти(текСтрока.ремонты, "Ссылка");
		Если найс <> Неопределено Тогда текСтрока.ИнвентарныйНомер =  Найс.ИнвентарныйНомер КонецЕсли;
	КонецЕсли;
	УстановитьИнвНомера(текСтрока.ПолучитьЭлементы(), тз);
КонецЦикла;
КонецПроцедуры

&НаСервере 
Процедура ПолучитьСписокОР(ЭлементыДерева, МассивЭлементов)
Для каждого текСтрока из элементыДерева Цикл
	Если типЗнч(текСтрока.Ремонты) = тип("СправочникСсылка.торо_ОбъектыРемонта") тогда 
		МассивЭлементов.Добавить(текСтрока.Ремонты);
	КонецЕсли;
	ПолучитьСписокОР(текСтрока.ПолучитьЭлементы(), МассивЭлементов);
КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьНаличиеОРВМаршрутеНаСервере(СписокОбъектов)

Запрос = Новый ЗАпрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта
|ИЗ
|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
|ГДЕ
|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов = &СписокОбъектов";
Запрос.УстановитьПараметр("СписокОбъектов", СписокОбъектов);
РезультатЗапроса = Запрос.Выполнить();

Если РезультатЗапроса.Пустой() Тогда
	Возврат Ложь;
Иначе
	Возврат Истина;
КонецЕсли;

КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьПерегруппировкиДерева()

Для каждого Строка Из Дерево.ПолучитьЭлементы() Цикл
	Если ТипЗнч(Строка.Ремонты) = Тип("Строка") Тогда
		Для Каждого СтрокаУр1 Из Строка.ПолучитьЭлементы() Цикл
			Если СтрокаУр1.ПолучитьЭлементы().Количество() = 0 Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если Строка.ПолучитьЭлементы().Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
КонецЦикла;

Возврат Ложь;

КонецФункции

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()

Объект.ПланРемонтов.Очистить();
Объект.Маршруты.Очистить();
Объект.ОбъектыМаршрутов.Очистить();

Основание = Объект.ДокументОснование;	

Если Основание.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка Тогда
	Объект.ДатаПланирования = Основание.ДатаПланирования;
	Объект.КоличествоПериодов = 1;
	Объект.ПериодичностьДетализации = Перечисления.Периодичность.Месяц;
Иначе
	Объект.ДатаПланирования = Основание.ДатаПланирования;
	Объект.КоличествоПериодов = Основание.КоличествоПериодов;
	Объект.ПериодичностьДетализации = Основание.ПериодичностьДетализации;
КонецЕсли;

ТЗ_ПланРемонтов = Основание.ПланРемонтов.Выгрузить();
ТЗ_ПланРемонтов.ЗаполнитьЗначения(Основание, "Документ");

ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаКон"), "ДатаКонСт");
ТЗ_ПланРемонтов.ЗагрузитьКолонку(ТЗ_ПланРемонтов.ВыгрузитьКолонку("ДатаНач"), "ДатаНачСт");

Объект.ПланРемонтов.Загрузить(ТЗ_ПланРемонтов);

Объект.Маршруты.Загрузить(Основание.Маршруты.Выгрузить());
Объект.ОбъектыМаршрутов.Загрузить(Основание.ОбъектыМаршрутов.Выгрузить());

РабочаяДата = ТекущаяДата();

Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
	// Заполнить реквизиты значениями по умолчанию.
	
	ОрганизацияИзНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнаяОрганизация",
	Истина);
	ПодразделениеИзНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновноеПодразделение",
	Истина);	
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Если Не ЗначениеЗаполнено(ОрганизацияИзНастроек) Тогда
			Объект.Организация = Объект.ДокументОснование.Организация;
		Иначе
			Объект.Организация = ОрганизацияИзНастроек;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПодразделениеИзНастроек) Тогда
			Объект.Подразделение = Объект.ДокументОснование.Подразделение;
		Иначе
			Объект.Подразделение = ПодразделениеИзНастроек;
		КонецЕсли;
	Иначе
		Объект.Организация = ОрганизацияИзНастроек;
		
		Объект.Подразделение = ОрганизацияИзНастроек;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
		
		Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнойОтветственный",
		Справочники.Пользователи.ПустаяСсылка());
		
	КонецЕсли;	
	
КонецЕсли; 	
ЗаполнитьДеревоНаСервере();	

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

Ответ = РезультатВопроса;
Если Ответ <> КодВозвратаДиалога.Да Тогда
	Возврат;
КонецЕсли;

Попытка
	Записать();
Исключение
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Запись документа невозможна!'"));
	Если Объект.ДатаПланирования > Дата (3999,12,31,23,59,59) Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата планирования не может быть больше 31.12.3999!'"));
	КонецЕсли;
	Возврат;
КонецПопытки;

РассчитатьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагмент()

Перем Отказ, ПланРемонтовID, РассчитыватьСтоимости, Стр;

ПроверкаПередРассчетомПланГрафика(Новый ОписаниеОповещения("РассчитатьФрагментФрагмент",ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагментФрагмент(Результат,ДополнительныеПараметры) Экспорт

Если Результат Тогда	
	
	ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании = ПолучитьЗначениеОпции("торо_РассчитыватьПлановуюСтоимостьРемонтовПриПланировании");
	Если ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьФрагментЗавершение", ЭтотОбъект), НСтр("ru = 'Рассчитать плановые стоимости мероприятий, после расчета графика мероприятий?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		РассчитатьФрагментЗавершение(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
	КонецЕсли;
	
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	РассчитыватьСтоимости = Истина;
Иначе
	РассчитыватьСтоимости = Ложь;
КонецЕсли;

Отказ = Ложь;
ПланРемонтовID = Новый Массив;

Для каждого Стр Из Объект.ПланРемонтов Цикл
	ПланРемонтовID.Добавить(Стр.ID);
КонецЦикла;

Если НЕ ПроверитьПравоДоступа() Тогда 
	ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Нарушение прав доступа!'"));
	Отказ = Истина;
КонецЕсли;

Если Не ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена начальная дата планирования!'"), СтатусСообщения.Внимание);
	Отказ = Истина;
КонецЕсли;

Если Не ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда
	ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для расчёта графика регламентных мероприятий необходимо задать период планирования!'"));
	Отказ = Истина;
КонецЕсли;

Если Отказ = Истина Тогда
	
	Возврат;
	
КонецЕсли;

Если Объект.ПланРемонтов.Количество() > 0 Тогда
	
	ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьФрагментЗавершениеЗавершение", ЭтотОбъект, Новый Структура("РассчитыватьСтоимости", РассчитыватьСтоимости)), НСтр("ru = 'Данные запланированных мероприятий будут перезаполнены! Продолжить?'"),
	РежимДиалогаВопрос.ДаНет, 60);
	Возврат;
	
КонецЕсли; 

РассчитатьФрагментЗавершениеФрагмент(РассчитыватьСтоимости);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагментЗавершениеЗавершение(РезультатВопроса1, ДополнительныеПараметры1) Экспорт

РассчитыватьСтоимости = ДополнительныеПараметры1.РассчитыватьСтоимости;


Если Не РезультатВопроса1 = КодВозвратаДиалога.Да Тогда
	
	Возврат;
	
КонецЕсли;


РассчитатьФрагментЗавершениеФрагмент(РассчитыватьСтоимости);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьФрагментЗавершениеФрагмент(Знач РассчитыватьСтоимости)

ЗаписатьДерево();

Если Объект.Маршруты.Количество() = 0 Тогда
	
	ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заданы списки объектов для заполнения графика мероприятий!'"));
	Возврат;
	
КонецЕсли;

РассчитатьНаСервере(РассчитыватьСтоимости);

КонецПроцедуры

&НаСервере
Процедура РассчитатьНаСервере(РассчитыватьСтоимости)

ТаблицаОбъектыРемонта = Новый ТаблицаЗначений;
ТаблицаОбъектыРемонта.Колонки.Добавить("СписокОбъектовРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия"));
ТаблицаОбъектыРемонта.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));

ТаблицаЦепочки = Новый ТаблицаЗначений;

Для Каждого ОР Из Объект.Маршруты Цикл
	НС = ТаблицаОбъектыРемонта.Добавить();
	НС.СписокОбъектовРемонта = ОР.СписокОбъектовРемонта;
	НС.ВидРемонтныхРабот    = ОР.ВидМероприятия;
КонецЦикла;


Таб = торо_РасчетППР.РасчетППР(Объект.Ссылка, РассчитыватьСтоимости);

Если ТипЗнч(Таб) = Тип("ТаблицаЗначений") Тогда
	Объект.ПланРемонтов.Загрузить(Таб);
	Модифицированность = Истина;
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежимеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

Ответ = РезультатВопроса;
Если Ответ <> КодВозвратаДиалога.Да Тогда
	Возврат;
КонецЕсли;

Попытка
	Записать();
Исключение
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Запись документа невозможна!'"));
	Если Объект.ДатаПланирования > Дата (3999,12,31,23,59,59) Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата планирования не может быть больше 31.12.3999!'"));
	КонецЕсли;
	Возврат;
КонецПопытки;

РассчитатьВФоновомРежимеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежимеФрагмент()

Перем Отказ, ПланРемонтовID, РассчитыватьСтоимости, Стр;

ПроверкаПередРассчетомПланГрафика(Новый ОписаниеОповещения("РассчитатьВФоновомРежимеФрагментФрагмент",ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежимеФрагментФрагмент(Результат, ДополнительныеПараметры) Экспорт

Если Результат Тогда	
	
	ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании = ПолучитьЗначениеОпции("торо_РассчитыватьПлановуюСтоимостьРемонтовПриПланировании");
	Если ФОРассчитыватьПлановуюСтоимостьРемонтовПриПланировании И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьВФоновомРежимеФрагментЗавершение", ЭтотОбъект), НСтр("ru = 'Рассчитать плановые стоимости мероприятий, после расчета графика мероприятий?'"), РежимДиалогаВопрос.ДаНет);
	Иначе 
		РассчитатьВФоновомРежимеФрагментЗавершение(КодВозвратаДиалога.Нет, ДополнительныеПараметры);
	КонецЕсли;
	
Иначе 
	
	РассчитатьВФоновомРежимеФрагментЗавершение(Ложь, ДополнительныеПараметры);
	
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежимеФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	РассчитыватьСтоимости = Истина;
Иначе
	РассчитыватьСтоимости = Ложь;
КонецЕсли;

Отказ = Ложь;
ПланРемонтовID = Новый Массив;

Для каждого Стр Из Объект.ПланРемонтов Цикл
	ПланРемонтовID.Добавить(Стр.ID);
КонецЦикла;

Если НЕ ПроверитьПравоДоступа() Тогда 
	ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Нарушение прав доступа!'"));
	Отказ = Истина;
КонецЕсли;

Если Не ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена начальная дата планирования!'"), СтатусСообщения.Внимание);
	Отказ = Истина;
КонецЕсли;

Если Не ЗначениеЗаполнено(Объект.ПериодичностьДетализации) Тогда
	ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для расчёта графика регламентных мероприятий необходимо задать период планирования!'"));
	Отказ = Истина;
КонецЕсли;

Если Отказ = Истина Тогда
	
	Возврат;
	
КонецЕсли;

Если Объект.ПланРемонтов.Количество() > 0 Тогда
	
	ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьВФоновомРежимеФрагментЗавершениеЗавершение", ЭтотОбъект), НСтр("ru = 'Данные запланированных мероприятий будут перезаполнены! Продолжить?'"),
	РежимДиалогаВопрос.ДаНет, 60);
	Возврат;
	
КонецЕсли; 

РассчитатьВФоновомРежимеФрагментЗавершениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежимеФрагментЗавершениеЗавершение(РезультатВопроса1, ДополнительныеПараметры1) Экспорт

Если Не РезультатВопроса1 = КодВозвратаДиалога.Да Тогда
	
	Возврат;
	
КонецЕсли;


РассчитатьВФоновомРежимеФрагментЗавершениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьВФоновомРежимеФрагментЗавершениеФрагмент()

ЗаписатьДерево();

Если Объект.Маршруты.Количество() = 0 Тогда
	
	ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заданы списки объектов для заполнения графика мероприятий!'"));
	Возврат;
	
КонецЕсли;

ЗаписатьДанныеВРегистр(Объект.Ссылка);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеВРегистр(Ссылка)

ПоследниеЗаписиПоППР = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СрезПоследних(ТекущаяДата(),Новый Структура("ДокументППР", Ссылка));

Если (ПоследниеЗаписиПоППР <> Неопределено И ПоследниеЗаписиПоППР.Количество() > 0 И Не ПоследниеЗаписиПоППР[0].Рассчитан) Тогда
	Возврат;
КонецЕсли;

ППРДляРасчетаМенеджер = РегистрыСведений.торо_ППРДляРасчетаВФоновомРежиме.СоздатьМенеджерЗаписи();
ППРДляРасчетаМенеджер.ДокументППР = Ссылка;
ППРДляРасчетаМенеджер.Период = ТекущаяДата();

ППРДляРасчетаМенеджер.Записать();

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафика(Знач Оповещение)

ДатаПланированияОкончание = РассчитатьДатуОкончанияПланирования(Объект.ПериодичностьДетализации, Объект.КоличествоПериодов, Объект.ДатаПланирования);
Если ДатаПланированияОкончание = Дата(4000,1,1) Тогда
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаПередРассчетомПланГрафикаЗавершение", ЭтотОбъект, Новый Структура("ДатаПланированияОкончание, Оповещение", ДатаПланированияОкончание, Оповещение)), НСтр("ru = 'Расчет графика регламентных мероприятий может быть выполнен только до 4000 года!'"));
	Возврат;
КонецЕсли;
ПроверкаПередРассчетомПланГрафикаФрагмент(ДатаПланированияОкончание, Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаЗавершение(ДополнительныеПараметры) Экспорт

ДатаПланированияОкончание = ДополнительныеПараметры.ДатаПланированияОкончание;
Оповещение = ДополнительныеПараметры.Оповещение;


ВыполнитьОбработкуОповещения(Оповещение, Ложь);

ПроверкаПередРассчетомПланГрафикаФрагмент(ДатаПланированияОкончание, Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаФрагмент(Знач ДатаПланированияОкончание, Знач Оповещение)

Перем МассивОР, НужныеГода, Переменная, Стр, СтрТЧ;

Переменная = Объект.ДатаПланирования;
НужныеГода = Новый СписокЗначений;
Пока Переменная < ДатаПланированияОкончание Цикл
	НужныеГода.Добавить(ГОД(Переменная));
	Переменная = ДобавитьМесяц(Переменная,12);
КонецЦикла;
Если НужныеГода.НайтиПоЗначению(ГОД(ДатаПланированияОкончание)) = Неопределено Тогда 
	НужныеГода.Добавить(ГОД(ДатаПланированияОкончание));
КонецЕсли;

Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.ПланРабот") Тогда
	МассивОР = Новый Массив;
	Для каждого Стр Из Объект.Маршруты Цикл
		СтрТЧ = Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот");
		ЗаполнитьЗначенияСвойств(СтрТЧ, Стр);
		МассивОР.Добавить(СтрТЧ);
	КонецЦикла;
	
	Если ПроверкаНаПересеченияСДругимиППР(Объект.ДатаПланирования, Объект.ПериодичностьДетализации, Объект.Ссылка, ДатаПланированияОкончание, МассивОР) Тогда
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
	КонецЕсли;
КонецЕсли;

Если НЕ ПроверитьЗаполненностьГрафика(Объект.ДатаПланирования, ДатаПланированияОкончание, НужныеГода, Объект.Ссылка) Тогда
	ПоказатьВопрос(Новый ОписаниеОповещения("ПроверкаПередРассчетомПланГрафикаФрагментЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Не заполнен календарь в справочнике ""График работ"". Продолжить?'"), РежимДиалогаВопрос.ДаНет);
Иначе
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПередРассчетомПланГрафикаФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

Оповещение = ДополнительныеПараметры.Оповещение;


Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
Иначе 
	ВыполнитьОбработкуОповещения(Оповещение, Ложь);
КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполненностьГрафика(ДатаПланированияНачала, ДатаПланированияОкончание, НужныеГодаСписок, Ссылка)

НужныеГода = Новый ТаблицаЗначений;
ТипГодГрафика = Новый Массив;
ТипГодГрафика.Добавить(Тип("Число"));
НужныеГода.Колонки.Добавить("ГодГрафика",Новый ОписаниеТипов(ТипГодГрафика), "ГодГрафика");

Для каждого Элем Из НужныеГодаСписок Цикл
	
	НужныеГода.Добавить().ГодГрафика = Элем.Значение;
	
КонецЦикла; 

ГрафикЗаполнен = Истина;

МенеджерВТ = Новый МенеджерВременныхТаблиц;

Запрос = Новый Запрос;
Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
Запрос.УстановитьПараметр("Ссылка", Ссылка);
Запрос.Текст = 

"ВЫБРАТЬ
|	торо_РегламентныеМероприятияИСпискиОбъектов.ГрафикРемонтныхРабот
|ПОМЕСТИТЬ ТабГрафиков
|ИЗ
|	Документ.торо_ГрафикРегламентныхМероприятийТОиР.Маршруты КАК торо_ГрафикРегламентныхМероприятийТОиРМаршруты
|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
|		ПО торо_ГрафикРегламентныхМероприятийТОиРМаршруты.СписокОбъектовРемонта = торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов
|ГДЕ
|	торо_ГрафикРегламентныхМероприятийТОиРМаршруты.Ссылка = &Ссылка
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТабГрафиков.ГрафикРемонтныхРабот
|ИЗ
|	ТабГрафиков КАК ТабГрафиков";

Результат = Запрос.Выполнить();
МассивГрафиков = Результат.Выгрузить().ВыгрузитьКолонку("ГрафикРемонтныхРабот");

КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачалоДня(ДатаПланированияНачала), ДатаПланированияОкончание);

Запрос = Новый Запрос;
Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
Запрос.Текст = "ВЫБРАТЬ
|	НужныеГода.ГодГрафика
|ПОМЕСТИТЬ НужныеГода
|ИЗ
|  &НужныеГода КАК НужныеГода
|;
|ВЫБРАТЬ
|	ТабГрафиков.ГрафикРемонтныхРабот,
|	НужныеГода.ГодГрафика
|ПОМЕСТИТЬ ВремТабл
|ИЗ
|	ТабГрафиков КАК ТабГрафиков,
|	НужныеГода КАК НужныеГода
|;
|ВЫБРАТЬ
|	ВТРасписанияРаботы.ГрафикРаботы,
|	ГОД(ВТРасписанияРаботы.ДатаГрафика) КАК ГодГрафика,
|	СУММА(РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяНачала, ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ОсновноеЗначение
|ПОМЕСТИТЬ ВТРасписанияРаботыИзм
|ИЗ
|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
|СГРУППИРОВАТЬ ПО
|	ВТРасписанияРаботы.ГрафикРаботы,
|	ГОД(ВТРасписанияРаботы.ДатаГрафика)
|;
|ВЫБРАТЬ
|	ВремТабл.ГрафикРемонтныхРабот КАК ГрафикРаботы,
|	ВремТабл.ГодГрафика,
|	ЕСТЬNULL(ВТРасписанияРаботыИзм.ОсновноеЗначение, 0) КАК ОсновноеЗначение
|ИЗ
|	ВремТабл КАК ВремТабл
|	ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
|	ПО ВремТабл.ГодГрафика = ВТРасписанияРаботыИзм.ГодГрафика
|		И ВремТабл.ГрафикРемонтныхРабот = ВТРасписанияРаботыИзм.ГрафикРаботы";

Запрос.УстановитьПараметр("НужныеГода", НужныеГода);
РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать();

Пока Выборка.Следующий() Цикл
	Если Выборка.ОсновноеЗначение = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Не заполнен график %1 за %2 год.'"),Выборка.ГрафикРаботы,Выборка.ГодГрафика));
		ГрафикЗаполнен = Ложь;
	КонецЕсли;
КонецЦикла;

Возврат ГрафикЗаполнен;

КонецФункции

&НаСервереБезКонтекста
Функция ПроверкаНаПересеченияСДругимиППР(ДатаПланирования, ПериодичностьДетализации, Ссылка, ДатаОкончанияПланирования, Маршруты)

ТаблицаПроверкиПериодовПланирования = Новый ТаблицаЗначений;
ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("СписокОбъектовРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия"));
ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ВидРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ПериодичностьДетализации", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ДатаПланирования", Новый ОписаниеТипов("Дата"));
ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("ДатаОкончанияПланирования", Новый ОписаниеТипов("Дата"));
ТаблицаПроверкиПериодовПланирования.Колонки.Добавить("Регистратор", Новый ОписаниеТипов("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР"));

Для каждого Стр Из Маршруты Цикл
	
	НС                           = ТаблицаПроверкиПериодовПланирования.Добавить();
	НС.СписокОбъектовРемонта      = Стр.СписокОбъектовРемонта;
	НС.ВидРемонтныхРабот         = Стр.ВидРемонтныхРабот;
	НС.ПериодичностьДетализации  = ПериодичностьДетализации;
	НС.ДатаПланирования          = ДатаПланирования;
	НС.ДатаОкончанияПланирования = ДатаОкончанияПланирования;
	НС.Регистратор               = Ссылка;
	
КонецЦикла; 

Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	ТаблицаПроверкиПериодовПланирования.СписокОбъектовРемонта,
|	ТаблицаПроверкиПериодовПланирования.ПериодичностьДетализации,
|	ТаблицаПроверкиПериодовПланирования.ДатаПланирования,
|	ТаблицаПроверкиПериодовПланирования.ДатаОкончанияПланирования,
|	ТаблицаПроверкиПериодовПланирования.ВидРемонтныхРабот,
|	ТаблицаПроверкиПериодовПланирования.Регистратор
|ПОМЕСТИТЬ ТаблицаПроверкиПериодовПланирования1
|ИЗ
|	&ТаблицаПроверкиПериодовПланирования КАК ТаблицаПроверкиПериодовПланирования
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ДатаПланирования),
|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ПериодичностьДетализации),
|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ОбъектРемонтныхРабот),
|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.Регистратор),
|	ПРЕДСТАВЛЕНИЕ(торо_ПериодыПланированияППР.ВидРемонтныхРабот)
|ИЗ
|	РегистрСведений.торо_ПериодыПланированияППР КАК торо_ПериодыПланированияППР
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПроверкиПериодовПланирования1 КАК ТаблицаПроверкиПериодовПланирования1
|		ПО торо_ПериодыПланированияППР.ОбъектРемонтныхРабот = ТаблицаПроверкиПериодовПланирования1.СписокОбъектовРемонта
|			И торо_ПериодыПланированияППР.ВидРемонтныхРабот = ТаблицаПроверкиПериодовПланирования1.ВидРемонтныхРабот
|			И торо_ПериодыПланированияППР.ДатаПланирования <= ТаблицаПроверкиПериодовПланирования1.ДатаОкончанияПланирования
|			И торо_ПериодыПланированияППР.ДатаОкончанияПланирования >= ТаблицаПроверкиПериодовПланирования1.ДатаПланирования
|			И торо_ПериодыПланированияППР.Регистратор <> ТаблицаПроверкиПериодовПланирования1.Регистратор";

Запрос.УстановитьПараметр("ТаблицаПроверкиПериодовПланирования", ТаблицаПроверкиПериодовПланирования);

Результат = Запрос.Выполнить();
Если Не Результат.Пустой() Тогда
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для оборудования %1 и вида ремонта ""%2"" на данный период уже составлен документ планирования:
		|%3!'"),Выборка.ОбъектРемонтныхРаботПредставление,Выборка.ВидРемонтныхРаботПредставление,Выборка.РегистраторПредставление), СтатусСообщения.Важное); 
		
	КонецЦикла;
Иначе	
	Возврат Ложь;
КонецЕсли;
Возврат Истина;

КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоБезОбъектов(ГруппирПоМаршруту,ТабМаршрутов = Неопределено)

Если ТабМаршрутов = Неопределено Тогда
	ТабМаршрутов = Объект.Маршруты.Выгрузить();
КонецЕсли;

Дерево.ПолучитьЭлементы().Очистить();

ЗаписатьДерево();

ДеревоРемонтовОбъект = РеквизитФормыВЗначение("Дерево");

Запрос = Новый Запрос(ТекстЗапросаДляПостроенияДерева(ГруппирПоМаршруту, Истина));
Запрос.УстановитьПараметр("ТабМаршрутов", ТабМаршрутов);
Результат = Запрос.Выполнить();

ПостроитьДеревоПоРезультатуЗапроса(Результат, ДеревоРемонтовОбъект, ГруппирПоМаршруту, Истина);

ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "Дерево");

КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()

МассивID =Объект.ПланРемонтов.Выгрузить().ВыгрузитьКолонку("ID");
МассивIDДляБлокировки = торо_Ремонты.ПроверитьДокументНаСвязанныеДокументыПоID(Объект.Ссылка, МассивID);
Если МассивIDДляБлокировки.Количество() > 0 Тогда
	
	Элементы.Подразделение.ТолькоПросмотр = Истина;
	Элементы.Организация.ТолькоПросмотр = Истина;		
	Элементы.Дата.ТолькоПросмотр = Истина;		
	Элементы.Номер.ТолькоПросмотр = Истина;		
	Элементы.ДатаПланирования.ТолькоПросмотр = Истина;				
	Элементы.КоличествоПериодов.ТолькоПросмотр = Истина;				
	Элементы.ПериодичностьДетализации.ТолькоПросмотр = Истина;				
	Элементы.Ответственный.ТолькоПросмотр = Истина;
	
КонецЕсли;

МассивДоступныхДляКорректировкиСтрок.Загрузить(Документы.торо_ГрафикРегламентныхМероприятийТОиР.ОбновитьДоступностьДляРедактирования(Объект.Ссылка, Объект.ВидОперации, Объект.ПланРемонтов.Выгрузить()));

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(ГруппирПоМаршруту,ТабМаршрутов = Неопределено, ТабОбъектовМаршрута = Неопределено)

Если ТабМаршрутов = Неопределено Тогда
	ТабМаршрутов = Объект.Маршруты.Выгрузить();
КонецЕсли;

Если ТабОбъектовМаршрута = Неопределено Тогда
	ТабОбъектовМаршрута = Объект.ОбъектыМаршрутов.Выгрузить();
КонецЕсли;

Дерево.ПолучитьЭлементы().Очистить();

ДеревоРемонтовОбъект = РеквизитФормыВЗначение("Дерево");

Запрос = Новый Запрос(ТекстЗапросаДляПостроенияДерева(ГруппирПоМаршруту, Ложь));
Запрос.УстановитьПараметр("ТабМаршрутов", ТабМаршрутов);
Запрос.УстановитьПараметр("ТабОбъектовМаршрута", ТабОбъектовМаршрута);
Результат = Запрос.Выполнить();

ПостроитьДеревоПоРезультатуЗапроса(Результат, ДеревоРемонтовОбъект, ГруппирПоМаршруту);

ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "Дерево"); 

КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоПоРезультатуЗапроса(РезультатЗапроса, ДеревоРемонтовОбъект, ГруппирПоМаршруту, БезОР = Ложь)

ДеревоРемонтовОбъект.Строки.Очистить();
ВыборкаПервыйУровень = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

Корень = ПолучитьКореньДерева(ДеревоРемонтовОбъект);

Пока ВыборкаПервыйУровень.Следующий() Цикл
	
	НС = Корень.Строки.Добавить();
	Если ГруппирПоМаршруту Тогда
		НС.Ремонты = ВыборкаПервыйУровень.Маршрут;
		НС.НомерКартинки = 9;
	Иначе 
		НС.Ремонты = ВыборкаПервыйУровень.ВидМероприятия;
		НС.НомерКартинки = 7;
	КонецЕсли;
	
	ВыборкаВторойУровень = ВыборкаПервыйУровень.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВторойУровень.Следующий() Цикл
		
		Если ГруппирПоМаршруту Тогда
			Если ЗначениеЗаполнено(ВыборкаВторойУровень.ВидМероприятия) Тогда
				НовСтр = НС.Строки.Добавить();
				НовСтр.Ремонты = ВыборкаВторойУровень.ВидМероприятия;
				НовСтр.НомерКартинки = 7;
			КонецЕсли;
		Иначе 
			Если ЗначениеЗаполнено(ВыборкаВторойУровень.Маршрут) Тогда
				НовСтр = НС.Строки.Добавить();
				НовСтр.Ремонты = ВыборкаВторойУровень.Маршрут;
				НовСтр.НомерКартинки = 9;
			КонецЕсли;
		КонецЕсли;
		
		Если Не БезОР Тогда
			Если НовСтр <> Неопределено И ЗначениеЗаполнено(НовСтр.Ремонты) Тогда
				
				ВыборкаОР = ВыборкаВторойУровень.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаОР.Следующий() Цикл
					
					НСтр = НовСтр.Строки.Добавить();
					НСтр.Ремонты = ВыборкаОР.ОбъектРемонта;
					НСтр.ИнвентарныйНомер = ВыборкаОР.ИнвентарныйНомер;
					НСтр.НомерКартинки = 0;
					
				КонецЦикла;
				
			Иначе
				
				ПоказыватьОбъекты = Ложь;
				Элементы.ДеревоПланаГрафикаППРСУчетомПозицииПоказыватьОР.Пометка = ПоказыватьОбъекты;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьКореньДерева(ДеревоОбъектов)

Корень = ДеревоОбъектов.Строки.Найти(4, "НомерКартинки", Истина);
Если Корень = Неопределено Тогда
	
	Корень = ДеревоОбъектов.Строки.Добавить();
	Корень.Ремонты = НСтр("ru = '<Списки объектов и виды мероприятий>'");
	Корень.НомерКартинки = 4;
	
КонецЕсли;
Возврат Корень;

КонецФункции

&НаСервере
Функция ТекстЗапросаДляПостроенияДерева(ГруппирПоМаршруту, БезОР)

ТекстЗапроса = "";
Если БезОР Тогда
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабМаршрутов.СписокОбъектовРемонта,
	|	ТабМаршрутов.ВидМероприятия
	|ПОМЕСТИТЬ ТабМаршрутов
	|ИЗ
	|	&ТабМаршрутов КАК ТабМаршрутов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабМаршрутов.СписокОбъектовРемонта КАК Маршрут,
	|	ТабМаршрутов.ВидМероприятия КАК ВидМероприятия,
	|   0 КАК КартинкаМаршрут,
	|   0 КАК КартинкаВидМероприятия
	|ИЗ
	|	ТабМаршрутов КАК ТабМаршрутов ";
Иначе
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТабМаршрутов.СписокОбъектовРемонта,
	|	ТабМаршрутов.ВидМероприятия
	|ПОМЕСТИТЬ ТабМаршрутов
	|ИЗ
	|	&ТабМаршрутов КАК ТабМаршрутов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабОбъектовМаршрута.СписокОбъектовРемонта,
	|	ТабОбъектовМаршрута.ОбъектРемонта
	|ПОМЕСТИТЬ ТабОбъектовМаршрута
	|ИЗ
	|	&ТабОбъектовМаршрута КАК ТабОбъектовМаршрута
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабМаршрутов.СписокОбъектовРемонта КАК Маршрут,
	|	ТабМаршрутов.ВидМероприятия КАК ВидМероприятия,
	|	ТабОбъектовМаршрута.ОбъектРемонта КАК ОбъектРемонта,
	|	0 КАК КартинкаМаршрут,
	|	0 КАК КартинкаВидМероприятия,
	|	0 КАК КартинкаОбъектРемонта,
	|	торо_ОбъектыРемонта.ИнвентарныйНомер
	|ИЗ
	|	ТабМаршрутов КАК ТабМаршрутов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабОбъектовМаршрута КАК ТабОбъектовМаршрута
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|			ПО ТабОбъектовМаршрута.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
	|		ПО ТабМаршрутов.СписокОбъектовРемонта = ТабОбъектовМаршрута.СписокОбъектовРемонта ";
КонецЕсли;
Если ГруппирПоМаршруту Тогда
	
	ТекстЗапроса = ТекстЗапроса + 
	"ИТОГИ ПО
	|	Маршрут" + ?(БезОР, "",", ВидМероприятия");
	
Иначе
	ТекстЗапроса = ТекстЗапроса +
	"ИТОГИ ПО
	|	ВидМероприятия"  + ?(БезОР, "",", Маршрут");
	
КонецЕсли;
Возврат ТекстЗапроса;

КонецФункции

&НаСервере
Процедура ЗаписатьДерево(ДокОбъект = Неопределено, ОбъектРемонтаДляОтбора = Неопределено)

Если ДокОбъект = Неопределено Тогда
	ТЧДляЗаписиМаршруты = Объект.Маршруты;
Иначе
	ТЧДляЗаписиМаршруты = ДокОбъект.Маршруты;
КонецЕсли;
ТЧДляЗаписиМаршруты.Очистить();

ДеревоРемонтовОбъект = РеквизитФормыВЗначение("Дерево", Тип ("ДеревоЗначений"));
Если ОбъектРемонтаДляОтбора = Неопределено Тогда
	Для Каждого СтрокаДерева Из ДеревоРемонтовОбъект.Строки Цикл
		
		ЗаписатьСтрокуДереваВТЧ(СтрокаДерева, ТЧДляЗаписиМаршруты);
		
	КонецЦикла;
Иначе
	СтрокаОР = ДеревоРемонтовОбъект.Строки.Найти(ОбъектРемонтаДляОтбора,"Ремонты",Истина);
	ЗаписатьСтрокуДереваВТЧ(СтрокаОР, ТЧДляЗаписиМаршруты);
КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуДереваВТЧ(СтрокаДерева, ТЧДляЗаписиМаршруты)

Если ГруппировкаПоМаршруту Тогда
	Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		НоваяСтрокаТЗ = ТЧДляЗаписиМаршруты.Добавить();
		НоваяСтрокаТЗ.ВидМероприятия = СтрокаДерева.Ремонты;
		НоваяСтрокаТЗ.СписокОбъектовРемонта = СтрокаДерева.Родитель.Ремонты;
	ИначеЕсли ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") И СтрокаДерева.Строки.Количество() = 0 Тогда
		НоваяСтрокаТЗ = ТЧДляЗаписиМаршруты.Добавить();
		НоваяСтрокаТЗ.СписокОбъектовРемонта = СтрокаДерева.Ремонты;
	КонецЕсли;
	
	Для Каждого СтрокаДЗ Из СтрокаДерева.Строки Цикл
		
		ЗаписатьСтрокуДереваВТЧ(СтрокаДЗ, ТЧДляЗаписиМаршруты);
		
	КонецЦикла;
Иначе
	Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
		НоваяСтрокаТЗ = ТЧДляЗаписиМаршруты.Добавить();
		НоваяСтрокаТЗ.СписокОбъектовРемонта = СтрокаДерева.Ремонты;
		НоваяСтрокаТЗ.ВидМероприятия = СтрокаДерева.Родитель.Ремонты;
	ИначеЕсли ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") И СтрокаДерева.Строки.Количество() = 0 Тогда
		НоваяСтрокаТЗ = ТЧДляЗаписиМаршруты.Добавить();
		НоваяСтрокаТЗ.ВидМероприятия = СтрокаДерева.Ремонты;
	КонецЕсли;
	
	Для Каждого СтрокаДЗ Из СтрокаДерева.Строки Цикл
		
		ЗаписатьСтрокуДереваВТЧ(СтрокаДЗ, ТЧДляЗаписиМаршруты);
		
	КонецЦикла;
КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьДатуОкончанияПланирования(ПериодичностьДетализации, КоличествоПериодов, ДатаПланирования)

Если ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(ПериодичностьДетализации) + ", " + ?(КоличествоПериодов=0, 1, КоличествоПериодов) + ") КАК ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаПланирования);
	
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
	Исключение
		Возврат Дата(3999,12,31,23,59,59);
	КонецПопытки;
	
	Если Выборка.Следующий() Тогда
		
		Возврат ?(ПериодичностьДетализации = Перечисления.Периодичность.День, Выборка.ДатаОкончания, НачалоДня(Выборка.ДатаОкончания)-1);
		
	КонецЕсли;
	
Иначе 	
	
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран период планирования!'"), СтатусСообщения.Важное);
	
КонецЕсли;

КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКолонкиРемонтов()

Если ГруппировкаПоМаршруту Тогда
	Если ПоказыватьОбъекты Тогда
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРемонты.Заголовок = НСтр("ru = 'Список объектов / Вид мероприятия / Объект ремонта'");
	Иначе
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРемонты.Заголовок = НСтр("ru = 'Список объектов / Вид мероприятия'");
	КонецЕсли;
Иначе
	Если ПоказыватьОбъекты Тогда
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРемонты.Заголовок = НСтр("ru = 'Вид мероприятия / Список объектов / Объект ремонта'");
	Иначе
		Элементы.ДеревоПланаГрафикаППРСУчетомПозицииРемонты.Заголовок = НСтр("ru = 'Вид мероприятия / Список объектов'");
	КонецЕсли;
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеВетвиДеревьев()

Для Каждого Элемент Из Дерево.ПолучитьЭлементы() Цикл
	Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
КонецЦикла;	

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНаСервере()

Если ПоказыватьОбъекты Тогда
	ЗаполнитьДерево(ГруппировкаПоМаршруту);
Иначе
	ЗаполнитьДеревоБезОбъектов(ГруппировкаПоМаршруту);
КонецЕсли;

УстановитьЗаголовокКолонкиРемонтов();

КонецПроцедуры

// Если открываем документ их обработки и нужно активировать указанную строку
&НаСервере
Процедура АктивироватьСтрокуИзВне(ТекСтрокаID)

ПараметрПоиска = Новый Структура;
ПараметрПоиска.Вставить("ID",ТекСтрокаID); 
НужнаяСтрокаПланРемонтов = Объект.ПланРемонтов.НайтиСтроки(ПараметрПоиска); 

ДеревоРемонтовОбъект = Дерево.ПолучитьЭлементы();	

Для каждого СтрокаОбъект ИЗ ДеревоРемонтовОбъект Цикл
	Если СтрокаОбъект.Ремонты =	НужнаяСтрокаПланРемонтов[0].СписокОбъектовРемонта Тогда
		Для Каждого СтрокаРемонт ИЗ СтрокаОбъект.ПолучитьЭлементы() Цикл
			Если СтрокаРемонт.Ремонты =	НужнаяСтрокаПланРемонтов[0].ВидРемонтныхРабот Тогда
				Элементы.ПланРемонтов.ТекущаяСтрока = НужнаяСтрокаПланРемонтов[0].НомерСтроки-1;
				Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.ТекущаяСтрока = СтрокаРемонт.ПолучитьИдентификатор();	
				Прервать;	
			КонецЕсли;
		КонецЦикла;			
	КонецЕсли;
КонецЦикла;	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыбранноеЗначениеЭтоГруппа(ВыбранноеЗначение)

Возврат ВыбранноеЗначение.ЭтоГруппа;

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьОРНеУчаствуетВПланировании(Маршрут, ВидМероприятия)

Запрос = Новый Запрос;
Запрос.Текст = 

"ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия,
|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов,
|	торо_РегламентныеМероприятияИСпискиОбъектов.НеУчаствуетВПланировании
|ИЗ
|	РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
|ГДЕ
|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов = &Маршрут
|	И торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия = &ВидМероприятия";

Запрос.УстановитьПараметр("Маршрут", Маршрут);
Запрос.УстановитьПараметр("ВидМероприятия", ВидМероприятия);
Выборка = Запрос.Выполнить().Выбрать();

Если Выборка.Следующий() Тогда
	Если Выборка.НеУчаствуетВПланировании Тогда
		Возврат Истина;
	КонецЕсли;
Иначе
	Возврат Ложь;
КонецЕсли;

КонецФункции

&НаСервере
Функция ДополнитьДеревоРемонтовНаСервере(ОР, МассивВидовРемонта = Неопределено, ЗаполнитьНормативы = Ложь)

Если Объект.ОбъектыМаршрутов.НайтиСтроки(Новый Структура("СписокОбъектовРемонта", ОР)).Количество() = 0 Тогда
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта
	|ИЗ
	|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
	|ГДЕ
	|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов = &СписокОбъектов
	|
	|УПОРЯДОЧИТЬ ПО
	|	торо_МаршрутыРегламентныхМероприятий.НомерПоПорядку";
	
	Запрос.УстановитьПараметр("СписокОбъектов", ОР);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НС = Объект.ОбъектыМаршрутов.Добавить();
		НС.СписокОбъектовРемонта = ОР;
		НС.ОбъектРемонта = ВыборкаДетальныеЗаписи.ОбъектРемонта;
	КонецЦикла;
КонецЕсли;

ДеревоРемонтовОбъект = РеквизитФормыВЗначение("Дерево", Тип("ДеревоЗначений"));

НайденныеСтроки = ДеревоРемонтовОбъект.Строки.НайтиСтроки(Новый Структура("Ремонты", ОР), Истина);

КолНайденныхСтрок = НайденныеСтроки.Количество();
Если КолНайденныхСтрок = 0 Тогда
	НайденнаяСтрока = Неопределено;
ИначеЕсли КолНайденныхСтрок = 1 Тогда
	НайденнаяСтрока = НайденныеСтроки[0];
Иначе
	НайденнаяСтрока = НайденныеСтроки[0];
КонецЕсли;

СтрокаДерева = НайденнаяСтрока;

Если НайденнаяСтрока = Неопределено Тогда
	
	НовСтрокаОбъект = ПолучитьКореньДерева(ДеревоРемонтовОбъект).Строки.Добавить();
	
	НовСтрокаОбъект.Ремонты = ОР;
	
	НовСтрокаОбъект.НомерКартинки = 9;
	СтрокаДерева = НовСтрокаОбъект;
	
Иначе
	Если Не ЗаполнитьНормативы И МассивВидовРемонта = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Объект ""%1"" уже внесен в список объектов ремонтных работ плана-графика ППР!'"),ОР));
	КонецЕсли;
КонецЕсли;

Если МассивВидовРемонта <> Неопределено Тогда
	
	Для Каждого СтрокаВР Из МассивВидовРемонта Цикл
		
		НайденнаяСтрока = СтрокаДерева.Строки.Найти(СтрокаВР, "Ремонты");
		
		Если НайденнаяСтрока = Неопределено Тогда
			НовСтрокаВидРемРабот = СтрокаДерева.Строки.Добавить();
			НовСтрокаВидРемРабот.Ремонты = СтрокаВР;
			НовСтрокаВидРемРабот.НомерКартинки = 7;
			
			
			Если ПоказыватьОбъекты Тогда
				МассивСписокОбъектов = Объект.ОбъектыМаршрутов.НайтиСтроки(Новый Структура("СписокОбъектовРемонта", ОР));
				Для каждого ЭлМассива ИЗ МассивСписокОбъектов Цикл
					
					НовСтрокаОР = НовСтрокаВидРемРабот.Строки.Добавить();
					НовСтрокаОР.Ремонты = ЭлМассива.ОбъектРемонта;
					НовСтрокаОР.НомерКартинки = 0;
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецЕсли;
ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "Дерево");

КонецФункции

&НаСервере
Функция ДобавитьСписокОбъектовВДеревоНаСервере(ВыбранноеЗначение, ВидМероприятия)

ЕстьОРВМаршруте = ПроверитьНаличиеОРВМаршрутеНаСервере(ВыбранноеЗначение);

Если НЕ ЕстьОРВМаршруте Тогда
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
	НСтр("ru = 'В список объектов регл. мероприятия ""%1"" не входит ни одного объекта ремонта!'"),ВыбранноеЗначение));
	Возврат Неопределено;
КонецЕсли;

ДеревоОбъект = РеквизитФормыВЗначение("Дерево");

СтрокаРодитель = ДеревоОбъект.Строки.Найти(ВидМероприятия, "Ремонты", Истина);

Если НЕ СтрокаРодитель = Неопределено Тогда
	
	НайденнаяСтрока = СтрокаРодитель.Строки.Найти(ВыбранноеЗначение, "Ремонты");
	
	Если НайденнаяСтрока = Неопределено Тогда
		
		НовСтрокаМаршрут = СтрокаРодитель.Строки.Добавить();
		НовСтрокаМаршрут.Ремонты = ВыбранноеЗначение;
		НовСтрокаМаршрут.НомерКартинки = 9;
		
		Если Объект.ОбъектыМаршрутов.НайтиСтроки(Новый Структура("СписокОбъектовРемонта", ВыбранноеЗначение)).Количество() = 0 Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта
			|ИЗ
			|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
			|ГДЕ
			|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов = &СписокОбъектов
			|
			|УПОРЯДОЧИТЬ ПО
			|	торо_МаршрутыРегламентныхМероприятий.НомерПоПорядку";
			
			Запрос.УстановитьПараметр("СписокОбъектов", ВыбранноеЗначение);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НС = Объект.ОбъектыМаршрутов.Добавить();
				НС.СписокОбъектовРемонта = ВыбранноеЗначение;
				НС.ОбъектРемонта = ВыборкаДетальныеЗаписи.ОбъектРемонта;
				Если ПоказыватьОбъекты Тогда	
					НовСтрокаОР = НовСтрокаМаршрут.Строки.Добавить();
					НовСтрокаОР.Ремонты = ВыборкаДетальныеЗаписи.ОбъектРемонта;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ПоказыватьОбъекты Тогда
			
			МассивСтрок = Объект.ОбъектыМаршрутов.НайтиСтроки(Новый Структура("СписокОбъектовРемонта",ВыбранноеЗначение));	
			Для каждого ЭлМассива Из МассивСтрок Цикл
				
				НовСтрокаОР = НовСтрокаМаршрут.Строки.Добавить();
				НовСтрокаОР.Ремонты = ЭлМассива.ОбъектРемонта;	
				НовСтрокаОР.НомерКартинки = 0;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДеревоОбъект, "Дерево");
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецЕсли;

КонецФункции

&НаСервере
Функция ДобавитьВидМероприятияВДеревоНаСервере(ВыбранноеЗначение, Маршрут)

ДеревоОбъект = РеквизитФормыВЗначение("Дерево");
СтрокаРодитель = ДеревоОбъект.Строки.Найти(Маршрут, "Ремонты", Истина);
Если НЕ СтрокаРодитель = Неопределено Тогда
	НайденнаяСтрока = СтрокаРодитель.Строки.Найти(ВыбранноеЗначение, "Ремонты");
	
	Если НайденнаяСтрока = Неопределено Тогда
		
		НовСтрокаВидМероприятия = СтрокаРодитель.Строки.Добавить();
		НовСтрокаВидМероприятия.Ремонты = ВыбранноеЗначение;
		НовСтрокаВидМероприятия.НомерКартинки = 7;
		
		Если ПоказыватьОбъекты Тогда
			МассивСписокОбъектов = Объект.ОбъектыМаршрутов.НайтиСтроки(Новый Структура("СписокОбъектовРемонта", СтрокаРодитель.Ремонты));
			
			Для каждого ЭлМассива ИЗ МассивСписокОбъектов Цикл
				
				НовСтрокаОР = НовСтрокаВидМероприятия.Строки.Добавить();
				НовСтрокаОР.Ремонты = ЭлМассива.ОбъектРемонта;
				НовСтрокаОР.НомерКартинки = 0;
				
			КонецЦикла;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДеревоОбъект, "Дерево");
		
		ЗаписатьДерево();
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецЕсли;

КонецФункции

&НаСервере
Функция ДеревоОбработкаВыбораНаСервере(ВыбранноеЗначение)

Если ГруппировкаПоМаршруту Тогда
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
		
		ЕстьОРВМаршруте = ПроверитьНаличиеОРВМаршрутеНаСервере(ВыбранноеЗначение);
		
		Если НЕ ЕстьОРВМаршруте Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В список объектов регл. мероприятия ""%1"" не входит ни одного объекта ремонта!'"),ВыбранноеЗначение));
			Возврат Неопределено;
		КонецЕсли;
		
		ДеревоСГруппировкойПоМаршруту = РеквизитФормыВЗначение("Дерево");
		НайденнаяСтрока = ДеревоСГруппировкойПоМаршруту.Строки.Найти(ВыбранноеЗначение, "Ремонты", Истина);
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НовСтрокаОбъект = ПолучитьКореньДерева(ДеревоСГруппировкойПоМаршруту).Строки.Добавить();
			НовСтрокаОбъект.Ремонты = ВыбранноеЗначение;
			НовСтрокаОбъект.НомерКартинки = 9;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта
			|ИЗ
			|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
			|ГДЕ
			|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов = &СписокОбъектов
			|
			|УПОРЯДОЧИТЬ ПО
			|	торо_МаршрутыРегламентныхМероприятий.НомерПоПорядку";
			
			Запрос.УстановитьПараметр("СписокОбъектов", ВыбранноеЗначение);
			
			Результат = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НС = Объект.ОбъектыМаршрутов.Добавить();
				НС.СписокОбъектовРемонта = ВыбранноеЗначение;
				НС.ОбъектРемонта = ВыборкаДетальныеЗаписи.ОбъектРемонта;
			КонецЦикла;
			
			ЗначениеВРеквизитФормы(ДеревоСГруппировкойПоМаршруту, "Дерево");
			Возврат Истина;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;	
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДеревоЗначений") Тогда
		Для Каждого СтрМаршрута Из ВыбранноеЗначение.Строки Цикл
			
			СтрокаМаршрут = ДеревоСГруппировкойПоМаршруту.Строки.Найти(СтрМаршрута.Маршрут, "Маршрут", Истина);
			
			Если СтрокаМаршрут = Неопределено Тогда
				
				СтрокаМаршрут = ДеревоСГруппировкойПоМаршруту.Строки.Добавить();
				СтрокаМаршрут.Ремонты = СтрМаршрута.Маршрут;
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта
				|ИЗ
				|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
				|ГДЕ
				|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов = &СписокОбъектов
				|
				|УПОРЯДОЧИТЬ ПО
				|	торо_МаршрутыРегламентныхМероприятий.НомерПоПорядку";
				
				Запрос.УстановитьПараметр("СписокОбъектов", СтрМаршрута.Маршрут);
				
				Результат = Запрос.Выполнить();
				
				ВыборкаДетальныеЗаписи = Результат.Выбрать();
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НС = Объект.ОбъектыМаршрутов.Добавить();
					НС.СписокОбъектовРемонта = СтрМаршрута.Маршрут;
					НС.ОбъектРемонта = ВыборкаДетальныеЗаписи.ОбъектРемонта;
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого СтрокаВМ Из СтрМаршрута.Строки Цикл
				
				НайденнаяСтрока = СтрокаМаршрут.Строки.Найти(СтрокаВМ.ВидМероприятия, "ВидМероприятия");
				
				Если НайденнаяСтрока = Неопределено Тогда
					
					НовСтрокаВидМероприятия = СтрокаМаршрут.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаВидМероприятия, СтрокаМаршрут);
					НовСтрокаВидМероприятия.ВидМероприятия = СтрокаВМ.ВидМероприятия;
					
					Если ДеревоСГруппировкойПоМаршруту.Колонки.Найти("ОбъектРемонта") <> Неопределено Тогда
						МассивСписокОбъектов = Объект.ОбъектыМаршрутов.НайтиСтроки(Новый Структура("СписокОбъектовРемонта",СтрМаршрута.Маршрут));
						
						Для каждого ЭлМассива ИЗ МассивСписокОбъектов Цикл
							
							НовСтрокаОР = НовСтрокаВидМероприятия.Строки.Добавить();
							ЗаполнитьЗначенияСвойств(НовСтрокаОР, НовСтрокаВидМероприятия); 
							НовСтрокаОР.ОбъектРемонта = ЭлМассива.ОбъектРемонта;
							
						КонецЦикла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.Развернуть(СтрМаршрута, Истина);
			
		КонецЦикла; 
		
		Для Каждого СтрокаДерева Из ДеревоСГруппировкойПоМаршруту.Строки Цикл
			
			Элементы.ДеревоПланаГрафикаППРСУчетомПозиции.Развернуть(СтрокаДерева);
			
		КонецЦикла; 
		
		
	КонецЕсли;
Иначе
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		ДеревоСГруппировкойПоВидуМероприятия = РеквизитФормыВЗначение("Дерево");
		
		НайденнаяСтрока = ДеревоСГруппировкойПоВидуМероприятия.Строки.Найти(ВыбранноеЗначение, "Ремонты", Истина);
		
		Если НайденнаяСтрока = Неопределено Тогда
			
			НовСтрокаОбъект = ПолучитьКореньДерева(ДеревоСГруппировкойПоВидуМероприятия).Строки.Добавить();
			НовСтрокаОбъект.Ремонты = ВыбранноеЗначение;
			НовСтрокаОбъект.НомерКартинки = 7;
			
			ЗначениеВРеквизитФормы(ДеревоСГруппировкойПоВидуМероприятия, "Дерево");
			Возврат Истина;
			
		Иначе
			Возврат Ложь;
		Конецесли;
	КонецЕсли;
КонецЕсли;

ЗаписатьДерево();

Модифицированность = Истина;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьИсполнителейЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

РезультатВыбора = РезультатЗакрытия;

Если РезультатВыбора <> Неопределено Тогда
	
	Объект.ПланРемонтов.Очистить();
	ЭтаФорма.Модифицированность = Истина;
	
	Для каждого Стр Из РезультатВыбора Цикл
		
		НС = Объект.ПланРемонтов.НайтиСтроки(Новый Структура());
		НС = Объект.ПланРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Стр);
		
	КонецЦикла; 
	
	ОбновитьДоступностьДляРедактирования();
	
	РассчитатьСтоимостиРемонтовНаСервере(); 
	
КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборСтрокВПланеРемонтов(ТекущаяСтрока)
	
	Если ГруппировкаПоМаршруту Тогда
		Если ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			СписокОР = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот", СписокОР, ТекущаяСтрока.Ремонты);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот, Замещен", СписокОР, ТекущаяСтрока.Ремонты, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			ВидМероприятия = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			СписокОР = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().Ремонты;
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот", СписокОР, ВидМероприятия);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот, Замещен", СписокОР, ВидМероприятия, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта", ТекущаяСтрока.Ремонты);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, Замещен", ТекущаяСтрока.Ремонты, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
		Иначе
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Неопределено;
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Истина;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
			
		КонецЕсли; 
	Иначе
		
		Если ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
			ВидМероприятия = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот", ТекущаяСтрока.Ремонты, ВидМероприятия);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот, Замещен", ТекущаяСтрока.Ремонты, ВидМероприятия, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			СписокОР = ТекущаяСтрока.ПолучитьРодителя().Ремонты;
			ВидМероприятия = ТекущаяСтрока.ПолучитьРодителя().ПолучитьРодителя().Ремонты;
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот", СписокОР, ВидМероприятия);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("СписокОбъектовРемонта, ВидРемонтныхРабот, Замещен", СписокОР, ВидМероприятия, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Ложь;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
			
		ИначеЕсли ТипЗнч(ТекущаяСтрока.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРемонтныхРабот", ТекущаяСтрока.Ремонты);
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРемонтныхРабот, Замещен", ТекущаяСтрока.Ремонты, Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Истина;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Ложь;
		Иначе
			Если Элементы.ПланРемонтовОтображатьЗамещенные.Пометка Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Неопределено;
			Иначе
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Ложь);
			КонецЕсли;
			Элементы.ПланРемонтовСписокОбъектовРемонта.Видимость = Истина;
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьСтрокиВПланеРемонтовПоID(РемонтыТекСтроки, РемонтыСтрокиРодителя = Неопределено)

// Данный блок операторов выясняет, нет ли строк в ДеревоПланаГрафикаППРСУчетомПозиции, у которых есть подчиненные
// строки в ПланРемонтов, которые должны быть заблокированы по ID строки из-за наличия связанных документов
// и также устанавливает флаг блокировки изменений для строки в ДеревоПланаГрафикаППРСУчетомПозиции.

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка,
|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID,
|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СписокОбъектовРемонта,
|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ВидРемонтныхРабот
|ИЗ
|	Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
|ГДЕ
|	торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка = &Ссылка
|	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID В (&ID)
|";
Если ТипЗнч(РемонтыТекСтроки) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
	Запрос.Текст = Запрос.Текст +	
	"	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СписокОбъектовРемонта = &СписокОбъектовРемонта
	|";
	Запрос.Текст = Запрос.Текст +			
	"	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ВидРемонтныхРабот = &ВидРемонтныхРабот
	|";
	Запрос.УстановитьПараметр("СписокОбъектовРемонта", РемонтыСтрокиРодителя);
	Запрос.УстановитьПараметр("ВидРемонтныхРабот", РемонтыТекСтроки);
ИначеЕсли ТипЗнч(РемонтыТекСтроки) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") и РемонтыСтрокиРодителя <> Неопределено Тогда
	
	Запрос.Текст = Запрос.Текст +	
	"	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.СписокОбъектовРемонта = &СписокОбъектовРемонта
	|";
	Запрос.УстановитьПараметр("СписокОбъектовРемонта", РемонтыТекСтроки);
КонецЕсли;
Запрос.Текст = Запрос.Текст + ";";

Запрос.УстановитьПараметр("ID", МассивIDДляБлокировки.ВыгрузитьЗначения());
Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);	

Результат = Запрос.Выполнить();
ТаблицаБлокируемых = Результат.Выгрузить();

Если ТаблицаБлокируемых.Количество() > 0 Тогда
	МодифицируемыйОбъектРемонта = Истина;
Иначе
	МодифицируемыйОбъектРемонта = Ложь;		
КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НайтиВДеревеМаршруты(Маршрут)
ДеревоСГруппировкойПоВидуМероприятия = РеквизитФормыВЗначение("Дерево");

МассивСтрок = ДеревоСГруппировкойПоВидуМероприятия.Строки.НайтиСтроки(Новый Структура("Ремонты", Маршрут), Истина);	
Если МассивСтрок.Количество() = 1 Тогда
	
	Возврат Истина;
	
Иначе
	
	Возврат Ложь;
	
КонецЕсли;

КонецФункции

&НаКлиенте
Процедура УдалитьИнформациюПоСтрокеДереваПланаГрафикаППР(СписокОР, ВидРемонта, ОчищатьОбъектыМероприятий, УдалятьСтрокиТЧМаршрутов = Ложь)

// Отбор строк в плане ремонтов по текущей строке
СтруктураОтбора = Новый Структура("СписокОбъектовРемонта, ВидРемонтныхРабот", СписокОР, ВидРемонта);

МассивСтрок = Объект.ПланРемонтов.НайтиСтроки(СтруктураОтбора);
Для Каждого Элемент Из МассивСтрок Цикл
	
	Объект.ПланРемонтов.Удалить(Элемент);
	
КонецЦикла; 

СтруктураОтбора = Новый Структура("СписокОбъектовРемонта, ВидМероприятия", СписокОР, ВидРемонта);

МассивСтрок = Объект.Маршруты.НайтиСтроки(СтруктураОтбора);
Для Каждого Элемент Из МассивСтрок Цикл
	
	Если УдалятьСтрокиТЧМаршрутов Тогда
		Объект.Маршруты.Удалить(Элемент);
	Иначе
		Если ГруппировкаПоМаршруту Тогда
			Элемент.ВидМероприятия = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
		Иначе
			Элемент.СписокОбъектовРемонта = ПредопределенноеЗначение("Справочник.торо_СписокОбъектовРегламентногоМероприятия.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
КонецЦикла;

Если ОчищатьОбъектыМероприятий Тогда
	МассивСтрок = Объект.ОбъектыМаршрутов.НайтиСтроки(Новый Структура("СписокОбъектовРемонта", СписокОР));
	Для Каждого Элемент Из МассивСтрок Цикл
		
		Объект.ОбъектыМаршрутов.Удалить(Элемент);
		
	КонецЦикла;
КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГантаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

Ответ = РезультатВопроса;

Если Ответ = КодВозвратаДиалога.Да Тогда
	
	Состояние("Построение диаграммы ремонтов Плана-графика...");
	ПостроитьДиаграммуГантаНаСервере();
	
КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПостроитьДиаграммуГантаНаСервере()

мДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования(Объект.ПериодичностьДетализации, Объект.КоличествоПериодов, Объект.ДатаПланирования);
ДеревоРемонтовОбъект = РеквизитФормыВЗначение("Дерево");
ОбновитьДоступностьДляРедактирования();

СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;
Если НЕ СортироватьПоНаименованию Тогда
	ТаблицаОР = Новый ТаблицаЗначений;
	ТаблицаОР.Колонки.Добавить("СписокОбъектовРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия"));
	ТаблицаОР.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	Сч = 1;
	Для каждого Элемент Из ДеревоРемонтовОбъект.Строки Цикл
		
		НС = ТаблицаОР.Добавить();
		НС.СписокОбъектовРемонта = Элемент.Ремонты;
		НС.НомерСтроки = Сч;
		Сч = Сч + 1;
		
	КонецЦикла; 
	
КонецЕсли;

ОтображатьЗамещенные = Истина;
ТаблицаПланРемонтовИсходная = ?(ОтображатьЗамещенные, Объект.ПланРемонтов.Выгрузить(), Объект.ПланРемонтов.Выгрузить(Новый Структура("Замещен",Ложь)));

Если Не ОтображатьЗамещенные Тогда
	Для Каждого СтрокаПланаРемонтов Из ТаблицаПланРемонтовИсходная Цикл
		Если Объект.ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка И СтрокаПланаРемонтов.ЗамещенСт Тогда
			СтрокаПланаРемонтов.ДатаНачСт = Дата(1,1,1);
			СтрокаПланаРемонтов.ДатаКонСт = Дата(1,1,1);
		КонецЕсли;
	КонецЦикла;
КонецЕсли;

ТаблицаПланРемонтовИсходная = ЗаполнитьДоступностьДляРедактирования(ТаблицаПланРемонтовИсходная);

Если НЕ СортироватьПоНаименованию Тогда 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.СписокОбъектовРемонта КАК ОбъектРемонтныхРабот,
	|	Таб.НомерСтроки
	|ПОМЕСТИТЬ ПорядокОР
	|ИЗ
	|	&Таб КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПланРемонтов.ID,
	|	ТабПланРемонтов.ОбъектРемонтныхРабот,
	|	ТабПланРемонтов.ВидРемонтныхРабот,
	|	ТабПланРемонтов.ДатаКон,
	|	ТабПланРемонтов.ДатаНач,
	|	ТабПланРемонтов.Отменен,
	|	ТабПланРемонтов.Замещен,
	|	ТабПланРемонтов.ДатаНачСт,
	|	ТабПланРемонтов.ДатаКонСт,
	|	ТабПланРемонтов.ЗамещенСт
	|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
	|ИЗ
	|	&ТаблицаРемонтов КАК ТабПланРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПланРемонтов.ID,
	|	ТабПланРемонтов.ОбъектРемонтныхРабот,
	|	ТабПланРемонтов.ВидРемонтныхРабот,
	|	ТабПланРемонтов.ДатаКон,
	|	ТабПланРемонтов.ДатаНач,
	|	ТабПланРемонтов.Отменен,
	|	ТабПланРемонтов.Замещен,
	|	ТабПланРемонтов.ДатаНачСт,
	|	ТабПланРемонтов.ДатаКонСт,
	|	ТабПланРемонтов.ЗамещенСт,
	|	ПорядокОР.НомерСтроки КАК НомерОР
	|ИЗ
	|	торо_ПланГрафикРемонтаПланРемонтов КАК ТабПланРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОР КАК ПорядокОР
	|		ПО ТабПланРемонтов.ОбъектРемонтныхРабот = ПорядокОР.ОбъектРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаПланРемонтовИсходная);
	Запрос.УстановитьПараметр("Таб", ТаблицаОР);
	ТаблицаПланРемонтовИсходная = Запрос.Выполнить().Выгрузить();
Иначе
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабПланРемонтов.ID,
	|	ТабПланРемонтов.СписокОбъектовРемонта КАК ОбъектРемонтныхРабот,
	|	ТабПланРемонтов.ВидРемонтныхРабот,
	|	ТабПланРемонтов.ДатаКон,
	|	ТабПланРемонтов.ДатаНач,
	|	ТабПланРемонтов.Отменен,
	|	ТабПланРемонтов.Замещен,
	|	ТабПланРемонтов.ДатаНачСт,
	|	ТабПланРемонтов.ДатаКонСт,
	|	ТабПланРемонтов.ЗамещенСт
	|ПОМЕСТИТЬ ТабПланРемонтов
	|ИЗ
	|	&ТабПланРемонтов КАК ТабПланРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПланРемонтов.ID,
	|	ТабПланРемонтов.ОбъектРемонтныхРабот,
	|	ТабПланРемонтов.ВидРемонтныхРабот,
	|	ТабПланРемонтов.ДатаКон,
	|	ТабПланРемонтов.ДатаНач,
	|	ТабПланРемонтов.Отменен,
	|	ТабПланРемонтов.Замещен,
	|	ТабПланРемонтов.ДатаНачСт,
	|	ТабПланРемонтов.ДатаКонСт,
	|	ТабПланРемонтов.ЗамещенСт
	|ИЗ
	|	ТабПланРемонтов КАК ТабПланРемонтов";
	Запрос.УстановитьПараметр("ТабПланРемонтов",ТаблицаПланРемонтовИсходная);
	ТаблицаПланРемонтовИсходная = Запрос.Выполнить().Выгрузить();
КонецЕсли;
ТаблицаПланРемонтовИсходная.Колонки.Добавить("ДокументППР", Новый ОписаниеТипов("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР"));
ТаблицаПланРемонтовИсходная.Колонки.Добавить("ЕстьДвиженияПоВЗ", Новый ОписаниеТипов("Булево"));
ТаблицаПланРемонтовИсходная.Колонки.Добавить("ДоступенДляРедактирования", Новый ОписаниеТипов("Булево"));
ТаблицаПланРемонтовИсходная.ЗаполнитьЗначения(Объект.Ссылка, "ДокументППР");
ТаблицаПланРемонтовИсходная.ЗаполнитьЗначения(ЛОЖЬ, "ЕстьДвиженияПоВЗ");
ТаблицаПланРемонтовИсходная.ЗаполнитьЗначения(ИСТИНА, "ДоступенДляРедактирования");

ТаблицаРемонтов = ТаблицаПланРемонтовИсходная;

торо_Ремонты.ПостроитьДиаграммуГантаДляППР(ДиаграммаГантаППР, ТаблицаРемонтов, СтруктураИерархии,,,Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка"), , , , ,СортироватьПоНаименованию);
ДиаграммаГантаППР.УстановитьПолныйИнтервал(НачалоДня(Объект.ДатаПланирования), КонецДня(мДатаОкончанияПланирования));
ДиаграммаГантаППР.ОтображатьЛегенду = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмеютсяДокументыНаОсновании(Ссылка)

Запрос = Новый Запрос;
Запрос.Текст = 
"ВЫБРАТЬ
|	торо_НарядНаРегламентноеМероприятиеДокументыОснования.Ссылка
|ИЗ
|	Документ.торо_НарядНаРегламентноеМероприятие.ДокументыОснования КАК торо_НарядНаРегламентноеМероприятиеДокументыОснования
|ГДЕ
|	торо_НарядНаРегламентноеМероприятиеДокументыОснования.ДокументОснование = &ДокументОснование
|	И НЕ торо_НарядНаРегламентноеМероприятиеДокументыОснования.Ссылка.ПометкаУдаления
|	И торо_НарядНаРегламентноеМероприятиеДокументыОснования.Ссылка.Проведен
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	торо_АктОВыполненииРегламентногоМероприятияДокументыОснования.Ссылка
|ИЗ
|	Документ.торо_АктОВыполненииРегламентногоМероприятия.ДокументыОснования КАК торо_АктОВыполненииРегламентногоМероприятияДокументыОснования
|ГДЕ
|	торо_АктОВыполненииРегламентногоМероприятияДокументыОснования.ДокументОснование = &ДокументОснование
|	И торо_АктОВыполненииРегламентногоМероприятияДокументыОснования.Ссылка.Проведен
|	И НЕ торо_АктОВыполненииРегламентногоМероприятияДокументыОснования.Ссылка.ПометкаУдаления";

Запрос.УстановитьПараметр("ДокументОснование", Ссылка);

Выборка = Запрос.Выполнить().Выбрать();

Возврат Выборка.Следующий();

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьправоДоступа()

Возврат ПравоДоступа("Изменение", Метаданные.Документы.торо_ГрафикРегламентныхМероприятийТОиР) 

КонецФункции

#Область Согласование

&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт

торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьДоступностьДляРедактирования(парамПланРемонтов)
Запрос = Новый Запрос;
Запрос.Текст = "ВЫБРАТЬ
|	торо_ПланГрафикРемонтаПланРемонтов.ID,
|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
|	торо_ПланГрафикРемонтаПланРемонтов.СписокОбъектовРемонта КАК ОбъектРемонтныхРабот,
|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт
|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
|ИЗ
|	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТаблицаДоступенДляРедакторования.ID,
|	ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования
|ПОМЕСТИТЬ ТаблицаДоступенДляРедакторования
|ИЗ
|	&ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	торо_ПланГрафикРемонтаПланРемонтов.ID,
|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
|	ЕстьNULL(ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования,Истина) КАК ДоступенДляРедактирования
|ИЗ
|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТаблицаДоступенДляРедакторования.ID";

Запрос.УстановитьПараметр("ПланРемонтов",парамПланРемонтов);
Запрос.УстановитьПараметр("ТаблицаДоступенДляРедакторования",МассивДоступныхДляКорректировкиСтрок.Выгрузить());

Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаКлиенте
// Процедура устанавливает внешний вид формы в зависимости от значения реквизита ВидОперации.
//
Процедура УстановитьВнешнийВидФормы()

ЭтоКорректировкаППР = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийПланаГрафикаППР.Корректировка");

Если ЭтоКорректировкаППР Тогда
	
	Элементы.ПериодСт.Видимость 	= Истина;
	
	Элементы.Период.Заголовок = НСтр("ru = 'Новый период'");
	ОтображатьЗамещенные = Ложь;
	Элементы.ПланРемонтовОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
	
Иначе
	
	Элементы.ПериодСт.Видимость 	= Ложь;
	
	Элементы.Период.Заголовок = НСтр("ru = 'Период'");
	
	ОтображатьЗамещенные = Истина;
	Элементы.ПланРемонтовОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
	
КонецЕсли; 

Элементы.ДокументОснование.Видимость	= ЭтоКорректировкаППР;
Элементы.ПланРемонтовОтменен.Видимость	= ЭтоКорректировкаППР;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеОпции(Опция)

Возврат ПолучитьФункциональнуюОпцию(Опция);

КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтоимостиРемонтовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

Если РезультатВопроса = КодВозвратаДиалога.Да тогда
	РассчитатьСтоимостиРемонтовНаСервере();
	Модифицированность = Истина;
КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостиРемонтовНаСервере(ТекущиеДанные = Неопределено)

ПланРемонтов = Документы.торо_ГрафикРегламентныхМероприятийТОиР.РассчитатьСтоимостиРемонтов(Объект.ПланРемонтов.Выгрузить(), Объект.Ссылка, МассивДоступныхДляКорректировкиСтрок.Выгрузить(), ТекущиеДанные);

Объект.ПланРемонтов.Загрузить(ПланРемонтов);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт

торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

фПослеОчистки = Ложь;
#КонецОбласти

