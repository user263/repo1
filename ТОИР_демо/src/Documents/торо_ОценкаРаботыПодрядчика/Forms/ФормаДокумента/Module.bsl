#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	КонецЕсли;

	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ДокОбъект.мВведенНаОснованииНепроведенного Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Создание документа возможно только на основании проведенного документа.'");
		Сообщение .Сообщить();
		
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если ДокОбъект.мБезИспользованияЛотов Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = "В системе отключена возможность использования лотов. Создание документа невозможно.";
		
		Отказ = Истина;
		
		Возврат;
		
	КонецЕсли;

	Элементы.ГрОбъектыРемонта.Видимость = Не Объект.ОценкаДляВсехРабот;
	
	Если ЗначениеЗаполнено(Объект.АктОВыполненииРабот) Тогда
	
		Элементы.Контрагент.Доступность = Истина;
		УстановитьПараметрыВыбораКонтрагентов();
		
	Иначе
		
		Элементы.Контрагент.Доступность = Ложь;
		
	КонецЕсли; 
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Не Объект.ОценкаДляВсехРабот И НЕ Элементы.ОбъектыРемонта.ТекущиеДанные = Неопределено Тогда
		
		Элементы.ОценкиПодрядчиков.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", Элементы.ОбъектыРемонта.ТекущиеДанные.ID);
		
	КонецЕсли;
	
	Если Не Элементы.ОценкиПодрядчиков.ТекущиеДанные = Неопределено Тогда
		
		Элементы.ПараметрыОценки.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидОценки, ID", Элементы.ОценкиПодрядчиков.ТекущиеДанные.ВидОценки, Элементы.ОценкиПодрядчиков.ТекущиеДанные.ID);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	СтрокиКУдалению = Новый Массив;
	
	Для каждого Строка из Объект.ОценкиПодрядчиков Цикл
		
		Если Не ЗначениеЗаполнено(Строка.ВидОценки) Тогда
			
			СтрокиКУдалению.Добавить(Строка.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Индекс Из СтрокиКУдалению Цикл
		
		Объект.ОценкиПодрядчиков.Удалить(Индекс);
		
	КонецЦикла;
	
	СтрокиКУдалению = Новый Массив;
	
	Для каждого Строка из Объект.ПараметрыОценки Цикл
		
		Если Не ЗначениеЗаполнено(Строка.КритерийОценки) Тогда
			
			СтрокиКУдалению.Добавить(Строка.ПолучитьИдентификатор());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Индекс Из СтрокиКУдалению Цикл
		
		Объект.ПараметрыОценки.Удалить(Индекс);
		
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура АктОВыполненииРаботНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораАктов();

КонецПроцедуры

&НаКлиенте
Процедура АктОВыполненииРаботПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.АктОВыполненииРабот) Тогда
		
		Элементы.Контрагент.Доступность = Истина;
		
	Иначе
		
		Элементы.Контрагент.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктОВыполненииРаботОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("АктОВыполненииРаботОчисткаЗавершение", ЭтотОбъект), НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаДляВсехРаботПриИзменении(Элемент)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОценкаДляВсехРаботПриИзмененииЗавершение", ЭтотОбъект), НСтр("ru = 'Табличные части оценок и критериев будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет); 
	
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьПараметрыВыбораКонтрагентов();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентОчисткаЗавершение", ЭтотОбъект), НСтр("ru = 'Табличные части будут очищены. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыРемонта
&НаКлиенте
Процедура ОбъектыРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			
			НайдСтроки = Объект.ОбъектыРемонта.НайтиСтроки(Новый Структура("ID", ЭлементМассива.ID));
			
			Если Не НайдСтроки.Количество() > 0 Тогда
			
				НС = Объект.ОбъектыРемонта.Добавить();
				
				ЗаполнитьЗначенияСвойств(НС, ЭлементМассива);
				НС.ID         = ЭлементМассива.ID;
				НС.ВидРемонта = ЭлементМассива.ВидРемонтныхРабот;
			
			КонецЕсли; 
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПриАктивизацииСтроки(Элемент)
		
	Если Не Объект.ОценкаДляВсехРабот И НЕ Элементы.ОбъектыРемонта.ТекущиеДанные = Неопределено Тогда
		
		Элементы.ОценкиПодрядчиков.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", Элементы.ОбъектыРемонта.ТекущиеДанные.ID);
		ОценкиПодрядчиковПриАктивизацииСтроки(Элемент);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередУдалением(Элемент, Отказ)
	
	Если Элементы.ОбъектыРемонта.ТекущиеДанные <> Неопределено Тогда
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ID", Элементы.ОбъектыРемонта.ТекущиеДанные.ID);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбъектыРемонтаПередУдалениемЗавершение", ЭтотОбъект, ДопПараметры), НСтр("ru = 'Данные в связанных табличных частях будут удалены. Продолжить?'"), РежимДиалогаВопрос.ДаНет); 
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОценки
&НаКлиенте
Процедура ПараметрыОценкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.ОценкиПодрядчиков.ТекущиеДанные = Неопределено Тогда
		
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите сначала вид оценки.'");
		Сообщение.Сообщить(); 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОценкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанныеПараметровОценки = Элементы.ПараметрыОценки.ТекущиеДанные;
	ТекущиеДанныеОценокПодрядчков = Элементы.ОценкиПодрядчиков.ТекущиеДанные;
	
	Если Не ОтменаРедактирования И НоваяСтрока Тогда
		Если Не ТекущиеДанныеПараметровОценки = Неопределено Тогда
			ТекущиеДанныеПараметровОценки.ВидОценки = ТекущиеДанныеОценокПодрядчков.ВидОценки;
			ТекущиеДанныеПараметровОценки.ID        = ТекущиеДанныеОценокПодрядчков.ID;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекущиеДанныеПараметровОценки <> Неопределено 
		И ЗначениеЗаполнено(ТекущиеДанныеПараметровОценки.ЗначениеОценокПоКритериям) Тогда
		
		ТекущиеДанныеПараметровОценки.ЗначениеОценокПоКритериям = Мин(ТекущиеДанныеПараметровОценки.ЗначениеОценокПоКритериям,10);
		
	КонецЕсли;
	
	Если Не ОтменаРедактирования И Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ID, ВидОценки, КритерийОценки", ТекущиеДанныеПараметровОценки.ID, ТекущиеДанныеПараметровОценки.ВидОценки, ТекущиеДанныеПараметровОценки.КритерийОценки)).Количество() > 1 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Данный критерий оценки уже был выбран! Выберите другой критерий оценки.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ПараметрыОценкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда

		ТекущиеДанныеОценокПодрядчков = Элементы.ОценкиПодрядчиков.ТекущиеДанные;
		
		ПараметрыВидаОценки = ПолучитьСтрокиМассиваСтруктурой(Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ВидОценки, ID",ТекущиеДанныеОценокПодрядчков.ВидОценки, ТекущиеДанныеОценокПодрядчков.ID)));

		ТекущиеДанныеОценокПодрядчков.Оценка = ПосчитатьОценку(ПараметрыВидаОценки);
		
	КонецЕсли;	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОценкиПодрядчиков
&НаКлиенте
Процедура ОценкиПодрядчиковПриАктивизацииСтроки(Элемент)
	
	Если Не Элементы.ОценкиПодрядчиков.ТекущиеДанные = Неопределено Тогда
		Если Не Объект.ОценкаДляВсехРабот Тогда
			Элементы.ПараметрыОценки.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидОценки, ID", Элементы.ОценкиПодрядчиков.ТекущиеДанные.ВидОценки, Элементы.ОценкиПодрядчиков.ТекущиеДанные.ID);
		Иначе
			Элементы.ПараметрыОценки.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидОценки", Элементы.ОценкиПодрядчиков.ТекущиеДанные.ВидОценки);
		КонецЕсли;	
	Иначе
		
		Элементы.ПараметрыОценки.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ID","---------------")); // чтобы отключить отбор
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если (Не Объект.ОценкаДляВсехРабот) И Элементы.ОбъектыРемонта.ТекущиеДанные = Неопределено Тогда
		
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите сначала вид ремонтных работ.'");
		Сообщение.Сообщить(); 
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования и НоваяСтрока И Не Объект.ОценкаДляВсехРабот Тогда
		
		Элемент.ТекущиеДанные.ID = Элементы.ОбъектыРемонта.ТекущиеДанные.ID;
		
	КонецЕсли;
	
	Если Не ОтменаРедактирования И Объект.ОценкиПодрядчиков.НайтиСтроки(Новый Структура("ID, ВидОценки", Элемент.ТекущиеДанные.ID, Элемент.ТекущиеДанные.ВидОценки)).Количество() > 1 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Данный вид оценки уже был выбран! Выберите другой вид оценки.'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ОценкиПодрядчиков.ТекущиеДанные;
	Если Не (Отказ Или ТекДанные = Неопределено) Тогда
		УдаляемыеСтроки = Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ID, ВидОценки", ТекДанные.ID, ТекДанные.ВидОценки));
		Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Объект.ПараметрыОценки.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкиПодрядчиковВидОценкиПриИзменении(Элемент)
	
	ОтборСтрокПараметров = Элементы.ПараметрыОценки.ОтборСтрок;
	ПредыдущийВидОценки = Неопределено;
	ОтборСтрокПараметров.Свойство("ВидОценки", ПредыдущийВидОценки);
	ТекДанные = Элементы.ОценкиПодрядчиков.ТекущиеДанные;
	
	Если Не (ПредыдущийВидОценки = Неопределено ИЛИ ТекДанные = Неопределено ИЛИ ПредыдущийВидОценки = ТекДанные.ВидОценки) Тогда
		ИзменяемыеСтроки = Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ID, ВидОценки", ТекДанные.ID, ПредыдущийВидОценки));
		Для каждого ИзменяемаяСтрока Из ИзменяемыеСтроки Цикл
			ИзменяемаяСтрока.ВидОценки = ТекДанные.ВидОценки;
		КонецЦикла;
		ОценкиПодрядчиковПриАктивизацииСтроки(Элементы.ОценкиПодрядчиков);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ДобавитьРемонты(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.АктОВыполненииРабот) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнено поле ""Акт о выполнении этапа работ"".'");
		Сообщение.Сообщить(); 
		
	ИначеЕсли Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не заполнено поле ""Контрагент"".'");
		Сообщение.Сообщить();	
		
	Иначе
		
		ОткрытьФорму("Обработка.торо_ВыборРемонтаИзПланГрафика.Форма",Новый Структура("СсылкаНаАкт, Контрагент", Объект.АктОВыполненииРабот, Объект.Контрагент), Элементы.ОбъектыРемонта,, ВариантОткрытияОкна.ОтдельноеОкно);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОценкаДляВсехРаботПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        Элементы.ГрОбъектыРемонта.Видимость = Не Объект.ОценкаДляВсехРабот;
        
        Объект.ПараметрыОценки.Очистить();
        Объект.ОценкиПодрядчиков.Очистить();
        
    Иначе
        
        Объект.ОценкаДляВсехРабот = Не Объект.ОценкаДляВсехРабот;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокиМассиваСтруктурой(ПараметрыВидаОценки)

	Массив = Новый Массив;
		
	Для каждого Элемент Из ПараметрыВидаОценки Цикл
		
		Структура = Новый Структура();
		
		Структура.Вставить("ID"                        , Элемент.ID);
		Структура.Вставить("КритерийОценки"            , Элемент.КритерийОценки);
		Структура.Вставить("ЗначениеОценокПоКритериям" , Элемент.ЗначениеОценокПоКритериям);		
		
		Массив.Добавить(Структура);
	
	КонецЦикла; 

	Возврат Массив;
	
КонецФункции // ПолучитьСтрокуСтруктурой()

&НаСервереБезКонтекста
Функция ПосчитатьОценку(ПараметрыВидаОценки)

	Сумма = 0;
	Количество = 0;
	
	
	Для Каждого Стр Из ПараметрыВидаОценки Цикл
		
		Сумма      = Сумма + (Стр.ЗначениеОценокПоКритериям * Стр.КритерийОценки.СтепеньВлияния);
		Количество = Количество + Стр.КритерийОценки.СтепеньВлияния;
				
	КонецЦикла;
	
	Если Количество <> 0 Тогда
		Возврат Сумма / Количество;
	Иначе
		Возврат 0;
	КонецЕсли;
	

КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораКонтрагентов()

	СписокКонтрагентов = ПолучитьСписокКонтрагентовИзАкта(Объект.АктОВыполненииРабот);
	
	НовыйМассив = Новый Массив();
	
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", СписокКонтрагентов);
	НовыйМассив.Добавить(НовыйПараметр);
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	
	Элементы.Контрагент.ПараметрыВыбора = НовыеПараметры;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокКонтрагентовИзАкта(СсылкаНаАкт)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Контрагент
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот.ПодрядчикиРемонтныхРабот КАК торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот
		|ГДЕ
		|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", СсылкаНаАкт);

	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();

	СписокЗначений = Новый СписокЗначений;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокЗначений.Добавить(ВыборкаДетальныеЗаписи.Контрагент);
	КонецЦикла;

	Возврат СписокЗначений;
	
КонецФункции

&НаСервере
Процедура УстановитьПараметрыВыбораАктов()

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Ссылка
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот.ПодрядчикиРемонтныхРабот КАК торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот
		|ГДЕ
		|	торо_АктОВыполненииЭтапаРаботПодрядчикиРемонтныхРабот.Ссылка.ЗавершитьРемонтныеРаботы = ИСТИНА";

	РезультатЗапроса = Запрос.Выполнить();

	ТЗРезультат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	НовыйМассив = Новый Массив();
	НовыйПараметр = Новый ПараметрВыбора("Отбор.Ссылка", ТЗРезультат);
	НовыйМассив.Добавить(НовыйПараметр);
	
	НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
	
	
	Элементы.АктОВыполненииРабот.ПараметрыВыбора  = НовыеПараметры;
	
	

КонецПроцедуры

&НаКлиенте
Процедура АктОВыполненииРаботОчисткаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        Объект.ПараметрыОценки.Очистить();
        Объект.ОценкиПодрядчиков.Очистить();
        Объект.ОбъектыРемонта.Очистить();
        Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
        Элементы.Контрагент.Доступность = Ложь;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОчисткаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        Объект.ПараметрыОценки.Очистить();
        Объект.ОценкиПодрядчиков.Очистить();
        Объект.ОбъектыРемонта.Очистить();
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыРемонтаПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        ID = ДополнительныеПараметры.ID;
        
        НайдСтрокиПараметровОценок = Объект.ПараметрыОценки.НайтиСтроки(Новый Структура("ID", ID));
        
        Для каждого Строка Из НайдСтрокиПараметровОценок Цикл
            
            Объект.ПараметрыОценки.Удалить(Строка);
            
        КонецЦикла;
        
        НайдСтрокиОценок = Объект.ОценкиПодрядчиков.НайтиСтроки(Новый Структура("ID", ID));
        
        Для каждого Строка Из НайдСтрокиОценок Цикл
            
            Объект.ОценкиПодрядчиков.Удалить(Строка);
            
        КонецЦикла;
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти  



