#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

Перем мВведенНаОснованииНепроведенного Экспорт; // Переменная хранит данные по документу основанию - проведен он или нет. 
Перем мБезИспользованияЛотов           Экспорт; // Хранит данные об использовании лотов
перем СтруктураДанных 				   Экспорт; // Структура, хранящая данные для работы с уведомлениями.
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если БезусловнаяЗапись = Истина
		ИЛИ ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	Отказ = ПроверкаСуществующихОценок();
	
	Если НЕ ЗначениеЗаполнено(АктОВыполненииРабот) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполненно поле ""Акт о выполнении этапа работ"".'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполненно поле ""Организация"".'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Не заполненно поле ""Контрагент"".'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры


Процедура ОбработкаПроведения(Отказ, Режим)
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("ОбъектыРемонта", "Объекты ремонта");
	СписокТЧ.Вставить("ОценкиПодрядчиков", "Оценки подрядчиков");
	СписокТЧ.Вставить("ПараметрыОценки", "Параметры оценки");
	торо_ОбщегоНазначения.ПроверитьЗаполненностьТабличныхЧастей(ЭтотОбъект, СписокТЧ, Отказ);
	Если отказ тогда возврат; КонецЕсли;	
	
	УстановитьУправляемыеБлокировки();

	Движения.торо_ОценкиПоПодрядчикам.Записывать          = Истина;
	Движения.торо_ОценкиПодрядчиковПоКритериям.Записывать = Истина;

	Если Не ОценкаДляВсехРабот Тогда
		
		Для Каждого ТекСтрокаОценкиПодрядчиков Из ОценкиПодрядчиков Цикл
			
			СтрокаОР = ОбъектыРемонта.Найти(ТекСтрокаОценкиПодрядчиков.ID,"ID");
			// регистр торо_ОценкиПоПодрядчикам 
			Движение = Движения.торо_ОценкиПоПодрядчикам.Добавить();
			Движение.Период                 = Дата;
			Движение.Контрагент             = Контрагент;
			Движение.Оценка                 = ТекСтрокаОценкиПодрядчиков.ВидОценки;
			Движение.ОбъектРемонта          = СтрокаОР.ОбъектРемонта;
			Движение.ВидРемонта             = СтрокаОР.ВидРемонта;
			Движение.Значение               = ТекСтрокаОценкиПодрядчиков.Оценка;
			Движение.РемонтыОборудования_ID = ТекСтрокаОценкиПодрядчиков.ID;
			
			
		КонецЦикла;
		
		Для Каждого ТекСтрокаОценкиПодрядчиков Из ПараметрыОценки Цикл
			
			СтрокаОР = ОбъектыРемонта.Найти(ТекСтрокаОценкиПодрядчиков.ID,"ID");
			// регистр торо_ОценкиПодрядчиковПоКритериям 
			
			Если СтрокаОР <> Неопределено Тогда
				Движение = Движения.торо_ОценкиПодрядчиковПоКритериям.Добавить();
				Движение.Период                 = Дата;
				Движение.Контрагент             = Контрагент;
				Движение.Оценка                 = ТекСтрокаОценкиПодрядчиков.КритерийОценки;
				Движение.ВидОценки              = ТекСтрокаОценкиПодрядчиков.ВидОценки;
				Движение.ОбъектРемонта          = СтрокаОР.ОбъектРемонта;
				Движение.ВидРемонта             = СтрокаОР.ВидРемонта;
				Движение.Значение               = ТекСтрокаОценкиПодрядчиков.ЗначениеОценокПоКритериям;
				Движение.РемонтыОборудования_ID = ТекСтрокаОценкиПодрядчиков.ID;
			КонецЕсли;
			
		КонецЦикла;

	Иначе
		
		МассивСтрокДляВсех = ОценкиПодрядчиков.НайтиСтроки(Новый Структура("ID",""));		
		Для Каждого СтрокаОР из АктОВыполненииРабот.РемонтыОборудования Цикл
			Для Каждого ТекСтрокаОценкиПодрядчиков Из МассивСтрокДляВсех Цикл
				
				// регистр торо_ОценкиПоПодрядчикам 
				Движение = Движения.торо_ОценкиПоПодрядчикам.Добавить();
				Движение.Период                 = Дата;
				Движение.Контрагент             = Контрагент;
				Движение.Оценка                 = ТекСтрокаОценкиПодрядчиков.ВидОценки;
				Движение.ОбъектРемонта          = СтрокаОР.ОбъектРемонта;
				Движение.ВидРемонта             = СтрокаОР.ВидРемонтныхРабот;
				
				Движение.Значение               = ТекСтрокаОценкиПодрядчиков.Оценка;
				
				Движение.РемонтыОборудования_ID = СтрокаОР.ID;
				
			
				Если Отказ Тогда
					Прервать;
				КонецЕсли;
				
				
			КонецЦикла;
			
		КонецЦикла;
		
		МассивСтрокДляВсех = ПараметрыОценки.НайтиСтроки(Новый Структура("ID",""));		
		Для Каждого СтрокаОР из АктОВыполненииРабот.РемонтыОборудования Цикл
			Для Каждого ТекСтрокаОценкиПодрядчиков Из МассивСтрокДляВсех Цикл
				
				// регистр торо_ОценкиПоПодрядчикам 
				Движение = Движения.торо_ОценкиПодрядчиковПоКритериям.Добавить();
				Движение.Период                 = Дата;
				Движение.Контрагент             = Контрагент;
				Движение.Оценка                 = ТекСтрокаОценкиПодрядчиков.КритерийОценки;
				Движение.ВидОценки              = ТекСтрокаОценкиПодрядчиков.ВидОценки;
				Движение.ОбъектРемонта          = СтрокаОР.ОбъектРемонта;
				Движение.ВидРемонта             = СтрокаОР.ВидРемонтныхРабот;
				
				Движение.Значение               = ТекСтрокаОценкиПодрядчиков.ЗначениеОценокПоКритериям;
				
				Движение.РемонтыОборудования_ID = СтрокаОР.ID;

			КонецЦикла;
			
		КонецЦикла;

	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения) И НЕ ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И НЕ ДанныеЗаполнения.Проведен Тогда
		мВведенНаОснованииНепроведенного=Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		
		Если НЕ Константы.торо_ИспользоватьЛоты.Получить() Тогда 
			мБезИспользованияЛотов=Истина;
			Возврат;		
		КонецЕсли;
		
		Организация         = ДанныеЗаполнения.Организация;
		АктОВыполненииРабот = ДанныеЗаполнения.Ссылка;		
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	// закрытие предписаний (по таблице ремонты оборудования)
	ЭлементБлокировки = Блокировка.Добавить("Документ.торо_ОценкаРаботыПодрядчика");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("АктОВыполненииРабот",АктОВыполненииРабот);
	ЭлементБлокировки.УстановитьЗначение("Контрагент",Контрагент);
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ПроверкаСуществующихОценок()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("АктОВыполненииРабот", АктОВыполненииРабот);
	Запрос.УстановитьПараметр("Контрагент"         , Контрагент);
	Запрос.УстановитьПараметр("Ссылка"             , Ссылка);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОценкаРаботыПодрядчика.Ссылка
	               |ИЗ
	               |	Документ.торо_ОценкаРаботыПодрядчика КАК торо_ОценкаРаботыПодрядчика
	               |ГДЕ
	               |	торо_ОценкаРаботыПодрядчика.АктОВыполненииРабот = &АктОВыполненииРабот
	               |	И торо_ОценкаРаботыПодрядчика.Контрагент = &Контрагент
	               |	И торо_ОценкаРаботыПодрядчика.Ссылка <> &Ссылка
	               |	И торо_ОценкаРаботыПодрядчика.Проведен";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Отказ = Ложь;
	
	Пока Выборка.Следующий() Цикл
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Уже существует документ оценки работы подрядчика с заданным актом и контрагентом.'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЦикла;
	
	Возврат Отказ;
	
КонецФункции



мВведенНаОснованииНепроведенного = Ложь;
мБезИспользованияЛотов           = Ложь;
#КонецОбласти

#КонецЕсли