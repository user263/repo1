////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем МероприятиеУдаляется;

&НаКлиенте
Перем СтруктураДанныхДоРедактирования;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		СсылкаНаДок = Параметры.Основание;
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(СсылкаНаДок,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		
		ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(СсылкаНаДок);
		Неотмененный = торо_ЗаполнениеДокументов.ВернутьIDНеотмененногоРемонтаВРегламентныхМероприятиях(СсылкаНаДок);
		
		Если ИмяТЧ <> Неопределено И (СсылкаНаДок[ИмяТЧ].Количество() = 1 ИЛИ Неотмененный <> "") Тогда
			СоответствиеИДДокументам = Новый Соответствие;
			Если Неотмененный <> "" Тогда
			    СоответствиеИДДокументам.Вставить(Неотмененный, СсылкаНаДок);
			Иначе	
				СоответствиеИДДокументам.Вставить(СсылкаНаДок[ИмяТЧ][0].ID, СсылкаНаДок);
			КонецЕсли; 
			СоответствиеИДДокументам.Вставить(Неотмененный, СсылкаНаДок);   
			торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(СоответствиеИДДокументам, Объект);
		КонецЕсли; 
	КонецЕсли; 
	
	Если Параметры.Свойство("РабочееМесто") Тогда
		Если ТипЗнч(Параметры.РабочееМесто) = Тип("Соответствие") Тогда
			торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(Параметры.РабочееМесто, Объект);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	УстановитьУсловноеОформление();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
		
		СлужебныеРеквизитыЗаполнитьНаСервере();
		
	КонецЕсли;
	
	ЗаполнитьДеревоРемонтныхРаботНаСервере();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабМероприятияОбъектов.ОбъектРемонта,
	|	ТабМероприятияОбъектов.Мероприятие_ID КАК ID
	|ПОМЕСТИТЬ ТабМероприятияОбъектов
	|ИЗ
	|	&ТабМероприятияОбъектов КАК ТабМероприятияОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабМероприятияОбъектов.ID,
	|	ТабМероприятияОбъектов.ОбъектРемонта
	|ИЗ
	|	ТабМероприятияОбъектов КАК ТабМероприятияОбъектов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыполненныеМероприятияОбъектов КАК торо_ВыполненныеМероприятияОбъектов
	|		ПО ТабМероприятияОбъектов.ОбъектРемонта = торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта
	|			И ТабМероприятияОбъектов.ID = торо_ВыполненныеМероприятияОбъектов.ID
	|ГДЕ
	|	НЕ торо_ВыполненныеМероприятияОбъектов.Регистратор = &Регистратор";
	
	Запрос.УстановитьПараметр("ТабМероприятияОбъектов", Объект.МероприятияОбъектов.Выгрузить());
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Результат = Запрос.Выполнить();
	
	ТаблицаОбъектовРемонта.Загрузить(Результат.Выгрузить());
	
	ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов");
	Элементы.ДеревоРемонтныхРаботВыполнено.Видимость = НЕ ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов;
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_АктОВыполненииРегламентногоМероприятия;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента, Истина);
	// Согласование --
	
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, УстановитьСвойствоЭлементовФормыОтПрав",Истина, Истина));
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла;
	
	ОбщееВремяВыполнения        = СформироватьПродолжительность(Объект.ОбщееВремяВыполнения);
	
	ОбновитьДокументыВнутреннегоПотребленияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.Мероприятия.Количество() = 0 И Объект.ДокументыОснования.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.Мероприятия.Количество() > 0 Тогда
		РемОборудования = Объект.Мероприятия[0].ID;
		НайденныеСтрокиМатериала = Объект.МатериальныеЗатраты.НайтиСтроки( Новый Структура("РемонтыОборудования_ID", РемОборудования )); 
		НайденныеСтрокиМероприятия = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", РемОборудования ));
		Если НайденныеСтрокиМероприятия.Количество() <> 0 И НайденныеСтрокиМатериала.Количество() = 0 Тогда
			НомерСтроки = НайденныеСтрокиМероприятия[0].ПолучитьИдентификатор();
			ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, НомерСтроки);
			ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, НомерСтроки);
		КонецЕсли; 
	КонецЕсли;
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	Массив = Новый Массив;
	Массив.Добавить("ДокументыОснования");
	торо_СобытияФормКлиент.ЗаполнитьСтруктуруДанныхДоРедактирования(СтруктураДанныхДоРедактирования,Массив);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Для Каждого Строка Из Объект.Мероприятия Цикл
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке номер %1 списка мероприятий дата начала периода ремонтных работ больше даты окончания (%2 - %3). Документ не записан!'"),
				Строка.НомерСтроки,Строка.ДатаНачала,Строка.ДатаОкончания));
			Отказ = Истина;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла;
	
	ОбщееВремяВыполнения        = СформироватьПродолжительность(Объект.ОбщееВремяВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	Оповестить("СозданДокументЧерезРМТехСпец", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
		Если ТекДанныеРемРаб = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	
		ИмяТЧ = "МатериальныеЗатраты";
		ИмяРеквизита = "Номенклатура";
		СтруктураСтрокиОпераций = Новый Структура("РемонтыОборудования_ID, ID, Количество", ТекДанныеРемРаб.РемонтыОборудования_ID, ТекДанныеРемРаб.ID, ТекДанныеРемРаб.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
		
	Иначе
		ДеревоРемонтныхРаботОбработкаВыбора(, ВыбранноеЗначение, );
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("СтрокаРемонтовОборудования") Тогда
			УстановкаМатериалов(ВыбранноеЗначение, Объект);
		КонецЕсли;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
			Для каждого Элемент Из ВыбранноеЗначение Цикл
				УстановкаМатериалов(Элемент, Объект);
			КонецЦикла; 
		КонецЕсли;  
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	
	Если ИмяСобытия = "РабочееМестоТехСпец" Тогда
		
		Объект.Организация = Параметр.Организация;
		Объект.Подразделение = Параметр.Подразделение;
		Для каждого Элем Из Параметр.МассивСтруктур Цикл
			ДеревоРемонтныхРаботОбработкаВыбора(, Элем, );
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРемонтныеРаботыПриИзменении(Элемент)
	
	Если Объект.ЗавершитьРемонтныеРаботы Тогда
		Элементы.МероприятияЗавершитьРемонт.Видимость = Ложь;
		Элементы.МероприятияЗавершитьРемонт.Доступность = Ложь;
		
		Если Объект.Мероприятия.Количество() <> 0 Тогда
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				Стр.ПроцентВыполненияРабот = 100;
				Стр.Выполнено = Истина;
				
				ПроставитьГалкиВВетке(Стр, Истина, 100);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Стр Из Объект.РемонтныеРаботы Цикл
			
			Стр.ПроцентВыполненияРабот = 100;
			Стр.Выполнено = Истина;
			
		КонецЦикла; 
		
		Для каждого Стр Из Объект.Мероприятия Цикл
			
			Стр.ЗавершитьРемонт = Истина;	
			
		КонецЦикла; 
		
	Иначе
		Элементы.МероприятияЗавершитьРемонт.Видимость = Истина;
		Элементы.МероприятияЗавершитьРемонт.Доступность = Истина;
		
		Если Объект.Мероприятия.Количество() <> 0 Тогда
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				Стр.ПроцентВыполненияРабот = 0;
				Стр.Выполнено = Ложь;
				
				ПроставитьГалкиВВетке(Стр, Ложь, 0);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого Стр Из Объект.РемонтныеРаботы Цикл
			
			Стр.ПроцентВыполненияРабот = 0;
			Стр.Выполнено = Ложь;
			
		КонецЦикла;
		
		Для каждого Стр Из Объект.Мероприятия Цикл
			
			Стр.ЗавершитьРемонт = Ложь;
			
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СогласующиеРегистр.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение",ЭтотОбъект,Новый Структура("Элемент",Элемент)),
		НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;		
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееВремяВыполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(Объект.ОбщееВремяВыполнения,Элемент,Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбщееВремяВыполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбщееВремяВыполнения        = СформироватьПродолжительность(ВыбранноеЗначение);
	Объект.ОбщееВремяВыполнения = ВыбранноеЗначение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты
&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		//
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	

	Если НЕ НоваяСтрока ИЛИ (НоваяСтрока И Не ОтменаРедактирования) Тогда
		ТекСтрокаНоменклатура = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Номенклатура,ХарактеристикаНоменклатуры",
		ТекСтрокаНоменклатура.ID,
		ТекСтрокаНоменклатура.РемонтыОборудования_ID, 
		ТекСтрокаНоменклатура.Номенклатура,
		ТекСтрокаНоменклатура.ХарактеристикаНоменклатуры);
		
		Если Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
			Если ЗначениеЗаполнено(СтруктураПоиска.ХарактеристикаНоменклатуры) Тогда
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для технологической операции номенклатура %1 с характеристикой %2 уже добавлена!'"),
					СтруктураПоиска.Номенклатура,СтруктураПоиска.ХарактеристикаНоменклатуры);
			Иначе
				ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для технологической операции номенклатура %1 уже добавлена!'"),
					СтруктураПоиска.Номенклатура);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);	
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоЕдиницПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодрядчикиРемонтныхРабот
&НаКлиенте
Процедура ПодрядчикиРемонтныхРаботПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	ТекСтрокаИсполнитель = Элементы.ПодрядчикиРемонтныхРабот.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Контрагент",
	ТекСтрокаИсполнитель.ID,
	ТекСтрокаИсполнитель.РемонтыОборудования_ID, 
	ТекСтрокаИсполнитель.Контрагент);
	
	Если Объект.ПодрядчикиРемонтныхРабот.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя указать одного исполнителя дважды для одного ремонта или операции!'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодрядчикиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для ремонтов!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"), ТекстПредупреждения, Отказ);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты

&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	//ТекСтрокаИсполнитель = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	//СтруктураПоиска = Новый Структура("ID,РемонтыОборудования_ID,Сотрудник",
	//ТекСтрокаИсполнитель.ID,
	//ТекСтрокаИсполнитель.РемонтыОборудования_ID, 
	//ТекСтрокаИсполнитель.Сотрудник);
	//
	//Если Объект.ТрудовыеЗатраты.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
	//	ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя указать одного исполнителя дважды для одного ремонта или операции!'"));
	//	Отказ = Истина;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(ТекущиеДанные.ВремяРаботы,Элемент,Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
		ТекущиеДанные.ВремяРаботы      = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьИсполнителей(ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот
&НаКлиенте
Процедура ДеревоРемонтныхРаботПроцентВыполненияРаботПриИзменении(Элемент)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаДерева.ПроцентВыполненияРабот = мин(100, ТекСтрокаДерева.ПроцентВыполненияРабот);
	ТекСтрокаДерева.Выполнено = (ТекСтрокаДерева.ПроцентВыполненияРабот = 100);
	СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
	
	
	ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
	
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	
	строка = ВыполнитьПоискПоДереву(СтруктураСтроки);
	Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = строка.ПолучитьИдентификатор();
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПоискПоДереву(СтруктураСтроки)
	
	Для каждого СтрокаДерева из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> СтрокаДерева[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат СтрокаДерева;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Функция РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, СтрокаДерева)
	
	Для каждого Подстрока из СтрокаДерева.ПолучитьЭлементы() Цикл
		Соответствие = Истина;
		Для каждого ЭлементСтруктуры из СтруктураСтроки Цикл
			Если ЭлементСтруктуры.Значение <> Подстрока[ЭлементСтруктуры.Ключ] Тогда
				Соответствие = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Соответствие Тогда
			Возврат Подстрока;
		КонецЕсли;
		
		Результат = РекурсивныйПоискПоСтрокеДерева(СтруктураСтроки, Подстрока); 
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.Мероприятия.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
	Иначе
		РемонтыОборудования_ID = "";
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID", РемонтыОборудования_ID, СтрокаРодитель.ID, СтрокаРодитель.РемонтыОборудования_ID, СтрокаРодитель.Родитель_ID);
	СтруктураПараметры = Новый Структура;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивСтруктурВозврата = ДеревоРемонтныхРаботОбработкаВыбораНаСервереДляМассива(ВыбранноеЗначение, ТекущиеДанные, СтруктураПараметры);
	Иначе		
		СтруктураВозврата = ДеревоРемонтныхРаботОбработкаВыбораНаСервере(ВыбранноеЗначение, ТекущиеДанные, СтруктураПараметры);
		МассивСтруктурВозврата = Новый Массив;
		МассивСтруктурВозврата.Добавить(СтруктураВозврата);
	КонецЕсли;
	
	Для Каждого СтруктураВозврата Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(СтруктураВозврата) = Тип("Строка") Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтруктураВозврата);
		ИначеЕсли ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				РазвернутьДеревоРемонтныхРабот(Строка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Массивстрок = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", ВыбранноеЗначение.СтрокаРемонтовОборудования.ID));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.Мероприятия.ТекущаяСтрока = Идентиф;
		КонецЕсли;
	КонецЕсли;
	
	МероприятияПриАктивизацииСтроки(Элементы.Мероприятия);	
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла;
	
	Модифицированность = Истина;
	
	Если ЗначениеЗаполнено(ИДВыбраннойСтроки) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ДеревоРемонтныхРабот.ПолучитьЭлементы(), ИДВыбраннойСтроки, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот = Новый Структура("РемонтныеРаботы");
	Если НЕ ЗначениеЗаполнено(ТекСтрокаДРР.Родитель_ID) И ТекСтрокаДРР.РемонтнаяРабота = "Ремонтные работы" Тогда
		
		ТекСтрокаДРР.ПолучитьЭлементы().Очистить();
		Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот Цикл
			
			Объект[КлючИЗначение.Ключ].Очистить();
			
		КонецЦикла;
		
		Модифицированность = Истина;
		
		Отказ = Истина;
	Иначе
		
		СтруктурыДляПередачи = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота",
		ТекСтрокаДРР.ID, ТекСтрокаДРР.РемонтыОборудования_ID, ТекСтрокаДРР.Родитель_ID, ТекСтрокаДРР.РемонтнаяРабота);
		УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи);
	КонецЕсли;
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Для каждого Строка Из ЭлементыДереваРемРабот Цикл
		Элементы.ДеревоРемонтныхРабот.Развернуть(Строка.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботВыполненоПриИзменении(Элемент)
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекСтрокаДерева.ПроцентВыполненияРабот = ?(ТекСтрокаДерева.Выполнено, 100, 0);
	СтруктураСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	СтрокаРодДерева = ТекСтрокаДерева.ПолучитьРодителя();
	Если Не СтрокаРодДерева = Неопределено Тогда
		СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", ТекСтрокаДерева.ID, ТекСтрокаДерева.РемонтыОборудования_ID, ТекСтрокаДерева.Родитель_ID);
	Иначе
		СтруктураРодСтроки = Неопределено;
	КонецЕсли;
	
	Если НЕ ТекСтрокаДерева = Неопределено Тогда 
		МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураСтроки);
		Если МассивСтрок.Количество() Тогда
			МассивСтрок[0].Выполнено = ТекСтрокаДерева.Выполнено;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки);
	
	ОбновитьПроцентВыполненияВСтрокахТЧ(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0]);
	
	Если ТекСтрокаДерева.Выполнено Тогда
		
		Сумма = 0;
		КоличествоСтрок = 0;
		
		Для каждого Стр Из Объект.РемонтныеРаботы Цикл
			
			Сумма = Сумма + Стр.ПроцентВыполненияРабот;
			КоличествоСтрок = КоличествоСтрок + 1;
			
		КонецЦикла; 
		
		Если КоличествоСтрок = 0 Тогда
			Если Объект.РемонтыОборудования.Количество() <= 1 Тогда
				Объект.ЗавершитьРемонтныеРаботы = Истина;
				Элементы.РемонтыОборудованияЗавершитьРемонт.Видимость = Ложь;
				Элементы.РемонтыОборудованияЗавершитьРемонт.Доступность = Ложь;	
			Иначе
				МасСтр = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Элементы.РемонтыОборудования.ТекущиеДанные.ID));
				Если МасСтр.Количество() > 0 Тогда
					МасСтр[0].ЗавершитьРемонт = Истина;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Рез = Сумма / КоличествоСтрок;
			Если Рез <> 100 Тогда
				
				Для каждого Стр Из Объект.Мероприятия Цикл
					флВсеРемонтныеРаботыЗавершены = Истина;
					МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Стр.ID));
					Для каждого Элем Из МассивСтрок Цикл
						Если Элем.ПроцентВыполненияРабот <> 100 Тогда 
							флВсеРемонтныеРаботыЗавершены = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если флВсеРемонтныеРаботыЗавершены Тогда
						Стр.ЗавершитьРемонт = Истина;
					КонецЕсли;
				КонецЦикла;
				
			Иначе
				Объект.ЗавершитьРемонтныеРаботы = Истина;
				Элементы.МероприятияЗавершитьРемонт.Видимость = Ложь;
				Элементы.МероприятияЗавершитьРемонт.Доступность = Ложь;
				Для каждого Стр Из Объект.Мероприятия Цикл
					Стр.ЗавершитьРемонт = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.ЗавершитьРемонтныеРаботы = Ложь;
		Элементы.МероприятияЗавершитьРемонт.Видимость = Истина;
		Элементы.МероприятияЗавершитьРемонт.Доступность = Истина;
		Если НЕ Элементы.Мероприятия.ТекущиеДанные = Неопределено Тогда
			МасСтр = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", Элементы.Мероприятия.ТекущиеДанные.ID));
			Если МасСтр.Количество() > 0 Тогда
				МасСтр[0].ЗавершитьРемонт = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого Строка Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		УстановитьОтборСтрокПоЗатратам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество = 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		
		КоличествоБуфер = ?(СтрТЧ.Количество = 0, 1, СтрТЧ.Количество);
		Коэффициент = ТекСтрока.Количество / КоличествоБуфер;
		СтрТЧ.Количество = ТекСтрока.Количество;
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекСтрока, Коэффициент);
		
	КонецЕсли;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМероприятия
&НаКлиенте
Процедура МероприятияПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда 	
		ЗаполнитьДеревоРемонтныхРаботНаСервере(Элементы.Мероприятия.ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		
		Если ТекДанные.ЗавершитьРемонт Тогда
			Строки = ДеревоРемонтныхРабот.ПолучитьЭлементы();
			Строки[0].ПроцентВыполненияРабот = 100;
			Строки[0].Выполнено = Истина;
		КонецЕсли;	
		
		Элементы.МероприятияОбъектов.ОтборСтрок = Новый ФиксированнаяСтруктура("Мероприятие_ID", Элементы.Мероприятия.ТекущиеДанные.ID);
		
	Иначе
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		Элементы.МероприятияОбъектов.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПередУдалением(Элемент, Отказ)
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Если НЕ МероприятиеУдаляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("МероприятияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Строки = Элемент.ВыделенныеСтроки;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого идСтрока из Строки Цикл
			
			текСтрока = Объект.Мероприятия.НайтиПоИдентификатору(идСтрока);
			
			ОчиститьСвязанныеТабличныеЧасти(, , текСтрока.ID);
			МероприятиеУдаляется = Истина;
			
			Объект.Мероприятия.Удалить(текСтрока);
			
			МероприятиеУдаляется = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияЗавершитьРемонтПриИзменении(Элемент)
	ТекДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		Если ТекДанные.ЗавершитьРемонт Тогда
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				
				Стр.ПроцентВыполненияРабот = 100;
				Стр.Выполнено = Истина;
				
				ПроставитьГалкиВВетке(Стр, Истина, 100);
				
			КонецЦикла; 
			
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекДанные.ID));
			
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ПроцентВыполненияРабот = 100;
				Стр.Выполнено = Истина;
				
			КонецЦикла; 
			
			ФлВсеРемонтыЗавершены = Истина;
			
			Для каждого Стр Из Объект.Мероприятия Цикл
				Если НЕ Стр.ЗавершитьРемонт Тогда
					ФлВсеРемонтыЗавершены = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ФлВсеРемонтыЗавершены Тогда 
				Объект.ЗавершитьРемонтныеРаботы = Истина;
				Элементы.МероприятияЗавершитьРемонт.Видимость = Ложь;
				Элементы.МероприятияЗавершитьРемонт.Доступность = Ложь;
			КонецЕсли;
			
		Иначе
			
			Для каждого Стр Из ДеревоРемонтныхРабот.ПолучитьЭлементы() Цикл
				
				Стр.ПроцентВыполненияРабот = 0;
				Стр.Выполнено = Ложь;
				
				ПроставитьГалкиВВетке(Стр, Ложь, 0);
				
			КонецЦикла; 
			
			Объект.ЗавершитьРемонтныеРаботы = Ложь;
			
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекДанные.ID));
			
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ПроцентВыполненияРабот = 0;
				Стр.Выполнено = Ложь;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМероприятияОбъектов
&НаКлиенте
Процедура МероприятияОбъектовОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура МероприятияОбъектовОбъектРемонтаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыВнутреннееПотребление
&НаКлиенте
Процедура ДокументыВнутреннееПотреблениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ВнутреннееПотребление);
		ОписаниеОповещения  = Новый ОписаниеОповещения("ОбновитьДокументыВнутреннегоПотребления",ЭтаФорма);
		ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыВнутреннееПотреблениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.Мероприятия.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЭлементТекДанные  = Элемент.ТекущиеДанные;
		Если Не ЭлементТекДанные = Неопределено Тогда
			ЭлементТекДанные.РемонтыОборудования_ID = ТекущиеДанные.ID;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДоступныеТипы = ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере();	
	Если ДоступныеТипы=Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДокументыОснованияДокументОснование.ОграничениеТипа =ДоступныеТипы;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			Сообщение.Сообщить();
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда 
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				Сообщение.Сообщить();
			Иначе
				СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
				Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
					Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
					СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)   	
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", Новый Структура("ОтборПоСтатусам, МножественныйВыбор", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"), Истина), Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот", 
		Новый Структура("Владелец", Объект.Ссылка), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	ФормаПодбора.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьСтатус(Команда)
	
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьВнутреннееПотребление(Команда)
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	
	Если Не ТекущийРемонт = Неопределено Тогда
		
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКСписаниюНаСервере(ТекущийРемонт.ID);
		
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			
			// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.			
			МассивСтрокНоменклатуры = Новый Массив;
			
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("МассивСтрокНоменклатуры",МассивСтрокНоменклатуры);
		
		СтруктураПараметров.Вставить("Комментарий" , Строка(Объект.Ссылка) + " " + ТекущийРемонт.ОбъектРемонта + " " + 
		ТекущийРемонт.ВидРемонтныхРабот + " " + ТекущийРемонт.ДатаНачала + " - " + 
		ТекущийРемонт.ДатаОкончания);
		
		СтруктураПараметров.Вставить("КлючНазначенияИспользования", "СОЗДАНИЕ_ПОТРЕБЛЕНИЯ_ИЗ_ТОИР");
		
		СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
		СтруктураПередаваемыхВОбработчикПараметров.Вставить("ТекущийРемонт_ID",ТекущийРемонт.ID);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов",ЭтаФорма,СтруктураПередаваемыхВОбработчикПараметров);
		ОткрытьФорму("Документ.ВнутреннееПотреблениеТоваров.Форма.ФормаДокумента",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьДокументВнутреннееПотребление(Команда)
	
	ТекущиеДанные = Элементы.ДокументыВнутреннееПотребление.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПотреблениеСсылка",ТекущиеДанные.ВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"               ,ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,НСтр("ru = 'Удаление связи с заказом на внутреннее потребление'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТрудоемкости(Команда)
	
	Объект.ОбщееВремяВыполнения = Объект.ТрудовыеЗатраты.Итог("ВремяРаботы");
	ОбщееВремяВыполнения        = СформироватьПродолжительность(Объект.ОбщееВремяВыполнения);
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.ТрудовыеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
				
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ВсеРемонты(Команда)
	
	Если Объект.ТрудовыеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.ТрудовыеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ТрудовыеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьИсполнителейПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "ТрудовыеЗатраты");
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаления = Новый Массив;
	Для каждого Строка из Объект.МатериальныеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаления = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	Если МассивСтрокДляУдаления.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", МассивСтрокДляУдаления);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ВсеРемонты(Команда)
	
	Если Объект.МатериальныеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаления", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Материальные затраты"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьМатериалыПоНормам_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМатериалыПоНормам_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаления) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаления Цикл
				Объект.МатериальныеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.МатериальныеЗатраты.Очистить();
		КонецЕсли;
		ЗаполнитьМатериалыПоНормамНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоНормамНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьМатериалыПоНормам(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта, "МатериальныеЗатраты");
	
КонецПроцедуры


&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ТекущаяОперация(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	ТекущаяОперация = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекущаяОперация = Неопределено 
		ИЛИ ТипЗнч(ТекущаяОперация.РемонтнаяРабота) = Тип("Строка") Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбрана ремонтная работа.'"));
		Возврат;
	КонецЕсли;
	
	МасивОперацийДляОтбора = Новый Массив;
	МасивОперацийДляОтбора.Добавить(ТекущаяОперация);
	торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасивОперацийДляОтбора, ТекущаяОперация.ПолучитьЭлементы());
	
	МасивIDДляОтбора = Новый Массив;
	Для каждого СтрокаОперации из МасивОперацийДляОтбора Цикл
		МасивIDДляОтбора.Добавить(СтрокаОперации.ID);
	КонецЦикла;
	
   МассивСтрокДляУдаленияПодрядчики = Новый Массив;
	Для каждого Строка из Объект.ПодрядчикиРемонтныхРабот Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияПодрядчики.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	МассивСтрокДляУдаленияИсполнители = Новый Массив;
	Для каждого Строка из Объект.ТрудовыеЗатраты Цикл
		Если Строка.РемонтыОборудования_ID = ТекущийРемонт.ID 
			И МасивIDДляОтбора.Найти(Строка.ID) <> Неопределено Тогда
			МассивСтрокДляУдаленияИсполнители.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;

	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", ТекущаяОперация.ПолучитьИдентификатор());
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ТекущаяОперация.ПолучитьИдентификатор(), ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеОперации(Команда)
	
	ТекущийРемонт = Элементы.Мероприятия.ТекущиеДанные;
	Если ТекущийРемонт = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбран ремонт.'"));
		Возврат;
	КонецЕсли;
	
	МассивСтрокДляУдаленияПодрядчики = Объект.ПодрядчикиРемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	МассивСтрокДляУдаленияИсполнители = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ТекущийРемонт.ID));
	
	Если МассивСтрокДляУдаленияПодрядчики.Количество() > 0 
		ИЛИ МассивСтрокДляУдаленияИсполнители.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", МассивСтрокДляУдаленияПодрядчики);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", МассивСтрокДляУдаленияИсполнители);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", ТекущийРемонт.ПолучитьИдентификатор());
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, ТекущийРемонт.ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ВсеРемонты(Команда)
	
	Если Объект.ПодрядчикиРемонтныхРабот.Количество() > 0 
		ИЛИ Объект.ТрудовыеЗатраты.Количество() > 0 Тогда
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("МассивСтрокДляУдаленияПодрядчики", Объект.ПодрядчикиРемонтныхРабот);
		ДопПараметры.Вставить("МассивСтрокДляУдаленияИсполнители", Объект.ТрудовыеЗатраты);
		ДопПараметры.Вставить("ИДТекущейОперации", Неопределено);
		ДопПараметры.Вставить("ИДТекущегоРемонта", Неопределено);
		
		ТекстВопроса = НСтр("ru = 'Данные в таблице ""Исполнители"" будут перезаписаны. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьИсполнителейПоОснованию_ПослеВопроса", ЭтаФорма, ДопПараметры); 
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьИсполнителейПоОснованиюНаСервере(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьИсполнителейПоОснованию_ПослеВопроса(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияПодрядчики Цикл
				Объект.ПодрядчикиРемонтныхРабот.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ПодрядчикиРемонтныхРабот.Очистить();
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители) = Тип("Массив") Тогда
			Для каждого СтрокаДляУдаления из ДополнительныеПараметры.МассивСтрокДляУдаленияИсполнители Цикл
				Объект.ТрудовыеЗатраты.Удалить(СтрокаДляУдаления);
			КонецЦикла;
		Иначе
			Объект.ТрудовыеЗатраты.Очистить();
		КонецЕсли;
		
		ЗаполнитьИсполнителейПоОснованиюНаСервере(ДополнительныеПараметры.ИДТекущейОперации, ДополнительныеПараметры.ИДТекущегоРемонта);
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителейПоОснованиюНаСервере(ИДТекущейОперации, ИДТекущегоРемонта)
	
	торо_Ремонты.ЗаполнитьИсполнителейПоОснованию(ЭтаФорма, ИДТекущейОперации, ИДТекущегоРемонта);
	
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = СформироватьПродолжительность(Строка.ВремяРаботы);
	КонецЦикла;
	
КонецПроцедуры



&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора",, Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляДокумента(Команда)
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.ТрудовыеЗатраты);
	стрПараметров.Вставить("ВидПодбора", "ПоДокументу");
	стрПараметров.Вставить("ID", Неопределено);
	стрПараметров.Вставить("РемонтыОборудования_ID", Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.ТрудовыеЗатраты,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоБригадамДляОперации(Команда)
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.Мероприятия.ТекущиеДанные;
	
	Если ТекСтрокаДереваРемонтов = Неопределено тогда
		ID_Отбора = Неопределено;
	Иначе
		МасИД = Новый Массив;
		ID_Отбора = Новый Массив;
		торо_РаботаССогласованиямиКлиентСервер.ЗаполнитьМассивИзДерева(МасИД, ТекСтрокаДереваРемонтов.ПолучитьЭлементы());
		ID_Отбора.Добавить(ТекСтрокаДереваРемонтов.ID);
		
		Для каждого текСтрока из МасИД цикл
			ID_Отбора.Добавить(текСтрока.ID);
		КонецЦикла;
	КонецЕсли;
	
	ID_ОтбораРемонтов = ?(ТекСтрокаРемонтовОборудования = Неопределено, Неопределено, ТекСтрокаРемонтовОборудования.ID);
	
	стрПараметров = Новый Структура;
	стрПараметров.Вставить("Подразделение", Объект.Подразделение);
	стрПараметров.Вставить("НеобходимыеКвалификации", Объект.ТрудовыеЗатраты);
	стрПараметров.Вставить("ВидПодбора", "ПоОперации");
	стрПараметров.Вставить("ID", ID_Отбора);
	стрПараметров.Вставить("РемонтыОборудования_ID", ID_ОтбораРемонтов);
	
	ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораИсполнителей", стрПараметров, Элементы.ТрудовыеЗатраты,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах)
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " мин. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьХарактеристикиИспользуются(Номенклатура)
	
	Возврат НЕ Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать = Номенклатура.ИспользованиеХарактеристик;
	
КонецФункции

&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.МатериальныеЗатраты,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	
	// Согласование++
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияСтатусДокумента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияСогласующий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияЗамещающий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивНоменклатурыКСписаниюНаСервере(ID)
	
	УжеСписаннаяНоменклатура = ПолучитьТаблицуСписаннойНоменклатурыНоменклатуры(ID);
	
	НоменклатураКЗаказу = Объект.МатериальныеЗатраты.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
	
	НоменклатураКЗаказу.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоЕдиниц");
	
	Товары = Новый Массив;
	
	Для каждого Строка Из НоменклатураКЗаказу Цикл
		
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеСписаннаяНоменклатура.Количество() > 0 Тогда
			НайдСтроки = УжеСписаннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры));
			
			
			Если Не НайдСтроки = Неопределено Тогда
				Для каждого НайденнаяСтрока Из НайдСтроки Цикл
					КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если УжеСписаннаяНоменклатура.Количество() = 0
			ИЛИ Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			Структура = Новый Структура("Номенклатура, Характеристика, Количество",
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			(Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры));
			Товары.Добавить(Структура);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуСписаннойНоменклатурыНоменклатуры(ID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаказыНаВнутреннееПотребление.Номенклатура,
	|	ЗаказыНаВнутреннееПотребление.Характеристика,
	|	СУММА(ЗаказыНаВнутреннееПотребление.КОформлению) КАК Количество
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|		ПО торо_ИнтеграцияДокументов.ДокументЕРП = ЗаказыНаВнутреннееПотребление.Регистратор
	|ГДЕ
	|	торо_ИнтеграцияДокументов.ID = &ID
	|	И торо_ИнтеграцияДокументов.ДокументТОИР = &ДокументТОИР
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотребление.Характеристика,
	|	ЗаказыНаВнутреннееПотребление.Номенклатура";
	
	Запрос.УстановитьПараметр("ID"           ,ID);
	Запрос.УстановитьПараметр("ДокументТОИР" , Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов(Результат, ДополнительныеПараметры) Экспорт
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры)
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ИнтеграцияДокументов.ДокументЕРП
		|ИЗ
		|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		|ГДЕ
		|	торо_ИнтеграцияДокументов.ID = &ID
		|	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
		|	И торо_ИнтеграцияДокументов.ДокументЕРП  = &СсылкаНаДокЕРП";
		
		Запрос.УстановитьПараметр("ID"             , ДополнительныеПараметры.ТекущийРемонт_ID);
		Запрос.УстановитьПараметр("Ссылка"         , Объект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП" , ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.ТекущийРемонт_ID, Объект.Ссылка, ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ID, ДокументТОИР, ДокументЕРП)
	
	Если Не ДокументЕРП = Документы.ВнутреннееПотреблениеТоваров.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		Запись.ID           = ID;
		Запись.ДокументТОИР = ДокументТОИР;
		Запись.ДокументЕРП  = ДокументЕРП;
		Запись.Записать();
		ОбновитьДокументыВнутреннегоПотребленияСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыВнутреннегоПотребления(Парам1 = Неопределено, Парам2 = Неопределено)	Экспорт
	ОбновитьДокументыВнутреннегоПотребленияСервер(Парам1, Парам2);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыВнутреннегоПотребленияСервер(Парам1 = Неопределено, Парам2 = Неопределено)	
	
	МассивID = Объект.Мероприятия.Выгрузить(,"ID");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ИнтеграцияДокументов.ДокументЕРП КАК ВнутреннееПотребление,
	|	ВЫБОР
	|		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	
	|	торо_ИнтеграцияДокументов.ID
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|ГДЕ
	|	торо_ИнтеграцияДокументов.ID В(&ID)
	|	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ВнутреннееПотреблениеТоваров)";
	
	Запрос.УстановитьПараметр("ID", МассивID);
	
	ДокументыВнутреннееПотребление.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнПотребления(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Помечен = ПометитьПотреблениеНаСервере(ДополнительныеПараметры);
		Если ТипЗнч(Помечен) <> Тип("Булево") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = Помечен;
			Сообщение.Сообщить(); 
		КонецЕсли; 
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ПометитьПотреблениеНаСервере(СтруктураПараметров)
	
	Попытка
		
		ОбъектПотребление = СтруктураПараметров.ПотреблениеСсылка.ПолучитьОбъект();
		
		Если ОбъектПотребление.Проведен Тогда
			ОбъектПотребление.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектПотребление.ПометкаУдаления = Истина;
		ОбъектПотребление.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ID           = СтруктураПараметров.ID;
		МенеджерЗаписи.ДокументЕРП  = СтруктураПараметров.ПотреблениеСсылка;
		МенеджерЗаписи.ДокументТОИР = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
		
		ОбновитьДокументыВнутреннегоПотребленияСервер();
		
	Исключение
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции


&НаСервере
Процедура ЗаполнитьДеревоРемонтныхРаботНаСервере(РемонтыОборудования_ID = Неопределено)
	
	ДеревоСФормы = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	ДеревоСФормы.Строки.Очистить();
	
	КорневаяСтрока = ДеревоСФормы.Строки.Добавить();
	КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";	
	КорневаяСтрока.Картинка = 4;
	
	Если Не РемонтыОборудования_ID = Неопределено Тогда
		ТЗРемонтныеРаботы = Объект.РемонтныеРаботы.Выгрузить(Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID)));
	Иначе
		ТЗРемонтныеРаботы = Неопределено;
	КонецЕсли;
	
	СоздатьВетвьДереваПоТЧ(КорневаяСтрока, ТЗРемонтныеРаботы);
	
	СтруктураРодСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
	торо_Ремонты.РасставитьПроцентыРодительскихСтрок(ДеревоСФормы, СтруктураРодСтроки);
	
	ЗначениеВРеквизитФормы(ДеревоСФормы, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаСервере
Процедура СоздатьВетвьДереваПоТЧ(СтрокаДерева, ТЧРемонтныеРаботы = Неопределено, ЕстьКартинка = Истина)
	
	Если Объект.РемонтныеРаботы.Количество() > 0 И ЗначениеЗаполнено(Объект.РемонтныеРаботы[0].ID) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Родитель_ID", СтрокаДерева.ID);
		
		Если ТЧРемонтныеРаботы = Неопределено Тогда
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		Иначе
			МассивСтрок = ТЧРемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		Для Каждого Элемент Из МассивСтрок Цикл
			
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Элемент);
			
			Если ЕстьКартинка Тогда  
				НовСтрокаДерева.Картинка = торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(Элемент.РемонтнаяРабота);
			КонецЕсли;
			
			СоздатьВетвьДереваПоТЧ(НовСтрокаДерева, ТЧРемонтныеРаботы, ЕстьКартинка);
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивID(МассивID,ЭлементДерева)
	МассивID.Добавить(ЭлементДерева.ID);
	Для Каждого ЭлементДерева1 Из ЭлементДерева.ПолучитьЭлементы() Цикл
		ЗаполнитьМассивID(МассивID,ЭлементДерева1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаСервере
Функция ДеревоРемонтныхРаботОбработкаВыбораНаСервере(ТехОперация, ТекущиеДанные, СтруктураПараметры)
	
	Если ТипЗнч(ТехОперация) = Тип("Структура") И Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", ТехОперация.СтрокаРемонтовОборудования.ID)).Количество() = 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	&МероприятиеID КАК ID,
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта,
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта.ИнвентарныйНомер КАК ИнвНомер,
		|	торо_МаршрутыРегламентныхМероприятий.ОбъектРемонта.ТехНомер КАК ТехНомер
		|ПОМЕСТИТЬ ТабОР
		|ИЗ
		|	РегистрСведений.торо_МаршрутыРегламентныхМероприятий КАК торо_МаршрутыРегламентныхМероприятий
		|ГДЕ
		|	торо_МаршрутыРегламентныхМероприятий.СписокОбъектов = &СписокОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабОР.ID,
		|	ВЫБОР
		|		КОГДА торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьВыпМероприятия,
		|	ТабОР.ОбъектРемонта,
		|	ТабОР.ЗаводскойНомер,
		|	ТабОР.ИнвНомер,
		|	ТабОР.ТехНомер
		|ИЗ
		|	ТабОР КАК ТабОР
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыполненныеМероприятияОбъектов КАК торо_ВыполненныеМероприятияОбъектов
		|		ПО ТабОР.ID = торо_ВыполненныеМероприятияОбъектов.ID
		|			И ТабОР.ОбъектРемонта = торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта";
		
		Запрос.УстановитьПараметр("СписокОбъектов", ТехОперация.СтрокаРемонтовОборудования.ОбъектРемонта);
		Запрос.УстановитьПараметр("МероприятиеID", ТехОперация.СтрокаРемонтовОборудования.ID);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НС = Объект.МероприятияОбъектов.Добавить();
			ЗаполнитьЗначенияСвойств(нс, выборка);
			НС.ОбъектРемонта = Выборка.ОбъектРемонта;
			НС.Мероприятие_ID = Выборка.ID;
			НС.Выполнено = НЕ Выборка.ЕстьВыпМероприятия;
			
			Если Выборка.ЕстьВыпМероприятия
				И не ТаблицаОбъектовРемонта = Неопределено Тогда
				НС = ТаблицаОбъектовРемонта.Добавить();
				НС.ID = Выборка.ID;
				НС.ОбъектРемонта = Выборка.ОбъектРемонта;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ТехОперация, ДокОбъект, ДокОбъект.Мероприятия, ДокОбъект.РемонтныеРаботы, ДокОбъект.ДокументыОснования, ТекущиеДанные, СтруктураПараметры, ДокОбъект.ТрудовыеЗатраты, ДокОбъект.ПодрядчикиРемонтныхРабот);
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
		ЗначениеВРеквизитФормы(СтруктураВозврата.ДокументОбъект, "Объект");
		ЗначениеВРеквизитФормы(СтруктураВозврата.Дерево, "ДеревоРемонтныхРабот");
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		Возврат Истина;
	ИначеЕсли ТипЗнч(СтруктураВозврата) = Тип("Строка") Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
КонецФункции

// Функция добавлена для обработки выбора сразу нескольких тех операций или тех карт.
&НаСервере
Функция ДеревоРемонтныхРаботОбработкаВыбораНаСервереДляМассива(МассивТехОпераций, ТекущиеДанные, СтруктураПараметры)
		
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	МассивВозврата = Новый Массив;
	СтруктураПоследнегоДобавленного = Неопределено;
	
	Для Каждого ТехОперация Из МассивТехОпераций Цикл
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонта(ДеревоРеквизит, ТехОперация, ДокОбъект, ДокОбъект.Мероприятия, ДокОбъект.РемонтныеРаботы, ДокОбъект.ДокументыОснования, ТекущиеДанные, СтруктураПараметры, ДокОбъект.ТрудовыеЗатраты, ДокОбъект.ПодрядчикиРемонтныхРабот);
		Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			СтруктураПоследнегоДобавленного = СтруктураВозврата;
		ИначеЕсли ТипЗнч(СтруктураВозврата) = Тип("Строка") Тогда
			МассивВозврата.Добавить(СтруктураВозврата);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтруктураПоследнегоДобавленного <> Неопределено Тогда
		ЗначениеВРеквизитФормы(СтруктураВозврата.ДокументОбъект, "Объект");
		ЗначениеВРеквизитФормы(СтруктураВозврата.Дерево, "ДеревоРемонтныхРабот");
		ЗаполнитьДеревоРемонтныхРаботНаСервере();		
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаСервере
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("МатериальныеЗатраты");
	СтруктураТабличныхЧастей.Вставить("ТрудовыеЗатраты");
	СтруктураТабличныхЧастей.Вставить("ПодрядчикиРемонтныхРабот");
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.Мероприятия.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.Мероприятия.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			СтрокиМО = Объект.МероприятияОбъектов.НайтиСтроки(Новый Структура("Мероприятие_ID", ОчереднаяСтрока.ID));
			
			Для каждого СтрокаМО Из СтрокиМО Цикл
				Объект.МероприятияОбъектов.Удалить(СтрокаМО);
			КонецЦикла;
			
			Объект.Мероприятия.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
		
		Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
			Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
				Объект.РемонтныеРаботы.Очистить();
			КонецЕсли
		КонецЕсли;
		
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		
		Если Объект.РемонтныеРаботы.Количество() = 0 Тогда
			Объект.РемонтныеРаботы.Добавить();
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Объект.РемонтныеРаботы[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				
				Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
					
					СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", СтрокаРР.ID));
					
					Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
						Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
		СтрокиМО = Объект.МероприятияОбъектов.НайтиСтроки(Новый Структура("Мероприятие_ID", Ремонт_ID));
		
		Для каждого СтрокаМО Из СтрокиМО Цикл
			Объект.МероприятияОбъектов.Удалить(СтрокаМО);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
		Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
			Объект.РемонтныеРаботы.Очистить();
		КонецЕсли
	КонецЕсли;
	
	ЗаполнитьДеревоРемонтныхРаботНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьДанныеТЧПоIDСтрокиДереваНаСервере(СтруктурыДляПередачи)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Дерево = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	торо_Ремонты.УдалитьДанныеТабличныхЧастейПоIDСтрокиДерева(Дерево, СтруктурыДляПередачи, ДокОбъект, Новый Структура("РемонтныеРаботы, МатериальныеЗатраты"));
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРемонтныхРабот");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеЗначенийКоличестваИлиУпаковки(ТекущиеДанные, ИзменениеКоличестваЕдиниц = Ложь)
	
	КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиНаСервере(ТекущиеДанные.ЕдиницаИзмерения);	
	
	Если КоэффициентУпаковки = 0 Тогда
		КоэффициентУпаковки = 1;
	КонецЕсли; 
	
	Если ИзменениеКоличестваЕдиниц Тогда
		
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоЕдиниц / КоэффициентУпаковки;
		
	Иначе	
		
		ТекущиеДанные.КоличествоЕдиниц = ТекущиеДанные.Количество * КоэффициентУпаковки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	
	Возврат Упаковка.Коэффициент;
	
КонецФункции

&НаКлиенте
// Процедура устанавливает отбор строк табличных полей затрат по строке  дерева ремонтных работ.
//
Процедура УстановитьОтборСтрокПоЗатратам()
	
	ТекСтрокаДереваРемонтов = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.Мероприятия.ТекущиеДанные;
	
	ID_Отбора = ТекСтрокаДереваРемонтов.ID;
	
	Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
		ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
		
		// Материальные затраты.
		Элементы.МатериальныеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
		// Трудовые затраты.
		Элементы.ТрудовыеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
		// Исполнители ремонтных работ.
		Элементы.ПодрядчикиРемонтныхРабот.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
		
	Иначе
		
		// Материальные затраты.
		Элементы.МатериальныеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
		// Трудовые затраты.
		Элементы.ТрудовыеЗатраты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
		// Исполнители ремонтных работ.
		Элементы.ПодрядчикиРемонтныхРабот.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьГалкиВВетке(Строка, ЗначФлага, ЗначПроцента)
	
	Для каждого Стр Из Строка.ПолучитьЭлементы() Цикл
		
		Стр.ПроцентВыполненияРабот = ЗначПроцента;
		Стр.Выполнено = ЗначФлага;
		
		ПроставитьГалкиВВетке(Стр, ЗначФлага, ЗначПроцента);
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура выполняет заполнение процентов выполнения ремонтных работ.
//
// Параметры
//  СтрокаДерева – строка дерева ремонтных работ.
//
Процедура ЗаполнитьПроцентВыполненияРемонтныхРаботВСтрокахДерева(СтруктураСтроки, СтруктураРодСтроки)
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	торо_Ремонты.РасставитьПроцентыПодчиненныхСтрок(ДеревоОбъект, СтруктураСтроки);
	
	Если НЕ СтруктураРодСтроки = Неопределено Тогда	
		торо_Ремонты.РасставитьПроцентыРодительскихСтрок(ДеревоОбъект, СтруктураРодСтроки);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоРемонтныхРабот");
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьПроцентВыполненияВСтрокахТЧ(СтрокаДерева)
	
	Если ЗначениеЗаполнено(СтрокаДерева.ID) Тогда
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ID",СтрокаДерева.ID);
		СтруктураПоиска.Вставить("Родитель_ID",СтрокаДерева.Родитель_ID);
		СтруктураПоиска.Вставить("РемонтыОборудования_ID",СтрокаДерева.РемонтыОборудования_ID);
		
		СтрокиРемРаботы = Объект.РемонтныеРаботы.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиРемРаботы.Количество() <> 0 Тогда
			СтрокиРемРаботы[0].ПроцентВыполненияРабот = СтрокаДерева.ПроцентВыполненияРабот;
			СтрокиРемРаботы[0].Выполнено = ?(СтрокаДерева.ПроцентВыполненияРабот = 100, Истина, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ТекСтрокаДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		ОбновитьПроцентВыполненияВСтрокахТЧ(ТекСтрокаДерева);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоРемонтныхРабот(Родитель)
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(Родитель.ПолучитьИдентификатор());
	Для Каждого Строка Из Родитель.ПолучитьЭлементы() Цикл
		РазвернутьДеревоРемонтныхРабот(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере()
	Возврат торо_СобытияФорм.ДокументыОснованияДокументОснованиеНачалоВыбора(ЭтаФорма);	
КонецФункции

&НаКлиенте
// Процедура выполняет пересчет затрат по количеству операций.
//
Процедура ПересчитатьЗатратыПоКоличеству(ID, Коэффициент)
	
	МассивСтрокМЗ = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	Для Каждого СтрокаТЧ Из МассивСтрокМЗ Цикл
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество * Коэффициент;
		СтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.КоличествоЕдиниц * Коэффициент;
		
	КонецЦикла; 
	
	МассивСтрокТЗ = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	Для Каждого СтрокаТЧ Из МассивСтрокТЗ Цикл
		
		СтрокаТЧ.ВремяРаботы = СтрокаТЧ.ВремяРаботы * Коэффициент;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	РемонтыОборудования_ID = СтруктураСтроки.РемонтыОборудования_ID;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, ID, Номенклатура, ХарактеристикаНоменклатуры", РемонтыОборудования_ID, ID, текСтрока.Номенклатура, текСтрока.Характеристика);
			
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			нс.Количество = текСтрока.КоличествоУпаковок * ?(ЗначениеЗаполнено(нс.Единицаизмерения), 1, КоэфУпаковкиВыбр);
			нс.КоличествоЕдиниц = нс.Количество * КоэфУпаковкиВыбр;
		
			нс.ID = ID;
			нс.РемонтыОборудования_ID = РемонтыОборудования_ID;
			
		Иначе
			
			нс = НайС[0];
			
			КоэфУпаковкиСтар = ?(ЗначениеЗаполнено(нс.ЕдиницаИзмерения), нс.ЕдиницаИзмерения.Коэффициент, 1);
			КоличествоЕдиниц = (нс.Количество*КоэфУпаковкиСтар + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр);
			нс.Количество = КоличествоЕдиниц / КоэфУпаковкиВыбр;
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			
			нс.КоличествоЕдиниц = КоличествоЕдиниц;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнителей(Адрес)
	
	Если Адрес = Неопределено Тогда возврат; КонецЕсли;
	
	тз = ПолучитьИзВременногоХранилища(Адрес);
	
	стрОтбора = Новый Структура("РемонтыОборудования_ID, ID, Квалификация");
	Для каждого текСтрока из Тз Цикл
		ЗаполнитьЗначенияСвойств(стрОтбора, текСтрока);
		НайС = Объект.ТрудовыеЗатраты.НайтиСтроки(стрОтбора);
		
		Для каждого ТезЗапись из НайС Цикл
			пДатаНачала = ТезЗапись.ДатаНачала;
			пДатаОкончания = ТезЗапись.ДатаОкончания;
			Объект.ТрудовыеЗатраты.Удалить(ТезЗапись);
			Модифицированность = Истина;
		КонецЦикла;
		
		нс = Объект.ТрудовыеЗатраты.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока,,"ДатаНачала,ДатаОкончания");
		нс.ДатаНачала = пДатаНачала;
		нс.ДатаОкончания = пДатаОкончания;
	КонецЦикла;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДокОсн = Элементы.ДокументыОснования.текущиеДанные.ДокументОснование;
	ФОИспользоватьСтатусыДокументов = ПолучитьЗначениеФОНаСервере("торо_ИспользоватьСтатусыДокументовТОиР");
	
	Если ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВыявленныеДефекты.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ПланГрафикРемонта.ФормаВыбора",Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
    ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаРегламентноеМероприятие.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ФормаВыбора",Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);		
	ИначеЕсли ДокОсн = Неопределено Тогда 
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = СформироватьСписокВыбораНаСервере();
		
		СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение",ЭтотОбъект, Новый Структура("Элемент, ФОИспользоватьСтатусыДокументов", Элемент, ФОИспользоватьСтатусыДокументов)),НСтр("ru = 'Выбор типа данных'"));
	
	КонецЕсли;
	
	Если ДокОсн <> Неопределено Тогда
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ФОИспользоватьСтатусыДокументов = ДополнительныеПараметры.ФОИспользоватьСтатусыДокументов;
	ВыбЭлемент = ВыбранныйЭлемент;
	
	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВыявленныеДефекты.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ПланГрафикРемонта.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаРегламентноеМероприятие.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект)
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеФОНаСервере(ИмяФО)
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяФО);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСписокВыбораНаСервере()
	
	СписокВыбора = Новый СписокЗначений;
	
	Для каждого ТипОснования Из Метаданные.Документы.торо_АктОВыполненииРегламентногоМероприятия.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.Типы() Цикл
		СписокВыбора.Добавить(ТипОснования);
	КонецЦикла;
	
	// Строки добавлены для учета настроек ввода на основании
	НаборЗаписейВводНаОсновании = РегистрыСведений.торо_ВводНаОсновании.СоздатьНаборЗаписей();
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Значение = "торо_АктОВыполненииРегламентногоМероприятия";
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Использование = Истина;
	НаборЗаписейВводНаОсновании.Прочитать();
	
	Для каждого ЗаписьРегистр из НаборЗаписейВводНаОсновании Цикл
		Если НЕ ЗаписьРегистр.Значение Тогда
			СтрокаЛишняя = СписокВыбора.НайтиПоЗначению(Тип("ДокументСсылка."+ЗаписьРегистр.ДокументОснование));		
			Если СтрокаЛишняя <> Неопределено Тогда
				СписокВыбора.Удалить(СтрокаЛишняя);	
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ввод данного документа на основании запрещен настройками ввода на основании.
		|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интерфейс и ввод документов.'"));
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура ТрудовыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущиеДанные.КТУ = 1;
			
			Если Не ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) И Не ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Тогда
				СтрокаРемонта = Элементы.Мероприятия.ТекущиеДанные;
				ТекущиеДанные.ДатаНачала = СтрокаРемонта.ДатаНачала;
				ТекущиеДанные.ДатаОкончания = СтрокаРемонта.ДатаОкончания;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановкаМатериалов(ВыбранноеЗначение, Объект)
	РемОборудования = ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
	НайденныеСтрокиМатериала = Объект.МатериальныеЗатраты.НайтиСтроки( Новый Структура("РемонтыОборудования_ID", РемОборудования )); 
	НайденныеСтрокиМероприятия = Объект.Мероприятия.НайтиСтроки(Новый Структура("ID", РемОборудования ));
	Если НайденныеСтрокиМероприятия.Количество() <> 0 И НайденныеСтрокиМатериала.Количество() = 0 Тогда
		НомерСтроки = НайденныеСтрокиМероприятия[0].ПолучитьИдентификатор();
		ЗаполнитьМатериалыПоНормамНаСервере(Неопределено, НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры


фПослеОчистки = Ложь;
МероприятиеУдаляется = Ложь;
#КонецОбласти

