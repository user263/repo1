
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										 // из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
								
Перем ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов;
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР")
		ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда	
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("ДокументыОснования", "Документы основания");
	СписокТЧ.Вставить("РемонтныеРаботы", "Ремонтные работы");
	СписокТЧ.Вставить("Мероприятия", "Мероприятия");
	торо_ОбщегоНазначения.ПроверитьЗаполненностьТабличныхЧастей(ЭтотОбъект, СписокТЧ, Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Согласование++
	
	// Проверим использование статусов документов.
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_АктОВыполненииРегламентногоМероприятия;
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента, Истина);
	
	Если мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	// Согласование--

	
	Если Мероприятия.Количество() = 0 Тогда
		
		Отказ = Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнены ремонтые работы! Нет объектов ремонта!'"));
		Возврат;
		
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = Строка(Ссылка);
	
	// Проверка заполнения табличных частей.
	ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(РемонтныеРаботы, Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(Отказ, Заголовок);
	
	ПроверитьДатуДокумента(Отказ, Заголовок);
	
	Если Не Отказ Тогда
		
		ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
		
	КонецЕсли;
	
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовОснований(Ссылка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	торо_РаботаСоСтатусамиДокументовСервер.ОчиститьСогласованиеПриКопировании(ЭтотОбъект);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияМероприятий.торо_АктОВыполненииРегламентногоМероприятия;
		торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства, Истина, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ПроверитьДатуДокумента(Отказ, Заголовок)
	
	МассивОснований = ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	СписокДатОснований = Новый СписокЗначений;
	Для Каждого Основание Из МассивОснований Цикл
		СписокДатОснований.Добавить(Основание.Дата);
	КонецЦикла;
	СписокДатОснований.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Если Дата<СписокДатОснований[0].Значение Тогда
		СтрокаСообщения = НСтр("ru = 'Дата документа меньше даты документа-основания!'");
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтныеРаботы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоТоварам        - таблица значений, содержащая данные для проведения и проверки ТЧ Товары
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(ТаблицаРемонтныхРабот, Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РемонтнаяРабота");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтныеРаботы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонта,ВидРемонтныхРабот,ДатаНачала,ДатаОкончания");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Мероприятия", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ДокументыОснования".
//
// Параметры: 
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиПоДокументамОснованиям(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ДокументыОснования";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");
	
	// Теперь вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	Если Не Отказ Тогда
		Для Каждого СтрокаТЧ Из ДокументыОснования Цикл
			Если НЕ СтрокаТЧ.ДокументОснование.Проведен Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Акт можно вводить только на основании проведенного документа (строка № %1).'"),
					СтрокаТЧ.НомерСтроки));
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиТовары()

// Проверяет правильность заполнения строк табличной части "МатериальныеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ, Заголовок)
	
	ИмяТабличнойЧасти = "ДокументыОснования";
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Теперь вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "МатериальныеЗатраты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты()

Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
	// Движения по регистрам.
	Если Не Отказ Тогда
		
		ТаблицаПроведения = ПодготовитьТаблицуПроведения();
		ТаблицаМатериальныхЗатрат 	= ПодготовитьТаблицуМатериальныхЗатрат(ТаблицаПроведения);
		ТаблицаТрудовыхЗатрат		= ПодготовитьТаблицуТрудовыхЗатрат(ТаблицаПроведения);

		
		// Движение по регистру "торо_ЗавершенныеМероприятия".
		ДвиженияПоРегистру_торо_ЗавершенныеМероприятия(РежимПроведения, Отказ, Заголовок);
		
		// Движение по регистру "торо_ВыполненныеМероприятияОбъектов".
		ДвиженияПоРегистру_торо_ВыполненныеМероприятияОбъектов(РежимПроведения, Отказ, Заголовок);
		
		// Движения по регистру сведений торо_Ремонты
		Движения.торо_Ремонты.Записывать = Истина;
		Для Каждого СтрРемонта Из Мероприятия Цикл
			
			Движение = Движения.торо_Ремонты.Добавить();
			Движение.Период 			= МоментВремени().Дата;
			Движение.ID 				= СтрРемонта.ID;
			Движение.ОбъектРемонта 		= СтрРемонта.ОбъектРемонта;
			Движение.ВидРемонта			= СтрРемонта.ВидРемонтныхРабот;
			Движение.ДатаНачалаФакт		= СтрРемонта.ДатаНачала;
			Движение.ДатаОкончанияФакт	= СтрРемонта.ДатаОкончания;
		КонецЦикла;
		
		ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(РежимПроведения, ТаблицаПроведения, Отказ);
		
		ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям(РежимПроведения, ТаблицаПроведения, Отказ);

		// Движение по регистру "торо_фактическиеМатериальныеЗатратыРемонтныхРабот".
		ДвиженияПоРегистру_торо_фактическиеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ, Заголовок);
		
		// Движение по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
		ДвиженияПоРегистру_торо_фактическиеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ, Заголовок);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ЗавершенныеРемонтныеРаботы".
//
Процедура ДвиженияПоРегистру_торо_ЗавершенныеМероприятия(РежимПроведения, Отказ, Заголовок)
	
	Для Каждого СтрокаРО Из Мероприятия Цикл
		
		Если ЗавершитьРемонтныеРаботы ИЛИ СтрокаРО.ЗавершитьРемонт Тогда
			
			Движение = Движения.торо_ЗавершенныеМероприятия.Добавить();
			
			Движение.ВидМероприятия = СтрокаРО.ВидРемонтныхРабот;
			Движение.СписокОбъектов = СтрокаРО.ОбъектРемонта;
			
			Движение.ДатаНачала = СтрокаРО.ДатаНачала;
			Движение.ДатаОкончания = СтрокаРО.ДатаОкончания;
			
			Движение.ID = СтрокаРО.ID;
			
			Движение.Период = Дата;		
			
		КонецЕсли;
		
	КонецЦикла;
	
	Движения.торо_ЗавершенныеМероприятия.Записать();
	
КонецПроцедуры // ДвиженияПоРегистру_торо_ЗавершенныеРемонтныеРаботы()

Процедура ДвиженияПоРегистру_торо_ВыполненныеМероприятияОбъектов(РежимПроведения, Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Таб.ОбъектРемонта КАК ОбъектРемонта,
	               |	Таб.Мероприятие_ID КАК Мероприятие_ID,
	               |	Таб.Выполнено
	               |ПОМЕСТИТЬ Вт_ДокТЧ
	               |ИЗ
	               |	&Таб КАК Таб
	               |ГДЕ
	               |	Таб.Выполнено
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Мероприятие_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВыполненныеМероприятияОбъектов.ID КАК ID,
	               |	торо_ВыполненныеМероприятияОбъектов.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_Регистр
	               |ИЗ
	               |	РегистрСведений.торо_ВыполненныеМероприятияОбъектов КАК торо_ВыполненныеМероприятияОбъектов
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_ДокТЧ.ОбъектРемонта,
	               |	Вт_ДокТЧ.Мероприятие_ID КАК ID
	               |ИЗ
	               |	Вт_ДокТЧ КАК Вт_ДокТЧ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Регистр КАК ВТ_Регистр
	               |		ПО Вт_ДокТЧ.ОбъектРемонта = ВТ_Регистр.ОбъектРемонта
	               |			И Вт_ДокТЧ.Мероприятие_ID = ВТ_Регистр.ID
	               |ГДЕ
	               |	ВТ_Регистр.ID ЕСТЬ NULL";
				   
	Запрос.УстановитьПараметр("Таб", МероприятияОбъектов.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать(); 
	
	Пока Выборка.Следующий() цикл	
		Движение = Движения.торо_ВыполненныеМероприятияОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
	КонецЦикла;
	
	Движения.торо_ВыполненныеМероприятияОбъектов.Записать();
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ЗапланированныеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		
		Если ЗавершитьРемонтныеРаботы Тогда
			Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстатокЗаплРем;
			Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстатокЗаплРем;
		Иначе
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстатокЗаплРем Тогда
					Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстатокЗаплРем;
				Иначе
					Движение.ПроцентОпераций = СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот;
				КонецЕсли;
					Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстатокЗаплРем * СтрТаб.ПроцентВыполненияРабот / 100;
			Иначе
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстатокЗаплРем Тогда
					Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстатокЗаплРем;
				Иначе
					Движение.ПроцентОпераций = СтрТаб.Количество * 100;
				КонецЕсли;
				Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстатокЗаплРем;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям(РежимПроведения, ТабРемРаб, Отказ)
	
	Движения.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Записывать = Истина;
	
	Для каждого СтрТаб Из ТабРемРаб Цикл
		
		Движение = Движения.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Добавить();
		Движение.Период = Дата;
		Движение.IDОперации = СтрТаб.ID;
		Движение.IDРемонта = СтрТаб.РемонтыОборудования_ID;
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
		Движение.РемонтнаяРабота = СтрТаб.РемонтнаяРабота;
		Движение.Родитель_ID = СтрТаб.Родитель_ID;
		
		Если ЗавершитьРемонтныеРаботы Тогда
			Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстаток;
			Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстаток;
		Иначе
			Если ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов Тогда
				ВыполненоОперации = СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот / СтрТаб.КолОперацийВТехКарте;
				Если ВыполненоОперации > СтрТаб.ПроцентОперацийОстаток Тогда
					Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстаток;
				Иначе
					Движение.ПроцентОпераций = ВыполненоОперации;
				КонецЕсли;
				Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстаток * СтрТаб.ПроцентВыполненияРабот / 100;
			Иначе
				Если СтрТаб.Количество * СтрТаб.ПроцентВыполненияРабот > СтрТаб.ПроцентОперацийОстаток Тогда
					Движение.ПроцентОпераций = СтрТаб.ПроцентОперацийОстаток;
				Иначе
					Движение.ПроцентОпераций = СтрТаб.Количество * 100;
				КонецЕсли;
				Движение.ПроцентРемонта = СтрТаб.ПроцентРемонтаОстаток;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ФактическиеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ, Заголовок)
	
	Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьМатериальныеЗатраты ИЗ ТаблицаМатериальныхЗатрат Цикл
		Движение = Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Добавить();
		Движение.ID = ЗаписьМатериальныеЗатраты.ID;
		Движение.РемонтыОборудования_ID = ЗаписьМатериальныеЗатраты.РемонтыОборудования_ID;
		Движение.Количество = ЗаписьМатериальныеЗатраты.Количество;
		Движение.Номенклатура = ЗаписьМатериальныеЗатраты.Номенклатура;
		Движение.Период = ЗаписьМатериальныеЗатраты.Период;
		Движение.РемонтнаяРабота = ЗаписьМатериальныеЗатраты.РемонтнаяРабота;
		Движение.ХарактеристикаНоменклатуры = ЗаписьМатериальныеЗатраты.ХарактеристикаНоменклатуры;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_фактическиеТрудовыеЗатратыРемонтныхРабот".
//	
Процедура ДвиженияПоРегистру_торо_ФактическиеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ, Заголовок)
		
	Движения.торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьТрудовыеЗатраты ИЗ ТаблицаТрудовыхЗатрат Цикл
		Движение = Движения.торо_ФактическиеТрудовыеЗатратыРемонтныхРабот.Добавить();
		Движение.РемонтыОборудования_ID = ЗаписьТрудовыеЗатраты.РемонтыОборудования_ID;
		Движение.ID = ЗаписьТрудовыеЗатраты.ID;
		Движение.Квалификация = ЗаписьТрудовыеЗатраты.Квалификация;
		Движение.Количество = ЗаписьТрудовыеЗатраты.Количество;
		Движение.Период = ЗаписьТрудовыеЗатраты.ДатаНачала;
		Движение.Сотрудник = ЗаписьТрудовыеЗатраты.Сотрудник;
		Движение.РемонтнаяРабота = ЗаписьТрудовыеЗатраты.РемонтнаяРабота;
		Движение.Сумма = ЗаписьТрудовыеЗатраты.Сумма;
		Движение.ВремяРаботы = ЗаписьТрудовыеЗатраты.ВремяРаботы;
	КонецЦикла;

	
КонецПроцедуры


// Функция формирует таблицу значений с данными по движениям документа.
//
Функция ПодготовитьТаблицуПроведения() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID КАК ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота КАК РемонтнаяРабота,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID КАК Родитель_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Выполнено,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ПроцентВыполненияРабот,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Количество,
	               |	СУММА(1) КАК КолОперацийВТехКарте
	               |ПОМЕСТИТЬ ТабРемРабот
	               |ИЗ
	               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.РемонтныеРаботы КАК торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы КАК торо_ЗапланированныеРемонтныеРаботы
	               |		ПО (торо_ЗапланированныеРемонтныеРаботы.Родитель_ID = торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID)
	               |			И (ТИПЗНАЧЕНИЯ(торо_ЗапланированныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_ЗаявкаНаРемонт))
	               |ГДЕ
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Родитель_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Выполнено,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.ПроцентВыполненияРабот,
	               |	торо_АктОВыполненииРегламентногоМероприятияРемонтныеРаботы.Количество
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ID,
	               |	РемонтнаяРабота,
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	               |ПОМЕСТИТЬ ВТ_торо_ВыполняемыеРемонтныеРаботыОстатки
	               |ИЗ
	               |	РегистрНакопления.торо_ВыполняемыеРемонтныеРаботыПоРегламентнымМероприятиям.Остатки(
	               |			&МоментВремени,
	               |			(IDРемонта, IDОперации, Родитель_ID) В
	               |				(ВЫБРАТЬ
	               |					ТабРемРабот.РемонтыОборудования_ID,
	               |					ТабРемРабот.ID,
	               |					ТабРемРабот.Родитель_ID
	               |				ИЗ
	               |					ТабРемРабот КАК ТабРемРабот)) КАК торо_ВыполняемыеРемонтныеРаботыОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	IDОперации,
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток КАК ПроцентОперацийОстаток,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстаток,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта КАК IDРемонта,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.IDОперации КАК IDОперации,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID КАК Родитель_ID
	               |ПОМЕСТИТЬ ВТ_торо_ЗапланированныеРемонтныеРаботыОстатки
	               |ИЗ
	               |	РегистрНакопления.торо_ЗапланированныеРемонтныеРаботы.Остатки(
	               |			&МоментВремени,
	               |			(IDРемонта, IDОперации, Родитель_ID) В
	               |				(ВЫБРАТЬ
	               |					ТабРемРабот.РемонтыОборудования_ID,
	               |					ТабРемРабот.ID,
	               |					ТабРемРабот.Родитель_ID
	               |				ИЗ
	               |					ТабРемРабот КАК ТабРемРабот)) КАК торо_ЗапланированныеРемонтныеРаботыОстатки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	IDРемонта,
	               |	IDОперации,
	               |	Родитель_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабРемРабот.ID,
	               |	ТабРемРабот.РемонтнаяРабота,
	               |	ТабРемРабот.Родитель_ID,
	               |	ТабРемРабот.РемонтыОборудования_ID,
	               |	ТабРемРабот.Выполнено,
	               |	ТабРемРабот.ПроцентВыполненияРабот,
	               |	ТабРемРабот.Количество,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентОперацийОстаток,
	               |	торо_ВыполняемыеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентОперацийОстаток КАК ПроцентОперацийОстатокЗаплРем,
	               |	торо_ЗапланированныеРемонтныеРаботыОстатки.ПроцентРемонтаОстаток КАК ПроцентРемонтаОстатокЗаплРем,
	               |	ТабРемРабот.КолОперацийВТехКарте
	               |ИЗ
	               |	ТабРемРабот КАК ТабРемРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_торо_ВыполняемыеРемонтныеРаботыОстатки КАК торо_ВыполняемыеРемонтныеРаботыОстатки
	               |		ПО ТабРемРабот.РемонтыОборудования_ID = торо_ВыполняемыеРемонтныеРаботыОстатки.IDРемонта
	               |			И ТабРемРабот.ID = торо_ВыполняемыеРемонтныеРаботыОстатки.IDОперации
	               |			И ТабРемРабот.Родитель_ID = торо_ВыполняемыеРемонтныеРаботыОстатки.Родитель_ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_торо_ЗапланированныеРемонтныеРаботыОстатки КАК торо_ЗапланированныеРемонтныеРаботыОстатки
	               |		ПО ТабРемРабот.РемонтыОборудования_ID = торо_ЗапланированныеРемонтныеРаботыОстатки.IDРемонта
	               |			И ТабРемРабот.ID = торо_ЗапланированныеРемонтныеРаботыОстатки.IDОперации
	               |			И ТабРемРабот.Родитель_ID = торо_ЗапланированныеРемонтныеРаботыОстатки.Родитель_ID";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("МоментВремени", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ЗавершитьРемонтныеРаботы", ЗавершитьРемонтныеРаботы);
	
	ТаблицаПроведения = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаПроведения;
	
КонецФункции

// Функция возвращает таблицу значений для движения по регистру "торо_ФактическиеМатериальныеЗатратыРемонтныхРабот".
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуМатериальныхЗатрат(ТаблицаДвижений)
	
	ТаблицаМатериальныхЗатрат = Движения.торо_ФактическиеМатериальныеЗатратыРемонтныхРабот.Выгрузить();
			
	Если МатериальныеЗатраты.Количество()=0 Тогда
		
		Возврат ТаблицаМатериальныхЗатрат;
		
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаДвижений.ID,
	|	ТаблицаДвижений.Родитель_ID,
	|	ТаблицаДвижений.РемонтнаяРабота
	|ПОМЕСТИТЬ ТаблицаРемонтныхРабот
	|ИЗ
	|	&ТаблицаДвижений КАК ТаблицаДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыеМатериальныеЗатраты.ID,
	|	ПлановыеМатериальныеЗатраты.Номенклатура,
	|	ПлановыеМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	|	ПлановыеМатериальныеЗатраты.Количество
	|ПОМЕСТИТЬ ПлановыеМатериальныеЗатраты
	|ИЗ
	|	&ПлановыеМатериальныеЗатраты КАК ПлановыеМатериальныеЗатраты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРемонтныхРабот.ID,
	|	ТаблицаРемонтныхРабот.Родитель_ID,
	|	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	|	ПлановыеМатериальныеЗатраты.Номенклатура,
	|	ПлановыеМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	|	ЕСТЬNULL(ПлановыеМатериальныеЗатраты.Количество, 0) КАК КоличествоПлан
	|ИЗ
	|	ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПлановыеМатериальныеЗатраты КАК ПлановыеМатериальныеЗатраты
	|		ПО ТаблицаРемонтныхРабот.ID = ПлановыеМатериальныеЗатраты.ID";
	
	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	
	
	НаборЗаписейПМЗ = РегистрыНакопления.торо_ПлановыеМатериальныеЗатратыРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписейПМЗ.Отбор.Регистратор.Установить(Документы.торо_ЗаявкаНаРемонт.ПустаяСсылка());
	НаборЗаписейПМЗ.Прочитать();

	ТаблицаПлановыеМатериальныеЗатраты = НаборЗаписейПМЗ.Выгрузить();
	
	Запрос.УстановитьПараметр("ПлановыеМатериальныеЗатраты", ТаблицаПлановыеМатериальныеЗатраты);
	
	ТаблицаПМЗ_Процент = Запрос.Выполнить().Выгрузить();
	
	Счетчик = ТаблицаПМЗ_Процент.Количество()-1;
	Пока Счетчик >= 0 Цикл
		
		СтрокаТЗ = ТаблицаПМЗ_Процент[Счетчик];
		
		Если ТипЗнч(СтрокаТЗ.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ТаблицаПМЗ_Процент.Удалить(СтрокаТЗ);
		КонецЕсли; 
		
		Счетчик = Счетчик - 1;
		
	КонецЦикла; 
	
	БуферМЗ = МатериальныеЗатраты.Выгрузить();
	БуферМЗ.Колонки.Добавить("Период");
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		
		КоэффициентЕИ = СтрокаТЗ.ЕдиницаИзмерения.Коэффициент;
		
		СтрокаТЗ.Количество = СтрокаТЗ.Количество * ?(КоэффициентЕИ = 0, 1, КоэффициентЕИ);
		
		СтрокаРемонта = Мероприятия.Найти(СтрокаТЗ.РемонтыОборудования_ID);
		Если СтрокаРемонта <> Неопределено Тогда
			СтрокаТЗ.Период = СтрокаРемонта.ДатаОкончания;
		КонецЕсли;
		
	КонецЦикла;
	
	БуферМЗ.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период", "Количество");
	
	Для Каждого СтрокаТЗ Из БуферМЗ Цикл
		
		Если ЗначениеЗаполнено(СтрокаТЗ.ID) Тогда
			
			НайденнаяСтрокаТЗ = РемонтныеРаботы.Найти(СтрокаТЗ.ID, "ID");
			Если Не НайденнаяСтрокаТЗ = Неопределено Тогда
				
				НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, СтрокаТЗ);
				НовСтрокаТЗ.РемонтнаяРабота = НайденнаяСтрокаТЗ.РемонтнаяРабота;
				
			КонецЕсли; 
			
		Иначе
			
			МассивСтрок = ТаблицаПМЗ_Процент.НайтиСтроки(Новый Структура("Номенклатура, ХарактеристикаНоменклатуры",
			СтрокаТЗ.Номенклатура, СтрокаТЗ.ХарактеристикаНоменклатуры));
			Если МассивСтрок.Количество() > 0 Тогда
				
				СуммаНормаПроцент = 0;
				Для Каждого Элемент Из МассивСтрок Цикл
					
					СуммаНормаПроцент = СуммаНормаПроцент + Элемент.ПроцентНеВыполненныхРабот * Элемент.КоличествоПлан;
					
				КонецЦикла; 
				
				Для Каждого Элемент Из МассивСтрок Цикл
					
					НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, Элемент);
					
					НовСтрокаТЗ.Количество = Элемент.ПроцентНеВыполненныхРабот * Элемент.КоличествоПлан * СтрокаТЗ.Количество / СуммаНормаПроцент;
					
				КонецЦикла;
				
			Иначе
				
				СуммаНормаПроцент = ТаблицаПМЗ_Процент.Итог("ПроцентНеВыполненныхРабот");
				Для Каждого СтрокаРР Из ТаблицаПМЗ_Процент Цикл
					
					НовСтрокаТЗ = ТаблицаМатериальныхЗатрат.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаТЗ, СтрокаРР);
					
					НовСтрокаТЗ.Номенклатура = СтрокаТЗ.Номенклатура;
					НовСтрокаТЗ.ХарактеристикаНоменклатуры = СтрокаТЗ.ХарактеристикаНоменклатуры;
					
					НовСтрокаТЗ.Количество = СтрокаРР.ПроцентНеВыполненныхРабот* СтрокаТЗ.Количество / СуммаНормаПроцент;
					
				КонецЦикла; 
				
			КонецЕсли; 
			
		КонецЕсли;
		
		
	КонецЦикла; 
	
	ТаблицаМатериальныхЗатрат.Свернуть("ID, РемонтыОборудования_ID, Номенклатура, ХарактеристикаНоменклатуры,Период, РемонтнаяРабота", "Количество");
	
	Возврат ТаблицаМатериальныхЗатрат;
	
КонецФункции

// Функция возвращает таблицу значений для движения по регистру "торо_ФактическиеТрудовыеЗатратыРемонтныхРабот".
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуТрудовыхЗатрат(ТаблицаДвижений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДвижений.ID,
	               |	ТаблицаДвижений.Родитель_ID,
	               |	ТаблицаДвижений.РемонтыОборудования_ID,
	               |	ТаблицаДвижений.РемонтнаяРабота
	               |ПОМЕСТИТЬ ТаблицаРемонтныхРаботНачало
	               |ИЗ
	               |	&ТаблицаДвижений КАК ТаблицаДвижений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаРемонтов.ID,
	               |	ТаблицаРемонтов.ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаРемонтов
	               |ИЗ
	               |	&ТаблицаРемонтов КАК ТаблицаРемонтов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаДвижений.ID,
	               |	ТаблицаДвижений.Родитель_ID,
	               |	ТаблицаДвижений.РемонтыОборудования_ID,
	               |	ТаблицаДвижений.РемонтнаяРабота,
	               |	ТаблицаРемонтов.ДатаНачала
	               |ПОМЕСТИТЬ ТаблицаРемонтныхРабот
	               |ИЗ
	               |	ТаблицаРемонтныхРаботНачало КАК ТаблицаДвижений
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРемонтов КАК ТаблицаРемонтов
	               |		ПО ТаблицаДвижений.РемонтыОборудования_ID = ТаблицаРемонтов.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация,
	               |	СУММА(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.СуммаКНачислению) КАК СуммаКНачислению,
	               |	СУММА(1) КАК Количество,
	               |	СУММА(торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ВремяРаботы) КАК ВремяРаботы,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.РемонтыОборудования_ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Сотрудник
	               |ПОМЕСТИТЬ ТаблицаТрудозатратАкт
	               |ИЗ
	               |	Документ.торо_АктОВыполненииРегламентногоМероприятия.ТрудовыеЗатраты КАК торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты
	               |ГДЕ
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Ссылка = &Ссылка
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Квалификация,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.ID,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.Сотрудник,
	               |	торо_АктОВыполненииРегламентногоМероприятияТрудовыеЗатраты.РемонтыОборудования_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТрудозатратАкт.Квалификация,
	               |	СУММА(ТаблицаТрудозатратАкт.СуммаКНачислению) КАК Сумма,
	               |	СУММА(ТаблицаТрудозатратАкт.Количество) КАК Количество,
	               |	СУММА(ТаблицаТрудозатратАкт.ВремяРаботы) КАК ВремяРаботы,
	               |	ТаблицаТрудозатратАкт.ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	               |	ТаблицаТрудозатратАкт.Сотрудник,
	               |	ТаблицаТрудозатратАкт.РемонтыОборудования_ID,
	               |	ТаблицаРемонтныхРабот.ДатаНачала
	               |ИЗ
	               |	ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаТрудозатратАкт КАК ТаблицаТрудозатратАкт
	               |		ПО ТаблицаРемонтныхРабот.ID = ТаблицаТрудозатратАкт.ID
	               |			И ТаблицаРемонтныхРабот.РемонтыОборудования_ID = ТаблицаТрудозатратАкт.РемонтыОборудования_ID
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаТрудозатратАкт.Квалификация,
	               |	ТаблицаТрудозатратАкт.ID,
	               |	ТаблицаТрудозатратАкт.РемонтыОборудования_ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	               |	ТаблицаРемонтныхРабот.ДатаНачала,
	               |	ТаблицаТрудозатратАкт.Сотрудник";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ТаблицаДвижений", РемонтныеРаботы.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаРемонтов", Мероприятия.Выгрузить());
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Выгрузить();
	
КонецФункции

ФОИспользоватьУсложненнуюСхемуЗакрытияНарядов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов");

#КонецОбласти

#КонецЕсли
