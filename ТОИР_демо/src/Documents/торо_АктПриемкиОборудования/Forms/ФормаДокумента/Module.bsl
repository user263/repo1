
&НаКлиенте
Перем СтруктураДанныхДоРедактирования;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") 
		И Не Параметры.Свойство("РабочееМесто") Тогда
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(Параметры.Основание,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		СсылкаНаДок = Параметры.Основание;
		Если СсылкаНаДок <> Неопределено Тогда
			ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(СсылкаНаДок);
			
			Неотмененный = торо_ЗаполнениеДокументов.ВернутьIDНеотмененногоРемонта(СсылкаНаДок, СсылкаНаДок[ИмяТЧ]);
			
			Если ИмяТЧ <> Неопределено И Неотмененный <> "" Тогда
				СоответствиеИДДокументам = Новый Соответствие;
				СоответствиеИДДокументам.Вставить(Неотмененный, СсылкаНаДок);    
				торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(СоответствиеИДДокументам, Объект);
			КонецЕсли; 
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокАктов();

	// Заголовок формы++
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	// Заголовок формы--
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_АктПриемкиОборудования;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.ДокументыОснования.Количество() > 0 И Объект.РемонтыОборудования.Количество() = 0 Тогда
		ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
	КонецЕсли;
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	Массив = Новый Массив;
	Массив.Добавить("ДокументыОснования");
	торо_СобытияФормКлиент.ЗаполнитьСтруктуруДанныхДоРедактирования(СтруктураДанныхДоРедактирования,Массив);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заголовок формы++
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
		
	// Заголовок формы--

	ЗаполнитьСписокАктов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Если Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ВыбранноеЗначение.СтрокаРемонтовОборудования.ID)).Количество() = 0 Тогда
			
			НС = Объект.РемонтыОборудования.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ВыбранноеЗначение.СтрокаРемонтовОборудования);
			НС.ДокументИсточник = ВыбранноеЗначение.ДокументОснование;
			
			Если Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ВыбранноеЗначение.ДокументОснование)).Количество() = 0 Тогда
				Объект.ДокументыОснования.Добавить().ДокументОснование = ВыбранноеЗначение.ДокументОснование;
			КонецЕсли;
			
			ЗаполнитьСписокАктов(ВыбранноеЗначение.СтрокаРемонтовОборудования.ID);
			Модифицированность = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		Для Каждого ЭлементВыбранного Из ВыбранноеЗначение Цикл
		
			Если Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ЭлементВыбранного.СтрокаРемонтовОборудования.ID)).Количество() = 0 Тогда
				
				НС = Объект.РемонтыОборудования.Добавить();
				ЗаполнитьЗначенияСвойств(НС, ЭлементВыбранного.СтрокаРемонтовОборудования);
				НС.ДокументИсточник = ЭлементВыбранного.ДокументОснование;
				
				Если Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ЭлементВыбранного.ДокументОснование)).Количество() = 0 Тогда
					Объект.ДокументыОснования.Добавить().ДокументОснование = ЭлементВыбранного.ДокументОснование;
				КонецЕсли;
				
				ЗаполнитьСписокАктов(ЭлементВыбранного.СтрокаРемонтовОборудования.ID);
				Модифицированность = Истина;
			КонецЕсли;
		
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
	
	УправлениеВидимостью(ЭтотОбъект);	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СогласующиеРегистр.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение",ЭтотОбъект,Новый Структура("Элемент",Элемент)),
						НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"),
						РежимДиалогаВопрос.ДаНет);

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса,ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования

&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Элементы.ЗакрываемыеАкты.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ТекДанные.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		УдаляемыеСтроки = Объект.ЗакрываемыеАкты.НайтиСтроки(Новый Структура("ID", ТекДанные.ID));
		Для Каждого Строка Из УдаляемыеСтроки Цикл
			Объект.ЗакрываемыеАкты.Удалить(Объект.ЗакрываемыеАкты.Индекс(Строка));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ОткрытьДокументСПозиционированиемНаРемонте(ТекДанные.ДокументИсточник, ТекДанные.ID);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрываемыеАкты

&НаКлиенте
Процедура ЗакрываемыеАктыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаДокумента", Новый Структура("Ключ, ID", ТекДанные.Документ, ТекДанные.ID), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			Сообщение.Сообщить();
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда 
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				Сообщение.Сообщить();
			Иначе
				СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
				Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
					Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
					СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
					ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ДоступныеТипы = ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере();	
	Если ДоступныеТипы=Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДокументыОснованияДокументОснование.ОграничениеТипа =ДоступныеТипы;
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот", 
	Новый Структура("Владелец, Организация, Подразделение", Объект.Ссылка, Объект.Организация, Объект.Подразделение), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	ФормаПодбора.ФлажокЗавершенные = Истина;
	ФормаПодбора.Элементы.ФлажокЗавершенные.Видимость = Ложь;
	
	ФормаПодбора.Открыть();
	ФормаПодбора.Активизировать();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗакрываемыеАктыПоРемонту(Команда)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		
		УдалитьЗакрываемыеАктыПоID(ТекДанные.ID);
		ОбновитьЗакрываемыеАктыНаСервере(ТекДанные.ID);
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеЗакрываемыеАкты(Команда)

	ОбновитьЗакрываемыеАктыНаСервере();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьАктВверх(Команда)
	
	ТекСтрока = Элементы.ЗакрываемыеАкты.ТекущиеДанные;
	ПереместитьАкт(ТекСтрока, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьАктВниз(Команда)
	
	ТекСтрока = Элементы.ЗакрываемыеАкты.ТекущиеДанные;
	ПереместитьАкт(ТекСтрока, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьАктыПоВозрастанию(Команда)
	
	СортироватьАкты(" Возр");
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьАктыПоУбыванию(Команда)
	
	СортироватьАкты(" Убыв");
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьСтатус(Команда)
	
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОткрытьДокументСПозиционированиемНаРемонте(Документ, ID)

	Если ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ОткрытьФорму("Документ.торо_ВнешнееОснованиеДляРабот.Форма.ФормаДокумента", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ОткрытьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаДокумента", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ОткрытьФорму("Документ.торо_ПланГрафикРемонта.Форма.ФормаДокумента", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.Форма.ФормаДокумента", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	ИначеЕсли ТипЗнч(Документ) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаДокумента", Новый Структура("Ключ, ID", Документ, ID), ЭтаФорма);
	КонецЕсли;

КонецПроцедуры	
	
&НаКлиенте
Процедура УдалитьЗакрываемыеАктыПоID(ID)
	
	НайденныеСтроки = Объект.ЗакрываемыеАкты.НайтиСтроки(Новый Структура("ID", ID));
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Объект.ЗакрываемыеАкты.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьАкты(Направление)
	
	Объект.ЗакрываемыеАкты.Сортировать(СтрЗаменить(Элементы.ЗакрываемыеАкты.ТекущийЭлемент.Имя, "ЗакрываемыеАкты", "") + Направление);
	Элементы.ЗакрываемыеАкты.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьАкт(ТекСтрока, ИзменениеПозиции)

	Если ТекСтрока <> Неопределено Тогда
		НайденныеСтроки = Объект.ЗакрываемыеАкты.НайтиСтроки(Новый Структура("ID",ТекСтрока.ID));
		
		ИндексТекСтроки = Объект.ЗакрываемыеАкты.Индекс(ТекСтрока);
		
		ВГраница = НайденныеСтроки.ВГраница();
		Сдвинуть = Ложь;
		Для Сч = 0 По ВГраница Цикл
			Если НайденныеСтроки[Сч].Документ = ТекСтрока.Документ И ?(ИзменениеПозиции > 0, Сч <> ВГраница, Сч <> 0) Тогда
				НужноеСмещение = Объект.ЗакрываемыеАкты.Индекс(НайденныеСтроки[Сч + ИзменениеПозиции]) - ИндексТекСтроки;
				Сдвинуть = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Сдвинуть Тогда
			Объект.ЗакрываемыеАкты.Сдвинуть(ИндексТекСтроки, НужноеСмещение);
		КонецЕсли;
				
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗакрываемыеАктыНаСервере(ID = Неопределено)
	
	Если ID = Неопределено Тогда
		Объект.ЗакрываемыеАкты.Очистить();
		ID = Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID");
	КонецЕсли;
	
	ЗаполнитьСписокАктов(ID);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокАктов(ID = Неопределено)
	
	Если ID = Неопределено Тогда
		ТекстЗапроса = "ВЫБРАТЬ
		|	ЗакрываемыеАкты.ID,
		|	ЗакрываемыеАкты.Документ
		|ПОМЕСТИТЬ ЗакрываемыеАкты
		|ИЗ
		|	&ЗакрываемыеАкты КАК ЗакрываемыеАкты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК Документ,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID,
		|	НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт КАК ИндексКартинкиРаботыЗавершены,
		|	ВЫБОР
		|		КОГДА торо_АктОВыполненииЭтапаРабот.Проведен
		|			ТОГДА 1
		|		ИНАЧЕ ВЫБОР
		|				КОГДА торо_АктОВыполненииЭтапаРабот.ПометкаУдаления
		|					ТОГДА 2
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинкиСтатусДокумента
		|ИЗ
		|	ЗакрываемыеАкты КАК ЗакрываемыеАкты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		|		ПО (торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = ЗакрываемыеАкты.Документ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
		|		ПО ЗакрываемыеАкты.Документ = торо_АктОВыполненииЭтапаРабот.Ссылка
		|			И торо_АктОВыполненииЭтапаРабот.Проведен";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ЗакрываемыеАкты", Объект.ЗакрываемыеАкты.Выгрузить(, "ID, Документ"));
		ТаблицаСИндексамиКартинок = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Объект.ЗакрываемыеАкты Цикл
			НайденнаяСтрока = ТаблицаСИндексамиКартинок.НайтиСтроки(Новый Структура("Документ, ID", Строка.Документ, Строка.ID));
			Строка.ИндексКартинкиСтатусДокумента = НайденнаяСтрока[0].ИндексКартинкиСтатусДокумента;
			Строка.ИндексКартинкиРаботыЗавершены = НайденнаяСтрока[0].ИндексКартинкиРаботыЗавершены;
		КонецЦикла;
	Иначе	
		ТекстЗапроса = "ВЫБРАТЬ
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК Документ,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID,
		|	НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ЗавершитьРемонт КАК ИндексКартинкиРаботыЗавершены,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаНачала,
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДатаОкончания,
		|	ВЫБОР
		|		КОГДА торо_АктОВыполненииЭтапаРабот.Проведен
		|			ТОГДА 1
		|		ИНАЧЕ ВЫБОР
		|				КОГДА торо_АктОВыполненииЭтапаРабот.ПометкаУдаления
		|					ТОГДА 2
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинкиСтатусДокумента
		|ИЗ
		|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
		|		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка = торо_АктОВыполненииЭтапаРабот.Ссылка
		|			И торо_АктОВыполненииЭтапаРабот.Проведен
		|ГДЕ
		|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID В(&ID)";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ID",ID);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект.ЗакрываемыеАкты.Добавить(), Выборка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(ДокОбъект)
	Элементы = ДокОбъект.Элементы;
	Объект = ДокОбъект.Объект;
	Элементы.ДеревоСогласованияУтвердитьСтатус.Доступность = ЗначениеЗаполнено(Объект.СпособСогласования);
КонецПроцедуры

#Область Согласование

&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаСервере
Функция ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере()
	Возврат торо_СобытияФорм.ДокументыОснованияДокументОснованиеНачалоВыбора(ЭтаФорма);	
КонецФункции

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("ЗакрываемыеАкты");
	
	Если ПустаяСтрока(Ремонт_ID) Тогда		
	
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
				
			Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
				
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID", ОчереднаяСтрока.ID));
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
				Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
				
			КонецЦикла;
			
				
		
	КонецЕсли;

	
КонецПроцедуры

#КонецОбласти

фПослеОчистки = Ложь;
#КонецОбласти

