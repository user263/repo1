////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем РемонтОборудованияУдаляется;

&НаКлиенте
Перем СтруктураДанныхДоРедактирования;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Основание") Тогда
		СсылкаНаДок = Параметры.Основание;
		торо_ЗаполнениеДокументов.ПроверитьВозможностьВводаНаОсновании(СсылкаНаДок,Отказ);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		Если СсылкаНаДок <> Неопределено Тогда
			ИмяТЧ = торо_Ремонты.ПолучитьИмяТЧРемонтов(СсылкаНаДок);
			
			Неотмененный = торо_ЗаполнениеДокументов.ВернутьIDНеотмененногоРемонта(СсылкаНаДок, СсылкаНаДок[ИмяТЧ]);
			
			Если ИмяТЧ <> Неопределено И Неотмененный <> "" Тогда
				СоответствиеИДДокументам = Новый Соответствие;
				СоответствиеИДДокументам.Вставить(Неотмененный, СсылкаНаДок);   
				торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(СоответствиеИДДокументам, Объект);
			КонецЕсли; 
		КонецЕсли;

	КонецЕсли;
	
	Если ЭтаФорма.Параметры.Свойство("ДекомпиляцияЭлементов") Тогда
		ВнешниеОбработки.Создать(ЭтаФорма.Параметры.ДекомпиляцияЭлементов.ИмяПодключеннойОбработки,Ложь).ОпределитьВнутренниеСвойстваЭлементов(ЭтаФорма);
	КонецЕсли;
	
	Если Параметры.Свойство("РабочееМесто") Тогда
		Если ТипЗнч(Параметры.РабочееМесто) = Тип("Соответствие") Тогда
			торо_ЗаполнениеДокументов.ЗаполнитьДокументНаОсновании(Параметры.РабочееМесто, Объект);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ID") Тогда
		
		Строки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Параметры.ID));
		Если Строки.Количество() Тогда
			Элементы.РемонтыОборудования.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	УстановитьУсловноеОформление();
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			
			Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			
			Объект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Ответственный) Тогда
			
			Объект.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
		КонецЕсли;
		СлужебныеРеквизитыЗаполнитьНаСервере();
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	
	// Заголовок формы++
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	
	// Заголовок формы--
	
	
	// Согласование++
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ЗаявкаНаРемонт;
	торо_РаботаСоСтатусамиДокументовСервер.ПриСозданииНаСервере(ЭтаФорма, ВидДокумента);
	// Согласование --
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;
	КонецЦикла;
	
	
	// функциональные опции
	ФОУчетЗапчастей				= ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОИспользоватьГарантии		= ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	ФОЗапретитьРемонтГарантийногоОборудованияХозспособом = ПолучитьФункциональнуюОпцию("торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом");
	ФОИспользоватьАналоги		= ПолучитьФункциональнуюОпцию("торо_ИспользоватьАналогиНоменклатурыДляРемонтов");
	ФОИспользоватьОстановочные	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	
	ПравоИнтерактивнаяПометкаУдаленияЗаказовНаВнутреннееПотребление = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоИнтерактивноеДобавлениеЗаказовНаВнутреннееПотребление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ЗаказНаВнутреннееПотребление);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Документы.торо_ЗаявкаНаРемонт);
	
	Если ФОИспользоватьАналоги Тогда
		
		ОтметитьНаличиеАналогов();
		
	КонецЕсли; 	
	
	Элементы.ГруппаЗапчасти.Видимость = ФОУчетЗапчастей;  
	
	Если Параметры.Свойство("АктивироватьСтроку") Тогда
		ТекСтрокаИзВнеID = Параметры.ТекСтрокаИзОбработкиID;		
	КонецЕсли;
	
	Если ФОИспользоватьОстановочные Тогда
		ОбновитьОстановочные();
	КонецЕсли;
	
	ОбновитьДоступностьДляРедактирования();
	
	// Ограничение ввода на основании
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("ОграничитьВводНаОсновании, УстановитьСвойствоЭлементовФормыОтПрав",Истина, Истина));
	
	УправлениеВидимостью(ЭтотОбъект);
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	ЭтоПервыйДокументВЦепочке = ЭтоПервыйДокументВЦепочке();
	ЭтоПоследнийДокументВЦепочке = ЭтоПоследнийДокументВЦепочке(); 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.РемонтыОборудования.Количество() = 0 И Объект.ДокументыОснования.Количество() > 0 Тогда
		ПодключитьОбработчикОжидания("ПодборРемонтовОбработчикОжидания",0.5,Истина);
	КонецЕсли; 	
	Если ТекСтрокаИзВнеID<>"" Тогда
		АктивироватьСтрокуИзВне(ТекСтрокаИзВнеID);
	КонецЕсли;	
	
	ОбновитьНадписиВремениРаботы();
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	Массив = Новый Массив;
	Массив.Добавить("ДокументыОснования");
	торо_СобытияФормКлиент.ЗаполнитьСтруктуруДанныхДоРедактирования(СтруктураДанныхДоРедактирования,Массив);

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Для Каждого Строка Из Объект.РемонтыОборудования Цикл
		Если Строка.ДатаНачала > Строка.ДатаОкончания Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В строке номер %1 списка ремонтов оборудования дата начала периода ремонтных работ больше даты окончания (%2 - %3). Документ не записан!'"),
				Строка.НомерСтроки,Строка.ДатаНачала,Строка.ДатаОкончания));
			Отказ = Истина;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ЗаполнитьДополнительныеСвойства(ЭтаФорма, ТекущийОбъект);
	// Согласование--

	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ФОИспользоватьГарантии Тогда
		
		торо_ГарантийноеОбслуживание.СформироватьПредупрежденияОРекламационныхАктах(Объект, "РемонтыОборудования");
		
		Если ФОЗапретитьРемонтГарантийногоОборудованияХозспособом Тогда
			
			торо_ГарантийноеОбслуживание.ПроверитьНаличиеКонтрагентов(ТекущийОбъект, "ИсполнителиРемонтныхРабот","Исполнитель", Отказ);
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Согласование++
	торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиНаСервере(ЭтаФорма, ТекущийОбъект);
	// Согласование--
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// Заголовок формы++
	
	торо_РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", РеквизитФормыВЗначение("Объект"), ЭтаФорма);
	
	// Заголовок формы--
	
	Для каждого Строка Из Объект.РемонтыОборудования Цикл
		Если ЗначениеЗаполнено(Строка.ДокументИсточник)
			И ТипЗнч(Строка.ДокументИсточник) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			Строка.ТипДокументаОснования = "торо_ВнешнееОснованиеДляРабот";
		КонецЕсли; 
	КонецЦикла;
	
	Если ФОИспользоватьАналоги Тогда
		ОтметитьНаличиеАналогов();		
	КонецЕсли; 
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
	РемонтыОборудованияОбновитьДокументыИсточники();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОбновитьНадписиВремениРаботы();
	Оповестить("СозданДокументЧерезРМТехСпец", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ВыполняемаяОперация")
		И ВыбранноеЗначение.ВыполняемаяОперация = "ВыборАналогаНоменклатурыДляРемонта" Тогда
		ЗаменитьМатериалыНаАналоги(ВыбранноеЗначение.АдресВХранилище);
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеРемРаб = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекДанныеРемонты = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если ТекДанныеРемРаб = Неопределено ИЛИ ТекДанныеРемонты = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
			ИмяТЧ = "МатериальныеЗатраты";
			ИмяРеквизита = "Номенклатура";
		ИначеЕсли Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаИнструменты Тогда
			ИмяТЧ = "Инструменты";
			ИмяРеквизита = "Инструмент";
		Иначе
			ИмяТЧ = "ЗапчастиРемонта";
			ИмяРеквизита = "Номенклатура";
		КонецЕсли;
		
		СтруктураСтрокиОпераций = Новый Структура("РемонтыОборудования_ID, ID, Количество", ТекДанныеРемонты.ID, ТекДанныеРемРаб.ID, ТекДанныеРемРаб.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
	Иначе
		ДеревоРемонтныхРаботОбработкаВыбора(, ВыбранноеЗначение, );	
	КонецЕсли;
	
	ЭтоПервыйДокументВЦепочке = ЭтоПервыйДокументВЦепочке();
	ЭтоПоследнийДокументВЦепочке = ЭтоПоследнийДокументВЦепочке();
	РемонтыОборудованияОбновитьДокументыИсточники();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	Если ИмяСобытия = "РабочееМестоТехСпец" Тогда
		Объект.Организация   = Параметр.Организация;
		Объект.Подразделение = Параметр.Подразделение;
		Для каждого Элем Из Параметр.МассивСтруктур Цикл
			ДеревоРемонтныхРаботОбработкаВыбора(, Элем, );
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_Заявка" И Источник = ЭтаФорма Тогда
		Если НЕ (Параметр = Неопределено ИЛИ НЕ Параметр.Количество()) Тогда
			
			Для каждого Элем Из Параметр Цикл
				СтруктураПараметровКоманды = Новый Структура("Док, ID", Объект.Ссылка, Элем);
				МассивПараметровКоманды = Новый Массив();
				МассивПараметровКоманды.Добавить(Объект.Ссылка);
				торо_Печать.НапечататьДокумент("Документ.торо_ЗаявкаНаРемонт", "Заявка", МассивПараметровКоманды,СтруктураПараметровКоманды);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗагрузкаИзПроджект" Тогда
		Если Параметр = Объект.Ссылка Тогда
			ЭтаФорма.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// согласование++
&НаКлиенте
Процедура СпособСогласованияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если СогласующиеРегистр.Количество() > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособСогласованияНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Элемент",Элемент)),
		НСтр("ru = 'Данные по установленным статусам документа будут очищены! Продолжить?'"),
		РежимДиалогаВопрос.ДаНет, 60);		
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияНачалоВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СогласующиеРегистр.Очистить();
		Если мХранитьИсториюСогласованияВДокументах Тогда
			Объект.Согласующие.Очистить();
		КонецЕсли;
		ОткрытьФорму("Справочник.торо_СпособыСогласованияДокументов.ФормаВыбора",,ДополнительныеПараметры.Элемент,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияОчистка(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = ПредопределенноеЗначение("Справочник.торо_СпособыСогласованияДокументов.ПустаяСсылка") Тогда
		фПослеОчистки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособСогласованияПриИзменении(Элемент)
	
	Если фПослеОчистки = Ложь Тогда
		ОбновитьДеревоСогласующих(Истина);
		торо_РаботаССогласованиямиКлиентСервер.ДобавитьСтрокуВИсториюСтатусов(ЭтаФорма, СтатусДокументаРегистр,, Истина);
	Иначе
		фПослеОчистки = Ложь;
	КонецЕсли;
	
	УправлениеВидимостью(ЭтотОбъект);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонтыОборудования
&НаКлиенте
Процедура РемонтыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Структура = Новый Структура();
		Структура.Вставить(	"ИмяТЧ"                    , "РемонтныеРаботы");
		Структура.Вставить(	"Текущий_ID"               , ТекущиеДанные.ID);
		Структура.Вставить(	"Наименование_Ремонты"     , "РемонтыОборудования_ID");
		Структура.Вставить(	"Наименование_ПолеРодитель", "Родитель_ID");
		Структура.Вставить(	"Наименование_ПолеЭлемент" , "ID");
		
		торо_ЗаполнениеДокументовКлиент.ЗаполнитьДеревоРемонтов(Структура, ДеревоРемонтныхРабот, Объект);
		
		УстановитьОтборыСвязанныхТаблицРемонты(Элементы.РемонтыОборудования.ТекущиеДанные.ID);
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		
		УстановитьДоступностьДляРедактированияПоТекРемонту(ТекущиеДанные.БлокироватьДляИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И (ТекДанные.БлокироватьДляИзменения Или ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного)) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И ТекДанные.БлокироватьДляИзменения Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	
	Если НЕ РемонтОборудованияУдаляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("РемонтыОборудованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),
		Вопрос,РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если ФОИспользоватьГарантии Тогда
			
			ТекДанные.ГарантийныйРемонт = торо_ГарантийноеОбслуживание.ПолучитьЗначениеФлагаГарантийныйРемонтДляОбъектаРемонта(ТекДанные.ОбъектРемонта, ТекДанные.ДатаНачала, ТекДанные.ДатаОкончания);
			
		КонецЕсли; 
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияДатаНачалаПриИзменении(Элемент)
	
	Если ФОИспользоватьАналоги Тогда
		
		ТекРемонтID = Элементы.РемонтыОборудования.ТекущиеДанные.ID;
		МассивID = Новый Массив;
		Для Каждого СтрокаРР Из Объект.РемонтныеРаботы Цикл
			Если СтрокаРР.РемонтыОборудования_ID = ТекРемонтID Тогда
				МассивID.Добавить(СтрокаРР.ID);
			КонецЕсли;
		КонецЦикла;
		ОтметитьНаличиеАналогов(МассивID);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияОбъектРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Поле.Имя = "РемонтыОборудованияВРамкахОстановочного" И ЗначениеЗаполнено(ТекДанные.ВРамкахОстановочного) Тогда
			ОткрытьФорму("Документ.торо_ОстановочныеРемонты.Форма.ФормаДокумента", Новый Структура("Ключ, ID", ТекДанные.ВРамкахОстановочного, ТекДанные.ID), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтныхРабот
&НаКлиенте
Процедура ДеревоРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		УстановитьОтборСтрокПоЗатратам();
		
		Если ТекДанные.РемонтнаяРабота = "Ремонтные работы" Тогда
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Истина;			
		Иначе
			Элементы.ДеревоРемонтныхРаботКоличество.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;	
	
	ТекСтрокаДРР = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные; 
	ТекСтрокаРО  = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот = Новый Структура();
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("МатериальныеЗатраты");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("Инструменты");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("ТрудовыеЗатраты");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("ИсполнителиРемонтныхРабот");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("РемонтныеРаботы");
	мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот.Вставить("МерыБезопасности");
	
	торо_ЗаполнениеДокументовКлиент.УдалитьСтрокиЗатратОперации(Объект, "РемонтныеРаботы", ТекСтрокаДРР,ТекСтрокаРО.ID, мСтруктураТабличныхЧастейСвязанныхСДеревомРемонтныхРабот,ДеревоРемонтныхРабот);
	
	Структура = Новый Структура();
	Структура.Вставить(	"ИмяТЧ"                    , "РемонтныеРаботы");
	Структура.Вставить(	"Текущий_ID"               , ТекСтрокаРО.ID);
	Структура.Вставить(	"Наименование_Ремонты"     , "РемонтыОборудования_ID");
	Структура.Вставить(	"Наименование_ПолеРодитель", "Родитель_ID");
	Структура.Вставить(	"Наименование_ПолеЭлемент" , "ID");
	
	торо_ЗаполнениеДокументовКлиент.ЗаполнитьДеревоРемонтов(Структура, ДеревоРемонтныхРабот, Объект);
	
	Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрокаДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		
	Если ТекСтрокаДерева = Неопределено Тогда
		СтрокаРодитель = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID", "", "", "");
		ИДВыбраннойСтроки = "";
	Иначе
		СтрокаРодитель = ТекСтрокаДерева;
		ИДВыбраннойСтроки = ТекСтрокаДерева.ID;
	КонецЕсли;
	
	ТекРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если ТекРемонт <> Неопределено Тогда
		РемонтыОборудования_ID = ТекРемонт.ID;
		ДатаНачалаРемонта      = ТекРемонт.ДатаНачала;
	Иначе
		РемонтыОборудования_ID = "";
		ДатаНачалаРемонта      = Неопределено;       
	КонецЕсли;
	
	ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID, ДатаНачалаРемонта"
	, РемонтыОборудования_ID
	, СтрокаРодитель.ID
	, СтрокаРодитель.РемонтыОборудования_ID
	, СтрокаРодитель.Родитель_ID
	, ДатаНачалаРемонта);
	
	СтруктураПараметры = Новый Структура;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		МассивСтруктурВозврата = ДеревоРемонтныхРаботОбработкаВыбораНаСервереДляМассива(ВыбранноеЗначение, ТекущиеДанные, СтруктураПараметры);
	Иначе
		СтруктураВозврата = ДеревоРемонтныхРаботОбработкаВыбораНаСервере(ВыбранноеЗначение, ТекущиеДанные, СтруктураПараметры);
		МассивСтруктурВозврата = Новый Массив;
		МассивСтруктурВозврата.Добавить(СтруктураВозврата);
	КонецЕсли;
		
	Для Каждого ЭлементМассива Из МассивСтруктурВозврата Цикл
		Если ТипЗнч(ЭлементМассива) = Тип("Строка") Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		МассивСтрок = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ВыбранноеЗначение.СтрокаРемонтовОборудования.ID));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.РемонтыОборудования.ТекущаяСтрока = Идентиф;
			Если ФОИспользоватьОстановочные Тогда
				ОбновитьОстановочные(ВыбранноеЗначение.СтрокаРемонтовОборудования.ID);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") И ВыбранноеЗначение.Количество() > 0 И ТипЗнч(ВыбранноеЗначение[0]) = Тип("Структура") Тогда
		МассивСтрок = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ВыбранноеЗначение[0].СтрокаРемонтовОборудования.ID));
		Если МассивСтрок.Количество() Тогда
			Идентиф = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.РемонтыОборудования.ТекущаяСтрока = Идентиф;
			Если ФОИспользоватьОстановочные Тогда
				ОбновитьОстановочные(ВыбранноеЗначение[0].СтрокаРемонтовОборудования.ID);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	РемонтыОборудованияПриАктивизацииСтроки(Истина);
	ОбновитьНадписиВремениРаботы();
	
	Если ЗначениеЗаполнено(ИДВыбраннойСтроки) Тогда
		Идентификатор = Неопределено;
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("ID", Идентификатор, ДеревоРемонтныхРабот.ПолучитьЭлементы(), ИДВыбраннойСтроки, Ложь);
		Если Идентификатор <> Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Идентификатор;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыДереваРемРабот = ДеревоРемонтныхРабот.ПолучитьЭлементы();
	
	Если ЭлементыДереваРемРабот.Количество() > 0 Тогда
		Элементы.ДеревоРемонтныхРабот.Развернуть(ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор(),Истина);
		Если Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Неопределено Тогда
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = ДеревоРемонтныхРабот.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтныхРаботКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрока.Количество = 0 Тогда
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
	ID = ТекСтрока.ID;
	МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
	
	Если МассивСтрТЧ.Количество() Тогда
		СтрТЧ = МассивСтрТЧ[0];
		
		МассивСтрокДляПолученияКоэффициента = Новый Массив;
		СписокУпаковок = Новый СписокЗначений;
		
		КоличествоБуфер = ?(СтрТЧ.Количество = 0, 1, СтрТЧ.Количество);
		Коэффициент = ТекСтрока.Количество / КоличествоБуфер;
		СтрТЧ.Количество = ТекСтрока.Количество;
		
		// Пересчет количества в строках, где упаковки не указаны, с одновременным заполением массива строк для заполнения количества по упаковкам.
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(ТекСтрока, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
		// Пересчет количества в строках с упаковками
		Если МассивСтрокДляПолученияКоэффициента.Количество() > 0 Тогда
			СоответсвиеУпаковокИКоэффициентов = ПолучитьКоэффициентУпаковкиНаСервере(СписокУпаковок);	
			Для каждого Строка Из МассивСтрокДляПолученияКоэффициента Цикл
				Коэффициент = СоответсвиеУпаковокИКоэффициентов.Получить(Строка.ЕдиницаИзмерения);
				Если Коэффициент = Неопределено Тогда
					Коэффициент = 1;
				КонецЕсли; 
				Строка.КоличествоЕдиниц = Строка.Количество * Коэффициент;
			КонецЦикла; 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты
&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущийЭлемент.Имя = "МатериальныеЗатратыЕстьАналоги" Тогда
		ПодобратьАналогиНаКлиенте();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		Элемент.ТекущиеДанные.Качество = ПредопределенноеЗначение("Перечисление.ГрадацииКачества.Новый");
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,Номенклатура,ХарактеристикаНоменклатуры",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.Номенклатура,Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры)).Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная номенклатура уже добавлена.'"));
		КонецЕсли;
	ИначеЕсли НЕ НоваяСтрока Тогда
		Объект.МатериальныеЗатраты.Удалить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ФОИспользоватьАналоги И НЕ ОтменаРедактирования Тогда
		ТекСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		ОтметитьНаличиеАналогов(ТекСтрока.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоЕдиницПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыЗаказНаВнПотребление
&НаКлиенте
Процедура ДокументыЗаказНаВнПотреблениеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура("Ключ", ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьДокументыЗаказНаВнПотребление",ЭтаФорма);
		ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.Форма.ФормаДокумента",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыЗаказНаВнПотреблениеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущиеДанные = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЭлементТекДанные  = Элемент.ТекущиеДанные;
		Если Не ЭлементТекДанные = Неопределено Тогда
			ЭлементТекДанные.РемонтыОборудования_ID = ТекущиеДанные.ID;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты
&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекстПредупреждения = НСтр("ru = 'Трудовые затраты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекТрудовыеЗатраты = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		ТекТрудовыеЗатраты.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		ТекТрудовыеЗатраты.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("Квалификация,ID,РемонтыОборудования_ID",Элемент.ТекущиеДанные.Квалификация,Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID)).Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная квалификация уже добавлена.'"));
		КонецЕсли;
	ИначеЕсли НЕ НоваяСтрока Тогда
		Объект.ТрудовыеЗатраты.Удалить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		ТекДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТекДанные.ВремяРаботы);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
			ТекДанные.ВремяРаботы = ВыбранноеЗначение;
			ТекДанные.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);	
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыТекстНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) 	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		ОткрытьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", Новый Структура("ПродолжительностьВСекундах", ТекДанные.ВремяРаботы), Элементы.ТрудовыеЗатраты,,ВариантОткрытияОкна.ОтдельноеОкно,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМерыБезопасности

&НаКлиенте
Процедура МерыБезопасностиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	Если ТекСтрокаДереваРемонтныхРабот = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекСтрокаДереваРемонтныхРабот.РемонтнаяРабота) <> Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru='Меры безопасности можно добавлять только для технологических операций!'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.МерыБезопасности.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,МерыБезопасности",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.МерыБезопасности)).Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная мера безопасности уже добавлена.'"));
		КонецЕсли;
	ИначеЕсли НЕ НоваяСтрока Тогда
		Объект.МерыБезопасности.Удалить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструменты
&НаКлиенте
Процедура ИнструментыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.Инструменты.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,Инструмент",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.Инструмент)).Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный инструмент уже добавлен.'"));
		КонецЕсли;
	ИначеЕсли НЕ НоваяСтрока Тогда
		Объект.Инструменты.Удалить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.Инструменты.ТекущиеДанные.Инструмент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличестваИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекстПредупреждения = НСтр("ru = 'Инструменты можно указывать только для технологических операций!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИсполнителиРемонтныхРабот
&НаКлиенте
Процедура ИсполнителиРемонтныхРаботПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	ТекстПредупреждения = НСтр("ru = 'Исполнителей ремонтных работ можно указывать только для ремонтов!'");
	ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"), ТекстПредупреждения, Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРемонтныхРаботПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.ИсполнителиРемонтныхРабот.НайтиСтроки(Новый Структура("ID,РемонтыОборудования_ID,Исполнитель",Элемент.ТекущиеДанные.ID,Элемент.ТекущиеДанные.РемонтыОборудования_ID,Элемент.ТекущиеДанные.Исполнитель)).Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный исполнитель уже добавлен.'"));
		КонецЕсли;
	ИначеЕсли НЕ НоваяСтрока Тогда
		Объект.ИсполнителиРемонтныхРабот.Удалить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРемонтныхРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		Элемент.ТекущиеДанные.ID = ТекСтрокаДереваРемонтныхРабот.ID;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.РемонтыОборудования_ID;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРемонтныхРаботИсполнительПриИзменении(Элемент)
	Если ФОИспользоватьАналоги Тогда
		
		ТекДанныеРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
		МассивID = Новый Массив;
		ЗаполнитьМассивID(МассивID,ТекДанныеРабот);
		ОтметитьНаличиеАналогов(МассивID);
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиРемонтныхРаботДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные = Элементы.ИсполнителиРемонтныхРабот.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		Если НЕ ТипЗнч(ТекДанные.Исполнитель) = Тип("СправочникСсылка.Контрагенты") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Договор можно выбрать только для исполнителя-контрагента!";
			Сообщение.Сообщить();
			СтандартнаяОбработка = Ложь;
		КонецЕсли; 
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапчастиРемонта
&НаКлиенте
Процедура ЗапчастиРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.РемонтыОборудования.ТекущиеДанные = Неопределено тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, "Необходимо выбрать ремонт, для которого заполняется список запчастей!");
	КонецЕсли;
	
	//ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	//ТекстПредупреждения = НСтр("ru = 'Запчасти можно указывать только для технологических операций!'");
	//ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока И Не ОтменаРедактирования Тогда 
		
		Элемент.ТекущиеДанные.Качество = ПредопределенноеЗначение("Перечисление.ГрадацииКачества.Новый");
		ТекСтрокаДереваРемонтныхРабот = Элементы.РемонтыОборудования.ТекущиеДанные;
		Элемент.ТекущиеДанные.РемонтыОборудования_ID = ТекСтрокаДереваРемонтныхРабот.ID;
		
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если Объект.ЗапчастиРемонта.НайтиСтроки(Новый Структура("ХарактеристикаНоменклатуры,Номенклатура,РемонтыОборудования_ID",Элемент.ТекущиеДанные.ХарактеристикаНоменклатуры,Элемент.ТекущиеДанные.Номенклатура,Элемент.ТекущиеДанные.РемонтыОборудования_ID)).Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная запчасть уже добавлена.'"));
		КонецЕсли;
	ИначеЕсли НЕ НоваяСтрока Тогда
		Объект.ЗапчастиРемонта.Удалить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.ЗапчастиРемонта.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ЗапчастиРемонта.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗакрываемыеПредписания
&НаКлиенте
Процедура ЗакрываемыеПредписанияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	ТекДанныеРемОборуд = Элементы.РемонтыОборудования.ТекущиеДанные;
	Если ТекДанныеРемОборуд = Неопределено Тогда
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран ремонт оборудования.'"));
		Возврат;
		
	КонецЕсли;
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписанийОпераций",
	Новый Структура("ОбъектРемонтаДляОтбора", ТекДанныеРемОборуд.ОбъектРемонта), Элементы.ЗакрываемыеПредписания, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрываемыеПредписанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ТекСтрокаРемонта = Элементы.РемонтыОборудования.ТекущиеДанные;
		
		Если ТекСтрокаРемонта = Неопределено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран ремонт для прикрепления предписаний!'"));
			Возврат;
		КонецЕсли;
		
		СтрокиПредписания = Объект.ЗакрываемыеПредписания.НайтиСтроки(Новый Структура("ID", ВыбранноеЗначение.СтрокаРемонтовОборудования.ID));
		
		Если СтрокиПредписания.Количество() = 0 ИЛИ СтрокиПредписания[0].РемонтыОборудования_ID = ТекСтрокаРемонта.ID Тогда
			Если СтрокиПредписания.Количество() = 0 Тогда
				СтрокаПредписания = Объект.ЗакрываемыеПредписания.Добавить();
				
				СтрокаПредписания.ID 						= ВыбранноеЗначение.СтрокаРемонтовОборудования.ID;
				СтрокаПредписания.ОбъектРемонта 			= ВыбранноеЗначение.СтрокаРемонтовОборудования.ОбъектРемонта;
				СтрокаПредписания.ПлановаяДатаРемонта 		= ВыбранноеЗначение.СтрокаРемонтовОборудования.ПлановаяДата;
				СтрокаПредписания.Описание					= ВыбранноеЗначение.СтрокаРемонтовОборудования.ОписаниеРемонта;
				СтрокаПредписания.РемонтыОборудования_ID 	= ТекСтрокаРемонта.ID;
			КонецЕсли;
			
			УвеличиватьКоличествоОпераций = Ложь;
			СтрДерева = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
			ТекСтрокаДерева = Новый Структура("РемонтнаяРабота, ID, Родитель_ID", СтрДерева.РемонтнаяРабота, СтрДерева.ID, СтрДерева.Родитель_ID);
			
			Если ВыбранноеЗначение.Свойство("СтрокаРемонтныхРабот") Тогда
				ОбработкаВыборкаСтрокиРемРаботИзПредписаний(Неопределено, Неопределено, ВыбранноеЗначение,ВыбранноеЗначение.СтрокаРемонтныхРабот,ТекСтрокаРемонта, ТекСтрокаДерева, УвеличиватьКоличествоОпераций);
			ИначеЕсли ВыбранноеЗначение.Свойство("МассивСтрокРемонтныхРабот") Тогда
				
				ОбработкаВыборкаСтрокиРемРаботИзПредписанийНаСервере(ВыбранноеЗначение, ТекСтрокаРемонта.ID, ТекСтрокаДерева, УвеличиватьКоличествоОпераций);
				
			КонецЕсли;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранное предписание уже прикреплено за другим ремонтом!'"));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДокументыОснования
&НаКлиенте
Процедура ДокументыОснованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ДоступныеТипы = ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере();	
	Если ДоступныеТипы=Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Элементы.ДокументыОснованияДокументОснование.ОграничениеТипа =ДоступныеТипы;	
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ДокументыОснования.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДокументОснование) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Необходимо заполнить документ-основание!'");
			Сообщение.Сообщить();
		Иначе
			МасСтр = Объект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование", ТекДанные.ДокументОснование));
			Если МасСтр.Количество() > 1 Тогда 
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Данный документ-основание уже добавлен!'");
				Сообщение.Сообщить();
			Иначе
				Если СтруктураДанныхДоРедактирования[Элемент.Имя] <> Неопределено Тогда
					СтарыйДокОснование = СтруктураДанныхДоРедактирования[Элемент.Имя].ДокументОснование;
					Если ЗначениеЗаполнено(СтарыйДокОснование) И СтарыйДокОснование <> ТекДанные.ДокументОснование Тогда
						Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
						СтруктураПараметров = Новый Структура("Элемент, СтарыйДокОснование, НовыйДокОснование",Элемент, СтарыйДокОснование, ТекДанные.ДокументОснование);
						ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередИзменениемЗавершение",ЭтаФорма,СтруктураПараметров),Вопрос,РежимДиалогаВопрос.ДаНет);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияПередИзменениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	СтарыйДокОснование = ДополнительныеПараметры.СтарыйДокОснование;
	НовыйДокОснование = ДополнительныеПараметры.НовыйДокОснование;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ОчиститьСвязанныеТабличныеЧасти(СтарыйДокОснование);
		Элемент.ТекущиеДанные.ДокументОснование = НовыйДокОснование;
	Иначе
		Элемент.ТекущиеДанные.ДокументОснование = СтарыйДокОснование;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ДокументыОснованияПередУдалением(Элемент, Отказ)   	
	
	Вопрос = НСтр("ru = 'Связанные ремонтные работы будут очищены. Продолжить?'");
	Отказ = Истина;
	ПоказатьВопрос(Новый ОписаниеОповещения("ДокументыОснованияПередУдалениемЗавершение",ЭтаФорма,Новый Структура("Элемент",Элемент)),Вопрос,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры 

&НаКлиенте
Процедура ДокументыОснованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да И Элемент.ТекущиеДанные <> Неопределено Тогда
		ОчиститьСвязанныеТабличныеЧасти(Элемент.ТекущиеДанные.ДокументОснование);
		текСтрока = Объект.ДокументыОснования.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
		Объект.ДокументыОснования.Удалить(текСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
    УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ДобавитьЗаказ(Команда)
	
	Если НЕ Объект.Проведен Тогда 
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Заказ не внутреннее потребление можно формировать только на основании проведенной заявки!'"));
		Возврат;
		
	КонецЕсли;
	
	ТекущийРемонт = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если Не ТекущийРемонт = Неопределено Тогда
		
		МассивСтрокНоменклатуры = СформироватьМассивНоменклатурыКЗаказуСервере(ТекущийРемонт.ID);
		
		Если МассивСтрокНоменклатуры = Неопределено Тогда
			
			Ответ = Неопределено;
			
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьЗаказЗавершение", ЭтотОбъект, Новый Структура("ТекущийРемонт", ТекущийРемонт)), НСтр("ru = 'По ремонту отсутствуют материальные затраты или по всем материальным затратам
			|созданы заказы на потребление. Ввести новый заказ на внутреннее потребление?'"), РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;	
		
		ДобавитьЗаказФрагмент(МассивСтрокНоменклатуры, ТекущийРемонт);
		
		
	КонецЕсли; 
	
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", Новый Структура("ОтборПоСтатусам, МножественныйВыбор", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"), Истина), Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехОперацию(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", Новый Структура("МножественныйВыбор", Истина), Элементы.ДеревоРемонтныхРабот);		
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПредписаний(Команда)
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ФормаПодбораПредписаний",
	Новый Структура("Владелец", Объект.Ссылка), ЭтаФорма, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбора.Объект.ДокументыОснования.Очистить();
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		Если ТипЗнч(СтрокаДО.ДокументОснование) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
			ФормаПодбора.Объект.ДокументыОснования.Добавить().ДокументОснование = СтрокаДО.ДокументОснование;
		КонецЕсли;
	КонецЦикла;
	
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтов(Команда)
	
	ДокументыОснования = Новый СписокЗначений;
	
	Для Каждого СтрокаДО Из Объект.ДокументыОснования Цикл
		
		ДокументыОснования.Добавить(СтрокаДО.ДокументОснование);
		
	КонецЦикла;	                                                                                             
	
	Структура = Новый Структура("Владелец, ДокументыОснования, ЗакрыватьПриВыборе, Организация, Подразделение, Проведен", 
	Объект.Ссылка, ДокументыОснования, Ложь, Объект.Организация, Объект.Подразделение, Истина);
	
	ОткрытьФорму("Обработка.торо_ПодборРемонтныхРаботОборудования.Форма.ПодборРемонтовОборудованияИРемонтныхРабот", Структура, ЭтаФорма,, ВариантОткрытияОкна.ОтдельноеОкно, Объект.Ссылка, Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗаказНаВнПотребление(Команда)
	ТекущиеДанные = Элементы.ДокументыЗаказНаВнПотребление.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЗаказСсылка",ТекущиеДанные.ЗаказНаВнутреннееПотребление);
		СтруктураПараметров.Вставить("ID"         ,ТекущиеДанные.ID);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа",ЭтаФорма, СтруктураПараметров);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Выбранный документ будет помечен на удаление. Продолжить?'"),РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да,НСтр("ru = 'Удаление связи с заказом на внутреннее потребление'"));
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьСтатус(Команда)
	
	торо_РаботаССогласованиямиКлиент.УстановитьСтатус(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборОпераций(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите расположение ремонта!'"), 10); 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Ремонт нельзя включать в состав технологической операции!'"), 10); 
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора",, Элементы.ДеревоРемонтныхРабот);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ТекСтрокаДереваРемонтныхРабот = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ТекстПредупреждения = НСтр("ru = 'Материальные затраты можно указывать только для технологических операций!'");
	ИначеЕсли Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаИнструменты Тогда
		ТекстПредупреждения = НСтр("ru = 'Инструменты можно указывать только для технологических операций!'");
	Иначе
		//ТекстПредупреждения = НСтр("ru = 'Запчасти можно указывать только для технологических операций!'");
	КонецЕсли;
	
	Если Элементы.ПанельЗатрат.ТекущаяСтраница <> Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаЗапчасти Тогда
		ПроверкаТипаВСтрокеДереваРемонтныхРабот(ТекСтрокаДереваРемонтныхРабот, Тип("СправочникСсылка.торо_ТехнологическиеОперации"), ТекстПредупреждения, Отказ);
	КонецЕсли;
		
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	Если Элементы.ПанельЗатрат.ТекущаяСтраница = Элементы.ПанельЗатрат.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	Иначе
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор инструментов и техники'"));
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОстановочные(IDРемонта = Неопределено)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	торо_ОстановочныеРемонтыСрезПоследних.IDЗависимого КАК ID,
	|	торо_ОстановочныеРемонтыСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.торо_ОстановочныеРемонты.СрезПоследних(, IDЗависимого В (&ID)) КАК торо_ОстановочныеРемонтыСрезПоследних
	|ГДЕ
	|	НЕ торо_ОстановочныеРемонтыСрезПоследних.Отвязан";
	Запрос = Новый Запрос(ТекстЗапроса);
	Если IDРемонта = Неопределено Тогда
		Запрос.УстановитьПараметр("ID", Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID"));
	Иначе
		Запрос.УстановитьПараметр("ID", IDРемонта);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НайденныеСтроки = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID", Выборка.ID));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.ВРамкахОстановочного = Выборка.Регистратор;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	
	МассивIDДляПроверки = Объект.РемонтыОборудования.Выгрузить().ВыгрузитьКолонку("ID");
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Объект.Ссылка, МассивIDДляПроверки);
	
	Если Не МассивIDДляБлокировки = Неопределено Тогда
		
		Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
			СтрокаРемонта.БлокироватьДляИзменения = Не МассивIDДляБлокировки.Найти(СтрокаРемонта.ID) = Неопределено;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьДляРедактированияПоТекРемонту(БлокироватьДляИзменения)
	
	Элементы.ДеревоРемонтныхРабот.ТолькоПросмотр			= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.МатериальныеЗатраты.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.ДокументыЗаказНаВнПотребление.ТолькоПросмотр	= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.ТрудовыеЗатраты.ТолькоПросмотр					= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.Инструменты.ТолькоПросмотр						= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.ИсполнителиРемонтныхРабот.ТолькоПросмотр		= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.ЗапчастиРемонта.ТолькоПросмотр					= БлокироватьДляИзменения Или Не ПравоРедактирование;
	Элементы.МерыБезопасности.ТолькоПросмотр				= БлокироватьДляИзменения Или Не ПравоРедактирование;
	
	Элементы.ДокументыЗаказНаВнПотребелениеДобавитьЗаказ.Доступность				= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивноеДобавлениеЗаказовНаВнутреннееПотребление;
	Элементы.ДокументыЗаказНаВнПотребелениеУдалитьЗаказНаВнПотребление.Доступность	= Не БлокироватьДляИзменения И ПравоРедактирование И ПравоИнтерактивнаяПометкаУдаленияЗаказовНаВнутреннееПотребление;
	Элементы.ДеревоРемонтныхРаботДобавитьТехКарту.Доступность						= Не БлокироватьДляИзменения И ПравоРедактирование;
	Элементы.ДеревоРемонтныхРаботДобавитьТехОперацию.Доступность					= Не БлокироватьДляИзменения И ПравоРедактирование;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьХарактеристикиИспользуются(Номенклатура)
	
	Возврат НЕ Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать = Номенклатура.ИспользованиеХарактеристик;
	
КонецФункции

&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.МатериальныеЗатраты,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// При выборе корня дерева редактирование мат затрат недоступно
	
	СписокИменКолонок = Новый СписокЗначений;
	СписокИменКолонок.Добавить("ID");
	СписокИменКолонок.Добавить("ЕдиницаИзмерения");
	СписокИменКолонок.Добавить("НоменклатураЕдиницаИзмерения");
	СписокИменКолонок.Добавить("Количество");
	СписокИменКолонок.Добавить("Номенклатура");
	СписокИменКолонок.Добавить("ХарактеристикаНоменклатуры");
	СписокИменКолонок.Добавить("Качество");
	СписокИменКолонок.Добавить("РемонтыОборудования_ID");
	СписокИменКолонок.Добавить("КоличествоЕдиниц");
	СписокИменКолонок.Добавить("ЕстьАналоги");
	
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	Элемент.Использование = Истина;
	
	Для каждого ЭлементСписка Из СписокИменКолонок Цикл
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("МатериальныеЗатраты" + ЭлементСписка.Значение);
		
	КонецЦикла; 
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоРемонтныхРабот.Картинка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 4;
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста" , Новый Цвет (105,105,105));
	
	// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Использование = Истина;
	
	// Чтобы не отображалась единица измерения в Запчастях ремонта, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтаНоменклатураЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапчастиРемонта.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Использование = Истина;
	
	// Чтобы не отображалась единица измерения в Инструментах, когда заполнена Упаковка.
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнструментыИнструментЕдиницаИзмерения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.Инструменты.ЕдиницаИзмерения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	Элемент.Использование = Истина;

	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	Элемент.Использование = Истина;
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗапчастиРемонтаХарактеристикаНоменклатуры.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗапчастиРемонта.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
	Элемент.Использование = Истина;

	
	// доступость вида ремонта для редактирования
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РемонтыОборудованияВидРемонтныхРабот.Имя);
	
	
	ГруппаЭлементов = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементов.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	//
	ОтборЭлемента = ГруппаЭлементов.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПервыйДокументВЦепочке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	
	//// ИЛИ (	
	ГруппаЭлементовВложенная = ГруппаЭлементов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовВложенная.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ТипДокументаОснования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "торо_ВнешнееОснованиеДляРабот";
	///( И	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПоследнийДокументВЦепочке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	//) ИЛИ
	
	ГруппаЭлементовВложенная = ГруппаЭлементов.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовВложенная.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РемонтыОборудования.ТипДокументаОснования");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "торо_ВыявленныеДефекты";
	///( И	
	ОтборЭлемента = ГруппаЭлементовВложенная.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоПоследнийДокументВЦепочке");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь); 
	
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияСтатусДокумента.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияСогласующий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 1;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	//
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСогласованияЗамещающий.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСогласования.Уровень");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписиВремениРаботы()
	Для каждого Строка Из Объект.ТрудовыеЗатраты Цикл
		Строка.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Строка.ВремяРаботы);
	КонецЦикла; 	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьМассивID(МассивID,ЭлементДерева)
	МассивID.Добавить(ЭлементДерева.ID);
	Для Каждого ЭлементДерева1 Из ЭлементДерева.ПолучитьЭлементы() Цикл
		ЗаполнитьМассивID(МассивID,ЭлементДерева1);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПодборРемонтовОбработчикОжидания()
	
	ПодборРемонтов(Элементы.РемонтыОборудованияПодборРемонтов);
	
КонецПроцедуры

&НаСервере
Функция ДеревоРемонтныхРаботОбработкаВыбораНаСервере(ТехОперация, ТекущиеДанные, СтруктураПараметры)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонтаМодиф(ДокОбъект.РемонтныеРаботы, ТехОперация, ДокОбъект,"РемонтыОборудования", "РемонтныеРаботы", "ДокументыОснования", ТекущиеДанные, СтруктураПараметры);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ТипДокументаОснования = "" И СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаРемонта Из Объект.МатериальныеЗатраты Цикл
		СтрокаРемонта.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(СтрокаРемонта.Номенклатура);
	КонецЦикла;
	
	Для Каждого СтрокаРемонта Из Объект.ЗапчастиРемонта Цикл
		СтрокаРемонта.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(СтрокаРемонта.Номенклатура);
	КонецЦикла;

	Если ФОИспользоватьАналоги Тогда
		
		Если ТипЗнч(ТехОперация) = Тип("Структура") Тогда
			МассивID = Новый Массив;
			Для Каждого СтрокаРР Из ТехОперация.МассивСтрокРемонтныхРабот Цикл
				МассивID.Добавить(СтрокаРР.ID);
			КонецЦикла;
			ОтметитьНаличиеАналогов(МассивID);
		ИначеЕсли ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			ОтметитьНаличиеАналогов();
		ИначеЕсли ТипЗнч(ТехОперация) = тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Для Каждого СтрокаРР Из Объект.РемонтныеРаботы Цикл
				Если СтрокаРР.РемонтнаяРабота = ТехОперация Тогда
					ОтметитьНаличиеАналогов(СтрокаРР.ID);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция добавлена для обработки выбора сразу нескольких тех операций или тех карт.
&НаСервере
Функция ДеревоРемонтныхРаботОбработкаВыбораНаСервереДляМассива(МассивТехОпераций, ТекущиеДанные, СтруктураПараметры)

	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДеревоРеквизит = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	МассивСтруктурВозврата = Новый Массив;
	Для Каждого ЭлементМассива Из МассивТехОпераций Цикл
		СтруктураВозврата = торо_Ремонты.ОбработкаВыбораРемонтаМодиф(ДокОбъект.РемонтныеРаботы, ЭлементМассива, ДокОбъект,"РемонтыОборудования", "РемонтныеРаботы", "ДокументыОснования", ТекущиеДанные, СтруктураПараметры);
		МассивСтруктурВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ТипДокументаОснования = "" И СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаРемонта Из Объект.МатериальныеЗатраты Цикл
		СтрокаРемонта.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(СтрокаРемонта.Номенклатура);
	КонецЦикла;
	
	Для Каждого СтрокаРемонта Из Объект.ЗапчастиРемонта Цикл
		СтрокаРемонта.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(СтрокаРемонта.Номенклатура);
	КонецЦикла;

	Если ФОИспользоватьАналоги Тогда
		Для Каждого ЭлементМассива Из МассивТехОпераций Цикл
			Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
				МассивID = Новый Массив;
				Для Каждого СтрокаРР Из ЭлементМассива.МассивСтрокРемонтныхРабот Цикл
					МассивID.Добавить(СтрокаРР.ID);
				КонецЦикла;
				ОтметитьНаличиеАналогов(МассивID);
			ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				ОтметитьНаличиеАналогов();
			ИначеЕсли ТипЗнч(ЭлементМассива) = тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				Для Каждого СтрокаРР Из Объект.РемонтныеРаботы Цикл
					Если СтрокаРР.РемонтнаяРабота = ЭлементМассива Тогда
						ОтметитьНаличиеАналогов(СтрокаРР.ID);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	Возврат МассивСтруктурВозврата;

КонецФункции

&НаСервере
Процедура СоздатьВетвьДереваПоТЧ(СтрокаДерева, ТЧРемонтныеРаботы = Неопределено, ЕстьКартинка = Истина)
	
	Если Объект.РемонтныеРаботы.Количество() > 0 И ЗначениеЗаполнено(Объект.РемонтныеРаботы[0].ID) Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Родитель_ID", СтрокаДерева.ID);
		
		Если ТЧРемонтныеРаботы = Неопределено Тогда
			МассивСтрок = Объект.РемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		Иначе
			МассивСтрок = ТЧРемонтныеРаботы.НайтиСтроки(ПараметрыОтбора);
		КонецЕсли;
		Для Каждого Элемент Из МассивСтрок Цикл
			
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НовСтрокаДерева, Элемент);
			
			Если ЕстьКартинка Тогда  
				НовСтрокаДерева.Картинка = торо_Ремонты.ИндексКартинкиДереваРемонтныхРабот(Элемент.РемонтнаяРабота);
			КонецЕсли;
			
			СоздатьВетвьДереваПоТЧ(НовСтрокаДерева, ТЧРемонтныеРаботы, ЕстьКартинка);
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;		
	
КонецПроцедуры

&НаСервере
Процедура АктивироватьСтрокуИзВне(ТекСтрокаID) 
	
	ПараметрПоиска = Новый Структура;
	ПараметрПоиска.Вставить("ID",ТекСтрокаID); 
	НужнаяСтрока = Объект.РемонтыОборудования.НайтиСтроки(ПараметрПоиска);
	
	Элементы.РемонтыОборудования.ТекущаяСтрока = НужнаяСтрока[0].НомерСтроки-1;	
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыОборудованияПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	Строки = Новый массив;
	Для каждого инд из Элемент.ВыделенныеСтроки Цикл
		Строки.Добавить(инд);
	КонецЦикла;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для каждого идСтрока из Строки Цикл
			текСтрока = Объект.РемонтыОборудования.НайтиПоИдентификатору(идСтрока);
		
			ОчиститьСвязанныеТабличныеЧасти(, , текСтрока.ID);
			РемонтОборудованияУдаляется = Истина;
			Объект.РемонтыОборудования.Удалить(текСтрока);
			РемонтОборудованияУдаляется = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.РемонтыОборудования.Количество() = 0 Тогда
		ДеревоРемонтныхРабот.ПолучитьЭлементы().Очистить();
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСвязанныеТабличныеЧасти(ДокументОснование = Неопределено, ОбъектРемонта = Неопределено, Ремонт_ID = "")
	
	СтруктураТабличныхЧастей = Новый Структура ("ЗакрываемыеПредписания, ЗапчастиРемонтов, МерыБезопасности, Инструменты, ИсполнителиРемонтныхРабот, МатериальныеЗатраты, ТрудовыеЗатраты");
	
	
	Если ПустаяСтрока(Ремонт_ID) Тогда
		
		Если Не ДокументОснование = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ДокументИсточник", ДокументОснование));
			
		ИначеЕсли Не ОбъектРемонта = Неопределено Тогда
			
			СтрокиРО = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ОбъектРемонта", ОбъектРемонта));
			
		ИначеЕсли ОбъектРемонта = Неопределено И ДокументОснование = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;	
		
		Для Каждого ОчереднаяСтрока Из СтрокиРО Цикл
			
			СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
			
			Для Каждого СтрокаРР Из СтрокиРР Цикл
				
				Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
					
					Если КлючИЗначение.Ключ = "ЗапчастиРемонтов" Тогда
						Если Объект.ЗапчастиРемонта.Количество() > 0 Тогда
							СтрокиТЧ = Объект.ЗапчастиРемонта.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", ОчереднаяСтрока.ID));
							
							Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
								Объект.ЗапчастиРемонта.Удалить(СтрокаТЧ);
							КонецЦикла;   							
							
						КонецЕсли;
						
					Иначе					
						Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
							
							СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРР.ID, ОчереднаяСтрока.ID));
							
							Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
								Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
							КонецЦикла;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				Объект.РемонтныеРаботы.Удалить(СтрокаРР);
			КонецЦикла;
			
			Объект.РемонтыОборудования.Удалить(ОчереднаяСтрока);		
		КонецЦикла;
		
		Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
			Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
				Объект.РемонтныеРаботы.Очистить();
			КонецЕсли
		КонецЕсли;
		
		ЗаполнитьДеревоРемонтныхРаботНаСервере();
		
		
		Если Объект.РемонтныеРаботы.Количество() = 0 Тогда
			Объект.РемонтныеРаботы.Добавить();
			Элементы.ДеревоРемонтныхРабот.ТекущаяСтрока = Объект.РемонтныеРаботы[0].ПолучитьИдентификатор();
		КонецЕсли;
		
	Иначе
		
		СтрокиРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
		
		Для Каждого СтрокаРР Из СтрокиРР Цикл
			
			Для Каждого КлючИЗначение Из СтруктураТабличныхЧастей Цикл
				
				Если КлючИЗначение.Ключ = "ЗапчастиРемонтов" Тогда
					Если Объект.ЗапчастиРемонта.Количество() > 0 Тогда
						СтрокиТЧ = Объект.ЗапчастиРемонта.НайтиСтроки(Новый Структура("РемонтыОборудования_ID",  Ремонт_ID));
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект.ЗапчастиРемонта.Удалить(СтрокаТЧ);
						КонецЦикла;
						
						
					КонецЕсли;
				Иначе
					Если Объект[КлючИЗначение.Ключ].Количество() > 0 Тогда
						
						СтрокиТЧ = Объект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID, РемонтыОборудования_ID", СтрокаРР.ID, Ремонт_ID));;
						
						Для Каждого СтрокаТЧ Из СтрокиТЧ Цикл
							Объект[КлючИЗначение.Ключ].Удалить(СтрокаТЧ);
						КонецЦикла;
					КонецЕсли; 				
				КонецЕсли;  						
				
			КонецЦикла;
			Объект.РемонтныеРаботы.Удалить(СтрокаРР);
		КонецЦикла;
		
	КонецЕсли;
	
	Если Объект.РемонтныеРаботы.Количество() > 0 Тогда
		Если ПустаяСтрока(Объект.РемонтныеРаботы[0].ID) Тогда
			Объект.РемонтныеРаботы.Очистить();
		КонецЕсли
	КонецЕсли;
	
	СтрокиЗапчастей = Объект.ЗапчастиРемонта.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", Ремонт_ID));
	
	Для Каждого СтрокаТЧ Из СтрокиЗапчастей Цикл
		Объект.ЗапчастиРемонта.Удалить(СтрокаТЧ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРемонтныхРаботНаСервере(РемонтыОборудования_ID = Неопределено)
	
	ДеревоСФормы = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	
	ДеревоСФормы.Строки.Очистить();
	
	КорневаяСтрока = ДеревоСФормы.Строки.Добавить();
	КорневаяСтрока.РемонтнаяРабота = "Ремонтные работы";	
	КорневаяСтрока.Картинка = 4;
	
	Если Не РемонтыОборудования_ID = Неопределено Тогда
		ТЗРемонтныеРаботы = Объект.РемонтныеРаботы.Выгрузить(Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID", РемонтыОборудования_ID)));
	Иначе
		ТЗРемонтныеРаботы = Неопределено;
	КонецЕсли;                                                       
	
	СоздатьВетвьДереваПоТЧ(КорневаяСтрока, ТЗРемонтныеРаботы);
	
	ЗначениеВРеквизитФормы(ДеревоСФормы, "ДеревоРемонтныхРабот");
	
КонецПроцедуры


&НаСервере
Процедура ОбработкаВыборкаСтрокиРемРаботИзПредписанийНаСервере(ВыбранноеЗначение, ТекСтрокаРемонтаID, ТекСтрокаДерева, УвеличиватьКоличествоОпераций)
	
	Дерево = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока из ВыбранноеЗначение.МассивСтрокРемонтныхРабот Цикл
		ДанныеТекСтроки = Новый Структура("ID, РемонтыОборудования_ID, Родитель_ID, РемонтнаяРабота, Количество", 
		ТекСтрока.ID, ТекСтрока.РемонтыОборудования_ID, ТекСтрока.Родитель_ID, ТекСтрока.РемонтнаяРабота, ТекСтрока.Количество);
		ОбработкаВыборкаСтрокиРемРаботИзПредписаний(ДокОбъект, Дерево, ВыбранноеЗначение,ДанныеТекСтроки,ТекСтрокаРемонтаID, ТекСтрокаДерева, УвеличиватьКоличествоОпераций);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "ДеревоРемонтныхРабот");
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыборкаСтрокиРемРаботИзПредписаний(ДокОбъект, Дерево, ВыбранноеЗначение,ТекСтрока,ТекСтрокаРемонтаID, ТекСтрокаДерева, УвеличиватьКоличествоОпераций)
	
	Если Дерево = Неопределено Тогда
		Дерево = РеквизитФормыВЗначение("ДеревоРемонтныхРабот");
	КонецЕсли;
	
	Если ДокОбъект = Неопределено Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;
	
	МассивСтрокОпераций = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("РемонтыОборудования_ID,РемонтнаяРабота",ТекСтрокаРемонтаID, ТекСтрока.РемонтнаяРабота));
	
	Если МассивСтрокОпераций.Количество() = 0 Тогда
		
		СтрокиДерева = Дерево.Строки.НайтиСтроки(Новый Структура("РемонтнаяРабота, ID, Родитель_ID", ТекСтрокаДерева.РемонтнаяРабота, ТекСтрокаДерева.ID, ТекСтрокаДерева.Родитель_ID), Истина);
		Если СтрокиДерева.Количество() Тогда
			СтрокаДерева = СтрокиДерева[0];
			Если ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
				Пока ТипЗнч(СтрокаДерева.РемонтнаяРабота) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Цикл
					СтрокаДерева = СтрокаДерева.Родитель;
				КонецЦикла;
			КонецЕсли;
			
			СтрокаРодитель = СтрокаДерева;
			
			РемонтыОборудования_ID = ТекСтрокаРемонтаID;
			
			ТекущиеДанные = Новый Структура("ТекущийРемонт_ID, СтрокаРодитель_ID, СтрокаРодительРемонтыОборудования_ID, СтрокаРодительРодитель_ID",
			РемонтыОборудования_ID,СтрокаРодитель.ID, СтрокаРодитель.РемонтыОборудования_ID, СтрокаРодитель.Родитель_ID);
			
			ОбработкаВыбораРемонтаНаСервере(Дерево, ДокОбъект, ТекСтрока, ТекущиеДанные);
			
		КонецЕсли;
		
	Иначе
		
		Если УвеличиватьКоличествоОпераций Тогда 
			
			УвеличиватьКоличествоОперацийНаСервере(Дерево, ДокОбъект, ТекСтрока, ТекСтрокаРемонтаID);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УвеличиватьКоличествоОперацийНаСервере(Дерево, ДокОбъект, ТекСтрока, ТекСтрокаРемонтаID)
	
	МассивСтрокДерева = Дерево.Строки.НайтиСтроки(Новый Структура("РемонтыОборудования_ID,РемонтнаяРабота",ТекСтрокаРемонтаID, ТекСтрока.РемонтнаяРабота),Истина);
	
	Для каждого ТекСтрокаДерева Из МассивСтрокДерева Цикл
		ТекСтрокаДерева.Количество = ТекСтрокаДерева.Количество + ТекСтрока.Количество;
		
		ID = ТекСтрокаДерева.ID;
		СтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если СтрТЧ.Количество() Тогда
			
			КоличествоБуфер = СтрТЧ[0].Количество;
			Коэффициент = ?(КоличествоБуфер = 0, 1, (СтрТЧ[0].Количество + ТекСтрока.Количество) / КоличествоБуфер);
			СтрТЧ[0].Количество = СтрТЧ[0].Количество + ТекСтрока.Количество;
			
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораРемонтаНаСервере(Дерево, ДокОбъект, ТекСтрока, ТекущиеДанные)
	
	торо_Ремонты.ОбработкаВыбораРемонта(Дерево, ТекСтрока.РемонтнаяРабота, ДокОбъект,ДокОбъект.РемонтыОборудования,ДокОбъект.РемонтныеРаботы,ДокОбъект.ДокументыОснования,ТекущиеДанные,Новый Структура);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор строк табличных полей затрат по строке  дерева ремонтных работ.
//
Процедура УстановитьОтборСтрокПоЗатратам()
	
	ТекСтрокаДереваРемонтов       = Элементы.ДеревоРемонтныхРабот.ТекущиеДанные;
	ТекСтрокаРемонтовОборудования = Элементы.РемонтыОборудования.ТекущиеДанные;
	
	Если НЕ ТекСтрокаДереваРемонтов = Неопределено И НЕ ТекСтрокаРемонтовОборудования = Неопределено Тогда
		
		ID_Отбора = ТекСтрокаДереваРемонтов.ID;
		
		Если ТекСтрокаРемонтовОборудования <> Неопределено Тогда
			
			ID_ОтбораРемонтов = ТекСтрокаРемонтовОборудования.ID;
			
			// Материальные затраты.
			Элементы.МатериальныеЗатраты.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Трудовые затраты.
			Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Инструменты.
			Элементы.Инструменты.ОтборСтрок               = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Меры безопасности.
			Элементы.МерыБезопасности.ОтборСтрок          = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
			// Исполнители ремонтных работ.
			Элементы.ИсполнителиРемонтныхРабот.ОтборСтрок = Новый ФиксированнаяСтруктура("ID, РемонтыОборудования_ID", ID_Отбора, ID_ОтбораРемонтов);
			
		Иначе
			// Материальные затраты.
			Элементы.МатериальныеЗатраты.ОтборСтрок       = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Трудовые затраты.
			Элементы.ТрудовыеЗатраты.ОтборСтрок           = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Инструменты.
			Элементы.Инструменты.ОтборСтрок               = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Меры безопасности.
			Элементы.МерыБезопасности.ОтборСтрок          = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
			
			// Исполнители ремонтных работ.
			Элементы.ИсполнителиРемонтныхРабот.ОтборСтрок = Новый ФиксированнаяСтруктура("ID", ID_Отбора);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет проверку типа ремонтной работы в строке дерева ремонтных работ.
// 
Процедура ПроверкаТипаВСтрокеДереваРемонтныхРабот(СтрокаДерева, ТипДляСравнения, ТекстПредупреждения, Отказ)
	
	Если СтрокаДерева = Неопределено Тогда
		Отказ =  Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана ремонтная работа для отнесения затрат!'"));
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(СтрокаДерева.РемонтнаяРабота) = ТипДляСравнения Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборыСвязанныхТаблицРемонты(ID)
	
	Элементы.ЗапчастиРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("РемонтыОборудования_ID",ID);
	Элементы.ДокументыЗаказНаВнПотребление.ОтборСтрок = Новый ФиксированнаяСтруктура("ID",ID);
	
КонецПроцедуры

&НаКлиенте
// Процедура пересчитывает количество в строках дерева ремонтных работ.
//
Процедура ПересчитатьКоличествоВПодчиненныхСтроках(СтрокаДерева, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок)
	
	Для Каждого СтрДерева Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ID = СтрДерева.ID;
		
		МассивСтрТЧ = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID", ID));
		Если МассивСтрТЧ.Количество() Тогда
			
			СтрТЧ = МассивСтрТЧ[0];
			СтрТЧ.Количество = СтрТЧ.Количество * Коэффициент;
			
			СтрДерева.Количество = СтрТЧ.Количество;
			
		КонецЕсли;
		
		ПересчитатьЗатратыПоКоличеству(ID, Коэффициент , МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
		ПересчитатьКоличествоВПодчиненныхСтроках(СтрДерева, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок);
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет пересчет затрат по количеству операций.
//
Процедура ПересчитатьЗатратыПоКоличеству(ID, Коэффициент, МассивСтрокДляПолученияКоэффициента, СписокУпаковок)
	
	МассивСтрокМЗ = Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	
	Для Каждого СтрокаТЧ Из МассивСтрокМЗ Цикл
		
		СтрокаТЧ.Количество = СтрокаТЧ.Количество * Коэффициент;
		
		Если ЗначениеЗаполнено(СтрокаТЧ.ЕдиницаИзмерения) Тогда
			
			МассивСтрокДляПолученияКоэффициента.Добавить(СтрокаТЧ);
			
			Если СписокУпаковок.НайтиПоЗначению(СтрокаТЧ.ЕдиницаИзмерения) = Неопределено Тогда
				СписокУпаковок.Добавить(СтрокаТЧ.ЕдиницаИзмерения);
			КонецЕсли;
			
		Иначе
			
			СтрокаТЧ.КоличествоЕдиниц = СтрокаТЧ.Количество * 1;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	МассивСтрокТЗ = Объект.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID", ID));
	
	Для Каждого СтрокаТЧ Из МассивСтрокТЗ Цикл
		
		СтрокаТЧ.ВремяРаботы      = СтрокаТЧ.ВремяРаботы * Коэффициент;
		СтрокаТЧ.ВремяРаботыТекст = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(СтрокаТЧ.ВремяРаботы);
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриСменеЗначенийКоличестваИлиУпаковки(ТекущиеДанные, ИзменениеКоличестваЕдиниц = Ложь)
	
	КоэффициентУпаковки = 0;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ЕдиницаИзмерения) Тогда
		КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиНаСервере(ТекущиеДанные.ЕдиницаИзмерения);	
	КонецЕсли; 
	
	Если КоэффициентУпаковки = 0 Тогда
		КоэффициентУпаковки = 1;
	КонецЕсли; 
	
	Если ИзменениеКоличестваЕдиниц Тогда
		
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоЕдиниц / КоэффициентУпаковки;
		
	Иначе	
		
		ТекущиеДанные.КоличествоЕдиниц = ТекущиеДанные.Количество * КоэффициентУпаковки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	Если ТипЗнч(Упаковка) = Тип("СписокЗначений") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	УпаковкиНоменклатуры.Ссылка КАК Ключ,
		|	УпаковкиНоменклатуры.Коэффициент КАК Значение
		|ИЗ
		|	Справочник.УпаковкиНоменклатуры КАК УпаковкиНоменклатуры
		|ГДЕ
		|	УпаковкиНоменклатуры.Ссылка В(&Ссылка)";
		
		Запрос.УстановитьПараметр("Ссылка", Упаковка);
		РезультатЗапроса = Запрос.Выполнить();
		Если не РезультатЗапроса.Пустой() Тогда
			СоответствиеДляВозврата = Новый Соответствие;
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				СоответствиеДляВозврата.Вставить(Выборка.Ключ,Выборка.Значение);
			КонецЦикла; 
			Возврат СоответствиеДляВозврата;
		КонецЕсли;
		Возврат Новый Соответствие;
	Иначе
		Возврат Упаковка.Коэффициент;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЗаказЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущийРемонт = ДополнительныеПараметры.ТекущийРемонт;
	
	
	// Значение неопределено, когда вся имеющаяся в заявке номенклатура уже есть в документе заказ на вн потребл.
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МассивСтрокНоменклатуры = Новый Массив;
	Иначе
		Возврат;
	КонецЕсли;
	
	
	ДобавитьЗаказФрагмент(МассивСтрокНоменклатуры, ТекущийРемонт);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаказФрагмент(Знач МассивСтрокНоменклатуры, Знач ТекущийРемонт)
	
	Перем ОписаниеОповещения, СтруктураПараметров, СтруктураПередаваемыхВОбработчикПараметров;
	
	СтруктураПараметров = Новый Структура();
	
	СтрокаКомментарий = НСтр(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("ru = 'Смета ремонта (Заявка на ремонт) %1 от %2 %3 %4 %5'",
																					Объект.Номер, Объект.Дата, ТекущийРемонт.ОбъектРемонта, ТекущийРемонт.ВидРемонтныхРабот,
																					Формат(ТекущийРемонт.ДатаНачала, НСтр("ru = 'ДФ=dd.MM.yyyy'"))));
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("МассивСтрокНоменклатуры"	, МассивСтрокНоменклатуры);
	ЗначенияЗаполнения.Вставить("ДатаОтгрузки"				, ТекущийРемонт.ДатаНачала);
	ЗначенияЗаполнения.Вставить("Комментарий"				, СтрокаКомментарий);
	ЗначенияЗаполнения.Вставить("Организация"				, Объект.Организация);
	ЗначенияЗаполнения.Вставить("Подразделение"				, Объект.Подразделение);
	
	СтруктураПараметров.Вставить("ЗначенияЗаполнения"		, ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("КлючНазначенияИспользования", "СОЗДАНИЕ_ЗАКАЗА_ИЗ_ТОИР");
	
	СтруктураПередаваемыхВОбработчикПараметров = Новый Структура;
	СтруктураПередаваемыхВОбработчикПараметров.Вставить("ТекущийРемонт_ID",ТекущийРемонт.ID);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов",ЭтаФорма,СтруктураПередаваемыхВОбработчикПараметров);
	ОткрытьФорму("Документ.ЗаказНаВнутреннееПотребление.Форма.ФормаДокумента",СтруктураПараметров,ЭтаФорма,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивНоменклатурыКЗаказуСервере(ID)
	
	УжеЗаказаннаяНоменклатура = ПолучитьТаблицуЗаказаннойНоменклатуры(ID);
	
	НоменклатураКСписанию = Объект.МатериальныеЗатраты.Выгрузить(Новый Структура("РемонтыОборудования_ID",ID));
	
	НоменклатураКСписанию.Свернуть("Номенклатура, ХарактеристикаНоменклатуры", "КоличествоЕдиниц");
	
	Товары = Новый Массив;
	
	Для каждого Строка Из НоменклатураКСписанию Цикл
		
		КоличествоУжеЗаказаннойНоменклатуры = 0;
		
		Если УжеЗаказаннаяНоменклатура.Количество() > 0 Тогда
			НайдСтроки = УжеЗаказаннаяНоменклатура.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура,Строка.ХарактеристикаНоменклатуры));
			
			
			Если Не НайдСтроки = Неопределено Тогда
				Для каждого НайденнаяСтрока Из НайдСтроки Цикл
					КоличествоУжеЗаказаннойНоменклатуры = КоличествоУжеЗаказаннойНоменклатуры + НайденнаяСтрока.Количество;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
		
		Если УжеЗаказаннаяНоменклатура.Количество() = 0
			ИЛИ Строка.КоличествоЕдиниц > КоличествоУжеЗаказаннойНоменклатуры Тогда
			
			Структура = Новый Структура("Номенклатура, Характеристика, Количество",
			Строка.Номенклатура,
			Строка.ХарактеристикаНоменклатуры,
			(Строка.КоличествоЕдиниц - КоличествоУжеЗаказаннойНоменклатуры));
			Товары.Добавить(Структура);
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если Товары.Количество() > 0 Тогда
		Возврат Товары;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуЗаказаннойНоменклатуры(ID)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ИнтеграцияДокументов.ДокументЕРП
	|ПОМЕСТИТЬ втДокументыНаОсновании
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|ГДЕ
	|	торо_ИнтеграцияДокументов.ID = &ID
	|	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказыНаВнутреннееПотребление.Номенклатура,
	|	ЗаказыНаВнутреннееПотребление.Характеристика,
	|	СУММА(ВЫБОР
	|			КОГДА ЗаказыНаВнутреннееПотребление.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА 1
	|			ИНАЧЕ -1
	|		КОНЕЦ * ЗаказыНаВнутреннееПотребление.КОформлению) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗаказыНаВнутреннееПотребление КАК ЗаказыНаВнутреннееПотребление
	|ГДЕ
	|	ЗаказыНаВнутреннееПотребление.Регистратор В
	|			(ВЫБРАТЬ
	|				втДокументыНаОсновании.ДокументЕРП КАК Регистратор
	|			ИЗ
	|				втДокументыНаОсновании КАК втДокументыНаОсновании)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыНаВнутреннееПотребление.Характеристика,
	|	ЗаказыНаВнутреннееПотребление.Номенклатура";
	
	Запрос.УстановитьПараметр("ID", ID);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
	
КонецФункции

&НаКлиенте 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументов(Результат, ДополнительныеПараметры) Экспорт
	ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры);	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьИзменитьЗаписиВРегистреТоро_ИнтеграцияДокументовСервер(Результат, ДополнительныеПараметры)
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ИнтеграцияДокументов.ДокументЕРП
		|ИЗ
		|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
		|ГДЕ
		|	торо_ИнтеграцияДокументов.ID = &ID
		|	И торо_ИнтеграцияДокументов.ДокументТОИР = &Ссылка
		|	И торо_ИнтеграцияДокументов.ДокументЕРП  = &СсылкаНаДокЕРП";
		
		Запрос.УстановитьПараметр("ID",ДополнительныеПараметры.ТекущийРемонт_ID);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.УстановитьПараметр("СсылкаНаДокЕРП", ДополнительныеПараметры.Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ДополнительныеПараметры.ТекущийРемонт_ID, Объект.Ссылка, ДополнительныеПараметры.Ссылка);
		КонецЕсли; 
		
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьВРегистрТоро_ИнтеграцияДокументовНаСервере(ID, ДокументТОИР, ДокументЕРП)
	
	Если Не ДокументЕРП = Документы.ЗаказНаВнутреннееПотребление.ПустаяСсылка() Тогда
		Запись = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		Запись.ID           = ID;
		Запись.ДокументТОИР = ДокументТОИР;
		Запись.ДокументЕРП  = ДокументЕРП;
		Запись.Записать();
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыЗаказНаВнПотребление(Парам1 = Неопределено, Парам2 = Неопределено) Экспорт
	 ОбновитьДокументыЗаказНаВнПотреблениеСервер(Парам1, Парам2);
КонецПроцедуры

&НаСервере
Процедура ОбновитьДокументыЗаказНаВнПотреблениеСервер(Парам1 = Неопределено, Парам2 = Неопределено)
	
	ДокументыЗаказНаВнПотребление.Очистить();
	
	СписокID = Объект.РемонтыОборудования.Выгрузить(,"ID");
	Запрос  = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ИнтеграцияДокументов.ДокументЕРП КАК ЗаказНаВнутреннееПотребление,
	|	ВЫБОР
	|		КОГДА торо_ИнтеграцияДокументов.ДокументТОИР = &ЭтотДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаказИзЭтогоДокумента,
	|	ВЫБОР
	|		КОГДА торо_ИнтеграцияДокументов.ДокументЕРП.Проведен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинки,
	|	торо_ИнтеграцияДокументов.ID
	|ИЗ
	|	РегистрСведений.торо_ИнтеграцияДокументов КАК торо_ИнтеграцияДокументов
	|ГДЕ
	|	торо_ИнтеграцияДокументов.ID В(&СписокID)
	|	И НЕ торо_ИнтеграцияДокументов.ДокументЕРП.ПометкаУдаления
	|	И ТИПЗНАЧЕНИЯ(торо_ИнтеграцияДокументов.ДокументЕРП) = ТИП(Документ.ЗаказНаВнутреннееПотребление)";
	Запрос.УстановитьПараметр("СписокID",СписокID);
	Запрос.УстановитьПараметр("ЭтотДокумент", Объект.Ссылка);
	
	ДокументыЗаказНаВнПотребление.Загрузить(Запрос.Выполнить().Выгрузить());
	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДействияПользователяПередУдалениемВнЗаказа(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаказПомечен = ПометитьЗаказНаСервере(ДополнительныеПараметры);
		Если ТипЗнч(ЗаказПомечен) <> Тип("Булево") Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ЗаказПомечен;
			Сообщение.Сообщить(); 
		КонецЕсли; 
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция ПометитьЗаказНаСервере(СтруктураПараметров)
	
	Попытка
		
		ОбъектЗаказ = СтруктураПараметров.ЗаказСсылка.ПолучитьОбъект();
		
		Если ОбъектЗаказ.Проведен Тогда
			ОбъектЗаказ.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЕсли;
		
		ОбъектЗаказ.ПометкаУдаления = Истина;
		ОбъектЗаказ.Записать();
		
		МенеджерЗаписи = РегистрыСведений.торо_ИнтеграцияДокументов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ID = СтруктураПараметров.ID;
		МенеджерЗаписи.ДокументЕРП  = СтруктураПараметров.ЗаказСсылка;
		МенеджерЗаписи.ДокументТОИР = Объект.Ссылка;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли; 
		
		ОбновитьДокументыЗаказНаВнПотреблениеСервер();
		
	Исключение
		
		Возврат ОписаниеОшибки();
		
	КонецПопытки; 
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ДокументыОснованияДокументОснованиеНачалоВыбораНаСервере()
	Возврат торо_СобытияФорм.ДокументыОснованияДокументОснованиеНачалоВыбора(ЭтаФорма);	
КонецФункции

&НаСервере
// Проверяет, есть ли документы, созданные на основании данного и документы, на оснвоании которого был введен текущий, 
// кроме Выявленных дефектов и Внешнего основания.
Функция ЭтоПервыйДокументВЦепочке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДокументыОснования.ДокументИсточник
	|ПОМЕСТИТЬ ДокументыОснования_
	|ИЗ
	|	&ДокументыОснования КАК ДокументыОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыОснования_.ДокументИсточник КАК Ссылка
	|ПОМЕСТИТЬ ТабДокументовППР
	|ИЗ
	|	ДокументыОснования_ КАК ДокументыОснования_
	|ГДЕ
	|	ДокументыОснования_.ДокументИсточник ССЫЛКА Документ.торо_ПланГрафикРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ТабДокументов
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка
	|ИЗ
	|	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК торо_АктПриемкиОборудованияРемонтыОборудования
	|ГДЕ
	|	торо_АктПриемкиОборудованияРемонтыОборудования.ДокументИсточник = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка
	|ИЗ
	|	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
	|ГДЕ
	|	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ДокументИсточник = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка
	|ИЗ
	|	Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ОстановочныеРемонтыСвязанныеРемонты
	|ГДЕ
	|	торо_ОстановочныеРемонтыСвязанныеРемонты.ДокументИсточник = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТабДокументов.Ссылка
	|ИЗ
	|	ТабДокументов КАК ТабДокументов
	|ГДЕ
	|	ТабДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабДокументовППР.Ссылка
	|ИЗ
	|	ТабДокументовППР КАК ТабДокументовППР";
	
	Запрос.УстановитьПараметр("ДокументыОснования", Объект.РемонтыОборудования.Выгрузить());
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции

&НаСервере
// Проверяет, есть ли документы, введенные на основании текущего.
Функция ЭтоПоследнийДокументВЦепочке()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_АктПриемкиОборудованияРемонтыОборудования.Ссылка
	|ПОМЕСТИТЬ ТабДокументов
	|ИЗ
	|	Документ.торо_АктПриемкиОборудования.РемонтыОборудования КАК торо_АктПриемкиОборудованияРемонтыОборудования
	|ГДЕ
	|	торо_АктПриемкиОборудованияРемонтыОборудования.ДокументИсточник = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ОстановочныеРемонтыСвязанныеРемонты.Ссылка
	|ИЗ
	|	Документ.торо_ОстановочныеРемонты.СвязанныеРемонты КАК торо_ОстановочныеРемонтыСвязанныеРемонты
	|ГДЕ
	|	торо_ОстановочныеРемонтыСвязанныеРемонты.ДокументИсточник = &ДокументОснование
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка
	|ИЗ
	|	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
	|ГДЕ
	|	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ДокументИсточник = &ДокументОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТабДокументов.Ссылка
	|ИЗ
	|	ТабДокументов КАК ТабДокументов
	|ГДЕ
	|	ТабДокументов.Ссылка.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Возврат Результат.Пустой();
	
КонецФункции

&НаСервере
Процедура РемонтыОборудованияОбновитьДокументыИсточники()
	
	
	Для Каждого СтрокаРемонта Из Объект.РемонтыОборудования Цикл
		Если СтрокаРемонта.ТипДокументаОснования = "" и СтрокаРемонта.ДокументИсточник <> Неопределено Тогда
			СтрокаРемонта.ТипДокументаОснования = СтрокаРемонта.ДокументИсточник.Метаданные().Имя;
		КонецЕсли;
	КонецЦикла; 
	
КонецПроцедуры


#Область Согласование

&НаСервере
Процедура ОбновитьДеревоСогласующих(НовыйСпособСогласования = Ложь) Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ОбновитьДеревоСогласующих(ЭтаФорма, НовыйСпособСогласования);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьРегистрыСогласования() Экспорт
	
	торо_РаботаСоСтатусамиДокументовСервер.ЗаписатьРегистрыСогласования(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостью(ДокОбъект)
	Элементы = ДокОбъект.Элементы;
	Объект = ДокОбъект.Объект;
	Элементы.ДеревоСогласованияУтвердитьСтатус.Доступность = ЗначениеЗаполнено(Объект.СпособСогласования);
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	торо_РаботаССогласованиямиКлиент.ОткрытьЗаписьИсторииСтатусов(ЭтаФорма, Элемент.ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область Аналоги

&НаСервере
Процедура ЗаменитьМатериалыНаАналоги(АдресВХранилище, Отказ = Ложь)
	
	ЗначенияРеквизитовНовыхСтрок = Новый Структура;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
	
	МассивКлючей						= Новый Массив;
	МассивУдаляемыхСтрок				= Новый Массив;
	ИзменяемыеСтроки					= Новый Соответствие;
	СтруктураОтбора						= Новый Структура;
	
	НаборыМатериалов					= ПолучитьИзВременногоХранилища(АдресВХранилище);
	
	// Проверяем возможность применения замены.
	
	Для Каждого СтрокаМатериал из НаборыМатериалов.Материалы Цикл
		
		СтруктураОтбора.Вставить("ID",СтрокаМатериал.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаМатериал.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаМатериал.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаМатериал.ХарактеристикаНоменклатуры);
		
		НайденныеСтроки = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не найдено строки с материалом: %1, %2.'"),СтруктураОтбора.Номенклатура,СтруктураОтбора.ХарактеристикаНоменклатуры));
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		СтрокаМатЗатрат = НайденныеСтроки[0];
		
		Если СтрокаМатЗатрат.Количество < СтрокаМатериал.Количество Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка применения аналога. Материала ""%1""недостаточно для замены.'"),СтрокаМатЗатрат.Номенклатура));
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		
		Если СтрокаМатЗатрат.Количество = СтрокаМатериал.Количество Тогда
			МассивУдаляемыхСтрок.Добавить(СтрокаМатЗатрат);
		Иначе
			ИзменяемыеСтроки.Вставить(СтрокаМатЗатрат,Новый Структура("КоличествоЕдиниц,Количество",СтрокаМатЗатрат.КоличествоЕдиниц - СтрокаМатериал.Количество,СтрокаМатЗатрат.Количество - СтрокаМатериал.КоличествоУпаковок));
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление строк или изменение количества.
	//
	Для Каждого СтрокаМатЗатрат из МассивУдаляемыхСтрок Цикл
		Объект.МатериальныеЗатраты.Удалить(СтрокаМатЗатрат);
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из ИзменяемыеСтроки Цикл
		КлючИЗначение.Ключ.Количество = КлючИЗначение.Значение.Количество;
		КлючИЗначение.Ключ.КоличествоЕдиниц = КлючИЗначение.Значение.КоличествоЕдиниц;
	КонецЦикла;
	
	// Добавление новых строк
	Для Каждого СтрокаАналога ИЗ НаборыМатериалов.Аналоги Цикл
		СтруктураОтбора.Вставить("ID",СтрокаАналога.ID);
		СтруктураОтбора.Вставить("РемонтыОборудования_ID",СтрокаАналога.РемонтыОборудования_ID);
		СтруктураОтбора.Вставить("Номенклатура", СтрокаАналога.Номенклатура);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаАналога.ХарактеристикаНоменклатуры);
		
		МассивСтрок = Объект.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаНоменклатуры = МассивСтрок[0];
			СтрокаНоменклатуры.Количество = СтрокаНоменклатуры.Количество + СтрокаАналога.Количество;
			СтрокаНоменклатуры.КоличествоЕдиниц = СтрокаНоменклатуры.КоличествоЕдиниц + СтрокаАналога.КоличествоЕдиниц;
		Иначе
			СтрокаНоменклатуры = Объект.МатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатуры,СтрокаАналога);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьАналогиНаКлиенте()
	СтрокаНоменклатуры = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если СтрокаНоменклатуры.ЕстьАналоги Тогда
		СтрокаРемонта = Объект.РемонтыОборудования.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.РемонтыОборудования_ID))[0];
		СтрокаРР = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаНоменклатуры.ID))[0];
		МассивСтрокРРТехКарта = Объект.РемонтныеРаботы.НайтиСтроки(Новый Структура("ID",СтрокаРР.Родитель_ID));
		Если МассивСтрокРРТехКарта.Количество() Тогда
			ТехКарта = МассивСтрокРРТехКарта[0].РемонтнаяРабота;
			МассивИсполнителей = Новый Массив;
			Для Каждого СтрокаИсполнителя Из Объект.ИсполнителиРемонтныхРабот.НайтиСтроки(Новый Структура("ID",МассивСтрокРРТехКарта[0].ID)) Цикл
				МассивИсполнителей.Добавить(СтрокаИсполнителя.Исполнитель);
			КонецЦикла;
		Иначе
			ТехКарта = ПредопределенноеЗначение("Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка");
			МассивИсполнителей = Новый Массив;
		КонецЕсли;
		СтруктураПараметров = (Новый Структура(
		"ID,РемонтыОборудования_ID,Номенклатура,
		|ХарактеристикаНоменклатуры,ЕдиницаИзмерения,КоличествоЕдиниц
		|,Количество, ОбъектРемонта, ВидРемонта,
		|МассивПодразделений, ТехКарта, ДатаРемонта",
		СтрокаНоменклатуры.ID,СтрокаНоменклатуры.РемонтыОборудования_ID,СтрокаНоменклатуры.Номенклатура,
		СтрокаНоменклатуры.ХарактеристикаНоменклатуры,СтрокаНоменклатуры.ЕдиницаИзмерения,СтрокаНоменклатуры.КоличествоЕдиниц,
		СтрокаНоменклатуры.Количество,СтрокаРемонта.ОбъектРемонта,СтрокаРемонта.ВидРемонтныхРабот,
		МассивИсполнителей,ТехКарта,СтрокаРемонта.ДатаНачала));
		
		ОткрытьФорму("ОбщаяФорма.торо_ФормаВыбораАналогаНоменклатурыДляРемонта",СтруктураПараметров,ЭтаФорма,Объект.Ссылка,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтметитьНаличиеАналогов(МассивКлючей = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.ID КАК ID,
	|	Таблица.Номенклатура КАК Номенклатура,
	|	Таблица.ХарактеристикаНоменклатуры КАК Характеристика,
	|	Таблица.РемонтыОборудования_ID КАК РемонтыОборудования_ID
	|ПОМЕСТИТЬ МатериалыИУслуги
	|ИЗ
	|	&Материалы КАК Таблица
	|&&БлокОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ID,
	|	Таблица.РемонтнаяРабота,
	|	Таблица.Родитель_ID,
	|	Таблица.РемонтыОборудования_ID
	|ПОМЕСТИТЬ РемРаботы
	|ИЗ
	|	&РемРаботы КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ID,
	|	ВЫРАЗИТЬ(Таблица.Исполнитель КАК Справочник.СтруктураПредприятия) КАК Исполнитель,
	|	Таблица.РемонтыОборудования_ID
	|ПОМЕСТИТЬ Исполнители
	|ИЗ
	|	&Исполнители КАК Таблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(Ремонты.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта) КАК ОбъектРемонта,
	|	Ремонты.ID КАК РемонтыОборудования_ID,
	|	Ремонты.ВидРемонтныхРабот,
	|	Ремонты.ДатаНачала
	|ПОМЕСТИТЬ Ремонты
	|ИЗ
	|	&Ремонты КАК Ремонты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МатериалыИУслуги.Номенклатура КАК Материал,
	|	МатериалыИУслуги.Характеристика КАК ХарактеристикаМатериала,
	|	ЕСТЬNULL(РемРаботыТехКарты.РемонтнаяРабота, ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка)) КАК ТехКарта,
	|	ЕСТЬNULL(Исполнители.Исполнитель, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК Подразделение,
	|	Ремонты.ОбъектРемонта.Организация КАК Организация,
	|	Ремонты.ВидРемонтныхРабот КАК ВидРемонта,
	|	Ремонты.ОбъектРемонта,
	|	Ремонты.ОбъектРемонта.Направление КАК НаправлениеОбъектаРемонта,
	|	Ремонты.ДатаНачала КАК ДатаРемонта,
	|	МатериалыИУслуги.ID,
	|	МатериалыИУслуги.РемонтыОборудования_ID
	|ПОМЕСТИТЬ ТаблицаНоменклатуры
	|ИЗ
	|	МатериалыИУслуги КАК МатериалыИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РемРаботы КАК РемРаботы
	|			ЛЕВОЕ СОЕДИНЕНИЕ РемРаботы КАК РемРаботыТехКарты
	|				ЛЕВОЕ СОЕДИНЕНИЕ Исполнители КАК Исполнители
	|				ПО РемРаботыТехКарты.ID = Исполнители.ID
	|			ПО РемРаботы.Родитель_ID = РемРаботыТехКарты.ID
	|				И (ВЫРАЗИТЬ(РемРаботы.РемонтнаяРабота КАК Справочник.торо_ТехнологическиеОперации) ССЫЛКА Справочник.торо_ТехнологическиеОперации)
	|				И (ВЫРАЗИТЬ(РемРаботыТехКарты.РемонтнаяРабота КАК Справочник.торо_ИдентификаторыТехКарт) ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	|		ПО МатериалыИУслуги.ID = РемРаботы.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Ремонты КАК Ремонты
	|		ПО МатериалыИУслуги.РемонтыОборудования_ID = Ремонты.РемонтыОборудования_ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНоменклатуры.Материал,
	|	ТаблицаНоменклатуры.ХарактеристикаМатериала,
	|	ТаблицаНоменклатуры.ID,
	|	ТаблицаНоменклатуры.РемонтыОборудования_ID,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА торо_АналогиНоменклатурыДляРемонтов.Регистратор ЕСТЬ NULL 
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ЕстьАналоги
	|ИЗ
	|	ТаблицаНоменклатуры КАК ТаблицаНоменклатуры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_АналогиНоменклатурыДляРемонтов КАК торо_АналогиНоменклатурыДляРемонтов
	|		ПО ТаблицаНоменклатуры.Материал = торо_АналогиНоменклатурыДляРемонтов.Материал
	|			И ТаблицаНоменклатуры.ХарактеристикаМатериала = торо_АналогиНоменклатурыДляРемонтов.ХарактеристикаМатериала
	|			И ТаблицаНоменклатуры.ДатаРемонта >= торо_АналогиНоменклатурыДляРемонтов.Период
	|			И (ВЫБОР
	|				КОГДА торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ТаблицаНоменклатуры.ДатаРемонта <= торо_АналогиНоменклатурыДляРемонтов.ПериодЗавершения
	|			КОНЕЦ)
	|			И (торо_АналогиНоменклатурыДляРемонтов.ТехКарта = ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка)
	|				ИЛИ ЕСТЬNULL(ТаблицаНоменклатуры.ТехКарта, ЗНАЧЕНИЕ(Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка)) = торо_АналогиНоменклатурыДляРемонтов.ТехКарта)
	|			И (торо_АналогиНоменклатурыДляРемонтов.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.Подразделение = ТаблицаНоменклатуры.Подразделение)
	|			И (торо_АналогиНоменклатурыДляРемонтов.ВидРемонта = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.ВидРемонта = ТаблицаНоменклатуры.ВидРемонта)
	|			И (торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ТаблицаНоменклатуры.НаправлениеОбъектаРемонта)
	|			И (торо_АналогиНоменклатурыДляРемонтов.НаправлениеОбъектаРемонта = ЗНАЧЕНИЕ(Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка)
	|				ИЛИ торо_АналогиНоменклатурыДляРемонтов.Организация = ТаблицаНоменклатуры.Организация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаНоменклатуры.Материал,
	|	ТаблицаНоменклатуры.ХарактеристикаМатериала,
	|	ТаблицаНоменклатуры.ID,
	|	ТаблицаНоменклатуры.РемонтыОборудования_ID";
	
	Запрос.УстановитьПараметр("Исполнители",Объект.ИсполнителиРемонтныхРабот.Выгрузить());
	Запрос.УстановитьПараметр("Материалы",Объект.МатериальныеЗатраты.Выгрузить());
	Запрос.УстановитьПараметр("РемРаботы",Объект.РемонтныеРаботы.Выгрузить());
	Запрос.УстановитьПараметр("Ремонты",Объект.РемонтыОборудования.Выгрузить());
	Запрос.УстановитьПараметр("МассивID",МассивКлючей);
	
	Если МассивКлючей = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&&БлокОтбора","");
	ИначеЕсли ТипЗнч(МассивКлючей) = Тип("Строка") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&&БлокОтбора","ГДЕ
		|	Таблица.ID = &МассивID");
	ИначеЕсли ТипЗнч(МассивКлючей) = Тип("Массив") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"&&БлокОтбора","ГДЕ
		|	Таблица.ID В (&МассивID)");
	Иначе
		Возврат;
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект.МатериальныеЗатраты.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,ID,РемонтыОборудования_ID",
		Выборка.Материал,Выборка.ХарактеристикаМатериала,Выборка.ID,Выборка.РемонтыОборудования_ID))[0].ЕстьАналоги = Выборка.ЕстьАналоги;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	РемонтыОборудования_ID = СтруктураСтроки.РемонтыОборудования_ID;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		Если ИмяТЧ = "МатериальныеЗатраты" ИЛИ ИмяТЧ = "ЗапчастиРемонта" Тогда
			СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, ID, Номенклатура, ХарактеристикаНоменклатуры", РемонтыОборудования_ID, ID, текСтрока.Номенклатура, текСтрока.Характеристика);
		Иначе
			СтруктураПоиска = Новый Структура("РемонтыОборудования_ID, ID, Инструмент", РемонтыОборудования_ID, ID, текСтрока.Номенклатура);
		КонецЕсли;
		
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			
			нс.ЕдиницаИзмерения 			= текСтрока.Упаковка;
			нс.Количество 					= текСтрока.КоличествоУпаковок * ?(ЗначениеЗаполнено(нс.Единицаизмерения), 1, КоэфУпаковкиВыбр);
					
			Если ИмяТЧ = "МатериальныеЗатраты" ИЛИ ИмяТЧ = "ЗапчастиРемонта" Тогда
				нс.ХарактеристикаНоменклатуры 	= текСтрока.Характеристика	
			КонецЕсли;

			Если ИмяТЧ = "МатериальныеЗатраты" Тогда
				нс.КоличествоЕдиниц = нс.Количество * КоэфУпаковкиВыбр;
			КонецЕсли;
		
			нс.ID 							= ID;
			нс.РемонтыОборудования_ID 		= РемонтыОборудования_ID;
						
		Иначе
			
			нс = НайС[0];
			
			КоэфУпаковкиСтар = ?(ЗначениеЗаполнено(нс.ЕдиницаИзмерения), нс.ЕдиницаИзмерения.Коэффициент, 1);
			КоличествоЕдиниц = (нс.Количество*КоэфУпаковкиСтар + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр);
			нс.Количество = КоличествоЕдиниц / КоэфУпаковкиВыбр;
			нс.ЕдиницаИзмерения = текСтрока.Упаковка;
			
			Если ИмяТЧ = "МатериальныеЗатраты" Тогда
				нс.КоличествоЕдиниц = КоличествоЕдиниц;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДокОсн = Элементы.ДокументыОснования.текущиеДанные.ДокументОснование;
	ФОИспользоватьСтатусыДокументов = ПолучитьЗначениеФОНаСервере("торо_ИспользоватьСтатусыДокументовТОиР");
	
	Если ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВыявленныеДефекты.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ПланГрафикРемонта.ФормаВыбора",Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
    ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаРегламентноеМероприятие.ФормаВыбора",Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ФормаВыбора",Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ТипЗнч(ДокОсн) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);		
	ИначеЕсли ДокОсн = Неопределено Тогда 
		СтандартнаяОбработка = Ложь;
		
		СписокВыбора = СформироватьСписокВыбораНаСервере();
		
		СписокВыбора.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение",ЭтотОбъект, Новый Структура("Элемент, ФОИспользоватьСтатусыДокументов", Элемент, ФОИспользоватьСтатусыДокументов)),НСтр("ru = 'Выбор типа данных'"));
	
	КонецЕсли;
	
	Если ДокОсн <> Неопределено Тогда
		ФормаВыбора.Открыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДокументыОснованияДокументОснованиеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	ФОИспользоватьСтатусыДокументов = ДополнительныеПараметры.ФОИспользоватьСтатусыДокументов;
	ВыбЭлемент = ВыбранныйЭлемент;
	
	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВыявленныеДефекты.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ПланГрафикРемонта.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ЗаявкаНаРемонт.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_НарядНаРегламентноеМероприятие.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_ВнешнееОснованиеДляРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным, ОтборПоСтатусам", Истина, ФОИспользоватьСтатусыДокументов),Элемент, ЭтотОбъект);
	ИначеЕсли ВыбЭлемент.Значение = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
		ФормаВыбора = ПолучитьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаВыбора", Новый Структура("ОтборПоПроведенным", Истина),Элемент, ЭтотОбъект)
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеФОНаСервере(ИмяФО)
	
	Возврат ПолучитьФункциональнуюОпцию(ИмяФО);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьСписокВыбораНаСервере()
	
	СписокВыбора = Новый СписокЗначений;
	
	Для каждого ТипОснования Из Метаданные.Документы.торо_ЗаявкаНаРемонт.ТабличныеЧасти.ДокументыОснования.Реквизиты.ДокументОснование.Тип.Типы() Цикл
		СписокВыбора.Добавить(ТипОснования);
	КонецЦикла;
	
	// Строки добавлены для учета настроек ввода на основании
	НаборЗаписейВводНаОсновании = РегистрыСведений.торо_ВводНаОсновании.СоздатьНаборЗаписей();
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Значение = "торо_ЗаявкаНаРемонт";
	НаборЗаписейВводНаОсновании.Отбор.ДокументВводимый.Использование = Истина;
	НаборЗаписейВводНаОсновании.Прочитать();
	
	Для каждого ЗаписьРегистр из НаборЗаписейВводНаОсновании Цикл
		Если НЕ ЗаписьРегистр.Значение Тогда
			СтрокаЛишняя = СписокВыбора.НайтиПоЗначению(Тип("ДокументСсылка."+ЗаписьРегистр.ДокументОснование));		
			Если СтрокаЛишняя <> Неопределено Тогда
				СписокВыбора.Удалить(СтрокаЛишняя);	
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	Если СписокВыбора.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Ввод данного документа на основании запрещен настройками ввода на основании.
		|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интерфейс и ввод документов.'"));
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиРемонтаХарактеристикаНоменклатурыСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.ЗапчастиРемонта.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.ЗапчастиРемонта.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.ЗапчастиРемонта.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.ЗапчастиРемонта.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
фПослеОчистки = Ложь;
РемонтОборудованияУдаляется = Ложь;

#КонецОбласти