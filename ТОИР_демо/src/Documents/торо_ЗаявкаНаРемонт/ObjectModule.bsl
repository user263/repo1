#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

перем СтруктураДанных Экспорт; // Содержит структуру данных о статусе документа (Начальный, СогласованиеЗавершено, ПроводитьДокумент, ШаблонСообщенияЭлектроннойПочты) 
										// из регистра сведений торо_МатрицаПереходаСтатусовДокументов. 
Перем БезусловнаяЗапись Экспорт; // Отключает проверки при записи документа

#Область ОбработчикиСобытий
Процедура ОбработкаЗаполнения(Основание)
	
	Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнойОтветственный");
	Если НЕ ЗначениеЗаполнено(Ответственный) тогда
		Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ВыявленныеДефекты") Тогда
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.торо_ВнешнееОснованиеДляРабот") Тогда
		
		Организация = Основание.Организация;
		Подразделение = Основание.Подразделение;
		
		ДокументыОснования.Добавить().ДокументОснование = Основание;
	
	КонецЕсли;	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	СписокТЧ = Новый Структура();
	СписокТЧ.Вставить("РемонтыОборудования", "Ремонты оборудования");
	СписокТЧ.Вставить("РемонтныеРаботы", "Ремонтные работы");
	СписокТЧ.Вставить("ДокументыОснования", "Документы основания");
	
	торо_ОбщегоНазначения.ПроверитьЗаполненностьТабличныхЧастей(ЭтотОбъект, СписокТЧ, Отказ);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Согласование++
	
	// Проверим использование статусов документов.
	
	ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ЗаявкаНаРемонт;
	мИспользоватьСогласованиеДокументов = торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(ВидДокумента);
	
	Если мИспользоватьСогласованиеДокументов Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ПроверитьРазрешениеПроведенияПоСтатусу(Ссылка, СпособСогласования, ДополнительныеСвойства, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли; 
	
	// Согласование--

	Если РемонтыОборудования.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В документе не заполнена табличная часть ремонтов оборудования. Проведение невозможно!'"));
		Отказ = истина;
		Возврат;
	КонецЕсли;
	
	Если РемонтныеРаботы.Количество() > 0 Тогда
		Если Не ЗначениеЗаполнено(РемонтныеРаботы[0].ID) Тогда
			РемонтныеРаботы.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = Строка(Ссылка);
	
	// Проверить заполнение ТЧ
	ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиИнструментыИТехника(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиЗапчасти(Отказ, Заголовок);
	ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(Отказ, Заголовок);
	
	Если ДокументыОснования.Количество()>0 Тогда
		ПроверитьДатуДокумента(Отказ, Заголовок);
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		УстановитьУправляемыеБлокировки();
		ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок);
		
	КонецЕсли;
	
	// закрытие предписаний (вырожденных в ремонты)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПредписанияСрезПоследних.ОбъектРемонта,
	               |	торо_ПредписанияСрезПоследних.ID,
	               |	торо_ПредписанияСрезПоследних.Описание,
	               |	торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта,
	               |	торо_ПредписанияСрезПоследних.Обработано,
	               |	торо_ПредписанияСрезПоследних.Период,
	               |	торо_ПредписанияСрезПоследних.Организация,
	               |	торо_ПредписанияСрезПоследних.Подразделение
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(
	               |			,
	               |			ID В (&ID)
	               |				И Регистратор <> &Регистратор) КАК торо_ПредписанияСрезПоследних";
			
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	Запрос.УстановитьПараметр("ID",РемонтыОборудования.Выгрузить(РемонтыОборудования.НайтиСтроки(Новый Структура("ЗакрываетПредписание",Истина)),"ID").ВыгрузитьКолонку("ID"));
	
	ТаблицаЗакрывамыхПредписаний = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ОбработанноеПредписание Из ТаблицаЗакрывамыхПредписаний Цикл
		
		Если ОбработанноеПредписание.Обработано Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки закрытого предписания по %1 (%2)'"),
				ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		ИначеЕсли ОбработанноеПредписание.Период >= Дата Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки предписания по %1 (%2) датой раньше даты регистрации!'"),
				ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		Иначе
			Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
			Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();	
			
			Движение.Период 				= Дата;
			Движение.ОбъектРемонта 			= ОбработанноеПредписание.ОбъектРемонта;
			Движение.ID 					= ОбработанноеПредписание.ID;
			Движение.Обработано 			= Истина;
			Движение.Описание 				= ОбработанноеПредписание.Описание;
			Движение.ПлановаяДатаРемонта 	= ОбработанноеПредписание.ПлановаяДатаРемонта;
			Движение.Организация 			= ОбработанноеПредписание.Организация;
			Движение.Подразделение 			= ОбработанноеПредписание.Подразделение;

		КонецЕсли;
	КонецЦикла;
	
	// закрытие предписаний с закладки закрываемые предписания
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаID.ID,
	               |	ТаблицаID.РемонтыОборудования_ID
	               |ПОМЕСТИТЬ ТаблицаID
	               |ИЗ
	               |	&ТаблицаID КАК ТаблицаID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПредписанияСрезПоследних.ОбъектРемонта,
	               |	торо_ПредписанияСрезПоследних.ID,
	               |	торо_ПредписанияСрезПоследних.Описание,
	               |	торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта,
	               |	торо_ПредписанияСрезПоследних.Обработано,
	               |	торо_ПредписанияСрезПоследних.Период,
	               |	ТаблицаID.РемонтыОборудования_ID,
	               |	торо_ПредписанияСрезПоследних.Организация,
	               |	торо_ПредписанияСрезПоследних.Подразделение
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(
	               |			,
	               |			ID В
	               |				(ВЫБРАТЬ
	               |					ТаблицаID.ID
	               |				ИЗ
	               |					ТаблицаID)) КАК торо_ПредписанияСрезПоследних
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаID КАК ТаблицаID
	               |		ПО торо_ПредписанияСрезПоследних.ID = ТаблицаID.ID";
			
	Запрос.УстановитьПараметр("ТаблицаID",ЗакрываемыеПредписания.Выгрузить(,"ID,РемонтыОборудования_ID"));
	ТаблицаЗакрывамыхПредписанийТЧ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ОбработанноеПредписание Из ТаблицаЗакрывамыхПредписанийТЧ Цикл
		
		Если ОбработанноеПредписание.Обработано Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки закрытого предписания по %1 (%2)'"),
					ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		ИначеЕсли ОбработанноеПредписание.Период >= Дата Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Попытка обработки предписания по %1 (%2) датой раньше даты регистрации!'"),
				ОбработанноеПредписание.ОбъектРемонта,ОбработанноеПредписание.Описание));
		Иначе
			Движения.торо_ВнешниеОснованияДляРабот.Записывать = Истина;
			Движение = Движения.торо_ВнешниеОснованияДляРабот.Добавить();	
			
			Движение.Период 				= Дата;
			Движение.ОбъектРемонта 			= ОбработанноеПредписание.ОбъектРемонта;
			Движение.ID 					= ОбработанноеПредписание.ID;
			Движение.Обработано 			= Истина;
			Движение.Описание 				= ОбработанноеПредписание.Описание;
			Движение.ПлановаяДатаРемонта 	= ОбработанноеПредписание.ПлановаяДатаРемонта;
			Движение.РемонтыОборудования_id = ОбработанноеПредписание.РемонтыОборудования_ID;
			Движение.Организация 			= ОбработанноеПредписание.Организация;
			Движение.Подразделение 			= ОбработанноеПредписание.Подразделение;

		КонецЕсли;
	КонецЦикла;
	
	Движения.торо_СтатусыДокументовЗаявок.Записывать = Истина;
	торо_РаботаСоСтатусамиДокументовСервер.УстановитьСтатусДокумента(Ссылка, Ссылка, Движения, Перечисления.торо_СтатусыДокументов.Зарегистрирован);
	торо_РаботаСоСтатусамиДокументовСервер.ИзменитьСтатусыДокументовОснований(Ссылка);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	торо_РаботаСоСтатусамиДокументовСервер.ОчиститьСогласованиеПриКопировании(ЭтотОбъект);
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Не Отказ Тогда
		ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ЗаявкаНаРемонт;
		торо_РаботаСоСтатусамиДокументовСервер.ПриЗаписиОбъекта(Ссылка, ВидДокумента, СпособСогласования, ДополнительныеСвойства,, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	МассивIDДляБлокировки = торо_Ремонты.МассивIDДляБлокировкиРемонтовОборудования(Ссылка, РемонтыОборудования.ВыгрузитьКолонку("ID"));
	Если МассивIDДляБлокировки <> Неопределено И МассивIDДляБлокировки.Количество() > 0 Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Невозможно отменить проведение документа, так как имеются созданные на его основании проведенные документы!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
	Если Не Отказ Тогда
		торо_РаботаСоСтатусамиДокументовСервер.ОтменаПроведения(Ссылка);
	КонецЕсли;	
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ДвиженияПоРегистрам(РежимПроведения, Отказ, Заголовок)
	
	ТаблицаРемонтныхРабот = ПодготовитьТаблицуРемонтныхРабот();
	ТаблицаМатериальныхЗатрат = СформироватьТаблицуМатериальныхЗатрат(ТаблицаРемонтныхРабот);
	ТаблицаТрудовыхЗатрат = СформироватьТаблицуТрудовыхЗатрат(ТаблицаРемонтныхРабот);
	ТаблицаЗапчастей = СформироватьТаблицуЗапчастей(ТаблицаРемонтныхРабот);
	
	ДвиженияПоРегистру_торо_Ремонты(РежимПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_ЗаявкиПоРемонтам(РежимПроведения, Отказ);
	
	ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТаблицаРемонтныхРабот, РежимПроведения, Отказ);
	
	// Движение по регистру "торо_ПлановыеМатериальныеЗатратыРемонтныхРабот".
	ДвиженияПоРегистру_торо_ПлановыеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ, Заголовок);
	
	// Движение по регистру "торо_ПлановыеТрудовыеЗатратыРемонтныхРабот".
	ДвиженияПоРегистру_торо_ПлановыеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ, Заголовок);
	
	// Движения по регистру накопления торо_ПлановыеЗатратыЗапчастей
	ДвиженияПоРегистру_торо_ПлановыеЗатратыЗапчастей(РежимПроведения, ТаблицаЗапчастей, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗапланированныеРемонтныеРаботы(ТаблицаРемонтныхРабот, РежимПроведения, Отказ)
	
	Движения.торо_ЗапланированныеРемонтныеРаботы.Записывать = Истина;
	
	Для каждого Стр Из ТаблицаРемонтныхРабот Цикл
	
		Движение = Движения.торо_ЗапланированныеРемонтныеРаботы.Добавить();
		
		Движение.Период = Дата;
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.IDОперации = Стр.ID;
		Движение.IDРемонта = Стр.РемонтыОборудования_ID;
		Движение.Родитель_ID = Стр.Родитель_ID;
		Движение.ПроцентОпераций = Стр.Количество * 100;
		Движение.ПроцентРемонта = Стр.ПроцентНевыполненныхРабот;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_Ремонты(РежимПроведения, Отказ)
	
	// Движения по регистру сведений торо_Ремонты
	Движения.торо_Ремонты.Записывать = Истина;
	Для Каждого СтрРемонта Из РемонтыОборудования Цикл
		
		Движение = Движения.торо_Ремонты.Добавить();
		Движение.Период 			= МоментВремени().Дата;
		Движение.ID 				= СтрРемонта.ID;
		Движение.ОбъектРемонта 		= СтрРемонта.ОбъектРемонта;
		Движение.ВидРемонта			= СтрРемонта.ВидРемонтныхРабот;
		Движение.ДатаНачалаПлан		= СтрРемонта.ДатаНачала;
		Движение.ДатаОкончанияПлан	= СтрРемонта.ДатаОкончания;
		Движение.ГарантийныйРемонт  = СтрРемонта.ГарантийныйРемонт; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ЗаявкиПоРемонтам(РежимПроведения, Отказ)
	
	// Движения по регистру сведений торо_ЗаявкиПоРемонтам
	Движения.торо_ЗаявкиПоРемонтам.Записывать = Истина;
	
	РемонтыДвижения = РемонтыОборудования.Выгрузить();
	КолонкаID = РемонтыДвижения.Колонки.Найти("ID");
	КолонкаID.Имя = "IDРемонта";
	КолонкаДатаНачала = РемонтыДвижения.Колонки.Найти("ДатаНачала");
	КолонкаДатаНачала.Имя = "ДатаНачалаРемонтныхРабот";
	КолонкаДатаОкончания = РемонтыДвижения.Колонки.Найти("ДатаОкончания");
	КолонкаДатаОкончания.Имя = "ДатаОкончанияРемонтныхРабот";
	РемонтыДвижения.Колонки.Добавить("Отменен", Новый ОписаниеТипов("Булево"));
	
	Если РемонтыДвижения.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.торо_ЗаявкиПоРемонтам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	СтарыеДвижения = НаборЗаписей.Выгрузить();
	Движения.торо_ЗаявкиПоРемонтам.Очистить();	
		
	Если Не Отказ Тогда
		
		Для Каждого ИсходнаяСтрока Из СтарыеДвижения Цикл
			СтрДостДляРед = РемонтыДвижения.НайтиСтроки(Новый Структура("IDРемонта", ИсходнаяСтрока.IDРемонта));
			СтрЕстьВДок = РемонтыОборудования.НайтиСтроки(Новый Структура("ID", ИсходнаяСтрока.IDРемонта));
			Если СтрДостДляРед.Количество() = 0 И СтрЕстьВДок.Количество() > 0 Тогда
				
				Движение = Движения.торо_ЗаявкиПоРемонтам.Добавить();
				ЗаполнитьЗначенияСвойств(Движение,ИсходнаяСтрока);
				
			КонецЕсли;
		КонецЦикла;
		
		НаборДвижений = Движения.торо_ЗаявкиПоРемонтам;
		
		// Получим таблицу значений, совпадающую со структурой набора записей регистра.
		ТаблицаДвижений = НаборДвижений.Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ЗаявкиПоРемонтам.IDРемонта,
		|	торо_ЗаявкиПоРемонтам.ДатаНачалаРемонтныхРабот,
		|	торо_ЗаявкиПоРемонтам.ДатаОкончанияРемонтныхРабот,
		|	торо_ЗаявкиПоРемонтам.Отменен
		|ПОМЕСТИТЬ ДанныеДляПроведения
		|ИЗ
		|	&ПланРемонтныхРабот КАК торо_ЗаявкиПоРемонтам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Период КАК Период,
		|	ДанныеДляПроведения.IDРемонта,
		|	ИСТИНА КАК Активность,
		|	ДанныеДляПроведения.ДатаНачалаРемонтныхРабот,
		|	ДанныеДляПроведения.ДатаОкончанияРемонтныхРабот,
		|	ДанныеДляПроведения.Отменен
		|ИЗ
		|	ДанныеДляПроведения КАК ДанныеДляПроведения";
		
		Запрос.УстановитьПараметр("ПланРемонтныхРабот", РемонтыДвижения);
		Запрос.УстановитьПараметр("Период", (МоментВремени().Дата));
		
		ТабРемонтныхРабот = Запрос.Выполнить().Выгрузить();
		
		// Заполним таблицу движений.
		торо_ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабРемонтныхРабот, ТаблицаДвижений);
		
		Для Каждого СтрокаТаблицыДвижений Из ТаблицаДвижений Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицыДвижений.ID_Корректировок) Тогда
				
				ТаблицаРегистр = СтарыеДвижения.НайтиСтроки(Новый Структура("IDРемонта", СтрокаТаблицыДвижений.IDРемонта));
				
				Если ТаблицаРегистр.Количество() > 0 Тогда
					СтрокаРегистр = ТаблицаРегистр[0];
					ID_Корректировок = СтрокаРегистр.ID_Корректировок;
				Иначе	
					ID_Корректировок = Новый УникальныйИдентификатор;
				КонецЕсли;
				
				
				СтрокаТаблицыДвижений.ID_Корректировок = ID_Корректировок;
			КонецЕсли;	
			
		КонецЦикла;	
		
		НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;
		
		Движения.торо_ЗаявкиПоРемонтам.ВыполнитьДвижения();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьДатуДокумента(Отказ, Заголовок)
	
	МассивОснований = ДокументыОснования.ВыгрузитьКолонку("ДокументОснование");
	СписокДатОснований = Новый СписокЗначений;
	Для Каждого Основание Из МассивОснований Цикл
		СписокДатОснований.Добавить(Основание.Дата);
	КонецЦикла;
	СписокДатОснований.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
	Если Дата < СписокДатОснований[0].Значение Тогда
		СтрокаСообщения = НСтр("ru = 'Дата документа меньше даты документа-основания!'");
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
		Отказ = Истина;

	КонецЕсли;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтыОборудования".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтыОборудования(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ОбъектРемонта,ВидРемонтныхРабот,ДатаНачала, ДатаОкончания");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтыОборудования", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Документы основания".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиДокументыОснования(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("ДокументОснование");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ДокументыОснования", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "РемонтныеРаботы".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиРемонтныеРаботы(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("РемонтнаяРабота,РемонтыОборудования_ID");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РемонтныеРаботы", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "МатериальныеЗатраты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиМатериальныеЗатраты(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "МатериальныеЗатраты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Инструменты".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиИнструментыИТехника(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Инструмент, Количество");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Инструменты", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "ЗапчастиРемонта".
//
// Параметры:
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗапчасти(Отказ, Заголовок)
	
	// Укажем, что надо проверить:
	СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");
	
	// Вызовем общую процедуру проверки.
	торо_ЗаполнениеДокументов.ПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "ЗапчастиРемонта", СтруктураОбязательныхПолей, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПлановыеМатериальныеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаМатериальныхЗатрат, Отказ, Заголовок)
	
	Движения.торо_ПлановыеМатериальныеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьМатериальныеЗатраты ИЗ ТаблицаМатериальныхЗатрат Цикл
		Движение = Движения.торо_ПлановыеМатериальныеЗатратыРемонтныхРабот.Добавить();
		Движение.ID = ЗаписьМатериальныеЗатраты.ID;
		Движение.РемонтыОборудования_ID = ЗаписьМатериальныеЗатраты.РемонтыОборудования_ID;
		Движение.Количество = ЗаписьМатериальныеЗатраты.Количество;
		Движение.Номенклатура = ЗаписьМатериальныеЗатраты.Номенклатура;
		Движение.Период = ЗаписьМатериальныеЗатраты.ДатаНачала;
		Движение.РемонтнаяРабота = ЗаписьМатериальныеЗатраты.РемонтнаяРабота;
		Движение.ХарактеристикаНоменклатуры = ЗаписьМатериальныеЗатраты.ХарактеристикаНоменклатуры;
	КонецЦикла;
	                                         
КонецПроцедуры

// Процедура выполняет движения документа по регистру "торо_ПлановыеТрудовыеЗатратыРемонтныхРабот".
//	
Процедура ДвиженияПоРегистру_торо_ПлановыеТрудовыеЗатратыРемонтныхРабот(РежимПроведения, ТаблицаТрудовыхЗатрат, Отказ, Заголовок)
	
	Движения.торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.Записывать = Истина;
	Для Каждого ЗаписьТрудовыеЗатраты ИЗ ТаблицаТрудовыхЗатрат Цикл
		Движение = Движения.торо_ПлановыеТрудовыеЗатратыРемонтныхРабот.Добавить();
		Движение.РемонтыОборудования_ID = ЗаписьТрудовыеЗатраты.РемонтыОборудования_ID;
		Движение.ID = ЗаписьТрудовыеЗатраты.ID;
		Движение.Квалификация = ЗаписьТрудовыеЗатраты.Квалификация;
		Движение.Количество = ЗаписьТрудовыеЗатраты.Количество;
		Движение.Период = ЗаписьТрудовыеЗатраты.ДатаНачала;
		Движение.РемонтнаяРабота = ЗаписьТрудовыеЗатраты.РемонтнаяРабота;
		Движение.Сумма = ЗаписьТрудовыеЗатраты.Сумма;
		Движение.ВремяРаботы = ЗаписьТрудовыеЗатраты.ВремяРаботы;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДвиженияПоРегистру_торо_ПлановыеЗатратыЗапчастей(РежимПроведения, ТаблицаЗапчастей, Отказ, Заголовок)
	
	Движения.торо_ПлановыеЗатратыЗапчастей.Записывать = Истина;
	Для каждого СтрЗапчасть Из ТаблицаЗапчастей Цикл
		Движение = Движения.торо_ПлановыеЗатратыЗапчастей.Добавить();
		Движение.Период = СтрЗапчасть.Период;
		Движение.РемонтыОборудования_ID = СтрЗапчасть.РемонтыОборудования_ID;
		Движение.Номенклатура = СтрЗапчасть.Номенклатура;
		Движение.ХарактеристикаНоменклатуры = СтрЗапчасть.ХарактеристикаНоменклатуры;
		Движение.Количество = СтрЗапчасть.Количество;
	КонецЦикла; 	
	
КонецПроцедуры

// Выгружает данные в табличной части в таблицу значений, добавляет ей необходимые колонки для проведения.
//
// Параметры: 
// 	Нет.
//
// Возвращаемое значение:
//  Сформированная таблиица значений.
//
Функция ПодготовитьТаблицуРемонтныхРабот()
	
	ТаблицаРемонтныхРабот = РемонтныеРаботы.Выгрузить();
	
	КЧ = Новый КвалификаторыЧисла(5, 2);
	МассивТипов = Новый Массив(1);
	МассивТипов.Добавить(Тип("Число"));
	ОписаниеТиповЧ = Новый ОписаниеТипов(МассивТипов, , ,КЧ);
	ТаблицаРемонтныхРабот.Колонки.Добавить("ПроцентНевыполненныхРабот", ОписаниеТиповЧ);
	
	
	КД = Новый КвалификаторыДаты(ЧастиДаты.Дата);
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("Дата"));
	ОписаниеТиповД = Новый ОписаниеТипов(МассивТипов, , ,КД);
	ТаблицаРемонтныхРабот.Колонки.Добавить("ДатаНачалаРемонта", ОписаниеТиповД);
	
	Для каждого Строка Из РемонтыОборудования Цикл
		
		МассивСтрок = ТаблицаРемонтныхРабот.НайтиСтроки(Новый Структура("РемонтыОборудования_ID",Строка.ID));
		
		Для каждого СтрокаМассива Из МассивСтрок Цикл
			СтрокаМассива.ДатаНачалаРемонта = Строка.ДатаНачала;
		КонецЦикла;
		
	КонецЦикла; 
	
	
	торо_Ремонты.ЗаполнитьПроцентыНевыполненныхРаботПоНормамВремени("", ТаблицаРемонтныхРабот);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ТаблицаРемонтныхРабот.ID,	
					|   ТаблицаРемонтныхРабот.РемонтнаяРабота,
					|	ТаблицаРемонтныхРабот.Количество,
					|	ТаблицаРемонтныхРабот.РемонтыОборудования_ID,
					|   ТаблицаРемонтныхРабот.ПроцентНевыполненныхРабот,
					|   ТаблицаРемонтныхРабот.Родитель_ID
					|ПОМЕСТИТЬ ТаблицаРемРабот
					|ИЗ &ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ
					|	ТаблицаРемонтовОборудования.ОбъектРемонта,	
					|   ТаблицаРемонтовОборудования.ID,
					|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот,
					|	ТаблицаРемонтовОборудования.ДатаНачала,
					|   ТаблицаРемонтовОборудования.ДатаОкончания,
					|	ТаблицаРемонтовОборудования.ДокументИсточник
					|ПОМЕСТИТЬ ТаблицаРемОборуд
					|ИЗ &ТаблицаРемонтовОборудования КАК ТаблицаРемонтовОборудования
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ
					|	ТаблицаРемонтныхРабот.ID,	
					|   ТаблицаРемонтныхРабот.РемонтнаяРабота,
					|	ТаблицаРемонтныхРабот.Количество,
					|	ТаблицаРемонтныхРабот.РемонтыОборудования_ID,
					|   ТаблицаРемонтныхРабот.ПроцентНевыполненныхРабот,
					|	ТаблицаРемонтныхРабот.Родитель_ID,
					|	ТаблицаРемонтовОборудования.ОбъектРемонта,	
					|	ТаблицаРемонтовОборудования.ВидРемонтныхРабот,
					|	ТаблицаРемонтовОборудования.ДатаНачала,
					|   ТаблицаРемонтовОборудования.ДатаОкончания,
					|	ТаблицаРемонтовОборудования.ДокументИсточник КАК ДокументОснование
					|ИЗ ТаблицаРемРабот КАК ТаблицаРемонтныхРабот
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемОборуд КАК ТаблицаРемонтовОборудования
					|		ПО ТаблицаРемонтныхРабот.РемонтыОборудования_ID = ТаблицаРемонтовОборудования.ID
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|";
					
					
	Запрос.УстановитьПараметр("ТаблицаРемонтныхРабот",ТаблицаРемонтныхРабот);
	Запрос.УстановитьПараметр("ТаблицаРемонтовОборудования",РемонтыОборудования);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПодготовитьТаблицуРемонтныхРабот()

// Функция формирует таблицу плановых материальных затрат для движения документа по регистру 
// "торо_ПлановыеМатериальныеЗатратыРемонтныхРабот".
Функция СформироватьТаблицуМатериальныхЗатрат(ТаблицаРемонтныхРабот)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаРемонтныхРабот.ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	               |	ТаблицаРемонтныхРабот.Количество,
	               |	ТаблицаРемонтныхРабот.РемонтыОборудования_ID,
	               |	ТаблицаРемонтныхРабот.ОбъектРемонта,
	               |	ТаблицаРемонтныхРабот.ВидРемонтныхРабот,
	               |	ТаблицаРемонтныхРабот.ДатаНачала,
	               |	ТаблицаРемонтныхРабот.ДатаОкончания,
	               |	ТаблицаРемонтныхРабот.ДокументОснование,
	               |	ТаблицаРемонтныхРабот.Родитель_ID
	               |ПОМЕСТИТЬ ТаблицаРемРабот
	               |ИЗ
	               |	&ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаРемонтныхРабот.РемонтыОборудования_ID,
	               |	ТаблицаРемонтныхРабот.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаМатериальныхЗатрат.ID,
	               |	ТаблицаМатериальныхЗатрат.РемонтыОборудования_ID,
	               |	ТаблицаМатериальныхЗатрат.Номенклатура,
	               |	ТаблицаМатериальныхЗатрат.Количество,
	               |	ТаблицаМатериальныхЗатрат.ХарактеристикаНоменклатуры,
	               |	ВЫРАЗИТЬ(ТаблицаМатериальныхЗатрат.ЕдиницаИзмерения КАК Справочник.УпаковкиНоменклатуры) КАК ЕдиницаИзмерения
	               |ПОМЕСТИТЬ ТаблицаМатЗатрат
	               |ИЗ
	               |	&ТаблицаМатериальныхЗатрат КАК ТаблицаМатериальныхЗатрат
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаМатериальныхЗатрат.РемонтыОборудования_ID,
	               |	ТаблицаМатериальныхЗатрат.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура,
	               |	СУММА(ВЫБОР
	               |			КОГДА ЕСТЬNULL(торо_ЗаявкаНаРемонтМатериальныеЗатраты.ЕдиницаИзмерения.Коэффициент, 0) = 0
	               |				ТОГДА 1
	               |			ИНАЧЕ торо_ЗаявкаНаРемонтМатериальныеЗатраты.ЕдиницаИзмерения.Коэффициент
	               |		КОНЕЦ * торо_ЗаявкаНаРемонтМатериальныеЗатраты.Количество) КАК Количество,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДокументОснование,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID
	               |ИЗ
	               |	ТаблицаМатЗатрат КАК торо_ЗаявкаНаРемонтМатериальныеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемРабот КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
	               |		ПО торо_ЗаявкаНаРемонтМатериальныеЗатраты.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID
	               |			И торо_ЗаявкаНаРемонтМатериальныеЗатраты.ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.ID
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.Номенклатура,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтМатериальныеЗатраты.ХарактеристикаНоменклатуры,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДокументОснование,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID";
	
	Запрос.УстановитьПараметр("ТаблицаМатериальныхЗатрат", МатериальныеЗатраты.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаРемонтныхРабот", ТаблицаРемонтныхРабот);
	                                                                                
	Возврат Запрос.Выполнить().Выгрузить();
	                                                                              
КонецФункции // СформироватьТаблицуМатериальныхЗатрат()

// Функция формирует таблицу плановых материальных затрат для движения документа по регистру 
// "торо_ПлановыеТрудовыеЗатратыРемонтныхРабот".
//
// Параметры:
//  ТаблицаРемонтныхРабот - ТаблицаЗначений - таблица ремонтных работ.
//
Функция СформироватьТаблицуТрудовыхЗатрат(ТаблицаРемонтныхРабот)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаРемонтныхРабот.ID,
	               |	ТаблицаРемонтныхРабот.РемонтнаяРабота,
	               |	ТаблицаРемонтныхРабот.Количество,
	               |	ТаблицаРемонтныхРабот.РемонтыОборудования_ID,
	               |	ТаблицаРемонтныхРабот.ОбъектРемонта,
	               |	ТаблицаРемонтныхРабот.ВидРемонтныхРабот,
	               |	ТаблицаРемонтныхРабот.ДатаНачала,
	               |	ТаблицаРемонтныхРабот.ДатаОкончания,
	               |	ТаблицаРемонтныхРабот.ДокументОснование,
	               |	ТаблицаРемонтныхРабот.Родитель_ID
	               |ПОМЕСТИТЬ ТаблицаРемРабот
	               |ИЗ
	               |	&ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаРемонтныхРабот.ID,
	               |	ТаблицаРемонтныхРабот.РемонтыОборудования_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаТрудовыхЗатрат.ID,
	               |	ТаблицаТрудовыхЗатрат.Квалификация,
	               |	ТаблицаТрудовыхЗатрат.Количество,
	               |	ТаблицаТрудовыхЗатрат.ВремяРаботы,
	               |	ТаблицаТрудовыхЗатрат.РемонтыОборудования_ID
	               |ПОМЕСТИТЬ ТаблицаТрудЗатрат
	               |ИЗ
	               |	&ТаблицаТрудовыхЗатрат КАК ТаблицаТрудовыхЗатрат
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТаблицаТрудовыхЗатрат.ID,
	               |	ТаблицаТрудовыхЗатрат.РемонтыОборудования_ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРемРабот.ДатаНачала КАК ДатаНач,
	               |	КурсыВалют.Период,
	               |	КурсыВалют.Кратность,
	               |	КурсыВалют.Курс,
	               |	КурсыВалют.Валюта
	               |ПОМЕСТИТЬ ТабДатВалют
	               |ИЗ
	               |	ТаблицаРемРабот КАК ТаблицаРемРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	               |		ПО (КурсыВалют.Период <= ТаблицаРемРабот.ДатаНачала)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	КурсыВалют.Валюта,
	               |	ДатаНач,
	               |	КурсыВалют.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабДатВалют.ДатаНач,
	               |	ТабДатВалют.Валюта,
	               |	МАКСИМУМ(ТабДатВалют.Период) КАК Период
	               |ПОМЕСТИТЬ ТабМаксДатВалют
	               |ИЗ
	               |	ТабДатВалют КАК ТабДатВалют
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабДатВалют.ДатаНач,
	               |	ТабДатВалют.Валюта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабДатВалют.Валюта,
	               |	ТабДатВалют.ДатаНач,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТабДатВалют.ДатаНач,
	               |	ТабДатВалют.Курс,
	               |	ТабДатВалют.Кратность,
	               |	ТабДатВалют.Валюта,
	               |	ТабДатВалют.Период
	               |ПОМЕСТИТЬ ТабКурсовВалют
	               |ИЗ
	               |	ТабДатВалют КАК ТабДатВалют
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабМаксДатВалют КАК ТабМаксДатВалют
	               |		ПО ТабДатВалют.Валюта = ТабМаксДатВалют.Валюта
	               |			И ТабДатВалют.ДатаНач = ТабМаксДатВалют.ДатаНач
	               |			И ТабДатВалют.Период = ТабМаксДатВалют.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабДатВалют.Валюта,
	               |	ТабДатВалют.ДатаНач
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРемРабот.ДатаНачала КАК ДатаНач,
	               |	Квалификации.Период,
	               |	Квалификации.Стоимость,
	               |	Квалификации.Валюта,
	               |	Квалификации.Квалификация
	               |ПОМЕСТИТЬ ТабДатКвалификаций
	               |ИЗ
	               |	ТаблицаРемРабот КАК ТаблицаРемРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации КАК Квалификации
	               |		ПО (Квалификации.Период <= ТаблицаРемРабот.ДатаНачала)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Квалификации.Квалификация,
	               |	ДатаНач,
	               |	Квалификации.Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабДатКвалификаций.ДатаНач,
	               |	ТабДатКвалификаций.Квалификация,
	               |	МАКСИМУМ(ТабДатКвалификаций.Период) КАК Период
	               |ПОМЕСТИТЬ ТабМаксДатКвалификаций
	               |ИЗ
	               |	ТабДатКвалификаций КАК ТабДатКвалификаций
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТабДатКвалификаций.ДатаНач,
	               |	ТабДатКвалификаций.Квалификация
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабДатКвалификаций.Квалификация,
	               |	ТабДатКвалификаций.ДатаНач,
	               |	Период
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	ТабДатКвалификаций.ДатаНач,
	               |	ТабДатКвалификаций.Валюта,
	               |	ТабДатКвалификаций.Стоимость,
	               |	ТабДатКвалификаций.Квалификация
	               |ПОМЕСТИТЬ ТабСтоимостейКвалификаций
	               |ИЗ
	               |	ТабДатКвалификаций КАК ТабДатКвалификаций
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабМаксДатКвалификаций КАК ТабМаксДатКвалификаций
	               |		ПО ТабДатКвалификаций.Квалификация = ТабМаксДатКвалификаций.Квалификация
	               |			И ТабДатКвалификаций.ДатаНач = ТабМаксДатКвалификаций.ДатаНач
	               |			И ТабДатКвалификаций.Период = ТабМаксДатКвалификаций.Период
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабДатКвалификаций.Валюта,
	               |	ТабДатКвалификаций.ДатаНач
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабСтоимостейКвалификаций.ДатаНач,
	               |	ТабСтоимостейКвалификаций.Валюта,
	               |	ТабСтоимостейКвалификаций.Стоимость,
	               |	ТабСтоимостейКвалификаций.Квалификация,
	               |	ЕСТЬNULL(ТабКурсовВалют.Курс, 0) КАК Курс,
	               |	ЕСТЬNULL(ТабКурсовВалют.Кратность, 1) КАК Кратность
	               |ПОМЕСТИТЬ ТабСтоимостейКвалификацийИКурсов
	               |ИЗ
	               |	ТабСтоимостейКвалификаций КАК ТабСтоимостейКвалификаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабКурсовВалют КАК ТабКурсовВалют
	               |		ПО ТабСтоимостейКвалификаций.Валюта = ТабКурсовВалют.Валюта
	               |			И ТабСтоимостейКвалификаций.ДатаНач = ТабКурсовВалют.ДатаНач
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ТабСтоимостейКвалификаций.Квалификация,
	               |	ТабСтоимостейКвалификаций.ДатаНач
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДокументОснование,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.Родитель_ID,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Количество,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация,
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.ВремяРаботы
	               |ПОМЕСТИТЬ торо_ЗаявкаНаРемонт
	               |ИЗ
	               |	ТаблицаТрудЗатрат КАК торо_ЗаявкаНаРемонтТрудовыеЗатраты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемРабот КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
	               |		ПО торо_ЗаявкаНаРемонтТрудовыеЗатраты.ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.ID
	               |			И торо_ЗаявкаНаРемонтТрудовыеЗатраты.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.РемонтыОборудования_ID
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонтТрудовыеЗатраты.Квалификация,
	               |	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗаявкаНаРемонт.Квалификация,
	               |	торо_ЗаявкаНаРемонт.ID,
	               |	торо_ЗаявкаНаРемонт.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонт.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонт.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонт.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонт.ДатаНачала,
	               |	торо_ЗаявкаНаРемонт.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонт.ДокументОснование,
	               |	торо_ЗаявкаНаРемонт.Родитель_ID,
	               |	торо_ЗаявкаНаРемонт.ВремяРаботы,
	               |	СУММА(ЕСТЬNULL(ТабСтоимостейКвалификацийИКурсов.Стоимость, 0) * ЕСТЬNULL(ТабСтоимостейКвалификацийИКурсов.Курс, 0) / ЕСТЬNULL(ТабСтоимостейКвалификацийИКурсов.Кратность, 1) * торо_ЗаявкаНаРемонт.ВремяРаботы / 3600 * торо_ЗаявкаНаРемонт.Количество) КАК Сумма,
	               |	СУММА(торо_ЗаявкаНаРемонт.Количество) КАК Количество
	               |ИЗ
	               |	торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабСтоимостейКвалификацийИКурсов КАК ТабСтоимостейКвалификацийИКурсов
	               |		ПО торо_ЗаявкаНаРемонт.Квалификация = ТабСтоимостейКвалификацийИКурсов.Квалификация
	               |			И торо_ЗаявкаНаРемонт.ДатаНачала = ТабСтоимостейКвалификацийИКурсов.ДатаНач
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ЗаявкаНаРемонт.Квалификация,
	               |	торо_ЗаявкаНаРемонт.ID,
	               |	торо_ЗаявкаНаРемонт.РемонтнаяРабота,
	               |	торо_ЗаявкаНаРемонт.РемонтыОборудования_ID,
	               |	торо_ЗаявкаНаРемонт.ОбъектРемонта,
	               |	торо_ЗаявкаНаРемонт.ВидРемонтныхРабот,
	               |	торо_ЗаявкаНаРемонт.ДатаНачала,
	               |	торо_ЗаявкаНаРемонт.ДатаОкончания,
	               |	торо_ЗаявкаНаРемонт.ДокументОснование,
	               |	торо_ЗаявкаНаРемонт.Родитель_ID,
	               |	торо_ЗаявкаНаРемонт.ВремяРаботы";
					
	Запрос.УстановитьПараметр("ТаблицаРемонтныхРабот", ТаблицаРемонтныхРабот);
	Запрос.УстановитьПараметр("ТаблицаТрудовыхЗатрат", ТрудовыеЗатраты.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // СформироватьТаблицуМатериальныхЗатрат()

// Функция формирует таблицу плановых затрат запчастей для движения документа по регистру 
// "торо_ПлановыеЗатратыЗапчастей".
//
// Параметры:
//  ТаблицаРемонтныхРабот - ТаблицаЗначений - таблица ремонтных работ.
//
Функция СформироватьТаблицуЗапчастей(ТаблицаРемонтныхРабот)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ТаблицаРемонтныхРабот.ID,	
					|	ТаблицаРемонтныхРабот.ОбъектРемонта,	
					|	ТаблицаРемонтныхРабот.ВидРемонтныхРабот,
					|	ТаблицаРемонтныхРабот.ДатаНачала
					|ПОМЕСТИТЬ ТаблицаРемРабот
					|ИЗ &ТаблицаРемонтныхРабот КАК ТаблицаРемонтныхРабот
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ РАЗЛИЧНЫЕ
					|	ТаблицаЗапчастей.РемонтыОборудования_ID,	
					|   ТаблицаЗапчастей.Номенклатура,
					|	ТаблицаЗапчастей.Количество,
					|	ТаблицаЗапчастей.ХарактеристикаНоменклатуры,
					|	ТаблицаЗапчастей.ЕдиницаИзмерения
					|ПОМЕСТИТЬ ТаблицаЗатратЗапчастей
					|ИЗ &ТаблицаЗапчастиРемонта КАК ТаблицаЗапчастей
					|;
					|////////////////////////////////////////////////////////////////////////////////
					|
					|ВЫБРАТЬ
					|	ТаблицаЗатратЗапчастей.Номенклатура,
					|	СУММА(ВЫБОР
					|			КОГДА естьnull(ТаблицаЗатратЗапчастей.ЕдиницаИзмерения.Коэффициент, 0) = 0
					|				ТОГДА 1
					|			ИНАЧЕ ТаблицаЗатратЗапчастей.ЕдиницаИзмерения.Коэффициент 
					|		КОНЕЦ * ТаблицаЗатратЗапчастей.Количество) КАК Количество,
					|	ТаблицаЗатратЗапчастей.ХарактеристикаНоменклатуры,
					|	ТаблицаЗатратЗапчастей.РемонтыОборудования_ID,
					|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала КАК Период
					|ИЗ
					|	ТаблицаЗатратЗапчастей КАК ТаблицаЗатратЗапчастей
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемРабот КАК торо_ЗаявкаНаРемонтРемонтныеРаботы
					|		ПО ТаблицаЗатратЗапчастей.РемонтыОборудования_ID = торо_ЗаявкаНаРемонтРемонтныеРаботы.ID
					|
					|СГРУППИРОВАТЬ ПО
					|	ТаблицаЗатратЗапчастей.Номенклатура,
					|	ТаблицаЗатратЗапчастей.ХарактеристикаНоменклатуры,
					|	ТаблицаЗатратЗапчастей.РемонтыОборудования_ID,
					|	торо_ЗаявкаНаРемонтРемонтныеРаботы.ДатаНачала";
	
	Запрос.УстановитьПараметр("ТаблицаЗапчастиРемонта", ЗапчастиРемонта.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаРемонтныхРабот", РемонтыОборудования);
	                                                                                 
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции

Процедура УстановитьУправляемыеБлокировки()
	
	Блокировка = Новый БлокировкаДанных;
	
	// закрытие предписаний (по таблице ремонты оборудования)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = РемонтыОборудования.Выгрузить(Новый Структура("ЗакрываетПредписание",Истина),"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// закрытие предписаний (по таблице закрываемых предписаний)
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_ВнешниеОснованияДляРабот");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗакрываемыеПредписания.Выгрузить(,"ID");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ID", "ID");
	
	// подготовка таблицы трудозатрат
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.КурсыВалют");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	// подготовка таблицы трудозатрат
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.торо_СтоимостьЧасаКвалификации");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	ЭлементБлокировки.ИсточникДанных = ТрудовыеЗатраты;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Квалификация", "Квалификация");
	
	Блокировка.Заблокировать();
	
КонецПроцедуры
#КонецОбласти

#КонецЕсли