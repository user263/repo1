////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем КэшированныеЗначения;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	ДатаОкончанияДействияРазрешений = Дата(1,1,1);
	
	ID							= Параметры.ID;
	ID_Ремонт 					= Параметры.РемонтыОборудования_ID;
	Номенклатура				= Параметры.Номенклатура;
	Характеристика				= Параметры.ХарактеристикаНоменклатуры;
	Упаковка					= Параметры.ЕдиницаИзмерения;
	КоличествоУпаковок			= Параметры.Количество;
	Количество					= Параметры.КоличествоЕдиниц;
	
	ИсходноеКоличество			= КоличествоУпаковок;
	ИсходнаяУпаковка			= Упаковка;
	ИсходнаяЕдиницаИзмерения	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	ШаблонЗаголовка = Нстр("ru = 'Аналоги материала ""%1"" (%2 %3)'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗаголовка, СокрЛП(Номенклатура), КоличествоУпаковок,
		?(ЗначениеЗаполнено(Упаковка), СокрЛП(Упаковка), ИсходнаяЕдиницаИзмерения));
	
	НаборУпаковок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура, "ЕдиницаИзмерения");
	
	Элементы.Упаковка.Видимость			= ЗначениеЗаполнено(НаборУпаковок);
	Элементы.ЕдиницаИзмерения.Видимость	= Не ЗначениеЗаполнено(НаборУпаковок);
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	
	ДанныеВыбора = ПолучитьДанныеВыбора(Тип("СправочникСсылка.УпаковкиНоменклатуры"), ПараметрыВыбораУпаковки);
	
	СписокВыбора = Элементы.Упаковка.СписокВыбора;
	
	Для Каждого ЗначениеВыбора из ДанныеВыбора Цикл
		СписокВыбора.Добавить(ЗначениеВыбора.Значение, ЗначениеВыбора.Представление);
	КонецЦикла;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Дата",					ДатаОкончанияДействияРазрешений);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "МассивПодразделений",	Параметры.МассивПодразделений);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Организация",			Параметры.ОбъектРемонта.Организация);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ВидРемонта",			Параметры.ВидРемонта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ТехКарта",				Параметры.ТехКарта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ДатаРемонта",				Параметры.ДатаРемонта);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "Материал",				Номенклатура);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ХарактеристикаМатериала",Характеристика);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "ОбъектРемонта",			Параметры.ОбъектРемонта);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "НаправлениеОбъектаРемонта",	Параметры.ОбъектРемонта.Направление);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "КоличествоПоЗаказу",	Количество);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Дата",				ТекущаяДата);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Ссылка",				Документы.торо_УстановкаАналоговНоменклатурыДляРемонтов.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Кратность",			1);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Дата",					ТекущаяДата);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Ссылка",				Документы.торо_УстановкаАналоговНоменклатурыДляРемонтов.ПустаяСсылка());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Кратность",			1);
	
	ФОИспользоватьХарактеристикиНоменклатуры = ПолучитьФункциональнуюОпцию("торо_ИспользоватьХарактеристикиНоменклатуры");	
	Элементы.МатериалыХарактеристика.Видимость = ФОИспользоватьХарактеристикиНоменклатуры;
	
	ОткрытиеФормы = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоличествоУпаковокПриИзменении(Элемент)
	
	ПриИзмененииКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаПриИзменении(Элемент)
	
	ПриИзмененииКоличества();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОбластиДействияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличестваНеДостаточноДляЗамены Тогда
		
		ШаблонПредупреждения = НСтр("ru = 'Нельзя заменить %1 %2 материала на %3 %4'");
		
		Кратность = КратностьЗамены(Количество, ТекущиеДанные.КоличествоМатериалаПоДокументу);
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредупреждения, 
			КоличествоУпаковок,
			?(ЗначениеЗаполнено(Упаковка), Упаковка, ИсходнаяЕдиницаИзмерения),
			ТекущиеДанные.КоличествоМатериалаПоДокументу * Кратность,
			?(ЗначениеЗаполнено(ТекущиеДанные.УпаковкаМатериала), ТекущиеДанные.УпаковкаМатериала, ТекущиеДанные.МатериалЕдиницаИзмерения));
		
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		
		Возврат;
	КонецЕсли;
		
	АдресВХранилище = ЗначениеВыбораНаСервере(ТекущиеДанные.Ссылка, ТекущиеДанные.КоличествоМатериалаПоДокументу,ЭтаФорма.ВладелецФормы.УникальныйИдентификатор);
	
	ОповеститьОВыборе(Новый Структура("ВыполняемаяОперация, АдресВХранилище", "ВыборАналогаНоменклатурыДляРемонта", АдресВХранилище));
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если ОткрытиеФормы Тогда
		
		ОткрытиеФормы = Ложь;
		ОбработчикАктивизацииСтрокиСписок();
		
	Иначе
		
		ПодключитьОбработчикОжидания("ОбработчикАктивизацииСтрокиСписок", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(69,81,133));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<любая характеристика>'"));

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиХарактеристика.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.Характеристика");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(69,81,133));
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<любая характеристика>'"));

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Аналог.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПростаяЗамена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<составной>'"));

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УпаковкаАналога.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.УпаковкаАналога");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоличествоАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УпаковкаАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницаИзмеренияАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокХарактеристикаАналога.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.ПростаяЗамена");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиВНаличии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Аналоги.ВНаличииОстаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'нет'"));

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыВНаличии.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Материалы.ВНаличииОстаток");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'нет'"));

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УказаниеПоПрименению.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Аналог.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СписокХарактеристикаАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.КоличествоАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.УпаковкаАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЕдиницаИзмеренияАналога.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаНачалаДействия.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДатаОкончанияДействия.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Номер.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Дата.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.Ответственный.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыВНаличии.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериалыНоменклатураЕдиницаИзмерения.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиНоменклатура.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиХарактеристика.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиКоличествоУпаковок.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиВНаличии.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиУпаковка.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АналогиНоменклатураЕдиницаИзмерения.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Список.КоличестваНеДостаточноДляЗамены");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАктивизацииСтрокиСписок()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Кратность = КратностьЗамены(Количество, ТекущиеДанные.КоличествоМатериалаПоДокументу);
	
	Если ТекСсылка <> ТекущиеДанные.Ссылка или ТекКратность <> Кратность Тогда
		ТекСсылка = ТекущиеДанные.Ссылка;
		ТекКратность = Кратность;
		
		УстановитьПараметрыДинамическихСписковНаСервере();
		
		ОбновитьПредставлениеОбластиДействия(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическихСписковНаСервере(КоличествоПоЗаказу = Неопределено)
	
	Если КоличествоПоЗаказу <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Список, "КоличествоПоЗаказу",	КоличествоПоЗаказу);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Ссылка", ТекСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Материалы, "Кратность", ТекКратность);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Ссылка", ТекСсылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(Аналоги, "Кратность", ТекКратность);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКоличества()
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц");
	ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ЭтаФорма, СтруктураДействий, КэшированныеЗначения);
	
	Если Количество = 0 или Количество > ИсходноеКоличество Тогда
		
		КоличествоУпаковок = ИсходноеКоличество;
		Упаковка = ИсходнаяУпаковка;
		
		ОбработкаТабличнойЧастиКлиент.ОбработатьСтрокуТЧ(ЭтаФорма, СтруктураДействий, КэшированныеЗначения);
		
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекКратность = КратностьЗамены(Количество, ТекущиеДанные.КоличествоМатериалаПоДокументу);
	
	УстановитьПараметрыДинамическихСписковНаСервере(Количество);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеОбластиДействия(ТекущиеДанные)
	
	ПредставлениеОбластиДействия = "";
	ПредставлениеОбластиДействияРем = "";
	ПредставлениеОбластиДействияОР = "";
	
		
	Если ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончанияДействия) Тогда
		ШаблонПредставления = НСтр("ru = 'С %1 по %2'") + " ";
		ТекстПредставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Формат(ТекущиеДанные.ДатаНачалаДействия, "ДЛФ=D"),
			Формат(ТекущиеДанные.ДатаОкончанияДействия, "ДЛФ=D"));
	Иначе
		ШаблонПредставления = НСтр("ru = 'С %1'") + " ";
		ТекстПредставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Формат(ТекущиеДанные.ДатаНачалаДействия, "ДЛФ=D"));
	КонецЕсли;
		
	// по ремонту
	Если ЗначениеЗаполнено(ТекущиеДанные.ВидРемонта)
		ИЛИ ЗначениеЗаполнено(ТекущиеДанные.Подразделение)
		ИЛИ ЗначениеЗаполнено(ТекущиеДанные.ТехКарта) Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидРемонта) Тогда
			ШаблонПредставления = НСтр("ru = 'в рамках ремонтов вида ""%1""'") + " ";
			ПредставлениеОбластиДействияРем = ПредставлениеОбластиДействияРем + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.ВидРемонта);
		Иначе
			ПредставлениеОбластиДействияРем = ПредставлениеОбластиДействияРем + " в рамках ремонтов";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
			ШаблонПредставления = НСтр("ru = ' выполняемых подразделением ""%1""'") + " ";
			ПредставлениеОбластиДействияРем = ПредставлениеОбластиДействияРем + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.Подразделение);
		ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ТехКарта) Тогда
			ПредставлениеОбластиДействияРем = ПредставлениеОбластиДействияРем + " выполняемых";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.ТехКарта) Тогда
			ШаблонПредставления = НСтр("ru = ' по технологической карте ""%1""'") + " ";
			ПредставлениеОбластиДействияРем = ПредставлениеОбластиДействияРем + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.ТехКарта);
		КонецЕсли;
	КонецЕсли;	
		
	
	// по ОР
	Если ЗначениеЗаполнено(ТекущиеДанные.ОбъектРемонта) Тогда
		ШаблонПредставления = НСтр("ru = 'для объекта ремонта ""%1""'") + " ";
		ПредставлениеОбластиДействияОР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.ОбъектРемонта);
	ИначеЕсли 
		ЗначениеЗаполнено(ТекущиеДанные.Организация)
		ИЛИ ЗначениеЗаполнено(ТекущиеДанные.НаправлениеОбъектаРемонта) Тогда
		ПредставлениеОбластиДействияОР = "для объектов ремонта ";
		Если ЗначениеЗаполнено(ТекущиеДанные.Организация) Тогда
			ШаблонПредставления = НСтр("ru = 'принадлежащих ""%1"" '") + " ";
			ПредставлениеОбластиДействияОР = ПредставлениеОбластиДействияОР + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.Организация);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.НаправлениеОбъектаРемонта) Тогда
			ШаблонПредставления = НСтр("ru = '(направление ""%1"") '") + " ";
			ПредставлениеОбластиДействияОР = ПредставлениеОбластиДействияОР + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления, ТекущиеДанные.НаправлениеОбъектаРемонта);
		КонецЕсли;
	КонецЕсли;

	ПредставлениеОбластиДействия = ПредставлениеОбластиДействияОР + ?(СтрДлина(ПредставлениеОбластиДействияРем) > 0,Символы.ПС,"") + ПредставлениеОбластиДействияРем;
	
	Если СтрДлина(ПредставлениеОбластиДействия) > 0 Тогда
		ПредставлениеОбластиДействия = Лев(ПредставлениеОбластиДействия, СтрДлина(ПредставлениеОбластиДействия) - 1);
	Иначе
		ПредставлениеОбластиДействия = ПредставлениеОбластиДействия + НСтр("ru = 'по предприятию в целом'");
	КонецЕсли;
	
	ПредставлениеОбластиДействия = ТекстПредставления + ПредставлениеОбластиДействия;
	
КонецПроцедуры

&НаСервере
Функция ЗначениеВыбораНаСервере(Ссылка, КоличествоПоДокументу,Идентификатор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|   &ID КАК ID,
	|	&РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	Материалы.Номенклатура КАК Номенклатура,
	|	Материалы.Характеристика КАК ХарактеристикаНоменклатуры,
	|	Материалы.Количество * &Кратность КАК Количество,
	|	ВЫРАЗИТЬ(Материалы.Количество * &Кратность / ЕСТЬNULL(Материалы.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 3)) КАК КоличествоУпаковок,
	|	Материалы.Упаковка КАК Упаковка
	|ИЗ
	|	Документ.торо_УстановкаАналоговНоменклатурыДляРемонтов.Материалы КАК Материалы
	|ГДЕ
	|	Материалы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   &ID КАК ID,
	|	&РемонтыОборудования_ID КАК РемонтыОборудования_ID,
	|	Аналоги.Номенклатура КАК Номенклатура,
	|	Аналоги.Характеристика КАК ХарактеристикаНоменклатуры,
	|	Аналоги.Количество * &Кратность КАК КоличествоЕдиниц,
	|	ВЫРАЗИТЬ(Аналоги.Количество * &Кратность / ЕСТЬNULL(Аналоги.Упаковка.Коэффициент, 1) КАК ЧИСЛО(15, 3)) КАК Количество,
	|	Аналоги.Упаковка КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА Аналоги.Номенклатура.ИспользованиеХарактеристик В (ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры), ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Документ.торо_УстановкаАналоговНоменклатурыДляРемонтов.Аналоги КАК Аналоги
	|ГДЕ
	|	Аналоги.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Кратность", КратностьЗамены(Количество, КоличествоПоДокументу));
	Запрос.УстановитьПараметр("ID",ID);
	Запрос.УстановитьПараметр("РемонтыОборудования_ID",ID_Ремонт);
	
	Результат = Запрос.ВыполнитьПакет();
	
	ЗначениеВыбора = Новый Структура("Материалы, Аналоги");
	
	ЗначениеВыбора.Материалы = Результат[0].Выгрузить();
	ЗначениеВыбора.Аналоги = Результат[1].Выгрузить();
	
	Возврат ПоместитьВоВременноеХранилище(ЗначениеВыбора,Идентификатор);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КратностьЗамены(КоличествоКЗамене, КоличествоВДокументеЗамены)
	
	Кратность = КоличествоКЗамене / КоличествоВДокументеЗамены;
	
	Если Кратность > Цел(Кратность) Тогда
		ТекКратность = Цел(Кратность) + 1;
	Иначе
		ТекКратность = Макс(Цел(Кратность), 1);
	КонецЕсли;
	
	Возврат ТекКратность;
	
КонецФункции

#КонецОбласти
