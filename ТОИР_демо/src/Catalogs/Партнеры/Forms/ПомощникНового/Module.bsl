#Область ОпределенияПеременных

&НаКлиенте
Перем ВыполняетсяЗакрытие;

&НаКлиенте
Перем ПараметрыОбработчика;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.Свойство("РежимВыбора") И Параметры.РежимВыбора Тогда
		ДляВыбора = Истина;
	КонецЕсли;
	
	НастройкиПодключенияКСервисуИППЗаданы = Ложь;
	
	УпрощенныйВводДоступен      = ПартнерыИКонтрагенты.УпрощенныйВводДоступен();
	ИспользоватьБизнесРегионы   = Ложь;
	ФиксироватьПервичныйИнтерес = Ложь;
	ИспользуютсяТолькоПартнеры  = ПолучитьФункциональнуюОпцию("ИспользоватьПартнеровКакКонтрагентов");
	
    Элементы.СтраницыПомощника.ОтображениеСтраниц            = ОтображениеСтраницФормы.Нет;
    Элементы.СтраницыКомпанияЧастноеЛицо.ОтображениеСтраниц  = ОтображениеСтраницФормы.Нет;
    Элементы.СтраницыПодвал.ОтображениеСтраниц               = ОтображениеСтраницФормы.Нет;
    Элементы.СтраницыБудетСоздан.ОтображениеСтраниц          = ОтображениеСтраницФормы.Нет;
    ОткрытьПослеСоздания                                     = Истина;
	
	ОсновнойМенеджер      = Пользователи.ТекущийПользователь();
	ВалютаРеглУчета       = Константы.ВалютаУправленческогоУчета.Получить();
	ВалютаДенежныхСредств = ВалютаРеглУчета;
	
	ЕстьПравоВключенияВСегмент = Ложь;
	
	Если Параметры.Свойство("СписокОтборПоТипуПартнера") Тогда
		
		Для каждого ЭлементСписка Из Параметры.СписокОтборПоТипуПартнера Цикл
			ЭтаФорма[ЭлементСписка.Значение] = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ОбслуживаетсяТорговымиПредставителями Тогда
		Клиент = Истина;
	КонецЕсли;
	
	Если Перевозчик Тогда
		Поставщик = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("Основание") И ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
		
		Если Параметры.Основание.Свойство("Наименование") Тогда
			
			Если ИспользуютсяТолькоПартнеры Тогда
				ПолноеЮридическоеНаименование = Параметры.Основание.Наименование;
			Иначе
				ПолноеНаименование = Параметры.Основание.Наименование;
			КонецЕсли;
			
		ИначеЕсли Параметры.Основание.Свойство("Описание") Тогда
			
			Если ИспользуютсяТолькоПартнеры Тогда
				ПолноеЮридическоеНаименование = Параметры.Основание.Описание;
			Иначе
				ПолноеНаименование = Параметры.Основание.Описание;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("КонтрагентОснование") И ТипЗнч(Параметры.КонтрагентОснование) = Тип("Структура") Тогда
		
		ЗаполнитьНаОснованииКонтрагента(Параметры.КонтрагентОснование,Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ВводНовогоРозничногоПокупателя") И Параметры.ВводНовогоРозничногоПокупателя Тогда
		
		ПриСозданииНовогоРозничногоПокупателя();
		
	ИначеЕсли Параметры.Свойство("ОснованиеОбособленныйКонтрагент") Тогда
		
		ПриСозданииНовогоГоловногоКонтрагента();
		
	КонецЕсли;
	
	
	ОбработатьЭлементыРедактированияКонтактнойИнформации();
		
	// ИспользуютсяТолькоПартнеры
	Если ИспользуютсяТолькоПартнеры Тогда
	
		УказыватьЮридическиеРеквизиты = Не НаОснованииДанныхРозничногоПокупателя;
		Элементы.СтраницыУказыватьЮрРеквизитыКонтрагентОснование.Видимость = Ложь;
		Элементы.СтраницыУказыватьСоздаватьКонтрагентаОснование.Видимость  = Ложь;
		Элементы.РабочееНаименованиеЧастноеЛицо.Видимость                  = Ложь;
		Элементы.СокрЮрНаименованиеКонтрагента.Видимость                   = Ложь;
		Элементы.ДействиеСКонтрагентом.Видимость                           = Ложь;
		Элементы.СтраницыНаименованиеПартнера.ТекущаяСтраница = Элементы.СтраницаСокрЮрНаименование;
		
		Элементы.ДействиеПоРезультатамНайдено.СписокВыбора.Удалить(1);
		Элементы.ДействиеПоРезультатамНайдено.СписокВыбора.Получить(0).Представление = НСтр("ru = 'Не регистрировать нового контрагента, использовать найденного.'");
		Элементы.ДействиеПоРезультатамНайдено.СписокВыбора.Получить(1).Представление = НСтр("ru = 'Продолжить регистрацию нового контрагента.'");
		
	КонецЕсли;
	
	ВидимостьСтраницПервичнаяИнформация();
	
	УстановитьЗаголовки();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЕстьОшибкаЧтенияФайла Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Неверный формат файла'"),,,, Отказ);
		Возврат;
	КонецЕсли;
	
	УправлениеСтраницамиПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ВыполняетсяЗакрытие Тогда
		
		Если СозданиеВыполнено Тогда
			Возврат;
		КонецЕсли;
		
		НеобходимостьВопроса = Ложь;
		
		Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено И ДействиеПоРезультатамНайдено = 0 Тогда
			НеобходимостьВопроса = Ложь;
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница <> Элементы.СтраницаПервичнаяИнформация Тогда
			НеобходимостьВопроса = Истина;
		Иначе
			Если ЭтоКомпания = 0 Тогда
				Если ЗначениеЗаполнено(Название) Или ЗначениеЗаполнено(ТелефонПартнера) Или ЗначениеЗаполнено(АдресЭППартнера) Тогда
					НеобходимостьВопроса = Истина;
				ИначеЕсли УказыватьЮридическиеРеквизиты И (ВидКомпании = 0 Или ВидКомпании = 3) Тогда
					Если ЗначениеЗаполнено(НаименованиеКонтрагента) ИЛИ ЗначениеЗаполнено(ИНН) ИЛИ ЗначениеЗаполнено(КПП) Тогда
						НеобходимостьВопроса = Истина;
					КонецЕсли;
				ИначеЕсли УказыватьЮридическиеРеквизиты И ВидКомпании = 1 Тогда
					Если ЗначениеЗаполнено(НаименованиеКонтрагента) Тогда
						НеобходимостьВопроса = Истина;
					КонецЕсли
				ИначеЕсли УказыватьЮридическиеРеквизиты И ВидКомпании = 2 Тогда
					Если ЗначениеЗаполнено(ИНН) Тогда
						НеобходимостьВопроса = Истина;
					КонецЕсли;
				ИначеЕсли УказатьДанныеКонтактногоЛица И (ЗначениеЗаполнено(ФамилияКЛ) ИЛИ ЗначениеЗаполнено(ИмяКЛ) ИЛИ ЗначениеЗаполнено(ОтчествоКЛ) ИЛИ
					ЗначениеЗаполнено(ТелефонКЛ) ИЛИ ЗначениеЗаполнено(АдресЭПКЛ) ИЛИ ЗначениеЗаполнено(МобильныйТелефонКЛ) ИЛИ
					ЗначениеЗаполнено(Роль)) Тогда
					НеобходимостьВопроса = Истина;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ФамилияПартнера) ИЛИ ЗначениеЗаполнено(ИмяПартнера) ИЛИ ЗначениеЗаполнено(ОтчествоПартнера) ИЛИ
					ЗначениеЗаполнено(АдресЭППартнераФизЛицо) ИЛИ ЗначениеЗаполнено(ТелефонПартнераФизЛицо) ИЛИ ЗначениеЗаполнено(ИННПартнерФизЛицо) Тогда
					НеобходимостьВопроса = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если НеобходимостьВопроса Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru='При закрытии формы введенная в нее информация будет утеряна. Закрыть?'");
			Если НЕ ЗавершениеРаботы Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ВыполняетсяЗакрытие = Истина;
		Закрыть();
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ОбработчикиКонтактнойИнформации

#Область КонтактнаяИнформацияКонтактногоЛица

&НаКлиенте
Процедура ТелефонКЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"),
		"ТелефонКЛ",
		"ТелефонКЛЗначенияПолей",
		"НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКЛПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"),
		"ТелефонКЛ",
		"ТелефонКЛЗначенияПолей",
		"ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонКЛОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица"),
		"ТелефонКЛ",
		"ТелефонКЛЗначенияПолей",
		"Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура МобильныйТелефонКЛНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"),
		"МобильныйТелефонКЛ",
		"МобильныйТелефонКЛЗначенияПолей",
		"НачалоВыбора");
	
 КонецПроцедуры   

&НаКлиенте
Процедура МобильныйТелефонКЛПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"),
		"МобильныйТелефонКЛ",
		"МобильныйТелефонКЛЗначенияПолей",
		"ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура МобильныйТелефонКЛОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица"),
		"МобильныйТелефонКЛ",
		"МобильныйТелефонКЛЗначенияПолей",
		"Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭПКЛПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияКомпании

&НаКлиенте
Процедура ТелефонПартнераНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнера",
		"ТелефонПартнераЗначенияПолей",
		"НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнера",
		"ТелефонПартнераЗначенияПолей",
		"ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнера",
		"ТелефонПартнераЗначенияПолей",
		"Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресЭППартнераПриИзменении(Элемент)
	ОтключитьОтметкуНезаполненного();
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияЧастноеЛицо

&НаКлиенте
Процедура ТелефонПартнераФизЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнераФизЛицо",
		"ТелефонПартнераФизЛицоЗначенияПолей",
		"НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераФизЛицоПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнераФизЛицо",
		"ТелефонПартнераФизЛицоЗначенияПолей",
		"ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ТелефонПартнераФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИТелефон(
		Элемент,
		ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ТелефонПартнера"),
		"ТелефонПартнераФизЛицо",
		"ТелефонПартнераФизЛицоЗначенияПолей",
		"Очистка");
	
КонецПроцедуры

#КонецОбласти

#Область КонтактнаяИнформацияГоловногоКонтрагента


#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицФормы

#Область ТаблицаНайдено

&НаКлиенте
Процедура ДеревоНайденоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные =  Элементы.ТаблицаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ТекущиеДанные.Партнер);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНайденоПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗаполнитьДеревоСравненияПартнеров", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоСравненияПартнеров

&НаКлиенте
Процедура ДеревоСравненияПартнеровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
		
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные =  Элементы.ДеревоСравненияПартнеров.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ТекущиеДанные.НайденоПоСсылка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиПрочихРеквизитов

&НаКлиенте
Процедура ЭтоКомпанияПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура СокрЮрНаименованиеКонтрагентаПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(НаименованиеКонтрагента, ПолноеЮридическоеНаименование);
	
КонецПроцедуры

&НаКлиенте
Процедура ПубличноеНаименованиеПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПоРезультатамНайденоПриИзменении(Элемент)
	
	УправлениеСтраницамиПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСКонтрагентомПриИзменении(Элемент)
	
	УправлениеСтраницамиПодвал();
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьЮридическиеРеквизитыЧастноеЛицоПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УказыватьЮридическиеРеквизитыПриИзменении(Элемент)
	
	ВидимостьСтраницПервичнаяИнформация();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьДанныеКонтактногоЛицаПриИзменении(Элемент)
	
	УстановитьДоступностьДанныхКонтактногоЛица(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФамилияКЛПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКЛПриИзменении(Элемент)
	
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура СокрЮридическоеНаименованиеТолькоПартнерыПриИзменении(Элемент)
	
	ПартнерыИКонтрагентыКлиент.СокрЮрНаименованиеПриИзменении(ПолноеНаименование, ПолноеЮридическоеНаименование);
	Название = ПолноеНаименование;
	ОтключитьОтметкуНезаполненного();
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПартнерФизЛицоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если УказыватьЮридическиеРеквизиты И ЭтоКомпания = 1 И (НЕ ПустаяСтрока(Текст)) Тогда
		ОчиститьСообщения();
		ТекстСообщения = "";
		Если НЕ РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Текст, Ложь, ТекстСообщения) Тогда
			ВывестиСообщениеПользователю(ТекстСообщения,"ИННПартнерФизЛицо");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КППОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Если УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0 И НЕ ПустаяСтрока(Текст) Тогда
		ОчиститьСообщения();
		ТекстСообщения = "";
		Если НЕ РегламентированныеДанныеКлиентСервер.КППСоответствуетТребованиям(Текст, ТекстСообщения) Тогда
			ВывестиСообщениеПользователю(ТекстСообщения,"КПП");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	ВыполнитьПереходПоСтраницам(Неопределено, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ВыполнитьПереходПоСтраницам(Неопределено, Команда);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЮридическийАдресРавнымФактическому(Команда)
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
		
		ЮридическийАдрес              = ФактическийАдрес;
		ЮридическийАдресЗначенияПолей = ФактическийАдресЗначенияПолей;
		
	Иначе
		
		ЮридическийАдресГоловногоКонтрагента              = ФактическийАдресГоловногоКонтрагента;
		ЮридическийАдресГоловногоКонтрагентаЗначенияПолей = ФактическийАдресГоловногоКонтрагентаЗначенияПолей;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	
	Для Каждого Стр Из ОбособленныеПодразделения Цикл
		Стр.Выбран = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	
	Для Каждого Стр Из ОбособленныеПодразделения Цикл
		Стр.Выбран = Ложь;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеИтоговойИнформации

&НаСервере
Процедура ЗаполнитьИтоговуюИнформацию()
	
	ИтоговаяИнформация = Справочники.Партнеры.ПолучитьМакет("Макет").ПолучитьТекст();
	
	Если ТекущийВариантИнтерфейсаКлиентскогоПриложения() = ВариантИнтерфейсаКлиентскогоПриложения.Такси Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#fcfaeb", "#ffffff");
	КонецЕсли;
	
	Если ДействиеПоРезультатамНайдено <> 0 Тогда
		
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПР#", "");
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация,"#ЗаголовокНаименованиеПартнера#",
			?(ИспользуютсяТолькоПартнеры, НСтр("ru = 'Сокращенное юр. наименование'"), НСтр("ru = 'Публичное наименование'")));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НаименованиеПартнера#", НаименованиеПартнера());
		Если ЭтоКомпания = 1 Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаРождения#", ?(ДатаРождения = Дата(1,1,1), "", Формат(ДатаРождения,"ДЛФ=D")));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Пол#", ?(ЗначениеЗаполнено(Пол),Пол,""));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФЛ#", "");
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ФЛ#");
		КонецЕсли;
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РабочееНаименованиеПартнера#", ?(ЭтоКомпания = 0, Название,ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера)));
		Если ИспользуютсяТолькоПартнеры Тогда
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ГП#");
		Иначе
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Родитель#", Родитель);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ГП#", "");
		КонецЕсли;
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ТипОтношений#", ПолучитьСтрокуТипОтношений());
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресЭП#", ?(ЭтоКомпания = 0, АдресЭППартнера, АдресЭППартнераФизЛицо));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Телефон#", ?(ЭтоКомпания = 0, ТелефонПартнера, ТелефонПартнераФизЛицо));
		Если ИспользуютсяТолькоПартнеры И УказыватьЮридическиеРеквизиты Тогда
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация,"#АП#");
		Иначе
			Если ЭтоКомпания = 0 Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресНаименование#", НСтр("ru = 'Фактический адрес'"));
			Иначе
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресНаименование#", НСтр("ru = 'Адрес проживания'"));
			КонецЕсли;
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Адрес#", ФактическийАдрес);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АП#", "");
		КонецЕсли; 
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Адрес#", ФактическийАдрес);
		
		
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация,"#ГД#");
		
			
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ОтветственныйМенеджер#", ОсновнойМенеджер);
		
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БР#");
		
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ПИ#");
		
		
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#СГ#");
		
		
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ПР#");
	КонецЕсли;
	
	Если (ИспользуютсяТолькоПартнеры Или ДействиеСКонтрагентом = 1) И УказыватьЮридическиеРеквизиты Тогда
		
		СтруктураИНН = ДанныеИНН_КПП();
		
		Если ЕстьДубльПоИННКПП Тогда
			НайденныйДубльПоИНН = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(СтруктураИНН.ИНН,СтруктураИНН.КПП);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИнформацияДубльИНН#", СообщениеДубльИНН(СтруктураИНН.ИНН_КПП, НайденныйДубльПоИНН));
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИД#", "");
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РД#");
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БС#");
		Иначе
			Элементы.Далее2.Доступность =Истина;
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ИД#");
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПредставлениеТипаЮрФизЛица#", ПредставлениеТипаЮрФизЛица());
			Если ИспользуютсяТолькоПартнеры Тогда
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#СН#");
			Иначе
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПолноеНаименованиеКонтрагента#",
				                     ?(ЭтоКомпания = 0, ПолноеЮридическоеНаименование, ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера)));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СН#", "");
			КонецЕсли;
			Если ВидКомпании = 3 Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НаименованиеГоловногоКонтрагента#",
				                     ?(ИспользуютсяТолькоПартнеры Или ВыбратьГоловногоКонтрагента = 0,
				                     ГоловнойКонтрагент,
				                     ?(ВыбратьГоловногоКонтрагента = 1, НаименованиеГоловногоКонтрагента, "")));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СГК#", "");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#СГК#");
			КонецЕсли;
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИНН#", СтруктураИНН.ИНН_КПП);
			Если ЭтоКомпания = 0 И ВидКомпании <> 1 Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РДК#", "");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РДК#");
			КонецЕсли;
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ЮридическийАдрес#", ЮридическийАдрес);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФактическийАдрес#", ФактическийАдрес);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РД#", "");
			
			Если ЭтоКомпания = 1 И УказатьДокументУдостоверяющийЛичность Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ВидДокумента#" ,ВидДокумента);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СерияДокумента#", СерияДокумента);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НомерДокумента#", НомерДокумента);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДатаВыдачи#", Формат(ДатаВыдачи,"ДЛФ=D"));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СрокДействия#", Формат(СрокДействия,"ДЛФ=D"));
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КемВыдан#", КемВыданДокумент);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПодразделения#",КодПодразделения);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДК#", "");
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
			КонецЕсли;
			
			Если УказатьБанковскийСчетКонтрагента Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НомерСчета#", НомерСчета);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ВалютаДенежныхСредств#", ВалютаДенежныхСредств);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Банк#", Банк);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоррСчетБанка#", КоррСчетБанка);
				Если ИспользуетсяБанкДляРасчетов Тогда
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БанкДляРасчетов#", БанкДляРасчетов);
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоррСчетБанкаДляРасчетов#", КоррСчетБанкаДляРасчетов);
				Иначе
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БанкДляРасчетов#", "");
					ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоррСчетБанкаДляРасчетов#", "");
				КонецЕсли;
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БС#", "")
			Иначе
				ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БС#");
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#РД#");
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ИД#");
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДК#");
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БС#");
	КонецЕсли;
	
	Если ВидКомпании = 3 И Не ИспользуютсяТолькоПартнеры И ВыбратьГоловногоКонтрагента = 1 Тогда
		
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДГК#", "");
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПолноеНаименованиеГоловногоКонтрагента#",
			ПолноеНаименованиеГоловногоКонтрагента);
		Если ЗначениеЗаполнено(ПартнерГоловногоКонтрагента) Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПартнерГоловногоКонтрагента#", ПартнерГоловногоКонтрагента);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ПГК#", "");
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ПГК#");
		КонецЕсли;
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ИННГоловногоКонтрагента#",
		                     ИНН + ?(ПустаяСтрока(КППГоловногоКонтрагента), "", "\" + КППГоловногоКонтрагента));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КодПоОКПОГоловногоКонтрагента#", КодПоОКПОГоловногоКонтрагента);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ЮридическийАдресГоловногоКонтрагента#",
			ЮридическийАдресГоловногоКонтрагента);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФактическийАдресГоловногоКонтрагента#",
			ФактическийАдресГоловногоКонтрагента);
		
		Если УказатьБанковскийСчетГоловногоКонтрагента Тогда
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#НомерСчетаГоловногоКонтрагента#",
				НомерСчетаГоловногоКонтрагента);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ВалютаДенежныхСредствГоловногоКонтрагента#",
				ВалютаДенежныхСредствГоловнойКонтрагент);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БанкГоловногоКонтрагента#", БанкГоловнойКонтрагент);
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоррСчетБанкаГоловногоКонтрагента#",
				КоррСчетБанкаГоловнойКонтрагент);
			Если ИспользуетсяБанкДляРасчетовГоловнойКонтрагент Тогда
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БанкДляРасчетовГоловногоКонтрагента#",
					БанкДляРасчетовГоловнойКонтрагент);
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоррСчетБанкаДляРасчетовГоловногоКонтрагента#",
					КоррСчетБанкаДляРасчетовГоловнойКонтрагент);
			Иначе
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БанкДляРасчетовГоловногоКонтрагента#", "");
				ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#КоррСчетБанкаДляРасчетовГоловногоКонтрагента#", "");
			КонецЕсли;
			ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#БСГК#", "")
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#БСГК#");
		КонецЕсли;
		
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДГК#");
	КонецЕсли;
	
	Если ДействиеПоРезультатамНайдено <> 0 И ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ФИО#",ФИО_ОднойСтрокой(ФамилияКЛ, ИмяКЛ, ОтчествоКЛ));
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АдресЭПКЛ#" ,АдресЭПКЛ);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ТелефонКЛ#", ТелефонКЛ);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#МобильныйТелефонКЛ#", МобильныйТелефонКЛ);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#Роль#", Роль);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РКЛ#", "");
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#ДКЛ#", "");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#ДКЛ#");
	КонецЕсли;
	
	ВидимостьСтраныРегистрации = (ИспользуютсяТолькоПартнеры ИЛИ УказыватьЮридическиеРеквизиты) И ВидКомпании = 1;
	Если ВидимостьСтраныРегистрации Тогда
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#СтранаРегистрации#", СтранаРегистрации);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#РегистрационныйНомер#", РегистрационныйНомер);
		ИтоговаяИнформация = СтрЗаменить(ИтоговаяИнформация, "#АПС#", "");
	Иначе
		ОбщегоНазначенияУТКлиентСервер.УдалитьИзСтрокиПодстроку(ИтоговаяИнформация, "#АПС#");
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтрокуТипОтношений()
	
	СтрокаТипОтношений = ?(Клиент,НСтр("ru = 'Клиент'"),"") + ?(Поставщик, НСтр("ru = ', Поставщик'"),"") + ?(Перевозчик, НСтр("ru = ', Перевозчик'"),"") + ?(Конкурент, НСтр("ru = ', Конкурент'"),"") + ?(ПрочиеОтношения, НСтр("ru = ', Прочие отношения'"),"");
	Если Лев(СтрокаТипОтношений, 2) = ", " Тогда
		СтрокаТипОтношений = Прав(СтрокаТипОтношений, СтрДлина(СтрокаТипОтношений)-2);
	КонецЕсли;
	
	Возврат СтрокаТипОтношений;
	
КонецФункции

&НаСервере
Функция НаименованиеПартнера()
	
	Если ЭтоКомпания = 0 Тогда
		Возврат ?(ИспользуютсяТолькоПартнеры, ПолноеЮридическоеНаименование, ПолноеНаименование)
	Иначе
		Возврат ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция НаименованиеКонтрагента()
	
	Если ЭтоКомпания = 0 Тогда
		Возврат НаименованиеКонтрагента;
	Иначе
		Возврат ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДанныеИНН_КПП()
	
	СтруктураИНН = Новый Структура;
	СтруктураИНН.Вставить("ИНН", "");
	СтруктураИНН.Вставить("КПП", "");
	СтруктураИНН.Вставить("ИНН_КПП", "");
	
	Если ЭтоКомпания = 0 И ВидКомпании = 1 Тогда
		Возврат СтруктураИНН;
	КонецЕсли;
	
	СтруктураИНН.ИНН = ?(ЭтоКомпания = 0, ИНН, ИННПартнерФизЛицо);
	
	Если ЭтоКомпания = 0 И ВидКомпании <> 2 Тогда
		СтруктураИНН.КПП     = КПП;
		СтруктураИНН.ИНН_КПП = СтруктураИНН.ИНН + ?(ПустаяСтрока(КПП), "", "\" + КПП);
	Иначе
		СтруктураИНН.ИНН_КПП = СтруктураИНН.ИНН;
	КонецЕсли;
	
	Возврат СтруктураИНН;
	
КонецФункции

&НаСервере
Функция СообщениеДубльИНН(ПредставлениеИНН_КПП, НайденныйДубльПоИНН)
	
	СтрСообщение = НСтр("ru='Контрагент создан не будет. ИНН\КПП - %1 уже указаны для контрагента %2 с кодом %3, ответственный - %4.'");
	Если Не ИспользуютсяТолькоПартнеры Тогда
		СтрСообщение = СтрСообщение + " " + НСтр("ru='Измените КПП или используйте уже имеющегося партнера.'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		СтрСообщение,
		ПредставлениеИНН_КПП,
		НайденныйДубльПоИНН.Ссылка,
		НайденныйДубльПоИНН.Код,
		НайденныйДубльПоИНН.ОсновнойМенеджер);
	
КонецФункции

&НаСервере
Функция ПредставлениеТипаЮрФизЛица()
	
	Если ЭтоКомпания = 0 Тогда
		Если ВидКомпании = 0 Тогда
			Возврат НСтр("ru='Юридическое лицо'");
		ИначеЕсли ВидКомпании = 1 Тогда
			Возврат НСтр("ru='Юридическое лицо(за пределами РФ)'");
		ИначеЕсли ВидКомпании = 2 Тогда
			Возврат НСтр("ru='Индивидуальный предприниматель(ПБОЮЛ)'");
		Иначе
			Возврат НСтр("ru='Обособленное подразделение'");
		КонецЕсли;
	Иначе
		Возврат НСтр("ru='Физическое лицо'");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипЮрФизЛицаПартнера(ЭтоКомпания)
	
	Если ЭтоКомпания = 0 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании)
	
	Если ЭтоКомпания = 0 Тогда
        Возврат ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область УправлениеВидимостьюИДоступностьюЭлементовФормы

&НаКлиенте
Процедура УправлениеСтраницамиПодвал()
	
	ПредыдущаяСтраницаПодвал = Элементы.СтраницыПодвал.ТекущаяСтраница;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее;
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница =
			?(ДействиеПоРезультатамНайдено = 0 И (ИспользуютсяТолькоПартнеры Или ДействиеСКонтрагентом = 0),
			Элементы.СтраницаКнопкиГотово,
			Элементы.СтраницаКнопкиНазадДалее);
	ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная Тогда
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиСоздать;
	Иначе
		Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее;
	КонецЕсли;
	
	Если ПредыдущаяСтраницаПодвал <> Элементы.СтраницыПодвал.ТекущаяСтраница Тогда
		Если Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиДалее Тогда
			Элементы.Далее.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиГотово Тогда
			Элементы.Далее1.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиСоздать Тогда
			Элементы.Далее2.КнопкаПоУмолчанию = Истина;
		ИначеЕсли Элементы.СтраницыПодвал.ТекущаяСтраница = Элементы.СтраницаКнопкиНазадДалее Тогда
			Элементы.Далее3.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ВидимостьСтраницПервичнаяИнформация()
	
	Если ЭтоКомпания = 0 Тогда
		
		Элементы.СтраницыКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаКомпания;
		
	Иначе
		
		Элементы.СтраницыКомпанияЧастноеЛицо.ТекущаяСтраница = Элементы.СтраницаФизическоеЛицо;
		
	КонецЕсли;
	
	Если Не НаОснованииКонтрагента Тогда
		Если ИспользуютсяТолькоПартнеры Тогда
			Элементы.СтраницыБудетСоздан.ТекущаяСтраница = Элементы.СтраницаБудетСозданКонтрагент;
		Иначе
			Элементы.СтраницыБудетСоздан.ТекущаяСтраница = 
			?(НЕ УказыватьЮридическиеРеквизиты , Элементы.СтраницаБудетСозданПартнер, Элементы.СтраницаБудетСозданПартнерИКонтрагент);
		КонецЕсли;
	КонецЕсли;
	
	УправлениеДоступностьюПервичнаяИнформация();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюПервичнаяИнформация()
	
	// Юридические реквизиты
	Если НЕ (НаОснованииКонтрагента Или НаОснованииОбособленногоКонтрагента) Тогда
		Если ЭтоКомпания = 0 Тогда
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаРегистрационныеДанныеФНС",
				"Доступность", УказыватьЮридическиеРеквизиты, Истина);
			Если УказыватьЮридическиеРеквизиты Тогда
				ПартнерыИКонтрагенты.УправлениеЭлементамиЮридическихРеквизитов(
					ЭтотОбъект, ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании), ВидКомпании = 3, ИНН);
			КонецЕсли;
		Иначе
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаДанныеКонтрагентаЧастноеЛицо",
				"Доступность", УказыватьЮридическиеРеквизиты, Истина);
			Если УказыватьЮридическиеРеквизиты Тогда
				УстановитьДоступностьДанныхДокументаФизлица(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// Контактное лицо
	УстановитьДоступностьДанныхКонтактногоЛица(ЭтотОбъект);
	
	// Страна регистрация видна только в том случае, когда контрагент не является резидентом РФ. 
	// В противном случае - и для физ лиц и для ИП и для юр лиц страна регистрации всегда Россия.
	Элементы.ГруппаСтраницыДанныхРегистрацииКонтрагента.ТекущаяСтраница = 
		?((ИспользуютсяТолькоПартнеры ИЛИ УказыватьЮридическиеРеквизиты) И ВидКомпании = 1, 
		Элементы.ГруппаСтраницаИностраннойРегистрации, Элементы.ГруппаСтраницаРоссийскогоКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюРасчетныйСчет()
	
	Если НЕ УказатьБанковскийСчетКонтрагента И ИспользуетсяБанкДляРасчетов Тогда
		ИспользуетсяБанкДляРасчетов = ЛОЖЬ;
	КонецЕсли;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ГруппаДанныеБанковскогоСчета");
	МассивЭлементов.Добавить("НомерСчета");
	МассивЭлементов.Добавить("ВалютаДенежныхСредств");
	МассивЭлементов.Добавить("ДекорацияБИКБанка");
	МассивЭлементов.Добавить("БИКБанка");
	МассивЭлементов.Добавить("КоррСчетБанка");
	МассивЭлементов.Добавить("ДекорацияБанк");
	МассивЭлементов.Добавить("Банк");
	МассивЭлементов.Добавить("ИспользуетсяБанкДляРасчетов");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		УказатьБанковскийСчетКонтрагента);
	
	БанкДляРасчетовДоступен = УказатьБанковскийСчетКонтрагента И ИспользуетсяБанкДляРасчетов;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ГруппаБанкДляРасчетов");
	МассивЭлементов.Добавить("ДекорацияБИКБанкаДляРасчетов");
	МассивЭлементов.Добавить("БИКБанкаДляРасчетов");
	МассивЭлементов.Добавить("КоррСчетБанкаДляРасчетов");
	МассивЭлементов.Добавить("ДекорацияБанкДляРасчетов");
	МассивЭлементов.Добавить("БанкДляРасчетов");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Доступность",
		БанкДляРасчетовДоступен);
	
КонецПроцедуры

&НаСервере
Процедура УправлениеДоступностьюДополнительныеСведения()
	
	Элементы.ЮридическийАдрес.ТолькоПросмотр = (НЕ УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0);
	Элементы.ЮридическийАдресРавенФактическому.Доступность = (УказыватьЮридическиеРеквизиты);
	
	
	Если ЭтоКомпания = 0 Тогда
		
		Элементы.СтраницыДополнительныеСведения.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведенияКомпания;
		Элементы.СтраницыАдреса.ТекущаяСтраница = Элементы.СтраницаАдресаКомпания;		
	Иначе
		Элементы.СтраницыДополнительныеСведения.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведенияЧастноеЛицо;
		Элементы.СтраницыАдреса.ТекущаяСтраница = Элементы.СтраницаАдресаЧастноеЛицо;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДанныхКонтактногоЛица(Форма)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ФамилияКЛ");
	МассивЭлементов.Добавить("ИмяКЛ");
	МассивЭлементов.Добавить("ОтчествоКЛ");
	МассивЭлементов.Добавить("Роль");
	МассивЭлементов.Добавить("ТелефонКЛ");
	МассивЭлементов.Добавить("АдресЭПКЛ");
	МассивЭлементов.Добавить("МобильныйТелефонКЛ");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность",
		Форма.УказатьДанныеКонтактногоЛица);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьДанныхДокументаФизлица(Форма)
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ВидДокумента");
	МассивЭлементов.Добавить("СерияДокумента");
	МассивЭлементов.Добавить("НомерДокумента");
	МассивЭлементов.Добавить("ДатаВыдачи");
	МассивЭлементов.Добавить("СрокДействия");
	МассивЭлементов.Добавить("КемВыданДокумент");
	МассивЭлементов.Добавить("КодПодразделения");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Форма.Элементы, МассивЭлементов, "Доступность",
		Форма.УказатьДокументУдостоверяющийЛичность);
	
КонецПроцедуры

#КонецОбласти

#Область ПоискПоПервичнойИнформации

&НаСервере
Функция ПодзапросПоНазванию()
	
	ТекстУсловияПоНеизвестномуПартнеруКонтрагент = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	ТекстУсловияПоНеизвестномуПартнеру           = " И (НЕ Партнеры.Ссылка.Предопределенный)";
	
	ТекстПодзапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Партнеры.Ссылка КАК Партнер,
	|	Партнеры.Ссылка КАК НайденоПоСсылка,
	|	ВЫБОР
	|		КОГДА Партнеры.Наименование ПОДОБНО &Название
	|			ТОГДА &СтрокаНаименование
	|			ИНАЧЕ &СтрокаНаименованиеПолное
	|	КОНЕЦ КАК НайденоВРеквизите
	|ПОМЕСТИТЬ НайденоПоНазванию
	|ИЗ
	|	Справочник.Партнеры КАК Партнеры
	|ГДЕ
	|	Партнеры.Наименование ПОДОБНО &Название ИЛИ Партнеры.НаименованиеПолное ПОДОБНО &Название" + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"");
	
	Если Не ИспользуютсяТолькоПартнеры Тогда
		ТекстПодзапроса = ТекстПодзапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	Контрагенты.Партнер,
		|	Контрагенты.Ссылка,
		|	ВЫБОР
		|		КОГДА Контрагенты.Наименование ПОДОБНО &Название
		|			ТОГДА &СтрокаНаименование
		|			ИНАЧЕ &СтрокаНаименованиеПолное
		|	КОНЕЦ
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	(Контрагенты.Наименование ПОДОБНО &Название ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &Название) И 
		|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеруКонтрагент, "");
	КонецЕсли;
	
	ТекстПодзапроса = ТекстПодзапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|
	|";
	
	Возврат ТекстПодзапроса;
	
КонецФункции

&НаСервере
Функция ПодзапросПоАдресуЭлектроннойПочты()

	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ ПартнерыКонтактнаяИнформация.Ссылка.Предопределенный)";
	ТекстУсловияПоНеизвестномуПартнеруКЛ = " И (НЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК НайденоПоСсылка,
	|	&СтрокаEmail                        КАК НайденоВРеквизите,
	|	ПартнерыКонтактнаяИнформация.Вид    КАК ВидКонтакта
	|ПОМЕСТИТЬ НайденоПоАдресуЭП
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	ПартнерыКонтактнаяИнформация.АдресЭП В (&АдресаЭП) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	&СтрокаEmail,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.АдресЭП В (&АдресаЭП) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеруКЛ, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоНомеруТелефона(МассивПредставленийТелефона)
	
	// партнеры
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК Партнер,
	|	ПартнерыКонтактнаяИнформация.Ссылка КАК НайденоПоСсылка,
	|	&СтрокаТелефон                      КАК НайденоВРеквизите,
	|	ПартнерыКонтактнаяИнформация.Вид    КАК ВидКонтакта
	|ПОМЕСТИТЬ НайденоПоТелефону
	|ИЗ
	|	Справочник.Партнеры.КонтактнаяИнформация КАК ПартнерыКонтактнаяИнформация
	|ГДЕ
	|	(ПартнерыКонтактнаяИнформация.НомерТелефонаБезКодов В(&МассивНомеровТелефона) ";
	
	Для инд = 0 По  МассивПредставленийТелефона.Количество()-1 Цикл
		
		ТекстЗапроса = ТекстЗапроса + " ИЛИ ПартнерыКонтактнаяИнформация.Представление ПОДОБНО &ПредставлениеТелефона" + Строка(инд) + " "  ; 
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ")
	|	И (ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ ПартнерыКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))";
	
	Если НаОснованииКонтрагента Тогда
		
		ТекстЗапроса = ТекстЗапроса + " И (НЕ ПартнерыКонтактнаяИнформация.Ссылка.Предопределенный)";
		
	КонецЕсли;
	
	// контактные лица
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ 
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка,
	|	&СтрокаТелефон,
	|	КонтактныеЛицаПартнеровКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактныеЛицаПартнеровКонтактнаяИнформация
	|ГДЕ
	|	(КонтактныеЛицаПартнеровКонтактнаяИнформация.НомерТелефонаБезКодов В (&МассивНомеровТелефона) ";
	
	Для инд = 0 По  МассивПредставленийТелефона.Количество()-1 Цикл
		
		ТекстЗапроса = ТекстЗапроса + " ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.Представление ПОДОБНО &ПредставлениеТелефона" + Строка(инд) + " "  ; 
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + ")
	|	И (КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ КонтактныеЛицаПартнеровКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))";
	
	Если НаОснованииКонтрагента Тогда
		
		ТекстЗапроса = ТекстЗапроса + " И (НЕ КонтактныеЛицаПартнеровКонтактнаяИнформация.Ссылка.Владелец.Предопределенный)";
		
	КонецЕсли;
	
	// физические лица
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|"; 
	
	Возврат ТекстЗапроса;
	
КонецФункции 

&НаСервере
Функция ПодзапросПоИНН()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
	|	&СтрокаИНН КАК      НайденоВРеквизите
	|ПОМЕСТИТЬ КонтрагентыПоИНН
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоРегистрационномуНомеруВСтранеРегистрации()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
	|	&СтрокаРегистрационныйНомер КАК НайденоВРеквизите
	|ПОМЕСТИТЬ КонтрагентыПоРегистрационномуНомеру
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.РегистрационныйНомер = &РегистрационныйНомер И
	|	Контрагенты.Партнер <> ЗНАЧЕНИЕ(Справочник.Партнеры.ПустаяСсылка) " + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру,"") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция ПодзапросПоФИО(Запрос)
	
	МассивФИО = Новый Массив;
	Если НЕ ПустаяСтрока(ФамилияПартнера) Тогда
		ДобавитьВМассивФИО(МассивФИО, ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	Если НЕ ПустаяСтрока(ФамилияКЛ) Тогда
		ДобавитьВМассивФИО(МассивФИО, ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
	КонецЕсли;
	
	ПодзапросПоКонтактнымЛицам = "";
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ КонтактныеЛицаПартнеров.Владелец.Предопределенный)";
	
	Для Инд = 1 По МассивФИО.Количество() Цикл
	
		ПодзапросПоКонтактнымЛицам = ПодзапросПоКонтактнымЛицам + ?(ПустаяСтрока(ПодзапросПоКонтактнымЛицам),"","ОБЪЕДИНИТЬ ВСЕ")+ "
		|
		|ВЫБРАТЬ " +  ?(Инд = 1,"РАЗРЕШЕННЫЕ","") + "
		|	КонтактныеЛицаПартнеров.Владелец КАК Партнер,
		|	КонтактныеЛицаПартнеров.Ссылка   КАК НайденоПоСсылка,
		|	&СтрокаНаименование              КАК НайденоВРеквизите
		|" + ?(ПустаяСтрока(ПодзапросПоКонтактнымЛицам),"ПОМЕСТИТЬ НайденоПоФИОКонтактныхЛиц","")  + "
		|ИЗ
		|	Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
		|ГДЕ
		|	КонтактныеЛицаПартнеров.Наименование ПОДОБНО &ФИО_" + Строка(Инд) + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") +"
		|";
		
		Запрос.УстановитьПараметр("ФИО_" + Строка(Инд), МассивФИО[Инд-1]+"%")

	КонецЦикла;
	
	ПодзапросПоКонтактнымЛицам = ПодзапросПоКонтактнымЛицам + "
	|;
	|////////////////////////////////////////////////////////////////////////////////";
	
	Возврат ПодзапросПоКонтактнымЛицам ;
	
КонецФункции

&НаСервере
Функция ПодзапросПоНаименованиюКонтрагента()
	
	ТекстУсловияПоНеизвестномуПартнеру = " И (НЕ Контрагенты.Партнер.Предопределенный)";
	
	Возврат "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Контрагенты.Партнер КАК Партнер,
	|	Контрагенты.Ссылка  КАК НайденоПоСсылка,
	|	ВЫБОР
	|		КОГДА  Контрагенты.Наименование ПОДОБНО &Название
	|			ТОГДА &СтрокаНаименование
	|			ИНАЧЕ &СтрокаНаименованиеПолное
	|	КОНЕЦ КАК НайденоВРеквизите
	|ПОМЕСТИТЬ КонтрагентыПоНаименованию
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование ПОДОБНО &НаименованиеКонтрагента ИЛИ Контрагенты.НаименованиеПолное ПОДОБНО &НаименованиеКонтрагента" + ?(НаОснованииКонтрагента, ТекстУсловияПоНеизвестномуПартнеру, "") + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
КонецФункции

&НаСервере
Функция СводныйЗапрос(СтруктураПоиска)
		
	СводныйЗапрос ="
		|
		|ВЫБРАТЬ 
		|	НайденоПоНазванию.Партнер           КАК Партнер,
		|	НайденоПоНазванию.НайденоПоСсылка   КАК НайденоПоСсылка,
		|	НайденоПоНазванию.НайденоВРеквизите КАК НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО                        КАК ВидКонтакта
		|ПОМЕСТИТЬ НайденныеСовпадения
		|ИЗ
		|	НайденоПоНазванию КАК НайденоПоНазванию
		|";
	
	Если СтруктураПоиска.ИНН Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоИНН.Партнер,
		|	КонтрагентыПоИНН.НайденоПоСсылка,
		|	КонтрагентыПоИНН.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоИНН КАК КонтрагентыПоИНН
		|"; 
		
	КонецЕсли;
	
	Если СтруктураПоиска.РегистрационныйНомер Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоРегистрационномуНомеру.Партнер,
		|	КонтрагентыПоРегистрационномуНомеру.НайденоПоСсылка,
		|	КонтрагентыПоРегистрационномуНомеру.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоРегистрационномуНомеру КАК КонтрагентыПоРегистрационномуНомеру
		|"; 
		
	КонецЕсли;
	
	Если СтруктураПоиска.АдресЭП Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	НайденоПоАдресуЭП.Партнер,
		|	НайденоПоАдресуЭП.НайденоПоСсылка,
		|	НайденоПоАдресуЭП.НайденоВРеквизите,
		|	НайденоПоАдресуЭП.ВидКонтакта
		|ИЗ
		|	НайденоПоАдресуЭП КАК НайденоПоАдресуЭП
		|";		
		
	КонецЕсли;
	
	Если СтруктураПоиска.НомерТелефона Тогда
		
		СводныйЗапрос = СводныйЗапрос +  "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	НайденоПоТелефону.Партнер,
		|	НайденоПоТелефону.НайденоПоСсылка,
		|	НайденоПоТелефону.НайденоВРеквизите,
		|	НайденоПоТелефону.ВидКонтакта
		|ИЗ
		|	НайденоПоТелефону КАК НайденоПоТелефону
		|";
		
	КонецЕсли;
	
	Если СтруктураПоиска.ФИО Тогда
		
		СводныйЗапрос = СводныйЗапрос +  "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	НайденоПоФИОКонтактныхЛиц.Партнер,
		|	НайденоПоФИОКонтактныхЛиц.НайденоПоСсылка,
		|	НайденоПоФИОКонтактныхЛиц.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	НайденоПоФИОКонтактныхЛиц КАК НайденоПоФИОКонтактныхЛиц
		|";
		
	КонецЕсли;
	
	Если СтруктураПоиска.НаименованиеКонтрагента Тогда
		
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоНаименованию.Партнер,
		|	КонтрагентыПоНаименованию.НайденоПоСсылка,
		|	КонтрагентыПоНаименованию.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоНаименованию КАК КонтрагентыПоНаименованию
		|"; 
		
	КонецЕсли;


	Если СтруктураПоиска.ДокументКонтрагента Тогда
	
		СводныйЗапрос = СводныйЗапрос + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ 
		|	КонтрагентыПоДокументу.Партнер,
		|	КонтрагентыПоДокументу.НайденоПоСсылка,
		|	КонтрагентыПоДокументу.НайденоВРеквизите,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	КонтрагентыПоДокументу КАК КонтрагентыПоДокументу
		|";
	
	КонецЕсли;
	
	СводныйЗапрос = СводныйЗапрос + "
	|;
	|////////////////////////////////////////////////////////////////////////////////";
	
	СводныйЗапрос = СводныйЗапрос + "
	|ВЫБРАТЬ
	|	НайденныеСовпадения.Партнер             КАК Партнер,
	|	КОЛИЧЕСТВО(НайденныеСовпадения.Партнер) КАК КоличествоНайденныхАналогов
	|ПОМЕСТИТЬ СовпаденияПартнеры
	|ИЗ
	|	НайденныеСовпадения КАК НайденныеСовпадения
	|
	|СГРУППИРОВАТЬ ПО
	|	НайденныеСовпадения.Партнер
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СовпаденияПартнеры.Партнер                   КАК Партнер,
	|	РеквизитыПартнера.Реквизит                   КАК Реквизит,
	|	ЕСТЬNULL(КонтактыПартнера.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКонтакта,
	|	РеквизитыПартнера.Значение                   КАК ЗначениеСоздаваемого,
	|	РеквизитыПартнера.Порядок                    КАК ПорядокРеквизита,
	|	РеквизитыПартнера.Существенный               КАК Существенный,
	|	ВЫБОР
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаВидПартнера
	|			ТОГДА ПРЕДСТАВЛЕНИЕ(Партнеры.ЮридическоеФизическоеЛицо)
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаНаименование
	|			ТОГДА Партнеры.Наименование
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаНаименованиеПолное
	|			ТОГДА Партнеры.НаименованиеПолное
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаEmail
	|			ТОГДА КонтактыПартнера.АдресЭП
	|		КОГДА РеквизитыПартнера.Реквизит = &СтрокаТелефон
	|			ТОГДА КонтактыПартнера.Представление
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ДанныеПартнеров
	|ИЗ
	|	СовпаденияПартнеры КАК СовпаденияПартнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО СовпаденияПартнеры.Партнер = Партнеры.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыПартнера КАК РеквизитыПартнера
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Партнеры.КонтактнаяИнформация КАК КонтактыПартнера
	|		ПО СовпаденияПартнеры.Партнер = КонтактыПартнера.Ссылка
	|			И (ВЫБОР
	|				КОГДА РеквизитыПартнера.Реквизит = &СтрокаEmail
	|					ТОГДА КонтактыПартнера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|				КОГДА РеквизитыПартнера.Реквизит = &СтрокаТелефон
	|					ТОГДА КонтактыПартнера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|							ИЛИ КонтактыПартнера.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НайденныеСовпадения.Партнер         КАК Партнер,
	|	НайденныеСовпадения.НайденоПоСсылка КАК Контрагент
	|ПОМЕСТИТЬ СовпадениеКонтрагенты
	|ИЗ
	|	НайденныеСовпадения КАК НайденныеСовпадения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО НайденныеСовпадения.НайденоПоСсылка = Контрагенты.Ссылка
	|ГДЕ
	|	НЕ &ИспользуютсяТолькоПартнеры
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СовпаденияПартнеры.Партнер,
	|	Контрагенты.Ссылка
	|ИЗ
	|	СовпаденияПартнеры КАК СовпаденияПартнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СовпаденияПартнеры.Партнер = Контрагенты.Партнер
	|ГДЕ
	|	&ИспользуютсяТолькоПартнеры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СовпадениеКонтрагенты.Партнер     КАК Партнер,
	|	СовпадениеКонтрагенты.Контрагент  КАК Контрагент,
	|	РеквизитыКонтрагента.Реквизит     КАК Реквизит,
	|	НЕОПРЕДЕЛЕНО                      КАК ВидКонтакта,
	|	РеквизитыКонтрагента.Значение     КАК ЗначениеСоздаваемого,
	|	РеквизитыКонтрагента.Порядок      КАК ПорядокРеквизита,
	|	РеквизитыКонтрагента.Существенный КАК Существенный,
	|	ВЫБОР
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаВидКонтрагента
	|			ТОГДА
	|				ПРЕДСТАВЛЕНИЕ(Контрагенты.ЮридическоеФизическоеЛицо)
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаНаименование
	|			ТОГДА Контрагенты.Наименование
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаНаименованиеПолное
	|			ТОГДА Контрагенты.НаименованиеПолное
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаИНН
	|			ТОГДА Контрагенты.ИНН
	|		КОГДА РеквизитыКонтрагента.Реквизит = &СтрокаКПП
	|			ТОГДА Контрагенты.КПП
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ДанныеКонтрагентов
	|ИЗ
	|	СовпадениеКонтрагенты КАК СовпадениеКонтрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО СовпадениеКонтрагенты.Контрагент = Контрагенты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыКонтрагента КАК РеквизитыКонтрагента
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НайденныеСовпадения.Партнер         КАК Партнер,
	|	НайденныеСовпадения.НайденоПоСсылка КАК КонтактноеЛицо
	|ПОМЕСТИТЬ СовпадениеКонтактныеЛица
	|ИЗ
	|	НайденныеСовпадения КАК НайденныеСовпадения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|		ПО НайденныеСовпадения.НайденоПоСсылка = КонтактныеЛицаПартнеров.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СовпадениеКонтактныеЛица.Партнер                  КАК Партнер,
	|	СовпадениеКонтактныеЛица.КонтактноеЛицо           КАК КонтактноеЛицо,
	|	РеквизитыКонтактногоЛица.Реквизит                 КАК Реквизит,
	|	ЕСТЬNULL(КонтактыКонтактныхЛиц.Вид, НЕОПРЕДЕЛЕНО) КАК ВидКонтакта,
	|	РеквизитыКонтактногоЛица.Значение                 КАК ЗначениеСоздаваемого,
	|	РеквизитыКонтактногоЛица.Порядок                  КАК ПорядокРеквизита,
	|	РеквизитыКонтактногоЛица.Существенный             КАК Существенный,
	|	ВЫБОР
	|		КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаНаименование
	|			ТОГДА КонтактныеЛицаПартнеров.Наименование
	|		КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаEmail
	|			ТОГДА КонтактыКонтактныхЛиц.АдресЭП
	|		КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаТелефон
	|			ТОГДА КонтактыКонтактныхЛиц.Представление
	|		ИНАЧЕ
	|			""""
	|	КОНЕЦ КАК Значение
	|ПОМЕСТИТЬ ДанныеКонтактныхЛиц
	|ИЗ
	|	СовпадениеКонтактныеЛица КАК СовпадениеКонтактныеЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров КАК КонтактныеЛицаПартнеров
	|		ПО СовпадениеКонтактныеЛица.КонтактноеЛицо = КонтактныеЛицаПартнеров.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РеквизитыКонтактногоЛица КАК РеквизитыКонтактногоЛица
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛицаПартнеров.КонтактнаяИнформация КАК КонтактыКонтактныхЛиц
	|		ПО СовпадениеКонтактныеЛица.КонтактноеЛицо = КонтактыКонтактныхЛиц.Ссылка
	|			И (ВЫБОР
	|				КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаEmail
	|					ТОГДА КонтактыКонтактныхЛиц.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
	|				КОГДА РеквизитыКонтактногоЛица.Реквизит = &СтрокаТелефон
	|					ТОГДА КонтактыКонтактныхЛиц.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|							ИЛИ КонтактыКонтактныхЛиц.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс)
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СовпаденияПартнеры.Партнер                     КАК Партнер,
	|	СовпаденияПартнеры.КоличествоНайденныхАналогов КАК КоличествоНайденныхАналогов,
	|	Партнеры.ОсновнойМенеджер                      КАК ОсновнойМенеджер,
	|	Партнеры.Представление                         КАК Представление
	|ИЗ
	|	СовпаденияПартнеры КАК СовпаденияПартнеры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Партнеры КАК Партнеры
	|		ПО СовпаденияПартнеры.Партнер = Партнеры.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеПартнеров.Партнер              КАК Партнер,
	|	ДанныеПартнеров.Партнер              КАК НайденоПоСсылка,
	|	ДанныеПартнеров.Значение             КАК ЗначениеНайденного,
	|	ДанныеПартнеров.ЗначениеСоздаваемого КАК ЗначениеСоздаваемого,
	|	ДанныеПартнеров.Существенный         КАК Существенный,
	|	1                                    КАК ПорядокУзла,
	|	ДанныеПартнеров.ПорядокРеквизита     КАК ПорядокРеквизита,
	|	ВЫБОР
	|		КОГДА ДанныеПартнеров.ВидКонтакта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеПартнеров.Реквизит
	|		ИНАЧЕ ДанныеПартнеров.ВидКонтакта
	|	КОНЕЦ КАК Реквизит,
	|	ВЫБОР
	|		КОГДА НайденныеСовпадения.НайденоВРеквизите ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Совпадение
	|	
	|ИЗ
	|	ДанныеПартнеров КАК ДанныеПартнеров
	|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеСовпадения КАК НайденныеСовпадения
	|		ПО ДанныеПартнеров.Партнер = НайденныеСовпадения.Партнер
	|		 И ДанныеПартнеров.Партнер = НайденныеСовпадения.НайденоПоСсылка
	|		 И ДанныеПартнеров.Реквизит = НайденныеСовпадения.НайденоВРеквизите
	|		 И ДанныеПартнеров.ВидКонтакта = НайденныеСовпадения.ВидКонтакта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтрагентов.Партнер,
	|	ДанныеКонтрагентов.Контрагент,
	|	ДанныеКонтрагентов.Значение,
	|	ДанныеКонтрагентов.ЗначениеСоздаваемого,
	|	ДанныеКонтрагентов.Существенный,
	|	2,
	|	ДанныеКонтрагентов.ПорядокРеквизита,
	|	ДанныеКонтрагентов.Реквизит,
	|	ВЫБОР
	|		КОГДА НайденныеСовпадения.НайденоВРеквизите ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Совпадение
	|ИЗ
	|	ДанныеКонтрагентов КАК ДанныеКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеСовпадения КАК НайденныеСовпадения
	|		ПО ДанныеКонтрагентов.Партнер = НайденныеСовпадения.Партнер
	|		 И ДанныеКонтрагентов.Контрагент = НайденныеСовпадения.НайденоПоСсылка
	|		 И ДанныеКонтрагентов.Реквизит = НайденныеСовпадения.НайденоВРеквизите
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКонтактныхЛиц.Партнер,
	|	ДанныеКонтактныхЛиц.КонтактноеЛицо,
	|	ДанныеКонтактныхЛиц.Значение,
	|	ДанныеКонтактныхЛиц.ЗначениеСоздаваемого,
	|	ДанныеКонтактныхЛиц.Существенный,
	|	3,
	|	ДанныеКонтактныхЛиц.ПорядокРеквизита,
	|	ВЫБОР
	|		КОГДА ДанныеКонтактныхЛиц.ВидКонтакта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ДанныеКонтактныхЛиц.Реквизит
	|		ИНАЧЕ ДанныеКонтактныхЛиц.ВидКонтакта
	|	КОНЕЦ КАК Реквизит,
	|	ВЫБОР
	|		КОГДА НайденныеСовпадения.НайденоВРеквизите ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Совпадение
	|ИЗ
	|	ДанныеКонтактныхЛиц КАК ДанныеКонтактныхЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеСовпадения КАК НайденныеСовпадения
	|		ПО ДанныеКонтактныхЛиц.Партнер = НайденныеСовпадения.Партнер
	|		 И ДанныеКонтактныхЛиц.КонтактноеЛицо = НайденныеСовпадения.НайденоПоСсылка
	|		 И ДанныеКонтактныхЛиц.Реквизит = НайденныеСовпадения.НайденоВРеквизите
	|		 И ДанныеКонтактныхЛиц.ВидКонтакта = НайденныеСовпадения.ВидКонтакта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядокУзла,
	|	ПорядокРеквизита
	|ИТОГИ ПО
	|	Партнер,
	|	НайденоПоСсылка";
	
	Возврат СводныйЗапрос;
	
КонецФункции

&НаСервере
Процедура ВыполнитьПоискПоПервичнойИнформации()
	
	ТекущийНайденныйПартнер = Справочники.Партнеры.ПустаяСсылка();
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("НаименованиеКонтрагента",
	                         УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0 И НЕ ИспользуютсяТолькоПартнеры);
	СтруктураПоиска.Вставить("АдресЭП", ?(ЭтоКомпания = 0, НЕ ПустаяСтрока(АдресЭППартнера) ИЛИ (УказатьДанныеКонтактногоЛица И
	                         НЕ ПустаяСтрока(АдресЭПКЛ)),НЕ ПустаяСтрока(АдресЭППартнераФизЛицо)));
	СтруктураПоиска.Вставить("НомерТелефона", ?(ЭтоКомпания = 0,НЕ ПустаяСтрока(ТелефонПартнера) ИЛИ (УказатьДанныеКонтактногоЛица И
	                         (НЕ ПустаяСтрока(ТелефонКЛ)ИЛИ НЕ ПустаяСтрока(МобильныйТелефонКЛ))),НЕ ПустаяСтрока(ТелефонПартнераФизЛицо)));
	СтруктураПоиска.Вставить("ИНН", (УказыватьЮридическиеРеквизиты И ЭтоКомпания = 0 И НЕ ПустаяСтрока(ИНН))
	                         ИЛИ (ЭтоКомпания = 1 И НЕ ПустаяСтрока(ИННПартнерФизЛицо)));
	СтруктураПоиска.Вставить("ФИО", (ЭтоКомпания = 1) ИЛИ (ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(ФамилияКЛ)));
	СтруктураПоиска.Вставить("ДокументКонтрагента", (ЭтоКомпания = 1) И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность);
	СтруктураПоиска.Вставить("РегистрационныйНомер", (ИспользуютсяТолькоПартнеры ИЛИ УказыватьЮридическиеРеквизиты) И ВидКомпании = 1);
	
	МассивПредставленийТелефона = МассивПредставленийТелефонов();
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = ПодзапросПоНазванию();
	
	Если СтруктураПоиска.АдресЭП Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоАдресуЭлектроннойПочты();
	КонецЕсли;
	
	Если СтруктураПоиска.НомерТелефона Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоНомеруТелефона(МассивПредставленийТелефона);
	КонецЕсли;
	
	Если СтруктураПоиска.ИНН Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоИНН();
	КонецЕсли;
	
	Если СтруктураПоиска.ФИО Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоФио(Запрос);
	КонецЕсли;
	
	Если СтруктураПоиска.НаименованиеКонтрагента Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоНаименованиюКонтрагента();
	КонецЕсли;
			
	Если СтруктураПоиска.РегистрационныйНомер Тогда
		ТекстЗапроса = ТекстЗапроса + ПодзапросПоРегистрационномуНомеруВСтранеРегистрации();
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + СводныйЗапрос(СтруктураПоиска);
	
	НаименованиеПоиск = НаименованиеПартнера();
	Если ЭтоКомпания = 0 Тогда
		НаименованиеПоиск = "%" + НаименованиеПоиск + "%";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Название", НаименованиеПоиск);
	Запрос.УстановитьПараметр("АдресаЭП", МассивАдресовЭлектроннойПочтыДляПоиска());
	Запрос.УстановитьПараметр("ИНН", ?(ЭтоКомпания = 0, ИНН, ИННПартнерФизЛицо));
	Запрос.УстановитьПараметр("МассивНомеровТелефона", МассивНомеровТелефонаДляПоиска());
	Запрос.УстановитьПараметр("НаименованиеКонтрагента","%"+ПолноеЮридическоеНаименование+"%");
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	Запрос.УстановитьПараметр("Серия", СерияДокумента);
	Запрос.УстановитьПараметр("Номер", НомерДокумента);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("ИспользуютсяТолькоПартнеры", ИспользуютсяТолькоПартнеры);
	Запрос.УстановитьПараметр("СтрокаОбособленноеПодразделение", НСтр("ru='Обособленное подразделение'"));
	Запрос.УстановитьПараметр("РегистрационныйНомер", РегистрационныйНомер);
	
	ПредставленияРеквизитов = Новый Структура;
	ПредставленияРеквизитов.Вставить("СтрокаНаименование", НСтр("ru='Рабочее наименование'"));
	ПредставленияРеквизитов.Вставить("СтрокаНаименованиеПолное",
		?(ИспользуютсяТолькоПартнеры, НСтр("ru = 'Сокращенное юр. наименование'"), НСтр("ru='Публичное наименование'")));
	ПредставленияРеквизитов.Вставить("СтрокаКодОКПО", НСтр("ru='Код по ОКПО'"));
	ПредставленияРеквизитов.Вставить("СтрокаИНН", НСтр("ru='ИНН'"));
	ПредставленияРеквизитов.Вставить("СтрокаКПП", НСтр("ru='КПП'"));
	ПредставленияРеквизитов.Вставить("СтрокаТелефон", НСтр("ru='Телефон'"));
	ПредставленияРеквизитов.Вставить("СтрокаEmail", НСтр("ru='Email'"));
	ПредставленияРеквизитов.Вставить("СтрокаДанныеДокумента", НСтр("ru='Документ контрагента'"));
	ПредставленияРеквизитов.Вставить("СтрокаВидПартнера", НСтр("ru='Вид партнера'"));
	ПредставленияРеквизитов.Вставить("СтрокаВидКонтрагента", НСтр("ru='Вид контрагента'"));
	ПредставленияРеквизитов.Вставить("СтрокаРегистрационныйНомер", НСтр("ru='Регистрационный номер'"));
	
	Для Каждого ЭлементСтруктуры Из ПредставленияРеквизитов Цикл
		Запрос.УстановитьПараметр(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;
	
	РеквизитыИнформацииБезПоиска = Новый СписокЗначений;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПоместитьВременныеТаблицыРеквизитовДанных(МенеджерВременныхТаблиц, ПредставленияРеквизитов, СтруктураПоиска, РеквизитыИнформацииБезПоиска);
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = ТекстЗапроса;
	
	Для инд = 0 По  МассивПредставленийТелефона.Количество()-1 Цикл
		
		Запрос.УстановитьПараметр("ПредставлениеТелефона" + Строка(инд), "%"+МассивПредставленийТелефона[инд]+"%");
		
	КонецЦикла;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	МенеджерВременныхТаблиц.Закрыть();
	
	ЗаполнитьРезультатыНайдено(РезультатЗапроса, ПредставленияРеквизитов, РеквизитыИнформацииБезПоиска);
	
	ЕстьДубльПоИННКПП = Ложь;
	
	СтруктураИНН = ДанныеИНН_КПП();
	
	Если Не (НаОснованииКонтрагента Или ПустаяСтрока(СтруктураИНН.ИНН)) Тогда
		НайденныйДубльПоИНН = ПартнерыИКонтрагенты.ИННКППУжеИспользуетсяВИнформационнойБазе(СтруктураИНН.ИНН, СтруктураИНН.КПП);
		ЕстьДубльПоИННКПП = (НайденныйДубльПоИНН <> Неопределено);
	КонецЕсли;
	
	Если ЕстьДубльПоИННКПП Тогда
		Элементы.ДекорацияДубльИННКПП.Заголовок = СообщениеДубльИНН(СтруктураИНН.ИНН_КПП, НайденныйДубльПоИНН);
		Если ИспользуютсяТолькоПартнеры Тогда
			Элементы.ДействиеПоРезультатамНайдено.Доступность = Ложь;
			ДействиеПоРезультатамНайдено = 0;
		КонецЕсли;
		Элементы.ГруппаДействиеСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаДубльИННКПП;
		ДействиеСКонтрагентом = 0;
		ОтобразитьДубльИННКППвНайденныхПартнерах(НайденныйДубльПоИНН, ПредставленияРеквизитов);
	Иначе
		Элементы.ДействиеПоРезультатамНайдено.Доступность = Истина;
		Элементы.ДекорацияДубльИННКПП.Заголовок = "";
		Элементы.ГруппаДействиеСКонтрагентом.ТекущаяСтраница = Элементы.СтраницаДействиеСКонтрагентом;
		ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДействиеСКонтрагентом", "Видимость",
			Не ИспользуютсяТолькоПартнеры И УказыватьЮридическиеРеквизиты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьВременныеТаблицыРеквизитовДанных(МенеджерВременныхТаблиц,
	                                                ПредставленияРеквизитов, СтруктураПоиска, РеквизитыИнформацииБезПоиска)
	
	РеквизитыПартнера = Новый ТаблицаЗначений;
	РеквизитыПартнера.Колонки.Добавить("Реквизит",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(100)));
	РеквизитыПартнера.Колонки.Добавить("Значение",     Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(300)));
	РеквизитыПартнера.Колонки.Добавить("Порядок",      Новый ОписаниеТипов("Число"));
	РеквизитыПартнера.Колонки.Добавить("Существенный", Новый ОписаниеТипов("Булево"));
	
	РеквизитыКонтрагента = РеквизитыПартнера.Скопировать();
	РеквизитыКонтактногоЛица = РеквизитыПартнера.Скопировать();
	
	// Реквизиты партнера
	
	Если Не ИспользуютсяТолькоПартнеры Тогда
		РеквизитыИнформацииБезПоиска.Добавить(ПредставленияРеквизитов.СтрокаВидПартнера);
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаВидПартнера,
			Строка(ТипЮрФизЛицаПартнера(ЭтоКомпания)), 1, Истина);
	КонецЕсли;
	
	НаименованиеПоиск = НаименованиеПартнера();
	
	ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаНаименованиеПолное,
		НаименованиеПоиск, 2);
	ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаНаименование,
		НаименованиеПоиск, 3);
	
	Если СтруктураПоиска.АдресЭП Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаEmail,
			?(ЭтоКомпания = 0, АдресЭППартнера, АдресЭППартнераФизЛицо), 4);
	КонецЕсли;
	
	Если СтруктураПоиска.НомерТелефона Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыПартнера, ПредставленияРеквизитов.СтрокаТелефон,
			?(ЭтоКомпания = 0, ТелефонПартнера, ТелефонПартнераФизЛицо), 5);
	КонецЕсли;
	
	// Реквизиты контрагента
	
	РеквизитыИнформацииБезПоиска.Добавить(ПредставленияРеквизитов.СтрокаВидКонтрагента);
	ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаВидКонтрагента,
		?(ИспользуютсяТолькоПартнеры Или УказыватьЮридическиеРеквизиты, ПредставлениеТипаЮрФизЛица(), ""), 1, Истина);
	
	Если Не ИспользуютсяТолькоПартнеры Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаНаименованиеПолное,
			?(СтруктураПоиска.НаименованиеКонтрагента, ПолноеЮридическоеНаименование, ""), 2);
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаНаименование,
			?(СтруктураПоиска.НаименованиеКонтрагента, ПолноеЮридическоеНаименование, ""), 3);
	КонецЕсли;
	
	Если СтруктураПоиска.ИНН Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаИНН,
			?(ЭтоКомпания = 0, ИНН, ИННПартнерФизЛицо), 4, Истина);
		Если ЭтоКомпания = 0 И (ВидКомпании = 0 Или ВидКомпании = 3) Тогда
			РеквизитыИнформацииБезПоиска.Добавить(ПредставленияРеквизитов.СтрокаКПП);
			ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаКПП, КПП, 5);
		КонецЕсли;
	КонецЕсли;
	
	
	Если СтруктураПоиска.ДокументКонтрагента Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаДанныеДокумента,
			ПредставлениеДокументаФизическогоЛица(), 7);
		КонецЕсли;
		
	Если СтруктураПоиска.РегистрационныйНомер Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтрагента, ПредставленияРеквизитов.СтрокаРегистрационныйНомер,
			РегистрационныйНомер, 8);
	КонецЕсли;
	
	// Реквизиты контактного лица
	
	Если СтруктураПоиска.ФИО Тогда
		Если ЭтоКомпания = 0 Тогда
			ТекущееФИО = ФИО_ОднойСтрокой(ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
		Иначе
			ТекущееФИО = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
		КонецЕсли;
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтактногоЛица, ПредставленияРеквизитов.СтрокаНаименование, ТекущееФИО, 1);
	КонецЕсли;
	
	Если СтруктураПоиска.АдресЭП Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтактногоЛица, ПредставленияРеквизитов.СтрокаEmail,
			?(ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица, АдресЭПКЛ, ""), 2);
	КонецЕсли;
	
	Если СтруктураПоиска.НомерТелефона Тогда
		ДобавитьСтрокуВТаблицуРеквизитовДанных(РеквизитыКонтактногоЛица, ПредставленияРеквизитов.СтрокаТелефон,
			?(ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица, ?(ПустаяСтрока(ТелефонКЛ), МобильныйТелефонКЛ, ТелефонКЛ), ""), 2);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РеквизитыПартнера.Реквизит,
	|	РеквизитыПартнера.Значение,
	|	РеквизитыПартнера.Порядок,
	|	РеквизитыПартнера.Существенный
	|ПОМЕСТИТЬ РеквизитыПартнера
	|ИЗ
	|	&РеквизитыПартнера КАК РеквизитыПартнера
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыКонтрагента.Реквизит,
	|	РеквизитыКонтрагента.Значение,
	|	РеквизитыКонтрагента.Порядок,
	|	РеквизитыКонтрагента.Существенный
	|ПОМЕСТИТЬ РеквизитыКонтрагента
	|ИЗ
	|	&РеквизитыКонтрагента КАК РеквизитыКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеквизитыКонтактногоЛица.Реквизит,
	|	РеквизитыКонтактногоЛица.Значение,
	|	РеквизитыКонтактногоЛица.Порядок,
	|	РеквизитыКонтактногоЛица.Существенный
	|ПОМЕСТИТЬ РеквизитыКонтактногоЛица
	|ИЗ
	|	&РеквизитыКонтактногоЛица КАК РеквизитыКонтактногоЛица";
	
	Запрос.УстановитьПараметр("РеквизитыПартнера",        РеквизитыПартнера);
	Запрос.УстановитьПараметр("РеквизитыКонтрагента",     РеквизитыКонтрагента);
	Запрос.УстановитьПараметр("РеквизитыКонтактногоЛица", РеквизитыКонтактногоЛица);
	
	Запрос.Выполнить();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВТаблицуРеквизитовДанных(ТаблицаРеквизитов, Реквизит, Значение, Порядок, Существенный = Ложь)
	
	СтрокаРеквизита = ТаблицаРеквизитов.Добавить();
	СтрокаРеквизита.Реквизит = Реквизит;
	СтрокаРеквизита.Значение = Значение;
	СтрокаРеквизита.Порядок  = Порядок;
	СтрокаРеквизита.Существенный = Существенный;
	
КонецПроцедуры

&НаСервере
Функция МассивАдресовЭлектроннойПочтыДляПоиска()

	МассивАдресовЭП = Новый Массив;
	Если ЭтоКомпания = 0 И НЕ ПустаяСтрока(АдресЭППартнера) Тогда
		МассивАдресовЭП.Добавить(АдресЭППартнера);
	КонецЕсли;
	Если ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(АдресЭПКЛ) Тогда
		МассивАдресовЭП.Добавить(АдресЭПКЛ);
	КонецЕсли;
	Если ЭтоКомпания = 1 И НЕ ПустаяСтрока(АдресЭППартнераФизЛицо) Тогда
		МассивАдресовЭП.Добавить(АдресЭППартнераФизЛицо);
	КонецЕсли;
	
	Возврат МассивАдресовЭП;

КонецФункции

&НаСервере
Функция МассивПредставленийТелефонов()
	
	МассивПредставленийТелефонов = Новый Массив;
	
	Если ЭтоКомпания = 0 Тогда
		Если НЕ ПустаяСтрока(ТелефонПартнера) Тогда
			МассивПредставленийТелефонов.Добавить(ТелефонПартнера);
		КонецЕсли;
		Если УказатьДанныеКонтактногоЛица Тогда
			Если НЕ ПустаяСтрока(ТелефонКЛ) Тогда
				МассивПредставленийТелефонов.Добавить(ТелефонКЛ);
			КонецЕсли;
			Если НЕ ПустаяСтрока(МобильныйТелефонКЛ) Тогда
				МассивПредставленийТелефонов.Добавить(МобильныйТелефонКЛ);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
			МассивПредставленийТелефонов.Добавить(ТелефонПартнераФизЛицо);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивПредставленийТелефонов;
	
КонецФункции

&НаСервере
Функция МассивНомеровТелефонаДляПоиска()
	
	МассивНомеровТелефона = Новый Массив;
	
	Если ЭтоКомпания = 0 Тогда
		Если НЕ ПустаяСтрока(ТелефонПартнера) Тогда
			ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона,
				ЗначенияПолейВСписокЗначений(ТелефонПартнераЗначенияПолей));
		КонецЕсли;
		Если УказатьДанныеКонтактногоЛица Тогда
			Если НЕ ПустаяСтрока(ТелефонКЛ) Тогда
				ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона,
					ЗначенияПолейВСписокЗначений(ТелефонКЛЗначенияПолей));
			КонецЕсли;
			Если НЕ ПустаяСтрока(МобильныйТелефонКЛ) Тогда
				ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона,
					ЗначенияПолейВСписокЗначений(МобильныйТелефонКЛЗначенияПолей));
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если НЕ ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
			ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеровТелефона,
				ЗначенияПолейВСписокЗначений(ТелефонПартнераФизЛицоЗначенияПолей));
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивНомеровТелефона;
	
КонецФункции

&НаСервере
Процедура ДобавитьВМассивНомерТелефонаБезКодов(МассивНомеров, СписокЗначенияПолей)
	
	Для каждого ЭлементСписка Из СписокЗначенияПолей Цикл
		Если ЭлементСписка.Представление = "НомерТелефона" И НЕ ПустаяСтрока(ЭлементСписка.Значение) Тогда
			МассивНомеров.Добавить(ЭлементСписка.Значение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВМассивФИО(МассивФИО, Фамилия, Имя, Отчество)
	
	СтрокаДляДобавления =  ФИО_ОднойСтрокой(Фамилия, Имя, Отчество);
	Если МассивФИО.Найти(СтрокаДляДобавления) = Неопределено Тогда
		МассивФИО.Добавить(СтрокаДляДобавления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыНайдено(РезультатЗапроса, ПредставленияРеквизитов, РеквизитыИнформацииБезПоиска)
	
	ТаблицаНайдено.Очистить();
	ЭлементыДереваДанных = ДеревоДанныхНайденныхПартнеров.ПолучитьЭлементы();
	ЭлементыДереваДанных.Очистить();
	
	КоличествоПакетов = РезультатЗапроса.Количество();
	
	ТаблицаПартнеры        = РезультатЗапроса[КоличествоПакетов -2].Выгрузить();
	ВыборкаДанныеПартнеров = РезультатЗапроса[КоличествоПакетов -1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ТаблицаПартнеры.Количество() = 0 Тогда
		ДействиеПоРезультатамНайдено = 2;
		ДействиеСКонтрагентом = ?(УказыватьЮридическиеРеквизиты, 1, 0);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаДанныеПартнеров.Следующий() Цикл
		
		УзелПартнер = ЭлементыДереваДанных.Добавить();
		УзелПартнер.Реквизит = НСтр("ru = 'Партнер'");
		УзелПартнер.НайденоПоСсылка = ВыборкаДанныеПартнеров.Партнер;
		
		СтрокаТаблицыПартнеры = ТаблицаПартнеры.Найти(ВыборкаДанныеПартнеров.Партнер, "Партнер");
		
		СтрокаТаблицыНайдено = ТаблицаНайдено.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыНайдено, СтрокаТаблицыПартнеры);
		Если СтрокаТаблицыНайдено.КоличествоНайденныхАналогов > 1 Тогда
			СтрокаТаблицыНайдено.ПредставлениеПартнер = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 (Совпадений - %2)'"),
				Строка(СтрокаТаблицыПартнеры.Партнер),
				СтрокаТаблицыПартнеры.КоличествоНайденныхАналогов);
		Иначе
			СтрокаТаблицыНайдено.ПредставлениеПартнер = СтрокаТаблицыПартнеры.Представление;
		КонецЕсли;
		
		СтрокаТаблицыНайдено.ИдентификаторДереваДанных = УзелПартнер.ПолучитьИдентификатор();
		
		ЭлементыУзлаПартнер = УзелПартнер.ПолучитьЭлементы();
		
		УзелИнформации = Неопределено;
		ПропуститьУзелКонтрагента = Ложь;
		
		ВыборкаПодчиненойСсылки = ВыборкаДанныеПартнеров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодчиненойСсылки.Следующий() Цикл
			
			ТипИнформации = ТипЗнч(ВыборкаПодчиненойСсылки.НайденоПоСсылка);
			
			Если ИспользуютсяТолькоПартнеры И ТипИнформации = Тип("СправочникСсылка.Контрагенты") Тогда
				Если ПропуститьУзелКонтрагента Тогда
					Продолжить;
				КонецЕсли;
				ПропуститьУзелКонтрагента = Истина;
			Иначе
				
				УзелИнформации = ЭлементыУзлаПартнер.Добавить();
				УзелИнформации.НайденоПоСсылка = ВыборкаПодчиненойСсылки.НайденоПоСсылка;
				
				Если ТипИнформации = Тип("СправочникСсылка.КонтактныеЛицаПартнеров") Тогда
					УзелИнформации.Реквизит = НСтр("ru = 'Информация о контактном лице'");
				ИначеЕсли ТипИнформации = Тип("СправочникСсылка.Контрагенты") Или ИспользуютсяТолькоПартнеры Тогда
					УзелИнформации.Реквизит = НСтр("ru = 'Информация о контрагенте'");
				Иначе
					УзелИнформации.Реквизит = НСтр("ru = 'Информация о партнере'");
				КонецЕсли
				
			КонецЕсли;
			
			ЭлементыУзлаИнформации = УзелИнформации.ПолучитьЭлементы();
			
			ВыборкаПодчиненныхДанных = ВыборкаПодчиненойСсылки.Выбрать();
			Пока ВыборкаПодчиненныхДанных.Следующий() Цикл
				
				УзелДанных = ЭлементыУзлаИнформации.Добавить();
				ЗаполнитьЗначенияСвойств(УзелДанных, ВыборкаПодчиненныхДанных);
				
				Если ВыборкаПодчиненныхДанных.Совпадение Тогда
					УзелДанных.Совпадение = Истина;
				ИначеЕсли РеквизитыИнформацииБезПоиска.НайтиПоЗначению(ВыборкаПодчиненныхДанных.Реквизит) <> Неопределено Тогда
					
					Если ВыборкаПодчиненныхДанных.ЗначениеНайденного <> ВыборкаПодчиненныхДанных.ЗначениеСоздаваемого
						 И ЗначениеЗаполнено(ВыборкаПодчиненныхДанных.ЗначениеСоздаваемого) Тогда
						УзелДанных.Различие = ВыборкаПодчиненныхДанных.Существенный;
						СтрокаТаблицыНайдено.Различие = Макс(СтрокаТаблицыНайдено.Различие, УзелДанных.Различие);
					КонецЕсли;
					Продолжить;
					
				КонецЕсли;
				УзелДанных.Различие = Не УзелДанных.Совпадение И ВыборкаПодчиненныхДанных.Существенный;
				СтрокаТаблицыНайдено.Различие = Макс(СтрокаТаблицыНайдено.Различие, УзелДанных.Различие);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНайдено.Сортировать("КоличествоНайденныхАналогов УБЫВ");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДубльИННКППвНайденныхПартнерах(НайденныйДубльПоИНН, ПредставленияРеквизитов)
	
	НайденныеСтроки = ТаблицаНайдено.НайтиСтроки(Новый Структура("Партнер", НайденныйДубльПоИНН.Партнер));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПартнера = НайденныеСтроки[0];
	СтрокаПартнера.ДубльИННКПП = Истина;
	
	СсылкаНаДубль = ?(ИспользуютсяТолькоПартнеры, НайденныйДубльПоИНН.Партнер, НайденныйДубльПоИНН.Ссылка);
	
	УзелПартнера = ДеревоДанныхНайденныхПартнеров.НайтиПоИдентификатору(СтрокаПартнера.ИдентификаторДереваДанных);
	ЭлементыУзлаПартнера = УзелПартнера.ПолучитьЭлементы();
	Для Каждого ЭлементУзла Из ЭлементыУзлаПартнера Цикл
		Если ЭлементУзла.НайденоПоСсылка = СсылкаНаДубль Тогда
			
			УзелКонтрагента = ЭлементУзла.ПолучитьЭлементы();
			Для Каждого ЭлементИнформации Из УзелКонтрагента Цикл
				Если ЭлементИнформации.Реквизит = ПредставленияРеквизитов.СтрокаИНН Или
					 ЭлементИнформации.Реквизит = ПредставленияРеквизитов.СтрокаКПП Тогда
					ЭлементИнформации.ДубльИННКПП = Истина;
				КонецЕсли;
			КонецЦикла;
			Прервать;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКонтактнойИнформацией

&НаКлиенте
Процедура ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ВидКонтактнойИнформации, ИмяРеквизитаПредставление, ИмяРеквизитаЗначенияПолей, Заголовок = "")
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформации, ЭтаФорма[ИмяРеквизитаЗначенияПолей], ЭтаФорма[ИмяРеквизитаПредставление]);
	
	Если НЕ ПустаяСтрока(Заголовок) Тогда
		ПараметрыОткрытия.Вставить("Заголовок", Заголовок);
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ИмяРеквизитаЗначенияПолей, ИмяРеквизитаПредставление", ИмяРеквизитаЗначенияПолей, ИмяРеквизитаПредставление);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуВыбораТелефонаИОбработатьРезультатЗавершение", ЭтаФорма, ДопПараметры);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, ЭтаФорма, Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораТелефонаИОбработатьРезультатЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизитаЗначенияПолей] = Результат.КонтактнаяИнформация;
		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизитаПредставление] = Результат.Представление;
		
		ОтключитьОтметкуНезаполненного();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент, ВидКонтактнойИнформации, ИмяРеквизитаПредставление, ИмяРеквизитаЗначенияПолей)
	
	ПараметрыОткрытия = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформации, ЭтаФорма[ИмяРеквизитаЗначенияПолей], ЭтаФорма[ИмяРеквизитаПредставление]);

	ДопПараметры = Новый Структура("ИмяРеквизитаЗначенияПолей, ИмяРеквизитаПредставление", ИмяРеквизитаЗначенияПолей, ИмяРеквизитаПредставление);
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение", ЭтаФорма, ДопПараметры);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизитаЗначенияПолей] = Результат.КонтактнаяИнформация;
		ЭтаФорма[ДополнительныеПараметры.ИмяРеквизитаПредставление] = Результат.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция КорректноВведенНомерТелефона(СписокЗначенияПолей)
	
	НомерТелефона = "";
	КодГорода = "";
	КодСтраны = "";
	
	Для каждого ЭлементСписка Из СписокЗначенияПолей Цикл
		Если ЭлементСписка.Представление = "НомерТелефона" Тогда
			НомерТелефона = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЭлементСписка.Представление = "КодГорода" Тогда
			КодГорода = ЭлементСписка.Значение;
		КонецЕсли;
		Если ЭлементСписка.Представление = "КодСтраны" Тогда
			КодСтраны = ЭлементСписка.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(КодСтраны) Тогда
		КодСтраны = СокрЛП(КодСтраны);
		Если ЛЕВ(КодСтраны,1)= "+" Тогда
			КодСтраны = Прав(КодСтраны, СтрДлина(КодСтраны)-1);
		КонецЕсли;
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодСтраны) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(КодГорода) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(КодГорода) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(НомерТелефона) Тогда
		Если НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерТелефона) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	КодСтраны = "";
	КодГорода = "";
	НомерТелефона = "";
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "КОДСТРАНЫ" Тогда
			КодСтраны = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "КОДГОРОДА" Тогда
			КодГорода = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "НОМЕРТЕЛЕФОНА" Тогда
			НомерТелефона = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		КонецЕсли;
	КонецЦикла;
	
	Если Лев(КодСтраны, 1) = "+" Тогда
		КодСтраны = Сред(КодСтраны, 2);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	Поз = Найти(НомерТелефона, Символы.ПС);
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = НомерТелефонаБезРазделителя(НомерТелефона);
	СтрокаТабличнойЧасти.НомерТелефона         = НомерТелефонаБезРазделителя(КодСтраны + КодГорода + НомерТелефона);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, ЗначенияПолей)
	
	Для Каждого ЗначениеПоля Из ЗначенияПолей Цикл
		Если ВРег(ЗначениеПоля.Представление) = "СТРАНА" Тогда
			СтрокаТабличнойЧасти.Страна = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "РЕГИОН" Тогда
			СтрокаТабличнойЧасти.Регион = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		ИначеЕсли ВРег(ЗначениеПоля.Представление) = "ГОРОД" Тогда
			СтрокаТабличнойЧасти.Город = ?(ЗначениеЗаполнено(ЗначениеПоля.Значение), ЗначениеПоля.Значение, "");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция НомерТелефонаБезРазделителя(Знач СтрНомер)
	
	Поз = Найти(СтрНомер, ",");
	Если Поз <> 0 Тогда
		СтрНомер = Лев(СтрНомер, Поз-1);
	КонецЕсли;
	
	СтрНомер = СтрЗаменить(СтрНомер, "-", "");
	СтрНомер = СтрЗаменить(СтрНомер, " ", "");
	СтрНомер = СтрЗаменить(СтрНомер, "+", "");

	Возврат СтрНомер;

КонецФункции

&НаСервере
Процедура ОбработатьЭлементыРедактированияКонтактнойИнформации()

	МассивВидовКИ = Новый Массив;
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица);
	МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Ссылка В(&МассивВидовКонтактнойИнформации)
	|	И ВидыКонтактнойИнформации.РедактированиеТолькоВДиалоге";
	
	Запрос.УстановитьПараметр("МассивВидовКонтактнойИнформации",МассивВидовКИ);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица Тогда
			Элементы.МобильныйТелефонКЛ.РедактированиеТекста = Ложь;
			Элементы.МобильныйТелефонКЛ.ЦветФона = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица Тогда
			Элементы.ТелефонКЛ.РедактированиеТекста = Ложь;
			Элементы.ТелефонКЛ.ЦветФона = WebЦвета.Кремовый;
		ИначеЕсли Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера Тогда
			Элементы.ТелефонПартнера.РедактированиеТекста = Ложь;
			Элементы.ТелефонПартнера.ЦветФона = WebЦвета.Кремовый;
			Элементы.ТелефонПартнераФизЛицо.РедактированиеТекста = Ложь;
			Элементы.ТелефонПартнераФизЛицо.ЦветФона = WebЦвета.Кремовый;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияЭлементаКИТелефон(Элемент, ВидКонтактнойИнформации, ИмяРеквизитаПредставление, ИмяРеквизитаЗначенияПолей, Событие)
	
	Если Событие = "НачалоВыбора" Тогда
		ЭтаФорма[ИмяРеквизитаПредставление] = Элемент.ТекстРедактирования;
	ИначеЕсли Событие = "Очистка" Тогда
		ЭтаФорма[ИмяРеквизитаПредставление] = "";
		ЭтаФорма[ИмяРеквизитаЗначенияПолей] = "";
	КонецЕсли;
	
	Если Событие = "НачалоВыбора" Тогда
		ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ВидКонтактнойИнформации,
		                                               ИмяРеквизитаПредставление,
		                                               ИмяРеквизитаЗначенияПолей);
	ИначеЕсли Событие = "ПриИзменении" Тогда
		
		ЗначенияПолейКонтактнойИнформацииСервер(ЭтаФорма[ИмяРеквизитаПредставление],
		                                        ЭтаФорма[ИмяРеквизитаЗначенияПолей],
		                                        ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон"));
		
		Если НЕ КорректноВведенНомерТелефона(ЗначенияПолейВСписокЗначений(ЭтаФорма[ИмяРеквизитаЗначенияПолей])) Тогда
			ОткрытьФормуВыбораТелефонаИОбработатьРезультат(ВидКонтактнойИнформации,
			                                               ИмяРеквизитаПредставление,
			                                               ИмяРеквизитаЗначенияПолей,
			                                               НСтр("ru='Уточните номер телефона.'"));
		Иначе
			ОтключитьОтметкуНезаполненного();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСобытияЭлементаКИАдрес(Элемент, ВидКонтактнойИнформации, ИмяРеквизитаПредставление, ИмяРеквизитаЗначенияПолей, Событие)
	
	Если Событие = "Очистка" Тогда
		ЭтаФорма[ИмяРеквизитаПредставление] = "";
		ЭтаФорма[ИмяРеквизитаЗначенияПолей] = "";
	КонецЕсли;
	
	Если Событие = "НачалоВыбора" Тогда
		ОткрытьФормуВыбораАдресаИОбработатьРезультат(Элемент,
		                                             ВидКонтактнойИнформации,
		                                             ИмяРеквизитаПредставление,
		                                             ИмяРеквизитаЗначенияПолей);
	ИначеЕсли Событие = "ПриИзменении" Тогда
		
		ЗначенияПолейКонтактнойИнформацииСервер(ЭтаФорма[ИмяРеквизитаПредставление],
		                                        ЭтаФорма[ИмяРеквизитаЗначенияПолей],
		                                        ВидКонтактнойИнформации);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗначенияПолейКонтактнойИнформацииСервер(Знач Представление, ЗначенияПолей, Знач ВидКонтактнойИнформации)
	
	Комментарий = УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ЗначенияПолей);
	
	// Создаем новый экземпляр по представлению
	ЗначенияПолей = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	// Добавляем в него комментарий, если есть
	Если НЕ ПустаяСтрока(Комментарий) Тогда
		УправлениеКонтактнойИнформацией.КомментарийКонтактнойИнформации(ЗначенияПолей, Комментарий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"), "ФактическийАдрес", "ФактическийАдресЗначенияПолей", "НачалоВыбора");
		
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"), "ЮридическийАдрес", "ЮридическийАдресЗначенияПолей", "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"), "ФактическийАдрес", "ФактическийАдресЗначенияПолей", "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"), "ЮридическийАдрес", "ЮридическийАдресЗначенияПолей", "ПриИзменении");
															 
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ФактАдресОрганизации"), "ФактическийАдрес", "ФактическийАдресЗначенияПолей", "Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"), "ЮридическийАдрес", "ЮридическийАдресЗначенияПолей", "Очистка");

КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЮридическийАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресЧастноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"), "ФактическийАдрес", "ФактическийАдресЗначенияПолей", "НачалоВыбора");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресЧастноеЛицоПриИзменении(Элемент)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"), "ФактическийАдрес", "ФактическийАдресЗначенияПолей", "ПриИзменении");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресЧастноеЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	ОбработкаСобытияЭлементаКИАдрес(Элемент, ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица"), "ФактическийАдрес", "ФактическийАдресЗначенияПолей", "Очистка");
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическийАдресЧастноеЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры


#КонецОбласти

#Область ПереходыПоСтраницам

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницам(Знач Оповещение, Команда)
	
	Отказ = УсловияПереходаПоСтраницамНеВыполнены(Команда);
	
	Если Не Отказ Тогда
		ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Новый ОписаниеОповещения("ВыполнитьПереходПоСтраницамЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), Команда);
		Возврат;
	КонецЕсли;
	
	ВыполнитьПереходПоСтраницамФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ;
    
    ВыполнитьПереходПоСтраницамФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПереходПоСтраницамФрагмент(Знач Оповещение)
	
	УправлениеСтраницамиПодвал();
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаКлиенте
Функция УсловияПереходаПоСтраницамНеВыполнены(Команда)
	
	Отказ = Ложь;
	Если Команда.Имя = "Далее" Тогда
		Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
			Отказ = ПервичнаяИнформацияЗаполненаНеправильно();
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
			Отказ = ДополнительныеСведенияЗаполненыНеправильно();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницам(Знач Оповещение, Команда)
	
	Если Команда.Имя = "Далее" Тогда
		
		Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаПервичнаяИнформация Тогда
			
			ВыполнитьПоискПоПервичнойИнформации();
			Если ТаблицаНайдено.Количество() > 0 Тогда
				ПерейтиНаСтраницуНайденныхСовпадений();
			Иначе
				ПерейтиНаСтраницуДополнительныхСведений();
			КонецЕсли;
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено Тогда
			
			ВыборПользователяПоРезультатамНайдено(Новый ОписаниеОповещения("ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамПослеВыбора", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)));
            Возврат;
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения Тогда
						
			ПерейтиНаФинальнуюСтраницу();
			
		ИначеЕсли Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная Тогда
			
			СписокСозданных = Новый СписокЗначений;
			ЗаписатьПартнераИСвязанныеДанные(СписокСозданных);
			
			Если СозданиеВыполнено Тогда
				
				РеквизитыПартнера = Новый Структура;
				
				Для Каждого ЭлементСписка Из СписокСозданных Цикл
					Если ТипЗнч(ЭлементСписка.Значение) = Тип("СправочникСсылка.Партнеры") Тогда
						РеквизитыПартнера.Вставить("Наименование", ЭлементСписка.Представление);
						РеквизитыПартнера.Вставить("ОсновнойМенеджер", ОсновнойМенеджер);
					КонецЕсли;
					ПоказатьОповещениеПользователя("Создание", ЭлементСписка.Значение, ЭлементСписка.Представление);
				КонецЦикла;
				
				Если РеквизитыПартнера.Количество() = 0 Тогда
					РеквизитыПартнера = ОбщегоНазначенияУТВызовСервера.ЗначенияРеквизитовОбъекта(ПартнерВыбор, "ОсновнойМенеджер, Наименование");
				КонецЕсли;
				
				ВыполнитьДействияЗакрытияФормы(Новый ОписаниеОповещения("ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РеквизитыПартнера, Истина);
                Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		РазмерСписка = СтекПредыдущихСтраниц.Количество();
		ИмяПредыдущейСтраницы = СтекПредыдущихСтраниц[РазмерСписка - 1].Значение;
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы[ИмяПредыдущейСтраницы];
		СтекПредыдущихСтраниц.Удалить(РазмерСписка -1);
		
	КонецЕсли;
	
	ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	
	Если Результат Тогда
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
	КонецЕсли;
	Если ДействиеПоРезультатамНайдено = 0 Тогда
		ПерейтиНаСтраницуРасчетногоСчетаКонтрагента();
	Иначе
		ПерейтиНаСтраницуДополнительныхСведений();
	КонецЕсли;
	
	
	ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамФрагмент(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНеобходимыеДействияПриПереходеПоСтраницамФрагмент(Знач Оповещение)
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуНайденныхСовпадений()
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаНайдено;
	
	ТекущийЭлемент = Элементы.ТаблицаНайдено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуДополнительныхСведений()
	
	Если ПустаяСтрока(ПолноеЮридическоеНаименование) И ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты Тогда
		ПолноеЮридическоеНаименование = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
	Если НаОснованииДанныхРозничногоПокупателя Тогда
		ЗаголовокДекорации = НСтр("ru = 'Укажите прочие доступные сведения о розничном покупателе %1:'");
	ИначеЕсли ИспользуютсяТолькоПартнеры Тогда
		ЗаголовокДекорации = НСтр("ru = 'Укажите прочие доступные сведения о контрагенте %1:'");
	Иначе
		ЗаголовокДекорации = НСтр("ru = 'Укажите прочие доступные сведения о партнере %1:'");
	КонецЕсли;
	
	Если ЭтоКомпания = 0 Тогда
		
		НаименованиеПартнераДляЗаголовка = ПолноеНаименование;
		
		Если ВидКомпании = 3 И ИспользуютсяТолькоПартнеры Тогда
			ЗаполнитьСписокВыбораГоловногоКонтрагента();
		КонецЕсли;
		
	Иначе
		НаименованиеПартнераДляЗаголовка = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
	Название = НаименованиеПартнераДляЗаголовка;
	
	Элементы.ДекорацияДополнительныеСведения.Заголовок =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокДекорации, Название);
	
	УправлениеДоступностьюДополнительныеСведения();
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаДополнительныеСведения;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуРасчетногоСчетаКонтрагента()
	
	Если ЭтоКомпания = 0 Тогда
		НаименованиеПартнераДляЗаголовка = ПолноеНаименование;
	Иначе
		НаименованиеПартнераДляЗаголовка = ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера);
	КонецЕсли;
	
	ЗаголовокДекорации = СтрЗаменить(
		Элементы.ДекорацияБанковскиеСведения.Заголовок,
		"#НаименованиеПартнера#",
		НаименованиеПартнераДляЗаголовка);

	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДекорацияБанковскиеСведения",
		"Заголовок",
		ЗаголовокДекорации);
	
	УправлениеДоступностьюРасчетныйСчет();
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРасчетныйСчет;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаФинальнуюСтраницу()
	
	Если НаОснованииДанныхРозничногоПокупателя Тогда
		ЗаголовокСтраницы = НСтр("ru = 'Проверьте введенные сведения, и нажмите кнопку ""Создать""  для регистрации нового розничного покупателя.'");
		ЗаголовокДействия = НСтр("ru = 'Открыть форму вновь созданного розничного покупателя для указания дополнительной информации.'");
	ИначеЕсли ИспользуютсяТолькоПартнеры Или ДействиеПоРезультатамНайдено = 0 Тогда
		ЗаголовокСтраницы = НСтр("ru = 'Проверьте введенные сведения, и нажмите кнопку ""Создать""  для регистрации нового контрагента.'");
		ЗаголовокДействия = НСтр("ru = 'Открыть форму вновь созданного контрагента для указания дополнительной информации.'");
	Иначе
		ЗаголовокСтраницы = НСтр("ru = 'Проверьте введенные сведения, и нажмите кнопку ""Создать""  для регистрации нового партнера.'");
		ЗаголовокДействия = НСтр("ru = 'Открыть форму вновь созданного партнера для указания дополнительной информации.'");
	КонецЕсли;
	
	Элементы.ДекорацияФинальная.Заголовок = ЗаголовокСтраницы;
	Элементы.ОткрытьПослеСоздания.Заголовок = ЗаголовокДействия;
	
	ЗаполнитьИтоговуюИнформацию();
	
	СтекПредыдущихСтраниц.Добавить(Элементы.СтраницыПомощника.ТекущаяСтраница.Имя);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаФинальная;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПродолжениеВыбораПартнераЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВыполнитьДействияЗакрытияФормы(Неопределено, ДополнительныеПараметры.РеквизитыПартнера, ДополнительныеПараметры.СозданыНовыеОбъекты);
        Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиВведеннойИнформации

&НаКлиенте
Функция ПервичнаяИнформацияЗаполненаНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если ЭтоКомпания = 0 Тогда
		Если ИспользуютсяТолькоПартнеры Тогда
			Если ПустаяСтрока(ПолноеЮридическоеНаименование) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано сокращенное юр. наименование партнера'"),"ПолноеЮридическоеНаименование");
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(ПолноеНаименование) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано публичное наименование партнера'"),"ПолноеНаименование");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЭтоКомпания = 1 Тогда
		Если ПустаяСтрока(ФамилияПартнера) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указано фамилия партнера'"),"ФамилияПартнера");
			Отказ = Истина;
		КонецЕсли;
		Если ПустаяСтрока(ИмяПартнера) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указано имя партнера'"),"ИмяПартнера");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли; 
	
	Если ЭтоКомпания = 0 Тогда
		Если ПустаяСтрока(АдресЭППартнера) И ПустаяСтрока(ТелефонПартнера) Тогда
			Если (УказатьДанныеКонтактногоЛица И ЭтоКомпания = 0) Тогда
				
				Если ПустаяСтрока(ТелефонКЛ) И ПустаяСтрока(МобильныйТелефонКЛ) И ПустаяСтрока(АдресЭПКЛ) Тогда
					
					ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать хотя бы одно значение контактной информации'"),"АдресЭППартнера");
					Отказ = Истина;
					
				КонецЕсли;
				
			Иначе
				
				ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать хотя бы одно значение контактной информации'"),"АдресЭППартнера");
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(АдресЭППартнераФизЛицо) И ПустаяСтрока(ТелефонПартнераФизЛицо) Тогда
			
			ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать хотя бы одно значение контактной информации'"),"АдресЭППартнераФизЛицо");
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если УказыватьЮридическиеРеквизиты Тогда
		
		Если Не ИспользуютсяТолькоПартнеры И ЭтоКомпания = 0 Тогда
			Если ПустаяСтрока(ПолноеЮридическоеНаименование) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано сокращенное юр. наименование'"),"НаименованиеКонтрагента");
				Отказ = Истина; 
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКомпания = 0 И (ВидКомпании = 0 Или ВидКомпании = 3) Тогда
			Если ПустаяСтрока(ИНН) И Не ПустаяСтрока(КПП) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Указан КПП, но не указан ИНН'"),"ИНН");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКомпания = 0 И НЕ ВидКомпании = 1 И НЕ УпрощенныйВводДоступен Тогда
			Если ПустаяСтрока(ИНН) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано значение ИНН'"),"ИНН");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность Тогда
			Если Не ЗначениеЗаполнено(ВидДокумента) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Не указано вид документа удостоверяющего личность'"),"ВидДокумента");
				Отказ = Истина
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если УказатьДанныеКонтактногоЛица И ЭтоКомпания = 0 Тогда
		
		Если ПустаяСтрока(ФамилияКЛ) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указана фамилия контактного лица'"),"ФамилияКЛ");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяКл) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Не указано имя контактного лица'"),"ИмяКЛ");
			Отказ = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(ТелефонКЛ) И ПустаяСтрока(АдресЭПКЛ) И ПустаяСтрока(МобильныйТелефонКЛ) Тогда
			ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать хотя бы одно значение контактной инофрмации контактного лица'"),"АдресЭПКЛ");
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		// Проверка корректности адресов электронной почты.
		Если  НЕ ПустаяСтрока(АдресЭППартнера) И ЭтоКомпания = 0 Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭППартнера) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Неверный формат адреса электронной почты партнера'"), "АдресЭППартнера");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если  НЕ ПустаяСтрока(АдресЭППартнераФизЛицо) И ЭтоКомпания = 1 Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭППартнераФизЛицо) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Неверный формат адреса электронной почты партнера'"), "АдресЭППартнераФизЛицо");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если  УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(АдресЭПКЛ) И ЭтоКомпания = 0 Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ПроверитьЗаполнениеПочтовогоАдреса(АдресЭПКЛ) Тогда
				ВывестиСообщениеПользователю(НСтр("ru = 'Неверный формат адреса электронной почты контактного лица'"), "АдресЭПКЛ");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Проверка данных физического лица
		Если  ЭтоКомпания = 1 И УказыватьЮридическиеРеквизиты И УказатьДокументУдостоверяющийЛичность Тогда
			
			Если Не ПустаяСтрока(СерияДокумента) Тогда
				ТекстОшибки = "";
				Отказ = Не ФизическиеЛицаКлиентСервер.СерияДокументаУказанаПравильно(ВидДокумента, СерияДокумента, ТекстОшибки) Или Отказ;
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "СерияДокумента");
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПустаяСтрока(НомерДокумента) Тогда
				ТекстОшибки = "";
				Отказ = Не ФизическиеЛицаКлиентСервер.НомерДокументаУказанПравильно(ВидДокумента, НомерДокумента, ТекстОшибки) Или Отказ;
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "НомерДокумента");
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Функция ДополнительныеСведенияЗаполненыНеправильно()
	
	Отказ = Ложь;
	ОчиститьСообщения();
	
	Если НЕ Клиент И НЕ Поставщик И НЕ ПрочиеОтношения И НЕ Конкурент Тогда
		ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо определить хотя бы один тип отношений'"),"Клиент");
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Название) Тогда
		ВывестиСообщениеПользователю(НСтр("ru = 'Необходимо указать рабочее наименование партнера'"),"Название");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

#КонецОбласти

#Область Прочее

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресЭПКЛ.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТелефонКЛ.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МобильныйТелефонКЛ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МобильныйТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭПКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИмяКЛ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИмяКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ФамилияКЛ.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФамилияКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресЭППартнераФизЛицо.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТелефонПартнераФизЛицо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоКомпания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 1;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭППартнераФизЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонПартнераФизЛицо");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИНН.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИННФизЛицо.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказыватьЮридическиеРеквизиты");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИНН");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоКомпания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ВидКомпании");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = 2;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("КПП");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УпрощенныйВводДоступен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресЭППартнера.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТелефонПартнера.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоКомпания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭППартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонПартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МобильныйТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭПКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.АдресЭППартнераТолькоПартнеры.Имя);

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТелефонПартнераТолькоПартнеры.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтоКомпания");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭППартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонПартнера");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ГруппаОтбора1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора1.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ГруппаОтбора2 = ГруппаОтбора1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МобильныйТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТелефонКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("АдресЭПКЛ");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

	ОтборЭлемента = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УказатьДанныеКонтактногоЛица");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СокрЮрНаименованиеКонтрагента.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаОснованииКонтрагента");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСравненияПартнеровЗначениеНайденного.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСравненияПартнеров.Различие");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255, 200, 200));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСравненияПартнеровЗначениеНайденного.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСравненияПартнеров.Совпадение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(210, 255, 180));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоСравненияПартнеровЗначениеНайденного.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоСравненияПартнеров.ДубльИННКПП");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));

	//

	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаНайденоПредставлениеПартнер.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТаблицаНайдено.ДубльИННКПП");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));

КонецПроцедуры

&НаСервере
Процедура ПриСозданииНовогоРозничногоПокупателя()
	
	НаОснованииДанныхРозничногоПокупателя = Истина;
	ЭтоКомпания = 1;
	Клиент = Истина;
	
	Элементы.ЭтоКомпания.Видимость = Ложь;
	Элементы.ДекорацияПервичнаяИнформацияЗагрузить.Видимость = Ложь;
	Элементы.СтраницыБудетСоздан.ТекущаяСтраница = Элементы.СтраницаБудетСозданПартнер;
	Элементы.ГруппаТипОтношений.Видимость = Ложь;
	Элементы.ГруппаЧастноеЛицоКонтрагент.Видимость =Ложь;
	Заголовок = НСтр("ru = 'Помощник регистрации нового розничного покупателя'");
	Элементы.ДействиеПоРезультатамНайдено.СписокВыбора[0].Представление = НСтр("ru = 'Не регистрировать нового розничного покупателя, использовать найденного'");
	Элементы.ДействиеПоРезультатамНайдено.СписокВыбора[1].Представление = НСтр("ru = 'Продолжить регистрацию розничного покупателя и подчинить найденному'");
	Элементы.ДействиеПоРезультатамНайдено.СписокВыбора[2].Представление = НСтр("ru = 'Продолжить регистрацию нового розничного покупателя'");
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНовогоГоловногоКонтрагента()
	
	НаОснованииОбособленногоКонтрагента = Истина;
	
	ИНН = Параметры.ЗначенияЗаполнения.ИНН;
	КонтрагентОснование = Параметры.ОснованиеОбособленныйКонтрагент;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ДекорацияПервичнаяИнформацияЗагрузить");
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "Видимость", Ложь);
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить("ЭтоКомпания");
	МассивЭлементов.Добавить("ГруппаВидКомпании");
	Если ЗначениеЗаполнено(ИНН) Тогда
		МассивЭлементов.Добавить("ИНН");
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементовФормы(Элементы, МассивЭлементов, "ТолькоПросмотр", Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФИО_ОднойСтрокой(Фамилия,Имя,Отчество)
	
	Возврат СокрЛП(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));
	
КонецФункции

&НаСервере
Функция ПредставлениеДокументаФизическогоЛица()
	
	ПредставлениеДокументаФизЛица = "";
	
	Если Не ВидДокумента.Пустая() Тогда
		
		ПредставлениеДокументаФизЛица = ""
			+ ВидДокумента
			+ ?(ЗначениеЗаполнено(СерияДокумента),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', серия: %1'"), СерияДокумента), "")
			+ ?(ЗначениеЗаполнено(НомерДокумента),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', № %1'"), НомерДокумента), "")
			+ ?(ЗначениеЗаполнено(ДатаВыдачи),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', выдан: %1 года'"), Формат(ДатаВыдачи,"ДФ='дд ММММ гггг'")), "")
			+ ?(ЗначениеЗаполнено(СрокДействия),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', действует до: %1 года'"), Формат(СрокДействия,"ДФ='дд ММММ гггг'")), "")
			+ ?(ЗначениеЗаполнено(КемВыданДокумент), ", " + КемВыданДокумент, "")
			+ ?(ЗначениеЗаполнено(КодПодразделения) И ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ', № подр. %1'"), КодПодразделения), "");
		
	КонецЕсли;
	
	Возврат ПредставлениеДокументаФизЛица;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСписокВыбораГоловногоКонтрагента()
	
	ИмяЭлементаФормы = ?(ИспользуютсяТолькоПартнеры, "ГоловнойКонтрагентДопСведения", "ГоловнойКонтрагент");
	
	ЭлементФормы = Элементы.Найти(ИмяЭлементаФормы);
	Если ЭлементФормы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = ЭлементФормы.СписокВыбора;
	СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(ИНН) Тогда
		
		СписокГоловныхКонтрагентов = СписокВозможныхГоловныхКонтрагентов(ИНН);
		
		Для Каждого Элемент Из СписокГоловныхКонтрагентов Цикл
			СписокВыбора.Добавить(Элемент.Значение, Элемент.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
	РазмерСписка = СписокВыбора.Количество();
	
	Если РазмерСписка = 1 Тогда
		ГоловнойКонтрагент = СписокВыбора[0].Значение;
	ИначеЕсли РазмерСписка = 0 Или
			(ЗначениеЗаполнено(ГоловнойКонтрагент) И СписокВыбора.НайтиПоЗначению(ГоловнойКонтрагент) = Неопределено) Тогда
		ГоловнойКонтрагент = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВозможныхГоловныхКонтрагентов(ИНН)
	
	Список = Новый СписокЗначений;
	
	Возврат Список;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДеревоСравненияПартнеров()
	
	ТекущиеДанные = Элементы.ТаблицаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Партнер <> ТекущийНайденныйПартнер Тогда
	
		УзелПартнера = ДеревоДанныхНайденныхПартнеров.НайтиПоИдентификатору(ТекущиеДанные.ИдентификаторДереваДанных);
		ЭлементыУзлаПартнера = УзелПартнера.ПолучитьЭлементы();
		
		ЭлементыДереваСравнения = ДеревоСравненияПартнеров.ПолучитьЭлементы();
		ЭлементыДереваСравнения.Очистить();
		
		СкопироватьУзелДанныхДереваФормы(ЭлементыДереваСравнения, ЭлементыУзлаПартнера);
		
		// развернуть все
		Для Каждого ЭлементДерева Из ЭлементыДереваСравнения Цикл
			Элементы.ДеревоСравненияПартнеров.Развернуть(ЭлементДерева.ПолучитьИдентификатор());
		КонецЦикла;
		
		ТекущийНайденныйПартнер = ТекущиеДанные.Партнер;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьУзелДанныхДереваФормы(Приемник, Источник)
	
	Для Каждого УзелИсточника Из Источник Цикл
		
		УзелПриемника = Приемник.Добавить();
		ЗаполнитьЗначенияСвойств(УзелПриемника, УзелИсточника);
		
		ЭлементыИсточника = УзелИсточника.ПолучитьЭлементы();
		
		Если ЭлементыИсточника.Количество() > 0 Тогда
			СкопироватьУзелДанныхДереваФормы(УзелПриемника.ПолучитьЭлементы(), ЭлементыИсточника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПартнераИСвязанныеДанные(СписокСозданных)

	НачатьТранзакцию();
	
	Если ДействиеПоРезультатамНайдено <> 0 Тогда
		
		// Партнер
		ОбъектПартнер = Справочники.Партнеры.СоздатьЭлемент();
		ОбъектПартнер.Наименование                          = Название;
		ОбъектПартнер.Родитель                              = Родитель;
		ОбъектПартнер.ДатаРегистрации                       = ТекущаяДата();
		ОбъектПартнер.Клиент                                = Клиент;
		ОбъектПартнер.Поставщик                             = Поставщик;
		ОбъектПартнер.ПрочиеОтношения                       = ПрочиеОтношения;
		ОбъектПартнер.ОсновнойМенеджер                      = ОсновнойМенеджер;
		ОбъектПартнер.НаименованиеПолное                    = НаименованиеПартнера();
		ОбъектПартнер.ЮридическоеФизическоеЛицо             = ТипЮрФизЛицаПартнера(ЭтоКомпания);
		ОбъектПартнер.Пол                                   = Пол;
		ОбъектПартнер.ДатаРождения                          = ДатаРождения;
		
		// Контактная информация партнера
		Если НЕ ПустаяСтрока(ФактическийАдрес) Тогда
			НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.Адрес;
			НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			НоваяСтрокаКИ.Представление     = ФактическийАдрес;
			НоваяСтрокаКИ.ЗначенияПолей     = ФактическийАдресЗначенияПолей;
			ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ФактическийАдресЗначенияПолей));
		КонецЕсли;
		
		Если ЭтоКомпания = 0 Тогда
			ИмяРеквизитаТелефон = "ТелефонПартнера";
			ИмяРеквизитаТелефонЗначенияПолей = "ТелефонПартнераЗначенияПолей";
			ИмяРеквизитаАдресЭП = "АдресЭППартнера";
		Иначе
			ИмяРеквизитаТелефон = "ТелефонПартнераФизЛицо";
			ИмяРеквизитаТелефонЗначенияПолей = "ТелефонПартнераФизЛицоЗначенияПолей";
			ИмяРеквизитаАдресЭП = "АдресЭППартнераФизЛицо";
		КонецЕсли;
		
		Если ЗначенияПолейВСписокЗначений(ЭтаФорма[ИмяРеквизитаТелефонЗначенияПолей]).Количество()> 0 Тогда
			НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.Телефон;
			НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			НоваяСтрокаКИ.Представление     = ЭтаФорма[ИмяРеквизитаТелефон];
			НоваяСтрокаКИ.ЗначенияПолей     = ЭтаФорма[ИмяРеквизитаТелефонЗначенияПолей];
			ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ЭтаФорма[ИмяРеквизитаТелефонЗначенияПолей]));
		КонецЕсли;
		
		Если Не ПустаяСтрока(ЭтаФорма[ИмяРеквизитаАдресЭП]) Тогда
			НоваяСтрокаКИ = ОбъектПартнер.КонтактнаяИнформация.Добавить();
			НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
			НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			НоваяСтрокаКИ.Представление     = ЭтаФорма[ИмяРеквизитаАдресЭП];
			НоваяСтрокаКИ.ЗначенияПолей     = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрокаКИ.Представление, НоваяСтрокаКИ.Вид);
			НоваяСтрокаКИ.АдресЭП           = ЭтаФорма[ИмяРеквизитаАдресЭП];
			Поз = Найти(ЭтаФорма[ИмяРеквизитаАдресЭП], "@");
			Если Поз <> 0 Тогда
				НоваяСтрокаКИ.ДоменноеИмяСервера = Сред(ЭтаФорма[ИмяРеквизитаАдресЭП], Поз+1);
			КонецЕсли;
		КонецЕсли;
		
		ОбъектПартнер.Записать();
		ПартнерВыбор = ОбъектПартнер.Ссылка;
		СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ПартнерВыбор), ОбъектПартнер.Наименование);
			
		// Контактное лицо
		Если ЭтоКомпания = 0 И УказатьДанныеКонтактногоЛица И НЕ ПустаяСтрока(ФамилияКЛ) Тогда
		
			ОбъектКонтактноеЛицо = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
			ОбъектКонтактноеЛицо.Владелец               = ПартнерВыбор;
			ОбъектКонтактноеЛицо.ДатаРегистрацииСвязи   = ТекущаяДата();
			ОбъектКонтактноеЛицо.Наименование           = ФИО_ОднойСтрокой(ФамилияКЛ, ИмяКЛ, ОтчествоКЛ);
			ОбъектКонтактноеЛицо.Автор                  = Пользователи.ТекущийПользователь();
			Если Не Роль.Пустая() Тогда
				СтрокаРоли = ОбъектКонтактноеЛицо.РолиКонтактногоЛица.Добавить();
				СтрокаРоли.РольКонтактногоЛица = Роль;
			КонецЕсли;
			
			Если Не ПустаяСтрока(АдресЭПКЛ) Тогда
				НоваяСтрокаКИ = ОбъектКонтактноеЛицо.КонтактнаяИнформация.Добавить();
				НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты;
				НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.EmailКонтактногоЛица;
				НоваяСтрокаКИ.Представление     = АдресЭПКЛ;
				НоваяСтрокаКИ.ЗначенияПолей     = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияXMLПоПредставлению(НоваяСтрокаКИ.Представление, НоваяСтрокаКИ.Вид);
				НоваяСтрокаКИ.АдресЭП           = АдресЭПКЛ;
				Поз = Найти(АдресЭПКЛ, "@");
				Если Поз <> 0 Тогда
					НоваяСтрокаКИ.ДоменноеИмяСервера = Сред(АдресЭПКЛ, Поз+1);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначенияПолейВСписокЗначений(ТелефонКЛЗначенияПолей).Количество()> 0 Тогда
				НоваяСтрокаКИ = ОбъектКонтактноеЛицо.КонтактнаяИнформация.Добавить();
				НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.ТелефонКонтактногоЛица;
				НоваяСтрокаКИ.Представление     = ТелефонКЛ;
				НоваяСтрокаКИ.ЗначенияПолей     = ТелефонКЛЗначенияПолей;
				ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(ТелефонКЛЗначенияПолей));
			КонецЕсли;
			
			Если ЗначенияПолейВСписокЗначений(МобильныйТелефонКЛЗначенияПолей).Количество()> 0 Тогда
				НоваяСтрокаКИ = ОбъектКонтактноеЛицо.КонтактнаяИнформация.Добавить();
				НоваяСтрокаКИ.Тип               = Перечисления.ТипыКонтактнойИнформации.Телефон;
				НоваяСтрокаКИ.Вид               = Справочники.ВидыКонтактнойИнформации.МобильныйТелефонКонтактногоЛица;
				НоваяСтрокаКИ.Представление     = МобильныйТелефонКЛ;
				НоваяСтрокаКИ.ЗначенияПолей     = МобильныйТелефонКЛЗначенияПолей;
				ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрокаКИ, ЗначенияПолейВСписокЗначений(МобильныйТелефонКЛЗначенияПолей));
			КонецЕсли;
			
			ОбъектКонтактноеЛицо.Записать();
			СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(ОбъектКонтактноеЛицо.Ссылка), ОбъектКонтактноеЛицо.Наименование);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Контрагент
	Если ИспользуютсяТолькоПартнеры Или (ДействиеСКонтрагентом = 1 И НЕ НаОснованииКонтрагента И УказыватьЮридическиеРеквизиты) Тогда
		
		ОбъектКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
		ОбъектКонтрагент.Наименование			   = ?(ИспользуютсяТолькоПартнеры, Название, НаименованиеКонтрагента());
		ОбъектКонтрагент.ЮридическоеФизическоеЛицо = ТипЮрФизЛицаКонтрагента(ЭтоКомпания, ВидКомпании);
		ОбъектКонтрагент.ИНН					   = ?(ЭтоКомпания = 0,?(ВидКомпании <> 1,ИНН,""),ИННПартнерФизЛицо);
		ОбъектКонтрагент.КПП					   = ?(ЭтоКомпания = 0 И (ВидКомпании = 0 Или ВидКомпании = 3),КПП,"");
		ОбъектКонтрагент.Партнер				   = ПартнерВыбор;
		ОбъектКонтрагент.НаименованиеПолное		   = ?(ЭтоКомпания = 0,ПолноеЮридическоеНаименование,ФИО_ОднойСтрокой(ФамилияПартнера, ИмяПартнера, ОтчествоПартнера));
						
		ОбъектКонтрагент.Записать();
		КонтрагентВыбор = ОбъектКонтрагент.Ссылка;
		СписокСозданных.Добавить(ПолучитьНавигационнуюСсылку(КонтрагентВыбор), ОбъектКонтрагент.Наименование);
						
	КонецЕсли;
	
	Если НаОснованииКонтрагента И ЗначениеЗаполнено(КонтрагентОснование) Тогда
		
		ВыполнитьЗаписьКонтрагентаОснование(ПартнерВыбор, КонтрагентОснование);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	СозданиеВыполнено = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователяПоРезультатамНайдено(Знач Оповещение1)
	
	ПартнерВыбор = Неопределено;
	
	ТекущиеДанные =  Элементы.ТаблицаНайдено.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ВыполнитьОбработкуОповещения(Оповещение1, Истина);
		Возврат;
	КонецЕсли;
	
	Если ДействиеПоРезультатамНайдено = 0 Тогда
		
		ПартнерВыбор = ТекущиеДанные.Партнер;
		
		Если ИспользуютсяТолькоПартнеры Или ДействиеСКонтрагентом = 0 Тогда
			
			ОткрытьПослеСоздания = Ложь;
			
			РеквизитыПартнера = Новый Структура;
			РеквизитыПартнера.Вставить("ОсновнойМенеджер", ТекущиеДанные.ОсновнойМенеджер);
			РеквизитыПартнера.Вставить("Наименование",     ТекущиеДанные.Представление);
			
			Если ТекущиеДанные.Различие Тогда
				
				ДополнительныеПараметры = Новый Структура;
				ДополнительныеПараметры.Вставить("РеквизитыПартнера", РеквизитыПартнера);
				ДополнительныеПараметры.Вставить("СозданыНовыеОбъекты", Ложь);
				
				Оповещение = Новый ОписаниеОповещения("ВопросПродолжениеВыбораПартнераЗавершение", ЭтотОбъект, ДополнительныеПараметры);
				Если ИспользуютсяТолькоПартнеры Тогда
					ТекстВопроса = НСтр("ru = 'Выбранный контрагент имеет существенное различие с введенными данными. Продолжить?'");
				Иначе
					ТекстВопроса = НСтр("ru = 'Выбранный партнер имеет существенное различие с введенными данными. Продолжить?'");
				КонецЕсли;
				
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
				
			Иначе
				
				ВыполнитьДействияЗакрытияФормы(Новый ОписаниеОповещения("ВыборПользователяПоРезультатамНайденоЗавершение", ЭтотОбъект, Новый Структура("Оповещение1, ТекущиеДанные", Оповещение1, ТекущиеДанные)), РеквизитыПартнера, Ложь);
                Возврат;
				
			КонецЕсли;
			
			
			ВыборПользователяПоРезультатамНайденоФрагмент(Оповещение1);

			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли ДействиеПоРезультатамНайдено = 1 Тогда
		
		Родитель = ТекущиеДанные.Партнер;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение1, Ложь);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователяПоРезультатамНайденоЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение1 = ДополнительныеПараметры.Оповещение1;
    ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
    
    
    ВыборПользователяПоРезультатамНайденоФрагмент(Оповещение1);

КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователяПоРезультатамНайденоФрагмент(Знач Оповещение1)
    
    ВыполнитьОбработкуОповещения(Оповещение1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияЗакрытияФормы(Знач Оповещение, РеквизитыПартнера, СозданыНовыеОбъекты)
	
	Если НаОснованииКонтрагента И ЗначениеЗаполнено(КонтрагентОснование) Тогда
		
		Если Не СозданыНовыеОбъекты Тогда
			ВыполнитьЗаписьКонтрагентаОснование(ПартнерВыбор, КонтрагентОснование);
		КонецЕсли;
		
		ОповеститьОбИзменении(КонтрагентОснование);
		
	ИначеЕсли ОбъектОснование = Неопределено Тогда
		
		Оповестить("ВыборПартнераНайдено",
			Новый Структура("Партнер,ОсновнойМенеджер", ПартнерВыбор, РеквизитыПартнера.ОсновнойМенеджер));
		
	КонецЕсли;
	
	Если ДляВыбора Тогда
		ОповеститьОВыборе(ПартнерВыбор);
	ИначеЕсли НаОснованииОбособленногоКонтрагента Тогда
		Если Не ЗначениеЗаполнено(КонтрагентВыбор) Тогда
			КонтрагентВыбор = ПолучитьКонтрагентаПартнераПоУмолчанию(ПартнерВыбор);
		КонецЕсли;
		Закрыть(КонтрагентВыбор);
	Иначе
		Закрыть(ПартнерВыбор);
	КонецЕсли;
	
	Если ОткрытьПослеСоздания Тогда
		Если Не СозданыНовыеОбъекты Или ДействиеПоРезультатамНайдено <> 0 Тогда
			ПоказатьЗначение(Неопределено, ПартнерВыбор);
            Возврат;
		Иначе
			ПоказатьЗначение(Неопределено, КонтрагентВыбор);
            Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьДействияЗакрытияФормыФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияЗакрытияФормыФрагмент(Знач Оповещение)
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВыполнитьЗаписьКонтрагентаОснование(Партнер, Контрагент)
	
	КонтрагентОбъект = Контрагент.ПолучитьОбъект();
	КонтрагентОбъект.Партнер = Партнер;
	КонтрагентОбъект.Записать();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеПользователю(ТекстСообщения, Поле="", ОчищатьСообщения = Ложь)
	
	Если ОчищатьСообщения Тогда
		ОчиститьСообщения();
	КонецЕсли;
	
	Если ИспользуютсяТолькоПартнеры Тогда
		ТекстСообщения = СтрЗаменить(ТекстСообщения, НСтр("ru = 'партнера'"), НСтр("ru = 'контрагента'"));
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, Поле);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаОснованииКонтрагента(ДанныеКонтрагента,Отказ)
	
	НаОснованииКонтрагента = Истина;
	Элементы.ЭтоКомпания.Доступность = Ложь;
	Элементы.СтраницыУказыватьЮрРеквизитыКонтрагентОснование.ТекущаяСтраница = Элементы.СтраницаНаОснованииКонтрагента;
	Элементы.СтраницыУказыватьСоздаватьКонтрагентаОснование.ТекущаяСтраница  = Элементы.СтраницаНаОснованииКонтрагентаЧастноеЛицо;
	Элементы.ГруппаЮридическиеДанные.ТолькоПросмотр = Истина;
	Элементы.ГруппаЮридическиеДанные.Доступность    = Истина;
	Элементы.ГруппаИННЧастноеЛицо.ТолькоПросмотр    = Истина;
	
	ДанныеКонтрагента = Параметры.КонтрагентОснование;
	
	Если ДанныеКонтрагента.Свойство("Ссылка") Тогда
		
		КонтрагентОснование = ДанныеКонтрагента.Ссылка;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Контрагенты.ЮридическоеФизическоеЛицо,
		               |	Контрагенты.ИНН,
		               |	Контрагенты.КПП,
		               |	Контрагенты.Наименование,
		               |	Контрагенты.Партнер,
		               |	Контрагенты.НаименованиеПолное
		               |ИЗ
		               |	Справочник.Контрагенты КАК Контрагенты
		               |ГДЕ
		               |	Контрагенты.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",ДанныеКонтрагента.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если Выборка.Партнер <> Справочники.Партнеры.НеизвестныйПартнер И Выборка.Партнер <> Справочники.Партнеры.РозничныйПокупатель Тогда
				Отказ = Истина;
				// Правка тоир++
				ТекстСообщения = НСтр("ru = 'Для контрагента %контрагент% уже имеется связанный с ним партнер %партнер%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%контрагент%", Строка(ДанныеКонтрагента.Ссылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%партнер%"   , Строка(Выборка.Партнер));

				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить(); 
				// Правка тоир--
				Возврат;
			КонецЕсли;
			
			ДанныеКонтрагента.Вставить("Название", Выборка.Наименование);
			ДанныеКонтрагента.Вставить("ИНН", Выборка.ИНН);
			ДанныеКонтрагента.Вставить("КПП", Выборка.КПП);
			ДанныеКонтрагента.Вставить("ЮридическоеФизическоеЛицо", Выборка.ЮридическоеФизическоеЛицо);
			ДанныеКонтрагента.Вставить("ПолноеЮридическоеНаименование",Выборка.НаименованиеПолное);
					
		Иначе
			
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеКонтрагента.Вставить("ПолноеНаименование", ДанныеКонтрагента.ПолноеЮридическоеНаименование);
		
	Если ДанныеКонтрагента.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		
		ЭтоКомпания = 1;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента,,"Название,ИНН");
		
		ИННПартнерФизЛицо = ДанныеКонтрагента.ИНН;
		
		ФИО = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СокрЛП(ДанныеКонтрагента.Название)," ");
		КоличествоПодстрок = ФИО.Количество();
		ФамилияПартнера  = ?(КоличествоПодстрок > 0,ФИО[0],"");
		ИмяПартнера      = ?(КоличествоПодстрок > 1,ФИО[1],"");
		ОтчествоПартнера = ?(КоличествоПодстрок > 2,ФИО[2],"");
		
		Если ДанныеКонтрагента.Свойство("ТелефонКонтрагента") Тогда
			
			ТелефонПартнераФизЛицо = ДанныеКонтрагента.ТелефонКонтрагента.Представление;
			ТелефонПартнераФизЛицоЗначенияПолей = ДанныеКонтрагента.ТелефонКонтрагента.ЗначенияПолей;
			
		КонецЕсли;
		
		Если ДанныеКонтрагента.Свойство("EmailКонтрагента") Тогда
			
			АдресЭППартнераФизЛицо = ДанныеКонтрагента.EmailКонтрагента.Представление;
			
		КонецЕсли;
		
	Иначе
		
		ЭтоКомпания = 0;
		ЗаполнитьЗначенияСвойств(ЭтаФорма,ДанныеКонтрагента,,"КПП");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияПолейВСписокЗначений(РеквизитЗначенияПолей)
	
	// Преобразует "новое", строковое значение служебного поля адреса в "старое", список значений.
	
	Если ПустаяСтрока(РеквизитЗначенияПолей) Тогда
		Возврат Новый СписокЗначений;
	КонецЕсли;
	
	Возврат УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(РеквизитЗначенияПолей).ЗначенияПолей;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовки()

	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "", НСтр("ru = 'Помощник регистрации нового контрагента'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДекорацияПервичнаяИнформация", 
	                     НСтр("ru = 'Укажите доступную вам на данный момент информацию о контрагенте'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "УказатьДанныеКонтактногоЛица", 
	                     НСтр("ru = 'Указать данные контактного лица (будет создано контактное лицо контрагента)'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ФактическийАдрес", 
	                     НСтр("ru = 'Фактический адрес контрагента'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ЮридическийАдрес", 
	                     НСтр("ru = 'Юридический адрес контрагента'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДекорацияНайдено", 
	                     НСтр("ru = 'Найдены контрагенты с совпадающими данными, примите решение о дальнейших действиях.'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ТаблицаНайдено", 
	                     НСтр("ru = 'Найденные контрагенты'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДеревоСравненияПартнеров", 
	                     НСтр("ru = 'Сравнение контрагентов'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДеревоСравненияПартнеровЗначениеНайденного", 
	                     НСтр("ru = 'Найденный контрагент'"), ИспользуютсяТолькоПартнеры);
	ПартнерыИКонтрагенты.ЗаголовокРеквизитаВЗависимостиОтФОИспользоватьПартнеровКакКонтрагентов(
	                     ЭтотОбъект, "ДеревоСравненияПартнеровЗначениеТекущего", 
	                     НСтр("ru = 'Создаваемый контрагент'"), ИспользуютсяТолькоПартнеры);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер)
	
	Возврат ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(Партнер);
	
КонецФункции

#КонецОбласти

ВыполняетсяЗакрытие = Ложь;

#КонецОбласти
