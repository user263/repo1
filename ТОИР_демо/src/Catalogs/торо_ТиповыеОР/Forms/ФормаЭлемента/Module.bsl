////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем МожноПечататьВизуализацию;

&НаКлиенте
Перем СтруктураДанныхДоРедактирования;

&НаКлиенте
Перем ПредСтраница;

&НаСервере
Перем ДатаПланированияОкончание;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	ПравоРедактирования = ПравоДоступа("Редактирование", Объект.Ссылка.Метаданные());
	
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	Контекст.Вставить("ПроизвольныйОбъект",         Ложь);
	Контекст.Вставить("ИмяРеквизитаНаборСвойств",   "НаборСвойствОР");
	Контекст.Вставить("УсловноеОформлениеЗаполнятьОбязательно",   Ложь);
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Объект.НаборСвойствОР);
	Если Объект.ЭтоГруппа Тогда
		Элементы.ГруппаДополнительныеРеквизиты.Видимость = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	Если Параметры.Свойство("Родитель") И Параметры.Родитель<> Неопределено Тогда
		Объект.Родитель = Параметры.Родитель;
	КонецЕсли;	
	
	Если Объект.Ссылка = Справочники.торо_ТиповыеОР.ПустаяСсылка() И Параметры.Свойство("Копированием") Тогда
		СсылкаДляОтбора = Справочники.торо_ТиповыеОР.ПустаяСсылка();
		СсылкаКопирования = Параметры.Объект;
		флОбъектЗаписан = Истина; 
		
		ОбъектИсточник = Параметры.Объект.ПолучитьОбъект();
		
		Объект.Изготовитель = СсылкаКопирования.Изготовитель;
		Объект.Комментарий = СсылкаКопирования.Комментарий;
		Объект.РеквизитДопУпорядочивания = СсылкаКопирования.РеквизитДопУпорядочивания;
		Объект.Направление = СсылкаКопирования.Направление;
		Объект.Наименование = СсылкаКопирования.Наименование;
		Объект.Родитель = СсылкаКопирования.Родитель;
		
		НормРемонты = СсылкаКопирования.НормативныеРемонты.Выгрузить();
		Для Каждого НормРемонт Из НормРемонты Цикл
			НормРемонт.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке;
		КонецЦикла;
		
		Объект.НормативныеРемонты.Загрузить(НормРемонты);		
			
		ПредшРемонты = СсылкаКопирования.ПредшествующиеРемонты.Выгрузить();
		Объект.ПредшествующиеРемонты.Загрузить(ПредшРемонты);
		
		ЗамешРемонты = СсылкаКопирования.ЗамещаемыеРемонты.Выгрузить();
		Объект.ЗамещаемыеРемонты.Загрузить(ЗамешРемонты);
		
		Если Параметры.Свойство("СписокПараметровКопирования") Тогда
			СписокПараметровКопирования = Параметры.СписокПараметровКопирования;
			Для Каждого ЭлементСписка Из СписокПараметровКопирования Цикл
				Если ЭлементСписка.Пометка Тогда
					Если ЭлементСписка.Значение = "Контролируемые показатели" Тогда
						Запрос = Новый Запрос;
						Запрос.Текст = 
						"ВЫБРАТЬ
						|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель,
						|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.ДопустимыйМинимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум) КАК ДопустимыйМинимум,
						|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.ДопустимыйМаксимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум) КАК ДопустимыйМаксимум,
						|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.КритическийМаксимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум) КАК КритическийМаксимум,
						|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.КритическийМинимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум) КАК КритическийМинимум,
						|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
						|ИЗ
						|	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
						|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта1
						|		ПО торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = торо_ИзмеряемыеПоказателиОбъектовРемонта1.Ссылка
						|			И (НЕ торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР)
						|ГДЕ
						|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта";
						
						Запрос.УстановитьПараметр("ОбъектРемонта", СсылкаКопирования);
						
						Результат = Запрос.Выполнить();
						Выборка = Результат.Выбрать();
						
						Если флОбъектЗаписан Тогда
							ИзмеряемыеПоказатели = Результат.Выгрузить();
							ИзмеряемыеПоказатели.Колонки.Добавить("ОбъектРемонта");
							ИзмеряемыеПоказатели.ЗаполнитьЗначения(СсылкаДляОтбора,"ОбъектРемонта");
							НаборЗаписей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.ОбъектРемонта.Установить(СсылкаДляОтбора);
							НаборЗаписей.Загрузить(ИзмеряемыеПоказатели);
							НаборЗаписей.Записать();
						КонецЕсли;
					
					ИначеЕсли ЭлементСписка.Значение = "Запчасти" Тогда
						ЗапчастиТаб = СсылкаКопирования.Запчасти.Выгрузить();
						Объект.Запчасти.Загрузить(ЗапчастиТаб);					
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Модифицированность=Истина;		
	КонецЕсли;

	МассивОР = ПолучитьСоставОРДляТипового(Объект.Ссылка);
	СоставОР.Очистить();
	Для Каждого ОРВСоставе Из МассивОР Цикл
		НС = СоставОР.Добавить();
		НС.Ссылка = ОРВСоставе;
		НС.ЗаписанВБазу = Истина;
	КонецЦикла;
	
	УстановитьВидимостьДоступностьЭлементовФормы();
	
	МодифицированностьНормРемонтов = Ложь;
	МодифицированностьПредшествующихРемонтов = Ложь;
	МодифицированностьЗамещаемыхРемонтов = Ложь;
	МодифицированностьИзмеряемыхПоказателей = Ложь;
	
	ОбновитьИзмеряемыеПоказатели(Объект, СписокИзмеряемыхПоказателей);
	
	// заполнение признака использования характеристик в ТЧ "Запчасти"
	
	Для каждого СтрокаЗапчастей Из Объект.Запчасти Цикл 		
		СтрокаЗапчастей.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(СтрокаЗапчастей.Номенклатура); 
	КонецЦикла;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	Массив = Новый Массив;
	Массив.Добавить("СписокИзмеряемыхПоказателей");
	Массив.Добавить("ПараметрыОповещенияПоСостояниямОР");
	Массив.Добавить("СписокПараметровНаработки");
	Массив.Добавить("ТабМаксимальныхЗначенийНаработки");
	Массив.Добавить("НормативныеРемонты");
	Массив.Добавить("ПредшествующиеРемонты");
	Массив.Добавить("ЗамещаемыеРемонты");
	Массив.Добавить("Запчасти");
	Массив.Добавить("НормативныеЗатратыПриТОиР");
	торо_СобытияФормКлиент.ЗаполнитьСтруктуруДанныхДоРедактирования(СтруктураДанныхДоРедактирования,Массив);
	
	ЗаписатьИсходныеСтатусыНормативныхРемонтовИИзменитьЗаголовок();
	
	ПанельДопИнформацииПриСменеСтраницы(Элементы.ПанельДопИнформации, Элементы.ПанельДопИнформации.ТекущаяСтраница);
	
	УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "ОбновитьФормуСпискаОР" Тогда
		СсылкаНаОр = Параметр;
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОр,"ТиповойОР") = Объект.Ссылка И (СоставОР.НайтиСтроки(Новый структура("Ссылка", СсылкаНаОр)).Количество() = 0) Тогда
			НС_ОР = СоставОр.Добавить();
			НС_ОР.Ссылка = СсылкаНаОр;
			НС_ОР.ЗаписанВБазу = Ложь;
			ЗаписатьНормативыОРПриИзмененииТиповогоОРНаСервере(Объект.Ссылка, СсылкаНаОр);
			//СоставОРОбработкаВыбораФрагмент();
			//ЭтаФорма.Записать();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, "НаборСвойствОР");
	// Конец СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Объект.НаборСвойствОР);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не Отказ Тогда
		Если (МодифицированностьНормРемонтов Или МодифицированностьЗамещаемыхРемонтов Или  МодифицированностьПредшествующихРемонтов)
			И ЗначениеЗаполнено(ВРНачалоЦикла) Тогда
			
			Элементы.Перерасчитать.Доступность 	= Ложь;
			Элементы.Построить.Доступность 		= Ложь;
			Элементы.Настройки.Доступность 		= Ложь; 			
			
			ВРНачалоЦикла = Неопределено;
			ПлановыйГрафикРаботы = Неопределено;
			торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
			ОчиститьПолеТабличногоДокумента();
			Элементы.Декорация1.Заголовок		= НСтр("ru = 'Всего: '");
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Данные на вкладке <Структура ремонтного цикла> были очищены, так как нормативы изменены.'");
			Сообщение.Сообщить();			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Объект.ЭтоГруппа Тогда
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
		СтруктураОбязательныхПолейНЗ = Новый Структура("ВидРемонта, НормативныйРемонт, СпособПланирования, ГрафикРемонтныхРабот, СпособВыполнения, СпособУчетаДатыОтсчета");
		
		Для каждого СтрЗамещРемонта Из Объект.ЗамещаемыеРемонты Цикл
			Если ЗначениеЗаполнено(СтрЗамещРемонта.ЗамещаемыйВидРемонта) Тогда
				МежремонтныйИнтервал = ВычислениеМежремонтногоИнтервала(СтрЗамещРемонта);
				Если НЕ МежремонтныйИнтервал = Неопределено Тогда
					Если МежремонтныйИнтервал <= СтрЗамещРемонта.НачальнаяГраница Тогда
						торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Некорректно заполнено поле ""Дней от начала"" для ремонта %1 в строке %2'"),СтрЗамещРемонта.ВидРемонта,СтрЗамещРемонта.ЗамещаемыйВидРемонта));
						Отказ = Истина;
					КонецЕсли;
					Если МежремонтныйИнтервал <= СтрЗамещРемонта.КонечнаяГраница Тогда
						торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Некорректно заполнено поле ""Дней от окончания"" для ремонта %1 в строке %2'"),СтрЗамещРемонта.ВидРемонта, СтрЗамещРемонта.ЗамещаемыйВидРемонта));
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
	КонецЕсли;
	
	Для Каждого НормРемонт Из ТекущийОбъект.НормативныеРемонты.НайтиСтроки(Новый Структура("Статус", Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ПустаяСсылка())) Цикл
		НормРемонт.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке;
	КонецЦикла;
	
	Если НЕ Объект.ЭтоГруппа Тогда
		
		ПродолжительностьЗаполнено = Истина;
		ПлановаяНаработкаЗаполнено = Истина;
		КоэффициентИспользованияОборудования = Истина;
		
		Для каждого Строчка Из СписокПараметровНаработки Цикл
			
			Если ЗначениеЗаполнено(Строчка.ОбъектРемонта) И Строчка.ОбъектРемонта <> Объект.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			Если Строчка.ПродолжительностьПериодаПлановойНаработки = 0 Тогда
				ПродолжительностьЗаполнено = Ложь;
				Отказ = Истина;
			КонецЕсли;                                                               
			
			Если Строчка.ПлановаяНаработка = 0 Тогда
				ПлановаяНаработкаЗаполнено = Ложь;
				Отказ = Истина;
			КонецЕсли;
			
			Если Строчка.КоэффициентИспользованияОборудования = 0 Тогда
				КоэффициентИспользованияОборудования = Ложь;
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ПлановаяНаработкаЗаполнено Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Плановая наработка""'"));
		КонецЕсли;
		
		Если НЕ ПродолжительностьЗаполнено Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Продолжительность периода плановой наработки""'"));
		КонецЕсли;
		
		Если НЕ КоэффициентИспользованияОборудования Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Коэффициент использования оборудования""'"));
		КонецЕсли;
		
		МаксимальноеЗначение = Истина;
		Для каждого Строчка Из ТабМаксимальныхЗначенийНаработки Цикл
			
			Если Строчка.МаксимальноеЗначение = 0 И Строчка.НазначенныйРесурс = 0 Тогда
				МаксимальноеЗначение = Ложь;
				Отказ = Истина;
			КонецЕсли;                                                               
			
		КонецЦикла;
		
		Если НЕ МаксимальноеЗначение Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Максимальное значение наработки"" или ""Назначенный ресурс""'"));
		КонецЕсли;
		
		Если МодифицированностьЗапчастей или МодифицированностьНормативныхЗатратПоЗапчастям Тогда
			Для каждого СтрокаЗапчасти из Объект.Запчасти Цикл
				СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", СтрокаЗапчасти.Номенклатура, СтрокаЗапчасти.Характеристика);
				СтрокиНомативов = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(СтруктураПоиска);
				Для каждого СтрокаНорматива из СтрокиНомативов Цикл
					Если СтрокаЗапчасти.Количество < СтрокаНорматива.Количество Тогда
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Количество нормативных затрат по номенклатуре ""%1"" превышает количество номенклатуры. Запись была отменена!'"),
								СтрокаЗапчасти.Номенклатура);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если МодифицированностьНормРемонтов Тогда
		
		СтруктураВозврата = ПолучитьОРиВРИзТиповогоОР2(ТекущийОбъект.Ссылка, "НормативныеРемонты","торо_НормативныеРемонтыОборудования", ТекущийОбъект.НормативныеРемонты);
		НаборЗаписей = РегистрыСведений.торо_НормативныеРемонтыОборудования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		НомерСтрокиТЧ = 0;
		Для каждого Стр Из ТекущийОбъект.НормативныеРемонты Цикл
			НомерСтрокиТЧ = НомерСтрокиТЧ + 1;
			
			Если ЗначениеЗаполнено(Стр.ВидРемонта) И ЗначениеЗаполнено(Стр.НормативныйРемонт) И ЗначениеЗаполнено(Стр.СпособПланирования) 
				И ЗначениеЗаполнено(Стр.ГрафикРемонтныхРабот) И ЗначениеЗаполнено(Стр.СпособВыполнения)
				И Стр.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует Тогда
				Для каждого Элем Из СтруктураВозврата Цикл
					Если Элем.ВидРемонта = Стр.ВидРемонта Тогда
						
						СтрокаНабора = НаборЗаписей.Добавить();	
						
						ЗаполнитьЗначенияСвойств(СтрокаНабора, Элем);
						ЗаполнитьЗначенияСвойств(СтрокаНабора, Стр);
						
						СтрокаНабора.ТиповойОР = ТекущийОбъект.Ссылка; 
					КонецЕсли; 
				КонецЦикла;
			Иначе 
				Если НЕ ЗначениеЗаполнено(Стр.ВидРемонта) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Вид ремонта"" в строке № '") + НомерСтрокиТЧ;
					Сообщение.Сообщить();
					Отказ = Истина;	
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.НормативныйРемонт) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Технологическая карта"" в строке № '") + НомерСтрокиТЧ;
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.СпособПланирования) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ планирования"" в строке № '") + НомерСтрокиТЧ;
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.ГрафикРемонтныхРабот) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""График ремонтных работ"" в строке № '") + НомерСтрокиТЧ;
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.СпособВыполнения) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ выполнения"" в строке № '") + НомерСтрокиТЧ;
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.СпособУчетаДатыОтсчета) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ учета даты отсчета"" в строке № '") + НомерСтрокиТЧ;
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла; 
		
		НаборЗаписей.Записать();
		
		МодифицированностьНормРемонтов = Ложь;
		
	КонецЕсли;
	
	Если МодифицированностьИзмеряемыхПоказателей Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекущийОбъект.Ссылка);		
		НаборЗаписей.Прочитать();
		
		Для каждого СтрокаПоказателя из СписокИзмеряемыхПоказателей Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаПоказателя.ОбъектРемонта) Тогда
				СтрокаПоказателя.ОбъектРемонта = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		МассивСтрок = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущийОбъект.Ссылка));
		НаборЗаписей.Загрузить(СписокИзмеряемыхПоказателей.Выгрузить(МассивСтрок));
		
		НаборЗаписей.Записать();
		
		// Удалим из регистра строки, которые были удалены для конкретных ОР.
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта,
		|	ИзмеряемыеПоказателиОбъектовРемонта.Показатель КАК Показатель
		|ИЗ
		|	(ВЫБРАТЬ
		|		торо_ОбъектыРемонта.Ссылка КАК Ссылка
		|	ИЗ
		|		Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|	ГДЕ
		|		торо_ОбъектыРемонта.ТиповойОР = &ТиповойОР) КАК ВложенныйЗапрос
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК ИзмеряемыеПоказателиОбъектовРемонта
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК ИзмеряемыеПоказателиТиповыхОР
		|			ПО ИзмеряемыеПоказателиОбъектовРемонта.Показатель = ИзмеряемыеПоказателиТиповыхОР.Показатель
		|				И (ИзмеряемыеПоказателиТиповыхОР.ОбъектРемонта = &ТиповойОР)
		|		ПО (ВложенныйЗапрос.Ссылка = (ВЫРАЗИТЬ(ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК Справочник.торо_ОбъектыРемонта)))
		|ГДЕ
		|	ИзмеряемыеПоказателиОбъектовРемонта.Удален
		|	И ИзмеряемыеПоказателиТиповыхОР.Показатель ЕСТЬ NULL 
		|ИТОГИ ПО
		|	Показатель";
		Запрос.УстановитьПараметр("ТиповойОР",ТекущийОбъект.Ссылка);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			ВыборкаПоказатели = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоказатели.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Показатель.Установить(ВыборкаПоказатели.Показатель);
				НаборЗаписей.Прочитать();
				ВыборкаДетЗаписи = ВыборкаПоказатели.Выбрать();
				МассивУдаляемых = Новый Массив;
				Для Каждого Запись Из НаборЗаписей Цикл
					Если ВыборкаДетЗаписи.НайтиСледующий(Новый Структура("ОбъектРемонта,Показатель",Запись.ОбъектРемонта,Запись.Показатель)) Тогда
						МассивУдаляемых.Добавить(Запись);
					КонецЕсли;
					ВыборкаДетЗаписи.Сбросить();
				КонецЦикла;
				Для Каждого ЭлМассива Из МассивУдаляемых Цикл
					НаборЗаписей.Удалить(ЭлМассива);
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЦикла;
		КонецЕсли;
		
		МодифицированностьИзмеряемыхПоказателей = Ложь;
		
	КонецЕсли;
	
	// Нет проверки на использование ФО, так как модифицированность не поднимется, если ФО отключена.
	Если МодифицированностьПараметровОповещенияОСостоянииОР Тогда
		
		Для каждого Строка из ПараметрыОповещенияПоСостояниямОР Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			НаборПараметровОповещения = РегистрыСведений.торо_ПараметрыОповещенияОСостоянииОборудования.СоздатьНаборЗаписей();
			НаборПараметровОповещения.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
			НайденныеСтроки = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(Новый Структура("ТиповойОР", Справочники.торо_ТиповыеОР.ПустаяСсылка()));
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ТиповойОР = ТекущийОбъект.Ссылка;
			КонецЦикла;
			МассивСтрок = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(Новый Структура("ТиповойОР", ТекущийОбъект.Ссылка));
			НаборПараметровОповещения.Загрузить(ПараметрыОповещенияПоСостояниямОР.Выгрузить(МассивСтрок));			
			НаборПараметровОповещения.Записать();
			МодифицированностьПараметровОповещенияОСостоянииОР = Ложь;
		Исключение
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать параметры оповещения о состоянии оборудования: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	
	Если МодифицированностьПредшествующихРемонтов ИЛИ МодифицированностьНормРемонтов Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		
		СтруктураВозврата = ПолучитьОРиВРИзТиповогоОР2(ТекущийОбъект.Ссылка, "ПредшествующиеРемонты","торо_ПредшествующиеНормативныеРемонтыОборудования", ТекущийОбъект.ПредшествующиеРемонты); 
		ТЗПредшествующих = ПолучитьПредшествующиеИлиНормативные("ПредшествующийВидРемонта");
		
		Для каждого Стр Из ТЗПредшествующих Цикл
			Для каждого Элем Из СтруктураВозврата Цикл
				Если Элем.ВидРемонта = Стр.ВидРемонта Тогда
					
					СтрокаНабора = НаборЗаписей.Добавить();	
					ЗаполнитьЗначенияСвойств(СтрокаНабора, Элем);
					ЗаполнитьЗначенияСвойств(СтрокаНабора, Стр);
					СтрокаНабора.Приоритет = Элем.Приоритет;
					СтрокаНабора.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла; 
		
		НаборЗаписей.Записать();
		
		Если Не Отказ Тогда     			
			МодифицированностьПредшествующихРемонтов = Ложь;			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МодифицированностьЗамещаемыхРемонтов ИЛИ МодифицированностьНормРемонтов Тогда
		СтруктураВозврата = ПолучитьОРиВРИзТиповогоОР2(ТекущийОбъект.Ссылка, "ЗамещаемыеРемонты","торо_ПараметрыЗамещенияПланированияРемонтныхРабот", ТекущийОбъект.ЗамещаемыеРемонты); 
		НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		
		ТЗЗамещаемых = ПолучитьПредшествующиеИлиНормативные("ЗамещаемыйВидРемонта");
		
		Для каждого Стр Из ТЗЗамещаемых Цикл
			Для каждого Элем Из СтруктураВозврата Цикл
				Если Элем.ВидРемонта = Стр.ВидРемонта Тогда
					СтрокаНабора = НаборЗаписей.Добавить();	
					ЗаполнитьЗначенияСвойств(СтрокаНабора, Элем);
					ЗаполнитьЗначенияСвойств(СтрокаНабора, Стр);
					СтрокаНабора.Приоритет = Элем.Приоритет;
					СтрокаНабора.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла; 
		
		НаборЗаписей.Записать();
		Если Не Отказ Тогда
			МодифицированностьЗамещаемыхРемонтов = Ложь;		
		КонецЕсли;

	КонецЕсли;
	
	Если ТаблицаОценокРММодифицированность Тогда
		
		Для каждого Строка из РСНЗТаблицаОценокРМ Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ГруппаОбъектовРемонтов) Тогда
				Строка.ГруппаОбъектовРемонтов = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			
			ТаблицаЗначенийОценокРМ = РСНЗТаблицаОценокРМ.Выгрузить();
			МассивСтрокОценокРМ = ТаблицаЗначенийОценокРМ.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов", ТекущийОбъект.Ссылка));
			ТаблицаБуфер = ТаблицаЗначенийОценокРМ.Скопировать(МассивСтрокОценокРМ);
			
			НаборНормативов = РегистрыСведений.торо_РМРемонтов.СоздатьНаборЗаписей();
			НаборНормативов.Отбор.ГруппаОбъектовРемонтов.Установить(ТекущийОбъект.Ссылка);
			НаборНормативов.Загрузить(ТаблицаБуфер);
			НаборНормативов.Записать();
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать нормативы ремонтных работ: '") + ОписаниеОшибки());
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьРемЦиклов Тогда
		
		Для каждого Строка из ТабличноеПолеРемонтныеЦиклыОборудования Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ГруппаОбъектовРемонтов) Тогда
				Строка.ГруппаОбъектовРемонтов = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			
			ТаблицаЗначенийРемонтныеЦиклыОборудования = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить();
			МассивСтрокЦиклов = ТаблицаЗначенийРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов", ТекущийОбъект.Ссылка));
			ТаблицаБуфер = ТаблицаЗначенийРемонтныеЦиклыОборудования.Скопировать(МассивСтрокЦиклов);
			
			НаборРемонтныхЦикловОборудования = РегистрыСведений.торо_РемонтныеЦиклыОборудования.СоздатьНаборЗаписей();
			НаборРемонтныхЦикловОборудования.Отбор.ГруппаОбъектовРемонтов.Установить(ТекущийОбъект.Ссылка);
			НаборРемонтныхЦикловОборудования.Загрузить(ТаблицаБуфер);
			НаборРемонтныхЦикловОборудования.Записать();
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать фиксированные ремонтные циклы: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	МассивДляУдаления = Новый массив;
	Если МодифицированностьСоставаОР Тогда
		
		Для Каждого СтрокаОР Из СоставОР Цикл
			
			Если СтрокаОР.ПометкаУдаления Тогда
				торо_РаботаСНормативамиСервер.ЗаписатьНормативыОРПриИзмененииТиповогоОР(Справочники.торо_ТиповыеОР.ПустаяСсылка(),СтрокаОР.Ссылка);
				ОбъектОР = СтрокаОР.Ссылка.ПолучитьОбъект();
				ОбъектОР.Направление = Справочники.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка();
				ОбъектОР.Изготовитель = Справочники.Контрагенты.ПустаяСсылка();
				ОбъектОР.ТиповойОР = Справочники.торо_ТиповыеОР.ПустаяСсылка();
				ОбъектОР.Записать();
				МассивДляУдаления.Добавить(СтрокаОР);
			ИначеЕсли НЕ СтрокаОР.ЗаписанВБазу Тогда
				торо_РаботаСНормативамиСервер.ЗаписатьНормативыОРПриИзмененииТиповогоОР(ТекущийОбъект.Ссылка,СтрокаОР.Ссылка);
				ОбъектОР = СтрокаОР.Ссылка.ПолучитьОбъект();
				ОбъектОР.ТиповойОР = ТекущийОбъект.Ссылка;
				ОбъектОР.Направление = ТекущийОбъект.Направление;
				ОбъектОР.Изготовитель = ТекущийОбъект.Изготовитель;
				ОбъектОР.Записать();
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого текСтрока из МассивДляУдаления цикл
			составОР.Удалить(текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если МодифицированностьПараметровНаработки Тогда
		
		Для каждого Строка из СписокПараметровНаработки Цикл
			Если НЕ ЗначениеЗаполнено(Строка.ОбъектРемонта) Тогда
				Строка.ОбъектРемонта = ТекущийОбъект.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			ТаблицаЗначенийПараметровНаработки = СписокПараметровНаработки.Выгрузить();
			МассивСтрокПараметров = ТаблицаЗначенийПараметровНаработки.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекущийОбъект.Ссылка));
			ТаблицаБуфер = ТаблицаЗначенийПараметровНаработки.Скопировать(МассивСтрокПараметров);
			
			НаборПараметровНаработки = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
			НаборПараметровНаработки.Отбор.ОбъектРемонта.Установить(ТекущийОбъект.Ссылка);
			НаборПараметровНаработки.Загрузить(ТаблицаБуфер);
			НаборПараметровНаработки.Записать();
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать параметры наработки: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	Если МодифицированностьМаксЗначНаработки Тогда
		
		ТабМаксЗнач = ТабМаксимальныхЗначенийНаработки.Выгрузить();
		ТабМаксЗнач.ЗаполнитьЗначения(ТекущийОбъект.Ссылка, "ОбъектРемонта");
		
		НаборКонтролируемыхПоказателей = РегистрыСведений.торо_МаксимальныеЗначенияНаработкиОР.СоздатьНаборЗаписей();
		НаборКонтролируемыхПоказателей.Отбор.ОбъектРемонта.Установить(ТекущийОбъект.Ссылка);
		НаборКонтролируемыхПоказателей.Загрузить(ТабМаксЗнач);
		НаборКонтролируемыхПоказателей.Записать();		
		
	КонецЕсли;
	
	Если МодифицированностьЗапчастей или МодифицированностьНормативныхЗатратПоЗапчастям или МодифицированностьСоставаОР Тогда
		ЗапчастиИНормЗатраты = ПолучитьЗапчастиИНормативныеЗатраты();
	КонецЕсли;
	
	Если МодифицированностьЗапчастей 
		или МодифицированностьСоставаОР
		Тогда
		
		Для каждого текСтрока из ПеремещенныеОР Цикл
			НаборЗаписейДляОчистки = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
			НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(текСтрока.Ссылка);
			НаборЗаписейДляОчистки.Записать();
			
			НаборЗаписейДляОчистки = РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(текСтрока.Ссылка);
			НаборЗаписейДляОчистки.Записать();
			
			НаборЗаписейДляОчистки = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
			НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(текСтрока.Ссылка);
			НаборЗаписейДляОчистки.Записать();
			
			НаборЗаписейДляОчистки = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(текСтрока.Ссылка);
			НаборЗаписейДляОчистки.Записать();
			
		КонецЦикла;
		ПеремещенныеОР.Очистить();		
		
		Для каждого текСтрока из МассивДляУдаления Цикл
			
			НаборЗаписейДляОчистки = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
			НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(текСтрока.Ссылка);
			НаборЗаписейДляОчистки.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
			НаборЗаписейДляОчистки.Записать();
			
			НаборЗаписейДляОчистки = РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(текСтрока.Ссылка);
			НаборЗаписейДляОчистки.Записать();
			
			НаборЗаписейДляОчистки = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
			НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(текСтрока.Ссылка);
			НаборЗаписейДляОчистки.Отбор.ТиповойОР.Установить(ТекущийОбъект.Ссылка);
			НаборЗаписейДляОчистки.Записать();
			
			НаборЗаписейДляОчистки = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейДляОчистки.Отбор.ОбъектРемонта.Установить(текСтрока.Ссылка);
			НаборЗаписейДляОчистки.Записать();
			
		КонецЦикла;
		
		ПоОрам = ЗапчастиИНормЗатраты.Запчасти;
		Пока ПоОрам.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ПоОрам.ОбъектРемонта);
			
			НаборЗаписейУдаленные = РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ПоОрам.ОбъектРемонта);
			
			ДетЗаписи = ПоОРам.выбрать();
			
			масОшибок = Новый Массив;
			
			Пока ДетЗаписи.Следующий() Цикл
				
				Если ДетЗаписи.Количество < ДетЗаписи.КоличествоДляПроверки Тогда
					МасОшибок.Добавить(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В объекте ремонта %1 количество нормативных затрат по номенклатуре ""%2"" превышает количество номенклатуры. Запись была отменена!'"),ДетЗаписи.ОбъектРемонта,ДетЗаписи.Номенклатура));
				КонецЕсли;
				
				нс = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(нс, ДетЗаписи);
				нс.Приоритет = Истина;
				
				Если ДетЗаписи.ЭтоТиповой Тогда
					нс.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
				
				Если ДетЗаписи.Удален Тогда
					нс.Приоритет = Ложь;
					нс.ТиповойОР = ТекущийОбъект.Ссылка;
					
					нсу = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(нсу, детЗаписи);
					нсу.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого текОшибка из масОшибок Цикл
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(текОшибка);
				Отказ = Истина;
			КонецЦикла;
			
			Если Отказ тогда
				Возврат;
			КонецЕсли;
			
			НаборЗаписей.Записать();			
			НаборЗаписейУдаленные.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если МодифицированностьЗапчастей
		или МодифицированностьНормативныхЗатратПоЗапчастям 
		или МодифицированностьСоставаОР
		Тогда
		
		ПоОрам = ЗапчастиИНормЗатраты.НормативныеЗатраты;
		Пока ПоОрам.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ПоОрам.ОбъектРемонта);
			
			НаборЗаписейУдаленные = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ПоОрам.ОбъектРемонта);
			
			ДетЗаписи = ПоОРам.выбрать();
			Пока ДетЗаписи.Следующий() Цикл
				
				нс = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(нс, ДетЗаписи);
				нс.Приоритет = Истина;
				
				Если ДетЗаписи.ЭтоТиповой Тогда
					нс.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
				
				Если ДетЗаписи.Удален Тогда
					нс.Приоритет = Ложь;
					нс.ТиповойОР = ТекущийОбъект.Ссылка;
					
					нсу = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(нсу, детЗаписи);
					нсу.ТиповойОР = ТекущийОбъект.Ссылка;
				КонецЕсли;
				
			КонецЦикла;
			НаборЗаписей.Записать();			
			НаборЗаписейУдаленные.Записать();
			
		КонецЦикла;		
		
		
	КонецЕсли;
	
	Если ФОИспользоватьДопРеквизиты Тогда
		УправлениеСвойствами.ЗаписатьДопРеквизитыСведенияНабора(ЭтаФорма, Отказ, "ДопРеквизит", ТекущийОбъект.НаборСвойствОР);
	КонецЕсли;
	
	ТаблицаОценокРММодифицированность = Ложь;
	МодифицированностьНормативныхЗатратПоЗапчастям = Ложь;
	МодифицированностьЗапчастей = Ложь;
	МодифицированностьСоставаОР = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Объект.ЭтоГруппа Тогда
		УправлениеСвойствами.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, "НаборСвойствОР");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПанельДопИнформацииПриСменеСтраницы(Элементы.ПанельДопИнформации,Элементы.ПанельДопИнформации.ТекущаяСтраница);
	
	СтруктураПарНаработки = ПолучитьТаблицуПараметровНаработки(Объект.Ссылка, Объект.Родитель);
	
	СписокПараметровНаработки.Очистить();
	
	Для каждого Элем Из СтруктураПарНаработки Цикл
		НС = СписокПараметровНаработки.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	ЗаписатьИсходныеСтатусыНормативныхРемонтовИИзменитьЗаголовок();	
	
	// Заполнение признака использования характеристик в ТЧ "Запчасти".
	
	Для каждого СтрокаЗапчастей Из Объект.Запчасти Цикл 		
		СтрокаЗапчастей.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(СтрокаЗапчастей.Номенклатура); 
	КонецЦикла;
	
	ПараметрыОповещения = Новый Структура("ТиповойОбъект", Объект.Ссылка);
	Оповестить("ИЗМЕНЕН_ТИПОВОЙ_ОБЪЕКТ", ПараметрыОповещения, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельДопИнформацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПредСтраница = ТекущаяСтраница;

	Если ТекущаяСтраница = Элементы.СтраницаСостав Тогда
		
		Если НЕ МодифицированностьСоставаОР Тогда
			
			МассивОР = ПолучитьСоставОРДляТипового(Объект.Ссылка);
			СоставОР.Очистить();
			Для Каждого ОРВСоставе Из МассивОР Цикл
				НС = СоставОР.Добавить();
				НС.Ссылка = ОРВСоставе;
				НС.ЗаписанВБазу = Истина;
			КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПоказателиЭксплуатации Тогда
		
		ТекСтраницаПараметр = Элементы.СтраницыПоказателиЭксплуатации.ТекущаяСтраница;
		Если ТекСтраницаПараметр = Неопределено Тогда
			ТекСтраницаПараметр = Элементы.СтраницыПоказателиЭксплуатации.ПодчиненныеЭлементы[0];
		КонецЕсли;
		СтраницыПоказателиЭксплуатацииПриСменеСтраницы(Элементы.СтраницыПоказателиЭксплуатации, ТекСтраницаПараметр);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНормативыПланирования Тогда
		
		ТекСтраницаПараметр = Элементы.СтраницыНормативыПланирования.ТекущаяСтраница;
		Если ТекСтраницаПараметр = Неопределено Тогда
			ТекСтраницаПараметр = Элементы.СтраницыНормативыПланирования.ПодчиненныеЭлементы[0];
		КонецЕсли;
		СтраницыНормативыПланированияПриСменеСтраницы(Элементы.СтраницыНормативыПланирования, ТекСтраницаПараметр);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыНормативыПланированияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаОценкаРМ Тогда
		
		Если НЕ ТаблицаОценокРММодифицированность Тогда
			МассивВозврата = ПрочитатьОценкиРМ(Объект.Ссылка);
			РСНЗТаблицаОценокРМ.Очистить();
			Для каждого Элем Из МассивВозврата Цикл
				
				НС = РСНЗТаблицаОценокРМ.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
				
			КонецЦикла;
			
			ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаФиксированныеРемонтныеЦиклы Тогда
		
		// Цепочки
		Если НЕ МодифицированностьРемЦиклов Тогда
			ОбновитьФиксированныеРемонтныеЦиклы(Объект, ТабличноеПолеРемонтныеЦиклыОборудования);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВизуализацияРемонтногоЦикла Тогда
		
		Если МодифицированностьНормРемонтов Или МодифицированностьЗамещаемыхРемонтов Или  МодифицированностьПредшествующихРемонтов Тогда
			ТекстВопроса = НСтр("ru = 'Необходимо записать типовой объект ремонта. Продолжить?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросОЗаписиПриСменеСтраницы", ЭтотОбъект, Новый Структура("ТекущаяСтраница", ТекущаяСтраница)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
						
			Элементы.Перерасчитать.Доступность 	= Ложь;
			Элементы.Построить.Доступность 		= Ложь;
			Элементы.Настройки.Доступность 		= Ложь; 			
			
			ВРНачалоЦикла = Неопределено;
			ПлановыйГрафикРаботы = Неопределено;
			торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
			ОчиститьПолеТабличногоДокумента();
			Элементы.Декорация1.Заголовок		= НСтр("ru = 'Всего: '");			
			Возврат;
		КонецЕсли;
			
				
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВидыРемонтаЗаполненные = ЗаполнитьВидыРемонтаНаСервере();
			МассивРемонтов = Новый Массив;
			Для каждого Ремонт Из ЗапланированныеРемонты Цикл
				МассивРемонтов.Добавить(Ремонт);	
			КонецЦикла;	
			Для каждого РемонтТекущий из МассивРемонтов Цикл
				Если Объект.НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", РемонтТекущий.ВидРемонтныхРабот)).Количество() = 0 Тогда	
					ЗапланированныеРемонты.Удалить(ЗапланированныеРемонты.Индекс(РемонтТекущий));	
				КонецЕсли;
			КонецЦикла;
			Если ЗапланированныеРемонты.Количество() = 0 Тогда
				Для каждого РемонтТекущий из ВидыРемонтаЗаполненные Цикл
					Если ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", РемонтТекущий)).Количество() = 0 Тогда
						НС = ЗапланированныеРемонты.Добавить();
						НС.ВидРемонтныхРабот = РемонтТекущий.Значение;
						НС.Цвет = Новый Цвет(255, 255, 255);
						НС.ЦветТекста = Новый Цвет(0, 0, 0);
						НС.Выбран = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	ПредСтраница = ТекущаяСтраница;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПоказателиЭксплуатацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаКонтролируемыеПоказатели Тогда
		
		Если НЕ МодифицированностьИзмеряемыхПоказателей Тогда
			ОбновитьИзмеряемыеПоказатели(Объект, СписокИзмеряемыхПоказателей);
		КонецЕсли;
		
		Если НЕ МодифицированностьПараметровОповещенияОСостоянииОР Тогда
			МассивСтруктурПараметровОповещения = ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(Объект.Ссылка, Объект.Родитель);
			ПараметрыОповещенияПоСостояниямОР.Очистить();
			Для Каждого ЭлементМассива Из МассивСтруктурПараметровОповещения Цикл
				
				ЗаполнитьЗначенияСвойств(ПараметрыОповещенияПоСостояниямОР.Добавить(),ЭлементМассива);
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНаработка Тогда
		
		Если Не МодифицированностьПараметровНаработки Тогда
			
			СтруктураВозврата = ПолучитьТаблицуПараметровНаработки(Объект.Ссылка, Объект.Родитель);
			
			СписокПараметровНаработки.Очистить();
			
			Для каждого Элем Из СтруктураВозврата Цикл
				НС = СписокПараметровНаработки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не МодифицированностьМаксЗначНаработки Тогда
			
			СтруктураВозврата = ОбновитьМаксимальныеЗначенияПоказателейНаработки(Объект.Ссылка);
			
			ТабМаксимальныхЗначенийНаработки.Очистить();
			Для каждого Элем Из СтруктураВозврата Цикл
				НС = ТабМаксимальныхЗначенийНаработки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	ПредСтраница = ТекущаяСтраница;
КонецПроцедуры


&НаКлиенте
Процедура ВРНачалоЦиклаПриИзменении(Элемент)
	Если НЕ ВРНачалоЦикла = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") И НЕ ПлановыйГрафикРаботы = ПредопределенноеЗначение("Справочник.Календари.ПустаяСсылка") Тогда
		Элементы.Перерасчитать.Доступность 	= Истина;
		Элементы.Построить.Доступность 		= Истина;
		Элементы.Настройки.Доступность 		= Истина;
	Иначе 
		Элементы.Перерасчитать.Доступность 	= Ложь;
		Элементы.Построить.Доступность 		= Ложь;
		Элементы.Настройки.Доступность 		= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПлановыйГрафикРаботыПриИзменении(Элемент)
	Если НЕ ВРНачалоЦикла = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") И НЕ ПлановыйГрафикРаботы = ПредопределенноеЗначение("Справочник.Календари.ПустаяСсылка") Тогда
		Элементы.Перерасчитать.Доступность 	= Истина;
		Элементы.Построить.Доступность 		= Истина;
		Элементы.Настройки.Доступность 		= Истина;
	Иначе 
		Элементы.Перерасчитать.Доступность 	= Ложь;
		Элементы.Построить.Доступность 		= Ложь;
		Элементы.Настройки.Доступность 		= Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВР = ПолучитьСписокВР(Объект.НормативныеРемонты);
	Если СписокВР.Количество() > 0 Тогда
		СписокЗначВР = Новый СписокЗначений;
		СписокЗначВР.ЗагрузитьЗначения(СписокВР);
		СписокЗначВР.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВРНачалоЦиклаНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Элемент", Элемент)), НСтр("ru = 'Выберите вид ремонта'"));
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нормативные ремонты отсутствуют!'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВРНачалоЦикла = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ВРНачалоЦиклаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМнемосхемыВыбор(Элемент)
	Если НЕ Элемент.ТекущийЭлемент = Неопределено Тогда
		Масс = СоответствиеИндексаИНомераКолонки.НайтиСтроки(Новый Структура("ТекЭлементИмя", Элемент.ТекущийЭлемент.Имя));
		Если Масс.Количество() = 0 Тогда
			Масс = СоответствиеИндексаИНомераКолонки.НайтиСтроки(Новый Структура("ТекЭлементИмя", Элемент.ТекущийЭлемент.КонецЭлемент.Имя));
			СтруктураНомерКолонкиСдвиг = Масс[0];
		Иначе
			СтруктураНомерКолонкиСдвиг = Масс[0];
		КонецЕсли;
		НомерКолонки = СтруктураНомерКолонкиСдвиг.НомерКолонки;
		СдвигСтрок = СтруктураНомерКолонкиСдвиг.СдвигСтрок;
		ИндексСтроки = 9 + КолонкиНаработки.Количество();
		Элементы.ПолеТД.ТекущаяОбласть = ПолеТД.Область(3+СдвигСтрок,НомерКолонки,6 + ИндексСтроки - 7+СдвигСтрок);
		ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТД;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНормативныеРемонты
&НаКлиенте
Процедура НормативныеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтатусДоВсехИзменений = СтатусыНормативныхРемонтовДоИзменений.НайтиСтроки(Новый Структура("ИсходныйНомерСтроки", Элемент.ТекущиеДанные.ИсходныйНомерСтроки));
	
	Элементы.НормативныеРемонтыСтатус.СписокВыбора.Очистить();
	Если СтатусДоВсехИзменений.Количество() = 0 Или СтатусДоВсехИзменений[0].Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке") Тогда
		Элементы.НормативныеРемонтыСтатус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке"));
	КонецЕсли;
	Элементы.НормативныеРемонтыСтатус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
	Элементы.НормативныеРемонтыСтатус.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Редактируется"));
	
	Если НоваяСтрока Тогда
		
		ТекСтрока = Элемент.ТекущиеДанные;
		ТекСтрока.ГрафикРемонтныхРабот = ПолучитьЗначениеГрафикаРемРаботНаСервере();
		ТекСтрока.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Хозспособ");
		ТекСтрока.СпособУчетаДатыОтсчета = ПредопределенноеЗначение("Перечисление.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот.ИспользоватьДатуВводаВЭксплуатацию");
		Попытка
			ТекСтрока.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке");
		Исключение
			ТекИдентификаторСтроки = Элемент.ТекущаяСтрока;
			УстановитьСтатусДляНовойСтрокиНормРемонтов(ТекИдентификаторСтроки);
		КонецПопытки;
		
	КонецЕсли;
	
	Если Копирование Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		текСтрока.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
	
	ТекущийСтатусНормативногоРемонта = Элемент.ТекущиеДанные.Статус;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьНормРемонтов = Истина;
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если НоваяСтрока Тогда
			НС = Объект.ПредшествующиеРемонты.Добавить();
			НС.ВидРемонта = ТекДанные.ВидРемонта;
			НС.ПредшествующийВидРемонта = ТекДанные.ВидРемонта;
			
			МодифицированностьПредшествующихРемонтов = Истина;
			
			Если ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ТекДанные.ВидРемонта)).Количество() = 0 Тогда
				НС = ЗапланированныеРемонты.Добавить();
				НС.ВидРемонтныхРабот = ТекДанные.ВидРемонта;
				НС.Цвет = Новый Цвет(255, 255, 255);
				НС.ЦветТекста = Новый Цвет(0, 0, 0);
				НС.Выбран = Истина;
			КонецЕсли;
			
		Иначе
			
			СтарыйВидРемонта = СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта;
			СтрокиЗапланированныхРемонтов = ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", СтарыйВидРемонта)); 
			Для каждого Строка из СтрокиЗапланированныхРемонтов Цикл
				Строка.ВидРемонтныхРабот = ТекДанные.ВидРемонта;
				Строка.Цвет = Новый Цвет(255, 255, 255);
				Строка.ЦветТекста = Новый Цвет(0, 0, 0);
				Строка.Выбран = Истина;
			КонецЦикла;
				
		КонецЕсли;
		
		НормативныеРемонтыПриАктивизацииСтроки(Элементы.НормативныеРемонты);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПослеУдаления(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПриАктивизацииСтроки(Элемент)
	
	Если не Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("ВидРемонта", Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта);
		Элементы.ПредшествующиеРемонты.ОтборСтрок = ПараметрыОтбора;
		Элементы.ЗамещаемыеРемонты.ОтборСтрок = ПараметрыОтбора;
		УстановитьДоступностьРедактированияНормативныхРемонтов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередУдалением(Элемент, Отказ)
	Если не Отказ Тогда
		УдалРемонт = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
		
		СтрокиДляУдаления = Объект.ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", УдалРемонт));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			Объект.ПредшествующиеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		СтрокиДляУдаления = Объект.ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ПредшествующийВидРемонта", УдалРемонт));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			Объект.ПредшествующиеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		СтрокиДляУдаления = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", УдалРемонт));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			Объект.ЗамещаемыеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		СтрокиДляУдаления = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ЗамещаемыйВидРемонта", УдалРемонт));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			Объект.ЗамещаемыеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
		
		МассивУдаляемыхСтрок = ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта));
		Для каждого Элем Из МассивУдаляемыхСтрок Цикл
			ЗапланированныеРемонты.Удалить(Элем);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
		
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		ТекстОшибки = ПроверитьЗаполнениеСтрокиНормативногоРемонта(ТекДанные);
		
		Если ТекстОшибки <> "" Тогда
			Отказ = Истина;
			НомерСтроки = Объект.НормативныеРемонты.Индекс(ТекДанные);
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "Объект.НормативныеРемонты["+НомерСтроки+"].ВидРемонта";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		
		Если Не Отказ И Не НоваяСтрока И СтруктураДанныхДоРедактирования[Элемент.Имя] <> Неопределено
			И СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта <> ТекДанные.ВидРемонта Тогда
			
			НайденныеСтроки = Объект.ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта));
			Для каждого СтрокаСоСтарымВР Из НайденныеСтроки Цикл			
				СтрокаСоСтарымВР.ВидРемонта = ТекДанные.ВидРемонта;			
			КонецЦикла;
			НайденныеСтроки = Объект.ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ПредшествующийВидРемонта", СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта));
			Для каждого СтрокаСоСтарымВР Из НайденныеСтроки Цикл			
				СтрокаСоСтарымВР.ПредшествующийВидРемонта = ТекДанные.ВидРемонта;			
			КонецЦикла;
			
			НайденныеСтроки = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта));
			Для каждого СтрокаСоСтарымВР Из НайденныеСтроки Цикл			
				СтрокаСоСтарымВР.ВидРемонта = ТекДанные.ВидРемонта;			
			КонецЦикла;
			НайденныеСтроки = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ЗамещаемыйВидРемонта", СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта));
			Для каждого СтрокаСоСтарымВР Из НайденныеСтроки Цикл			
				СтрокаСоСтарымВР.ЗамещаемыйВидРемонта = ТекДанные.ВидРемонта;			
			КонецЦикла;
			
			НормативныеРемонтыПриАктивизацииСтроки(Элемент);
		КонецЕсли;
		
	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыНормативныйРемонтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", Новый Структура("ОтборПоСтатусам", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует")), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыСтатусПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НормативныеРемонты.ТекущиеДанные;
	
	Если ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует") Тогда
		ТекстОшибки = ПроверитьЗаполнениеСтрокиНормативногоРемонта(ТекущиеДанные);
		
		Если ТекстОшибки <> "" Тогда
			НомерСтроки = Объект.НормативныеРемонты.Индекс(ТекущиеДанные);
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = НСтр("ru = 'Нельзя установить статус ""Действует"": '") + ТекстОшибки;
			СообщениеПользователю.Поле = "Объект.НормативныеРемонты["+НомерСтроки+"].ВидРемонта";
			СообщениеПользователю.Сообщить();
			
			ТекущиеДанные.Статус = ТекущийСтатусНормативногоРемонта;
		КонецЕсли;
	КонецЕсли;
	
	ТекущийСтатусНормативногоРемонта = ТекущиеДанные.Статус;
	МодифицированностьПредшествующихРемонтов = Истина;
	МодифицированностьНормРемонтов = Истина;
	УстановитьДоступностьРедактированияНормативныхРемонтов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРемонтныхРаботПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособВыполненияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособУчетаДатыОтсчетаПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьВПланированииПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриПланированииГрафикРаботОборудованияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПродолжительностьПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПростоиОборудованияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКоэффициентыРемонтныхОсобенностейПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыНеИспользоватьВПланированииДатуВводаВЭксплуатациюПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыРазрешитьСокращатьМежремонтныйПериодПриПланированииПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура НеУчитыватьПриПланированииГрафикРемонтныхРаботПриИзменении(Элемент)
 МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредшествующиеРемонты
&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		
		СписокОтбора.Добавить(Строка.ВидРемонта);
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	 
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан нормативный ремонт!'"));
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ПредшествующиеРемонты.ТекущиеДанные.ВидРемонта = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
	КонецЕсли;

	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		Если НЕ ЗначениеЗаполнено(ТекДанные.ПредшествующийВидРемонта) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите предшествующий вид ремонта.'");
		Иначе

		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "Объект.ПредшествующиеРемонты";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если не ОтменаРедактирования Тогда
		МодифицированностьПредшествующихРемонтов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПослеУдаления(Элемент)
	МодифицированностьПредшествующихРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	текДанные = Элементы.ПредшествующиеРемонты.ТекущиеДанные;
	
	Если текДанные.ПредшествующийВидРемонта = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	стрПоиска = Новый Структура("ВидРемонта, ПредшествующийВидРемонта", текДанные.ВидРемонта, ВыбранноеЗначение);
	НайС = Объект.ПредшествующиеРемонты.НайтиСтроки(стрПоиска);
	
	Если НайС.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = НСтр("ru = 'Вид ремонта уже добавлен в другой строке таблицы.'");
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = ТекстОшибки;
		СообщениеПользователю.Поле = "Объект.ПредшествующиеРемонты";
		СообщениеПользователю.Сообщить();		
	КонецЕсли;
	
	СписокОтбора = Новый СписокЗначений(); 	
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл		
		СписокОтбора.Добавить(Строка.ВидРемонта);		
	КонецЦикла; 
	
	НайденВНормативах = СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если НайденВНормативах = Неопределено тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено, СтрЗаменить(Нстр("ru = 'Вид ремонта %ВидРемонта% не найден в списке нормативных ремонтов!'"),
		"%ВидРемонта%", ВыбранноеЗначение),,НСтр("ru = 'Выбор вида ремонта...'"));		
	КонецЕсли; 	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗамещаемыеРемонты
&НаКлиенте
Процедура ЗамещаемыеРемонтыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан нормативный ремонт!'"));
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ЗамещаемыеРемонты.ТекущиеДанные.ВидРемонта = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если не ОтменаРедактирования Тогда
		МодифицированностьЗамещаемыхРемонтов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПослеУдаления(Элемент)
	МодифицированностьЗамещаемыхРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыЗамещаемыйВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		
		Если НЕ Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта = Строка.ВидРемонта Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		Если НЕ ЗначениеЗаполнено(ТекДанные.ЗамещаемыйВидРемонта) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите вид замещаемого ремонта.'");
		ИначеЕсли ТекДанные.ЗамещаемыйВидРемонта = ТекДанные.ВидРемонта Тогда
			ТекстОшибки = НСтр("ru = 'Нельзя в качестве замещаемого выбрать замещающий ремонт!'");
		ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.СпособЗамещения) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите способ замещения.'");
		Иначе
			Строки = Объект.ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта,ЗамещаемыйВидРемонта",ТекДанные.ВидРемонта,ТекДанные.ЗамещаемыйВидРемонта));
			Если Строки.Количество() > 1 Тогда
				ТекстОшибки = НСтр("ru = 'Вид ремонта уже добавлен в другой строке таблицы.'");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "Объект.ЗамещаемыеРемонты";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИзмеряемыхПоказателей
&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьИзмеряемыхПоказателей = Истина;
		ТекДанные = Элемент.ТекущиеДанные;

		Если НоваяСтрока Тогда
			МассивСтрок = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", ТекДанные.Показатель));
			Если МассивСтрок.Количество() > 1 Тогда
				Отказ = Истина;
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный показатель уже добавлен!'"), СтатусСообщения.Важное);
			Иначе
				Структура = ПолучитьЗначениеРеквизитов (ТекДанные.Показатель);
				Структура.Вставить("ОбъектРемонта", Объект.Ссылка);
				Структура.Вставить("Показатель"   , ТекДанные.Показатель);
	            ЗаполнитьСтрокуДанными(ТекДанные,ТекДанные.Показатель);
				ТекДанные.Доступность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДанные.Показатель, "ТипЗначения").СодержитТип(Тип("Число"));
				МодифицированностьИзмеряемыхПоказателей = Истина;
				СписокИзмеряемыхПоказателейПриАктивизацииСтроки(Элементы.СписокИзмеряемыхПоказателей);
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ <> Истина Тогда
			ТекДанные.ОбъектРемонта = Объект.Ссылка;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта") Тогда
		
		Если Не СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", ВыбранноеЗначение)).Количество() > 0 Тогда
			НС = СписокИзмеряемыхПоказателей.Добавить();
			ЗаполнитьСтрокуДанными(НС,ВыбранноеЗначение);
			МодифицированностьИзмеряемыхПоказателей = Истина;
			Модифицированность = Истина;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПослеУдаления(Элемент)
	МодифицированностьИзмеряемыхПоказателей = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		//ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("ТиповойОР,Показатель",Объект.Ссылка,Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные.Показатель);
		ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("Показатель",Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные.Показатель);
		Элементы.ПараметрыОповещенияПоСостояниямОР.ОтборСтрок = ОтборПараметровОповещений;
	Иначе
		//ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("ТиповойОР,Показатель",Объект.Ссылка,ПредопределенноеЗначение("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка"));
		ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("Показатель",ПредопределенноеЗначение("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка"));
		Элементы.ПараметрыОповещенияПоСостояниямОР.ОтборСтрок = ОтборПараметровОповещений;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейЗначенияКонтролируемыхПоказателейИзОРПриИзменении(Элемент)
	ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Структура = ПолучитьЗначениеРеквизитов (ТекДанные.Показатель);
	Структура.Вставить("ОбъектРемонта", Объект.Ссылка);
	Структура.Вставить("Показатель"   , ТекДанные.Показатель);
    ЗаполнитьСтрокуДанными(ТекДанные,ТекДанные.Показатель);
	МодифицированностьИзмеряемыхПоказателей = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) И ТекДанные.ОбъектРемонта <> Объект.Ссылка Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(Новый Структура("ТиповойОР,Показатель",Объект.Ссылка,Элемент.ТекущиеДанные.Показатель));
	Для Каждого СтрокаКУдалению Из МассивСтрок Цикл
		ПараметрыОповещенияПоСостояниямОР.Удалить(СтрокаКУдалению);
		МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДопустимыйМинимумПриИзменении(Элемент)
	МодифицированностьИзмеряемыхПоказателей = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		Если ТекДанные.Показатель = ПредопределенноеЗначение("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Укажите контролируемый показатель.'");
		Иначе
			СтрокиПоказателей = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("Показатель",ТекДанные.Показатель));
			Если СтрокиПоказателей.Количество() > 1 Тогда
				ТекстОшибки = НСтр("ru = 'Контролируемый показатель уже добавлен в другой строке.'");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "СписокИзмеряемыхПоказателей";
			СообщениеПользователю.Сообщить();
		КонецЕсли;
		Если ТекДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
			ТекстСообщения = "";
			Если ТипЗнч(ТекДанные.КритическийМинимум) = Тип("Число") 
				И ТипЗнч(ТекДанные.ДопустимыйМинимум) = Тип("Число") 
				И ТипЗнч(ТекДанные.ДопустимыйМаксимум) = Тип("Число") 
				И ТипЗнч(ТекДанные.КритическийМаксимум) = Тип("Число") Тогда
				Если ТекДанные.КритическийМинимум > ТекДанные.ДопустимыйМинимум Тогда
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'Критический минимум превышает допустимый минимум! '");
				КонецЕсли;
				Если ТекДанные.ДопустимыйМинимум > ТекДанные.ДопустимыйМаксимум Тогда
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'Допустимый минимум превышает допустимый максимум! '");
				КонецЕсли;
				Если ТекДанные.ДопустимыйМаксимум > ТекДанные.КритическийМаксимум Тогда
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'Допустимый максимум превышает критический максимум! '");
				КонецЕсли;
			КонецЕсли;
			Если ТекстСообщения <> "" Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = 'Попробуйте отредактировать границы допустимых значений!'");
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстСообщения;
				СообщениеПользователю.Поле = "СписокИзмеряемыхПоказателей";
				СообщениеПользователю.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНормативныеЗатратыПриТОиР
&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Элементы.Запчасти.ТекущиеДанные = Неопределено тогда
		отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.НормативныеЗатратыПриТОиР.ТекущиеДанные.Номенклатура = Элементы.Запчасти.ТекущиеДанные.Номенклатура;
		Элементы.НормативныеЗатратыПриТОиР.ТекущиеДанные.Характеристика = Элементы.Запчасти.ТекущиеДанные.Характеристика;
	КонецЕсли;
	
	Если Копирование Тогда
		ТекСтрока = Элемент.ТекущиеДанные;
		текСтрока.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
		
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекДанныеЗапчастей = Элементы.Запчасти.ТекущиеДанные;
	
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		Если ТекДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Укажите вид ремонта.'");
		Иначе
			Если ТекДанные.Количество = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Укажите количество номенклатуры при ТОиР.'");
			Иначе
				Если ТекДанныеЗапчастей<>Неопределено И ТекДанные.Количество > ТекДанныеЗапчастей.Количество Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Количество затрат при ТОиР (%1) больше, чем количество в составе объекта ремонта.'"),ТекДанные.Количество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			#Если НЕ ВебКлиент Тогда
				Отказ = Истина;
			#КонецЕсли
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "НормативныеЗатратыПриТОиР";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРПослеУдаления(Элемент)
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	текЗапчасть = Элементы.Запчасти.ТекущиеДанные;
	НайС = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(Новый Структура("ВидРемонта, Номенклатура, Характеристика", 
	ВыбранноеЗначение, текЗапчасть.Номенклатура, текЗапчасть.Характеристика));
	
	Если НайС.количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено, СтрЗаменить(Нстр("ru = 'Вид ремонта %ВидРемонта% уже включен в затраты.'"),
		"%ВидРемонта%", ВыбранноеЗначение),,НСтр("ru = 'Выбор вида ремонта...'"));
	КонецЕсли;
	
	
	СписокОтбора = Новый СписокЗначений(); 	
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл		
		СписокОтбора.Добавить(Строка.ВидРемонта);		
	КонецЦикла; 
	
	НайденВНормативах = СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если НайденВНормативах = Неопределено тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено, СтрЗаменить(Нстр("ru = 'Вид ремонта %ВидРемонта% не найден в списке нормативных ремонтов!'"),
		"%ВидРемонта%", ВыбранноеЗначение),,НСтр("ru = 'Выбор вида ремонта...'"));		
	КонецЕсли;
		
		
КонецПроцедуры

&НаКлиенте
Процедура НормативныеЗатратыПриТОиРВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		
		СписокОтбора.Добавить(Строка.ВидРемонта);
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапчасти
&НаКлиенте
Процедура ЗапчастиПередУдалением(Элемент, Отказ)
	УдалитьСвязанныеСтрокиПоЗапчастям(Элемент.ТекущиеДанные.Номенклатура, Элемент.ТекущиеДанные.Характеристика);
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		
		ТекущаяНоменклатура = ТекДанные.Номенклатура;
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика", 
			ТекущаяНоменклатура, ТекДанные.Характеристика);
		Элементы.НормативныеЗатратыПриТОиР.ОтборСтрок = СтруктураОтбора;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьЗапчастей = Истина;
		ТекДанные = Элементы.Запчасти.ТекущиеДанные;
		Если СтруктураДанныхДоРедактирования[Элемент.Имя] = Неопределено Тогда
			СтруктураОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика", ТекДанные.Номенклатура, ТекДанные.Характеристика);
			Элементы.НормативныеЗатратыПриТОиР.ОтборСтрок = СтруктураОтбора;
			Возврат;
		КонецЕсли;
		Если НЕ НоваяСтрока И ТекДанные <> Неопределено Тогда
			// Заменим номенклатуру в существующих строках нормативных затрат запчастей.
			МассивСтрок = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
			СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура, СтруктураДанныхДоРедактирования[Элемент.Имя].Характеристика));
			Для Каждого Эл Из МассивСтрок Цикл
				МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
				Эл.Номенклатура = ТекДанные.Номенклатура;
				Эл.Характеристика = ТекДанные.Характеристика;
			КонецЦикла;
			
		КонецЕсли;
		Если ТекДанные <> Неопределено и НоваяСтрока Или ТекДанные.Номенклатура <> СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура Тогда
			СтруктураОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика", ТекДанные.Номенклатура, ТекДанные.Характеристика);
			Элементы.НормативныеЗатратыПриТОиР.ОтборСтрок = СтруктураОтбора;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПослеУдаления(Элемент)
	
	МодифицированностьЗапчастей = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		Если ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Укажите номенклатуру.'");
		Иначе
			СтрокиНоменклатуры = Объект.Запчасти.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
				ТекДанные.Номенклатура, ТекДанные.Характеристика));
			Если СтрокиНоменклатуры.Количество() > 1 Тогда
				ТекстОшибки = НСтр("ru = 'Номенклатура уже добавлена в другой строке.'")
			ИначеЕсли ТекДанные.Количество = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Укажите количество номенклатуры.'");
			ИначеЕсли СтруктураДанныхДоРедактирования[Элемент.Имя] <> Неопределено Тогда

				
				МассивСтрок = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(
									?(НоваяСтрока, Новый Структура("Номенклатура, Характеристика",ТекДанные.Номенклатура, ТекДанные.Характеристика), 
												Новый Структура("Номенклатура, Характеристика", СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура, 
																								СтруктураДанныхДоРедактирования[Элемент.Имя].Характеристика)));
				
				МаксКол = 0;
				
				Для каждого Элем Из МассивСтрок Цикл
					Если Элем.Количество > МаксКол Тогда
						МаксКол = Элем.Количество;
						ВР = Элем.ВидРемонта;
					КонецЕсли;
				КонецЦикла;
				
				Если МаксКол > ТекДанные.Количество Тогда
					Если ЗначениеЗаполнено(ВР) Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Количество затрат при ТОиР (%1) для вида ремонта ""%2"" больше, чем количество в составе объекта ремонта.'"),МаксКол,ВР);
					Иначе
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Количество затрат при ТОиР (%1) больше, чем количество в составе объекта ремонта.'"),МаксКол);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			#Если НЕ ВебКлиент Тогда
				Отказ = Истина;
			#КонецЕсли
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "Объект.Запчасти";//["+Формат(ТекСтрока,"ЧН=")+"].Номенклатура";
			СообщениеПользователю.Сообщить();			
		КонецЕсли;
		
	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МодифицированностьЗапчастей = Истина;
	Модифицированность = Истина;
	Характеристика_пустаяСсылка = ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка");
		
	Если Объект.Запчасти.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", 
			ВыбранноеЗначение, Характеристика_пустаяСсылка)).Количество() = 0 Тогда
		
		НС = Объект.Запчасти.Добавить();
		НС.Номенклатура = ВыбранноеЗначение;
		НС.Количество = 1;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Запчасти.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОценокРМ
&НаКлиенте
Процедура ТаблицаОценокРМПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Если Не Отказ Тогда
		
		Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период",ТекСтрока.ВидРемонта,ТекСтрока.Сезон,ТекСтрока.Период));
		Если Строки.Количество() > 0 Тогда
			ТекВРРМ = ТекСтрока.ВидРемонта;
			ТекСезонРМ = ТекСтрока.Сезон;
			ТекПериодРМ = ТекСтрока.Период;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
		Если Не ТекДанные.ГруппаОбъектовРемонтов = Объект.Ссылка Тогда
			
			ТекДанные.ГруппаОбъектовРемонтов = Объект.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		
		Строки = ТаблицаОценокРМ.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов, ВидРемонта,Сезон,Период", ТекДанные.ГруппаОбъектовРемонтов, ТекДанные.ВидРемонта,ТекДанные.Сезон,ТекДанные.Период));
		Количество = 0;
		Если Строки.Количество() > 1 Тогда 
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Текущая строка оценок риск-менеджмента дублирует уже введенную!'"),СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		ТаблицаОценокРММодифицированность = Истина;
		Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
		
		Если НоваяСтрока Тогда
			ЗаполнитьЗначенияСвойств(РСНЗТаблицаОценокРМ.Добавить(),ТекДанные);
		Иначе
			Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период", ТекВРРМ, ТекСезонРМ, ТекПериодРМ));
			Если Строки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Строки[0],ТекДанные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период",ТекДанные.ВидРемонта,ТекДанные.Сезон,ТекДанные.Период));
	Если Строки.Количество() Тогда
		РСНЗТаблицаОценокРМ.Удалить(Строки[0]);
	КонецЕсли; 
	ТаблицаОценокРММодифицированность = Истина;
	Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		
		СписокОтбора.Добавить(Строка.ВидРемонта);
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		СписокОтбора.Добавить(Строка.ВидРемонта);
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		СписокОтбора.Добавить(Строка.ВидРемонта);
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из Объект.НормативныеРемонты Цикл
		СписокОтбора.Добавить(Строка.ВидРемонта);
	КонецЦикла;

	Если ЗначениеЗаполнено(ВыбранноеЗначение) И СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабличноеПолеРемонтныеЦиклыОборудования
&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриАктивизацииСтроки(Элемент)
	ТекСтрокаРемонтныеЦиклыОборудования = Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные;
	
	Если ТекСтрокаРемонтныеЦиклыОборудования = Неопределено Тогда
		ТабличноеПолеСоставРемонтногоЦикла.Очистить();			
	Иначе
		
		МассивРемонтов = ЗаполнитьПоследовательностьРемонтовНаСервере(ТекСтрокаРемонтныеЦиклыОборудования.ВидЦепочки);
		
		ТабличноеПолеСоставРемонтногоЦикла.Очистить();
		Для каждого Элем Из МассивРемонтов Цикл
			
			НС = ТабличноеПолеСоставРемонтногоЦикла.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияВидЦепочкиПриИзменении(Элемент)
	МасСтрок = ТабличноеПолеРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ВидЦепочки, ГруппаОбъектовРемонтов", Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки, Объект.Ссылка));
	Если МасСтрок.Количество() = 1 Тогда
		
		ДобавлятьЦепочку = ПроверитьПересеченияНаСервере(Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки);	
		Если НЕ ДобавлятьЦепочку Тогда
			Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки = ПредопределенноеЗначение("Справочник.торо_ЦепочкиРемонта.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Цепочка ""%1"" уже есть в списке фиксированных ремонтных циклов"),Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки));
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки = ПредопределенноеЗначение("Справочник.торо_ЦепочкиРемонта.ПустаяСсылка");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		МодифицированностьРемЦиклов = Истина;
		ТабличноеПолеРемонтныеЦиклыОборудованияПриАктивизацииСтроки(Элементы.ТабличноеПолеРемонтныеЦиклыОборудования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередУдалением(Элемент, Отказ)
	
	МодифицированностьРемЦиклов = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ГруппаОбъектовРемонтов = Объект.Ссылка;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставОР
&НаКлиенте
Процедура СоставОРОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивВыбранныхЗначений = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыДерево") Тогда
		Для каждого текОР из ВыбранноеЗначение.ПолучитьЭлементы() цикл
			МассивВыбранныхЗначений.Добавить(текОР.Объект);
		КонецЦикла;
	Иначе
		МассивВыбранныхЗначений = ВыбранноеЗначение;
	КонецЕсли;		

	Если МассивВыбранныхЗначений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если МассивВыбранныхЗначений.Количество() = 1 Тогда
		ТекТиповойОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(МассивВыбранныхЗначений[0],"ТиповойОР");
		МассивСтрок = СоставОР.НайтиСтроки(Новый Структура("Ссылка",МассивВыбранныхЗначений[0]));
		Если МассивСтрок.Количество() > 0 Тогда
			СтрокаОР = МассивСтрок[0];
		КонецЕсли;
		
		Если СтрокаОР = Неопределено И НЕ ЗначениеЗаполнено(ТекТиповойОР) Тогда
			НС = СоставОР.Добавить();
			НС.Ссылка = МассивВыбранныхЗначений[0];
		Иначе
			Если СтрокаОР = Неопределено Тогда
				Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Выбранный объект ремонта входит в состав типового объекта ремонта ""%1"". Перенести объект ремонта?'"),ТекТиповойОР);
					ПоказатьВопрос(Новый ОписаниеОповещения("СоставОРОбработкаВыбораЗавершение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение, СтрокаОР, ТекТиповойОР", МассивВыбранныхЗначений, СтрокаОР, ТекТиповойОР)), ТекстВопроса,РежимДиалогаВопрос.ДаНет);
                    Возврат;
				КонецЕсли;
			Иначе 
				Если СтрокаОР.ПометкаУдаления Тогда
					СтрокаОР.ПометкаУдаления = Ложь;
				Иначе
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранный объект ремонта уже входит в состав!'"));
					Возврат;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		ЕстьУжеСТиповым = Ложь;
		Для Каждого СсылкаНаОР Из МассивВыбранныхЗначений Цикл
			МассивСтрок = СоставОР.НайтиСтроки(Новый Структура("Ссылка",СсылкаНаОР));
			ТекТиповойОР = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СсылкаНаОР,"ТиповойОР");
			Если ЗначениеЗаполнено(ТекТиповойОР) И ТекТиповойОР <> Объект.Ссылка И МассивСтрок.Количество() = 0 Тогда
				ЕстьУжеСТиповым = Истина;
			КонецЕсли;
		КонецЦикла;
		Если ЕстьУжеСТиповым Тогда
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("СоставОРОбработкаВыбораЗавершение1", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", МассивВыбранныхЗначений)), НСтр("ru = 'Некоторые из выбранных объектов ремонта входят в состав другого типового объекта ремонта. Перенести такие объекты ремонта?'"),РежимДиалогаВопрос.ДаНетОтмена);
            Возврат;
		Иначе
			Для Каждого СсылкаНаОР ИЗ МассивВыбранныхЗначений Цикл
				МассивСтрок = СоставОР.НайтиСтроки(Новый Структура("Ссылка",СсылкаНаОР));
				Если МассивСтрок.Количество() = 0 Тогда
					НС = СоставОР.Добавить();
					НС.Ссылка = СсылкаНаОР;
				Иначе
					Если МассивСтрок[0].ПометкаУдаления Тогда
						МассивСтрок[0].ПометкаУдаления = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СоставОРОбработкаВыбораФрагмент1();
КонецПроцедуры

&НаКлиенте
Процедура СоставОРОбработкаВыбораЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    Иначе
        Переносить = Ответ = КодВозвратаДиалога.Да;
        Для Каждого СсылкаНаОР ИЗ ВыбранноеЗначение Цикл
            МассивСтрок = СоставОР.НайтиСтроки(Новый Структура("Ссылка",СсылкаНаОР));
            Если МассивСтрок.Количество() = 0 Тогда
                Если Переносить ИЛИ НЕ ЗначениеЗаполнено(торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(СсылкаНаОР,"ТиповойОР")) Тогда
                    НС = СоставОР.Добавить();
                    НС.Ссылка = СсылкаНаОР;
					нс = ПеремещенныеОР.Добавить();
					нс.Ссылка = СсылкаНаОР;
                КонецЕсли;
            Иначе 
                Если МассивСтрок[0].ПометкаУдаления Тогда
                    МассивСтрок[0].ПометкаУдаления = Ложь;
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
    
    СоставОРОбработкаВыбораФрагмент1();

КонецПроцедуры

&НаКлиенте
Процедура СоставОРОбработкаВыбораФрагмент1()
    
    СоставОРОбработкаВыбораФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СоставОРОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
    СтрокаОР = ДополнительныеПараметры.СтрокаОР;
    ТекТиповойОР = ДополнительныеПараметры.ТекТиповойОР;
    
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        НС = СоставОР.Добавить();
        НС.Ссылка = ВыбранноеЗначение[0];
        НС = ПеремещенныеОР.Добавить();
        НС.Ссылка = ВыбранноеЗначение[0];
    КонецЕсли;
    
    СоставОРОбработкаВыбораФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СоставОРОбработкаВыбораФрагмент()
    
    МодифицированностьСоставаОР = Истина;
    ЭтаФорма.Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СоставОРПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = Элементы.СоставОР.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.ЗаписанВБазу Тогда
			ТекДанные.ПометкаУдаления = Истина;
			МодифицированностьСоставаОР = Истина;
			ЭтаФорма.Модифицированность = Истина;
		Иначе
			СоставОР.Удалить(ТекДанные);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставОРПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ТекДанные = Элементы.СоставОР.ТекущиеДанные;
    Если ТекДанные <> Неопределено Тогда
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта",Новый Структура("Ключ",ТекДанные.Ссылка));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставОРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("СоставОРПередНачаломДобавленияЗавершение", ЭтотОбъект), НСтр("ru = 'Для добавления объектов ремонта в состав типового его необходимо записать. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СоставОРПередНачаломДобавленияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СоставОРПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат;
    КонецЕсли;
    
    СоставОРПередНачаломДобавленияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СоставОРПередНачаломДобавленияФрагмент()
    
    Перем ФормаВыбораОР;
    
    ФормаВыбораОР = ПолучитьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",,Элементы.СоставОР);
    ФормаВыбораОР.Элементы.СписокОбъектов.МножественныйВыбор = Истина;
    ФормаВыбораОР.Элементы.Дерево.МножественныйВыбор = Истина;
    ФормаВыбораОР.Открыть();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОповещенияПоСостояниямОР
&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПослеУдаления(Элемент)
		МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Элемент.ТекущиеДанные.ТиповойОР = Объект.Ссылка;
			Элемент.ТекущиеДанные.Показатель = ТекДанные.Показатель;
			Элемент.ТекущиеДанные.ID = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		Если ТекДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Укажите вид сравнения.'");
		Иначе
			Если (ТекДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.ВИнтервале")
				ИЛИ ТекДанные.ВидСравнения = ПредопределенноеЗначение("Перечисление.торо_ВидыСравнения.НеВИнтервале"))
				И (НЕ ЗначениеЗаполнено(ТекДанные.ВариантЗначения) ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ВариантЗначения1)) Тогда
				ТекстОшибки = НСтр("ru = 'Укажите виды значения.'");
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.ВариантЗначения) Тогда
				ТекстОшибки = НСтр("ru = 'Укажите вид значения.'");				
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "ПараметрыОповещенияПоСостояниямОР";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите контролируемый показатель в списке показателей.'"));
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПараметровНаработки
&НаКлиенте
Процедура СписокПараметровНаработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и НЕ Копирование Тогда 
		
		Элемент.ТекущиеДанные.Период = ТекущаяДата();
		
		Если НЕ Объект.ЭтоГруппа Тогда
			
			Элемент.ТекущиеДанные.КоэффициентИспользованияОборудования = 1;
			Элемент.ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		
		Элемент.ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Период) Тогда
			Элемент.ТекущиеДанные.Период = ТекущаяДата();
		КонецЕсли;
		
		МодифицированностьПараметровНаработки = Истина;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПослеУдаления(Элемент)
	МодифицированностьПараметровНаработки = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		
		Если НЕ Объект.ЭтоГруппа Тогда 
			// проверка
			Если НЕ ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
				ТекстОшибки = НСтр("ru = 'Укажите показатель наработки.'");
			Иначе
				
				Строки = СписокПараметровНаработки.НайтиСтроки(Новый Структура("Показатель",ТекДанные.Показатель));
				
				Если Строки.Количество() > 1 Тогда
					ТекстОшибки = НСтр("ru = 'Такой показатель плановой наработки уже задан в другой строке таблицы.'");
				ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.ПродолжительностьПериодаПлановойНаработки) ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ПериодПлановойНаработки) Тогда
					ТекстОшибки = НСтр("ru = 'Укажите период плановой наработки.'");
				ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.ПлановаяНаработка) Тогда
					ТекстОшибки = НСтр("ru = 'Укажите значение плановой наработки.'");
				КонецЕсли;
			КонецЕсли;
			
			Если ТекстОшибки <> "" Тогда
				#Если НЕ ВебКлиент Тогда
					Отказ = Истина;
				#КонецЕсли
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = ТекстОшибки;
				СообщениеПользователю.Поле = "СписокПараметровНаработки";
				СообщениеПользователю.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередУдалением(Элемент, Отказ)
	
	ВыбранныеСтроки = Элемент.ВыделенныеСтроки;
	Для каждого ИдентСтроки из ВыбранныеСтроки цикл
		
		текСтрока = СписокПараметровНаработки.НайтиПоИдентификатору(ИдентСтроки);
		Если текСтрока.ОбъектРемонта <> Объект.Ссылка Тогда
			Отказ = Истина;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя удалять унаследованные параметры наработки!'"));
		Иначе 
			УдалитьЗависимыеСтрокиИзТабМаксимальныхЗначенийНаработки(текСтрока.Показатель);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	старыйПоказатель = Элементы.СписокПараметровНаработки.ТекущиеДанные.Показатель;
	УстановитьОтборВТабМаксимальныхЗначенийНаработки(ВыбранноеЗначение);
	Если старыйПоказатель = ВыбранноеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьЗависимыеСтрокиИзТабМаксимальныхЗначенийНаработки(старыйПоказатель);
		 
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда

		Если ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
			Элементы.ТабМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель",ТекДанные.Показатель);
		Иначе
			Элементы.ТабМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель","---------");
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабМаксимальныхЗначенийНаработки
&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		МодифицированностьМаксЗначНаработки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивПараметровНаработки = Новый Массив;
	Для Каждого Строка Из СписокПараметровНаработки Цикл
		МассивПараметровНаработки.Добавить(Строка.Показатель);
	КонецЦикла;
	ПараметрыФормы = Новый Структура("СписокПараметровНаработки",МассивПараметровНаработки);
	Форма = ПолучитьФорму("Справочник.ПараметрыВыработкиОС.ФормаВыбора",ПараметрыФормы,Элемент);
	ОткрытьФорму(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПоказательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокЗначенийПараметровНаработки = Новый СписокЗначений;
	Для Каждого Строка Из СписокПараметровНаработки Цикл
		СписокЗначенийПараметровНаработки.Добавить(Строка.Показатель);
	КонецЦикла;
	
	ДанныеВыбора = СписокЗначенийПараметровНаработки;
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	ТекСтрокаМаксимальногоЗначения = Элементы.ТабМаксимальныхЗначенийНаработки.ТекущиеДанные;

	Если Не ТекДанные = Неопределено 
		И Не ТекСтрокаМаксимальногоЗначения = Неопределено Тогда
		ТекСтрокаМаксимальногоЗначения.Показатель = ТекДанные.Показатель;
	КонецЕсли;
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		Если НЕ ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
			ТекстОшибки = НСтр("ru = 'Укажите показатель наработки.'");
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			Отказ = Истина;
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "ТабМаксимальныхЗначенийНаработки";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		МассивСтрок = ТабМаксимальныхЗначенийНаработки.НайтиСтроки(Новый Структура("Показатель", ТекДанные.Показатель));
		Если МассивСтрок.Количество() > 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для показателя наработки <%1> уже введено его максимальное значение или назначенный ресурс.'"),ТекДанные.Показатель);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран показатель наработки!'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПриИзменении(Элемент)
	
	МодифицированностьМаксЗначНаработки = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеРеквизиты

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриИзменении(Элемент)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриАктивизацииСтроки(Элемент)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриАктивизацииСтроки(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПередНачаломДобавления(ЭтаФорма, Объект.НаборСвойствОР, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередУдалением(Элемент, Отказ)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПередУдалением(ЭтаФорма, Объект.НаборСвойствОР, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовВыбор(ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодборЗапчастей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",        Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                 Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                   Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",          Истина);
	ПараметрыФормы.Вставить("Заголовок",                                НСтр("ru = 'Подбор запчастей'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                     ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                 Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				"ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",					Новый Массив(Элементы.ЗапчастиНоменклатура.ПараметрыВыбора[0].Значение));
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Построить(Команда)
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		НарисоватьМнемосхему(ОбщаяПродолжительность);	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтролируемыхПоказателей(Команда)
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из СписокИзмеряемыхПоказателей Цикл
		
		СписокОтбора.Добавить(Строка.Показатель);
		
	КонецЦикла;
	
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора, ЗакрыватьПриВыборе", "ОбъектыРемонта", СписокОтбора, Ложь);
	
	ФормаВыбораПоказателя = ПолучитьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормыСтруктура, Элементы.СписокИзмеряемыхПоказателей, Объект.Ссылка);
	
	ФормаВыбораПоказателя.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИсторию(Команда)
	Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка = НЕ Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка;
	ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыРемонтовИзНормативов(Команда)
	Для Каждого ТекСтрока Из Объект.НормативныеРемонты Цикл
		ВведенныеОценки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта, Период", ТекСтрока.ВидРемонта, НачалоМесяца(ТекущаяДата())));
		Если ВведенныеОценки.Количество() = 0 Тогда 
			НС = РСНЗТаблицаОценокРМ.Добавить();
			НС.Период = НачалоМесяца(ТекущаяДата());
			НС.ВидРемонта = ТекСтрока.ВидРемонта;
			НС.ГруппаОбъектовРемонтов = Объект.Ссылка;
			НС.Сезон = ПредопределенноеЗначение("Справочник.торо_Сезоны.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	
	ТаблицаОценокРММодифицированность = Истина;
	Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	МассивРемонтов = Новый Массив;
	
	Для каждого Стр из ЗапланированныеРемонты Цикл
		
		МассивРемонтов.Добавить(Новый Структура("ВидРемонтныхРабот, Выбран, Цвет, ЦветТекста, Шрифт", Стр.ВидРемонтныхРабот, Стр.Выбран, Стр.Цвет, Стр.ЦветТекста, Стр.Шрифт));
		
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыНастроек", ЭтаФорма);
	ОткрытьФорму("Справочник.торо_ТиповыеОР.Форма.ФормаВРВизуализация", Новый Структура("МассивРемонтов, Нормировать",МассивРемонтов, Нормировать),ЭтаФорма,ЭтаФорма,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Перерасчитать(Команда)
	
	СписокВидовРемонтов = ЗаполнитьВидыРемонтаНаСервере();
	
	СписокВидовРемонтов.ЗаполнитьПометки(Истина);
	
	СписокНеНужныхВР = Новый СписокЗначений;
	
	СписокВидовРемонтов.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ПерерасчитатьЗавершение",ЭтотОбъект,
												Новый Структура("СписокНеНужныхВР", СписокНеНужныхВР)),НСтр("ru = 'Выберите виды ремонтных работ'"));
	
	
	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если МожноПечататьВизуализацию Тогда
		ТабДок = ПечатьНаСервере();
		ТабДок.Показать(НСтр("ru = 'Структура ремонтного цикла'"));
	Иначе 
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно распечатать структуру ремонтного цикла, так как она еще не построена!'"), СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ОткрытьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
	Новый Структура("КлючНазначенияИспользования, ЗакрыватьПриВыборе", "торо_ТиповыеОР", Ложь),Элементы.СоставОР,Объект.Ссылка,ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОР(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ПередНачаломСоздатьОРЗавершение", ЭтотОбъект), НСтр("ru = 'Для добавления объектов ремонта в состав типового его необходимо записать. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	СоздатьОРФрагмент();
		
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОчиститьПолеТабличногоДокумента()
	
	ПолеТД.Очистить();

КонецПроцедуры	

&НаКлиенте
Процедура ВопросОЗаписиПриСменеСтраницы(Результат, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтраница = ДополнительныеПараметры.ТекущаяСтраница;
	ОбъектЗаписан = Ложь;
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Записать() Тогда
			ОбъектЗаписан = Истина;
			Элементы.СтраницыНормативыПланирования.ТекущаяСтраница = ТекущаяСтраница;
			
			
		КонецЕсли;
	КонецЕсли;
	Если Не ОбъектЗаписан Тогда
		Элементы.СтраницыНормативыПланирования.ТекущаяСтраница = ПредСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьЗапчастиИНормативныеЗатраты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫРАЗИТЬ(Таб.Ссылка КАК Справочник.торо_ОбъектыРемонта) КАК ОР
	               |ПОМЕСТИТЬ ВТ_СоставТОР
	               |ИЗ
	               |	&Табл КАК Таб
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТиповыеОРЗапчасти.Номенклатура КАК Номенклатура,
	               |	торо_ТиповыеОРЗапчасти.Количество КАК Количество,
	               |	торо_ТиповыеОРЗапчасти.Характеристика КАК Характеристика,
	               |	торо_ТиповыеОРЗапчасти.Качество КАК Качество,
	               |	ВТ_СоставТОР.ОР КАК ОР
	               |ПОМЕСТИТЬ ВТ_ЗапчастиТОР
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.Запчасти КАК торо_ТиповыеОРЗапчасти,
	               |	ВТ_СоставТОР КАК ВТ_СоставТОР
	               |ГДЕ
	               |	торо_ТиповыеОРЗапчасти.Ссылка = &ТОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	ОР,
	               |	Количество,
	               |	Качество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_Запчасти.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_Запчасти.Номенклатура КАК Номенклатура,
	               |	торо_Запчасти.Качество КАК Качество,
	               |	торо_Запчасти.Характеристика КАК Характеристика,
	               |	торо_Запчасти.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТ_ЗапчастиОР
	               |ИЗ
	               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоставТОР КАК ВТ_СоставТОР
	               |		ПО торо_Запчасти.ОбъектРемонта = ВТ_СоставТОР.ОР
	               |ГДЕ
	               |	торо_Запчасти.ТиповойОР = &ПустойТОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	ОбъектРемонта,
	               |	Качество,
	               |	Количество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Характеристика КАК Характеристика,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Номенклатура КАК Номенклатура,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.ВидРемонта КАК ВидРемонта,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Количество КАК Количество,
	               |	ВТ_СоставТОР.ОР КАК ОР
	               |ПОМЕСТИТЬ ВТ_НормЗатратыТОР
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.НормативныеЗатратыПриТОиР КАК торо_ТиповыеОРНормативныеЗатратыПриТОиР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	               |		ПО (торо_ТиповыеОРНормативныеЗатратыПриТОиР.Ссылка = &ТОР)
	               |			И (торо_ТиповыеОРНормативныеРемонты.Ссылка = &ТОР)
	               |			И торо_ТиповыеОРНормативныеЗатратыПриТОиР.ВидРемонта = торо_ТиповыеОРНормативныеРемонты.ВидРемонта
	               |			И (торо_ТиповыеОРНормативныеРемонты.Статус = &СтатусДействует),
	               |	ВТ_СоставТОР КАК ВТ_СоставТОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Номенклатура,
	               |	Характеристика,
	               |	ОР,
	               |	ВидРемонта,
	               |	Количество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта КАК ВидРемонта,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика,
	               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТ_НормыОР
	               |ИЗ
	               |	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СоставТОР КАК ВТ_СоставТОР
	               |		ПО торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = ВТ_СоставТОР.ОР
	               |ГДЕ
	               |	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = &ПустойТОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Характеристика,
	               |	Номенклатура,
	               |	ВидРемонта,
	               |	Количество
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_ЗапчастиОР.ОбъектРемонта, ВТ_ЗапчастиТОР.ОР) КАК ОбъектРемонта,
	               |	ЕСТЬNULL(ВТ_ЗапчастиОР.Номенклатура, ВТ_ЗапчастиТОР.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ВТ_ЗапчастиОР.Характеристика, ВТ_ЗапчастиТОР.Характеристика) КАК Характеристика,
	               |	ЕСТЬNULL(ВТ_ЗапчастиОР.Качество, ВТ_ЗапчастиТОР.Качество) КАК Качество,
	               |	ЕСТЬNULL(ВТ_ЗапчастиОР.Количество, ВТ_ЗапчастиТОР.Количество) КАК Количество,
	               |	ВЫБОР
	               |		КОГДА ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЭтоТиповой,
	               |	ВЫБОР
	               |		КОГДА торо_ЗапчастиУдаленные.Номенклатура ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Удален
	               |ПОМЕСТИТЬ ВТ_ЗапчастиТОРиОР
	               |ИЗ
	               |	ВТ_ЗапчастиТОР КАК ВТ_ЗапчастиТОР
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЗапчастиОР КАК ВТ_ЗапчастиОР
	               |		ПО ВТ_ЗапчастиТОР.Номенклатура = ВТ_ЗапчастиОР.Номенклатура
	               |			И ВТ_ЗапчастиТОР.Характеристика = ВТ_ЗапчастиОР.Характеристика
	               |			И ВТ_ЗапчастиТОР.ОР = ВТ_ЗапчастиОР.ОбъектРемонта
	               |			И ВТ_ЗапчастиТОР.Качество = ВТ_ЗапчастиОР.Качество
	               |			И ВТ_ЗапчастиТОР.Количество = ВТ_ЗапчастиОР.Количество
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗапчастиУдаленные КАК торо_ЗапчастиУдаленные
	               |		ПО ВТ_ЗапчастиТОР.ОР = торо_ЗапчастиУдаленные.ОбъектРемонта
	               |			И ВТ_ЗапчастиТОР.Номенклатура = торо_ЗапчастиУдаленные.Номенклатура
	               |			И ВТ_ЗапчастиТОР.Характеристика = торо_ЗапчастиУдаленные.Характеристика
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ЗапчастиТОРиОР.ОбъектРемонта,
	               |	ВТ_ЗапчастиТОРиОР.Номенклатура,
	               |	ВТ_ЗапчастиТОРиОР.Характеристика,
	               |	ВТ_ЗапчастиТОРиОР.Качество,
	               |	ВТ_ЗапчастиТОРиОР.Количество,
	               |	ВТ_ЗапчастиТОРиОР.ЭтоТиповой,
	               |	ВТ_ЗапчастиТОРиОР.Удален
	               |ПОМЕСТИТЬ ВТ_Запачати_Промежуточная
	               |ИЗ
	               |	ВТ_ЗапчастиТОРиОР КАК ВТ_ЗапчастиТОРиОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Запачати_Промежуточная.ОбъектРемонта,
	               |	ВТ_Запачати_Промежуточная.Номенклатура,
	               |	ВТ_Запачати_Промежуточная.Характеристика,
	               |	СУММА(1) КАК КоличествоСтрок
	               |ПОМЕСТИТЬ ВТ_Запчасти_Дубли
	               |ИЗ
	               |	ВТ_Запачати_Промежуточная КАК ВТ_Запачати_Промежуточная
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_Запачати_Промежуточная.ОбъектРемонта,
	               |	ВТ_Запачати_Промежуточная.Номенклатура,
	               |	ВТ_Запачати_Промежуточная.Характеристика
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(1) > 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Запачати_Промежуточная.ОбъектРемонта,
	               |	ВТ_Запачати_Промежуточная.Номенклатура,
	               |	ВТ_Запачати_Промежуточная.Характеристика,
	               |	ВТ_Запачати_Промежуточная.Качество,
	               |	ВТ_Запачати_Промежуточная.Количество,
	               |	ВТ_Запачати_Промежуточная.ЭтоТиповой,
	               |	ВЫБОР
	               |		КОГДА ВТ_Запчасти_Дубли.ОбъектРемонта ЕСТЬ NULL 
	               |			ТОГДА ВТ_Запачати_Промежуточная.Удален
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Удален
	               |ПОМЕСТИТЬ ВТ_Запчасти_БезВР
	               |ИЗ
	               |	ВТ_Запачати_Промежуточная КАК ВТ_Запачати_Промежуточная
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запчасти_Дубли КАК ВТ_Запчасти_Дубли
	               |		ПО ВТ_Запачати_Промежуточная.ОбъектРемонта = ВТ_Запчасти_Дубли.ОбъектРемонта
	               |			И ВТ_Запачати_Промежуточная.Номенклатура = ВТ_Запчасти_Дубли.Номенклатура
	               |			И ВТ_Запачати_Промежуточная.Характеристика = ВТ_Запчасти_Дубли.Характеристика
	               |			И (ВТ_Запачати_Промежуточная.ЭтоТиповой)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_НормыОР.ОбъектРемонта, ВТ_НормЗатратыТОР.ОР) КАК ОбъектРемонта,
	               |	ЕСТЬNULL(ВТ_НормыОР.Номенклатура, ВТ_НормЗатратыТОР.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ВТ_НормыОР.ВидРемонта, ВТ_НормЗатратыТОР.ВидРемонта) КАК ВидРемонта,
	               |	ЕСТЬNULL(ВТ_НормыОР.Характеристика, ВТ_НормЗатратыТОР.Характеристика) КАК Характеристика,
	               |	ЕСТЬNULL(ВТ_НормыОР.Количество, ВТ_НормЗатратыТОР.Количество) КАК Количество,
	               |	ВЫБОР
	               |		КОГДА ВТ_НормЗатратыТОР.Номенклатура ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК ЭтоТиповой,
	               |	ВЫБОР
	               |		КОГДА торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Номенклатура ЕСТЬ NULL 
	               |			ТОГДА ЛОЖЬ
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Удален
	               |ПОМЕСТИТЬ ВТ_нормЗатратыТОРиОР
	               |ИЗ
	               |	ВТ_НормЗатратыТОР КАК ВТ_НормЗатратыТОР
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_НормыОР КАК ВТ_НормыОР
	               |		ПО ВТ_НормЗатратыТОР.Номенклатура = ВТ_НормыОР.Номенклатура
	               |			И ВТ_НормЗатратыТОР.Характеристика = ВТ_НормыОР.Характеристика
	               |			И ВТ_НормЗатратыТОР.ВидРемонта = ВТ_НормыОР.ВидРемонта
	               |			И ВТ_НормЗатратыТОР.ОР = ВТ_НормыОР.ОбъектРемонта
	               |			И ВТ_НормЗатратыТОР.Количество = ВТ_НормыОР.Количество
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные КАК торо_НормыЗапчастейНаОбъектыРемонтаУдаленные
	               |		ПО ВТ_НормЗатратыТОР.ОР = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта
	               |			И ВТ_НормЗатратыТОР.Номенклатура = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Номенклатура
	               |			И ВТ_НормЗатратыТОР.Характеристика = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Характеристика
	               |			И ВТ_НормЗатратыТОР.ВидРемонта = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ВидРемонта
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта,
	               |	Номенклатура,
	               |	Характеристика
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_нормЗатратыТОРиОР.ОбъектРемонта,
	               |	ВТ_нормЗатратыТОРиОР.Номенклатура,
	               |	ВТ_нормЗатратыТОРиОР.ВидРемонта,
	               |	ВТ_нормЗатратыТОРиОР.Характеристика,
	               |	СУММА(1) КАК КоличествоСтрок
	               |ПОМЕСТИТЬ ВТ_ДублиВР
	               |ИЗ
	               |	ВТ_нормЗатратыТОРиОР КАК ВТ_нормЗатратыТОРиОР
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТ_нормЗатратыТОРиОР.Номенклатура,
	               |	ВТ_нормЗатратыТОРиОР.ВидРемонта,
	               |	ВТ_нормЗатратыТОРиОР.ОбъектРемонта,
	               |	ВТ_нормЗатратыТОРиОР.Характеристика
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(1) > 1
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_нормЗатратыТОРиОР.ОбъектРемонта,
	               |	ВТ_нормЗатратыТОРиОР.Номенклатура,
	               |	ВТ_нормЗатратыТОРиОР.ВидРемонта,
	               |	ВТ_нормЗатратыТОРиОР.Характеристика,
	               |	ВТ_нормЗатратыТОРиОР.Количество,
	               |	ВТ_нормЗатратыТОРиОР.ЭтоТиповой,
	               |	ВЫБОР
	               |		КОГДА ВТ_ДублиВР.Номенклатура ЕСТЬ NULL 
	               |			ТОГДА ВТ_нормЗатратыТОРиОР.Удален
	               |		ИНАЧЕ ИСТИНА
	               |	КОНЕЦ КАК Удален
	               |ПОМЕСТИТЬ ВТ_ВР_Финальная
	               |ИЗ
	               |	ВТ_нормЗатратыТОРиОР КАК ВТ_нормЗатратыТОРиОР
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДублиВР КАК ВТ_ДублиВР
	               |		ПО ВТ_нормЗатратыТОРиОР.ОбъектРемонта = ВТ_ДублиВР.ОбъектРемонта
	               |			И ВТ_нормЗатратыТОРиОР.Номенклатура = ВТ_ДублиВР.Номенклатура
	               |			И ВТ_нормЗатратыТОРиОР.ВидРемонта = ВТ_ДублиВР.ВидРемонта
	               |			И ВТ_нормЗатратыТОРиОР.Характеристика = ВТ_ДублиВР.Характеристика
	               |			И (ВТ_нормЗатратыТОРиОР.ЭтоТиповой)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.ОбъектРемонта, ВТ_ВР_Финальная.ОбъектРемонта) КАК ОбъектРемонта,
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.Номенклатура, ВТ_ВР_Финальная.Номенклатура) КАК Номенклатура,
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.Характеристика, ВТ_ВР_Финальная.Характеристика) КАК Характеристика,
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.Качество, &ПустоеКачество) КАК Качество,
	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_Запчасти_БезВР.Количество, ВТ_ВР_Финальная.Количество)) КАК Количество,
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.ЭтоТиповой, ЛОЖЬ) КАК ЭтоТиповой,
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.Удален, ЛОЖЬ) КАК Удален,
	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_ВР_Финальная.Количество, 0)) КАК КоличествоДляПроверки
	               |ИЗ
	               |	ВТ_Запчасти_БезВР КАК ВТ_Запчасти_БезВР
	               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ВР_Финальная КАК ВТ_ВР_Финальная
	               |		ПО ВТ_Запчасти_БезВР.ОбъектРемонта = ВТ_ВР_Финальная.ОбъектРемонта
	               |			И ВТ_Запчасти_БезВР.Номенклатура = ВТ_ВР_Финальная.Номенклатура
	               |			И ВТ_Запчасти_БезВР.Характеристика = ВТ_ВР_Финальная.Характеристика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.Номенклатура, ВТ_ВР_Финальная.Номенклатура),
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.Характеристика, ВТ_ВР_Финальная.Характеристика),
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.Качество, &ПустоеКачество),
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.ЭтоТиповой, ЛОЖЬ),
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.Удален, ЛОЖЬ),
	               |	ЕСТЬNULL(ВТ_Запчасти_БезВР.ОбъектРемонта, ВТ_ВР_Финальная.ОбъектРемонта)
	               |ИТОГИ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВР_Финальная.ОбъектРемонта КАК ОбъектРемонта,
	               |	ВТ_ВР_Финальная.Номенклатура,
	               |	ВТ_ВР_Финальная.ВидРемонта,
	               |	ВТ_ВР_Финальная.Характеристика,
	               |	ВТ_ВР_Финальная.Количество,
	               |	ВТ_ВР_Финальная.ЭтоТиповой,
	               |	ВТ_ВР_Финальная.Удален
	               |ИЗ
	               |	ВТ_ВР_Финальная КАК ВТ_ВР_Финальная
	               |ИТОГИ ПО
	               |	ОбъектРемонта";
				   
	Запрос.УстановитьПараметр("Табл", СоставОР.Выгрузить(,"Ссылка, ПометкаУдаления, ЗаписанВБазу"));
	Запрос.УстановитьПараметр("ТОР", Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустойТОР", ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка"));
	Запрос.УстановитьПараметр("СтатусДействует", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
	Запрос.УстановитьПараметр("ПустоеКачество", Перечисления.ГрадацииКачества.ПустаяСсылка());
	
	Результат = Запрос.ВыполнитьПакет();
	
	струкВозврата = Новый Структура;
	струкВозврата.Вставить("Запчасти", Результат[12].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	струкВозврата.Вставить("НормативныеЗатраты", Результат[13].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	
	Возврат струкВозврата;
	
КонецФункции

&НаСервере
Функция ПолучитьПредшествующиеИлиНормативные(ИмяВторойКолонки)
	
	Если ИмяВторойКолонки = "ПредшествующийВидРемонта" Тогда
		ТЗПредшествующихИлиЗамещаемых = Объект.ПредшествующиеРемонты.Выгрузить();
		
		ТЗНормативных = Объект.НормативныеРемонты.Выгрузить();
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТЗПредшествующихИлиЗамещаемых.ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.%ВидРемонта
		|ПОМЕСТИТЬ ТЗПредшествующихИлиЗамещаемых 
		|ИЗ
		|	&ТЗПредшествующихИлиЗамещаемых КАК ТЗПредшествующихИлиЗамещаемых
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗНормативных.ВидРемонта,
		|	ТЗНормативных.Статус
		|ПОМЕСТИТЬ ТЗНормативных
		|ИЗ
		|	&ТЗНормативных КАК ТЗНормативных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗНормативных.ВидРемонта
		|ПОМЕСТИТЬ ДействующиеВР
		|ИЗ
		|	ТЗНормативных КАК ТЗНормативных
		|ГДЕ
		|	ТЗНормативных.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗПредшествующихИлиЗамещаемых.ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.%ВидРемонта
		|ИЗ
		|	ДействующиеВР КАК ДействующиеВР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗПредшествующихИлиЗамещаемых КАК ТЗПредшествующихИлиЗамещаемых
		|		ПО ДействующиеВР.ВидРемонта = ТЗПредшествующихИлиЗамещаемых.ВидРемонта
		|			И (ТЗПредшествующихИлиЗамещаемых.%ВидРемонта В
		|				(ВЫБРАТЬ
		|					ДействующиеВР.ВидРемонта
		|				ИЗ
		|					ДействующиеВР КАК ДействующиеВР))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидРемонта", ИмяВторойКолонки);
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТЗПредшествующихИлиЗамещаемых", ТЗПредшествующихИлиЗамещаемых);
		Запрос.УстановитьПараметр("ТЗНормативных", ТЗНормативных);
		Возврат Запрос.Выполнить().Выгрузить();		
	ИначеЕсли ИмяВторойКолонки = "ЗамещаемыйВидРемонта" Тогда
		ТЗПредшествующихИлиЗамещаемых = Объект.ЗамещаемыеРемонты.Выгрузить();
		
		ТЗНормативных = Объект.НормативныеРемонты.Выгрузить();
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	ТЗПредшествующихИлиЗамещаемых.ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.%ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.СпособЗамещения,
		|	ТЗПредшествующихИлиЗамещаемых.НачальнаяГраница,
		|	ТЗПредшествующихИлиЗамещаемых.КонечнаяГраница
		|ПОМЕСТИТЬ ТЗПредшествующихИлиЗамещаемых 
		|ИЗ
		|	&ТЗПредшествующихИлиЗамещаемых КАК ТЗПредшествующихИлиЗамещаемых
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗНормативных.ВидРемонта,
		|	ТЗНормативных.Статус
		|ПОМЕСТИТЬ ТЗНормативных
		|ИЗ
		|	&ТЗНормативных КАК ТЗНормативных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗНормативных.ВидРемонта
		|ПОМЕСТИТЬ ДействующиеВР
		|ИЗ
		|	ТЗНормативных КАК ТЗНормативных
		|ГДЕ
		|	ТЗНормативных.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗПредшествующихИлиЗамещаемых.ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.%ВидРемонта,
		|	ТЗПредшествующихИлиЗамещаемых.СпособЗамещения,
		|	ТЗПредшествующихИлиЗамещаемых.НачальнаяГраница,
		|	ТЗПредшествующихИлиЗамещаемых.КонечнаяГраница
		|ИЗ
		|	ДействующиеВР КАК ДействующиеВР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТЗПредшествующихИлиЗамещаемых КАК ТЗПредшествующихИлиЗамещаемых
		|		ПО ДействующиеВР.ВидРемонта = ТЗПредшествующихИлиЗамещаемых.ВидРемонта
		|			И (ТЗПредшествующихИлиЗамещаемых.%ВидРемонта В
		|				(ВЫБРАТЬ
		|					ДействующиеВР.ВидРемонта
		|				ИЗ
		|					ДействующиеВР КАК ДействующиеВР))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВидРемонта", ИмяВторойКолонки);
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("ТЗПредшествующихИлиЗамещаемых", ТЗПредшествующихИлиЗамещаемых);
		Запрос.УстановитьПараметр("ТЗНормативных", ТЗНормативных);
		Возврат Запрос.Выполнить().Выгрузить();		
	КонецЕсли;
	
	Если ТЗПредшествующихИлиЗамещаемых = Неопределено Тогда	
		Возврат ТЗПредшествующихИлиЗамещаемых;
	КонецЕсли;
	
КонецФункции

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,,, "НаборСвойствОР");
	УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Объект.НаборСвойствОР);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Функция ПолучитьОРиВРИзТиповогоОР2(ТиповойОР, ИмяТЧ, ИмяРегистра, тч)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК ОР
	               |ПОМЕСТИТЬ ВТ_ОРы
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.ТиповойОР = &ТиповойОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТОР.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ТОР
	               |ИЗ
	               |	&ТОР КАК ТОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ОРы.ОР КАК ОР,
	               |	ВТ_ТОР.ВидРемонта КАК ВидРемонта
	               |ПОМЕСТИТЬ ВТ_ОРыИВидыРабот
	               |ИЗ
	               |	ВТ_ОРы КАК ВТ_ОРы,
	               |	ВТ_ТОР КАК ВТ_ТОР
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОР,
	               |	ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВТ_ОРыИВидыРабот.ОР КАК ОбъектРемонта,
	               |	ВТ_ОРыИВидыРабот.ВидРемонта,
				   	|	(ВЫБОР КОГДА ДанныеРегистра.Приоритет ЕСТЬ NULL ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ) КАК Приоритет
	               |ИЗ
	               |	ВТ_ОРыИВидыРабот КАК ВТ_ОРыИВидыРабот
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений."+ ИмяРегистра +" КАК ДанныеРегистра
	               |		ПО ВТ_ОРыИВидыРабот.ОР = ДанныеРегистра.ОбъектРемонта
	               |			И ВТ_ОРыИВидыРабот.ВидРемонта = ДанныеРегистра.ВидРемонта
	               |			И (ДанныеРегистра.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("ТОР", тч.выгрузить(,"ВидРемонта"));

	Запрос.УстановитьПараметр("ТиповойОР", ТиповойОР);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтруктураВозврата.Добавить(Новый Структура("ОбъектРемонта, ВидРемонта, Приоритет", Выборка.ОбъектРемонта, Выборка.ВидРемонта, Выборка.Приоритет));
	КонецЦикла;
	Возврат СтруктураВозврата;	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеГрафикаРемРаботНаСервере()
	
	Возврат Константы.торо_ГрафикРемонтныхРабот.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитов(ИзмеряемыйПоказатель)
	СтруктураЗначенийПолей = Новый Структура();
	Для каждого Реквизит Из ИзмеряемыйПоказатель.Метаданные().Реквизиты Цикл
	
		СтруктураЗначенийПолей.Вставить(Реквизит.Имя, ИзмеряемыйПоказатель[Реквизит.Имя]);
	
	КонецЦикла;
 	Возврат СтруктураЗначенийПолей;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСтрокуДанными(Строка, ИзмеряемыйПоказатель)
	
	СтруктураЗначенийПолей = ПолучитьЗначениеРеквизитов(ИзмеряемыйПоказатель);
	СтруктураЗначенийПолей.Вставить("ОбъектРемонта", Объект.Ссылка);
	СтруктураЗначенийПолей.Вставить("Показатель"   , ИзмеряемыйПоказатель);
	Если ЗначениеЗаполнено(ИзмеряемыйПоказатель) Тогда
		СтруктураЗначенийПолей.Вставить("Доступность", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ИзмеряемыйПоказатель, "ТипЗначения").СодержитТип(Тип("Число")));
	Иначе
		СтруктураЗначенийПолей.Вставить("Доступность", Ложь);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Строка, СтруктураЗначенийПолей);
	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьМаксимальныеЗначенияПоказателейНаработки(ОбъектРемонта)
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
		|	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
		|	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
		|	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс
		|ИЗ
		|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
		|ГДЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		СтруктураВозврата = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураВозврата.Добавить(Новый Структура("ОбъектРемонта, Показатель, МаксимальноеЗначение, НазначенныйРесурс", 
			Выборка.ОбъектРемонта, Выборка.Показатель, Выборка.МаксимальноеЗначение, Выборка.НазначенныйРесурс));
		КонецЦикла;
		
		Возврат СтруктураВозврата;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИзмеряемыеПоказатели(Объект, СписокИзмеряемыхПоказателей)
	
	СтруктураКонтрПоказателей = ПолучитьИзмеряемыеПоказатели(Объект.Ссылка, Объект.Родитель);
	СписокИзмеряемыхПоказателей.Очистить();
	Для Каждого Элем Из СтруктураКонтрПоказателей Цикл
		НС = СписокИзмеряемыхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		НС.Доступность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НС.Показатель, "ТипЗначения").СодержитТип(Тип("Число"));
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИзмеряемыеПоказатели(ТиповойОР, Родитель)
	
	СтруктураВозврата = Новый Массив;
	
	Если ЗначениеЗаполнено(ТиповойОР) Тогда 
		ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(ТиповойОР);
	Иначе
		ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(Родитель);
	КонецЕсли;
	
	Если ТаблицаРодителей.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаРодителей.Родитель,
		|	ТаблицаРодителей.Уровень
		|ПОМЕСТИТЬ ТаблицаОР
		|ИЗ
		|	&ТаблицаРодителей КАК ТаблицаРодителей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта,
		|	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель КАК Показатель,
		|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.ДопустимыйМинимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум) КАК ДопустимыйМинимум,
		|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.ДопустимыйМаксимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум) КАК ДопустимыйМаксимум,
		|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.КритическийМаксимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум) КАК КритическийМаксимум,
		|	ЕСТЬNULL(торо_ИзмеряемыеПоказателиОбъектовРемонта1.КритическийМинимум, торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум) КАК КритическийМинимум,
		|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР,
		|	торо_ИзмеряемыеПоказателиОбъектовРемонта.ТочкаЗамера,
		|	ТаблицаОР.Уровень КАК Уровень
		|ПОМЕСТИТЬ ВТ_ВсеПоказатели
		|ИЗ
		|	ТаблицаОР КАК ТаблицаОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
		|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта1
		|			ПО торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = торо_ИзмеряемыеПоказателиОбъектовРемонта1.Ссылка
		|				И (НЕ торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР)
		|		ПО ТаблицаОР.Родитель = торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеПоказатели.Показатель КАК Показатель,
		|	МИНИМУМ(ВТ_ВсеПоказатели.Уровень) КАК Уровень
		|ПОМЕСТИТЬ ВТ_Приоритеты
		|ИЗ
		|	ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ВсеПоказатели.Показатель
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеПоказатели.ОбъектРемонта,
		|	ВТ_ВсеПоказатели.Показатель,
		|	ВТ_ВсеПоказатели.ДопустимыйМинимум,
		|	ВТ_ВсеПоказатели.ДопустимыйМаксимум,
		|	ВТ_ВсеПоказатели.КритическийМаксимум,
		|	ВТ_ВсеПоказатели.КритическийМинимум,
		|	ВТ_ВсеПоказатели.ЗначенияКонтролируемыхПоказателейИзОР,
		|	ВТ_ВсеПоказатели.ТочкаЗамера,
		|	ВТ_ВсеПоказатели.Уровень КАК Уровень
		|ИЗ
		|	ВТ_Приоритеты КАК ВТ_Приоритеты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсеПоказатели КАК ВТ_ВсеПоказатели
		|		ПО ВТ_Приоритеты.Показатель = ВТ_ВсеПоказатели.Показатель
		|			И ВТ_Приоритеты.Уровень = ВТ_ВсеПоказатели.Уровень
		|
		|УПОРЯДОЧИТЬ ПО
		|	Уровень УБЫВ";
		
		Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураСтроки = Новый Структура("ОбъектРемонта, Показатель,
				|ДопустимыйМинимум, ДопустимыйМаксимум, КритическийМинимум, КритическийМаксимум,
				|ЗначенияКонтролируемыхПоказателейИзОР, ТочкаЗамера",
				Выборка.ОбъектРемонта, Выборка.Показатель,
				Выборка.ДопустимыйМинимум, Выборка.ДопустимыйМаксимум, Выборка.КритическийМинимум, Выборка.КритическийМаксимум,
				Выборка.ЗначенияКонтролируемыхПоказателейИзОР, Выборка.ТочкаЗамера);
				
			Если НЕ ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
				СтруктураСтроки.ДопустимыйМаксимум = 0;
			КонецЕсли;
			Если НЕ ТипЗнч(СтруктураСтроки.КритическийМинимум) = Тип("Число") Тогда
				СтруктураСтроки.КритическийМинимум = 0;
			КонецЕсли;
			Если НЕ ТипЗнч(СтруктураСтроки.КритическийМаксимум) = Тип("Число") Тогда
				СтруктураСтроки.КритическийМаксимум = 0;
			КонецЕсли;
			Если НЕ ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
				СтруктураСтроки.ДопустимыйМаксимум = 0;
			КонецЕсли;
				
			СтруктураВозврата.Добавить(СтруктураСтроки);

		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(ТиповойОР, Родитель)
	
	Если ЗначениеЗаполнено(ТиповойОР) Тогда 
		ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(ТиповойОР);
	Иначе
		ТаблицаРодителей = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(Родитель);
	КонецЕсли;
	
	МассивВозврата = Новый Массив;
//	Если ЗначениеЗаполнено(ТиповойОР) Тогда
	Если ТаблицаРодителей.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.Родитель КАК ТОР,
		               |	Таб.Уровень КАК Уровень
		               |ПОМЕСТИТЬ ТабРодителей
		               |ИЗ
		               |	&ТабРодитлей КАК Таб
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ТОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Показатель КАК Показатель,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР КАК ТиповойОР,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения КАК ВариантЗначения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение КАК Значение,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.СобытиеВозникновенияОповещения КАК СобытиеВозникновенияОповещения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВидСравнения КАК ВидСравнения,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ID КАК ID,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.Значение1 КАК Значение1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения1 КАК ВариантЗначения1,
		               |	торо_ПараметрыОповещенияОСостоянииОборудования.ПараметрыВводаДефекта КАК ПараметрыВводаДефекта
		               |ИЗ
		               |	ТабРодителей КАК ТабРодителей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыОповещенияОСостоянииОборудования КАК торо_ПараметрыОповещенияОСостоянииОборудования
		               |		ПО ТабРодителей.ТОР = торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР";
		//Запрос.УстановитьПараметр("ТиповойОР",ТиповойОР);
		Запрос.УстановитьПараметр("ТабРодитлей", ТаблицаРодителей);
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивВозврата.Добавить(
				Новый Структура("Показатель,ТиповойОР,ВариантЗначения,Значение,СобытиеВозникновенияОповещения,ВидСравнения,ID,Значение1,ВариантЗначения1,ПараметрыВводаДефекта",
				Выборка.Показатель,Выборка.ТиповойОР,Выборка.ВариантЗначения,Выборка.Значение,Выборка.СобытиеВозникновенияОповещения,Выборка.ВидСравнения,Выборка.ID,Выборка.Значение1,Выборка.ВариантЗначения1,Выборка.ПараметрыВводаДефекта));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат МассивВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСоставОРДляТипового(Ссылка)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ОбъектыРемонта.Ссылка
		               |ИЗ
		               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |ГДЕ
		               |	торо_ОбъектыРемонта.ТиповойОР = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат = Запрос.Выполнить();
		
		Массив = Новый Массив;
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Массив.Добавить(Выборка.Ссылка);
			КонецЦикла;
		КонецЕсли;
		Возврат Массив;
	Иначе
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбновитьОценкиРМ(ОтображатьИсторию = Истина)
	
	Если ОтображатьИсторию Тогда
		ТаблицаОценокРМ.Загрузить(РСНЗТаблицаОценокРМ.Выгрузить());
	Иначе
		
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(Объект.Ссылка);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РМРемонтов.ВидРемонта,
		|	торо_РМРемонтов.ГруппаОбъектовРемонтов,
		|	торо_РМРемонтов.Период,
		|	торо_РМРемонтов.Сезон,
		|	торо_РМРемонтов.ВероятностьВыходаИзСтроя,
		|	торо_РМРемонтов.Ущерб
		|ПОМЕСТИТЬ РСНаборЗаписей
		|ИЗ
		|	&РСНаборЗаписей КАК торо_РМРемонтов
		|ГДЕ
		|	торо_РМРемонтов.Период <= &Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РМРемонтов.ВидРемонта,
		|	торо_РМРемонтов.ГруппаОбъектовРемонтов,
		|	МАКСИМУМ(торо_РМРемонтов.Период) КАК Период,
		|	торо_РМРемонтов.Сезон
		|ПОМЕСТИТЬ ДатыСреза
		|ИЗ
		|	РСНаборЗаписей КАК торо_РМРемонтов
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_РМРемонтов.ГруппаОбъектовРемонтов,
		|	торо_РМРемонтов.ВидРемонта,
		|	торо_РМРемонтов.Сезон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РСНаборЗаписей.ГруппаОбъектовРемонтов,
		|	РСНаборЗаписей.ВидРемонта,
		|	РСНаборЗаписей.Сезон,
		|	РСНаборЗаписей.Период,
		|	РСНаборЗаписей.ВероятностьВыходаИзСтроя,
		|	РСНаборЗаписей.Ущерб
		|ИЗ
		|	ДатыСреза КАК ДатыСреза
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РСНаборЗаписей КАК РСНаборЗаписей
		|		ПО ДатыСреза.ГруппаОбъектовРемонтов = РСНаборЗаписей.ГруппаОбъектовРемонтов
		|			И ДатыСреза.ВидРемонта = РСНаборЗаписей.ВидРемонта
		|			И ДатыСреза.Сезон = РСНаборЗаписей.Сезон
		|			И ДатыСреза.Период = РСНаборЗаписей.Период";
		
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Запрос.УстановитьПараметр("РСНаборЗаписей", РСНЗТаблицаОценокРМ.Выгрузить());
		
		Результат = Запрос.Выполнить();
		ТаблицаОценокРМ.Загрузить(Результат.Выгрузить());
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьОценкиРМ(ОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РМРемонтов.ВидРемонта,
	|	торо_РМРемонтов.ГруппаОбъектовРемонтов,
	|	торо_РМРемонтов.Период КАК Период,
	|	торо_РМРемонтов.Сезон,
	|	торо_РМРемонтов.ВероятностьВыходаИзСтроя,
	|	торо_РМРемонтов.Ущерб
	|ИЗ
	|	РегистрСведений.торо_РМРемонтов КАК торо_РМРемонтов
	|ГДЕ
	|	торо_РМРемонтов.ГруппаОбъектовРемонтов = &ГруппаОбъектовРемонтов
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("ГруппаОбъектовРемонтов", ОР);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСтруктур = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		СтруктураРМ = Новый Структура("ВидРемонта, ГруппаОбъектовРемонтов, Период, Сезон, ВероятностьВыходаИзСтроя, Ущерб, ТиповойОР");
		ЗаполнитьЗначенияСвойств(СтруктураРМ, Выборка);
		МассивСтруктур.Добавить(СтруктураРМ);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСвязанныеСтрокиПоЗапчастям(Запчасть, Характеристика)
	
	СтрокиНормативов = Объект.НормативныеЗатратыПриТОиР.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Запчасть, Характеристика));
	
	Для Каждого Стр Из СтрокиНормативов Цикл
		Объект.НормативныеЗатратыПриТОиР.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФиксированныеРемонтныеЦиклы(Объект, ТабличноеПолеРемонтныеЦиклыОборудования)
	
	МассивЦепочек = ПолучитьФиксированныеРемонтныеЦиклы(Объект.Ссылка);
	ТабличноеПолеРемонтныеЦиклыОборудования.Очистить();
	Для каждого Элем Из МассивЦепочек Цикл
		НС = ТабличноеПолеРемонтныеЦиклыОборудования.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФиксированныеРемонтныеЦиклы(ТиповойОР)
	
	МассивЦепочек = Новый Массив;
	
	Если ЗначениеЗаполнено(ТиповойОР) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РемонтныеЦиклыОборудования.ВидЦепочки,
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов,
		|	торо_РемонтныеЦиклыОборудования.НеУчитыватьПростоиОборудования
		|ИЗ
		|	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
		|ГДЕ
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов = &ГруппаОбъектовРемонтов";
		
		Запрос.УстановитьПараметр("ГруппаОбъектовРемонтов", ТиповойОР);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		МассивЦепочек = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			Структ = Новый Структура("ВидЦепочки, ГруппаОбъектовРемонтов, НеУчитыватьПростоиОборудования");
			ЗаполнитьЗначенияСвойств(Структ, Выборка);
			МассивЦепочек.Добавить(Структ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЦепочек;
	
КонецФункции

&НаСервере
Функция ПроверитьПересеченияНаСервере(ТекЦепочка)
	
	СтандартнаяОбработка = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	|ПОМЕСТИТЬ Ремонты
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	|ПОМЕСТИТЬ РемонтыНовые
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ремонты.ВидРемонта КАК ВидРемонтаСтарый,
	|	РемонтыНовые.ВидРемонта КАК ВидРемонтаНовый,
	|	Ремонты.Ссылка
	|ИЗ
	|	Ремонты КАК Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтыНовые КАК РемонтыНовые
	|		ПО Ремонты.ВидРемонта = РемонтыНовые.ВидРемонта";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	
	МассивЦепочек = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить().ВыгрузитьКолонку("ВидЦепочки");
	ИндексТекЦепочки = МассивЦепочек.Найти(ТекЦепочка);
	Если ИндексТекЦепочки <> Неопределено Тогда
		МассивЦепочек.Удалить(ИндексТекЦепочки);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивЦепочек);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	флДобавлятьЦепочку = Истина;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ТекЦепочка Тогда
			флДобавлятьЦепочку = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ флДобавлятьЦепочку Тогда
		СтандартнаяОбработка = Ложь;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Цепочку ""%1"" нельзя добавить в список фиксированных ремонтных циклов, так как она содержит виды ремонтов, входящие в другие выбранные цепочки'"),ТекЦепочка));
	КонецЕсли;
	
	МассивРемонтов = Объект.НормативныеРемонты.Выгрузить().ВыгрузитьКолонку("ВидРемонта");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|   торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта В (&МассивРемонтов)
	|	И торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("МассивРемонтов", МассивРемонтов);
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтандартнаяОбработка = Ложь;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вид ремонта ""%1"" из цепочки ""%2"" уже выбран в качестве нормативного ремонта!'"),Выборка.ВидРемонта,Выборка.Ссылка));
	КонецЦикла;
	
	Возврат СтандартнаяОбработка;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьПоследовательностьРемонтовНаСервере(Цепочка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НомерСтроки,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НормативныйРемонт,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособПланирования,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ГрафикРемонтныхРабот,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособВыполнения,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПродолжительность
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Цепочка);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	МассивРемонтов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Структ = Новый Структура("НомерСтроки, ВидРемонта, НормативныйРемонт, СпособПланирования, ГрафикРемонтныхРабот, СпособВыполнения, 
		|РазрешитьСокращатьМежремонтныйПериодПриПланировании, НеУчитыватьПриПланированииГрафикРаботыОборудования, НеУчитыватьПриПланированииГрафикРемонтныхРабот, НеУчитыватьПродолжительность");
		
		ЗаполнитьЗначенияСвойств(Структ, Выборка);
		
		МассивРемонтов.Добавить(Структ);
		
	КонецЦикла;
	
	Возврат МассивРемонтов;
		
КонецФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьЭлементовФормы()
	
	// функциональные опции
	ФОУчетЗапчастей 				= ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОУчетКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	ФОУчетЗамещающихРемонтов        = ПолучитьФункциональнуюОпцию("торо_УчетЗамещающихРемонтов");
	ФОУчетНаработкиОборудования     = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	ФОИспользоватьПланированиеПоЖесткимРемЦиклам 	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьПланированиеПоЖесткимРемЦиклам");
	ФОИспользоватьОценкиРМ							= ПолучитьФункциональнуюОпцию("торо_ИспользованиеОценокРМ");
	
	ВидимостьЭлемента = НЕ Объект.ЭтоГруппа;		
	Элементы.Нормативы.Видимость = ВидимостьЭлемента;	
	Элементы.СтраницаФиксированныеРемонтныеЦиклы.Видимость = ВидимостьЭлемента И ФОИспользоватьПланированиеПоЖесткимРемЦиклам;
	Элементы.СтраницаЗапчасти.Видимость = ФОУчетЗапчастей И ВидимостьЭлемента;
	Элементы.СтраницаОценкаРМ.Видимость = ВидимостьЭлемента И ФОИспользоватьОценкиРМ;
	Элементы.СтраницаВизуализацияРемонтногоЦикла.Видимость = ВидимостьЭлемента;
	Элементы.СтраницаСостав.Видимость = ВидимостьЭлемента;
	
	Элементы.СтраницаКонтролируемыеПоказатели.Видимость = ФОУчетКонтролируемыхПоказателей;
	Элементы.ГруппаЗамещаемые.Видимость 				= ФОУчетЗамещающихРемонтов;
	Элементы.СтраницаНаработка.Видимость				= ФОУчетНаработкиОборудования;
	
	Элементы.Изготовитель.Видимость = ВидимостьЭлемента;
	Элементы.Направление.Видимость = ВидимостьЭлемента;
	
	// Для групп типовых ОР можно вводить только список показателей наработки и их единицы измерения.
	Элементы.СписокПараметровНаработкиПериод.Видимость = Ложь;
	Элементы.СписокПараметровНаработкиПродолжительностьПериодаПлановойНаработки.Видимость = ВидимостьЭлемента;
	Элементы.СписокПараметровНаработкиПериодПлановойНаработки.Видимость = ВидимостьЭлемента;
	Элементы.СписокПараметровНаработкиПлановаяНаработка.Видимость = ВидимостьЭлемента;
	Элементы.СписокПараметровНаработкиКоэффициентИспользованияОборудования.Видимость = ВидимостьЭлемента;
	
	Элементы.ТабМаксимальныхЗначенийНаработки.Видимость = ВидимостьЭлемента;

КонецПроцедуры	

&НаКлиенте
Процедура НарисоватьМнемосхему(ОбщаяПродолжительность)
	
	торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
	Элементы.ПолеМнемосхемы.ТекущийЭлемент = Неопределено;
	
	КолСтрокСхемы = 0;
	
	Если Элементы.ПолеТД.Ширина < 20 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Размер окна слишком мал. Невозможно вывести таблицу!'"));
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		
		КоличествоРемонтов = Новый Соответствие;
		Для каждого Стр Из ТаблицаРемонтовВизуализация Цикл
		
			ЗначениеКлюча = КоличествоРемонтов.Получить(Стр.ВидРемонтныхРабот);
			Если ЗначениеКлюча = Неопределено Тогда
				КоличествоРемонтов.Вставить(Стр.ВидРемонтныхРабот, 1);
			Иначе
				КоличествоРемонтов.Вставить(Стр.ВидРемонтныхРабот, ЗначениеКлюча + 1);
			КонецЕсли;
		
		КонецЦикла; 
		
		ПоследняяСтрокаРемонта = ТаблицаРемонтовВизуализация[ТаблицаРемонтовВизуализация.Количество() - 1];
		РазностьДат = (ПоследняяСтрокаРемонта.ДатаНач - ПоследняяСтрокаРемонта.ДатаПредшествующегоТогожеВида) / 86400;
		Надпись1 = НСтр("ru = 'Всего:'");
		Для каждого Стр Из КоличествоРемонтов Цикл
			Надпись1 = Надпись1 + Символы.ПС + Стр.Ключ + " - " + Стр.Значение + НСтр("ru = ' шт.'");
		КонецЦикла;
		
		Надпись1 = Надпись1 + Символы.ПС + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Календарных дней: %1
			|Рабочих дней: %2'"),?(РазностьДат > 0,РазностьДат - 1, 0),ПоследняяСтрокаРемонта.ДниОтПредшествующего);
		
		МассивКолонокНаработки = КолонкиНаработки.НайтиСтроки(Новый Структура("ПредшествующийТогоЖеВида", Ложь));
		
		Для Каждого КолонкаНаработки из МассивКолонокНаработки Цикл
			ИмяКолонки = КолонкаНаработки.ИмяКолонки;	
			
			Надпись1 = Надпись1 + "
			|" + КолонкаНаработки.Показатель + ": " + ПоследняяСтрокаРемонта[ИмяКолонки];
		КонецЦикла;
		Элементы.Декорация1.Заголовок = Надпись1;
	КонецЕсли;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 100 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("НарисоватьМнемосхемуЗавершение", ЭтотОбъект),
					  НСтр("ru = 'Вывод схемы ремонтного цикла может занять продолжительное время. Вывести схему?'"), РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	НарисоватьМнемосхемуЗавершение(Неопределено, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура НарисоватьМнемосхемуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;

	Флаг = Ложь;
	ИндексЭлемента = Неопределено;
	НачалоСтроки = Неопределено;
	КонецСтроки = Неопределено;
	НаправлениеЭлемента = "Вправо";
	СоединятьЛинией = Истина;
	ШиринаПоля = Элементы.ПолеМнемосхемы.Ширина * 10 - 150;
	
	ИндексСтроки = 8 + КолонкиНаработки.Количество() + 1;
	флВсеНарисовано = Ложь;
	СдвигСтрокПоляТД = 0;
	КоличествоРемонтов = ТаблицаРемонтовВизуализация.Количество();
	ШиринаПоляТД = Элементы.ПолеТД.Ширина * 15 - 150;
	КоличествоКолонокПоляТД = Цел((ШиринаПоляТД - 50) / 50) - 1;
	ЭтоПерваяЧастьТаблицы = Истина;
	
	МаксЭлементовДляВебКлиента = 10; 
	
	Если КоличествоРемонтов + 1 > 16 Тогда
		КолвоКолонок = 16;
	Иначе
		КолвоКолонок = КоличествоРемонтов+1;
	КонецЕсли;
	

	Пока НЕ флВсеНарисовано Цикл
		
		Если КоличествоКолонокПоляТД = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Если КоличествоРемонтов + 1 > КоличествоКолонокПоляТД Тогда
			ЧертитьКолонок = КоличествоКолонокПоляТД;
			КоличествоРемонтов = КоличествоРемонтов - КоличествоКолонокПоляТД + 1;
		Иначе 
			ЧертитьКолонок = КоличествоРемонтов + 1;
			флВсеНарисовано = Истина;
		КонецЕсли;
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок + 1);
		ОбластьВывода.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД,3,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок + 1);
		ОбластьВывода.ШиринаКолонки = 8;
		
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД);
		ОбластьВывода.ШиринаКолонки = 20;
		ОбластьВывода.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Если НЕ ЭтоПерваяЧастьТаблицы Тогда
			ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД - 1, 2);
			ОбластьВывода.Текст = "Продолжение";
		КонецЕсли;
		ЭтоПерваяЧастьТаблицы = Ложь;
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Вид ремонта"; 
		ОбластьВывода = ПолеТД.Область(4 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Продолжительность (ч)"; 
		ОбластьВывода = ПолеТД.Область(5 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Тек. рабочие дни (от предшествующего)";
		ОбластьВывода = ПолеТД.Область(6 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Тек. календарные дни (от предшествующего)";
		ОбластьВывода = ПолеТД.Область(7 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Время работы (от предшествующего того же вида)";
		
		ДопИндекс = 0;
		Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
			
			ОбластьВывода = ПолеТД.Область(8 + ДопИндекс + СдвигСтрокПоляТД, 2);
			ОбластьВывода.Текст = КолонкаНаработки.Показатель.Наименование + " (" + ?(КолонкаНаработки.ПредшествующийТогоЖеВида, "от предшествующего того же вида", "от предшествующего") + ")"; 	 
			ДопИндекс = ДопИндекс + 1;
		КонецЦикла;
		
		ОбластьВывода = ПолеТД.Область(8 + ДопИндекс + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Рассчитан по наработке";
		
		СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
		
		
	КонецЦикла;
	
	СдвигСтрокПоляТД = 0;
	Номер = 1;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ДатаНачПервого = ТаблицаРемонтовВизуализация[0].ДатаНач;
	КонецЕсли;
	Для Каждого СтрокаРемонта Из ТаблицаРемонтовВизуализация Цикл
		Если Не ЗначениеЗаполнено(СтрокаРемонта.ВидРемонтныхРабот) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Да ИЛИ Ответ = Неопределено Тогда
			
			Если Нормировать Тогда
				Шаг = Окр((СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / ОбщаяПродолжительность * 40 / МинШаг);
				Если Шаг = 0 Тогда
					Шаг = 1;
				КонецЕсли;
			Иначе
				Шаг = 40;
			КонецЕсли;
			
			#Если ВебКлиент Тогда
			Если Не (Элементы.ПолеМнемосхемы.ТекущийЭлемент = Неопределено) И Номер = МаксЭлементовДляВебКлиента+?(СдвигСтрокПоляТД>0, 0, 1) Тогда
			#Иначе
			Если Не (Элементы.ПолеМнемосхемы.ТекущийЭлемент = Неопределено) И Элементы.ПолеМнемосхемы.ТекущийЭлемент.Лево + Шаг > ШиринаПоля Тогда
			#КонецЕсли
				КонецСтроки = Элементы.ПолеМнемосхемы.ТекущийЭлемент;
				Элементы.ПолеМнемосхемы.ТекущийЭлемент = НачалоСтроки;
				НаправлениеЭлемента = "Вниз";
				Шаг = 40;
				СоединятьЛинией = Ложь;
			КонецЕсли;
			
			НайденныеСтроки = СоответсвиеЦветов.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", СтрокаРемонта.ВидРемонтныхРабот));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаВидРемонта =  НайденныеСтроки[0];
                ЦветВР     = СтрокаВидРемонта.Цвет;
                ЦветТекста = СтрокаВидРемонта.ЦветТекста;
                Шрифт      = СтрокаВидРемонта.Шрифт; 
			Иначе
				ЦветВР     = Новый Цвет(255,255,255);
                ЦветТекста = Новый Цвет(0,0,0);
                Шрифт      = Новый Шрифт(); 
			КонецЕсли;
			
			СтруктураДопСвойств = Новый Структура("Наименование, Фигура, ЦветВР,ЦветТекста,Шрифт, Подсказка",
			ПолучитьКодДляВР(СтрокаРемонта.ВидРемонтныхРабот), ФигурыГрафическойСхемы.Блок, ЦветВР,ЦветТекста,Шрифт, "Дата начала: "+Строка(СтрокаРемонта.ДатаНач));
			
			ДобавитьЭлемент(Новый Картинка,ИндексЭлемента,НаправлениеЭлемента, СоединятьЛинией,Шаг, СтруктураДопСвойств);
			
			Если Элементы.ПолеМнемосхемы.ТекущийЭлемент = Неопределено Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Построить мнемосхему не удалось!'"));
				Прервать;
			КонецЕсли;
						
			НС = СоответствиеИндексаИНомераКолонки.Добавить();
			НС.ТекЭлементИмя = Элементы.ПолеМнемосхемы.ТекущийЭлемент.Имя;
			НС.НомерКолонки = Номер + 2;
			НС.СдвигСтрок = СдвигСтрокПоляТД;
			
			Если (НачалоСтроки = Неопределено Или НаправлениеЭлемента = "Вниз") Тогда
				
				Если НаправлениеЭлемента = "Вниз" Тогда 
					ТекЭлемент = ИндексЭлемента;
					НачалоСтроки = Элементы.ПолеМнемосхемы.ТекущийЭлемент;
					СтруктураЭлем = Новый Структура("КонецСтроки,ТекЭлемент",КонецСтроки,Элементы.ПолеМнемосхемы.ТекущийЭлемент);
					торо_РаботаСМнемосхемами.мнс_СоздатьЛинию(КонецСтроки.Имя,Элементы.ПолеМнемосхемы.ТекущийЭлемент.Имя, ПолеМнемосхемы);
					
					ОбновитьОтображениеДанных();
					
					КолСтрокСхемы = КолСтрокСхемы + 1;
					
				Иначе
					ДатаПервого = СтрокаРемонта.ДатаНач;
					НачалоСтроки = Элементы.ПолеМнемосхемы.ТекущийЭлемент;
				КонецЕсли;
				
				СоединятьЛинией = Истина;
				НаправлениеЭлемента = "Вправо";
			КонецЕсли;	
			
		КонецЕсли;
		
		Флаг = Истина;
		ДатаПоследнего = СтрокаРемонта.ДатаКон;
		
		
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода.Текст = ПолучитьКодДляВР(СтрокаРемонта.ВидРемонтныхРабот);
		
		ОбластьВывода2 = ПолеТД.Область(4 + СдвигСтрокПоляТД,Номер + 2);
		Продолжительность = Формат((СтрокаРемонта.Продолжительность) / 3600,"ЧДЦ=1"); 
		ОбластьВывода2.Текст = ?(СтрокаРемонта.НеУчитыватьПродолжительность,"(","") + Продолжительность + ?(СтрокаРемонта.НеУчитыватьПродолжительность,")","");   // продолжительность (часов)
		
		ОбластьВывода2 = ПолеТД.Область(5 + СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода2.Текст = СтрокаРемонта.Дни; 	// рабочих дней от предыдущего 
		
		ОбластьВывода2 = ПолеТД.Область(6 + СдвигСтрокПоляТД,Номер + 2);
		РазностьДат = (СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / 86400;
		ОбластьВывода2.Текст = ?(РазностьДат > 0,РазностьДат - 1, 0); 	// календарных дней от предыдущего
		
		ОбластьВывода2 = ПолеТД.Область(7 + СдвигСтрокПоляТД, Номер + 2);
		ОбластьВывода2.Текст = СтрокаРемонта.ДниОтПредшествующего;
		
		ДопИндекс = 0;
		Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
			ИмяКолонки = КолонкаНаработки.ИмяКолонки;	
			
			ОбластьВывода2 = ПолеТД.Область(8 + ДопИндекс + СдвигСтрокПоляТД,Номер + 2);
			ОбластьВывода2.Текст = СтрокаРемонта[ИмяКолонки]; 	// очередная наработка 
			ДопИндекс = ДопИндекс + 1;
		КонецЦикла;
		
		ОбластьВывода2 = ПолеТД.Область(8 + ДопИндекс + СдвигСтрокПоляТД, Номер + 2);
		ОбластьВывода2.Текст = ?(СтрокаРемонта.РассчитанПоПериодичности = Ложь, "v", "");
		
		Номер = Номер + 1;
		
		Если Не (Элементы.ПолеТД.ТекущаяОбласть = Неопределено) И (ОбластьВывода2.Лево + 2)*50 > ШиринаПоляТД Тогда 
			СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
			Номер = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	МожноПечататьВизуализацию = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКодДляВР(ВР)
	
	Возврат ВР.Код;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлемент(Картинка=Неопределено,ИндексЭлемента, НаправлениеЭлемента, СоединятьЛинией, Шаг = 40, СтруктураДопСвойств)
	
	Шаг = ?(Шаг = 0,1,Шаг);
	
	ТекЭлемент = Элементы.ПолеМнемосхемы.ТекущийЭлемент;
	
	Если ТекЭлемент <> Неопределено И ТекЭлемент.Имя = "Фоновый объект" Тогда
		ТекЭлемент = Неопределено;
	КонецЕсли;
	
	Если ТекЭлемент <> Неопределено И ТипЗнч(ТекЭлемент) <> Тип("ЭлементГрафическойСхемыДекорация") Тогда
		ТекЭлемент = Неопределено;
	КонецЕсли;
	
	Если ТекЭлемент = Неопределено Тогда
		
		Если ПолеМнемосхемы.ЭлементыГрафическойСхемы.Количество() = 0 Тогда
			
			торо_РаботаСМнемосхемами.мнс_СоздатьНовуюКарту(ПолеМнемосхемы,Картинка, СтруктураДопСвойств);
			
			ОбновитьОтображениеДанных();
			
			Элементы.ПолеМнемосхемы.ТекущийЭлемент = ПолеМнемосхемы.ЭлементыГрафическойСхемы[0];
			
			ИндексЭлемента = 0;
			
			Возврат;
			
		Иначе
			
			Инд = ПолеМнемосхемы.ЭлементыГрафическойСхемы.Количество();
			
			Пока Инд > 0 Цикл
				Если ТипЗнч(ПолеМнемосхемы.ЭлементыГрафическойСхемы[Инд-1]) = Тип("ЭлементГрафическойСхемыДекорация") 
					И ПолеМнемосхемы.ЭлементыГрафическойСхемы[Инд-1].Имя <> "Фоновый объект" Тогда
					ТекЭлемент = ПолеМнемосхемы.ЭлементыГрафическойСхемы[Инд-1];
					Прервать;
				Иначе
					Инд = Инд - 1;
				КонецЕсли;
			КонецЦикла;
			
			НомерДобавленногоЭлемента = неопределено;
			
			Если ТекЭлемент = Неопределено Тогда
				торо_РаботаСМнемосхемами.мнс_СоздатьПервыйЭлемент(ПолеМнемосхемы,Картинка, СтруктураДопСвойств);
				НомерДобавленногоЭлемента = ПолеМнемосхемы.ЭлементыГрафическойСхемы.Количество();
			Иначе
				торо_РаботаСМнемосхемами.мнс_СоздатьУзел(ТекЭлемент.Имя, ПолеМнемосхемы, НаправлениеЭлемента, СоединятьЛинией, ТолщинаСоединительнойЛинии, Шаг,Картинка,НомерДобавленногоЭлемента, СтруктураДопСвойств);
			КонецЕсли;
			
			ОбновитьОтображениеДанных();
			
			Элементы.ПолеМнемосхемы.ТекущийЭлемент = ПолеМнемосхемы.ЭлементыГрафическойСхемы[НомерДобавленногоЭлемента - 1];
			
			ИндексЭлемента = НомерДобавленногоЭлемента - 1;
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	НомерДобавленногоЭлемента = неопределено;
	
	торо_РаботаСМнемосхемами.мнс_СоздатьУзел(ТекЭлемент.Имя, ПолеМнемосхемы, НаправлениеЭлемента, СоединятьЛинией,1, Шаг,Картинка,НомерДобавленногоЭлемента, СтруктураДопСвойств);
	
	ОбновитьОтображениеДанных();
	
	Элементы.ПолеМнемосхемы.ТекущийЭлемент = ПолеМнемосхемы.ЭлементыГрафическойСхемы[НомерДобавленногоЭлемента - 1];
	
	ИндексЭлемента = НомерДобавленногоЭлемента - 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыНастроек(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапланированныеРемонты.Очистить();
	Для каждого Элем Из Результат.МассивРемонтов Цикл
		
		НС = ЗапланированныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		
	КонецЦикла;
	
	Нормировать = Результат.Нормировать;
	
	Если Результат.Пересчитать Тогда
		
		МожноПечататьВизуализацию = Ложь;
		
		ТаблицаРемонтовВизуализация.Очистить();
		
		Для каждого Стр Из ТаблицаРемонтов Цикл
			
			НС = ТаблицаРемонтовВизуализация.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Стр);
			
		КонецЦикла;
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
		РассчитатьПараметрыОтПредыдущего();
	Иначе
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СоответсвиеЦветов.Очистить();
	Для Каждого СтрокаРемонт Из ЗапланированныеРемонты Цикл
		Если Не СтрокаРемонт.Выбран Тогда
			Продолжить;
		КонецЕсли;
		НС = СоответсвиеЦветов.Добавить();
		НС.ВидРемонтныхРабот = СтрокаРемонт.ВидРемонтныхРабот;
		НС.Цвет = СтрокаРемонт.Цвет;
		НС.ЦветТекста = СтрокаРемонт.ЦветТекста;
		НС.Шрифт = СтрокаРемонт.Шрифт;
	КонецЦикла;
	
	Если ТаблицаРемонтов.Количество()>0 Тогда
		ПоследнийРемонт = ТаблицаРемонтов[ТаблицаРемонтов.Количество() - 1];
		ДатаПоследнего = ТаблицаРемонтов[0].ДатаНач;
		ОбщаяПродолжительность = ПоследнийРемонт.ДатаНач - ДатаПоследнего;
		
		Если ОбщаяПродолжительность = 0 Тогда
			ОбщаяПродолжительность = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчитатьЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	СписокНеНужныхВР = ДополнительныеПараметры.СписокНеНужныхВР;
	
	Если Список <> Неопределено Тогда
		
		Для Каждого ЭлементСписка Из Список Цикл
			
			Если НЕ ЭлементСписка.Пометка Тогда
				
				СписокНеНужныхВР.Добавить(ЭлементСписка.Значение);
				
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	РасчетВыполнен = ПерерасчитатьНаСервере(СписокНеНужныхВР);
	
	Если Не РасчетВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	НарисоватьМнемосхему(ОбщаяПродолжительность);

КонецПроцедуры

&НаСервере
Функция ЗаполнитьВидыРемонтаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_ТиповыеОРНормативныеРемонты.Ссылка КАК ОбъектРемонтныхРабот,
	               |	торо_ТиповыеОРНормативныеРемонты.ВидРемонта КАК ВидРемонтныхРабот,
	               |	торо_ТиповыеОРНормативныеРемонты.Ссылка КАК РемонтнаяГруппа,
	               |	&ГрафикРаботы КАК ПлановыйГрафикРаботы
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	               |ГДЕ
	               |	торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
	               |	И НЕ торо_ТиповыеОРНормативныеРемонты.НеУчаствуетВПланировании";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ГрафикРаботы", ПлановыйГрафикРаботы);
	
	ТаблицаОбъектыРемонта.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СписокВидовРемонтов = Новый СписокЗначений;
	
	Для каждого Строчка Из ТаблицаОбъектыРемонта Цикл
		
		СписокВидовРемонтов.Добавить(Строчка.ВидРемонтныхРабот);
		
	КонецЦикла;
	
	Возврат СписокВидовРемонтов;
	
КонецФункции

&НаСервере
Функция ПерерасчитатьНаСервере(СписокНеНужныхВР)
	
	ПолеТД.Очистить();
	ПолеТД.АвтоМасштаб = Истина;
	
	СоответствиеИндексаИНомераКолонки.Очистить();
	
	Для каждого ЭлемСписка Из СписокНеНужныхВР Цикл
		
		МассивСтрок = ТаблицаОбъектыРемонта.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", ЭлемСписка.Значение));
		
		Если МассивСтрок.Количество() Тогда
			ТаблицаОбъектыРемонта.Удалить(МассивСтрок[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПарНаработки = ПолучитьТаблицуПараметровНаработки(Объект.Ссылка, Объект.Родитель);
	ВчерашняяДата = НачалоДня(ТекущаяДатаСеанса()-24*3600);
	
	ТабПараметрыНаработкиОбъектовРемонта.Очистить();
	
	Для каждого Элем Из СтруктураПарНаработки Цикл
		НС = ТабПараметрыНаработкиОбъектовРемонта.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		Если НС.ОбъектРемонта = Объект.Ссылка Тогда
			НС.Период = ВчерашняяДата;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаПланРемонтов", Документы.торо_ПланГрафикРемонта.ПустаяСсылка().ПланРемонтов.ВыгрузитьКолонки());
	СтруктураДанных.Вставить("ТаблицаОбъектыРемонта", ТаблицаОбъектыРемонта.Выгрузить().Скопировать(,"ОбъектРемонтныхРабот,ВидРемонтныхРабот,ПлановыйГрафикРаботы,РемонтнаяГруппа"));
	СтруктураДанных.Вставить("ДатаПланирования", НачалоДня(ТекущаяДата()));
	СтруктураДанных.Вставить("ПериодичностьДетализации", Перечисления.Периодичность.Год);
	СтруктураДанных.Вставить("КоличествоПериодов", 1);
	СтруктураДанных.Вставить("ТабПараметрыНаработкиОбъектовРемонта", ТабПараметрыНаработкиОбъектовРемонта.Выгрузить());
	СтруктураДанных.Вставить("ВРНачалоЦикла", ВРНачалоЦикла);
	СтруктураДанных.Вставить("ВизуализацияТипОР", Истина);
	
	ТабНормативов = Новый ТаблицаЗначений;
	СтруктураДанных.Вставить("ТаблицаНормативов", ТабНормативов);
	
	// Для совместимости с расчетом ППР создаем пустую таблицу
	ТаблицаЦепочки = Новый ТаблицаЗначений;
	ТаблицаЦепочки.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаЦепочки.Колонки.Добавить("Цепочка",              Новый ОписаниеТипов("СправочникСсылка.торо_ЦепочкиРемонта"));
	
	СтруктураДанных.Вставить("ТаблицаЦепочки", ТаблицаЦепочки);
	
	ВыполнятьРасчет = ПроверкаПередРасчетом(СтруктураДанных["ДатаПланирования"], ТаблицаОбъектыРемонта.Выгрузить().Скопировать(, "ОбъектРемонтныхРабот, ВидРемонтныхРабот"), СтруктураДанных["ТабПараметрыНаработкиОбъектовРемонта"]);
	
	Если ВыполнятьРасчет Тогда
		
		СтруктураДанных.Вставить("ДатаОкончанияВизуализации", ДатаПланированияОкончание);

		ТабРемонтов = торо_РасчетППР.РасчетППР(Неопределено,,,СтруктураДанных);
		
		Если ТабРемонтов = Ложь или ТабРемонтов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось рассчитать ремонтный цикл, проверьте настройки планирования!'"));
			Возврат Ложь;
		Иначе
			ТаблицаРемонтов.Загрузить(ТабРемонтов);
		КонецЕсли;
		
		ТаблицаНормативов.Загрузить(СтруктураДанных.ТаблицаНормативов);
		
		ТаблицаРемонтов.Сортировать("ДатаНач");
		
		СтрокиНачало = ТаблицаРемонтов.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", ВРНачалоЦикла));
		Если СтрокиНачало.Количество() > 0 Тогда
			СтрНачало = СтрокиНачало[0];
			ИндексНачало = ТаблицаРемонтов.Индекс(СтрНачало);
			Пока ИндексНачало > 0 Цикл
				ТаблицаРемонтов.Удалить(0);
				ИндексНачало = ИндексНачало - 1;
			КонецЦикла;
		КонецЕсли;
		
		КоличествоРемонтов = ТаблицаРемонтов.Количество();
		Пока КоличествоРемонтов > 0 Цикл
			Если ТаблицаРемонтов[КоличествоРемонтов - 1].ВидРемонтныхРабот = ВРНачалоЦикла Тогда
				Прервать;
			Иначе
				ТаблицаРемонтов.Удалить(КоличествоРемонтов - 1);
				КоличествоРемонтов = КоличествоРемонтов - 1;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ТаблицаРемонтов.Количество() > 0 Тогда
			
			ЗапланРемонты = ТаблицаОбъектыРемонта.Выгрузить().Скопировать(,"ВидРемонтныхРабот");
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("Булево"));
			ОписаниеТиповБул = Новый ОписаниеТипов(Массив);
			ЗапланРемонты.Колонки.Добавить("Выбран",ОписаниеТиповБул);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Цвет"));
			ОписаниеТиповЦвет = Новый ОписаниеТипов(Массив);
			ЗапланРемонты.Колонки.Добавить("Цвет",ОписаниеТиповЦвет);
			ЗапланРемонты.ЗаполнитьЗначения(Истина,"Выбран");
			ЗапланРемонты.ЗаполнитьЗначения(Новый Цвет(255, 255, 255) ,"Цвет");
			
			Нормировать = Ложь;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось рассчитать ремонтный цикл, проверьте настройки планирования!'"));
			Возврат Ложь;
			
		КонецЕсли;
		
		
		
		
		ТаблицаРемонтовВизуализация.Загрузить(ТаблицаРемонтов.Выгрузить().Скопировать());
		РассчитатьПараметрыОтПредыдущего();
		
		Если ТаблицаРемонтов.Количество() > 0 Тогда
			ПоследнийРемонт = ТаблицаРемонтов[ТаблицаРемонтов.Количество() - 1];
			ДатаПоследнего = ТаблицаРемонтов[0].ДатаНач;
			ОбщаяПродолжительность = ПоследнийРемонт.ДатаНач - ДатаПоследнего;
			
			
			Если ОбщаяПродолжительность = 0 Тогда
				ОбщаяПродолжительность = 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция РассчитатьПараметрыОтПредыдущего()
	Номер = 1;
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ДатаНачПервого = ТаблицаРемонтовВизуализация[0].ДатаНач;
		ДатаПредшествующего = ДатаНачПервого;
	КонецЕсли;
		
	Для Каждого СтрРемонт Из ТаблицаРемонтовВизуализация Цикл
		СтрРемонт.ДатаПредшествующего = Мин(НачалоДня(ДатаПредшествующего),СтрРемонт.ДатаНач);
		ДатаПредшествующего = СтрРемонт.ДатаКон;
	КонецЦикла;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ПоследняяСтрокаРемонта = ТаблицаРемонтовВизуализация[ТаблицаРемонтовВизуализация.Количество() - 1];
		СтрокаДляПодвала = ТаблицаРемонтовВизуализация.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДляПодвала,ПоследняяСтрокаРемонта);
		СтрокаДляПодвала.Замещен = Ложь;
	КонецЕсли;
	
	МассивГрафиков = Новый Массив(1);
	МассивГрафиков[0] = ПлановыйГрафикРаботы;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	торо_РасчетППР.СоздатьВТРасписанияРаботыНаПериодСКопированиемПериода(МенеджерВТ,МассивГрафиков,ДатаНачПервого,ДатаПредшествующего,Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаРемонтов.ДатаНач,
	               |	ТаблицаРемонтов.ДатаКон,
	               |	ТаблицаРемонтов.ВидРемонтныхРабот,
	               |	ТаблицаРемонтов.Замещен,
	               |	ТаблицаРемонтов.ДатаПредшествующего,
	               |	ТаблицаРемонтов.РассчитанПоПериодичности
	               |ПОМЕСТИТЬ ТаблицаРемонтов
	               |ИЗ
	               |	&ТаблицаРемонтов КАК ТаблицаРемонтов
	               |ГДЕ
	               |	НЕ ТаблицаРемонтов.Замещен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаНормативов.ВидРемонтныхРабот,
	               |	ТаблицаНормативов.ПлановыйГрафикРаботы,
	               |	ТаблицаНормативов.НормативныйРемонт,
	               |	ТаблицаНормативов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаНормативов.Продолжительность,
	               |	ТаблицаНормативов.НеУчитыватьПродолжительность
	               |ПОМЕСТИТЬ ТаблицаНормативов
	               |ИЗ
	               |	&ТаблицаНормативов КАК ТаблицаНормативов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТРасписанияРаботы.ГрафикРаботы,
	               |	ВТРасписанияРаботы.ДатаГрафика,
	               |	РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяОкончания, ВТРасписанияРаботы.ВремяНачала, ЧАС) КАК ОсновноеЗначение
	               |ПОМЕСТИТЬ ТаблицаГрафиковСоВременем
	               |ИЗ
	               |	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРемонтов.ДатаНач,
	               |	ТаблицаРемонтов.ДатаКон,
	               |	ТаблицаРемонтов.ВидРемонтныхРабот,
	               |	ТаблицаРемонтов.Замещен,
	               |	ТаблицаРемонтов.ДатаПредшествующего,
	               |	ТаблицаРемонтов.РассчитанПоПериодичности,
	               |	ТаблицаНормативов.ПлановыйГрафикРаботы,
	               |	ТаблицаНормативов.НормативныйРемонт,
	               |	ТаблицаНормативов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаНормативов.НеУчитыватьПродолжительность,
	               |	ЕСТЬNULL(ТаблицаНормативов.Продолжительность, 0) КАК Продолжительность
	               |ПОМЕСТИТЬ ТаблицаСНормативами
	               |ИЗ
	               |	ТаблицаРемонтов КАК ТаблицаРемонтов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНормативов КАК ТаблицаНормативов
	               |		ПО ТаблицаРемонтов.ВидРемонтныхРабот = ТаблицаНормативов.ВидРемонтныхРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСНормативами.ДатаНач КАК ДатаНач,
	               |	ТаблицаСНормативами.ДатаКон,
	               |	ТаблицаСНормативами.ВидРемонтныхРабот,
	               |	ТаблицаСНормативами.Замещен,
	               |	ТаблицаСНормативами.ДатаПредшествующего КАК ДатаПредшествующего,
	               |	ТаблицаСНормативами.РассчитанПоПериодичности,
	               |	ТаблицаСНормативами.ПлановыйГрафикРаботы,
	               |	ТаблицаСНормативами.НормативныйРемонт,
	               |	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаСНормативами.НеУчитыватьПродолжительность,
	               |	ТаблицаСНормативами.Продолжительность,
	               |	СУММА(ЕСТЬNULL(ТаблицаГрафиковСоВременем.ОсновноеЗначение, 0)) КАК Часы,
	               |	СУММА(ВЫБОР
	               |			КОГДА ТаблицаГрафиковСоВременем.ОсновноеЗначение ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Дни,
	               |	0 КАК ФактическаяНаработка
	               |ПОМЕСТИТЬ ТаблицаРемонтыИНормативы
	               |ИЗ
	               |	ТаблицаСНормативами КАК ТаблицаСНормативами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГрафиковСоВременем КАК ТаблицаГрафиковСоВременем
	               |		ПО ТаблицаСНормативами.ПлановыйГрафикРаботы = ТаблицаГрафиковСоВременем.ГрафикРаботы
	               |			И ТаблицаСНормативами.ДатаПредшествующего < ТаблицаГрафиковСоВременем.ДатаГрафика
	               |			И ТаблицаСНормативами.ДатаНач > ТаблицаГрафиковСоВременем.ДатаГрафика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаСНормативами.Замещен,
	               |	ТаблицаСНормативами.ПлановыйГрафикРаботы,
	               |	ТаблицаСНормативами.ВидРемонтныхРабот,
	               |	ТаблицаСНормативами.ДатаПредшествующего,
	               |	ТаблицаСНормативами.РассчитанПоПериодичности,
	               |	ТаблицаСНормативами.ДатаНач,
	               |	ТаблицаСНормативами.ДатаКон,
	               |	ТаблицаСНормативами.НеУчитыватьПродолжительность,
	               |	ТаблицаСНормативами.НормативныйРемонт,
	               |	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаСНормативами.Продолжительность
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРемонтов.ВидРемонтныхРабот,
	               |	ТаблицаРемонтов.ДатаНач КАК ДатаНач,
	               |	ТаблицаРемонтов.ДатаКон,
	               |	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(МАКСИМУМ(ТаблицаРемонтов1.ДатаКон), ДЕНЬ, 1), ТаблицаРемонтов.ДатаНач) КАК ДатаПредшествующегоТогожеВида,
	               |	ТаблицаРемонтов.Замещен,
	               |	ТаблицаРемонтов.ДатаПредшествующего,
	               |	ТаблицаРемонтов.РассчитанПоПериодичности,
	               |	ТаблицаРемонтов.ПлановыйГрафикРаботы,
	               |	ТаблицаРемонтов.НормативныйРемонт,
	               |	ТаблицаРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаРемонтов.НеУчитыватьПродолжительность,
	               |	ТаблицаРемонтов.Продолжительность,
	               |	ТаблицаРемонтов.Часы,
	               |	ТаблицаРемонтов.Дни,
	               |	ТаблицаРемонтов.ФактическаяНаработка
	               |ПОМЕСТИТЬ РемонтыСПредшествующими
	               |ИЗ
	               |	ТаблицаРемонтыИНормативы КАК ТаблицаРемонтов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРемонтыИНормативы КАК ТаблицаРемонтов1
	               |		ПО ТаблицаРемонтов.ВидРемонтныхРабот = ТаблицаРемонтов1.ВидРемонтныхРабот
	               |			И ТаблицаРемонтов.ДатаНач > ТаблицаРемонтов1.ДатаКон
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаРемонтов.ВидРемонтныхРабот,
	               |	ТаблицаРемонтов.ДатаНач,
	               |	ТаблицаРемонтов.ДатаКон,
	               |	ТаблицаРемонтов.Замещен,
	               |	ТаблицаРемонтов.ДатаПредшествующего,
	               |	ТаблицаРемонтов.РассчитанПоПериодичности,
	               |	ТаблицаРемонтов.ПлановыйГрафикРаботы,
	               |	ТаблицаРемонтов.НормативныйРемонт,
	               |	ТаблицаРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаРемонтов.НеУчитыватьПродолжительность,
	               |	ТаблицаРемонтов.Продолжительность,
	               |	ТаблицаРемонтов.Часы,
	               |	ТаблицаРемонтов.Дни,
	               |	ТаблицаРемонтов.ФактическаяНаработка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РемонтыСПредшествующими.ВидРемонтныхРабот,
	               |	РемонтыСПредшествующими.ДатаНач КАК ДатаНач,
	               |	РемонтыСПредшествующими.ДатаКон,
	               |	РемонтыСПредшествующими.ДатаПредшествующегоТогожеВида,
	               |	РемонтыСПредшествующими.Замещен,
	               |	РемонтыСПредшествующими.ДатаПредшествующего КАК ДатаПредшествующего,
	               |	РемонтыСПредшествующими.РассчитанПоПериодичности,
	               |	РемонтыСПредшествующими.ПлановыйГрафикРаботы,
	               |	РемонтыСПредшествующими.НормативныйРемонт,
	               |	РемонтыСПредшествующими.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	РемонтыСПредшествующими.НеУчитыватьПродолжительность,
	               |	РемонтыСПредшествующими.Продолжительность,
	               |	РемонтыСПредшествующими.Часы,
	               |	РемонтыСПредшествующими.Дни,
	               |	РемонтыСПредшествующими.ФактическаяНаработка,
	               |	СУММА(ВЫБОР
	               |			КОГДА ТаблицаГрафиковСоВременем.ОсновноеЗначение ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК ДниОтПредшествующего
	               |ИЗ
	               |	РемонтыСПредшествующими КАК РемонтыСПредшествующими
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГрафиковСоВременем КАК ТаблицаГрафиковСоВременем
	               |		ПО РемонтыСПредшествующими.ПлановыйГрафикРаботы = ТаблицаГрафиковСоВременем.ГрафикРаботы
	               |			И РемонтыСПредшествующими.ДатаПредшествующегоТогожеВида < ТаблицаГрафиковСоВременем.ДатаГрафика
	               |			И РемонтыСПредшествующими.ДатаНач > ТаблицаГрафиковСоВременем.ДатаГрафика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РемонтыСПредшествующими.ВидРемонтныхРабот,
	               |	РемонтыСПредшествующими.ДатаНач,
	               |	РемонтыСПредшествующими.ДатаКон,
	               |	РемонтыСПредшествующими.ДатаПредшествующегоТогожеВида,
	               |	РемонтыСПредшествующими.Замещен,
	               |	РемонтыСПредшествующими.ДатаПредшествующего,
	               |	РемонтыСПредшествующими.РассчитанПоПериодичности,
	               |	РемонтыСПредшествующими.ПлановыйГрафикРаботы,
	               |	РемонтыСПредшествующими.НормативныйРемонт,
	               |	РемонтыСПредшествующими.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	РемонтыСПредшествующими.НеУчитыватьПродолжительность,
	               |	РемонтыСПредшествующими.Продолжительность,
	               |	РемонтыСПредшествующими.Часы,
	               |	РемонтыСПредшествующими.Дни,
	               |	РемонтыСПредшествующими.ФактическаяНаработка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаНач,
	               |	ДатаПредшествующего УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтов",ТаблицаРемонтовВизуализация.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаНормативов",ТаблицаНормативов.Выгрузить());
	
	ТаблицаРемонтовВизуализация.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ИндексСтроки = 7;
	СоответсвиеИменКолонок = Новый Соответствие;
	
	КолонкиНаработки.Очистить(); 	
		
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ПоследнийРемонт = ТаблицаРемонтовВизуализация[ТаблицаРемонтовВизуализация.Количество() - 1];
		ДатаПоследнего = ТаблицаРемонтовВизуализация[0].ДатаНач;
		ОбщаяПродолжительность = ПоследнийРемонт.ДатаНач - ДатаПоследнего;
		
		Если ОбщаяПродолжительность = 0 Тогда
			ОбщаяПродолжительность = 1;
		КонецЕсли;
	КонецЕсли;
	
	
	ТаблицаШагов = Новый ТаблицаЗначений;
	Если ТаблицаШагов.Колонки.Найти("Шаг") = Неопределено Тогда
		ТаблицаШагов.Колонки.Добавить("Шаг");
	КонецЕсли;
	
	Для Каждого СтрокаРемонта Из ТаблицаРемонтовВизуализация Цикл
		СтрокаШаг = ТаблицаШагов.Добавить();
		СтрокаШаг.Шаг = (СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / ОбщаяПродолжительность;
		Если СтрокаШаг.Шаг = 0 Тогда 
			ТаблицаШагов.Удалить(СтрокаШаг);
		КонецЕсли;
	КонецЦикла;
	ТаблицаШагов.Сортировать("Шаг Возр");
	Если ТаблицаШагов.Количество() > 0 Тогда
		МинШаг = ТаблицаШагов[0].Шаг;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверкаПередРасчетом(ДатаПланирования, НужныеРемонты, ТабПараметрыНаработкиОбъектовРемонта)
	
	ДатаПланированияОкончание = РассчитатьДатуОкончанияПланирования(ДатаПланирования, ТабПараметрыНаработкиОбъектовРемонта);
	
	Если ДатаПланированияОкончание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НужныеГода = Новый ТаблицаЗначений;
	ТипГодГрафика = Новый Массив;
	ТипГодГрафика.Добавить(Тип("Число"));
	НужныеГода.Колонки.Добавить("ГодГрафика",Новый ОписаниеТипов(ТипГодГрафика), "ГодГрафика");
	НужныеГода.Добавить().ГодГрафика = Год(ТекущаяДата());
	
	Если НЕ ПроверитьЗаполненностьГрафика(ДатаПланирования,ДатаПланированияОкончание,НужныеГода, НужныеРемонты) Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьГрафика(ДатаПланированияНачало, ДатаПланированияОкончание, НужныеГода, НужныеРемонты)
	
	ГрафикЗаполнен = Истина;
	ТабПлановыйГрафикРаботы = Новый ТаблицаЗначений;
	ТабПлановыйГрафикРаботы.Колонки.Добавить("График", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	НовСтрока = ТабПлановыйГрафикРаботы.Добавить();
	НовСтрока.График = ПлановыйГрафикРаботы;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТиповыеОРНормативныеРемонты.ВидРемонта,
	               |	торо_ТиповыеОРНормативныеРемонты.Ссылка КАК ТиповойОР,
	               |	торо_ТиповыеОРНормативныеРемонты.НормативныйРемонт
	               |ПОМЕСТИТЬ ВсеНормРемонтыТиповогоОР
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	               |ГДЕ
	               |	торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НужныеРемонты.ВидРемонтныхРабот
	               |ПОМЕСТИТЬ ВидыРемонтов
	               |ИЗ
	               |	&НужныеРемонты КАК НужныеРемонты
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВсеНормРемонтыТиповогоОР.ВидРемонта,
	               |	ВсеНормРемонтыТиповогоОР.ТиповойОР,
	               |	ВсеНормРемонтыТиповогоОР.НормативныйРемонт
	               |ПОМЕСТИТЬ НужныеРемонты
	               |ИЗ
	               |	ВсеНормРемонтыТиповогоОР КАК ВсеНормРемонтыТиповогоОР
	               |ГДЕ
	               |	ВсеНормРемонтыТиповогоОР.ВидРемонта В
	               |			(ВЫБРАТЬ
	               |				НужныеРемонты.ВидРемонтныхРабот
	               |			ИЗ
	               |				ВидыРемонтов КАК НужныеРемонты)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПлановыйГрафикРаботы.График
	               |ПОМЕСТИТЬ ПлановыйГрафикРаботы
	               |ИЗ
	               |	&ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТиповыеОРНормативныеРемонты.ГрафикРемонтныхРабот
	               |ПОМЕСТИТЬ ТабГрафиков
	               |ИЗ
	               |	НужныеРемонты КАК НужныеРемонты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	               |		ПО НужныеРемонты.ВидРемонта = торо_ТиповыеОРНормативныеРемонты.ВидРемонта
	               |			И НужныеРемонты.ТиповойОР = торо_ТиповыеОРНормативныеРемонты.Ссылка
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	ПлановыйГрафикРаботы.График
	               |ИЗ
	               |	ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабГрафиков.ГрафикРемонтныхРабот
	               |ИЗ
	               |	ТабГрафиков КАК ТабГрафиков";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаПланированияНачало", ДатаПланированияНачало);
	Запрос.УстановитьПараметр("НужныеРемонты", НужныеРемонты);
	Запрос.УстановитьПараметр("ПлановыйГрафикРаботы", ТабПлановыйГрафикРаботы);
	
	Результат = Запрос.Выполнить();
	МассивГрафиков = Результат.Выгрузить().ВыгрузитьКолонку("ГрафикРемонтныхРабот");
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачалоДня(ДатаПланированияНачало), ДатаПланированияОкончание);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НужныеГода.ГодГрафика
	               |ПОМЕСТИТЬ НужныеГода
	               |ИЗ
	               |	&НужныеГода КАК НужныеГода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабГрафиков.ГрафикРемонтныхРабот,
	               |	НужныеГода.ГодГрафика
	               |ПОМЕСТИТЬ ВремТабл
	               |ИЗ
	               |	ТабГрафиков КАК ТабГрафиков,
	               |	НужныеГода КАК НужныеГода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТРасписанияРаботы.ГрафикРаботы,
	               |	ГОД(ВТРасписанияРаботы.ДатаГрафика) КАК ГодГрафика,
	               |	СУММА(РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяНачала, ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ОсновноеЗначение
	               |ПОМЕСТИТЬ ВТРасписанияРаботыИзм
	               |ИЗ
	               |	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВТРасписанияРаботы.ГрафикРаботы,
	               |	ГОД(ВТРасписанияРаботы.ДатаГрафика)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремТабл.ГрафикРемонтныхРабот КАК ГрафикРаботы,
	               |	ВремТабл.ГодГрафика,
	               |	ЕСТЬNULL(ВТРасписанияРаботыИзм.ОсновноеЗначение, 0) КАК ОсновноеЗначение
	               |ИЗ
	               |	ВремТабл КАК ВремТабл
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
	               |		ПО ВремТабл.ГодГрафика = ВТРасписанияРаботыИзм.ГодГрафика
	               |			И ВремТабл.ГрафикРемонтныхРабот = ВТРасписанияРаботыИзм.ГрафикРаботы";
	
	Запрос.УстановитьПараметр("НужныеГода", НужныеГода);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОсновноеЗначение = 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнен график %1 за %2 год'"),Выборка.ГрафикРаботы,Выборка.ГодГрафика));
			ГрафикЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГрафикЗаполнен;
	
КонецФункции

&НаСервере
Функция РассчитатьДатуОкончанияПланирования(ДатаПланирования, ТабПараметрыНаработкиОбъектовРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	торо_ТиповыеОРНормативныеРемонты.СпособПланирования.ПериодичностьРемонтныхРабот КАК ПериодичностьРемонтныхРабот,
	               |	торо_ТиповыеОРНормативныеРемонты.СпособПланирования.КоличествоПериодов КАК КоличествоПериодов
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	               |ГДЕ
	               |	торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
	               |	И торо_ТиповыеОРНормативныеРемонты.ВидРемонта = &ВидРемонта"; 
				   
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидРемонта", ВРНачалоЦикла);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Периодичность = Выборка.ПериодичностьРемонтныхРабот;
		КолПериодов = Выборка.КоличествоПериодов;
		
		Если Не ЗначениеЗаполнено(Периодичность) Или Не ЗначениеЗаполнено(КолПериодов) Тогда
			
			РассчитатьПоНаработке = ПроверитьЗаполненностьПараметровНаработки(ТабПараметрыНаработкиОбъектовРемонта);
			Если РассчитатьПоНаработке Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК Дата
				               |ИЗ
				               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
				               |ГДЕ
				               |	КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
				               |	И КалендарныеГрафики.Календарь = &График
				               |	И КалендарныеГрафики.ДеньВключенВГрафик";
				
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
				Запрос.УстановитьПараметр("График", ПлановыйГрафикРаботы);

				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					КолвоРабДнейВМесяце = Выборка.Дата;
					Если КолвоРабДнейВМесяце = 0 Тогда
						торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен плановый график работы за текущий месяц'"));
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				               |	&Ссылка КАК ОбъектРемонта,
				               |	ТабПараметрыНаработки.Показатель КАК Показатель,
				               |	ТабПараметрыНаработки.Период КАК Период,
				               |	ТабПараметрыНаработки.ПлановаяНаработка КАК ПлановаяНаработка,
				               |	ТабПараметрыНаработки.ПериодПлановойНаработки КАК ПериодПлановойНаработки,
				               |	ТабПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериодаПлановойНаработки,
				               |	ТабПараметрыНаработки.КоэффициентИспользованияОборудования КАК КоэффициентИспользованияОборудования
				               |ПОМЕСТИТЬ ТабПараметрыНаработки
				               |ИЗ
				               |	&ТабПараметрыНаработки КАК ТабПараметрыНаработки
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	МИНИМУМ(ВЫБОР
				               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
				               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
				               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
				               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 7
				               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
				               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 10
				               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
				               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 30
				               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
				               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 90
				               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
				               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 183
				               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
				               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 365
				               |		КОНЕЦ) КАК МаксНаработкаВДень
				               |ПОМЕСТИТЬ НаработкаВДень
				               |ИЗ
				               |	ТабПараметрыНаработки КАК торо_ПараметрыНаработкиОбъектовРемонта
				               |ГДЕ
				               |	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &Ссылка
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК Дата
				               |ПОМЕСТИТЬ КоличествоДнейВМесяце
				               |ИЗ
				               |	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
				               |ГДЕ
				               |	КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
				               |	И КалендарныеГрафики.Календарь = &График
				               |	И КалендарныеГрафики.ДеньВключенВГрафик
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки КАК ЗначениеПараметраНаработки
				               |ПОМЕСТИТЬ ПараметрНаработки
				               |ИЗ
				               |	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
				               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
				               |		ПО торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = торо_ТиповыеОРНормативныеРемонты.СпособПланирования
				               |ГДЕ
				               |	торо_ТиповыеОРНормативныеРемонты.ВидРемонта = &ВидРемонта
				               |	И торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
				               |;
				               |
				               |////////////////////////////////////////////////////////////////////////////////
				               |ВЫБРАТЬ
				               |	ВЫБОР
				               |		КОГДА ЕСТЬNULL(ПараметрНаработки.ЗначениеПараметраНаработки, 0) = 0
				               |				ИЛИ ЕСТЬNULL(НаработкаВДень.МаксНаработкаВДень, 0) = 0
				               |				ИЛИ ЕСТЬNULL(КоличествоДнейВМесяце.Дата, 0) = 0
				               |			ТОГДА 0
				               |		ИНАЧЕ ПараметрНаработки.ЗначениеПараметраНаработки / НаработкаВДень.МаксНаработкаВДень / КоличествоДнейВМесяце.Дата
				               |	КОНЕЦ КАК МесяцевНаработки
				               |ИЗ
				               |	ПараметрНаработки КАК ПараметрНаработки,
				               |	КоличествоДнейВМесяце КАК КоличествоДнейВМесяце,
				               |	НаработкаВДень КАК НаработкаВДень";
				
				Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
				Запрос.УстановитьПараметр("График", ПлановыйГрафикРаботы);
				Запрос.УстановитьПараметр("ВидРемонта", ВРНачалоЦикла);
				Запрос.УстановитьПараметр("ТабПараметрыНаработки", ТабПараметрыНаработкиОбъектовРемонта);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					КолПериодов = Цел(Выборка.МесяцевНаработки) + 1;
					Периодичность = Перечисления.Периодичность.Месяц;
				КонецЕсли;
				
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;

		Если Периодичность = Перечисления.Периодичность.Год И ((Год(ДатаПланирования) + 3*КолПериодов) > 3999) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В способе планирования указано слишком большое значение периодичности. Проверьте настройки планирования!'"));
			Возврат Неопределено;                                                                                                                    
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(Периодичность) + ", " + Формат(?(КолПериодов = 0, 1, КолПериодов)*3,"ЧГ=0") + ") КАК ДатаОкончания";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаПланирования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Возврат НачалоДня(Выборка.ДатаОкончания)-1;
			
		Иначе 
			
			Возврат '39991231235959';
			
		КонецЕсли;
	КонецЕсли;

КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьПараметровНаработки(ТабПараметрыНаработкиОбъектовРемонта)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта,
	|	торо_ТиповыеОРНормативныеРемонты.Ссылка КАК ТиповойОР
	|ПОМЕСТИТЬ РассчитываемыеПоНаработке
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|ГДЕ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта = &ВР
	|	И торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
	|	И торо_ТиповыеОРНормативныеРемонты.СпособПланирования.ИспользоватьПараметрыНаработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК ОбъектРемонта,
	|	ТабПараметрыНаработки.Показатель,
	|	ТабПараметрыНаработки.Период,
	|	ТабПараметрыНаработки.ПлановаяНаработка,
	|	ТабПараметрыНаработки.ПериодПлановойНаработки,
	|	ТабПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки,
	|	ТабПараметрыНаработки.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ
	|	ТабПараметрыНаработки
	|ИЗ
	|	&ТабПараметрыНаработки КАК ТабПараметрыНаработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РассчитываемыеПоНаработке.ВидРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель
	|ПОМЕСТИТЬ ПараметрыПлановойНаработки
	|ИЗ
	|	РассчитываемыеПоНаработке КАК РассчитываемыеПоНаработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПараметрыНаработки КАК торо_ПараметрыНаработкиОбъектовРемонта
	|		ПО (торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = РассчитываемыеПоНаработке.ТиповойОР)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыПлановойНаработки.ВидРемонта
	|ИЗ
	|	ПараметрыПлановойНаработки КАК ПараметрыПлановойНаработки
	|ГДЕ
	|	ПараметрыПлановойНаработки.Показатель ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВР", ВРНачалоЦикла);
	Запрос.УстановитьПараметр("ТабПараметрыНаработки", ТабПараметрыНаработкиОбъектовРемонта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проверьте заполненность показателей плановой наработки.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
	
&НаСервереБезКонтекста
Функция ПолучитьТаблицуПараметровНаработки(Ссылка, Родитель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Период,
	|	0 КАК Приоритет,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ ПоказателиОР
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	|ГДЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &Ссылка
	|	И &СсылкаЗаполнена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРодителей.Приоритет,
	|	ТаблицаРодителей.Родитель
	|ПОМЕСТИТЬ ТаблицаРодителей
	|ИЗ
	|	&ТаблицаРодителей КАК ТаблицаРодителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
	|	ТаблицаРодителей.Приоритет,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ ПоказателиГрупп
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|					(ВЫБРАТЬ
	|						ТаблицаРодителей.Родитель
	|					ИЗ
	|						ТаблицаРодителей КАК ТаблицаРодителей)
	|				И НЕ Показатель В
	|						(ВЫБРАТЬ
	|							ПоказателиОР.Показатель
	|						ИЗ
	|							ПоказателиОР КАК ПоказателиОР)) КАК торо_ПараметрыНаработкиОбъектовРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРодителей КАК ТаблицаРодителей
	|		ПО торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = ТаблицаРодителей.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОР.ОбъектРемонта,
	|	ПоказателиОР.Показатель,
	|	ПоказателиОР.Период,
	|	ПоказателиОР.Приоритет КАК Приоритет,
	|	ПоказателиОР.ПлановаяНаработка,
	|	ПоказателиОР.ПериодПлановойНаработки,
	|	ПоказателиОР.ПродолжительностьПериодаПлановойНаработки,
	|	ПоказателиОР.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ ВсеПоказатели
	|ИЗ
	|	ПоказателиОР КАК ПоказателиОР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиГрупп.ОбъектРемонта,
	|	ПоказателиГрупп.Показатель,
	|	ПоказателиГрупп.Период,
	|	ПоказателиГрупп.Приоритет,
	|	ПоказателиГрупп.ПлановаяНаработка,
	|	ПоказателиГрупп.ПериодПлановойНаработки,
	|	ПоказателиГрупп.ПродолжительностьПериодаПлановойНаработки,
	|	ПоказателиГрупп.КоэффициентИспользованияОборудования
	|ИЗ
	|	ПоказателиГрупп КАК ПоказателиГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеПоказатели.ОбъектРемонта КАК ОбъектРемонта,
	|	ВсеПоказатели.Показатель,
	|	ВсеПоказатели.Период,
	|	ВсеПоказатели.Приоритет,
	|	ВсеПоказатели.ПлановаяНаработка,
	|	ВсеПоказатели.ПериодПлановойНаработки,
	|	ВсеПоказатели.ПродолжительностьПериодаПлановойНаработки,
	|	ВсеПоказатели.КоэффициентИспользованияОборудования
	|ИЗ
	|	ВсеПоказатели КАК ВсеПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВсеПоказатели.Показатель КАК Показатель,
	|			МИНИМУМ(ВсеПоказатели.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВсеПоказатели КАК ВсеПоказатели
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВсеПоказатели.Показатель) КАК ВнутреннийЗапрос
	|		ПО ВсеПоказатели.Показатель = ВнутреннийЗапрос.Показатель
	|			И ВсеПоказатели.Приоритет = ВнутреннийЗапрос.Приоритет";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СсылкаЗаполнена", ЗначениеЗаполнено(Ссылка));
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СписокРодителей = ПолучитьСписокРодителейТиповогоОбъекта(Ссылка);
	Иначе
		СписокРодителей = ПолучитьСписокРодителейТиповогоОбъекта(Родитель);
		Если ЗначениеЗаполнено(Родитель) Тогда
			СписокРодителей.Вставить(0, Родитель);
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРодителей = Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ТаблицаРодителей.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	СчетчикЦикла = СписокРодителей.Количество() - 1;
	Пока СчетчикЦикла >= 0 Цикл
		НоваяСтрокаТабл = ТаблицаРодителей.Добавить();
		НоваяСтрокаТабл.Родитель = СписокРодителей[СчетчикЦикла].Значение;
		НоваяСтрокаТабл.Приоритет = СчетчикЦикла + 1;
		СчетчикЦикла = СчетчикЦикла - 1;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	СтруктураВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата.Добавить(Новый Структура("ОбъектРемонта, Показатель, Период, Приоритет, ПлановаяНаработка, ПериодПлановойНаработки, ПродолжительностьПериодаПлановойНаработки, КоэффициентИспользованияОборудования",
		Выборка.ОбъектРемонта, Выборка.Показатель, Выборка.Период, Выборка.Приоритет, Выборка.ПлановаяНаработка, Выборка.ПериодПлановойНаработки, Выборка.ПродолжительностьПериодаПлановойНаработки, Выборка.КоэффициентИспользованияОборудования));
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокРодителейТиповогоОбъекта(знач Ссылка)
	
	СписокРодителей = Новый СписокЗначений;
	
	Пока ЗначениеЗаполнено(Ссылка.Родитель) цикл
	   Ссылка=Ссылка.Родитель;
	   СписокРодителей.Добавить(Ссылка)
	КонецЦикла;
	Возврат СписокРодителей;
	
КонецФункции

&НаСервере
Функция ПечатьНаСервере()
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПолужирныйШрифт = Новый Шрифт("Arial", 9,ИСТИНА,,,);
	
	ОбластьДляЗаголовка = ТабДок.ПолучитьОбласть(1,2,4,17);
	ОбластьЗаголовок = ОбластьДляЗаголовка.Область(1,2,4,17);
	ОбластьЗаголовок.Объединить();
	ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьЗаголовок.Текст = НСтр("ru = 'Структура ремонтного цикла'");
	ОбластьЗаголовок.Шрифт = Новый Шрифт("Arial", 18, Истина);  
	ОбластьЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбластьЗаголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ТабДок.Вывести(ОбластьДляЗаголовка);
	
	ОбластьПараметров = ТабДок.ПолучитьОбласть(6,2,12, 17);
	
	ОбластьОРЗголовок = ОбластьПараметров.Область(2,2,2,17);
	ОбластьОРЗголовок.Объединить();
	ОбластьОРЗголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьОРЗголовок.Шрифт = ПолужирныйШрифт;
	ОбластьОРЗголовок.Текст = НСтр("ru = 'Типовой объект: '") + Объект.Ссылка;
	ОбластьОРЗголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьГрафикЗаголовок = ОбластьПараметров.Область(3,2,3,17);
	ОбластьГрафикЗаголовок.Объединить();
	ОбластьГрафикЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьГрафикЗаголовок.Шрифт = ПолужирныйШрифт;
	ОбластьГрафикЗаголовок.Текст = НСтр("ru = 'Плановый график работы: '") + ПлановыйГрафикРаботы;
	ОбластьГрафикЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьНормироватьЗаголовок = ОбластьПараметров.Область(4,2,4,17);
	ОбластьНормироватьЗаголовок.Объединить();
	ОбластьНормироватьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьНормироватьЗаголовок.Шрифт = ПолужирныйШрифт;
	ОбластьНормироватьЗаголовок.Текст = НСтр("ru = 'Нормировать интервалы между ремонтами: '") + ?(Нормировать, НСтр("ru = 'Да'"), НСтр("ru = 'Нет'"));
	ОбластьНормироватьЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьВРЗаголовок = ОбластьПараметров.Область(5,2,5,17);
	ОбластьВРЗаголовок.Объединить();
	ОбластьВРЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьВРЗаголовок.Шрифт = ПолужирныйШрифт; 
	
	СписокВР = Новый СписокЗначений;
	СписокВР.ЗагрузитьЗначения(Объект.НормативныеРемонты.Выгрузить(,"ВидРемонта").ВыгрузитьКолонку("ВидРемонта"));
	
	ПредставлениеПланируемыхРемонтов = "";
	Для Каждого ПланируемыйВР Из СписокВР Цикл
		ПредставлениеВР = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ПланируемыйВР.Значение);
		ПредставлениеПланируемыхРемонтов = ?(ПредставлениеПланируемыхРемонтов = "", ПредставлениеПланируемыхРемонтов, ПредставлениеПланируемыхРемонтов + "; ") + ПредставлениеВР;
	КонецЦикла;
	
	ОбластьВРЗаголовок.Текст = "Планируемые виды ремонтов: " + ПредставлениеПланируемыхРемонтов;
	ОбластьВРЗаголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьВРЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;

	ОбластьОтображВР = ОбластьПараметров.Область(6,2,6,17);
	ОбластьОтображВР.Объединить();
	ОбластьОтображВР.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьОтображВР.Шрифт = ПолужирныйШрифт; 
	ОбластьОтображВР.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьОтображВР.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОтображаемыеВР = Новый СписокЗначений;
	ОтображаемыеВРТекст = "";
	Для Каждого ЗапланированныйРемонт Из ЗапланированныеРемонты Цикл
		Если ЗапланированныйРемонт.Выбран Тогда
			ПредставлениеВР = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ЗапланированныйРемонт.ВидРемонтныхРабот);
			ОтображаемыеВР.Добавить(ЗапланированныйРемонт.ВидРемонтныхРабот, ПредставлениеВР);
			ОтображаемыеВРТекст = ?(ОтображаемыеВРТекст = "", ОтображаемыеВРТекст, ОтображаемыеВРТекст + "; ") + ПредставлениеВР;
		КонецЕсли;
	КонецЦикла;
	ОбластьОтображВР.Текст = "Отображаемые ремонты: " + ОтображаемыеВРТекст;
		
	ТабДок.Вывести(ОбластьПараметров);
	
	ПолеМнемосхемы.ИспользоватьСетку = Ложь;
	ГрафСхема = ПолеМнемосхемы.ПолучитьКартинку();
    ПолеМнемосхемы.ИспользоватьСетку = Истина;

	ОбластьКартинка = ТабДок.ПолучитьОбласть(13,2,13,КолвоКолонок+1);
	Рис = Областькартинка.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рис.Картинка = ГрафСхема;
	Рис.РазмерКартинки  = РазмерКартинки.Пропорционально;
	Рис.Расположить(ТабДок.Область(2,2,2,КолвоКолонок+1));
    Рис.Высота = (50+ (90*КолСтрокСхемы) + 20)/4;
	Рис.ГраницаСверху = Ложь;
	Рис.ГраницаСлева = Ложь;
	рис.ГраницаСнизу = Ложь;
	Рис.ГраницаСправа = Ложь;
	
	ТабДок.Вывести(ОбластьКартинка);

	НарисоватьТаблицу(ТабДок);
	
	Для Каждого Элемент Из ОтображаемыеВР Цикл
		ОбластьРасшифровкаКода = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1 ,2,	ТабДок.ВысотаТаблицы + 2, 17);
		ОбластьКод = ОбластьРасшифровкаКода.Область(2,2,2, 17);
		ОбластьКод.Объединить();
		ОбластьКод.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьКод.Шрифт = Новый Шрифт("Arial", 9, Ложь);
		ОбластьКод.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьКод.Текст = СокрЛП(Элемент.Значение.Код) + " - " + Элемент.Значение;
		ТабДок.Вывести(ОбластьРасшифровкаКода);
	КонецЦикла;
	
	
	ТабДок.ОтображатьСетку = Ложь;
	табДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.КлючПараметровПечати = "торо_РемонтныеГруппы_Визуализация";
	ТабДок.ИмяПараметровПечати = "торо_РемонтныеГруппы_Визуализация";
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Процедура НарисоватьТаблицу(ТабличныйДокумент)
		
	ПервичныйСдвигСтрок = ТабличныйДокумент.ВысотаТаблицы;
	
	ИндексСтроки = 8 + КолонкиНаработки.Количество() + 1;
	флВсеНарисовано = Ложь;
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	КоличествоРемонтов = ТаблицаРемонтовВизуализация.Количество() - 1;
	ШиринаПоляТД = 145;
	КоличествоКолонокПоляТД = 16;
	ЭтоПерваяЧастьТаблицы = Истина;

	Пока НЕ флВсеНарисовано Цикл
		
		Если КоличествоКолонокПоляТД = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Если КоличествоРемонтов + 1 > КоличествоКолонокПоляТД Тогда
			ЧертитьКолонок = КоличествоКолонокПоляТД;
			КоличествоРемонтов = КоличествоРемонтов - КоличествоКолонокПоляТД + 1;
		Иначе 
			ЧертитьКолонок = КоличествоРемонтов + 2;
			флВсеНарисовано = Истина;
		КонецЕсли;
		
		ОбластьВывода = ТабличныйДокумент.Область(1,1,1,1);
		ОбластьВывода.ширинаКолонки = 4;
		
		ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок+1 );
		ОбластьВывода.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
		ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок);
		ОбластьВывода.ШиринаКолонки = 8;
		
		
		ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД+1);
		ОбластьВывода.ШиринаКолонки = 20;
		ОбластьВывода.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Если НЕ ЭтоПерваяЧастьТаблицы Тогда
			ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД - 1, 2);
			ОбластьВывода.Текст = "Продолжение";
		КонецЕсли;
		ЭтоПерваяЧастьТаблицы = Ложь;
		ОбластьВывода = ТабличныйДокумент.Область(3 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Вид ремонта"; 
		ОбластьВывода = ТабличныйДокумент.Область(4 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Продолжительность (ч)"; 
		ОбластьВывода = ТабличныйДокумент.Область(5+СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Тек. рабочие дни (от предшествующего)";
		ОбластьВывода = ТабличныйДокумент.Область(6 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Тек. календарные дни (от предшествующего)";
		ОбластьВывода = ТабличныйДокумент.Область(7 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Время работы (от предшествующего того же вида)";

		
		ДопИндекс = 0;
		Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
			
			ОбластьВывода = ТабличныйДокумент.Область(8 + ДопИндекс + СдвигСтрокПоляТД, 2);
			ОбластьВывода.Текст = КолонкаНаработки.Показатель.Наименование + " (" + ?(КолонкаНаработки.ПредшествующийТогоЖеВида, "от предшествующего того же вида", "от предшествующего") + ")";	 
			ДопИндекс = ДопИндекс + 1;
		КонецЦикла;
		
		ОбластьВывода = ТабличныйДокумент.Область(8 + ДопИндекс + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Рассчитан по наработке";

		СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
	КонецЦикла;
	
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	Номер = 1;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ДатаНачПервого = ТаблицаРемонтовВизуализация[0].ДатаНач;
	КонецЕсли;
	Для Каждого СтрокаРемонта Из ТаблицаРемонтовВизуализация Цикл
		Если Не ЗначениеЗаполнено(СтрокаРемонта.ВидРемонтныхРабот) Тогда
			Продолжить;
		КонецЕсли;

		ДатаПоследнего = СтрокаРемонта.ДатаКон;
		
		ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода.Текст = СтрокаРемонта.ВидРемонтныхРабот.Код;
		
		ОбластьВывода2 = ТабличныйДокумент.Область(4 + СдвигСтрокПоляТД,Номер + 2);
		Продолжительность = Формат((СтрокаРемонта.Продолжительность) / 3600,"ЧДЦ=1"); 
		ОбластьВывода2.Текст = ?(СтрокаРемонта.НеУчитыватьПродолжительность,"(","") + Продолжительность + ?(СтрокаРемонта.НеУчитыватьПродолжительность,")","");   // продолжительность (часов)
		
		ОбластьВывода2 = ТабличныйДокумент.Область(5 + СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода2.Текст = СтрокаРемонта.Дни; 	// рабочих дней от предыдущего 
		
		ОбластьВывода2 = ТабличныйДокумент.Область(6 + СдвигСтрокПоляТД,Номер + 2);
		РазностьДат = (СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / 86400;
		ОбластьВывода2.Текст = ?(РазностьДат > 0,РазностьДат - 1, 0); 	// календарных дней от предыдущего
		
		ОбластьВывода2 = ТабличныйДокумент.Область(7 + СдвигСтрокПоляТД, Номер + 2);
		ОбластьВывода2.Текст = СтрокаРемонта.ДниОтПредшествующего; // рабочих дней от предшествующего того же вида 

		
		ДопИндекс = 0;
		Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
			ИмяКолонки = КолонкаНаработки.ИмяКолонки;	
			
			ОбластьВывода2 = ТабличныйДокумент.Область(8 + ДопИндекс + СдвигСтрокПоляТД,Номер + 2);
			ОбластьВывода2.Текст = СтрокаРемонта[ИмяКолонки]; 	// очередная наработка 
			ДопИндекс = ДопИндекс + 1;
		КонецЦикла;
		
		ОбластьВывода2 = ТабличныйДокумент.Область(8 + ДопИндекс + СдвигСтрокПоляТД, Номер + 2);
		ОбластьВывода2.Текст = ?(СтрокаРемонта.РассчитанПоПериодичности = Ложь, "v", "");

		Номер = Номер + 1;
		
		Если Не (ТабличныйДокумент.ТекущаяОбласть = Неопределено) И (ОбластьВывода2.Лево)*9 > ШиринаПоляТД Тогда 
			СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
			Номер = 1;
		КонецЕсли;	
	КонецЦикла;
	
	

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокВР(ЗНАЧ НормативныеРемонты)

	Возврат НормативныеРемонты.Выгрузить(, "ВидРемонта").ВыгрузитьКолонку("ВидРемонта");

КонецФункции // ПолучитьСписокВР()

&НаКлиенте
Процедура ЗаписатьИсходныеСтатусыНормативныхРемонтовИИзменитьЗаголовок()
	
	ЕстьНеУтвержденныеНормативныеРемонты = Ложь;
	ЕстьУтвержденныеНормативныеРемонты = Ложь;
	
	СтатусыНормативныхРемонтовДоИзменений.Очистить();
	Для Каждого Строка Из Объект.НормативныеРемонты Цикл
		НС = СтатусыНормативныхРемонтовДоИзменений.Добавить();
		НС.Статус = Строка.Статус;
		НС.ИсходныйНомерСтроки = Строка.ИсходныйНомерСтроки;
		
		Если Строка.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует") Тогда
			ЕстьУтвержденныеНормативныеРемонты = Истина;
		Иначе
			ЕстьНеУтвержденныеНормативныеРемонты = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка") Тогда
		ЭтаФорма.Заголовок = НСтр("ru = 'Типовые объекты ремонта (Создание)'");
	Иначе
		ЭтаФорма.Заголовок = НСтр("ru = '(Типовые объекты ремонта) '") + Объект.Наименование;
	КонецЕсли;
	
	Если ЕстьУтвержденныеНормативныеРемонты И ЕстьНеУтвержденныеНормативныеРемонты Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Нормативы утверждены частично]'");
	ИначеЕсли ЕстьУтвержденныеНормативныеРемонты И Не ЕстьНеУтвержденныеНормативныеРемонты Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Нормативы утверждены]'");
	ИначеЕсли Не ЕстьУтвержденныеНормативныеРемонты И ЕстьНеУтвержденныеНормативныеРемонты Тогда
		ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Нормативы не утверждены]'");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРедактированияНормативныхРемонтов()
	
	ДоступностьЭлем = (Элементы.НормативныеРемонты.ТекущиеДанные.Статус <> ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
		
	Элементы.ЗамещаемыеРемонты.Доступность = ДоступностьЭлем;
	Элементы.ПредшествующиеРемонты.Доступность = ДоступностьЭлем;
	Элементы.ИспользоватьКоэффициентыРемонтныхОсобенностей.Доступность = ДоступностьЭлем;
	Элементы.НеИспользоватьВПланировании.Доступность = ДоступностьЭлем;
	Элементы.НеУчитыватьПриПланированииГрафикРаботОборудования.Доступность = ДоступностьЭлем;
	Элементы.НеУчитыватьПриПланированииГрафикРемонтныхРабот.Доступность = ДоступностьЭлем;
	Элементы.НеУчитыватьПродолжительность.Доступность = ДоступностьЭлем;
	Элементы.НормативныеРемонтыНеИспользоватьВПланированииДатуВводаВЭксплуатацию.Доступность = ДоступностьЭлем;
	Элементы.НормативныеРемонтыРазрешитьСокращатьМежремонтныйПериодПриПланировании.Доступность = ДоступностьЭлем;
	Элементы.УчитыватьПростоиОборудования.Доступность = ДоступностьЭлем;
	Элементы.ГрафикРемонтныхРабот.Доступность = ДоступностьЭлем;
	Элементы.СпособВыполнения.Доступность = ДоступностьЭлем;
	Элементы.СпособУчетаДатыОтсчета.Доступность = ДоступностьЭлем;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусДляНовойСтрокиНормРемонтов(ТекИдентификаторСтроки)
	
	ТекСтрока = Объект.НормативныеРемонты.НайтиПоИдентификатору(ТекИдентификаторСтроки);
	Если Не ТекСтрока = Неопределено Тогда		
		ТекСтрока.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура УдалитьЗависимыеСтрокиИзТабМаксимальныхЗначенийНаработки(Показатель)
	
	стрПоиска = Новый Структура("Показатель", Показатель);
	
	НайС = СписокПараметровНаработки.НайтиСтроки(стрПоиска);
	Если НайС.количество() <= 1 тогда
		УдаляемыеСтроки = ТабМаксимальныхЗначенийНаработки.НайтиСтроки(стрПоиска);
		Для каждого текСтрока из УдаляемыеСтроки цикл
			ТабМаксимальныхЗначенийНаработки.Удалить(текСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
процедура УстановитьОтборВТабМаксимальныхЗначенийНаработки(Показатель = неопределено)
	
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда

		Если ЗначениеЗаполнено(Показатель) Тогда
			Элементы.ТабМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель",
				?(ЗначениеЗаполнено(Показатель),Показатель,ТекДанные.Показатель));
		Иначе
			Элементы.ТабМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель","---------");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВычислениеМежремонтногоИнтервала(ТекДанные)
	
	Перем МежремонтныйИнтервал;
	
	Запрос = Новый Запрос;
	Таб = Объект.НормативныеРемонты.Выгрузить(,"ВидРемонта, СпособПланирования");
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.СпособПланирования
	|ПОМЕСТИТЬ ОпредСпособПланирования
	|ИЗ
	|	&Таб КАК Таб
	|ГДЕ
	|	Таб.ВидРемонта = &ВидРемонта
	|	И Таб.СпособПланирования <>ЗНАЧЕНИЕ(Справочник.торо_СпособыПланированияРемонтныхРабот.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПараметрыНаработки,
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПериодичность,
	|	торо_СпособыПланированияРемонтныхРабот.КоличествоПериодов,
	|	торо_СпособыПланированияРемонтныхРабот.ПериодичностьРемонтныхРабот КАК Периодичность,
	|	ОпредСпособПланирования.СпособПланирования КАК СпособПланирования
	|ИЗ
	|	ОпредСпособПланирования КАК ОпредСпособПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_СпособыПланированияРемонтныхРабот КАК торо_СпособыПланированияРемонтныхРабот
	|		ПО ОпредСпособПланирования.СпособПланирования = торо_СпособыПланированияРемонтныхРабот.Ссылка";
	
	
	Запрос.УстановитьПараметр("ВидРемонта", ТекДанные.ЗамещаемыйВидРемонта);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДляПериодичности = Результат.Выбрать();
	
	Если ВыборкаДляПериодичности.Следующий() Тогда
		
		Если ВыборкаДляПериодичности.ИспользоватьПериодичность Тогда
			
			Если ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Год Тогда
				Период = 365;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Полугодие Тогда
				Период = 182;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Квартал Тогда
				Период = 90;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Месяц Тогда
				Период = 28;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Декада Тогда
				Период = 10;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Неделя Тогда
				Период = 7;
			Иначе Период = 1;
			КонецЕсли;
			
			МежремонтныйИнтервал = ВыборкаДляПериодичности.КоличествоПериодов * Период;
			
		КонецЕсли;
		
		Если ВыборкаДляПериодичности.ИспользоватьПараметрыНаработки Тогда
			
			Запрос3 = Новый Запрос;
			
			Если СписокПараметровНаработки.Количество() > 0 Тогда
				
				ТаблНараб = СписокПараметровНаработки.Выгрузить(, "ОбъектРемонта,Показатель,ПродолжительностьПериодаПлановойНаработки,ПериодПлановойНаработки,ПлановаяНаработка,КоэффициентИспользованияОборудования"); 
				
			Иначе
				
				СписокОтбора = Новый СписокЗначений;
				СписокОтбора.Добавить(Объект.Ссылка);
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
				|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
				|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
				|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
				|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
				|	торо_ПараметрыНаработкиОбъектовРемонта.Период,
				|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
				|ИЗ
				|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
				|ГДЕ
				|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта В(&СписокОтбора)";
				
				Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
				
				Результат = Запрос.Выполнить();
				ТаблНараб = Результат.Выгрузить();
				
			КонецЕсли;
			
			Запрос3.УстановитьПараметр("ТаблНараб", ТаблНараб);
			
			
			Запрос3.Текст = 
			"ВЫБРАТЬ
			|	ТаблНараб.Показатель,
			|	ТаблНараб.ПродолжительностьПериодаПлановойНаработки,
			|	ТаблНараб.ПериодПлановойНаработки,
			|	ТаблНараб.ПлановаяНаработка * ТаблНараб.КоэффициентИспользованияОборудования КАК ПлановаяНаработка
			|ПОМЕСТИТЬ ВыбрПараметрыНаработки
			|ИЗ
			|	&ТаблНараб КАК ТаблНараб
			|ГДЕ
			|	ТаблНараб.ОбъектРемонта = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки,
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ПараметрНаработки
			|ПОМЕСТИТЬ ВыбрСпобобыПланирования
			|ИЗ
			|	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
			|ГДЕ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыбрСпобобыПланирования.ЗначениеПараметраНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки,0) КАК ПродолжительностьПериодаПлановойНаработки,
			|	ВыбрПараметрыНаработки.ПериодПлановойНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПлановаяНаработка,0) КАК ПлановаяНаработка
			|ИЗ
			|	ВыбрСпобобыПланирования КАК ВыбрСпобобыПланирования
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыбрПараметрыНаработки КАК ВыбрПараметрыНаработки
			|		ПО ВыбрСпобобыПланирования.ПараметрНаработки = ВыбрПараметрыНаработки.Показатель";
			
			
			Запрос3.УстановитьПараметр("Ссылка", ВыборкаДляПериодичности.СпособПланирования);
			Запрос3.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
			
			Результат = Запрос3.Выполнить();
			
			ВыборкаДляНаработки = Результат.Выбрать();
			ВыборкаДляНаработки.Следующий();
			
			Если ВыборкаДляНаработки.ПлановаяНаработка > 0 И ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки > 0 Тогда
				
				
				Если ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Год Тогда
					ПериодПлановойНаработки = 365;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Полугодие Тогда
					ПериодПлановойНаработки = 183;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Квартал Тогда
					ПериодПлановойНаработки = 90;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Месяц Тогда
					ПериодПлановойНаработки = 30;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Декада Тогда
					ПериодПлановойНаработки = 10;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Неделя Тогда
					ПериодПлановойНаработки = 7;
				Иначе ПериодПлановойНаработки = 1;
				КонецЕсли;
				
				ПериодВДнях = ПериодПлановойНаработки * ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки;
				ПланНарабВДень = ВыборкаДляНаработки.ПлановаяНаработка / ПериодВДнях;
				
				МежремИнтервал = ВыборкаДляНаработки.ЗначениеПараметраНаработки / ПланНарабВДень;
				Если ЗначениеЗаполнено(МежремонтныйИнтервал) Тогда
					Если МежремИнтервал < МежремонтныйИнтервал Тогда
						МежремонтныйИнтервал = МежремИнтервал;
					КонецЕсли;
				Иначе МежремонтныйИнтервал = МежремИнтервал;
				КонецЕсли;
			Иначе 
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Проверьте заполнение показателей на вкладке ""Наработка"", Параметров планирования по наработке в способе планирования %1'"), ВыборкаДляПериодичности.СпособПланирования));
			КонецЕсли;
		КонецЕсли;
		
		
	Иначе 
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проверьте заполнение ""Способ планирования""'"));
	КонецЕсли;
	
	Возврат МежремонтныйИнтервал;
КонецФункции 

&НаКлиенте
Функция ПроверитьЗаполнениеСтрокиНормативногоРемонта(ТекущиеДанные)
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ВидРемонта) Тогда
		ТекстОшибки = НСтр("ru = 'Укажите вид ремонта.'");
	Иначе
		Строки = Объект.НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта",ТекущиеДанные.ВидРемонта));
		Если Строки.Количество()> 1 Тогда
			ТекстОшибки = НСтр("ru = 'Данный вид ремонта уже указан в другой строке.'");
		Конецесли;
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес)
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		НайС = Объект.Запчасти.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", текСтрока.Номенклатура, текСтрока.Характеристика));
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		
		Если НайС.Количество() = 0 Тогда
			нс = Объект.Запчасти.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс.Количество = текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
		Иначе
			выбСтрока = НайС[0];
			выбСтрока.Количество = выбСтрока.Количество + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
		КонецЕсли;
		
	КонецЦикла;
	
	МодифицированностьЗапчастей = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьХарактеристикиИспользуются(Номенклатура)
	
	Возврат НЕ Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать = Номенклатура.ИспользованиеХарактеристик;
	
КонецФункции

&НаКлиенте
Процедура ПередНачаломСоздатьОРЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе
        Возврат;
    КонецЕсли;
    
    СоздатьОРФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОРФрагмент()
    
    ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("Основание", Объект.Ссылка);
	ДанныеЗаполнения.Вставить("Направление", Объект.Направление);
	ДанныеЗаполнения.Вставить("Изготовитель", Объект.Изготовитель);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения);

	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);

КонецПроцедуры

&НаСервере
Процедура ЗаписатьНормативыОРПриИзмененииТиповогоОРНаСервере(ТиповойОР, ОбъектРемонта)
	торо_РаботаСНормативамиСервер.ЗаписатьНормативыОРПриИзмененииТиповогоОР(ТиповойОР, ОбъектРемонта);
КонецПроцедуры

&НаКлиенте
Процедура ЗапчастиХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.Запчасти.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.Запчасти.ТекущиеДанные.Номенклатура) Тогда	
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.Запчасти.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.Запчасти.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#Если Клиент Тогда
	МожноПечататьВизуализацию = Ложь;
	ПредСтраница = Элементы.СтраницаСостав;
#КонецЕсли

#КонецОбласти

