#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ТипПоискаДанных = Элементы.ТипПоискаДанных.СписокВыбора[0].Значение;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура СоздатьЭлемент(Команда)
	
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ТиповыеОР") Тогда
		ОткрытьФорму("Справочник.торо_ТиповыеОР.ФормаОбъекта",Новый Структура("Родитель", ?(Элементы.Дерево.ТекущиеДанные = Неопределено, Неопределено, Элементы.Дерево.ТекущиеДанные.Ссылка)), ЭтаФорма);		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	
	ОткрытьФорму("Справочник.торо_ТиповыеОР.ФормаГруппы",
	Новый Структура("ЭтоГруппа, Родитель", Истина,  ?(Элементы.Дерево.ТекущиеДанные = Неопределено, Неопределено, Элементы.Дерево.ТекущиеДанные.Ссылка)),
	ЭтаФорма);		
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	
	СсылкаКопирования = Неопределено;
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент;
	
	СсылкаКопирования = ?(ЭтотОбъект.ТекущийЭлемент.Имя = "Дерево", ?(Элементы.Дерево.ТекущиеДанные <> Неопределено, Элементы.Дерево.ТекущиеДанные.Ссылка, Неопределено), Элементы.Список.ТекущаяСтрока);
		
	Если СсылкаКопирования = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите типовой объект ремонта для копирования'"));
		Возврат;
	КонецЕсли;
	
	СписокПараметровКопирования = Новый СписокЗначений;
 	СписокПараметровКопирования.Добавить("Контролируемые показатели");
	Если НЕ УзнатьЭтоГруппа(СсылкаКопирования) Тогда
		СписокПараметровКопирования.Добавить("Запчасти");
	КонецЕсли;
	
	СписокПараметровКопирования.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("СкопироватьЗавершение", ЭтотОбъект, Новый Структура("СписокПараметровКопирования, СсылкаКопирования", СписокПараметровКопирования, СсылкаКопирования)), НСтр("ru = 'Переносить при копировании'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ТекДанные = Неопределено;
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент;
	
	ТекДанные = ?(ТекЭлементФормы.Имя = "Дерево", ?(ТекЭлементФормы.ТекущиеДанные <> Неопределено, ТекЭлементФормы.ТекущиеДанные.Ссылка, Неопределено), ТекЭлементФормы.ТекущаяСтрока);
	
	Если НЕ ТекДанные = Неопределено Тогда
		ПоказатьЗначение(Неопределено, ТекДанные);
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выберите типовой объект ремонта'");
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	
	ТекДанные = ?(ЭтаФорма.ТекущийЭлемент = Элементы.Список, Элементы.Список.ТекущаяСтрока, ?(Элементы.Дерево.ТекущиеДанные <> Неопределено, Элементы.Дерево.ТекущиеДанные.Ссылка, Неопределено));
		
	Если ПроверитьПравоНаСервере("ИнтерактивнаяПометкаУдаления") Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			КоллекцияЭлементов = ПолучитьМассивПодчиненных(ТекДанные);					
			Если КоллекцияЭлементов.Количество() > 0 Тогда
				Если УзнатьПометкаУдаления(ТекДанные) Тогда
					Ответ = Неопределено;

					ПоказатьВопрос(Новый ОписаниеОповещения("ПометкаУдаленияЗавершение1", ЭтотОбъект, Новый Структура("КоллекцияЭлементов, ТекДанные", КоллекцияЭлементов, ТекДанные)), НСтр("ru = 'Снять с элементов пометку на удаление'"), РежимДиалогаВопрос.ДаНет);
                    Возврат;	
				Иначе
					ПоказатьВопрос(Новый ОписаниеОповещения("ПометкаУдаленияЗавершение", ЭтотОбъект, Новый Структура("КоллекцияЭлементов, ТекДанные", КоллекцияЭлементов, ТекДанные)), НСтр("ru = 'Пометить элементы на удаление?'"), РежимДиалогаВопрос.ДаНет);
                    Возврат;
				КонецЕсли;
				ПометкаУдаленияФрагмент1(КоллекцияЭлементов, Ответ);


			Иначе						
				ПометитьНаУдалениеНаСервере(ТекДанные);
				Обновить(ЭтаФорма.Команды.Обновить);
			КонецЕсли;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выберите типовой объект ремонта'");
			Сообщение.Сообщить();
		КонецЕсли;
	Иначе
		 ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоложениеВИерархии(Команда)
	
	ТекДанные = ?(ЭтаФорма.ТекущийЭлемент = Элементы.Список, Элементы.Список.ТекущаяСтрока, ?(Элементы.Дерево.ТекущиеДанные <> Неопределено, Элементы.Дерево.ТекущиеДанные.Ссылка, Неопределено));
	Если ПроверитьПравоНаСервере("Редактирование") Тогда
		
		Если ТекДанные = Неопределено Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выберите типовой объект ремонта'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		ВыбранноеЗначение = Неопределено;

		
		ОткрытьФорму("Справочник.торо_ТиповыеОР.ФормаВыбораГруппы", , ЭтаФорма,,,, Новый ОписаниеОповещения("ИзменитьПоложениеВИерархииЗавершение", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархическийПросмотр(Команда)
	
	Если Элементы.ФормаИерархическийПросмотр.Пометка Тогда
		Элементы.Список.Отображение = ОтображениеТаблицы.Список;
		Элементы.ФормаИерархическийПросмотр.Пометка = Ложь;
	Иначе
		Элементы.Список.Отображение = ОтображениеТаблицы.ИерархическийСписок;
		Элементы.ФормаИерархическийПросмотр.Пометка = Истина;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ТекСтрокаДерево = Элементы.Дерево.ТекущаяСтрока;
	ТекСтрокаСписок = Элементы.Список.ТекущаяСтрока;
	
	Элементы.Дерево.Обновить();
	Элементы.Список.Обновить();
	
	Элементы.Дерево.ТекущаяСтрока = ТекСтрокаДерево;
	Элементы.Список.ТекущаяСтрока = ТекСтрокаСписок;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзКлассификатора(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораПользователяПриЗагрузкеКлассификатора", ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Загрузить классификатор типовых объектов ремонта?'"), РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Загрузка классификатора'"));
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОР(Команда)
	
	ТекЭлемент = Элементы.Список.ТекущаяСтрока;
	
	ЭтоЭлемент = ПолучитьДанныеЭлементаНаСервере(ТекЭлемент);
	Если ЭтоЭлемент <> Неопределено Тогда
		Если ЭтоЭлемент тогда
			ДанныеЗаполнения = Новый Структура;
			ДанныеЗаполнения.Вставить("Основание", ТекЭлемент);
			ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ДанныеЗаполнения);
			ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", ПараметрыФормы);	
		Иначе 
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Объект ремонта не может быть создан на основании группы, выберете элемент.'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийПрочихЭлементовФормы  	
&НаКлиенте
Процедура ЗначениеОтбораСпискаОбъектовРемонтаПриИзменении(Элемент)  	
	ОтборНаКлиентеСписокОР(Элемент.ТекстРедактирования);
КонецПроцедуры


&НаКлиенте
Процедура ЗначениеОтбораСпискаОбъектовРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	ОтборНаКлиентеСписокОР(Элемент.ТекстРедактирования);
КонецПроцедуры


&НаКлиенте
Процедура ЗначениеОтбораСпискаОбъектовРемонтаОчистка(Элемент, СтандартнаяОбработка)
	ОтборНаКлиентеСписокОР("");	
КонецПроцедуры


&НаКлиенте
Процедура ТипПоискаДанныхПриИзменении(Элемент)
	ОтборНаКлиентеСписокОР();
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере 
Функция ПолучитьДанныеЭлементаНаСервере(ТекЭлемент)
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТиповыеОР.ЭтоГруппа
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР КАК торо_ТиповыеОР
	               |ГДЕ
	               |	торо_ТиповыеОР.Ссылка = &Ссылка";
	запрос.УстановитьПараметр("Ссылка", ТекЭлемент);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		возврат Не Выборка.ЭтоГруппа;
	иначе
		Возврат неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СкопироватьЗавершение(Список1, ДополнительныеПараметры) Экспорт
    
    СписокПараметровКопирования = ДополнительныеПараметры.СписокПараметровКопирования;
    СсылкаКопирования = ДополнительныеПараметры.СсылкаКопирования;
    
    
    Если НЕ УзнатьЭтоГруппа(СсылкаКопирования) Тогда		
        ОткрытьФорму("Справочник.торо_ТиповыеОР.ФормаОбъекта",
        Новый Структура("Копированием, Объект, СписокПараметровКопирования", Истина,СсылкаКопирования,СписокПараметровКопирования),
        ЭтаФорма);
    Иначе
        ОткрытьФорму("Справочник.торо_ТиповыеОР.ФормаГруппы",
        Новый Структура("ЭтоГруппа, Копированием, Объект, СписокПараметровКопирования",Истина, Истина,СсылкаКопирования,СписокПараметровКопирования),
        ЭтаФорма);	
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция УзнатьЭтоГруппа(Объект)
	Возврат Объект.ЭтоГруппа;
КонецФункции

&НаСервере
Функция УзнатьПометкаУдаления(Объект)
	Возврат Объект.ПометкаУдаления;
КонецФункции

&НаКлиенте
Процедура ПометкаУдаленияЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КоллекцияЭлементов = ДополнительныеПараметры.КоллекцияЭлементов;
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    
    Ответ = РезультатВопроса;	
    
    ПометкаУдаленияФрагмент1(КоллекцияЭлементов, Ответ);

КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаленияФрагмент1(Знач КоллекцияЭлементов, Знач Ответ)
    
    ПометкаУдаленияФрагмент(КоллекцияЭлементов, Ответ);

КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КоллекцияЭлементов = ДополнительныеПараметры.КоллекцияЭлементов;
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    
    Ответ = РезультатВопроса;
    
    ПометкаУдаленияФрагмент(КоллекцияЭлементов, Ответ);

КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаленияФрагмент(Знач КоллекцияЭлементов, Знач Ответ)
    
    Перем Элем;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда							
        Для каждого Элем ИЗ КоллекцияЭлементов Цикл
            ПометитьНаУдалениеНаСервере(Элем);
        КонецЦикла;										
        Обновить(ЭтаФорма.Команды.Обновить);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере(Ссылка)
	
	ЭлемОбъект = Ссылка.ПолучитьОбъект();	
	Если ЭлемОбъект <> Неопределено Тогда
		Если Ссылка.ПометкаУдаления Тогда
			ЭлемОбъект.ПометкаУдаления = Ложь;
		Иначе
			ЭлемОбъект.ПометкаУдаления = Истина;
		КонецЕсли;
		ЭлемОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивПодчиненных(Ссылка)
	
	Массив = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТиповыеОР.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР КАК торо_ТиповыеОР
	               |ГДЕ
	               |	торо_ТиповыеОР.Ссылка В ИЕРАРХИИ(&Объект)";
	Запрос.УстановитьПараметр("Объект",Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Массив.Добавить(Выборка.Ссылка);
	КонецЦикла;
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ИзменитьПоложениеВИерархииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    
    ВыбранноеЗначение = Результат;
    
    Если НЕ ВыбранноеЗначение = Неопределено
        И НЕ ТекДанные = ВыбранноеЗначение Тогда
        
        ИзменитьРодителяНаСервере(ТекДанные,ВыбранноеЗначение);
        Обновить(ЭтаФорма.Команды.Обновить);			
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьРодителяНаСервере(СсылкаНаОбъект,Родитель)
	ОбъектТек = СсылкаНаОбъект.ПолучитьОбъект();
	ОбъектТек.Родитель = Родитель;
	ОбъектТек.Записать();	
КонецПроцедуры

&НаСервере
Функция ПроверитьПравоНаСервере(Право)
	
	Возврат ПравоДоступа(Право, Метаданные.Справочники.торо_ТиповыеОР);	
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораПользователяПриЗагрузкеКлассификатора(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТиповыеОРИзКлассификатораНаСервере();
		Обновить(Истина);
	КонецЕсли; 
		
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТиповыеОРИзКлассификатораНаСервере()
	МакетСписокСтандартныхТиповОбъектов = Справочники.торо_ТиповыеОР.ПолучитьМакет("СписокСтандартныхТиповОбъектов");
	ОбластьСтандартныеТипы = МакетСписокСтандартныхТиповОбъектов.ПолучитьОбласть("СтандартныеТипыОбъектов");
	Для Сч = 1 По ОбластьСтандартныеТипы.ВысотаТаблицы Цикл
		ИмяКласса = ОбластьСтандартныеТипы.Область(Сч, 1, Сч, 1).Текст;
		ЭлементСправочника = Справочники.торо_ТиповыеОР.НайтиПоНаименованию(ИмяКласса, Истина);
		Если ЭлементСправочника = Неопределено 
			ИЛИ ЭлементСправочника = Справочники.торо_ТиповыеОР.ПустаяСсылка() Тогда
			НовыйЭлемент = Справочники.торо_ТиповыеОР.СоздатьГруппу();
			НовыйЭлемент.Наименование = ИмяКласса;
			Попытка
				НовыйЭлемент.Записать();
			Исключение
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				Возврат;
			КонецПопытки;
		КонецЕсли;		
	КонецЦикла;	
	
	Для Сч=1 По ОбластьСтандартныеТипы.ВысотаТаблицы Цикл
		ИмяКласса = ОбластьСтандартныеТипы.Область(Сч, 1, Сч, 1).Текст;
		ИмяПодкласса = ОбластьСтандартныеТипы.Область(Сч, 2, Сч, 2).Текст;
		РодительЭлемента = Справочники.торо_ТиповыеОР.НайтиПоНаименованию(ИмяКласса, Истина);
		ЭлементВторогоУровня = Справочники.торо_ТиповыеОР.НайтиПоНаименованию(ИмяПодкласса, Истина, РодительЭлемента);
		Если ЭлементВторогоУровня = Неопределено 
			ИЛИ ЭлементВторогоУровня = Справочники.торо_ТиповыеОР.ПустаяСсылка() Тогда
			НовыйЭлементВторогоУровня = Справочники.торо_ТиповыеОР.СоздатьГруппу();
			НовыйЭлементВторогоУровня.Наименование = ИмяПодкласса;
			НовыйЭлементВторогоУровня.Родитель = РодительЭлемента; 
			Попытка
				НовыйЭлементВторогоУровня.Записать();
			Исключение
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки(), СтатусСообщения.ОченьВажное);
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаКлиентеСписокОР(Текст = Неопределено)
	Если Текст = Неопределено Тогда
		Текст = Элементы.ЗначениеОтбораСпискаОбъектовРемонта.ТекстРедактирования;		
	КонецЕсли;
	
	РеквизитПоиска = ТипПоискаДанных;
	СтруктураОтбора = Новый Структура;
	
	Список.Отбор.Элементы.Очистить();
	
	Если Текст <> "" Тогда
		Кнопка = Элементы.ФормаИерархическийПросмотр;
		Если Кнопка.Пометка Тогда
			ИерархическийПросмотр(ЭтотОбъект.Команды.ИерархическийПросмотр);
		КонецЕсли;
		
		ЭлемОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлемОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
		ЭлемОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(РеквизитПоиска);
		ЭлемОтбора.ПравоеЗначение = СокрЛП(Текст);
		ЭлемОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
КонецПРоцедуры   

 #КонецОбласти