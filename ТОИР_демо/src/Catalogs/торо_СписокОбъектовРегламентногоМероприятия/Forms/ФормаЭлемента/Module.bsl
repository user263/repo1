////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем ПараметрыТекущейСтроки;
// Переменные необходимые для избавления от модальности
&НаКлиенте
Перем РегламентноеМероприятиеДобавляется;
&НаКлиенте
Перем СписокОбъектовДобавляется;
&НаКлиенте
Перем ВыходныеДокументыДобавляется; 

&НаКлиенте
Перем СтруктураДанныхДоРедактирования;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	ПравоРедактирования = ПравоДоступа("Редактирование", Объект.Ссылка.Метаданные());
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		СсылкаНаЭлемент = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(РеквизитФормыВЗначение("Объект"));
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.ВидМероприятия,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.НормативныйРемонт,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособПланирования,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.ГрафикРемонтныхРабот,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособВыполнения,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СпособУчетаДатыОтсчета,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.НеУчаствуетВПланировании,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.НеУчитыватьПродолжительность,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.Продолжительность,
		|	торо_РегламентныеМероприятияИСпискиОбъектов.ИспользоватьКоэффициентыРемонтныхОсобенностей
		|ИЗ
		|	РегистрСведений.торо_РегламентныеМероприятияИСпискиОбъектов КАК торо_РегламентныеМероприятияИСпискиОбъектов
		|ГДЕ
		|	торо_РегламентныеМероприятияИСпискиОбъектов.СписокОбъектов = &СписокОбъектов";

	Запрос.УстановитьПараметр("СписокОбъектов", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент));
	РезультатЗапроса = Запрос.Выполнить();

	Таб = РезультатЗапроса.Выгрузить();

	РегламентныеМероприятия.Загрузить(Таб);

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ПредшествующиеРегламентныеМероприятия.ВидМероприятия,
		|	торо_ПредшествующиеРегламентныеМероприятия.СписокОбъектов,
		|	торо_ПредшествующиеРегламентныеМероприятия.ПредшествующийВидМероприятия
		|ИЗ
		|	РегистрСведений.торо_ПредшествующиеРегламентныеМероприятия КАК торо_ПредшествующиеРегламентныеМероприятия
		|ГДЕ
		|	торо_ПредшествующиеРегламентныеМероприятия.СписокОбъектов = &СписокОбъектов";

	Запрос.УстановитьПараметр("СписокОбъектов", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент));

	РезультатЗапроса = Запрос.Выполнить();

	ТЗ = РезультатЗапроса.Выгрузить();

	ПредшествующиеМероприятия.Загрузить(ТЗ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ВыходныеДокументы.СписокОбъектов,
		|	торо_ВыходныеДокументы.ВидМероприятия,
		|	торо_ВыходныеДокументы.ВыходнойДокумент
		|ИЗ
		|	РегистрСведений.торо_ВыходныеДокументы КАК торо_ВыходныеДокументы
		|ГДЕ
		|	торо_ВыходныеДокументы.СписокОбъектов = &СписокОбъектов";

	Запрос.УстановитьПараметр("СписокОбъектов", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент));

	РезультатЗапроса = Запрос.Выполнить();

	ТабЗнач = РезультатЗапроса.Выгрузить();
	ВыходныеДокументы.Загрузить(ТабЗнач);
	
	НаборЗаписей = РегистрыСведений.торо_МаршрутыРегламентныхМероприятий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СписокОбъектов.Установить(?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент));
	НаборЗаписей.Прочитать();
	СписокОбъектов.Загрузить(НаборЗаписей.Выгрузить());
	СписокОбъектов.Сортировать("НомерПоПорядку Возр");
		
	КоличествоОР = СписокОбъектов.Количество();

	МодифицированностьВыхДок = Ложь;
	МодифицированностьПредшРемонтов = Ложь;
	МодифицированностьРегМер = Ложь;
	
	фоИспользоватьКоэффициентыРемОсобенностей = ПолучитьФункциональнуюОпцию("торо_ИспользоватьКоэффициентыРемОсобенностей");
	
	Элементы.ИспользоватьКоэффициентыРемонтныхОсобенностей.Видимость = фоИспользоватьКоэффициентыРемОсобенностей;
	
	
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства
	
	флИндОбслужНачальный = Объект.ИндивидуальноеОбслуживаниеОР;
	
	УстановитьПараметрыЗапросовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если РегламентныеМероприятия.Количество() > 0 Тогда
		
		Элементы.РегламентныеМероприятия.ТекущаяСтрока = РегламентныеМероприятия[0];
		
	КонецЕсли;
	
	Массив = Новый Массив;
	Массив.Добавить("РегламентныеМероприятия");
	
	торо_СобытияФормКлиент.ЗаполнитьСтруктуруДанныхДоРедактирования(СтруктураДанныхДоРедактирования,Массив);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	СообщитьОВозможномИзмененииПродолжительностиРемонта();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	
	Если НЕ Объект.ЭтоГруппа Тогда
		
		СтруктураОбязательныхПолейНЗ = Новый Структура("ВидМероприятия, НормативныйРемонт, СпособПланирования, ГрафикРемонтныхРабот, СпособВыполнения",
														"Вид мероприятия", "Нормативный ремонт", "Способ планирования", "График ремонтных работ", "Способ выполнения");
		
		ПроверитьЗаполнениеОбязательныхПолейНаборовЗаписей(СтруктураОбязательныхПолейНЗ,
		"РегламентныеМероприятия",
		Отказ,
		НСтр("ru = 'Проверка заполнения таблицы регламентных мероприятий...'"));
		
		
		СтруктураОбязательныхПолейВД = Новый Структура("ВыходнойДокумент", "Выходной документ");
		
		ПроверитьЗаполнениеОбязательныхПолейНаборовЗаписей(СтруктураОбязательныхПолейВД,
		"ВыходныеДокументы",
		Отказ,
		НСтр("ru = 'Проверка заполнения таблицы выходных документов...'"));
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		флИндОбслужНачальный = ТекущийОбъект.ИндивидуальноеОбслуживаниеОР;
		флСписокОбъектовМодифицированность = Ложь;
		СписокМодифицированныхМероприятий.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	СообщитьОВозможномИзмененииПродолжительностиРемонта();
	флСписокОбъектовМодифицированность = Ложь;
	СписокМодифицированныхМероприятий.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Ссылка = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент);
	Если МодифицированностьРегМер Тогда
		
		Для каждого СтрТаб Из РегламентныеМероприятия Цикл
			Если НЕ ЗначениеЗаполнено(СтрТаб.ВидМероприятия) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать регламентные мероприятия: не заполнено поле ""Вид мероприятия"" в строке номер '") + Строка(СтрТаб.ПолучитьИдентификатор()+1));	
				Отказ = Истина;	
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрТаб.НормативныйРемонт) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать регламентные мероприятия: не заполнено поле ""Нормативный ремонт"" в строке номер '") + Строка(СтрТаб.ПолучитьИдентификатор()+1));
				Отказ = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрТаб.СпособПланирования) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать регламентные мероприятия: не заполнено поле ""Вид Планирования"" в строке номер '") + Строка(СтрТаб.ПолучитьИдентификатор()+1));
				Отказ = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрТаб.ГрафикРемонтныхРабот) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать регламентные мероприятия: не заполнено поле ""График ремонтных работ"" в строке номер '") + Строка(СтрТаб.ПолучитьИдентификатор()+1));
				Отказ = Истина;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрТаб.СпособВыполнения) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать регламентные мероприятия: не заполнено поле ""Способ выполнения"" в строке номер '") + Строка(СтрТаб.ПолучитьИдентификатор()+1));
				Отказ = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не Отказ Тогда
			Попытка
				
				ТаблицаЗначенийРегламентныеМероприятия = РегламентныеМероприятия.Выгрузить();
				МассивСтрок = ТаблицаЗначенийРегламентныеМероприятия.НайтиСтроки(Новый Структура("СписокОбъектов", Ссылка));
				ТаблицаБуфер = ТаблицаЗначенийРегламентныеМероприятия.Скопировать(МассивСтрок);
				
				НаборРегламентныхМероприятий = РегистрыСведений.торо_РегламентныеМероприятияИСпискиОбъектов.СоздатьНаборЗаписей();
				НаборРегламентныхМероприятий.Отбор.СписокОбъектов.Установить(Ссылка);
				НаборРегламентныхМероприятий.Загрузить(ТаблицаБуфер);
				НаборРегламентныхМероприятий.Записать();
				
				МодифицированностьРегМер = Ложь;
			Исключение
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать регламентные мероприятия для списка объектов: '") + ОписаниеОшибки());
				Отказ = Истина;
				
				Возврат;
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МодифицированностьПредшРемонтов Тогда 
		
		Попытка
			ТаблицаЗначенийВидыРемонтныхРаботДляОтсчета = ПредшествующиеМероприятия.Выгрузить();
			МассивСтрок = ТаблицаЗначенийВидыРемонтныхРаботДляОтсчета.НайтиСтроки(Новый Структура("СписокОбъектов", Объект.Ссылка));
			ТаблицаБуфер = ТаблицаЗначенийВидыРемонтныхРаботДляОтсчета.Скопировать(МассивСтрок);
			
			ТаблицаПроверки = РегламентныеМероприятия.Выгрузить();
			
			Сч = ТаблицаБуфер.Количество() - 1;
			Пока Сч >= 0 И ТаблицаБуфер.Количество() > 0 Цикл
				
				МассивПоиска = ТаблицаПроверки.НайтиСтроки(
				Новый Структура("СписокОбъектов, ВидМероприятия", Ссылка, ТаблицаБуфер[Сч].ВидМероприятия));
				
				Если МассивПоиска.Количество() = 0 Тогда
					
					ТаблицаБуфер.Удалить(ТаблицаБуфер[Сч]);
					
				КонецЕсли; 
				
				Сч = Сч - 1;
				
			КонецЦикла;
			
			НаборЗаписей = РегистрыСведений.торо_ПредшествующиеРегламентныеМероприятия.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СписокОбъектов.Установить(Ссылка);
			НаборЗаписей.Загрузить(ТаблицаБуфер);
			НаборЗаписей.Записать();
			
			МодифицированностьПредшРемонтов = Ложь;
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать предшествующие ремонты списка объектов: '") + ОписаниеОшибки());
			Отказ = Истина;
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьВыхДок Тогда 
		
		Попытка
			ТаблицаЗначенийВыходныеДокументы = ВыходныеДокументы.Выгрузить();
			МассивСтрок = ТаблицаЗначенийВыходныеДокументы.НайтиСтроки(Новый Структура("СписокОбъектов", Ссылка));
			ТаблицаБуфер = ТаблицаЗначенийВыходныеДокументы.Скопировать(МассивСтрок);
			
			ТаблицаПроверки = ВыходныеДокументы.Выгрузить();
			
			Сч = ТаблицаБуфер.Количество() - 1;
			Пока Сч >= 0 И ТаблицаБуфер.Количество() > 0 Цикл
				
				МассивПоиска = ТаблицаПроверки.НайтиСтроки(
				Новый Структура("СписокОбъектов, ВидМероприятия", Ссылка, ТаблицаБуфер[Сч].ВидМероприятия));
				
				Если МассивПоиска.Количество() = 0 Тогда
					
					ТаблицаБуфер.Удалить(ТаблицаБуфер[Сч]);
					
				КонецЕсли; 
				
				Сч = Сч - 1;
				
			КонецЦикла;
			
			НаборЗаписей = РегистрыСведений.торо_ВыходныеДокументы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СписокОбъектов.Установить(Ссылка);
			НаборЗаписей.Загрузить(ТаблицаБуфер);
			НаборЗаписей.Записать();
			
			МодифицированностьВыхДок = Ложь;
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать выходные документы списка объектов: '") + ОписаниеОшибки());
			Отказ = Истина;
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	
	Попытка
		
		ТабСписокОбъектов = СписокОбъектов.Выгрузить();
		МассивСтрок = ТабСписокОбъектов.НайтиСтроки(Новый Структура("СписокОбъектов", Ссылка));
		ТаблицаБуфер = ТабСписокОбъектов.Скопировать(МассивСтрок,"СписокОбъектов, НомерПоПорядку, ОбъектРемонта");
		
		НаборСпискаОбъектов = РегистрыСведений.торо_МаршрутыРегламентныхМероприятий.СоздатьНаборЗаписей();
		НаборСпискаОбъектов.Отбор.СписокОбъектов.Установить(Ссылка);
		НаборСпискаОбъектов.Загрузить(ТаблицаБуфер);
		НаборСпискаОбъектов.Записать();
		
	Исключение
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать предшествующие ремонты списка объектов: '") + ОписаниеОшибки());
		Отказ = Истина;
		Возврат;
		
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаКоэффициентыРемонтныхОсобенностей Тогда
		ОбновитьКоэффициентыРемонтныхОсобенностей();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредшествующиеМероприятия
&НаКлиенте
Процедура ПредшествующиеМероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ТекДанные = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Выберите вид мероприятия!'"), 60);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеМероприятияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		ТекДанныеНормативов = Элементы.РегламентныеМероприятия.ТекущиеДанные;
		ТекСтрока = Элемент.ТекущиеДанные;
		ТекСтрока.ВидМероприятия = ТекДанныеНормативов.ВидМероприятия;
		ТекСтрока.СписокОбъектов = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеМероприятияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ПредшествующиеМероприятия.ТекущиеДанные;
	
	Если Не (НоваяСтрока И ОтменаРедактирования) Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.ПредшествующийВидМероприятия) Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите предшествующий вид мероприятия!'"));
		КонецЕсли;
		
		НайденныеСтроки = ПредшествующиеМероприятия.НайтиСтроки(Новый Структура("ВидМероприятия, ПредшествующийВидМероприятия", ТекДанные.ВидМероприятия, ТекДанные.ПредшествующийВидМероприятия));
		Если НайденныеСтроки.Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выбранный предшествующий вид мероприятия уже добавлен!'"));
		КонецЕсли;
		
		МодифицированностьПредшРемонтов = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеМероприятияПослеУдаления(Элемент)
	МодифицированностьПредшРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеМероприятияПредшествующийВидМероприятияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокРегМероприятийДляВыбора = новый СписокЗначений;
	
	Для каждого текСтрока из РегламентныеМероприятия цикл
		СписокРегМероприятийДляВыбора.Добавить(текСтрока.ВидМероприятия);
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеМероприятия", СписокРегМероприятийДляВыбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеМероприятияПредшествующийВидМероприятияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СписокРегМероприятийДляВыбора = новый СписокЗначений;
	
	Для каждого текСтрока из РегламентныеМероприятия цикл
		СписокРегМероприятийДляВыбора.Добавить(текСтрока.ВидМероприятия);
	КонецЦикла;
	
	Параметры.Отбор.Вставить("Ссылка", СписокРегМероприятийДляВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеМероприятияПредшествующийВидМероприятияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	СписокРегМероприятийДляВыбора = новый СписокЗначений;
	
	Для каждого текСтрока из РегламентныеМероприятия цикл
		СписокРегМероприятийДляВыбора.Добавить(текСтрока.ВидМероприятия);
	КонецЦикла;
	
	Параметры.Отбор.Вставить("Ссылка", СписокРегМероприятийДляВыбора);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов
&НаКлиенте
Процедура СписокОбъектовПослеУдаления(Элемент)
	КоличествоОР = СписокОбъектов.Количество();
	флСписокОбъектовМодифицированность = Истина;
	МодифицированностьВыхДок = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НоваяСтрока И НЕ ОтменаРедактирования Тогда
		КоличествоОР = СписокОбъектов.Количество();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если Не СписокОбъектовДобавляется Тогда
			Отказ = Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("СписокОбъектовПередНачаломДобавленияЗавершение",ЭтотОбъект, Новый Структура("Элемент", Элемент)),
							НСтр("ru = 'Для продолжения необходимо записать элемент справочника. Записать?'"),
							РежимДиалогаВопрос.ДаНет);
		КонецЕсли;				
				
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Отказ = Ложь;
		
		СписокОбъектовДобавляется = Истина;
		Попытка
			
			ЗаписатьНаСервере();
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Отказ = Истина;
			
		КонецПопытки; 
		
		Если Не Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Элементы.СписокОбъектов.ДобавитьСтроку();
		КонецЕсли;
		
		СписокОбъектовДобавляется = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередУдалением(Элемент, Отказ)
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если Не Отказ Тогда
		ТекНомер = ТекСтрока.НомерПоПорядку;
		Для Каждого Операция Из СписокОбъектов Цикл
			Если Операция.НомерПоПорядку > ТекНомер Тогда
				Операция.НомерПоПорядку = Операция.НомерПоПорядку - 1;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		ТекДанные = Элементы.СписокОбъектов.ТекущиеДанные;
		ТекДанные.СписокОбъектов = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент);
		ТекДанные.НомерПоПорядку = СписокОбъектов.Количество();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ ОтменаРедактирования Тогда
		
		
		МассивСтрок = СписокОбъектов.НайтиСтроки(Новый Структура("СписокОбъектов, ОбъектРемонта", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент), Элемент.ТекущиеДанные.ОбъектРемонта));
		Если МассивСтрок.Количество() > 1 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя вводить повторяющиеся объекты ремонта!'"));
			Отказ = Истина;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка") Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать объект ремонта!'"));
			Отказ = Истина;
		КонецЕсли;
		
		Если НоваяСтрока и НЕ Отказ Тогда
			флСписокОбъектовМодифицированность = Истина;
		КонецЕсли;
		
		Если НЕ (Элемент.ТекущиеДанные = Неопределено Или Элементы.СписокОбъектов.ТекущиеДанные = Неопределено) Тогда
			МодифицированностьВыхДок = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовОбъектРемонтаПриИзменении(Элемент)
	флСписокОбъектовМодифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРегламентныеМероприятия
&НаКлиенте
Процедура РегламентныеМероприятияПослеУдаления(Элемент)
	
	МодифицированностьРегМер = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияНормативныйРемонтПриИзменении(Элемент)
	
	ТекДанные = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		ВМ = ТекДанные.ВидМероприятия;
		Если СписокМодифицированныхМероприятий.НайтиПоЗначению(ВМ) = Неопределено Тогда
			СписокМодифицированныхМероприятий.Добавить(ВМ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		ТекДанные = Элементы.РегламентныеМероприятия.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекДанные.СписокОбъектов) Тогда
			
			ТекДанные.СписокОбъектов = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент);
			
		КонецЕсли;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда

		ТекущееМероприятие = Элемент.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекущееМероприятие.ВидМероприятия) И НоваяСтрока Тогда
			
			ПредшествующееМероприятие = ПредшествующиеМероприятия.Добавить();
			ПредшествующееМероприятие.ВидМероприятия = ТекущееМероприятие.ВидМероприятия;
			ПредшествующееМероприятие.СписокОбъектов = Объект.Ссылка;
			ПредшествующееМероприятие.ПредшествующийВидМероприятия = ТекущееМероприятие.ВидМероприятия;
			
			Элементы.ПредшествующиеМероприятия.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидМероприятия, СписокОбъектов", ТекущееМероприятие.ВидМероприятия, ТекущееМероприятие.СписокОбъектов);
			
		КонецЕсли; 
		
		
		ГрафикРемРаб = ПолучитьЗначениеГрафикаРемРабНаСервере();
		
		Если НЕ ГрафикРемРаб = Неопределено Тогда
			Элемент.ТекущиеДанные.ГрафикРемонтныхРабот = ГрафикРемРаб;
		КонецЕсли;
		
		Элемент.ТекущиеДанные.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Хозспособ");
		
		Элемент.ТекущиеДанные.СпособУчетаДатыОтсчета = ПредопределенноеЗначение("Перечисление.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот.ИспользоватьДатуПланированияВКачествеДатыОтсчета");
		
		МодифицированностьРегМер = Истина;
		МодифицированностьПредшРемонтов = Истина;
		
		Если НоваяСтрока Тогда
			
			Элем = СписокМодифицированныхМероприятий.НайтиПоЗначению(ТекущееМероприятие.ВидМероприятия);
			
			Если Элем <> Неопределено Тогда
				СписокМодифицированныхМероприятий.Удалить(Элем);
			КонецЕсли;
			
		КонецЕсли;
		
		РегламентныеМероприятияПриАктивизацииСтроки(Элементы.РегламентныеМероприятия);			
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	Элементы.РегламентныеМероприятияИзменить.Доступность = (НЕ (ТекСтрока<>Неопределено И ТипЗнч(ТекСтрока.СписокОбъектов)=Тип("СправочникСсылка.торо_ТиповыеОР")));
	Элементы.РегламентныеМероприятияУдалить.Доступность = (НЕ (ТекСтрока<>Неопределено И ТипЗнч(ТекСтрока.СписокОбъектов)=Тип("СправочникСсылка.торо_ТиповыеОР")));
		
	Если Не ТекСтрока = Неопределено Тогда 		
		торо_ОбщегоНазначенияКлиент.ЗапомнитьПараметрыТекущейСтроки("СтрРеглМероприятий", Элементы.РегламентныеМероприятия.ТекущаяСтрока, ПараметрыТекущейСтроки);
		
		Элементы.ПредшествующиеМероприятия.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидМероприятия, СписокОбъектов", ТекСтрока.ВидМероприятия, ТекСтрока.СписокОбъектов);
		
		Элементы.ВыходныеДокументы.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидМероприятия, СписокОбъектов", ТекСтрока.ВидМероприятия, ТекСтрока.СписокОбъектов);
		
		ОбновитьОтображениеПродолжительности();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не РегламентноеМероприятиеДобавляется Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("РегламентныеМероприятияПередНачаломДобавленияЗавершение",ЭтотОбъект),
					   НСтр("ru = 'Для продолжения необходимо записать элемент справочника. Записать?'"), РежимДиалогаВопрос.ДаНет);		
		КонецЕсли;			   
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Попытка
			
			ЗаписатьНаСервере();
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Отказ = Истина;
			
		КонецПопытки;
		
		РегламентноеМероприятиеДобавляется = Истина;
		
		Если Не Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Элементы.РегламентныеМероприятия.ДобавитьСтроку();
		КонецЕсли;
	КонецЕсли;
	
	РегламентноеМероприятиеДобавляется = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПередУдалением(Элемент, Отказ)
	МассивУдаляемыхСтрок = ПредшествующиеМероприятия.НайтиСтроки(Новый Структура("ВидМероприятия, СписокОбъектов", Элементы.РегламентныеМероприятия.ТекущиеДанные.ВидМероприятия, Элементы.РегламентныеМероприятия.ТекущиеДанные.СписокОбъектов));
	Для каждого Элем Из МассивУдаляемыхСтрок Цикл
		ПредшествующиеМероприятия.Удалить(Элем);
	КонецЦикла;
	
	МассивУдаляемыхСтрок = ВыходныеДокументы.НайтиСтроки(Новый Структура("ВидМероприятия, СписокОбъектов", Элементы.РегламентныеМероприятия.ТекущиеДанные.ВидМероприятия, Элементы.РегламентныеМероприятия.ТекущиеДанные.СписокОбъектов));
	Для каждого Элем Из МассивУдаляемыхСтрок Цикл
		ВыходныеДокументы.Удалить(Элем);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	
	Если Не Значениезаполнено(ТекДанные.ВидМероприятия) И НоваяСтрока Тогда
		Отказ = Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите вид мероприятия!'"));
	КонецЕсли;

	Если НЕ ОтменаРедактирования Тогда 		
				
		Если ТекДанные <> Неопределено Тогда
			
			МассивСтрок = РегламентныеМероприятия.НайтиСтроки(Новый Структура("ВидМероприятия", ТекДанные.ВидМероприятия));
			Если МассивСтрок.Количество() > 1 Тогда
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный вид мероприятия уже добавлен!'"));
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;  		
		
		Если Не Отказ И Не НоваяСтрока И СтруктураДанныхДоРедактирования[Элемент.Имя] <> Неопределено
			И СтруктураДанныхДоРедактирования[Элемент.Имя].ВидМероприятия <> ТекДанные.ВидМероприятия Тогда
			СтарыйВМ = СтруктураДанныхДоРедактирования[Элемент.Имя].ВидМероприятия;
			НайденныеСтроки = ПредшествующиеМероприятия.НайтиСтроки(Новый Структура("ВидМероприятия", СтарыйВМ));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ВидМероприятия = ТекДанные.ВидМероприятия
			КонецЦикла;
			НайденныеСтроки = ПредшествующиеМероприятия.НайтиСтроки(Новый Структура("ПредшествующийВидМероприятия", СтарыйВМ));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ПредшествующийВидМероприятия = ТекДанные.ВидМероприятия;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияНормативныйРемонтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", Новый Структура("ОтборПоСтатусам", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует")), Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ГрафикРемонтныхРаботПриИзменении(Элемент)
	МодифицированностьРегМер = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособВыполненияПриИзменении(Элемент)
	МодифицированностьРегМер = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособУчетаДатыОтсчетаПриИзменении(Элемент)
	МодифицированностьРегМер = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьВПланированииПриИзменении(Элемент)
	МодифицированностьРегМер = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриПланированииГрафикРемонтныхРаботПриИзменении(Элемент)
	МодифицированностьРегМер = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПродолжительностьПриИзменении(Элемент)
	МодифицированностьРегМер = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКоэффициентыРемонтныхОсобенностейПриИзменении(Элемент)
	МодифицированностьРегМер = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеДокументыПослеУдаления(Элемент)
	МодифицированностьВыхДок = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеМероприятияСпособПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования", "СписокРегламентныхМероприятий");	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_СпособыПланированияРемонтныхРабот.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыходныеДокументы
&НаКлиенте
Процедура ВыходныеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ВыходныеДокументыДобавляется Тогда
			Отказ = Истина;
			ПоказатьВопрос(Новый ОписаниеОповещения("ВыходныеДокументыПередНачаломДобавленияЗавершение",ЭтотОбъект),
							НСтр("ru = 'Для продолжения необходимо записать элемент справочника. Записать?'"),
							РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеДокументыПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
		
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		Отказ = Ложь;
		
		Попытка
			ВыходныеДокументыДобавляется = Истина;
			ЗаписатьНаСервере();
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Отказ = Истина;
			
		КонецПопытки; 
		
		Если Не Отказ И ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Элементы.ВыходныеДокументы.ДобавитьСтроку();
		КонецЕсли;
		
		ВыходныеДокументыДобавляется = Ложь;
		
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ВыходныеДокументыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
	
		ТекДанныеРегМероприятий = Элементы.РегламентныеМероприятия.ТекущиеДанные;
		Если ТекДанныеРегМероприятий <> Неопределено Тогда
		    ТекСтрока = Элемент.ТекущиеДанные;
			ТекСтрока.ВидМероприятия = ТекДанныеРегМероприятий.ВидМероприятия;
		    ТекСтрока.СписокОбъектов = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыходныеДокументыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	ТекущДанные = Элементы.РегламентныеМероприятия.ТекущиеДанные;
	Если НЕ ОтменаРедактирования И НЕ ТекДанные = Неопределено И НЕ ТекущДанные = Неопределено Тогда
		Если не ЗначениеЗаполнено(ТекДанные.ВыходнойДокумент) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен выходной документ!'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		МассивСтрок = ВыходныеДокументы.НайтиСтроки(Новый Структура("СписокОбъектов, ВидМероприятия, ВыходнойДокумент", ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент), ТекущДанные.ВидМероприятия, ТекДанные.ВыходнойДокумент));
		Если МассивСтрок.Количество() > 1 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя вводить повторяющиеся выходные документы!'"));
			Отказ = Истина;
		КонецЕсли;
		
		МодифицированностьВыхДок = Истина;
		
		Если НоваяСтрока Тогда 
			ТекДанные.ВидМероприятия = ТекущДанные.ВидМероприятия;
			ТекДанные.СписокОбъектов = ?(ЗначениеЗаполнено(Объект.Ссылка), Объект.Ссылка, СсылкаНаЭлемент);
			Элементы.ВыходныеДокументы.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидМероприятия, СписокОбъектов", ТекущДанные.ВидМероприятия, ТекущДанные.СписокОбъектов);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредстоящиеМероприятия

&НаКлиенте
Процедура ПредстоящиеМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыполненныеМероприятия

&НаКлиенте
Процедура ВыполненныеМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Перерассчитать(Команда)
	
	МассивОР = Новый Массив;
	Для каждого Стр Из СписокОбъектов Цикл
	
		МассивОР.Добавить(Стр.ОбъектРемонта);
	
	КонецЦикла; 
	
	Если МассивОР.Количество() = 0 Тогда 
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен список объектов ремонта. Расчет не выполнен!'"));
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.РегламентныеМероприятия.ТекущиеДанные.НормативныйРемонт )
		ИЛИ НЕ ЗначениеЗаполнено(Элементы.РегламентныеМероприятия.ТекущиеДанные.ВидМероприятия) Тогда
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не все поля заполнены для регламентного мероприятия! Расчет не выполнен!'"));
		Возврат;
		
	КонецЕсли;
	
	ПродолжительностьРемонта = ПерерассчитатьНаСервере(Объект.ИндивидуальноеОбслуживаниеОР,
					МассивОР,
					Элементы.РегламентныеМероприятия.ТекущиеДанные.НормативныйРемонт,
					Элементы.РегламентныеМероприятия.ТекущиеДанные.ВидМероприятия,
					КоличествоОР);
	Элементы.РегламентныеМероприятия.ТекущиеДанные.Продолжительность = ПродолжительностьРемонта;
	МодифицированностьРегМер = Истина;
	Модифицированность = Истина;
	ОбновитьОтображениеПродолжительности();	
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеАкты(Команда)
	
	Кнопка = Элементы.ВыполненныеМероприятияОтображатьТолькоПроведенныеАкты;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеГрафикиРМ(Команда)
	
	Кнопка = Элементы.ПредстоящиеМероприятияОтображатьТолькоПроведенныеГрафикиРМ;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервереБезКонтекста
Функция ПерерассчитатьНаСервере(ИндивидОбслуживаниеОР, МассивОР, ТекНормРемонт, ТекВидМероприятия, КолОР)
	
	Если ИндивидОбслуживаниеОР Тогда
		ТаблицаОбъектов = Новый ТаблицаЗначений;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
		ТипКолонки = Новый ОписаниеТипов(МассивТипов);
		ТаблицаОбъектов.Колонки.Добавить("ОбъектРемонта", ТипКолонки);
		Для каждого Элем Из МассивОР Цикл
		
			ТаблицаОбъектов.Добавить().ОбъектРемонта = Элем;
		
		КонецЦикла; 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОбъектов.ОбъектРемонта
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ВерсииТехКартСрезПоследних.ТехКарта
		|ПОМЕСТИТЬ СтандартныйРемонт
		|ИЗ
		|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(, ИдентификаторТехКарты = &НормРемонт) КАК торо_ВерсииТехКартСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА торо_НормативныеРемонтыОборудования.НормативныйРемонт ЕСТЬ NULL 
		|			ТОГДА &НормРемонт
		|		ИНАЧЕ торо_НормативныеРемонтыОборудования.НормативныйРемонт
		|	КОНЕЦ КАК НормативныйРемонт,
		|	ТаблицаОбъектов.ОбъектРемонта,
		|	ЕСТЬNULL(торо_ВерсииТехКартСрезПоследних.ТехКарта, СтандартныйРемонт.ТехКарта) КАК ТехКарта
		|ПОМЕСТИТЬ НормРем
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних КАК торо_ВерсииТехКартСрезПоследних
		|			ПО торо_НормативныеРемонтыОборудования.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
		|		ПО ТаблицаОбъектов.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
		|			И (торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ СтандартныйРемонт КАК СтандартныйРемонт
		|		ПО (ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(торо_ТехКарты.НормаВремени) КАК НормаВремени
		|ИЗ
		|	НормРем КАК НормРем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты КАК торо_ТехКарты
		|		ПО НормРем.ТехКарта = торо_ТехКарты.Ссылка";
		
		Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектов);
		Запрос.УстановитьПараметр("НормРемонт", ТекНормРемонт);
		Запрос.УстановитьПараметр("ВидРемонта", ТекВидМероприятия);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Выборка.НормаВремени;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(торо_ТехКарты.НормаВремени) КАК НормаВремени
		|ИЗ
		|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(, ИдентификаторТехКарты = &ТехКарта) КАК торо_ВерсииТехКартСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты КАК торо_ТехКарты
		|		ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты.Ссылка";
		
		Запрос.УстановитьПараметр("ТехКарта", ТекНормРемонт);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.НормаВремени * КолОР;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОтображениеПродолжительности()
	
	Если Элементы.РегламентныеМероприятия.ТекущиеДанные = Неопределено Тогда
		Элементы.Перерассчитать.Доступность = Ложь;
		Элементы.НормаВремени.Заголовок = НСтр("ru = 'Не выбран вид мероприятия'");
	Иначе
		Элементы.Перерассчитать.Доступность = Истина И ПравоРедактирования;	
		СтроковоеПредставлениеНормы = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Элементы.РегламентныеМероприятия.ТекущиеДанные.Продолжительность);
		Элементы.НормаВремени.Заголовок	= СтроковоеПредставлениеНормы;	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНаСервере()
	
	Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеГрафикаРемРабНаСервере()
	
	Возврат Константы.торо_ГрафикРемонтныхРабот.Получить();
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеОбязательныхПолейНаборовЗаписей(СтрктураОбязательныхПолей, ИмяРеквизита, Отказ, Заголовок)
	
	ТаблицаДляПроверки = ЭтаФорма[ИмяРеквизита].Выгрузить();
	
	ПризнакОшибки = Ложь;
	
	Для Каждого СтрокаНЗ Из ТаблицаДляПроверки Цикл
		
		Для Каждого КлючИЗначение Из СтрктураОбязательныхПолей Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаНЗ[КлючИЗначение.Ключ]) Тогда
				
				Если Не ПризнакОшибки Тогда
					
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Заголовок);
					ПризнакОшибки = Истина;
					
				КонецЕсли;
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Строка № %1. Не заполнено значение реквизита ""%2""!'"),Строка(ТаблицаДляПроверки.Индекс(СтрокаНЗ) + 1),КлючИЗначение.Значение), СтатусСообщения.Важное);
				Отказ = Истина;
				
			КонецЕсли; 
			
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СообщитьОВозможномИзмененииПродолжительностиРемонта()
	
	Если Объект.ИндивидуальноеОбслуживаниеОР <> флИндОбслужНачальный Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Изменен флаг ""Индивидуальное обслуживание ОР"", перерассчитайте продолжительность ремонтов!'"));
	КонецЕсли;
	
	Если флСписокОбъектовМодифицированность Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Изменен состав списка объектов ремонта, перерассчитайте продолжительность ремонтов!'"));
	КонецЕсли;
	
	Если НЕ Объект.ИндивидуальноеОбслуживаниеОР И СписокМодифицированныхМероприятий.Количество() Тогда
		
		Для каждого Элем Из СписокМодифицированныхМероприятий Цикл
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Изменена технологическая карта для вида мероприятия ""%1"", перерассчитайте продолжительность ремонта!'"),Элем.Значение));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СпособУчетаДатыОтсчетаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	сз = Новый Массив;
	сз.Добавить(ПредопределенноеЗначение(
		"Перечисление.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот.НеИспользоватьДатуВводаВЭксплуатацию"));
	сз.Добавить(ПредопределенноеЗначение(
		"Перечисление.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот.ИспользоватьДатуПланированияВКачествеДатыОтсчета"));

	ПараметрыПолученияДанных.отбор = новый Структура("Ссылка",сз);
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоэффициентыРемонтныхОсобенностей()
	
	Перем МассивКоэффициентов;
	
	РассчитываемыеКоэффициенты.Очистить();
	УстанавливаемыеКоэффициенты.Очистить();
	
	МассивКоэффициентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента КАК Ссылка,
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ЗначениеКоэффициента,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.Рассчитываемый,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ЗависитОтНаработки,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.СчитатьВозрастОтДатыИзготовления,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьГрафикРаботыОборудования,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьПростоиОборудования,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ПараметрНаработки
	|ИЗ
	|	РегистрСведений.торо_ЗначенияКоэффициентовРемонтныхОсобенностей.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта И Использование) КАК торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ВидыКоэффициентовРемонтныхОсобенностей КАК торо_ВидыКоэффициентовРемонтныхОсобенностей
	|		ПО торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента = торо_ВидыКоэффициентовРемонтныхОсобенностей.Ссылка
	|ГДЕ
	|	НЕ торо_ВидыКоэффициентовРемонтныхОсобенностей.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Рассчитываемый Тогда
					
			НС = РассчитываемыеКоэффициенты.Добавить();
			НС.ВидКоэффициента = Выборка.Ссылка;
			НС.ЗначениеКоэффициента = Выборка.ЗначениеКоэффициента;
			НС.Коэффициент = Выборка.ЗначениеКоэффициента.Коэффициент;
			
			МассивКоэффициентов.Добавить(НС.Коэффициент);			
		Иначе
			НС = УстанавливаемыеКоэффициенты.Добавить();
			НС.ВидКоэффициента = Выборка.Ссылка;
			НС.ЗначениеКоэффициента = Выборка.ЗначениеКоэффициента;
			НС.Коэффициент = Выборка.ЗначениеКоэффициента.Коэффициент;
			
			МассивКоэффициентов.Добавить(НС.Коэффициент);
		КонецЕсли;
	КонецЦикла;
	
	ИтогКоэф = 1;
	Для каждого Элем Из МассивКоэффициентов Цикл
		
		ИтогКоэф = ИтогКоэф * Элем;
		
	КонецЦикла; 
	
	Если НЕ МассивКоэффициентов.Количество() = 0 Тогда
		ИтоговыйКоэффициент = ИтогКоэф;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапросовНаСервере()
	
	Кнопка = Элементы.ВыполненныеМероприятияОтображатьТолькоПроведенныеАкты;
	ВыполненныеМероприятия.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	ВыполненныеМероприятия.Параметры.УстановитьЗначениеПараметра("СписокОбъектов", Объект.Ссылка);
	
	Кнопка = Элементы.ПредстоящиеМероприятияОтображатьТолькоПроведенныеГрафикиРМ;
	ПредстоящиеМероприятия.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	ПредстоящиеМероприятия.Параметры.УстановитьЗначениеПараметра("СписокОбъектов", Объект.Ссылка);
	
КонецПроцедуры


СписокОбъектовДобавляется = Ложь;
РегламентноеМероприятиеДобавляется = Ложь;
ВыходныеДокументыДобавляется = Ложь;
#КонецОбласти

