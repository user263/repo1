
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекстФормулы = Параметры.ТекстФормулы;
	Показатель = Параметры.Показатель;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПоказателиKPI.Ссылка,
	|	торо_ПоказателиKPI.ИдентификаторДляФормул,
	|	торо_ПоказателиKPI.ВариантЗаполнения,
	|	торо_ПоказателиKPI.ЕдиницаИзмерения
	|ИЗ
	|	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	|ГДЕ
	|	торо_ПоказателиKPI.Ссылка <> &Ссылка
	|	И торо_ПоказателиKPI.ИдентификаторДляФормул <> """"
	|	И НЕ торо_ПоказателиKPI.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Ссылка", Показатель);
	ВыборкаПоказателей = Запрос.Выполнить().Выбрать();
	
	ДеревоОперандовЗначение = РеквизитФормыВЗначение("ДеревоОперандов");
	
	Пока ВыборкаПоказателей.Следующий() Цикл
		ДоступныеЗначенияАнализа = Новый СписокЗначений;
		ДоступныеОбъектыАнализа = Новый СписокЗначений;
		
		торо_ПоказателиKPI.ЗаполнитьДоступныеЗначенияИОбъектыАнализа(ВыборкаПоказателей.Ссылка, ДоступныеЗначенияАнализа, ДоступныеОбъектыАнализа);
		
		СтрокаПоказателя = ДеревоОперандовЗначение.Строки.Найти(ВыборкаПоказателей.Ссылка, "ПоказательСсылка");
		Если СтрокаПоказателя = Неопределено Тогда
			СтрокаПоказателя = ДеревоОперандовЗначение.Строки.Добавить();
			СтрокаПоказателя.Представление = ВыборкаПоказателей.ИдентификаторДляФормул 
				+ ?(ЗначениеЗаполнено(ВыборкаПоказателей.ЕдиницаИзмерения)," ("+ВыборкаПоказателей.ЕдиницаИзмерения+")","");
			СтрокаПоказателя.Показатель = ВыборкаПоказателей.ИдентификаторДляФормул;
			СтрокаПоказателя.ПоказательСсылка = ВыборкаПоказателей.Ссылка;
		КонецЕсли;
		
		Для каждого ЭлементСписка из ДоступныеЗначенияАнализа Цикл
			НайденнаяСтрока = СтрокаПоказателя.Строки.Найти(ЭлементСписка.Значение, "Ресурс");
			Если НайденнаяСтрока = Неопределено Тогда
				НовСтр = СтрокаПоказателя.Строки.Добавить();
				НовСтр.Представление = ЭлементСписка.Значение;
				НовСтр.Показатель = ВыборкаПоказателей.ИдентификаторДляФормул;
				НовСтр.Ресурс = ЭлементСписка.Значение;
				НовСтр.ПоказательСсылка = ВыборкаПоказателей.Ссылка;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	ДеревоОперандовЗначение.Строки.Сортировать("Представление", Истина);
	
	ЗначениеВРеквизитФормы(ДеревоОперандовЗначение, "ДеревоОперандов"); 
	
	ДеревоОператоровЗначение = торо_РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	ИнициализироватьДереваОператоров(ДеревоОператоровЗначение);
	ЗначениеВРеквизитФормы(ДеревоОператоровЗначение, "Операторы");
	
	ТипРезультата = Новый ОписаниеТипов("Число");
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ОповеститьОВыборе(ТекстФормулы);
	Если Открыта() Тогда
		Закрыть(ТекстФормулы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	
	ОчиститьСообщения();
	торо_РаботаСФормуламиКлиент.ПроверитьФормулуИнтерактивно(ТекстФормулы, ПолучитьМассивОперандов(), "Формула", Ложь, ПараметрыПроверкиФормулы(ЭтаФорма));
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ДеревоОперандовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьТекстВФормулу(торо_РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(
	                                                   СтрокаРодитель.Показатель + "." + ТекущиеДанные.Ресурс));

КонецПроцедуры

&НаКлиенте
Процедура ДеревоОперандовНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ПараметрыПеретаскивания.Значение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДерева = ДеревоОперандов.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение);
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда
		Выполнение = Ложь;
		Возврат;
	Иначе
		ПараметрыПеретаскивания.Значение = 
		   торо_РаботаСФормуламиКлиентСервер.ПолучитьТекстОперандаДляВставки(СтрокаРодитель.Показатель +"." + СтрокаДерева.Ресурс);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.Операторы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВставитьТекстВФормулу(ТекущиеДанные.Оператор, ТекущиеДанные.Сдвиг);

КонецПроцедуры

&НаКлиенте
Процедура ОператорыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Оператор) Тогда
		ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.Оператор;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПоказатель(Команда)
	
	ТекущиеДанные = Элементы.ДеревоОперандов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(,ТекущиеДанные.ПоказательСсылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Инициализация дерева операторов
//
// Параметры:
// Дерево - ДеревоЗначений - Дерево значений.
//
Процедура ИнициализироватьДереваОператоров(Дерево)
	
	ГруппаОператоров = торо_РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Операторы'"));
	
	торо_РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "+", " + ");
	торо_РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "-", " - ");
	торо_РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "*", " * ");
	торо_РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, "/", " / ");
			
	ГруппаОператоров = торо_РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, НСтр("ru='Функции'"));
	торо_РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Максимум'"),    НСтр("ru='Макс(,)'"), 2);
	торо_РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Минимум'"),     НСтр("ru='Мин(,)'"),  2);
	торо_РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Округление'"),  НСтр("ru='Окр(,)'"),  2);
	торо_РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Целая часть'"), НСтр("ru='Цел()'"),   1);
	торо_РаботаСФормулами.ДобавитьОператор(Дерево, ГруппаОператоров, НСтр("ru='Условие'"),     "?(,,)",              3);
	
КонецПроцедуры

&НаКлиенте                                                                  
Процедура ВставитьТекстВФормулу(ТекстДляВставки, Сдвиг = 0)
	
	СтрокаНач = 0;
	СтрокаКон = 0;
	КолонкаНач = 0;
	КолонкаКон = 0;
	
	Элементы.ТекстФормулы.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	Если (КолонкаКон = КолонкаНач) И (КолонкаКон + СтрДлина(ТекстДляВставки)) > Элементы.ТекстФормулы.Ширина / 8 Тогда
		Элементы.ТекстФормулы.ВыделенныйТекст = "";
	КонецЕсли;
		
	Элементы.ТекстФормулы.ВыделенныйТекст = ТекстДляВставки;
	
	Если Не Сдвиг = 0 Тогда
		Элементы.ТекстФормулы.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		Элементы.ТекстФормулы.УстановитьГраницыВыделения(СтрокаНач, КолонкаНач - Сдвиг, СтрокаКон, КолонкаКон - Сдвиг);
	КонецЕсли;
		
	ТекущийЭлемент = Элементы.ТекстФормулы;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивОперандов()
	
	МассивОперандов = торо_РаботаСФормуламиКлиентСервер.МассивОперандовДляДерева(ДеревоОперандов);
	
	Возврат МассивОперандов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПроверкиФормулы(Форма)
	
	ДополнительныеПараметры = Новый Структура;
	
	Если ЗначениеЗаполнено(Форма.ТипРезультата) Тогда
		
		ДополнительныеПараметры.Вставить("ТипРезультата", Форма.ТипРезультата);
		
	КонецЕсли;
	
	Возврат ДополнительныеПараметры;
	
КонецФункции

#КонецОбласти

