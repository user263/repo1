#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПостроитьДерево();	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьРеквизитаОР();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура СтроитсяАвтоматическиПриИзменении(Элемент)
	
	ИеррахияДляВводаОР = ПолучитьИерархиюДляВводаНовыхОр();
	
	Если Объект.Ссылка = ИеррахияДляВводаОР Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Эта иерархия выбрана для добавления новых ОР и не может строиться автоматически. Выбор иерархии для вовода новых ОР находится в блоке настроек параметров подсистемы ТОиР.'"));
		Объект.СтроитсяАвтоматически = Ложь;
		Возврат;
	КонецЕсли;
	
	стрВопрос = "";
	Если Объект.СтроитсяАвтоматически Тогда
		стрВопрос = НСтр("ru = 'Иерархия будет строиться автоматически, продолжить?'")
	Иначе
		стрВопрос = НСтр("ru = 'Иерархия очистится, продолжить?'")
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаИзмененияФлагаСтроитсяАвтоматически", ЭтотОбъект);
	Если ДеревоПроизвольнойИерархии.ПолучитьЭлементы().Количество() > 0 Тогда
		ПоказатьВопрос(Оповещение, стрВопрос, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьРеквизитаОР();
	
	Если Объект.СтроитсяАвтоматически Тогда
		Объект.ИзменяетсяДокументами = Ложь;
	КонецЕсли;
	
	ДеревоПроизвольнойИерархии.ПолучитьЭлементы().Очистить();
	Если ЗначениеЗаполнено(Объект.РеквизитОР) Тогда
		ПостроитьДерево();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитОРНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗначРеквизита = Неопределено;

	ОткрытьФорму("Справочник.торо_СтруктурыОР.Форма.ФормаВыбораРеквизитаОР", Новый Структура("ТекЗнач", Объект.РеквизитОР), Элемент,,, ВариантОткрытияОкна.ОтдельноеОкно, Новый ОписаниеОповещения("РеквизитОРНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменяетсяДокументамиПриИзменении(Элемент)
	
	стрВопрос = "";
	Если Объект.ИзменяетсяДокументами Тогда
		стрВопрос = НСтр("ru='Будет создан документ добавления существующих объектов ремонта в иерархию. Это может занять продолжительное время. Продолжить?'")
	Иначе
		стрВопрос = НСтр("ru='История добавления объектов в иерархию и их перемещения по иерархии будет утеряна. Продолжить?'")
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаИзмененияФлагаИзменяетсяДокументами", ЭтотОбъект);
	Если ДеревоПроизвольнойИерархии.ПолучитьЭлементы().Количество() > 0 Тогда
		ПоказатьВопрос(Оповещение, стрВопрос, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПостроитьДерево();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитОРПриИзменении(Элемент)
	ИерархическийСправочник = ПолучитьИерархическийЛиСправочник(Объект.ТипРеквизитаОР);
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаИзмененияФлагаИзменяетсяДокументами(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Объект.ИзменяетсяДокументами = НЕ Объект.ИзменяетсяДокументами;
		Возврат; 
	КонецЕсли;
	
	Если Объект.ИзменяетсяДокументами Тогда
		ИерархияТеперьСИсториейИзменений();
	Иначе
		ИерархияТеперьБезИсторииИзменений();
	КонецЕсли;
	
	ПостроитьДерево();
КонецПроцедуры

&НаКлиенте 
Процедура ОбработкаИзмененияФлагаСтроитсяАвтоматически(Результат, ДополнительныеПараметры) экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда 
		Объект.СтроитсяАвтоматически = НЕ Объект.СтроитсяАвтоматически;
		Возврат;
	КонецЕсли;	
	
	Если НЕ Объект.СтроитсяАвтоматически Тогда
		ОчиститьРегистры();
	КонецЕсли;
	
	УстановитьДоступностьРеквизитаОР();
	Если Объект.СтроитсяАвтоматически Тогда
		Объект.ИзменяетсяДокументами = Ложь;
	Иначе 
		Объект.РеквизитОР = "";
	КонецЕсли;
	
	ДеревоПроизвольнойИерархии.ПолучитьЭлементы().Очистить();
	Если ЗначениеЗаполнено(Объект.РеквизитОР) Тогда
		ПостроитьДерево();	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Функция ПолучитьИерархиюДляВводаНовыхОр()
	Возврат Константы.торо_ИерархияДляВводаНовыхОР.Получить();
КонецФункции

&НаКлиенте
Процедура РеквизитОРНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗначРеквизита = Результат;	
    
    Если ЗначРеквизита <> Неопределено Тогда
        
        Объект.РеквизитОР     = ЗначРеквизита.Реквизит;
        Объект.ТипРеквизитаОР = ЗначРеквизита.ТипРеквизита; 
        
    КонецЕсли;

	ПостроитьДерево();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьРеквизитаОР()
	
	Элементы.РеквизитОР.Доступность = Объект.СтроитсяАвтоматически;
	Элементы.ИзменяетсяДокументами.Доступность = НЕ Объект.СтроитсяАвтоматически;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДерево()
	
	ДеревоПроизвольнойИерархии.ПолучитьЭлементы().Очистить();
	
	Если Объект.ТипРеквизитаОР <> "" Тогда
		ИерархическийСправочник = Метаданные.Справочники[Объект.ТипРеквизитаОР].Иерархический;
	Иначе
		ИерархическийСправочник = Ложь;
	КонецЕсли;
	
	СтруктураПараметровИерархии = Новый Структура(
	"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник,РодительИерархии",
	Объект.Ссылка, Объект.ИзменяетсяДокументами, Объект.СтроитсяАвтоматически, Объект.РеквизитОР, Объект.ТипРеквизитаОР, ИерархическийСправочник);
	
	СтруктураПараметровФормы = Новый Структура(
	"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
	ЭтаФорма.ИмяФормы, Неопределено, Неопределено);
	
	Если Не (Объект.СтроитсяАвтоматически и Объект.ТипРеквизитаОР = "") Тогда
		МассивСтруктурОР = Справочники.торо_ОбъектыРемонта.ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии,СтруктураПараметровФормы);
		торо_РаботаСИерархией.ЗаполнитьДопПоляСпискаОбъектовСервере(МассивСтруктурОР);
		ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР)
	
	Если Объект.СтроитсяАвтоматически Тогда
		РодительИерархии = Справочники[Объект.ТипРеквизитаОР].ПустаяСсылка();
	Иначе
		РодительИерархии = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
	КонецЕсли;
	
	Для Каждого ЭлементКорневой Из МассивСтруктурОР Цикл
		Если ЭлементКорневой.РодительИерархии = РодительИерархии Тогда
			НСКорневая = ДеревоПроизвольнойИерархии.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НСКорневая,ЭлементКорневой);
			НСКорневая.ОбъектИерархии = ЭлементКорневой.ОбъектИерархии;
			НСКорневая.КартинкаИерархии = ЭлементКорневой.ИндексКартинки;
			Для Каждого ЭлементПодчиненный Из МассивСтруктурОР Цикл
				Если ЭлементПодчиненный.РодительИерархии = ЭлементКорневой.ОбъектИерархии Тогда
					НСПодчиненная = НСКорневая.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НСПодчиненная,ЭлементПодчиненный);
					НСПодчиненная.ОбъектИерархии = ЭлементПодчиненный.ОбъектИерархии;
					НСПодчиненная.КартинкаИерархии = ЭлементПодчиненный.ИндексКартинки;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроизвольнойИерархииПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекДанные = ДеревоПроизвольнойИерархии.НайтиПоИдентификатору(Строка);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ОбъектИерархии) И НЕ ТекДанные.СвязиОбновлялись Тогда
		
		Если НЕ Объект.СтроитсяАвтоматически ИЛИ (Объект.СтроитсяАвтоматически И ИерархическийСправочник) Тогда
			
			СтрокиДерева = ТекДанные.ПолучитьЭлементы();
			Если СтрокиДерева.Количество() > 0 Тогда
				
				
				СтруктураПараметровИерархии = Новый Структура(
				"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник,РодительИерархии",
				Объект.Ссылка, Объект.ИзменяетсяДокументами, Объект.СтроитсяАвтоматически, Объект.РеквизитОР, Объект.ТипРеквизитаОР, ИерархическийСправочник);
				
				СтруктураПараметровФормы = Новый Структура(
				"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
				ЭтаФорма.ИмяФормы, Неопределено, Неопределено);
				
				МассивЭлементов = Новый Массив;
				Для Каждого СтрокаДерева Из СтрокиДерева Цикл
					МассивЭлементов.Добавить(СтрокаДерева.ОбъектИерархии);
				КонецЦикла;
				СтруктураДобавления = ПолучитьСтруктуруНовыхСтрок(ТекДанные.ОбъектИерархии, СтруктураПараметровИерархии,МассивЭлементов,СтруктураПараметровФормы);
			КонецЕсли;
			ТекДанные.СвязиОбновлялись = Истина;
			
			Для каждого СтрокаДерева Из СтрокиДерева Цикл
				Для каждого ТекЭлем Из СтруктураДобавления Цикл
					
					Если ТекЭлем.Родитель <> СтрокаДерева.ОбъектИерархии Тогда
						Продолжить;
					КонецЕсли;
					
					НС = СтрокаДерева.ПолучитьЭлементы().Добавить();
					
					Если Объект.СтроитсяАвтоматически И ТипЗнч(ТекЭлем.РеквизитДопУпорядочиванияОР) <> Тип("Число") Тогда
						НС.ОбъектИерархии = ТекЭлем.РеквизитДопУпорядочивания;
					Иначе
						НС.ОбъектИерархии = ТекЭлем.ОбъектИерархии;
					КонецЕсли;		
					
					НС.РодительИерархии = ТекЭлем.Родитель;
					НС.ПометкаУдаления  = ТекЭлем.ПометкаУдаления;
					НС.КартинкаИерархии	= ТекЭлем.ИндексКартинки;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИерархическийЛиСправочник(ТипРеквизитаОР)
	
	Если ТипРеквизитаОР <> "" Тогда
		Возврат Метаданные.Справочники[ТипРеквизитаОР].Иерархический;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруНовыхСтрок(Ссылка, ПараметрыСтруктурыИерархии, МассивЭлементов, СтруктураПараметровФормы)
	
	СтруктураВозврата = Справочники.торо_ОбъектыРемонта.ПолучитьСтруктуруНовыхСтрокДляДереваПриРазворачивании(Ссылка, ПараметрыСтруктурыИерархии,МассивЭлементов,СтруктураПараметровФормы);
	торо_РаботаСИерархией.ЗаполнитьДопПоляСпискаОбъектовСервере(СтруктураВозврата);
	Возврат СтруктураВозврата;	
	
КонецФункции

&НаСервере 
Процедура ОбойтиДерево(Строки, ТЗ)
	Для каждого текСтрока из Строки Цикл
		Если ЗначениеЗаполнено(текСтрока.Ссылка) Тогда 
			нс = Тз.Добавить();
			нс.ОбъектИерархии = текСтрока.Ссылка;
			нс.РодительИерархии = ?(текСтрока.Родитель = Неопределено, Справочники.торо_ОбъектыРемонта.ПустаяСсылка(), текСтрока.Родитель.Ссылка);
			нс.ПредыдущееПоложение = "Внесен в структуру иерархии";
		КонецЕсли;
		ОбойтиДерево(текСтрока.Строки, тз);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИерархияТеперьСИсториейИзменений()
	ДеревоОР = Справочники.торо_ОбъектыРемонта.ПолучитьДеревоЭлементов(Справочники.торо_ОбъектыРемонта.ПустаяСсылка(), Объект.Ссылка);
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ОбъектИерархии");
	тз.Колонки.Добавить("РодительИерархии");
	тз.Колонки.Добавить("ПредыдущееПоложение");
	
	ОбойтиДерево(ДеревоОР.Строки, тз);
	
	Если тз.Количество() > 0 тогда
		докОбъект = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
		докОбъект.Дата = ТекущаяДата();
		докОбъект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация", Истина);
		докОбъект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновноеПодразделение", Истина);		
		докОбъект.Ответственный = Пользователи.ТекущийПользователь();
		докОбъект.Комментарий = "Документ создан автоматически.";
		докОбъект.СтруктураИерархии = Объект.Ссылка;
		докОбъект.ПоложенияВСтруктуреИерархии.Загрузить(тз);
		
		НачатьТранзакцию();
		Попытка
			докОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Записать();
			НаборЗаписей = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
			НаборЗаписей.Записать();
			
			НаборЗаписейГруппы = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
			НаборЗаписейГруппы.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
			НаборЗаписейГруппы.Записать();
		Исключение
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка: " + ОписаниеОшибки());
		КонецПопытки;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИерархияТеперьБезИсторииИзменений()
	ДеревоОР = Справочники.торо_ОбъектыРемонта.ПолучитьДеревоЭлементов(Справочники.торо_ОбъектыРемонта.ПустаяСсылка(), Объект.Ссылка);
	
	тз = Новый ТаблицаЗначений;
	тз.Колонки.Добавить("ОбъектИерархии");
	тз.Колонки.Добавить("РодительИерархии");
	тз.Колонки.Добавить("ПредыдущееПоложение");
	
	ОбойтиДерево(ДеревоОР.Строки, тз);
	
	Если тз.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИзменениеПоложенияВСтруктуреИерархии.Ссылка
		               |ИЗ
		               |	Документ.торо_ИзменениеПоложенияВСтруктуреИерархии КАК торо_ИзменениеПоложенияВСтруктуреИерархии
		               |ГДЕ
		               |	торо_ИзменениеПоложенияВСтруктуреИерархии.СтруктураИерархии = &СтруктураИерархии
		               |	И торо_ИзменениеПоложенияВСтруктуреИерархии.ПометкаУдаления = ЛОЖЬ
		               |	И торо_ИзменениеПоложенияВСтруктуреИерархии.Проведен = ИСТИНА
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ИзменениеПоложенияВСтруктуреИерархии.Ссылка
		               |ИЗ
		               |	Документ.торо_ИзменениеПоложенияВСтруктуреИерархии КАК торо_ИзменениеПоложенияВСтруктуреИерархии
		               |ГДЕ
		               |	торо_ИзменениеПоложенияВСтруктуреИерархии.СтруктураИерархии = &СтруктураИерархии
		               |	И торо_ИзменениеПоложенияВСтруктуреИерархии.ПометкаУдаления = ЛОЖЬ
		               |	И торо_ИзменениеПоложенияВСтруктуреИерархии.Проведен = ЛОЖЬ";
		   
		Запрос.УстановитьПараметр("СтруктураИерархии", Объект.Ссылка);
		РезЗапроса = Запрос.ВыполнитьПакет();
		резЗапрос1 = РезЗапроса[0];
		резЗапрос2 = РезЗапроса[1];
		
		Если НЕ резЗапрос1.Пустой() Тогда
			МассивПроведенныхДокументов = РезЗапрос1.Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		Если НЕ резЗапрос2.Пустой() Тогда
			МассивНЕПроведенныхДокументов = РезЗапрос2.Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
		
		НаборЗаписейГруппы = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
		НаборЗаписейГруппы.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
		
		тзГруппы = тз.Скопировать(,"РодительИерархии");
		тзГруппы.Свернуть("РодительИерархии");
		
		НачатьТранзакцию();
		Для каждого текСтрока из тз Цикл
			нс = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(нс, ТекСтрока);
			нс.СтруктураИерархии = Объект.Ссылка;
		КонецЦикла;
		
		Для каждого текСтрока из тзГруппы Цикл
			Если ЗначениеЗаполнено(текСтрока.РодительИерархии) 
				И НЕ текСтрока.РодительИерархии.ЭтоГруппа
				и ТипЗнч(текСтрока.РодительИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта")
				Тогда
				нс2 = НаборЗаписейГруппы.Добавить();
				нс2.ОбъектИерархии = текСтрока.РодительИерархии;
				нс2.СтруктураИерархии = Объект.Ссылка;
				нс2.ОбъектГруппа = Истина;
			КонецЕсли;			
		КонецЦикла;
		
		Попытка
			НаборЗаписей.Записать();
			НаборЗаписейГруппы.Записать();
			Если МассивПроведенныхДокументов <> Неопределено Тогда
				Для каждого текСтрока из МассивПроведенныхДокументов цикл
					докОбъект = текСтрока.ПолучитьОбъект();
					докОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					докОбъект.ПометкаУдаления = Истина;
					докОбъект.Записать();
				КонецЦикла;
			КонецЕсли;
			
			Если МассивНЕПроведенныхДокументов <> Неопределено Тогда
				Для каждого текСтрока из МассивНЕПроведенныхДокументов цикл
					докОбъект = текСтрока.ПолучитьОбъект();
					докОбъект.ПометкаУдаления = Истина;
					докОбъект.Записать();
				КонецЦикла;
			КонецЕсли;
			
			Записать();
		Исключение
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Произошла ошибка: " + ОписаниеОшибки());
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОчиститьРегистры()
	Набор = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьНаборЗаписей();
	Набор.Отбор.СтруктураИерархии.Установить(Объект.Ссылка);
	Набор.Записать();
КонецПроцедуры

#КонецОбласти