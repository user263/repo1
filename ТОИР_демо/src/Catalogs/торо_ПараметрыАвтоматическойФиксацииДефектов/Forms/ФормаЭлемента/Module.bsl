
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьВидимостьДоступность();
	УстановитьУсловноеОформление();
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) И Объект.ЗаполнениеШапки.Количество() = 0 И Объект.ЗаполнениеТабличнойЧасти.Количество() = 0 Тогда
		ЗаполнитьТаблицыПолей();
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ Объект.ЗаписыватьДокумент
		И НЕ Объект.ОткрыватьФорму Тогда
		ПоказатьПредупреждение(,НСтр("ru = 'Для записи объекта выберите действие с документом: открывать или записывать.'"));
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ Отказ И Объект.ЗаписыватьДокумент И Объект.ПроводитьДокумент Тогда
		Для Каждого Строка Из Объект.ЗаполнениеШапки Цикл
			Если (Строка.ШапкаИмяПоля = "ДефектВыявленВПроцессе"
				ИЛИ Строка.ШапкаИмяПоля = "Организация"
				ИЛИ Строка.ШапкаИмяПоля = "Подразделение")
				И НЕ ЗначениеЗаполнено(Строка.ШапкаЗначениеПоля) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка Из Объект.ЗаполнениеТабличнойЧасти Цикл
			Если (Строка.ТаблицаИмяПоля = "ВидДефекта"
				ИЛИ Строка.ТаблицаИмяПоля = "ДефектПричина")
				И НЕ ЗначениеЗаполнено(Строка.ТаблицаЗначениеПоля) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЦикла;
		Если Отказ Тогда
			ПоказатьПредупреждение(,НСтр("ru = 'Для записи объекта заполните поля выделенные подчеркиванием или снимите флажок ""Проводить документ"".'"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ЗаписыватьДокументПриИзменении(Элемент)
	Элементы.ПроводитьДокумент.Доступность =  Объект.ЗаписыватьДокумент;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаполнениеШапки

&НаКлиенте
Процедура ЗаполнениеШапкиШапкаЗначениеПоляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЗаполнениеШапки.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.ШапкаИмяПоля	= "Инициатор" Тогда
		
		СтандартнаяОбработка = Ложь;
		Если ЗначениеЗаполнено(ТекДанные.ШапкаЗначениеПоля) Тогда
			Если ТипЗнч(ТекДанные.ШапкаЗначениеПоля) = Тип("СправочникСсылка.Контрагенты") Тогда
				ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,Элементы.ЗаполнениеШапки,,,,,РежимОткрытияокнаФормы.БлокироватьОкноВладельца);
			ИначеЕсли ТипЗнч(ТекДанные.ШапкаЗначениеПоля) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
				ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора",,Элементы.ЗаполнениеШапки,,,,,РежимОткрытияокнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		Иначе
			СписокВыбораТипов = Новый СписокЗначений;
			СписокВыбораТипов.Добавить("Строка");
			СписокВыбораТипов.Добавить("Подразделение");
			СписокВыбораТипов.Добавить("Контрагент");
			СписокВыбораТипов.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВыбратьИнициатора",ЭтотОбъект,ТекДанные),НСтр("ru = 'Выберите тип'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеШапкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = Элементы.ЗаполнениеШапки.ТекущиеДанные;
	Если ТекДанные <> Неопределено И ТекДанные.ШапкаИмяПоля = "Инициатор" Тогда
		ТекДанные.ШапкаЗначениеПоля = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура УстановитьУсловноеОформление()
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаполнениеШапкиШапкаСинонимПоля.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаполнениеШапкиШапкаЗначениеПоля.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаполнениеШапкиШапкаИмяПоля.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеШапки.ШапкаИмяПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "СпособСогласования";

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", торо_Согласования.ПроверитьИспользованиеСогласованияДокументов(Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВыявленныеДефекты));
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаполнениеШапкиШапкаЗначениеПоля.Имя);
	
	ГруппаОтборовЭлемента1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ГруппаОтборовЭлемента2 = ГруппаОтборовЭлемента1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтборовЭлемента2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаписыватьДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтборовЭлемента2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроводитьДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаОтборовЭлемента3 = ГруппаОтборовЭлемента1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаОтборовЭлемента = ГруппаОтборовЭлемента3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеШапки.ШапкаИмяПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "ДефектВыявленВПроцессе";
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеШапки.ШапкаЗначениеПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	
	ГруппаОтборовЭлемента = ГруппаОтборовЭлемента3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеШапки.ШапкаИмяПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "Организация";
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеШапки.ШапкаЗначениеПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтборовЭлемента = ГруппаОтборовЭлемента3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеШапки.ШапкаИмяПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "Подразделение";
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеШапки.ШапкаЗначениеПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Истина);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЗаполнениеТабличнойЧастиТаблицаЗначениеПоля.Имя);
	
	ГруппаОтборовЭлемента1 = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента1.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ГруппаОтборовЭлемента2 = ГруппаОтборовЭлемента1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтборовЭлемента2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаписыватьДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтборовЭлемента2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ПроводитьДокумент");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ГруппаОтборовЭлемента3 = ГруппаОтборовЭлемента1.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;	
	
	ГруппаОтборовЭлемента = ГруппаОтборовЭлемента3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеТабличнойЧасти.ТаблицаИмяПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "ДефектПричина";
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеТабличнойЧасти.ТаблицаЗначениеПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтборовЭлемента = ГруппаОтборовЭлемента3.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтборовЭлемента.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеТабличнойЧасти.ТаблицаИмяПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ОтборЭлемента.ПравоеЗначение = "ВидДефекта";
	
	ОтборЭлемента = ГруппаОтборовЭлемента.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЗаполнениеТабличнойЧасти.ТаблицаЗначениеПоля");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;	
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ПроводитьДокумент.Доступность =  Объект.ЗаписыватьДокумент;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПолей()
	
	ЗаполнениеШапки = Объект.ЗаполнениеШапки;
	НС = ЗаполнениеШапки.Добавить();
	НС.ШапкаИмяПоля		 = "ДефектВыявленВПроцессе";
	НС.ШапкаСинонимПоля  = "Дефект выявлен в процессе";
	НС.ШапкаЗначениеПоля = Справочники.торо_УсловияВыявленияДефекта.ПустаяСсылка();
	
	НС = ЗаполнениеШапки.Добавить();
	НС.ШапкаИмяПоля		 = "Комментарий";
	НС.ШапкаСинонимПоля  = "Комментарий";
	НС.ШапкаЗначениеПоля = "";
	
	НС = ЗаполнениеШапки.Добавить();
	НС.ШапкаИмяПоля		 = "Организация";
	НС.ШапкаСинонимПоля  = "Организация";
	НС.ШапкаЗначениеПоля = Справочники.Организации.ПустаяСсылка();
	
	НС = ЗаполнениеШапки.Добавить();
	НС.ШапкаИмяПоля		 = "Подразделение";
	НС.ШапкаСинонимПоля  = "Подразделение";
	НС.ШапкаЗначениеПоля = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
	НС = ЗаполнениеШапки.Добавить();
	НС.ШапкаИмяПоля		 = "Инициатор";
	НС.ШапкаСинонимПоля  = "Инициатор";
	НС.ШапкаЗначениеПоля = Неопределено;
	
	НС = ЗаполнениеШапки.Добавить();
	НС.ШапкаИмяПоля		 = "Ответственный";
	НС.ШапкаСинонимПоля  = "Ответственный";
	НС.ШапкаЗначениеПоля = Справочники.Пользователи.ПустаяСсылка();
	
	НС = ЗаполнениеШапки.Добавить();
	НС.ШапкаИмяПоля		 = "СпособСогласования";
	НС.ШапкаСинонимПоля  = "Способ согласования";
	НС.ШапкаЗначениеПоля = Справочники.торо_СпособыСогласованияДокументов.ПустаяСсылка();

	
	ЗаполнениеТаблицы = Объект.ЗаполнениеТабличнойЧасти;
	НС = ЗаполнениеТаблицы.Добавить();
	НС.ТаблицаИмяПоля	   = "ВидДефекта";
	НС.ТаблицаСинонимПоля  = "Вид дефекта";
	НС.ТаблицаЗначениеПоля = Справочники.торо_ВидыДефектов.ПустаяСсылка();
	
	НС = ЗаполнениеТаблицы.Добавить();
	НС.ТаблицаИмяПоля	   = "ДефектОписание";
	НС.ТаблицаСинонимПоля  = "Дефект описание";
	НС.ТаблицаЗначениеПоля = "";
	
	НС = ЗаполнениеТаблицы.Добавить();
	НС.ТаблицаИмяПоля	   = "ДефектПричина";
	НС.ТаблицаСинонимПоля  = "Дефект причина";
	НС.ТаблицаЗначениеПоля = Справочники.торо_ПричиныДефектов.ПустаяСсылка();
	
	НС = ЗаполнениеТаблицы.Добавить();
	НС.ТаблицаИмяПоля	   = "НаправлениеНаУстранение";
	НС.ТаблицаСинонимПоля  = "Направление на устранение";
	НС.ТаблицаЗначениеПоля = "";
	
	НС = ЗаполнениеТаблицы.Добавить();
	НС.ТаблицаИмяПоля	   = "ПоследствияДефекта";
	НС.ТаблицаСинонимПоля  = "Последствия дефекта";
	НС.ТаблицаЗначениеПоля = "";
	
	НС = ЗаполнениеТаблицы.Добавить();
	НС.ТаблицаИмяПоля	   = "КритичностьДефекта";
	НС.ТаблицаСинонимПоля  = "Критичность дефекта";
	НС.ТаблицаЗначениеПоля = Справочники.торо_КритичностьДефекта.ПустаяСсылка();
	
	НС = ЗаполнениеТаблицы.Добавить();
	НС.ТаблицаИмяПоля	   = "ТиповойДефект";
	НС.ТаблицаСинонимПоля  = "Типовой дефект";
	НС.ТаблицаЗначениеПоля = Справочники.торо_ТиповыеДефектыОборудования.ПустаяСсылка();
	
	НС = ЗаполнениеТаблицы.Добавить();
	НС.ТаблицаИмяПоля	   = "ПодразделениеИсполнитель";
	НС.ТаблицаСинонимПоля  = "Подразделение-исполнитель";
	НС.ТаблицаЗначениеПоля = Справочники.СтруктураПредприятия.ПустаяСсылка();
	
Конецпроцедуры

&НаКлиенте
Процедура ВыбратьИнициатора(ВыбранныйЭлемент,ДополнительныеПараметры) Экспорт
	Если ВыбранныйЭлемент = Неопределено Тогда
	ИначеЕсли ВыбранныйЭлемент.Значение = "Подразделение" Тогда
		ОткрытьФорму("Справочник.СтруктураПредприятия.ФормаВыбора",,Элементы.ЗаполнениеШапки,,,,,РежимОткрытияокнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли ВыбранныйЭлемент.Значение = "Строка" Тогда
		ДополнительныеПараметры.ШапкаЗначениеПоля = "";
	ИначеЕсли ВыбранныйЭлемент.Значение = "Контрагент" Тогда
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",,Элементы.ЗаполнениеШапки,,,,,РежимОткрытияокнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


	

