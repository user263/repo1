#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
Перем мСтруктураТабличныхЧастейНормативов Экспорт;  // Структура, содержит список имен табличных частей нормативов.

#Область СлужебныеПроцедурыИФункции
// Функция выполняет проверку на использование ремонта
//	в вышестоящих ремонтах.
//
// Параметры:
//	ТекЭлемент - текущий элемент справочника
//	ЭлементПоиска - элемент для сравнения.
//
// Возвращаемое значение:
//	Истина - есть зацикливание, Ложь - нет.
//
Функция ЕстьЗацикливаниеРемонтов(ТекЭлемент, ЭлементПоиска) Экспорт
	
	Если ТипЗнч(ТекЭлемент)<> Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") ИЛИ
		ТипЗнч(ТекЭлемент)=Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") И ЭлементПоиска.Пустая() И Не ЗначениеЗаполнено(ТекЭлемент) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураВозврата = Новый Соответствие;
	
	Если ТекЭлемент = ЭлементПоиска Тогда
		
		СтруктураВозврата.Вставить(ТекЭлемент.Наименование, ЭлементПоиска.Наименование);
		
		Возврат СтруктураВозврата;
		
	КонецЕсли;
	
	
	Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(,Новый Структура("ИдентификаторТехКарты", ТекЭлемент)); // обработано
	Если Таб.Количество() > 0 Тогда
		
		Для Каждого СтрокаОпераций Из Таб[0].ТехКарта.СписокОпераций Цикл
			
			Если ТипЗнч(СтрокаОпераций.Операция)<> Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаОпераций.Операция = ЭлементПоиска Тогда
				
				СтруктураВозврата.Вставить(ЭлементПоиска.Наименование, ТекЭлемент.Наименование);
				Возврат СтруктураВозврата;
				
			Иначе 
				
				Возврат ЕстьЗацикливаниеРемонтов(СтрокаОпераций.Операция, ЭлементПоиска);
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ПередЗаписью(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ИдентификаторыТехКарт.ПометкаУдаления
		|ИЗ
		|	Справочник.торо_ИдентификаторыТехКарт КАК торо_ИдентификаторыТехКарт
		|ГДЕ
		|	торо_ИдентификаторыТехКарт.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтарПометкаУдаления = Выборка.ПометкаУдаления;
	КонецЦикла;
	
	Если СтарПометкаУдаления <> ПометкаУдаления Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ВерсииТехКарт.ТехКарта
		               |ИЗ
		               |	РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
		               |ГДЕ
		               |	торо_ВерсииТехКарт.ИдентификаторТехКарты = &ИдентификаторТехКарты";
					   
		Запрос.УстановитьПараметр("ИдентификаторТехКарты", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
  
			ТехКартаОбъект = Выборка.ТехКарта.ПолучитьОбъект();
			ТехКартаОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			ТехКартаОбъект.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

мСтруктураТабличныхЧастейНормативов = Новый Структура();
мСтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты","тзМатериальныеЗатратыРемонтов");
мСтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты","тзТрудовыеЗатратыРемонтов");
мСтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника","тзИнструментыИТехникаРемонтов");
мСтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели","тзИзмеряемыеПоказателиРемонтов");
мСтруктураТабличныхЧастейНормативов.Вставить("МерыБезопасности","тзМерыБезопасностиРемонтов");

#КонецОбласти

#КонецЕсли