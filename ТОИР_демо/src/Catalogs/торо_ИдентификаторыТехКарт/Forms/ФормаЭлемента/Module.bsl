////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

&НаКлиенте
Перем ПараметрыТекущейСтроки;

&НаКлиенте
Перем ДанныеСтроки;

&НаКлиенте
Перем НоваяСтрока;

&НаКлиенте
Перем ПодборОпераций;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТехКартаОбъект = РеквизитФормыВЗначение("ТехКарта");
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ТехКартаКопируемаяСсылка = ПолучитьТехКартуПоИдентификатору(Параметры.ЗначениеКопирования);
		ТехКартаКопируемаяОбъект = ТехКартаКопируемаяСсылка.Скопировать();
		
		СоздатьНовуюВерсиюТехкарты(Истина, ТехКартаКопируемаяОбъект, Истина);
	Иначе	
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если Параметры.Свойство("ДатаСреза")
				И ЗначениеЗаполнено(Параметры.ДатаСреза)Тогда
				
				ЗаполнитьФормуПоТехКарте(ТехКартаОбъект, Параметры.ДатаСреза);
				
			Иначе
				ЗаполнитьФормуПоТехКарте(ТехКартаОбъект);// получаем самую последнюю запись
				
			КонецЕсли; 
			
		Иначе
			СоздатьНовуюВерсиюТехкарты();
		КонецЕсли;
	КонецЕсли;
	
	СтараяДатаПринятия = ТехКарта.ДатаПринятия;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)
		И Параметры.Свойство("Родитель") Тогда
		Объект.Родитель = Параметры.Родитель;
	КонецЕсли;
	
	УстановитьПризнакиОпаснойИПовышеннойОпасностиРаботВТЧ();
	
	ФОИспользоватьОпасноеПроизводство = ПолучитьФункциональнуюОпцию("торо_ИспользоватьОпасноеПроизводство");
	ФОИспользоватьНарядДопускОбязательно = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно");
	ФОИспользоватьОстановочныеРемонты = ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
	
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		
		Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
		Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);
		
	КонецЦикла; 
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.торо_ИдентификаторыТехКарт);
	УстановитьУсловноеОформление();
	
	ЕстьОпасныеОперацииИсх = ТехКарта.СодержитОпасныеОперации;
	ЕстьРаботыПовышеннойОпасностиИсх = ТехКарта.СодержитРаботыПовышеннойОпасности;
	
	Если Не ЗначениеЗаполнено(Объект.Статус) Тогда
		Объект.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке;
	КонецЕсли;
		
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства
	СлужебныеРеквизитыЗаполнитьНаСервере();
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Элементы.НормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.НормаВремени);
	Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.ВремяПростоя);
	
	Элементы.ГруппаОпасныхОпераций.Видимость = ФОИспользоватьНарядДопускОбязательно ИЛИ ФОИспользоватьОпасноеПроизводство;
	
	Элементы.КартинкаСодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	Элементы.СодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	Элементы.СписокОперацийСодержитОпасныеОперации.Видимость = ФОИспользоватьОпасноеПроизводство;
	
	Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	Элементы.СодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	Элементы.СписокОперацийСодержитРаботыПовышеннойОпасности.Видимость = ФОИспользоватьНарядДопускОбязательно;
	
	Элементы.ГруппаОстанова.Видимость = ФОИспользоватьОстановочныеРемонты;
	Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.ВремяПростоя);
	УстановитьЗаголовокФормы();
	УстановитьДоступностьОтСтатуса();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Модифицированность = Истина;
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.торо_ФормаПодбораПродолжительности" Тогда
		Если ЭтаФорма.ТекущийЭлемент.Имя = "Перерассчитать"  
			ИЛИ ЭтаФорма.ТекущийЭлемент.Имя = "ТехКартаСпособРасчетаПродолжительности" Тогда
			Элементы.НормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);
			ТехКарта.НормаВремени = ВыбранноеЗначение;
			ТехКарта.НормаВремениТекст = Элементы.НормаВремени.Заголовок;
			флСписокОперацийМодифицированность = Истина;
		ИначеЕсли ЭтаФорма.ТекущийЭлемент.Имя = "ВвестиВремяПростоя" Тогда
			Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);
			ТехКарта.ВремяПростоя = ВыбранноеЗначение;
			ТехКарта.ВремяПростояТекст = Элементы.ВремяПростоя.Заголовок;
		КонецЕсли;
	ИначеЕсли ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		ТекДанныеСписокОпераций = Элементы.СписокОпераций.ТекущиеДанные;
		
		Если ТекДанныеСписокОпераций = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	
		Если Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
			ИмяТЧ = "МатериальныеЗатраты";
			ИмяРеквизита = "Номенклатура";
		ИначеЕсли Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаИнструментыИТехника Тогда
			ИмяТЧ = "ИнструментыИТехника";
			ИмяРеквизита = "Инструмент";
		ИначеЕсли Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаОказываемыеУслуги Тогда
			ИмяТЧ = "ОказываемыеУслуги";
			ИмяРеквизита = "Номенклатура";			
		КонецЕсли;
		
		СтруктураСтрокиОпераций = Новый Структура("ID, Операция, Количество", ТекДанныеСписокОпераций.ID, ТекДанныеСписокОпераций.Операция, ТекДанныеСписокОпераций.Количество);
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, СтруктураСтрокиОпераций, ИмяТЧ, ИмяРеквизита);
		СлужебныеРеквизитыЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ПодборЗакрыт" Тогда
		ПодборОпераций = Ложь;
		
	ИначеЕсли ИмяСобытия = "ИзменениеТехКарты" Тогда
		Если Параметр = ТехКарта.Ссылка Тогда
			ОбработатьОповещениеОбИзмененииТехКарты();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	УстановитьПризнакиОпаснойИПовышеннойОпасностиРаботВТЧ(); 
	
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		
		Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
		Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);

	КонецЦикла;
		
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если НЕ ЗначениеЗаполнено(ТехКарта.ДатаПринятия) Тогда
		Отказ = Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Тех. карта принята с"" не заполнено'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТехКарта.НормаВремени) Тогда
		Отказ = Истина;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Продолжительность"" не заполнено'"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Статус) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Поле ""Статус"" не заполнено'");
		Сообщение.Сообщить();
	КонецЕсли;
		
	Если Модифицированность И НЕ Отказ Тогда
		
		ПроверитьДругиеТехкарты = Истина;
		
		Если СоздаватьНовыйОбъект Тогда
			
			НовОбъект = Справочники.торо_ТехКарты.СоздатьЭлемент();
			
			ЗаполнитьЗначенияСвойств(НовОбъект, ТехКарта, , "Код");
			НовОбъект.Наименование = Объект.Наименование;
			
			НовОбъект.СписокОпераций.Загрузить(ТехКарта.СписокОпераций.Выгрузить());
			НовОбъект.ОказываемыеУслуги.Загрузить(ТехКарта.ОказываемыеУслуги.Выгрузить());
			НовОбъект.МатериальныеЗатраты.Загрузить(ТехКарта.МатериальныеЗатраты.Выгрузить());
			НовОбъект.ТрудовыеЗатраты.Загрузить(ТехКарта.ТрудовыеЗатраты.Выгрузить());
			НовОбъект.ИнструментыИТехника.Загрузить(ТехКарта.ИнструментыИТехника.Выгрузить());
			НовОбъект.ИзмеряемыеПоказатели.Загрузить(ТехКарта.ИзмеряемыеПоказатели.Выгрузить());
			НовОбъект.МерыБезопасности.Загрузить(ТехКарта.МерыБезопасности.Выгрузить());
			
			ЗаписатьНормативыОпераций(НовОбъект);
			
			Если НовОбъект.ПроверитьЗаполнение() Тогда
				НовОбъект.Записать();
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			ПрисоединенныеФайлыСлужебный.СкопироватьПрисоединенныеФайлы(ПредВерсияТехКарты, НовОбъект.Ссылка);
			
			НаборЗаписей = РегистрыСведений.торо_ВерсииТехКарт.СоздатьНаборЗаписей();
			
			НС = НаборЗаписей.Добавить();
			НС.ИдентификаторТехКарты = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(ТекущийОбъект);
			НС.Период                = НовОбъект.ДатаПринятия;
			НС.ТехКарта              = НовОбъект.Ссылка;
			НаборЗаписей.Записать(Ложь);
			
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(НС.ИдентификаторТехКарты, НовОбъект.ДатаПринятия);
			
			ТехКартаОбъект = ТехКартаСсылка.ПолучитьОбъект();
			
			
			ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКартаОбъект.Ссылка);
			
			ЗначениеВРеквизитФормы(ТехКартаОбъект,"ТехКарта");
			
		Иначе
			
			ТехКартаОбъект = РеквизитФормыВЗначение("ТехКарта");			
			ТехКартаОбъект.Наименование = Объект.Наименование;
			Если ТехКартаОбъект.ПроверитьЗаполнение() Тогда
				ТехКартаОбъект.Записать();
			Иначе
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
			Если ДатаПринятияИзменена Тогда
				
				МенеджерЗаписи = РегистрыСведений.торо_ВерсииТехКарт.СоздатьМенеджерЗаписи();
				
				МенеджерЗаписи.ИдентификаторТехКарты = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(ТекущийОбъект);
				МенеджерЗаписи.Период                = СтараяДатаПринятия;
				МенеджерЗаписи.ТехКарта              = ТехКартаОбъект.Ссылка;
				
				МенеджерЗаписи.Прочитать(); 
				
				МенеджерЗаписи.ТехКарта              = ТехКартаОбъект.Ссылка;
				МенеджерЗаписи.Период                = ТехКартаОбъект.ДатаПринятия;
				МенеджерЗаписи.ИдентификаторТехКарты = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(ТекущийОбъект);
		
				МенеджерЗаписи.Записать(Истина);
				
				СтараяДатаПринятия                   = ТехКартаОбъект.ДатаПринятия;
				
			КонецЕсли; 
			
				ЗначениеВРеквизитФормы(ТехКартаОбъект,"ТехКарта");
			
		КонецЕсли;
	КонецЕсли;
	
	СообщитьОВозможномИзмененииПродолжительностиРемонта(флСписокОперацийМодифицированность, флТрудозатратыМодифицированность);
	
	Если НЕ Отказ Тогда
		флТрудозатратыМодифицированность = Ложь;
		флСписокОперацийМодифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если (ФОИспользоватьОпасноеПроизводство И ТехКарта.СодержитОпасныеОперации <> ЕстьОпасныеОперацииИсх) 
		ИЛИ (ФОИспользоватьНарядДопускОбязательно И ТехКарта.СодержитРаботыПовышеннойОпасности <> ЕстьРаботыПовышеннойОпасностиИсх) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_СоставИерархическихТехКартРемонтов.ТехКарта КАК ТехКартаВУ
		|ПОМЕСТИТЬ ВсеТехКартыДляИзменения
		|ИЗ
		|	РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
		|ГДЕ
		|	торо_СоставИерархическихТехКартРемонтов.Состав = &ТехКарта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеТехКартыДляИзменения.ТехКартаВУ КАК ТехКарта,
		|	СУММА(ВЫБОР
		|			КОГДА торо_СоставИерархическихТехКартРемонтов.Состав ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Приоритет
		|ИЗ
		|	ВсеТехКартыДляИзменения КАК ВсеТехКартыДляИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
		|		ПО ВсеТехКартыДляИзменения.ТехКартаВУ = торо_СоставИерархическихТехКартРемонтов.Состав
		|			И (торо_СоставИерархическихТехКартРемонтов.ТехКарта В
		|				(ВЫБРАТЬ
		|					ТехКарты.ТехКартаВУ
		|				ИЗ
		|					ВсеТехКартыДляИзменения КАК ТехКарты))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеТехКартыДляИзменения.ТехКартаВУ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
		
		Запрос.УстановитьПараметр("ТехКарта", ТехКарта.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если ФОИспользоватьОпасноеПроизводство Тогда
					Если НЕ Выборка.ТехКарта.СодержитОпасныеОперации И ТехКарта.СодержитОпасныеОперации Тогда
						
						ТКОбъект = Выборка.ТехКарта.ПолучитьОбъект();
						ТКОбъект.СодержитОпасныеОперации = Истина;
						ТКОбъект.Записать();
						
					ИначеЕсли Выборка.ТехКарта.СодержитОпасныеОперации И НЕ ТехКарта.СодержитОпасныеОперации Тогда
						
						МассивОпераций = Новый Массив;
						
						Для каждого Стр Из Выборка.ТехКарта.СписокОпераций Цикл
							
							МассивОпераций.Добавить(Стр.Операция);
							
						КонецЦикла; 
						
						ЕстьОпасныеОперации = ПроверитьНаличиеОпасныхОперацийНаСервере(МассивОпераций, Выборка.ТехКарта.ДатаПринятия);
						
						Если НЕ ЕстьОпасныеОперации Тогда
							
							ТКОбъект = Выборка.ТехКарта.ПолучитьОбъект();
							ТКОбъект.СодержитОпасныеОперации = Ложь;
							ТКОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				Если ФОИспользоватьНарядДопускОбязательно Тогда
					Если НЕ Выборка.ТехКарта.СодержитРаботыПовышеннойОпасности И ТехКарта.СодержитРаботыПовышеннойОпасности Тогда
						
						ТКОбъект = Выборка.ТехКарта.ПолучитьОбъект();
						ТКОбъект.СодержитРаботыПовышеннойОпасности = Истина;
						ТКОбъект.Записать();
						
					ИначеЕсли Выборка.ТехКарта.СодержитРаботыПовышеннойОпасности И НЕ ТехКарта.СодержитРаботыПовышеннойОпасности Тогда
						
						МассивОпераций = Новый Массив;
						
						Для каждого Стр Из Выборка.ТехКарта.СписокОпераций Цикл
							
							МассивОпераций.Добавить(Стр.Операция);
							
						КонецЦикла; 
						
						ЕстьРаботыПовышеннойОпасности = ПроверитьНаличиеРаботПовышеннойОпасностиНаСервере(МассивОпераций,Выборка.ТехКарта.ДатаПринятия);
						
						Если НЕ ЕстьРаботыПовышеннойОпасности Тогда
							
							ТКОбъект = Выборка.ТехКарта.ПолучитьОбъект();
							ТКОбъект.СодержитРаботыПовышеннойОпасности = Ложь;
							ТКОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ЕстьОпасныеОперацииИсх = ТехКарта.СодержитОпасныеОперации;
	РаботаПовышеннойОпасностиИсх = ТехКарта.СодержитРаботыПовышеннойОпасности;
	
	Элементы.ТехКартаДатаПринятия.Доступность = Ложь;
	Элементы.Изменить.Доступность             = Истина;
	
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		
		Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
		Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);
		
	КонецЦикла; 

	ИзменитьЗависимыеТехКарты();
	СоздатьНедостающиеВерсииТехКарты();	
	// Изменение зависимых техкарт
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	ОповеститьСвязанныеТехКартыОбИзменении();
	УстановитьЗаголовокФормы();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТехКартаДатаПринятияПриИзменении(Элемент)
	
	МассивИдентификаторов = Новый Массив;
	
	Для каждого Строка Из ТехКарта.СписокОпераций Цикл
		Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			 МассивИдентификаторов.Добавить(Строка.Операция);
		КонецЕсли; 
	КонецЦикла;
	
	Если МассивИдентификаторов.Количество() > 0 Тогда
		
		ДопПараметры = Новый Структура("МассивИдентификаторов", МассивИдентификаторов);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОтветаНаВопросПриИзмененииДаты",ЭтаФорма,ДопПараметры);
		
		ТекстВопроса = НСтр("ru = 'В технологической карте имеются вложенные технологические карты.
		|Все вложенные технологические карты будут заменены на версии, соответсвующие новой дате принятия.
		|Если на указанную дату версий не будет найдено, то они будут удалены Из списка операций. Продолжить?'");
		
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Смена даты принятияэ"));
		
	Иначе
		
		ОбработкаОтветаНаВопросПриИзмененииДаты(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиВводаНормативов(Отказ)
	
	Если Элементы.СписокОпераций.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
	Иначе
		Если ТипЗнч(Элементы.СписокОпераций.ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя указывать нормативные данные для ремонтов. Изменяйте нормативы у операций внутри ремонтов.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(СтрокаТабличнойЧасти)
	
	СтрокаОпераций = Элементы.СписокОпераций.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.Операция = СтрокаОпераций.Операция;
	СтрокаТабличнойЧасти.ID       = СтрокаОпераций.ID;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоНормативамНаСервере(ТекДанныеID, ТекДанныеОперация)
	
	МассивОпераций = ТехКарта.СписокОпераций.НайтиСтроки(Новый Структура("ID, Операция", ТекДанныеID, ТекДанныеОперация));
	Если МассивОпераций.Количество() Тогда
		
		Строка = МассивОпераций[0];
		
		Строка.Продолжительность      = ТекДанныеОперация.НормаВремени / 3600;
		Строка.ПродолжительностьТекст = СформироватьПродолжительность(ТекДанныеОперация.НормаВремени);
		Строка.НормаВремениВСекундах  = ТекДанныеОперация.НормаВремени;
		Строка.СпособВыполнения       = Перечисления.СпособыСтроительства.Хозспособ;
		Строка.Количество	          = 1;
		
	КонецЕсли;
	
	// Заполнение табличных частей нормативов.
	
	СтруктураСоответствияТЧРемонта = Новый Структура();
	СтруктураСоответствияТЧРемонта.Вставить("МатериальныеЗатраты",
	ТехКарта.МатериальныеЗатраты);
	СтруктураСоответствияТЧРемонта.Вставить("ТрудовыеЗатраты",
	ТехКарта.ТрудовыеЗатраты);
	СтруктураСоответствияТЧРемонта.Вставить("ИнструментыИТехника",
	ТехКарта.ИнструментыИТехника);
	
	Для Каждого КлючИЗначение Из СтруктураСоответствияТЧРемонта Цикл
		
		МассивСтрок = КлючИЗначение.Значение.НайтиСтроки(Новый Структура("ID, Операция", ТекДанныеID, ТекДанныеОперация));
		
		Для каждого Стр Из МассивСтрок Цикл
			КлючИЗначение.Значение.Удалить(КлючИЗначение.Значение.Индекс(Стр));
		КонецЦикла;
		
		ТЧОперации = ТекДанныеОперация[КлючИЗначение.Ключ];
		Для каждого СтрокаТЧ Из ТЧОперации Цикл
			
			НоваяСтрокаТЧ = КлючИЗначение.Значение.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
			НоваяСтрокаТЧ.ID = ТекДанныеID;
			НоваяСтрокаТЧ.Операция = ТекДанныеОперация;
			
			Если КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
				НоваяСтрокаТЧ.КоличествоНаЕдиницу = СтрокаТЧ.Количество;
				НоваяСтрокаТЧ.КоличествоУпаковокНаЕдиницу = СтрокаТЧ.КоличествоУпаковок;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла;
	
	УстановитьОтборыТаблицНормативов(ТекДанныеID, ТекДанныеОперация);
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСпособРасчетаПродолжительностиПриИзменении(Элемент)
	
	Если ТехКарта.СпособРасчетаПродолжительности = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли ТехКарта.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоНормамВремениТехОпераций") Тогда
		
		Модифицированность = Истина;		
		РассчитатьПродолжительностьПоОперациямНаСервере(Истина);
		Элементы.НормаВремени.Заголовок = ТехКарта.НормаВремениТекст;

	ИначеЕсли ТехКарта.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоНормамТрудозатрат") Тогда
		
		Модифицированность = Истина;
		ТехКарта.НормаВремени = РассчитатьПродолжительностьПоТрудозатратам();
		Элементы.НормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.НормаВремени);
		ТехКарта.НормаВремениТекст = Элементы.НормаВремени.Заголовок;
		
	ИначеЕсли ТехКарта.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоПродолжительностиОперацийРемонтов") Тогда
		
		Модифицированность = Истина;
		РассчитатьПродолжительностьПоОперациямНаСервере();
		Элементы.НормаВремени.Заголовок = ТехКарта.НормаВремениТекст;
		
	ИначеЕсли ТехКарта.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПроизвольноеЗначение") Тогда
		
		Модифицированность = Истина;
		ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,ЭтаФорма,Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
		ФормаПодбораПродолжительности.ПродолжительностьВСекундах = ТехКарта.НормаВремени;
		ФормаПодбораПродолжительности.Открыть();
		
	КонецЕсли;	
	
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		
		Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
		Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);
		
	КонецЦикла; 

	флСписокОперацийМодифицированность = Ложь;
	флТрудозатратыМодифицированность = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	УстановитьДоступностьОтСтатуса();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОпераций

&НаКлиенте
Процедура ТехКартаСписокОперацийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	флСписокОперацийМодифицированность = Истина;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТекДанные.НормаВремениВСекундах = ВыбранноеЗначение;
		ТекДанные.ПродолжительностьТекст = СформироватьПродолжительность(ВыбранноеЗначение);
	Иначе
		Если ТекДанные = Неопределено ИЛИ НоваяСтрока ИЛИ (ПодборОпераций <> Неопределено И ПодборОпераций = Истина) Тогда
			ЗначВозврата = ОбработкаВыбораСписокОперацияНаСервере(ВыбранноеЗначение, Неопределено, Неопределено);	
		Иначе
			ЗначВозврата = ОбработкаВыбораСписокОперацияНаСервере(ВыбранноеЗначение, ТекДанные.ID, ТекДанные.Операция);	
		КонецЕсли;
		
		Если ТипЗнч(ЗначВозврата) = Тип("Соответствие") Тогда
			Для каждого ЭлемСтруктуры Из ЗначВозврата Цикл
				ПоказатьПредупреждение(Неопределено,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тех. карта %1
				|не может быть включена в тех. карту
				|%2.
				|Использование замкнутых циклов ремонтов
				|приведет к неправильной работе программы!'"),СокрЛП(ЭлемСтруктуры.Значение),СокрЛП(ЭлемСтруктуры.Ключ)));
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЗначВозврата) = Тип("Число") Тогда
			Элементы.СписокОпераций.ТекущаяСтрока = ЗначВозврата;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			ФормаВыбора = ПолучитьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора",Новый Структура("ДатаПринятия, ОтборПоСтатусам", ТехКарта.ДатаПринятия, ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует")) , Элемент);
			ФормаВыбора.Открыть();
			
		ИначеЕсли ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")  Тогда 
			
			ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", , Элемент);	
		Иначе
			
			СписокВыбора = Новый СписокЗначений;
			СписокВыбора.Добавить(Тип("СправочникСсылка.торо_ИдентификаторыТехКарт"),"Технологические карты");
			СписокВыбора.Добавить(Тип("СправочникСсылка.торо_ТехнологическиеОперации"),"Технологические операции");
			
			ДопПараметры = Новый Структура("Элемент", Элемент);
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораТипаДанныхОперации",ЭтаФорма, ДопПараметры);
			
			СписокВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения,НСтр("ru = 'Выбор типа данных'"));

		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено
		И ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.Форма.ФормаЭлемента",Новый Структура("Ключ, ДатаСреза", ТекущиеДанные.Операция, Техкарта.ДатаПринятия),,,,,Неопределено);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если типЗнч(ВыбранноеЗначение) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт")
		И Не ЗначениеЗаполнено(ПолучитьТехКартуПоИдентификатору(ВыбранноеЗначение, ТехКарта.ДатаПринятия))
		Тогда 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'На дату %1 отсутствуют версии тех. карты <%2>.'");
		Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст,ТехКарта.ДатаПринятия,ВыбранноеЗначение);
		Сообщение.Сообщить();
		
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ПодборОпераций = Ложь;
	ТехКартаСписокОперацийОбработкаВыбора(Элементы.СписокОпераций, ВыбранноеЗначение, СтандартнаяОбработка)

КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийКоличествоПриИзменении(Элемент)
	
	ТекДанные  = Элементы.СписокОпераций.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Для каждого Стр Из МатериальныеЗатраты Цикл
			
			Стр.Количество = Стр.КоличествоНаЕдиницу * ТекДанные.Количество;
			Стр.КоличествоУпаковок = Стр.КоличествоУпаковокНаЕдиницу * ТекДанные.Количество;
			
		КонецЦикла;
		
		Если ТипЗнч(ТекДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID", ТекДанные.ID);
			МассивСтрок = тзМатериальныеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.Количество = Стр.КоличествоНаЕдиницу * ТекДанные.Количество;
				Стр.КоличествоУпаковок = Стр.КоличествоУпаковокНаЕдиницу * ТекДанные.Количество;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID", ТекДанные.ID);
			МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.Количество = Стр.КоличествоНаЕдиницу * ТекДанные.Количество;
				Стр.КоличествоУпаковок = Стр.КоличествоУпаковокНаЕдиницу * ТекДанные.Количество;
				
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Стр Из ТрудовыеЗатраты Цикл
			
			Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * ТекДанные.Количество;
			Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
			
		КонецЦикла;
		
		Если ТипЗнч(ТекДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID", ТекДанные.ID);
			МассивСтрок = тзТрудовыеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * ТекДанные.Количество;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID", ТекДанные.ID);
			МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * ТекДанные.Количество;
				
			КонецЦикла;
		КонецЕсли;
		
		
		Для каждого Стр Из ИнструментыИТехника Цикл
			
			Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * ТекДанные.Количество;
			Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
			
		КонецЦикла;
		
		Если ТипЗнч(ТекДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID", ТекДанные.ID);
			МассивСтрок = тзИнструментыИТехникаРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * ТекДанные.Количество;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID", ТекДанные.ID);
			МассивСтрок = ТехКарта.ИнструментыИТехника.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = Стр.ВремяРаботыНаЕдиницу * ТекДанные.Количество;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	флСписокОперацийМодифицированность = Истина;	
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПослеУдаления(Элемент)
	
	УстановитьНаличиеОпасныхИПовышеннойОпасностиОпераций();
	флСписокОперацийМодифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТолькоПросмотрКарты = Не (Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке"));
	Если НЕ ТолькоПросмотрКарты И Поле.Имя = "СписокОперацийПродолжительностьТекст" Тогда
		
		ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,Элемент, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
		
		ФормаПодбораПродолжительности.ПродолжительностьВСекундах = Элементы.СписокОпераций.ТекущиеДанные.НормаВремениВСекундах;
		ФормаПодбораПродолжительности.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПриАктивизацииСтроки(Элемент)
	
	Если Элементы.СписокОпераций.ТекущиеДанные <> Неопределено Тогда 
		УстановитьОтборыТаблицНормативов(Элементы.СписокОпераций.ТекущиеДанные.ID, Элементы.СписокОпераций.ТекущиеДанные.Операция);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		
		Если НоваяСтрока Тогда
			флСписокОперацийМодифицированность = Истина;
		КонецЕсли;
		
		ЗначВозврата = ПроверитьЗацикливаниеНаСервере(Элементы.СписокОпераций.ТекущиеДанные.Операция);
		Если ТипЗнч(ЗначВозврата) = Тип("Соответствие") Тогда
			Для каждого ЭлемСтруктуры Из ЗначВозврата Цикл
				ПоказатьПредупреждение(Неопределено,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тех. карта %1
				|не может быть включена в тех. карту
				|%2.
				|Использование замкнутых циклов ремонтов
				|приведет к неправильной работе программы!'"),СокрЛП(ЭлемСтруктуры.Значение),СокрЛП(ЭлемСтруктуры.Ключ)));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		ЗначВозврата = ТехКартаСписокОперацийОперацияПриИзмененииНаСервере(ТекущиеДанные.Операция, Элементы.СписокОпераций.ТекущаяСтрока);
		
		Если ТипЗнч(ЗначВозврата) = Тип("Соответствие") Тогда
			Для каждого ЭлемСтруктуры Из ЗначВозврата Цикл
				ПоказатьПредупреждение(Неопределено,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тех. карта %1
				|не может быть включена в тех. карту
				|%2.
				|Использование замкнутых циклов ремонтов
				|приведет к неправильной работе программы!'"),СокрЛП(ЭлемСтруктуры.Значение),СокрЛП(ЭлемСтруктуры.Ключ)));
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	СписокОперацийПриАктивизацииСтроки(Элементы.СписокОпераций);
	
	УстановитьНаличиеОпасныхИПовышеннойОпасностиОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПередУдалением(Элемент, Отказ)
	
	мСтруктураТабличныхЧастейНормативов = Новый Структура();
	мСтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты", "тзМатериальныеЗатратыРемонтов");	
	мСтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты", "тзТрудовыеЗатратыРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника", "тзИнструментыИТехникаРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели", "тзИзмеряемыеПоказателиРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("МерыБезопасности", "тзМерыБезопасностиРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ОказываемыеУслуги", "тзОказываемыхУслугРемонтов");
	
	ТекСтрока = Элемент.ТекущиеДанные;
	
	Если Не Отказ Тогда
		
		Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейНормативов Цикл
			
			ТаблицаНормативов = ТехКарта[КлючИЗначение.Ключ];
			
			СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
			МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
			Для Каждого ЭлМассива Из МассивСтрок Цикл
				
				ТаблицаНормативов.Удалить(ЭлМассива);
				
			КонецЦикла;
			
			Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				ТаблицаНормативов = ЭтаФорма[КлючИЗначение.Значение];
				
				СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
				МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
				Для Каждого ЭлМассива Из МассивСтрок Цикл 
					
					ТаблицаНормативов.Удалить(ЭлМассива);
					
				КонецЦикла;
			КонецЕсли;
			
			Если КлючИЗначение.Ключ <> "МерыБезопасности" Тогда
				ЭтаФорма[КлючИЗначение.Ключ].Очистить();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли; 	
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				Параметры.Отбор = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТехКартаСписокОперацийОперацияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Параметры.Отбор = Новый Структура("Статус", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует"));
		КонецЕсли;
		// очистка поля кнопкой Del
		Если Текст = "" И ТипЗнч(ТекущиеДанные.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации")  Тогда
			ЗначВозврата = ОбработкаВыбораСписокОперацияНаСервере(ПредопределенноеЗначение("Справочник.торо_ТехнологическиеОперации.ПустаяСсылка"), ТекущиеДанные.ID, ТекущиеДанные.Операция);
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОперацийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	текДанные = Элемент.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(текДанные.id) И НоваяСтрока = Истина Тогда
		текДанные.id = Новый УникальныйИдентификатор();
		
		ЗначВозврата = ОбработкаВыбораСписокОперацияНаСервере(текДанные.Операция, ТекДанные.ID, ТекДанные.Операция);
		
		Если ТипЗнч(ЗначВозврата) = Тип("Соответствие") Тогда
			Для каждого ЭлемСтруктуры Из ЗначВозврата Цикл
				ПоказатьПредупреждение(Неопределено,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Тех. карта %1
				|не может быть включена в тех. карту
				|%2.
				|Использование замкнутых циклов ремонтов
				|приведет к неправильной работе программы!'"),СокрЛП(ЭлемСтруктуры.Значение),СокрЛП(ЭлемСтруктуры.Ключ)));
			КонецЦикла;
		ИначеЕсли ТипЗнч(ЗначВозврата) = Тип("Число") Тогда
			Элементы.СписокОпераций.ТекущаяСтрока = ЗначВозврата;
		КонецЕсли;
	КонецЕсли;
	УстановитьОтборыТаблицНормативов(ТекДанные.ID, ТекДанные.Операция);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты
&НаКлиенте
Процедура МатериальныеЗатратыПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		
		Отказ = ПроверитьВозможностьУдаления(ТекДанные);
		Если Отказ Тогда Возврат; КонецЕсли;
		
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзМатериальныеЗатратыРемонтов.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ТекДанные.Номенклатура));
				Для каждого Элем Из МассивСтрок Цикл
					тзМатериальныеЗатратыРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ТекДанные.Номенклатура));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.МатериальныеЗатраты.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ТекДанные.Номенклатура));
			Если МассивСтрок.Количество() > 1 Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная номенклатура уже добавлена!'"));
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
			МатериальныеЗатраты.Удалить(МатериальныеЗатраты.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
		
	Иначе
		Возврат;
	КонецЕсли; 
	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.МатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ДанныеСтроки));
			Для каждого Элем Из МассивСтрок Цикл
				
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
				
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура МатериальныеЗатратыУпаковкаПриИзменении(Элемент)
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		ТекДанные.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНаСервере(ТекДанные.Упаковка);
		МатериальныеЗатратыКоличествоУпаковокПриИзменении(Элементы.МатериальныеЗатраты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоНаЕдиницуПриИзменении(Элемент)
	
	ТекДанныеОперации  = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеМатЗатраты = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеМатЗатраты.Количество = ТекДанныеМатЗатраты.КоличествоНаЕдиницу * ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Номенклатура", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура);
			МассивСтрок = тзМатериальныеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоНаЕдиницу = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.Количество = ТекДанныеМатЗатраты.Количество;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Номенклатура", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура);
			МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоНаЕдиницу = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.Количество = ТекДанныеМатЗатраты.Количество;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоПриИзменении(Элемент)
	
	ТекДанныеОперации  = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеМатЗатраты = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеМатЗатраты.КоличествоНаЕдиницу = ТекДанныеМатЗатраты.Количество / ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Номенклатура", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура);
			МассивСтрок = тзМатериальныеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоНаЕдиницу = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.Количество = ТекДанныеМатЗатраты.Количество;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Номенклатура", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура);
			МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоНаЕдиницу = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.Количество = ТекДанныеМатЗатраты.Количество;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломИзменения(Элемент, Отказ)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.МатериальныеЗатраты.ТекущиеДанные);		
	Иначе
		ДанныеСтроки = Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ПроверкаВозможностиВводаНормативов(Отказ);	
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекДанныеОперации  = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеМатЗатраты = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеМатЗатраты.Количество = ТекДанныеМатЗатраты.КоличествоУпаковок * ?(ТекДанныеМатЗатраты.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"), 1, ПолучитьКоэффициентУпаковкиНаСервере(ТекДанныеМатЗатраты.Упаковка));
		ТекДанныеМатЗатраты.КоличествоНаЕдиницу = ТекДанныеМатЗатраты.Количество / ТекДанныеОперации.Количество;
		
		ТекДанныеМатЗатраты.КоличествоУпаковокНаЕдиницу = ТекДанныеМатЗатраты.КоличествоУпаковок / ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Номенклатура", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура);
			МассивСтрок = тзМатериальныеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоУпаковокНаЕдиницу = ТекДанныеМатЗатраты.КоличествоУпаковокНаЕдиницу;
				Стр.Количество                  = ТекДанныеМатЗатраты.Количество;
				Стр.КоличествоНаЕдиницу         = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.КоличествоУпаковок          = ТекДанныеМатЗатраты.КоличествоУпаковок;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Номенклатура", ТекДанныеОперации.ID, ТекДанныеМатЗатраты.Номенклатура);
			МассивСтрок = ТехКарта.МатериальныеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.КоличествоУпаковокНаЕдиницу = ТекДанныеМатЗатраты.КоличествоУпаковокНаЕдиницу;
				Стр.Количество                  = ТекДанныеМатЗатраты.Количество;
				Стр.КоличествоНаЕдиницу         = ТекДанныеМатЗатраты.КоличествоНаЕдиницу;
				Стр.КоличествоУпаковок          = ТекДанныеМатЗатраты.КоличествоУпаковок;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты
&НаКлиенте
Процедура ТрудовыеЗатратыПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		
		Отказ = ПроверитьВозможностьУдаления(ТекДанные);
		Если Отказ Тогда Возврат; КонецЕсли;
		
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзТрудовыеЗатратыРемонтов.НайтиСтроки(Новый Структура("ID, Квалификация", ТекДанные.ID, ТекДанные.Квалификация));
				Для каждого Элем Из МассивСтрок Цикл
					тзТрудовыеЗатратыРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID, Квалификация", ТекДанные.ID, ТекДанные.Квалификация));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.ТрудовыеЗатраты.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		
		Если НоваяСтрока Тогда
			флТрудозатратыМодифицированность = Истина;
		КонецЕсли;
	
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID, Квалификация", ТекДанные.ID, ТекДанные.Квалификация));
			Если МассивСтрок.Количество() > 1 Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная квалификация уже добавлена!'"));
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПослеУдаления(Элемент)
	флТрудозатратыМодифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Квалификация) Тогда
			ТрудовыеЗатраты.Удалить(ТрудовыеЗатраты.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 

	Иначе
		Возврат;
	КонецЕсли; 
	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.ТрудовыеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(Новый Структура("ID, Квалификация", ТекДанные.ID, ДанныеСтроки));
			Для каждого Элем Из МассивСтрок Цикл
				
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
				
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не Элементы.ТабЧасти.ТолькоПросмотр и Поле.Имя = "ТрудовыеЗатратыВремяРаботыТекст" Тогда
		
		ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,Элемент, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
		ФормаПодбораПродолжительности.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаПодбораПродолжительности.ПродолжительностьВСекундах = Элементы.ТрудовыеЗатраты.ТекущиеДанные.ВремяРаботы;
		ФормаПодбораПродолжительности.Открыть();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Модифицированность = Истина;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		флТрудозатратыМодифицированность = Истина;
		ТекДанные.ВремяРаботы = ВыбранноеЗначение;
		ТекДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
		ТрудовыеЗатратыВремяРаботыПриИзменении(Элементы.ТрудовыеЗатраты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыНаЕдиницуПриИзменении(Элемент)
	
	ТекДанныеОперации  = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеТрудЗатраты = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеТрудЗатраты.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу * ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеТрудЗатраты.Номенклатура);
			МассивСтрок = тзТрудовыеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеТрудЗатраты.Номенклатура);
			МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыПриИзменении(Элемент)
	
	ТекДанныеОперации  = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеТрудЗатраты = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботы / ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеТрудЗатраты.Квалификация);
			МассивСтрок = тзТрудовыеЗатратыРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеТрудЗатраты.Квалификация);
			МассивСтрок = ТехКарта.ТрудовыеЗатраты.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеТрудЗатраты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеТрудЗатраты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломИзменения(Элемент, Отказ)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.ТрудовыеЗатраты.ТекущиеДанные);
	Иначе
		ДанныеСтроки = Элементы.ТрудовыеЗатраты.ТекущиеДанные.Квалификация;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструментыИТехника
&НаКлиенте
Процедура ИнструментыИТехникаПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		
		Отказ = ПроверитьВозможностьУдаления(ТекДанные);
		Если Отказ Тогда Возврат; КонецЕсли;
		
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзИнструментыИТехникаРемонтов.НайтиСтроки(Новый Структура("ID, Инструмент", ТекДанные.ID, ТекДанные.Инструмент));
				Для каждого Элем Из МассивСтрок Цикл
					тзИнструментыИТехникаРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.ИнструментыИТехника.НайтиСтроки(Новый Структура("ID, Инструмент", ТекДанные.ID, ТекДанные.Инструмент));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.ИнструментыИТехника.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = ИнструментыИТехника.НайтиСтроки(Новый Структура("ID, Инструмент", ТекДанные.ID, ТекДанные.Инструмент));
			Если МассивСтрок.Количество() > 1 Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный инструмент уже добавлен!'"));
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Инструмент) Тогда
			ИнструментыИТехника.Удалить(ИнструментыИТехника.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
		
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.ИнструментыИТехника.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			МассивСтрок = ТехКарта.ИнструментыИТехника.НайтиСтроки(Новый Структура("ID, Инструмент", ТекДанные.ID, ДанныеСтроки));
			Для каждого Элем Из МассивСтрок Цикл
				
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
				
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИнструментыИТехникаВремяРаботыТекст" Тогда
		
		ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,Элемент, Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
		
		ФормаПодбораПродолжительности.ПродолжительностьВСекундах = Элементы.ИнструментыИТехника.ТекущиеДанные.ВремяРаботы;
		ФормаПодбораПродолжительности.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТекДанные.ВремяРаботы = ВыбранноеЗначение;
		ТекДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
	КонецЕсли;
	ИнструментыИТехникаВремяРаботыПриИзменении(Элементы.ИнструментыИТехника);
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаУпаковкаПриИзменении(Элемент)
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		ТекДанные.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНаСервере(ТекДанные.Упаковка);
		ИнструментыИТехникаКоличествоУпаковокПриИзменении(Элементы.МатериальныеЗатраты);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.ИнструментыИТехника.ТекущиеДанные.Инструмент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаКоличествоУпаковокПриИзменении(Элемент)
	
	ТекДанныеИнструменты = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если НЕ ТекДанныеИнструменты = Неопределено Тогда
		ТекДанныеИнструменты.Количество = ТекДанныеИнструменты.КоличествоУпаковок * ?(ТекДанныеИнструменты.Упаковка = ПредопределенноеЗначение("Справочник.УпаковкиНоменклатуры.ПустаяСсылка"), 1, ПолучитьКоэффициентУпаковкиНаСервере(ТекДанныеИнструменты.Упаковка));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаВремяРаботыПриИзменении(Элемент)
	
	ТекДанныеОперации    = Элементы.СписокОпераций.ТекущиеДанные;
	ТекДанныеИнструменты = Элементы.ИнструментыИТехника.ТекущиеДанные;
	
	Если Не ТекДанныеОперации = Неопределено Тогда
		
		ТекДанныеИнструменты.ВремяРаботыНаЕдиницу = ТекДанныеИнструменты.ВремяРаботы / ТекДанныеОперации.Количество;
		
		Если ТипЗнч(ТекДанныеОперации.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			СтруктураОтбора = Новый Структура("ID, Квалификация", ТекДанныеОперации.ID, ТекДанныеИнструменты.Инструмент);
			МассивСтрок = тзИнструментыИТехникаРемонтов.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеИнструменты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеИнструменты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;	
		Иначе
			СтруктураОтбора = Новый Структура("ID, Инструмент", ТекДанныеОперации.ID, ТекДанныеИнструменты.Инструмент);
			МассивСтрок = ТехКарта.ИнструментыИТехника.НайтиСтроки(СтруктураОтбора);
			Для каждого Стр Из МассивСтрок Цикл
				
				Стр.ВремяРаботы = ТекДанныеИнструменты.ВремяРаботы;
				Стр.ВремяРаботыНаЕдиницу = ТекДанныеИнструменты.ВремяРаботыНаЕдиницу;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПередНачаломИзменения(Элемент, Отказ)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИзмеряемыеПоказатели
&НаКлиенте
Процедура ИзмеряемыеПоказателиПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.ИзмеряемыеПоказатели.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		
		Отказ = ПроверитьВозможностьУдаления(ТекДанные);
		Если Отказ Тогда Возврат; КонецЕсли;
		
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзИзмеряемыеПоказателиРемонтов.НайтиСтроки(Новый Структура("ID, Показатель", ТекДанные.ID, ТекДанные.Показатель));
				Для каждого Элем Из МассивСтрок Цикл
					тзИзмеряемыеПоказателиРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.ИзмеряемыеПоказатели.НайтиСтроки(Новый Структура("ID, Показатель", ТекДанные.ID, ТекДанные.Показатель));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.ИзмеряемыеПоказатели.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элементы.ИзмеряемыеПоказатели.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = ИзмеряемыеПоказатели.НайтиСтроки(Новый Структура("ID, Показатель", ТекДанные.ID, ТекДанные.Показатель));
			Если МассивСтрок.Количество() > 1 Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный показатель уже добавлен!'"));
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекДанные = Элементы.ИзмеряемыеПоказатели.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
			ИзмеряемыеПоказатели.Удалить(ИзмеряемыеПоказатели.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
		
	Иначе
		Возврат;
	КонецЕсли;

	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.ИзмеряемыеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			МассивСтрок = ТехКарта.ИзмеряемыеПоказатели.НайтиСтроки(Новый Структура("ID, Показатель", ТекДанные.ID, ДанныеСтроки));
			Для каждого Элем Из МассивСтрок Цикл
				
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
				
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПередНачаломИзменения(Элемент, Отказ)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.ИзмеряемыеПоказатели.ТекущиеДанные);
		
	Иначе
		ДанныеСтроки = Элементы.ИзмеряемыеПоказатели.ТекущиеДанные.Показатель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.ИнструментыИТехника.ТекущиеДанные);
		
	Иначе
		ДанныеСтроки = Элементы.ИнструментыИТехника.ТекущиеДанные.Инструмент;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзмеряемыеПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМерыБезопасности
&НаКлиенте
Процедура МерыБезопасностиПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.МерыБезопасности.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда 
		
		Отказ = ПроверитьВозможностьУдаления(ТекДанные);
		Если Отказ Тогда Возврат; КонецЕсли;
		
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзМерыБезопасностиРемонтов.НайтиСтроки(Новый Структура("ID, МерыБезопасности", ТекДанные.ID, ТекДанные.МерыБезопасности));
				Для каждого Элем Из МассивСтрок Цикл
					тзМерыБезопасностиРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.МерыБезопасности.НайтиСтроки(Новый Структура("ID, МерыБезопасности", ТекДанные.ID, ТекДанные.МерыБезопасности));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.МерыБезопасности.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элементы.МерыБезопасности.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = МерыБезопасности.НайтиСтроки(Новый Структура("МерыБезопасности", ТекДанные.МерыБезопасности));
			Если МассивСтрок.Количество() > 1 Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная мера безопасности уже добавлена!'"));
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.МерыБезопасности.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.МерыБезопасности) Тогда
			МерыБезопасности.Удалить(МерыБезопасности.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
		
	Иначе
		Возврат;
	КонецЕсли;

	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.МерыБезопасности.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			МассивСтрок = ТехКарта.МерыБезопасности.НайтиСтроки(Новый Структура("ID, МерыБезопасности", ТекДанные.ID, ДанныеСтроки));
			Для каждого Элем Из МассивСтрок Цикл
				
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
				
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПередНачаломИзменения(Элемент, Отказ)
	
	ТекДанные = Элементы.МерыБезопасности.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нельзя указывать нормативные данные для ремонтов. Изменяйте нормативы у операций внутри ремонтов.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.МерыБезопасности.ТекущиеДанные);
	Иначе
		ДанныеСтроки = Элементы.МерыБезопасности.ТекущиеДанные.МерыБезопасности;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МерыБезопасностиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ПроверкаВозможностиВводаНормативов(Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОказываемыеУслуги
&НаКлиенте
Процедура ОказываемыеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекДанные = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
			ОказываемыеУслуги.Удалить(ОказываемыеУслуги.Индекс(ТекДанные));
			Возврат;
		КонецЕсли; 
		
	Иначе
		Возврат;
	КонецЕсли;
	
	
	ТекДанные = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	

	Если НЕ ОтменаРедактирования Тогда
		Если НоваяСтрока Тогда
			НС = ТехКарта.ОказываемыеУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ТекДанные);
		Иначе
			МассивСтрок = ТехКарта.ОказываемыеУслуги.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ДанныеСтроки));
			Для каждого Элем Из МассивСтрок Цикл
				
				ЗаполнитьЗначенияСвойств(Элем, ТекДанные);
				
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ПроверкаВозможностиВводаНормативов(Отказ); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьIDРодителяИОперациюСтрокиТабличнойчасти(Элементы.ОказываемыеУслуги.ТекущиеДанные);		
	Иначе
		ДанныеСтроки = Элементы.ОказываемыеУслуги.ТекущиеДанные.Номенклатура;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если НЕ ТекДанные = Неопределено Тогда
			МассивСтрок = ОказываемыеУслуги.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ТекДанные.Номенклатура));
			Если МассивСтрок.Количество() > 1 Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данная услуга уже добавлена в список'"));
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&НаКлиенте
Процедура ОказываемыеУслугиПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда 
		ТекДанныеОперация = Элементы.СписокОпераций.ТекущиеДанные;
		Если НЕ ТекДанныеОперация = Неопределено Тогда
			Если ТипЗнч(ТекДанныеОперация.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				МассивСтрок = тзОказываемыхУслугРемонтов.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ТекДанные.Номенклатура));
				Для каждого Элем Из МассивСтрок Цикл
					тзОказываемыхУслугРемонтов.Удалить(Элем);
				КонецЦикла;
			Иначе
				МассивСтрок = ТехКарта.ОказываемыеУслуги.НайтиСтроки(Новый Структура("ID, Номенклатура", ТекДанные.ID, ТекДанные.Номенклатура));
				Для каждого Элем Из МассивСтрок Цикл
					ТехКарта.ОказываемыеУслуги.Удалить(Элем);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ВвестиВремяПростоя(Команда)
	
	ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,ЭтаФорма,Объект.Ссылка, ВариантОткрытияОкна.ОтдельноеОкно);
	
	ФормаПодбораПродолжительности.ПродолжительностьВСекундах = ТехКарта.ВремяПростоя;
	ФормаПодбораПродолжительности.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТехКарту(Команда) 	
		
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора",Новый Структура("ДатаПринятия, ОтборПоСтатусам", ТехКарта.ДатаПринятия, ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует")) , Элементы.СписокОпераций);
	ФормаВыбора.Открыть();
	
	НоваяСтрока = Истина;   		
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОперацию(Команда)
	
	ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", , Элементы.СписокОпераций);		
	
	НоваяСтрока = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНормативамТехОпераций(Команда)
	
	ТекДанные = Элементы.СписокОпераций.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено И ТипЗнч(ТекДанные.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоНормативамТехОперацийЗавершение", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), НСтр("ru = 'Продолжительность, материальные затраты, трудозатраты и инструменты будут заполнены на основании нормативных данных! Продолжать?'"), РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНормативамТехОперацийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        ЗаполнитьПоНормативамНаСервере(ТекДанные.ID, ТекДанные.Операция);
        Модифицированность = Истина;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДату(Команда)
Элементы.ТехКартаДатаПринятия.Доступность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура Перерассчитать(Команда)
	
	ТехКартаСпособРасчетаПродолжительностиПриИзменении(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДругиеВерсииТехкарты(Команда)
Если ЭтаФорма.Модифицированность Тогда
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораНеобходимостиСохраненияИзменений",ЭтаФорма);
	ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),РежимДиалогаВопрос.ДаНетОтмена);
Иначе
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораТехкартыДляРедактирования",ЭтаФорма, Новый Структура("ТекущаяКарта", ТехКарта));
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.Форма.ФормаИсторииТехкарты",Новый Структура("Идентификатор",Объект.Ссылка),ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюВерсию(Команда)
Если ЭтаФорма.Модифицированность Тогда
	ПараметрыВопроса = Новый Структура("Назначение", "Создание_новой_версии");
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораНеобходимостиСохраненияИзменений", ЭтаФорма, ПараметрыВопроса);
	ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Данные были изменены. Сохранить изменения?'"),РежимДиалогаВопрос.ДаНетОтмена);
Иначе
	СоздатьНовуюВерсиюТехкарты(Истина);
	УстановитьЗаголовокФормы();
	ТехКартаВыполнениеРемонтаТребуетОстановаОборудованияПриИзменении(Истина);
	
КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодборТехОпераций(Команда)
	
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора",, Элементы.СписокОпераций);
	ФормаВыбора.ЗакрыватьПриВыборе = Ложь;
	ФормаВыбора.Открыть();
	
	ПодборОпераций = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокТехКартВСоставе(Команда)
	 		
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора");	
	СписокТехКарт = ПолучитьСписокТехКартВСоставе();	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ПравоеЗначение = СписокТехКарт;
	ЭлементОтбора.Использование = Истина;
	ФормаВыбора.Элементы.Список.Отображение = ОтображениеТаблицы.Список; 	
	ФормаВыбора.Элементы.ФормаВыбрать.Видимость = Ложь; 	
	ФормаВыбора.Открыть(); 	
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	
	Отказ = Ложь;
	ПроверкаВозможностиВводаНормативов(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	Если Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	ИначеЕсли Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаИнструментыИТехника Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор инструментов и техники'"));
	ИначеЕсли Элементы.ТабЧасти.ТекущаяСтраница = Элементы.ТабЧасти.ПодчиненныеЭлементы.ГруппаОказываемыеУслуги Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор услуг'"));
	    ПараметрыФормы.Вставить("ОтборПоУслугам", Истина);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьВозможностьУдаления(ТекСтрока)
	Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда Возврат Истина; КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	
	Если РольДоступна("ЧтениеНоменклатуры") ИЛИ РольДоступна("ПолныеПрава") Тогда
		// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатериальныеЗатраты.Упаковка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
		// Чтобы не отображалась единица измерения в Инструментах, когда заполнена Упаковка.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнструментыИТехникаИнструментЕдиницаИзмерения.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИнструментыИТехника.Упаковка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
		// Оформление поля "Характеристика" для табличной части мат. затрат.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристика.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатериальныеЗатраты.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
		//
		
		// Оформление поля "Характеристика" для табличной части мат. затрат.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристика.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МатериальныеЗатраты.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
		
		// Оформление для табличной части мер безопасности
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МерыБезопасности.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("МерыБезопасности.ЭтоТехКарта");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Истина;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()
	
	// Тут должен был бы быть вызов НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции,
	// но, к сожалению, данная БСПшная процедурка не все коллекции поддерживает. Поэтому:
	Для Каждого СтрокаМатЗатрат Из МатериальныеЗатраты Цикл
		
		СтрокаМатЗатрат.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(СтрокаМатЗатрат.Номенклатура);
		
		Если Не СтрокаМатЗатрат.ХарактеристикиИспользуются Тогда
			СтрокаМатЗатрат.Характеристика = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	//
	ЗаполнитьДобавленныеКолонкиМерБезопасности(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьХарактеристикиИспользуются(Номенклатура)
	
	Возврат НЕ Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать = Номенклатура.ИспользованиеХарактеристик;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьОтСтатуса()
	
	ТолькоПросмотрКарты = Не (Объект.Статус = ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке"));
	
	Элементы.Наименование.ТолькоПросмотр 			= ТолькоПросмотрКарты;
	Элементы.Код.ТолькоПросмотр 					= ТолькоПросмотрКарты;
	Элементы.ГруппаНормаВремени.ТолькоПросмотр 		= ТолькоПросмотрКарты;
	Элементы.ГруппаОстанова.ТолькоПросмотр 			= ТолькоПросмотрКарты;
	Элементы.ГруппаОпасныхОпераций.ТолькоПросмотр 	= ТолькоПросмотрКарты;
	Элементы.ТехКартаКомментарий.ТолькоПросмотр 	= ТолькоПросмотрКарты;
	Элементы.Изменить.ТолькоПросмотр 				= ТолькоПросмотрКарты;
	Элементы.СписокОпераций.ТолькоПросмотр 			= ТолькоПросмотрКарты;
	
	ДоступностьКоманд = Не ТолькоПросмотрКарты;
	
	ЭлементКоманднаяПанель = Элементы.ФормаКоманднаяПанель;
	ЭлементПерейти = Элементы.Форматоро_Перейти;
	Для Каждого ЭлементФормы Из Элементы Цикл
		Если Не (ТипЗнч(ЭлементФормы) <> Тип("КнопкаФормы") Или ЭлементФормы.Родитель = ЭлементКоманднаяПанель Или ЭлементФормы.Родитель = ЭлементПерейти) Тогда
			ЭлементФормы.Доступность = ДоступностьКоманд;
		КонецЕсли;
	КонецЦикла;
	
	Если ТолькоПросмотрКарты тогда
		Элементы.ТабЧасти.ТолькоПросмотр = Истина;
		Элементы.ТехКартаСписокОперацийОперация.РедактированиеТекста = Ложь;
		Элементы.ТехКартаСписокОперацийОперация.КнопкаВыбора = Ложь;
		Элементы.ТехКартаСписокОперацийОперация.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.ОтображатьВВыпадающемСписке;
		Для каждого текЭлем из Элементы.СписокОпераций.ПодчиненныеЭлементы Цикл
			Если ТекЭлем.Имя = "ТехКартаСписокОперацийОперация" Тогда Продолжить; КонецЕсли;
			текЭлем.ТолькоПросмотр = Истина;
		КонецЦикла;	
	Иначе 
		Элементы.ТабЧасти.ТолькоПросмотр = Ложь;
		Элементы.ТехКартаСписокОперацийОперация.ОтображениеКнопкиВыбора = ОтображениеКнопкиВыбора.Авто;
		Элементы.ТехКартаСписокОперацийОперация.РедактированиеТекста = Истина;
		Элементы.ТехКартаСписокОперацийОперация.КнопкаВыбора = Неопределено;
		Для каждого текЭлем из Элементы.СписокОпераций.ПодчиненныеЭлементы Цикл
			Если ТекЭлем.Имя = "ТехКартаСписокОперацийОперация" 
				ИЛИ ТекЭлем.Имя = "СписокОперацийПродолжительностьТекст" Тогда Продолжить; КонецЕсли;
			текЭлем.ТолькоПросмотр = Ложь;
		КонецЦикла;	
	КонецЕсли;
	УстановитьДоступностьПолейПростоя(ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования И Не ТолькоПросмотрКарты);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокТехКартВСоставе()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ТехКарты.Ссылка,
		|	торо_ВерсииТехКарт.ИдентификаторТехКарты КАК ТехКарта
		|ИЗ
		|	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
		|	ПО торо_ВерсииТехКарт.ТехКарта = торо_ТехКарты.Ссылка
		|ГДЕ
		|	торо_ТехКарты.Операция = &ИдентификаторТехКарты";
	
	Запрос.УстановитьПараметр("ИдентификаторТехКарты", Объект.Ссылка);
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();	
	
	Возврат ТаблицаРезультат.ВыгрузитьКолонку("ТехКарта");
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах)
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " м. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура РассчитатьПродолжительностьПоОперациямНаСервере(ПоНормамТО = Ложь)
	
	ТехКартаОбъект = РеквизитФормыВЗначение("ТехКарта");
	ТехКартаОбъект.РассчитатьПродолжительностьПоОперациям(ПоНормамТО);
	ЗначениеВРеквизитФормы(ТехКартаОбъект,"ТехКарта");
	
КонецПроцедуры

&НаКлиенте
Функция РассчитатьПродолжительностьПоТрудозатратам()
	
	Продолжительность = 0;
	Для Каждого СтрокаТЧ Из ТехКарта.ТрудовыеЗатраты Цикл
		
		Продолжительность = Продолжительность + СтрокаТЧ.ВремяРаботы;
		
	КонецЦикла; 
	
	ПолучитьТрудозатратыНаСервере(ТехКарта.СписокОпераций, Продолжительность);
	
	Возврат Продолжительность;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьТрудозатратыНаСервере(Знач парамСписокОпераций, Продолжительность)
	
	Для каждого СтрОперации Из парамСписокОпераций Цикл
		
		Если ТипЗнч(СтрОперации.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Продолжить;
		Иначе
			ОперацияТехКарта = ПолучитьТехКартуПоИдентификатору(СтрОперации.Операция);
			
			Если ОперацияТехКарта <> ПредопределенноеЗначение("Справочник.торо_ИдентификаторыТехКарт.ПустаяСсылка") Тогда
				Продолжительность = Продолжительность + ОперацияТехКарта.ТрудовыеЗатраты.Итог("ВремяРаботы");
			КонецЕсли;
			
			ПолучитьТрудозатратыНаСервере(ОперацияТехКарта.СписокОпераций, Продолжительность);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНовуюВерсиюТехкарты(Знач ЗаполнитьТаблицы = Ложь, Знач ТехКартаОбъект = Неопределено, Знач Копирование = Ложь)
	
	ПредВерсияТехКарты = ТехКарта.Ссылка;
	Если ЗаполнитьТаблицы Тогда
		ТехКартаОбъект = ?(ТехКартаОбъект = Неопределено, РеквизитФормыВЗначение("ТехКарта").Скопировать(), ТехКартаОбъект);
		Объект.Статус = Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.ВРазработке;
	Иначе
		ТехКартаОбъект = Справочники.торо_ТехКарты.СоздатьЭлемент();
	КонецЕсли; 
	
	ЗначениеВРеквизитФормы(ТехКартаОбъект,"ТехКарта");
	
	СоздаватьНовыйОбъект                      = Истина;
	Элементы.ТехКартаДатаПринятия.Доступность = Истина;
	Элементы.Изменить.Доступность             = Ложь;
	ТехКарта.ДатаПринятия                     = Дата("00010101");
	СтараяДатаПринятия                        = Дата("00010101");
	
	мСтруктураТабличныхЧастейНормативов = Новый Структура();
	мСтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты" , тзМатериальныеЗатратыРемонтов);	
	мСтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты"     , тзТрудовыеЗатратыРемонтов);
	мСтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника" , тзИнструментыИТехникаРемонтов);
	мСтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели", тзИзмеряемыеПоказателиРемонтов);
	мСтруктураТабличныхЧастейНормативов.Вставить("МерыБезопасности"    , тзМерыБезопасностиРемонтов);
	мСтруктураТабличныхЧастейНормативов.Вставить("ОказываемыеУслуги"    , тзОказываемыхУслугРемонтов);
		
	Если ЗаполнитьТаблицы Тогда
		Если Копирование Тогда
			СоответствиеСтарыхИНовыхID = Новый Соответствие;
		КонецЕсли;
		Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейНормативов Цикл // Для каждой табличной части
			
			Для каждого Строка Из Техкарта.СписокОпераций Цикл          // по каждой операции Из техкарты
				
				Если Копирование Тогда
					НовыйIDСтроки = СоответствиеСтарыхИНовыхID[Строка.ID];
					Если НовыйIDСтроки = Неопределено Тогда
						НовыйIDСтроки = Строка(Новый УникальныйИдентификатор);
						СоответствиеСтарыхИНовыхID.Вставить(Строка.ID, НовыйIDСтроки);						
					КонецЕсли;
				Иначе
					НовыйIDСтроки = Строка.ID;
				КонецЕсли;
				
				Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
					
					МассивСтрокКУдалению = Техкарта[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID",Строка.ID));
					
					Для каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
						Техкарта[КлючИЗначение.Ключ].Удалить(СтрокаКУдалению);
					КонецЦикла;
					
					МассивСтрокКДобавлению = КлючИЗначение.Значение.НайтиСтроки(Новый Структура("ID",Строка.ID));
									
					Для каждого СтрокаКДобавлению Из МассивСтрокКДобавлению Цикл
						НС = Техкарта[КлючИЗначение.Ключ].Добавить();
						ЗаполнитьЗначенияСвойств(НС,СтрокаКДобавлению);
						НС.ID = Строка.ID;
					КонецЦикла; 
					
				Иначе
					МассивСтрокКИзменению = Техкарта[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID",Строка.ID));
					Для каждого СтрокаКИзменениюID Из МассивСтрокКИзменению Цикл					
						СтрокаКИзменениюID.ID = НовыйIDСтроки;					
					КонецЦикла;
				КонецЕсли;
			КонецЦикла; 										
		КонецЦикла;
		Если Копирование Тогда
			Для каждого Строка Из Техкарта.СписокОпераций Цикл			
				НовыйIDСтроки = СоответствиеСтарыхИНовыхID[Строка.ID];
				Если НовыйIDСтроки = Неопределено Тогда
					НовыйIDСтроки = Строка(Новый УникальныйИдентификатор);
					СоответствиеСтарыхИНовыхID.Вставить(Строка.ID, НовыйIDСтроки);						
				КонецЕсли;
				Строка.ID = НовыйIDСтроки;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		
		Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
		Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);
		
	КонецЦикла;
	СлужебныеРеквизитыЗаполнитьНаСервере();
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТехКартуПоИдентификатору(Идентификатор, Дата = Неопределено)
	
	Если Не Дата = Неопределено Тогда
		Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(Новый Граница(Дата,ВидГраницы.Включая),Новый Структура("ИдентификаторТехКарты", Идентификатор));
	Иначе
		Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(    ,Новый Структура("ИдентификаторТехКарты", Идентификатор));// обработано
	КонецЕсли;
	
	Если Таб.Количество() Тогда
		Возврат Таб[0].ТехКарта;
	Иначе
		Возврат Справочники.торо_ТехКарты.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьФормуПоТехКарте(ТехКартаОбъект, Дата = Неопределено)
	
	ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Объект.Ссылка, Дата);
	
	ТехКартаОбъект = ТехКартаСсылка.ПолучитьОбъект();	
			
	ЗначениеВРеквизитФормы(ТехКартаОбъект,"ТехКарта");
	
	ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКарта.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакиОпаснойИПовышеннойОпасностиРаботВТЧ()
	
	ТабОпераций = ТехКарта.СписокОпераций.Выгрузить(, "Операция");
	
	МассивОпераций = ТабОпераций.ВыгрузитьКолонку("Операция");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ВерсииТехКартСрезПоследних.ТехКарта,
	|	торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
	|ИЗ
	|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&ДатаСреза, ИдентификаторТехКарты В (&МассивОпераций)) КАК торо_ВерсииТехКартСрезПоследних"; // обработано
	
	Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	Запрос.УстановитьПараметр("ДатаСреза"     , ТехКарта.ДатаПринятия);
	
	ТабТехКарт = Запрос.Выполнить().Выгрузить();
	
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		
		Если ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Стр.СодержитОпасныеОперации = Стр.Операция.Опасная;
			Стр.СодержитРаботыПовышеннойОпасности = Стр.Операция.РаботаПовышеннойОпасности;
		Иначе
			
			НайденнаяСтрока = ТабТехКарт.Найти(Стр.Операция, "ИдентификаторТехКарты");
			
			Если НайденнаяСтрока <> Неопределено Тогда
				Стр.СодержитОпасныеОперации = НайденнаяСтрока.ТехКарта.СодержитОпасныеОперации;
				Стр.СодержитРаботыПовышеннойОпасности = НайденнаяСтрока.ТехКарта.СодержитРаботыПовышеннойОпасности;	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКартаОбъект,
												тзМатериальныеЗатраты = Неопределено,
												тзТрудовыеЗатраты     = Неопределено,
												тзИзмеряемыеПоказатели= Неопределено,
												тзИнструментыИТехника = Неопределено,
												тзМерыБезопасности    = Неопределено,
												тзУслуг    			  = Неопределено)
												
	Если тзМатериальныеЗатраты = Неопределено Тогда
		тзМатериальныеЗатраты = тзМатериальныеЗатратыРемонтов;
	КонецЕсли; 											
	Если тзТрудовыеЗатраты = Неопределено Тогда
		тзТрудовыеЗатраты = тзТрудовыеЗатратыРемонтов;
	КонецЕсли;
	Если тзИзмеряемыеПоказатели = Неопределено Тогда
		тзИзмеряемыеПоказатели = тзИзмеряемыеПоказателиРемонтов;
	КонецЕсли;	
	Если тзИнструментыИТехника = Неопределено Тогда
		тзИнструментыИТехника = тзИнструментыИТехникаРемонтов;
	КонецЕсли;
	Если тзМерыБезопасности = Неопределено Тогда
		тзМерыБезопасности = тзМерыБезопасностиРемонтов;
	КонецЕсли;		
	Если тзУслуг= Неопределено Тогда
		тзУслуг = тзОказываемыхУслугРемонтов;
	КонецЕсли;	
	                    
	
	тзМатериальныеЗатраты.Очистить();
	тзТрудовыеЗатраты.Очистить();
	тзИзмеряемыеПоказатели.Очистить();
	тзИнструментыИТехника.Очистить();
	тзМерыБезопасности.Очистить();
	тзУслуг.Очистить();
	
	Если Не ТехКарта.СписокОпераций.Количество() Тогда
		МатериальныеЗатраты.Очистить();
		ТрудовыеЗатраты.Очистить();
		ИзмеряемыеПоказатели.Очистить();
		ИнструментыИТехника.Очистить();
		МерыБезопасности.Очистить();
		ОказываемыеУслуги.Очистить();
	КонецЕсли;
	
	
	Для Каждого СтрокаСОперацией Из ТехКарта.СписокОпераций Цикл	
			
		ТабМат = Новый ТаблицаЗначений;
		ТабМат.Колонки.Добавить("Номенклатура");
		ТабМат.Колонки.Добавить("ЕдиницаИзмерения");
		ТабМат.Колонки.Добавить("Количество");
		ТабМат.Колонки.Добавить("Качество");
		ТабМат.Колонки.Добавить("Упаковка");
		ТабМат.Колонки.Добавить("КоличествоУпаковок");
		ТабМат.Колонки.Добавить("КоличествоУпаковокНаЕдиницу");
		ТабМат.Колонки.Добавить("КоличествоНаЕдиницу");
		ТабМат.Колонки.Добавить("Характеристика");
		
		ТабТруд = Новый ТаблицаЗначений;
		ТабТруд.Колонки.Добавить("Квалификация");
		ТабТруд.Колонки.Добавить("Количество");
		ТабТруд.Колонки.Добавить("ВремяРаботы");
		
		ТабИнстр = Новый ТаблицаЗначений;
		ТабИнстр.Колонки.Добавить("Инструмент");
		ТабИнстр.Колонки.Добавить("ЕдиницаИзмерения");
		ТабИнстр.Колонки.Добавить("Количество");
		Табинстр.Колонки.Добавить("ВремяРаботы");
		Табинстр.Колонки.Добавить("Расценка");
		Табинстр.Колонки.Добавить("Валюта");
		ТабИнстр.Колонки.Добавить("Упаковка");
		ТабИнстр.Колонки.Добавить("КоличествоУпаковок");
		
		ТабПоказателей = Новый ТаблицаЗначений;
		ТабПоказателей.Колонки.Добавить("Показатель");
		
		ТабБезопасность = Новый ТаблицаЗначений;
		ТабБезопасность.Колонки.Добавить("МерыБезопасности");
		
		ТабУслуг = Новый ТаблицаЗначений;
		ТабУслуг.Колонки.Добавить("Номенклатура");
		ТабУслуг.Колонки.Добавить("Контрагент");
		ТабУслуг.Колонки.Добавить("ДоговорКонтрагента");
		

		ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(СтрокаСОперацией.Операция, ТехКарта.ДатаПринятия); 
		
		ПолучитьМатериалыТехКарты(ТехКартаСсылка      	, ТабМат			, ТехКартаСсылка.ДатаПринятия);	
		ПолучитьТрудЗатратыТехКарты(ТехКартаСсылка      , ТабТруд			, ТехКартаСсылка.ДатаПринятия);
		ПолучитьИнструментТехКарты(ТехКартаСсылка      	, ТабИнстр			, ТехКартаСсылка.ДатаПринятия);
		ПолучитьМерыБезопасностиТехКарты(ТехКартаСсылка	, ТабБезопасность	, ТехКартаСсылка.ДатаПринятия);
		ПолучитьПоказателиТехКарты(ТехКартаСсылка      	, ТабПоказателей	, ТехКартаСсылка.ДатаПринятия);
		ПолучитьУслугиТехКарты(ТехКартаСсылка      		, ТабУслуг	, ТехКартаСсылка.ДатаПринятия);
		
		
		Табмат.Свернуть("Номенклатура,Характеристика,ЕдиницаИзмерения,Качество, Упаковка","Количество, КоличествоУпаковок, КоличествоНаЕдиницу, КоличествоУпаковокНаЕдиницу");
		Табтруд.Свернуть("Квалификация","Количество,ВремяРаботы");
		Табинстр.Свернуть("Инструмент,ЕдиницаИзмерения, Расценка, Валюта, Упаковка","Количество, ВремяРаботы, КоличествоУпаковок");
		ТабПоказателей.Свернуть("Показатель");
		ТабБезопасность.Свернуть("МерыБезопасности");
		ТабУслуг.Свернуть("Номенклатура, Контрагент, ДоговорКонтрагента");
		
		Для каждого ТекСтрока Из ТабМат Цикл 
			НС = тзМатериальныеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла; 		
					
		Для каждого ТекСтрока Из ТабТруд Цикл 
			НС = тзТрудовыеЗатраты.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла;
		
		Для каждого ТекСтрока Из ТабПоказателей Цикл 
			НС = тзИзмеряемыеПоказатели.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла;
		
		Для каждого ТекСтрока Из Табинстр Цикл 
			НС = тзИнструментыИТехника.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла;
		
		ТабМерБезопасностиТехКарты = ТехКарта.МерыБезопасности.Выгрузить();
		Если ТипЗнч(тзМерыБезопасности) = ТИП("ТаблицаЗначений") Тогда
			ТабМерБезопасности = тзМерыБезопасности.Скопировать();
		Иначе
			ТабМерБезопасности = тзМерыБезопасности.Выгрузить();
		КонецЕсли;
		
		Для каждого ТекСтрока Из ТабБезопасность Цикл 
			Если ТабМерБезопасности.Найти(ТекСтрока.МерыБезопасности) = Неопределено 
				И ТабМерБезопасностиТехКарты.Найти(ТекСтрока.МерыБезопасности) = Неопределено Тогда
				НС = тзМерыБезопасности.Добавить();
				ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
				ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока Из ТабУслуг Цикл 
			Нс = тзУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НС,СтрокаСОперацией);
			ЗаполнитьЗначенияСвойств(НС,ТекСтрока);
		КонецЦикла;  		
		
	КонецЦикла;
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры


#Область ЗаполнениеТехКартДанными
&НаСервере
Процедура ПолучитьМатериалыТехКарты(ТехКартаОбъект, ТабМат, ДатаПринятия)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыМатериальныеЗатраты.НомерСтроки,
	               |	торо_ТехКартыМатериальныеЗатраты.ЕдиницаИзмерения,
	               |	торо_ТехКартыМатериальныеЗатраты.Количество КАК КоличествоНаЕдиницу,
	               |	торо_ТехКартыМатериальныеЗатраты.Количество,
	               |	торо_ТехКартыМатериальныеЗатраты.Номенклатура,
	               |	торо_ТехКартыМатериальныеЗатраты.Качество,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок,
	               |	торо_ТехКартыМатериальныеЗатраты.КоличествоУпаковок КАК КоличествоУпаковокНаЕдиницу,
	               |	торо_ТехКартыМатериальныеЗатраты.Упаковка,
	               |	торо_ТехКартыМатериальныеЗатраты.Характеристика
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_ТехКартыМатериальныеЗатраты
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыМатериальныеЗатраты.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыМатериальныеЗатраты.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка"      , ТехКартаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Номенклатура) тогда
			НС = ТабМат.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Выборка);
		Иначе
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			ПолучитьМатериалыТехКарты(ТехКартаСсылка, ТабМат, ТехКартаСсылка.ДатаПринятия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТрудЗатратыТехКарты(ТехКартаОбъект, ТабТруд, ДатаПринятия)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыТрудовыеЗатраты.НомерСтроки,
	               |	торо_ТехКартыТрудовыеЗатраты.Количество,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	торо_ТехКартыТрудовыеЗатраты.Квалификация,
	               |	торо_ТехКартыТрудовыеЗатраты.ВремяРаботы,
	               |	торо_ТехКартыТрудовыеЗатраты.ВремяРаботы КАК ВремяРаботыНаЕдиницу
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_ТехКартыТрудовыеЗатраты
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыТрудовыеЗатраты.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыТрудовыеЗатраты.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТехКартаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Квалификация) тогда
			ЗаполнитьЗначенияСвойств(ТабТруд.Добавить(),Выборка);
		Иначе
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			ПолучитьТрудЗатратыТехКарты(ТехКартаСсылка, ТабТруд, ТехКартаСсылка.ДатаПринятия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИнструментТехКарты(ТехКартаОбъект, ТабИнструм, ДатаПринятия)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыИнструментыИТехника.НомерСтроки,
	               |	торо_ТехКартыИнструментыИТехника.ЕдиницаИзмерения,
	               |	торо_ТехКартыИнструментыИТехника.Количество,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	торо_ТехКартыИнструментыИТехника.Инструмент,
	               |	торо_ТехКартыИнструментыИТехника.ВремяРаботы,
	               |	торо_ТехКартыИнструментыИТехника.Расценка,
	               |	торо_ТехКартыИнструментыИТехника.Валюта,
	               |	торо_ТехКартыИнструментыИТехника.Упаковка,
	               |	торо_ТехКартыИнструментыИТехника.КоличествоУпаковок,
	               |	торо_ТехКартыИнструментыИТехника.ВремяРаботы КАК ВремяРаботыНаЕдиницу
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ИнструментыИТехника КАК торо_ТехКартыИнструментыИТехника
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыИнструментыИТехника.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыИнструментыИТехника.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТехКартаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Инструмент) тогда
			ЗаполнитьЗначенияСвойств(ТабИнструм.Добавить(),Выборка);
		Иначе
			
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			ПолучитьИнструментТехКарты(ТехКартаСсылка, ТабИнструм, ТехКартаСсылка.ДатаПринятия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьМерыБезопасностиТехКарты(ТехКартаОбъект, ТабБезопасность, ДатаПринятия)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка
				   |	И торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт";
	
	Запрос.УстановитьПараметр("Ссылка",ТехКартаОбъект);
	
	Для каждого СтрМБ Из ТехКартаОбъект.МерыБезопасности Цикл
		ЗаполнитьЗначенияСвойств(ТабБезопасность.Добавить(), СтрМБ);
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
		ПолучитьМерыБезопасностиТехКарты(ТехКартаСсылка, ТабБезопасность, ТехКартаСсылка.ДатаПринятия);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьУслугиТехКарты(ТехКартаОбъект, ТабУслуг, ДатаПринятия)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыОказываемыеУслуги.НомерСтроки,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	торо_ТехКартыОказываемыеУслуги.Номенклатура,
	               |	торо_ТехКартыОказываемыеУслуги.Контрагент,
	               |	торо_ТехКартыОказываемыеУслуги.ДоговорКонтрагента
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ОказываемыеУслуги КАК торо_ТехКартыОказываемыеУслуги
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыОказываемыеУслуги.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыОказываемыеУслуги.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТехКартаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Номенклатура) тогда
			ЗаполнитьЗначенияСвойств(ТабУслуг.Добавить(),Выборка);
		Иначе
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			ПолучитьУслугиТехКарты(ТехКартаСсылка, ТабУслуг, ТехКартаСсылка.ДатаПринятия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПоказателиТехКарты(ТехКартаОбъект, ТабПоказателей, ДатаПринятия)
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК Операция_Техкарта,
	               |	торо_ТехКартыСписокОпераций.Ссылка,
	               |	торо_ТехКартыИзмеряемыеПоказатели.НомерСтроки,
	               |	торо_ТехКартыСписокОпераций.ID,
	               |	торо_ТехКартыСписокОпераций.Операция,
	               |	торо_ТехКартыИзмеряемыеПоказатели.Показатель
	               |ИЗ
	               |	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.ИзмеряемыеПоказатели КАК торо_ТехКартыИзмеряемыеПоказатели
	               |		ПО торо_ТехКартыСписокОпераций.Ссылка = торо_ТехКартыИзмеряемыеПоказатели.Ссылка
	               |			И торо_ТехКартыСписокОпераций.ID = торо_ТехКартыИзмеряемыеПоказатели.ID
	               |			И (НЕ торо_ТехКартыСписокОпераций.Операция ССЫЛКА Справочник.торо_ИдентификаторыТехКарт)
	               |ГДЕ
	               |	торо_ТехКартыСписокОпераций.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТехКартаОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Операция_Техкарта И ЗначениеЗаполнено(Выборка.Показатель) тогда
			ЗаполнитьЗначенияСвойств(ТабПоказателей.Добавить(),Выборка);
		Иначе
			ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(Выборка.Операция, ДатаПринятия);
			
			ПолучитьПоказателиТехКарты(ТехКартаСсылка, ТабПоказателей ,ТехКартаСсылка.ДатаПринятия);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

&НаСервере
Процедура ЗаписатьНормативыОпераций(ТехКартаОбъект)
	
	Если МатериальныеЗатраты.Количество() > 0 тогда
		текСтрока = МатериальныеЗатраты[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.МатериальныеЗатраты;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			
			ТаблицаНормативов.Удалить(ЭлМассива);
			
		КонецЦикла;
		Для каждого ТекСтрока Из МатериальныеЗатраты Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.МатериальныеЗатраты.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТрудовыеЗатраты.Количество() > 0 тогда
		текСтрока = ТрудовыеЗатраты[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.ТрудовыеЗатраты;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			
			ТаблицаНормативов.Удалить(ЭлМассива);
			
		КонецЦикла;
		Для каждого ТекСтрока Из ТрудовыеЗатраты Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.ТрудовыеЗатраты.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	если ИнструментыИТехника.Количество() > 0 тогда
		текСтрока = ИнструментыИТехника[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.ИнструментыИТехника;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			
			ТаблицаНормативов.Удалить(ЭлМассива);
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ИнструментыИТехника Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.ИнструментыИТехника.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	если ИзмеряемыеПоказатели.Количество() > 0 тогда
		текСтрока = ИзмеряемыеПоказатели[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.ИзмеряемыеПоказатели;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			
			ТаблицаНормативов.Удалить(ЭлМассива);
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из ИзмеряемыеПоказатели Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.ИзмеряемыеПоказатели.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	если МерыБезопасности.Количество() > 0 тогда
		текСтрока = МерыБезопасности[0];
		
		Если ТипЗнч(текСтрока.Операция) = тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			Возврат;
		КонецЕсли;
		
		ТаблицаНормативов = ТехКартаОбъект.МерыБезопасности;
		
		СтруктураОтбора = Новый Структура("Операция, ID", ТекСтрока.Операция, ТекСтрока.ID);
		МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
		Для Каждого ЭлМассива Из МассивСтрок Цикл
			
			ТаблицаНормативов.Удалить(ЭлМассива);
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из МерыБезопасности Цикл
			ЗаполнитьЗначенияСвойств(ТехКартаОбъект.МерыБезопасности.Добавить(),текСтрока);
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ПроверитьДатуНаСервере(Дата, Идентификатор, ТехКарта, МассивИдентификаторов)
	
	// проверка на возможность смены даты по самой техкарте
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ВерсииТехКарт.ТехКарта
	|ИЗ
	|	РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	|ГДЕ
	|	торо_ВерсииТехКарт.Период = &Период
	|	И торо_ВерсииТехКарт.ИдентификаторТехКарты = &ИдентификаторТехКарты
	|	И торо_ВерсииТехКарт.ТехКарта <> &ТехКарта";
	
	Запрос.УстановитьПараметр("Период"               , Дата);
	Запрос.УстановитьПараметр("ИдентификаторТехКарты", Идентификатор);
	Запрос.УстановитьПараметр("ТехКарта"             , ТехКарта);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'На указанную дату уже имеется технологическая карта.'");
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка на возможность установки даты по всем техкартам, куда она входит в состав.
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СоставИерархическихТехКартРемонтов.ТехКарта,
	               |	торо_СоставИерархическихТехКартРемонтов.ТехКарта.ДатаПринятия КАК ДатаПринятия
	               |ИЗ
	               |	РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
	               |ГДЕ
	               |	торо_СоставИерархическихТехКартРемонтов.Состав = &ТехКарта
	               |	И торо_СоставИерархическихТехКартРемонтов.ТехКарта.ДатаПринятия < &ДатаПринятия";
	
	Запрос.УстановитьПараметр("ДатаПринятия", Дата);
	Запрос.УстановитьПараметр("ТехКарта"    , ТехКарта);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		ТекстСообщения = НСтр("ru = 'Невозможно изменить дату, так как данная технологическая карта входит в состав <%1> с датой принятия %2'");
		Пока Выборка.Следующий() Цикл
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Выборка.ТехКарта,Выборка.ДатаПринятия);
			Сообщение.Сообщить(); 	
		КонецЦикла; 
		
		Возврат Ложь;
		
	КонецЕсли; 
	
	// проверка по составу техкарт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты КАК ИдентификаторТехКарты
	|ИЗ
	|	РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(&Дата, ИдентификаторТехКарты В (&МассивИдентификаторов)) КАК торо_ВерсииТехКартСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("МассивИдентификаторов",МассивИдентификаторов);
	
	МассивИмеющихся = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИдентификаторТехКарты");
	
	МассивСтрокКУдалению = Новый Массив;
	
	Для каждого Элемент Из МассивИдентификаторов Цикл
		Если МассивИмеющихся.Найти(Элемент) = Неопределено Тогда // значит нет такой версии на указанную дату
			МассивСтрокКУдалению.Добавить(Элемент);
		КонецЕсли; 
	КонецЦикла; 	
	
	Если МассивСтрокКУдалению.Количество() > 0 Тогда
		Возврат МассивСтрокКУдалению;
	КонецЕсли; 
	
	
	Возврат Истина;	
КонецФункции


&НаСервере
Функция ОбработкаВыбораСписокОперацияНаСервере(ТехОперация, ТекДанныеID, ТекДанныеОперация)
	
	Если ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		СтруктураВозврата = ПроверитьЗацикливаниеНаСервере(ТехОперация);
		
		Если СтруктураВозврата.Количество() > 0 Тогда
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(ТехОперация, ТехКарта.ДатаПринятия);
		
		Если ЗначениеЗаполнено(ТехКартаСсылка) Тогда
			Если ТекДанныеID = Неопределено И ТекДанныеОперация = Неопределено Тогда
				НовСтрокаСО = ТехКарта.СписокОпераций.Добавить();
			Иначе
				Массив = ТехКарта.СписокОпераций.НайтиСтроки(Новый Структура("ID, Операция", ТекДанныеID, ТекДанныеОперация));
				Если Массив.Количество() = 0 Тогда
					Возврат Неопределено;
				Иначе
					НовСтрокаСО = Массив[0];
				КонецЕсли;
			КонецЕсли;
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'На дату %1 отсутствуют версии тех. карты <%2>.'");
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст,ТехКарта.ДатаПринятия,ТехОперация);
			Сообщение.Сообщить();
			Возврат 0;
		КонецЕсли; 
				
		НовСтрокаСО.Операция              = ТехОперация;
		
			
		НовСтрокаСО.Продолжительность                 = ТехКартаСсылка.НормаВремени / 3600;					
		НовСтрокаСО.НормаВремениВСекундах             = ТехКартаСсылка.НормаВремени;
		НовСтрокаСО.ПродолжительностьТекст 			  = СформироватьПродолжительность(НовСтрокаСО.НормаВремениВСекундах);
		НовСтрокаСО.СодержитОпасныеОперации           = ТехКартаСсылка.СодержитОпасныеОперации;				
		НовСтрокаСО.СодержитРаботыПовышеннойОпасности = ТехКартаСсылка.СодержитРаботыПовышеннойОпасности;	
		
		Если ФОИспользоватьОпасноеПроизводство 
			И НЕ ТехКарта.СодержитОпасныеОперации
			И НовСтрокаСО.СодержитОпасныеОперации Тогда
			
			ТехКарта.СодержитОпасныеОперации                   = Истина;
			Элементы.КартинкаСодержитОпасныеОперации.Видимость = Истина;
			Элементы.СодержитОпасныеОперации.Видимость         = Истина;
			
		КонецЕсли;
		
		Если ФОИспользоватьОпасноеПроизводство 
			И НЕ ТехКарта.СодержитРаботыПовышеннойОпасности 
			И НовСтрокаСО.СодержитРаботыПовышеннойОпасности Тогда
			
			ТехКарта.СодержитРаботыПовышеннойОпасности                   = Истина;
			Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = Истина;
			Элементы.СодержитРаботыПовышеннойОпасности.Видимость         = Истина;
			
		КонецЕсли;
		
		НовСтрокаСО.СпособВыполнения = Перечисления.СпособыСтроительства.Хозспособ;
		НовСтрокаСО.Количество	     = 1;
		НовСтрокаСО.Картинка		 = 0;
		
		ID_Родителя  = Новый УникальныйИдентификатор;
		НовСтрокаСО.ID = ID_Родителя;
		
		ДополнитьЗатратыРемонтов(НовСтрокаСО);
		
		Возврат НовСтрокаСО.ПолучитьИдентификатор();
		
	ИначеЕсли ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		СтруктураСоответствияТЧРемонта = Новый Структура();
		СтруктураСоответствияТЧРемонта.Вставить("МатериальныеЗатраты",
			ТехКарта.МатериальныеЗатраты);
		СтруктураСоответствияТЧРемонта.Вставить("ТрудовыеЗатраты",
			ТехКарта.ТрудовыеЗатраты);
		СтруктураСоответствияТЧРемонта.Вставить("ИнструментыИТехника",
			ТехКарта.ИнструментыИТехника);
		
		Если ТекДанныеID = Неопределено И ТекДанныеОперация = Неопределено Тогда
			НовСтрокаСО = ТехКарта.СписокОпераций.Добавить();
			НовСтрокаСО.ID = Новый УникальныйИдентификатор;
		Иначе
			Массив = ТехКарта.СписокОпераций.НайтиСтроки(Новый Структура("ID, Операция", ТекДанныеID, ТекДанныеОперация));
			Если Массив.Количество() = 0 Тогда
				Возврат Неопределено;
			Иначе
				НовСтрокаСО = Массив[0];
				
				// удалить старые матзатраты и т.п.
				Для Каждого КлючИЗначение Из СтруктураСоответствияТЧРемонта Цикл
					
					ТЧКарты = ТехКарта[КлючИЗначение.Ключ];						
					МассивУдаляемого = ТЧКарты.НайтиСтроки(Новый Структура("ID, Операция", ТекДанныеID, ТекДанныеОперация));
					Для каждого Элемент Из МассивУдаляемого Цикл
						ТЧКарты.Удалить(ТЧКарты.Индекс(Элемент));
						//ТЧКарты.Удалить(Элемент.Индекс());
					КонецЦикла; 
					
				КонецЦикла; 
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТехОперация) Тогда
			
			НовСтрокаСО.Операция              = ТехОперация;
			НовСтрокаСО.Продолжительность     = ТехОперация.НормаВремени / 3600;
			НовСтрокаСО.НормаВремениВСекундах = ТехОперация.НормаВремени;
			НовСтрокаСО.ПродолжительностьТекст = СформироватьПродолжительность(НовСтрокаСО.НормаВремениВСекундах);
			НовСтрокаСО.СпособВыполнения      = Перечисления.СпособыСтроительства.Хозспособ;
			ID_Родителя = НовСтрокаСО.ID;
			НовСтрокаСО.Количество	  = 1;
			НовСтрокаСО.СодержитОпасныеОперации = ТехОперация.Опасная;
			НовСтрокаСО.СодержитРаботыПовышеннойОпасности = ТехОперация.РаботаПовышеннойОпасности;
			
			НовСтрокаСО.Картинка		 = 2;
			
			// Заполнение табличных частей нормативов.
			
			
			
			Для Каждого КлючИЗначение Из СтруктураСоответствияТЧРемонта Цикл
				
				ТЧОперации = ТехОперация[КлючИЗначение.Ключ];
				Для каждого СтрокаТЧ Из ТЧОперации Цикл
					
					НоваяСтрокаТЧ = КлючИЗначение.Значение.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
					НоваяСтрокаТЧ.ID = ID_Родителя;
					НоваяСтрокаТЧ.Операция = ТехОперация;
					
					Если КлючИЗначение.Ключ = "МатериальныеЗатраты" Тогда
						НоваяСтрокаТЧ.КоличествоНаЕдиницу = СтрокаТЧ.Количество;
						НоваяСтрокаТЧ.КоличествоУпаковокНаЕдиницу = СтрокаТЧ.КоличествоУпаковок;
					КонецЕсли;
					
				КонецЦикла; 
				
			КонецЦикла;
			СлужебныеРеквизитыЗаполнитьНаСервере();
			
			Если ФОИспользоватьОпасноеПроизводство И НЕ ТехКарта.СодержитОпасныеОперации И ТехОперация.Опасная Тогда
				ТехКарта.СодержитОпасныеОперации = Истина;
				Элементы.КартинкаСодержитОпасныеОперации.Видимость = Истина;
				Элементы.СодержитОпасныеОперации.Видимость = Истина;
			КонецЕсли;
			
			Если ФОИспользоватьОпасноеПроизводство И НЕ ТехКарта.СодержитРаботыПовышеннойОпасности И ТехОперация.РаботаПовышеннойОпасности Тогда
				ТехКарта.СодержитРаботыПовышеннойОпасности = Истина;
				Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = Истина;
				Элементы.СодержитРаботыПовышеннойОпасности.Видимость = Истина;
			КонецЕсли;
			
			Возврат НовСтрокаСО.ПолучитьИдентификатор();
			
			
		КонецЕсли; 
	КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПроверитьЗацикливаниеНаСервере(ТехОперация)
	
	ЗнОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ЗнОбъект.ЕстьЗацикливаниеРемонтов(ТехОперация, Объект.Ссылка);
	
КонецФункции

&НаСервере
Процедура УстановитьОтборыТаблицНормативов(ID, Операция)
	
	мСтруктураТабличныхЧастейНормативов = Новый Структура();
	мСтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты" , "тзМатериальныеЗатратыРемонтов");	
	мСтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты"     , "тзТрудовыеЗатратыРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника" , "тзИнструментыИТехникаРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели", "тзИзмеряемыеПоказателиРемонтов");
	мСтруктураТабличныхЧастейНормативов.Вставить("ОказываемыеУслуги"   , "тзОказываемыхУслугРемонтов");
	
	Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейНормативов Цикл
		
		Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			Элементы[КлючИЗначение.Ключ].ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ID", ID));
		Иначе
			Если ТипЗнч(Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
				ЭтаФорма[КлючИЗначение.Ключ].Загрузить(ЭтаФорма[КлючИЗначение.Значение].Выгрузить(Новый Структура("ID", ID)));	
				Элементы[КлючИЗначение.Ключ].ЦветТекста = Новый Цвет(128,128,128);
			Иначе
				ЭтаФорма[КлючИЗначение.Ключ].Загрузить(ТехКарта[КлючИЗначение.Ключ].Выгрузить(Новый Структура("ID", ID)));
				Элементы[КлючИЗначение.Ключ].ЦветТекста = Новый Цвет(51,51,51);
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
	// Меры безопасности обрабатываем отдельно
	ЭтаФорма.МерыБезопасности.Загрузить(ТехКарта.МерыБезопасности.Выгрузить());
	Для каждого СтрМБ Из тзМерыБезопасностиРемонтов Цикл
		ЗаполнитьЗначенияСвойств(ЭтаФорма.МерыБезопасности.Добавить(), СтрМБ);
	КонецЦикла;
	
	Для каждого Стр Из ТрудовыеЗатраты Цикл
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
	КонецЦикла;
	
	Для каждого Стр Из ИнструментыИТехника Цикл
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
	КонецЦикла;
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда // значит Новый идентификатор не создается
		Если Не СоздаватьНовыйОбъект Тогда
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Технологические карты ремонтов) [Принята с: %2 г.][%3]'"), Объект.Наименование, Формат(ТехКарта.ДатаПринятия,"ДФ=dd.MM.yyyy"), Объект.Статус);
		Иначе
			СтрокаНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 (Технологические карты ремонтов) (создание новой версии)'"), Объект.Наименование);
		КонецЕсли; 
	Иначе
		СтрокаНаименования = НСтр("ru = 'Технологические карты ремонтов (создание)'");
	КонецЕсли;
	
	ЭтаФорма.Заголовок = СтрокаНаименования;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьЗатратыРемонтов(СтрокаОперации)
	
	Табмат = Новый ТаблицаЗначений;
	Табмат.Колонки.Добавить("Номенклатура");
	Табмат.Колонки.Добавить("ЕдиницаИзмерения");
	Табмат.Колонки.Добавить("Количество");
	Табмат.Колонки.Добавить("Качество");
	Табмат.Колонки.Добавить("КоличествоНаЕдиницу");
	ТабМат.Колонки.Добавить("Упаковка");
	ТабМат.Колонки.Добавить("КоличествоУпаковок");
	ТабМат.Колонки.Добавить("КоличествоУпаковокНаЕдиницу");
	
	Табтруд = Новый ТаблицаЗначений;
	Табтруд.Колонки.Добавить("Квалификация");
	Табтруд.Колонки.Добавить("Количество");
	Табтруд.Колонки.Добавить("ВремяРаботы");
	Табтруд.Колонки.Добавить("ВремяРаботыНаЕдиницу");
	
	Табинстр = Новый ТаблицаЗначений;
	Табинстр.Колонки.Добавить("Инструмент");
	Табинстр.Колонки.Добавить("ЕдиницаИзмерения");
	Табинстр.Колонки.Добавить("Количество");
	Табинстр.Колонки.Добавить("ВремяРаботы");
	Табинстр.Колонки.Добавить("Расценка");
	Табинстр.Колонки.Добавить("Валюта");
	Табинстр.Колонки.Добавить("Упаковка");
	Табинстр.Колонки.Добавить("КоличествоУпаковок");
	
	ТабПоказателей = Новый ТаблицаЗначений;
	ТабПоказателей.Колонки.Добавить("Показатель");
	
	ТабБезопасность = Новый ТаблицаЗначений;
	ТабБезопасность.Колонки.Добавить("МерыБезопасности");
	
	ТабУслуг = Новый ТаблицаЗначений;
	ТабУслуг.Колонки.Добавить("Номенклатура");
	ТабУслуг.Колонки.Добавить("Контрагент");
	ТабУслуг.Колонки.Добавить("ДоговорКонтрагента");

	
	ТехКартаСсылка = ПолучитьТехКартуПоИдентификатору(СтрокаОперации.Операция, ТехКарта.ДатаПринятия); 
	
	ПолучитьматериалыТехКарты(  ТехКартаСсылка      ,Табмат           ,ТехКартаСсылка.ДатаПринятия);
	ПолучитьТрудЗатратыТехКарты(ТехКартаСсылка      ,Табтруд          ,ТехКартаСсылка.ДатаПринятия);
	ПолучитьИнструментТехКарты( ТехКартаСсылка      ,Табинстр         ,ТехКартаСсылка.ДатаПринятия);
	ПолучитьПоказателиТехКарты( ТехКартаСсылка      ,ТабПоказателей   ,ТехКартаСсылка.ДатаПринятия);
	ПолучитьМерыБезопасностиТехКарты(ТехКартаСсылка ,ТабБезопасность  ,ТехКартаСсылка.ДатаПринятия);
	ПолучитьУслугиТехКарты	 (ТехКартаСсылка		,ТабУслуг 		  ,ТехКартаСсылка.ДатаПринятия);
	
	Табмат.Свернуть("Номенклатура,ЕдиницаИзмерения,Качество, Упаковка, КоличествоНаЕдиницу, КоличествоУпаковокНаединицу","Количество, КоличествоУпаковок");
	Табтруд.Свернуть("Квалификация, ВремяРаботыНаЕдиницу","Количество,ВремяРаботы");
	Табинстр.Свернуть("Инструмент,ЕдиницаИзмерения, ВремяРаботы, Расценка, Валюта, Упаковка","Количество, КоличествоУпаковок");
	ТабПоказателей.Свернуть("Показатель");
	ТабБезопасность.Свернуть("МерыБезопасности");
	ТабУслуг.Свернуть("Номенклатура, Контрагент, ДоговорКонтрагента");
	
	Для каждого Текстрока Из Табмат Цикл 
		Нс = тзМатериальныеЗатратыРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
		Нс.Количество = СтрокаОперации.Количество * ТекСтрока.Количество;
	КонецЦикла;
	
	Для каждого Текстрока Из Табтруд Цикл 
		Нс = тзТрудовыеЗатратыРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
		Нс.ВремяРаботы = СтрокаОперации.Количество * ТекСтрока.ВремяРаботы;
	КонецЦикла;
	
	Для каждого Текстрока Из ТабПоказателей Цикл 
		Нс = тзИзмеряемыеПоказателиРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
	КонецЦикла;
	
	Для каждого Текстрока Из Табинстр Цикл 
		Нс = тзИнструментыИТехникаРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
	КонецЦикла;
	
	ТабМерБезопасности = ТехКарта.МерыБезопасности.Выгрузить();
	Если ТипЗнч(тзМерыБезопасностиРемонтов) = ТИП("ТаблицаЗначений") Тогда
		ТабМерБезопасностиРемонтов = тзМерыБезопасностиРемонтов.Скопировать();
	Иначе
		ТабМерБезопасностиРемонтов = тзМерыБезопасностиРемонтов.Выгрузить();
	КонецЕсли;
	
	Для каждого Текстрока Из ТабБезопасность Цикл 
		Если ТабМерБезопасности.Найти(ТекСтрока.МерыБезопасности) = Неопределено 
			И ТабМерБезопасностиРемонтов.Найти(ТекСтрока.МерыБезопасности) = Неопределено Тогда
			Нс = тзМерыБезопасностиРемонтов.Добавить();
			ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
			ЗаполнитьЗначенияСвойств(Нс,Текстрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Текстрока Из ТабУслуг Цикл 
		Нс = тзОказываемыхУслугРемонтов.Добавить();
		ЗаполнитьЗначенияСвойств(Нс,СтрокаОперации);
		ЗаполнитьЗначенияСвойств(Нс,Текстрока);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНаличиеОпасныхИПовышеннойОпасностиОпераций()
	
	Если ФОИспользоватьОпасноеПроизводство ИЛИ ФОИспользоватьНарядДопускОбязательно Тогда
		МассивОпераций = Новый Массив;
		
		Для каждого Стр Из ТехКарта.СписокОпераций Цикл
			
			МассивОпераций.Добавить(Стр.Операция);
			
		КонецЦикла; 
		Если ТехКарта.СодержитОпасныеОперации Тогда
			ЕстьОпасныеОперации = ПроверитьНаличиеОпасныхОперацийНаСервере(МассивОпераций,ТехКарта.ДатаПринятия);
			ТехКарта.СодержитОпасныеОперации = ЕстьОпасныеОперации;
			Элементы.СодержитОпасныеОперации.Видимость = ЕстьОпасныеОперации;
			Элементы.КартинкаСодержитОпасныеОперации.Видимость = ЕстьОпасныеОперации;
		КонецЕсли;
		Если ТехКарта.СодержитРаботыПовышеннойОпасности Тогда
			ЕстьРаботыПовышеннойОпасности = ПроверитьНаличиеРаботПовышеннойОпасностиНаСервере(МассивОпераций,ТехКарта.ДатаПринятия);
			ТехКарта.СодержитРаботыПовышеннойОпасности = ЕстьРаботыПовышеннойОпасности;
			Элементы.СодержитРаботыПовышеннойОпасности.Видимость = ЕстьРаботыПовышеннойОпасности;
			Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = ЕстьРаботыПовышеннойОпасности;
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаличиеОпасныхОперацийНаСервере(Операции,ДатаПринятия)
	
	флЕстьОпаснаяОперация = Ложь;
	Для каждого СтрокаМассива Из Операции Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Если СтрокаМассива.Опасная Тогда
				флЕстьОпаснаяОперация = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ДатаПринятия, Новый Структура("ИдентификаторТехКарты", СтрокаМассива));
			
			Если Таб.Количество() > 0 Тогда
				Если Таб[0].ТехКарта.СодержитОпасныеОперации Тогда
					флЕстьОпаснаяОперация = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флЕстьОпаснаяОперация;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНаличиеРаботПовышеннойОпасностиНаСервере(Операции,ДатаПринятия)
	
	флЕстьРаботаПовышеннойОпасности = Ложь;
	Для каждого СтрокаМассива Из Операции Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Если СтрокаМассива.РаботаПовышеннойОпасности Тогда
				флЕстьРаботаПовышеннойОпасности = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ДатаПринятия, Новый Структура("ИдентификаторТехКарты", СтрокаМассива));
			
			Если Таб.Количество() > 0 Тогда
				Если Таб[0].ТехКарта.СодержитРаботыПовышеннойОпасности Тогда
					флЕстьРаботаПовышеннойОпасности = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флЕстьРаботаПовышеннойОпасности;
	
КонецФункции

&НаСервере
Функция ТехКартаСписокОперацийОперацияПриИзмененииНаСервере(ТехОперация, ТекСтрока)
	
	Если ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
		
		ЗначВозврата = ПроверитьЗацикливаниеНаСервере(ТехОперация);
		
		Если ЗначВозврата.Количество() > 0 Тогда
			Возврат ЗначВозврата;
		КонецЕсли;
		
		РедактируемаяСтрока = ТехКарта.СписокОпераций.НайтиПоИдентификатору(ТекСтрока);
		
		Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ТехКарта.ДатаПринятия, Новый Структура("ИдентификаторТехКарты", ТехОперация));
		
		Если Таб.Количество() > 0 Тогда
			РедактируемаяСтрока.Продолжительность                 = Таб[0].ТехКарта.НормаВремени / 3600;
			РедактируемаяСтрока.НормаВремениВСекундах             = Таб[0].ТехКарта.НормаВремени;
			РедактируемаяСтрока.ПродолжительностьТекст 			  = СформироватьПродолжительность(РедактируемаяСтрока.НормаВремениВСекундах);
			РедактируемаяСтрока.СодержитОпасныеОперации           = Таб[0].ТехКарта.СодержитОпасныеОперации;
			РедактируемаяСтрока.СодержитРаботыПовышеннойОпасности = Таб[0].ТехКарта.СодержитРаботыПовышеннойОпасности; 
			
			Если ФОИспользоватьОпасноеПроизводство И НЕ ТехКарта.СодержитОпасныеОперации И Таб[0].ТехКарта.СодержитОпасныеОперации Тогда
				ТехКарта.СодержитОпасныеОперации = Истина;
				Элементы.КартинкаСодержитОпасныеОперации.Видимость = Истина;
				Элементы.СодержитОпасныеОперации.Видимость = Истина;
			КонецЕсли;
			
			Если ФОИспользоватьОпасноеПроизводство И НЕ ТехКарта.СодержитОпасныеОперации И Таб[0].ТехКарта.СодержитРаботыПовышеннойОпасности Тогда
				ТехКарта.СодержитРаботыПовышеннойОпасности = Истина;
				Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = Истина;
				Элементы.СодержитРаботыПовышеннойОпасности.Видимость = Истина;
			КонецЕсли;
			
		КонецЕсли;
		РедактируемаяСтрока.СпособВыполнения      = Перечисления.СпособыСтроительства.Хозспособ;
		
		ID_Родителя  = Новый УникальныйИдентификатор;
		РедактируемаяСтрока.ID = ID_Родителя;
		
		ДополнитьЗатратыРемонтов(РедактируемаяСтрока);
		
	ИначеЕсли ТипЗнч(ТехОперация) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
		
		РедактируемаяСтрока = ТехКарта.СписокОпераций.НайтиПоИдентификатору(ТекСтрока);
		
		РедактируемаяСтрока.Продолжительность                 = ТехОперация.НормаВремени / 3600;
		РедактируемаяСтрока.НормаВремениВСекундах             = ТехОперация.НормаВремени;
		РедактируемаяСтрока.ПродолжительностьТекст 			  = СформироватьПродолжительность(РедактируемаяСтрока.НормаВремениВСекундах);
		РедактируемаяСтрока.СпособВыполнения                  = Перечисления.СпособыСтроительства.Хозспособ;
		РедактируемаяСтрока.СодержитОпасныеОперации           = ТехОперация.Опасная;
		РедактируемаяСтрока.СодержитРаботыПовышеннойОпасности = ТехОперация.РаботаПовышеннойОпасности;
		
		// Заполнение табличных частей нормативов.
		
		СтруктураСоответствияТЧРемонта = Новый Структура();
		СтруктураСоответствияТЧРемонта.Вставить("МатериальныеЗатраты", ТехКарта.МатериальныеЗатраты);
		СтруктураСоответствияТЧРемонта.Вставить("ТрудовыеЗатраты"    , ТехКарта.ТрудовыеЗатраты);
		СтруктураСоответствияТЧРемонта.Вставить("ИнструментыИТехника", ТехКарта.ИнструментыИТехника);
		
		ТекID = РедактируемаяСтрока.ID;
		ТекОперация = ТехОперация;
		ID_Родителя = ТекID; 
		
		Если МатериальныеЗатраты.Количество() > 0 Тогда
			
			ТаблицаНормативов = ТехКарта.МатериальныеЗатраты;
			
			СтруктураОтбора = Новый Структура("Операция, ID", ТекОперация, ТекID);
			МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
			Для Каждого ЭлМассива Из МассивСтрок Цикл
				
				ТаблицаНормативов.Удалить(ЭлМассива);
				
			КонецЦикла;
		КонецЕсли;
		
		Если ТрудовыеЗатраты.Количество() > 0 Тогда
			
			ТаблицаНормативов = ТехКарта.ТрудовыеЗатраты;
			
			СтруктураОтбора = Новый Структура("Операция, ID", ТекОперация, ТекID);
			МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
			Для Каждого ЭлМассива Из МассивСтрок Цикл
				
				ТаблицаНормативов.Удалить(ЭлМассива);
				
			КонецЦикла;
		КонецЕсли;
		
		Если ИнструментыИТехника.Количество() > 0 Тогда
			
			ТаблицаНормативов = ТехКарта.ИнструментыИТехника;
			
			СтруктураОтбора = Новый Структура("Операция, ID", ТекОперация, ТекID);
			МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
			Для Каждого ЭлМассива Из МассивСтрок Цикл
				
				ТаблицаНормативов.Удалить(ЭлМассива);
				
			КонецЦикла;
		КонецЕсли;
		
		Если ИзмеряемыеПоказатели.Количество() > 0 Тогда
			
			ТаблицаНормативов = ТехКарта.ИзмеряемыеПоказатели;
			
			СтруктураОтбора = Новый Структура("Операция, ID", ТекОперация, ТекID);
			МассивСтрок = ТаблицаНормативов.НайтиСтроки(СтруктураОтбора);
			Для Каждого ЭлМассива Из МассивСтрок Цикл
				
				ТаблицаНормативов.Удалить(ЭлМассива);
				
			КонецЦикла;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из СтруктураСоответствияТЧРемонта Цикл
			
			ТЧОперации = ТехОперация[КлючИЗначение.Ключ];
			Для каждого СтрокаТЧ Из ТЧОперации Цикл
				
				НоваяСтрокаТЧ = КлючИЗначение.Значение.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, СтрокаТЧ);
				НоваяСтрокаТЧ.ID = ID_Родителя;
				НоваяСтрокаТЧ.Операция = ТекОперация;
			КонецЦикла; 
			
		КонецЦикла;
		
		Если ФОИспользоватьОпасноеПроизводство И НЕ ТехКарта.СодержитОпасныеОперации И ТехОперация.Опасная Тогда
			ТехКарта.СодержитОпасныеОперации = Истина;
			Элементы.КартинкаСодержитОпасныеОперации.Видимость = Истина;
			Элементы.СодержитОпасныеОперации.Видимость = Истина;
		КонецЕсли;
		
		Если ФОИспользоватьОпасноеПроизводство И НЕ ТехКарта.СодержитОпасныеОперации И ТехОперация.РаботаПовышеннойОпасности Тогда
			ТехКарта.СодержитРаботыПовышеннойОпасности = Истина;
			Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = Истина;
			Элементы.СодержитРаботыПовышеннойОпасности.Видимость = Истина;
		КонецЕсли;
		
		УстановитьОтборыТаблицНормативов(РедактируемаяСтрока.ID, ТехОперация);
		
	КонецЕсли;	
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ТехКартаВыполнениеРемонтаТребуетОстановаОборудованияПриИзменении(Элемент)
	
	ДоступностьПолейПростоя = ТехКарта.ВыполнениеРемонтаТребуетОстановаОборудования;
	
	УстановитьДоступностьПолейПростоя(ДоступностьПолейПростоя);
	
	Если ДоступностьПолейПростоя И ТехКарта.ВремяПростоя = 0 Тогда
		ТехКарта.ВремяПростоя           = ТехКарта.НормаВремени;
		Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.ВремяПростоя);
		ТехКарта.ВремяПростояТекст      = Элементы.ВремяПростоя.Заголовок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьПолейПростоя(ДоступностьПолейПростоя)
	
	Элементы.ВвестиВремяПростоя.Доступность = ДоступностьПолейПростоя И ПравоРедактирование;
	
	Элементы.ТехКартаВидПростоя.Доступность = ДоступностьПолейПростоя И ПравоРедактирование;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмеренияНаСервере(Упаковка)
	
	Возврат Упаковка.Владелец.ЕдиницаИзмерения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	
	Возврат Упаковка.Коэффициент;
	
КонецФункции

&НаСервере
Процедура ИзменитьЗависимыеТехКарты()
	
	СписокИзмененныхСвязанныхТехКарт.Очистить();
	ТехкартаДляПолученияЗависимых = Неопределено;
	
	Если СоздаватьНовыйОбъект Тогда
		
		СоздаватьНовыйОбъект = Ложь;
		
		Таб = РегистрыСведений.торо_ВерсииТехКарт.ПолучитьПоследнее(Новый Граница(ТехКарта.ДатаПринятия,ВидГраницы.Исключая),Новый Структура("ИдентификаторТехКарты", Объект.Ссылка));
		Если Таб.Количество() > 0 Тогда
			ТехкартаДляПолученияЗависимых = Таб.ТехКарта;
		КонецЕсли; 
	Иначе
		ТехкартаДляПолученияЗависимых = ТехКарта.Ссылка;
	КонецЕсли; 	
	
	Если Не ТехКарта = Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_СоставИерархическихТехКартРемонтов.ТехКарта КАК ТехКартаВУ
		|ПОМЕСТИТЬ ВсеТехКартыДляИзменения
		|ИЗ
		|	РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
		|ГДЕ
		|	торо_СоставИерархическихТехКартРемонтов.Состав = &ТехКарта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеТехКартыДляИзменения.ТехКартаВУ КАК ТехКарта,
		|	СУММА(ВЫБОР
		|			КОГДА торо_СоставИерархическихТехКартРемонтов.Состав ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Приоритет,
		|	ВЫБОР
		|		КОГДА ВсеТехКартыДляИзменения.ТехКартаВУ.ДатаПринятия >= &Период
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИзменятьСуществующуюВерсию,
		|	ВсеТехКартыДляИзменения.ТехКартаВУ.ДатаПринятия КАК ДатаПринятия
		|ПОМЕСТИТЬ ТехкартыДляИзменения
		|ИЗ
		|	ВсеТехКартыДляИзменения КАК ВсеТехКартыДляИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
		|		ПО ВсеТехКартыДляИзменения.ТехКартаВУ = торо_СоставИерархическихТехКартРемонтов.Состав
		|			И (торо_СоставИерархическихТехКартРемонтов.ТехКарта В
		|				(ВЫБРАТЬ
		|					ТехКарты.ТехКартаВУ
		|				ИЗ
		|					ВсеТехКартыДляИзменения КАК ТехКарты))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеТехКартыДляИзменения.ТехКартаВУ,
		|	ВЫБОР
		|		КОГДА ВсеТехКартыДляИзменения.ТехКартаВУ.ДатаПринятия >= &Период
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ВерсииТехКарт.ИдентификаторТехКарты,
		|	торо_ВерсииТехКарт.ТехКарта
		|ПОМЕСТИТЬ Идентификаторы
		|ИЗ
		|	РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
		|ГДЕ
		|	торо_ВерсииТехКарт.ТехКарта В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ТехкартыДляИзменения.ТехКарта
		|			ИЗ
		|				ТехкартыДляИзменения КАК ТехкартыДляИзменения)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТехкартыДляИзменения.ТехКарта,
		|	ТехкартыДляИзменения.Приоритет,
		|	ТехкартыДляИзменения.ИзменятьСуществующуюВерсию,
		|	Идентификаторы.ИдентификаторТехКарты,
		|	ТехкартыДляИзменения.ДатаПринятия
		|ИЗ
		|	ТехкартыДляИзменения КАК ТехкартыДляИзменения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Идентификаторы КАК Идентификаторы
		|		ПО ТехкартыДляИзменения.ТехКарта = Идентификаторы.ТехКарта";
		
		Запрос.УстановитьПараметр("ТехКарта", ТехкартаДляПолученияЗависимых);
		Запрос.УстановитьПараметр("Период"  , ТехКарта.ДатаПринятия);
		
	КонецЕсли; 
	
	РезультатЗапроса = Запрос.Выполнить();
	
		
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ТекстИзмененныхТехКарт = "";
		ТекстСозданныхТехКарт  = "";
		ИмеютсяСозданные       = Ложь;
		ИмеютсяИзмененные      = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			Если Не Выборка.ИзменятьСуществующуюВерсию Тогда
				
				ТехКартаДляПолученияДанных = ПолучитьТехКартуПоИдентификатору(Выборка.ИдентификаторТехКарты, Выборка.ДатаПринятия).ПолучитьОбъект(); 
				
				ТехКартаОбъект = ТехКартаДляПолученияДанных.Скопировать();
				ТехКартаОбъект.ДатаПринятия = ТехКарта.ДатаПринятия;			
				
			Иначе
				
				ТехКартаОбъект = Выборка.ТехКарта.ПолучитьОбъект();
				
			КонецЕсли; 
			
			тзМатериальныеЗатраты  = Новый ТаблицаЗначений();
			тзТрудовыеЗатраты      = Новый ТаблицаЗначений();
			тзИзмеряемыеПоказатели = Новый ТаблицаЗначений();
			тзИнструментыИТехника  = Новый ТаблицаЗначений();
			тзМерыБезопасности     = Новый ТаблицаЗначений();
			
			тзМатериальныеЗатраты.Колонки.Добавить("Номенклатура");
			тзМатериальныеЗатраты.Колонки.Добавить("ЕдиницаИзмерения");
			тзМатериальныеЗатраты.Колонки.Добавить("Количество");
			тзМатериальныеЗатраты.Колонки.Добавить("Качество");
			тзМатериальныеЗатраты.Колонки.Добавить("Упаковка");
			тзМатериальныеЗатраты.Колонки.Добавить("КоличествоУпаковок");
			тзМатериальныеЗатраты.Колонки.Добавить("КоличествоУпаковокНаЕдиницу");
			тзМатериальныеЗатраты.Колонки.Добавить("КоличествоНаЕдиницу");
			тзМатериальныеЗатраты.Колонки.Добавить("ID");
			тзМатериальныеЗатраты.Колонки.Добавить("Операция");
			
			тзТрудовыеЗатраты.Колонки.Добавить("Квалификация");
			тзТрудовыеЗатраты.Колонки.Добавить("Количество");
			тзТрудовыеЗатраты.Колонки.Добавить("ВремяРаботы");
			тзТрудовыеЗатраты.Колонки.Добавить("ID");
			тзТрудовыеЗатраты.Колонки.Добавить("Операция");
			
			тзИнструментыИТехника.Колонки.Добавить("Инструмент");
			тзИнструментыИТехника.Колонки.Добавить("ЕдиницаИзмерения");
			тзИнструментыИТехника.Колонки.Добавить("Количество");
			тзИнструментыИТехника.Колонки.Добавить("ВремяРаботы");
			тзИнструментыИТехника.Колонки.Добавить("Расценка");
			тзИнструментыИТехника.Колонки.Добавить("Валюта");
			тзИнструментыИТехника.Колонки.Добавить("Упаковка");
			тзИнструментыИТехника.Колонки.Добавить("КоличествоУпаковок");
			тзИнструментыИТехника.Колонки.Добавить("ID");
			тзИнструментыИТехника.Колонки.Добавить("Операция");
			
			тзИзмеряемыеПоказатели.Колонки.Добавить("Показатель");
			тзИзмеряемыеПоказатели.Колонки.Добавить("ID");
			тзИзмеряемыеПоказатели.Колонки.Добавить("Операция");
			
			тзМерыБезопасности.Колонки.Добавить("МерыБезопасности");
			тзМерыБезопасности.Колонки.Добавить("ID");
			тзМерыБезопасности.Колонки.Добавить("Операция");
			
			
			
			
			ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКартаОбъект.Ссылка,
			тзМатериальныеЗатраты,
			тзТрудовыеЗатраты,
			тзИзмеряемыеПоказатели,
			тзИнструментыИТехника,
			тзМерыБезопасности);
			
			
			мСтруктураТабличныхЧастейНормативов = Новый Структура();
			мСтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты" , тзМатериальныеЗатраты);	
			мСтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты"     , тзТрудовыеЗатраты);
			мСтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника" , тзИнструментыИТехника);
			мСтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели", тзИзмеряемыеПоказатели);
			мСтруктураТабличныхЧастейНормативов.Вставить("МерыБезопасности"    , тзМерыБезопасности);
			
			Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейНормативов Цикл // Для каждой табличной части
				
				Для каждого Строка Из ТехКартаОбъект.СписокОпераций Цикл          // по каждой операции Из техкарты
					
					Если ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
						
						МассивСтрокКУдалению = ТехКартаОбъект[КлючИЗначение.Ключ].НайтиСтроки(Новый Структура("ID",Строка.ID));
						
						Для каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
							ТехКартаОбъект[КлючИЗначение.Ключ].Удалить(СтрокаКУдалению);
						КонецЦикла;
						
						МассивСтрокКДобавлению = КлючИЗначение.Значение.НайтиСтроки(Новый Структура("ID",Строка.ID));
						Для каждого СтрокаКДобавлению Из МассивСтрокКДобавлению Цикл
							НС = ТехКартаОбъект[КлючИЗначение.Ключ].Добавить();
							ЗаполнитьЗначенияСвойств(НС,СтрокаКДобавлению);
						КонецЦикла; 
						
					КонецЕсли; 
				КонецЦикла; 										
			КонецЦикла;
			СлужебныеРеквизитыЗаполнитьНаСервере();
			
			Для каждого Строка Из ТехКартаОбъект.СписокОпераций Цикл
				Если Строка.Операция = Объект.Ссылка Тогда
					Строка.НормаВремениВСекундах = ТехКарта.НормаВремени;
				КонецЕсли;
			КонецЦикла;
			
			Если ТехКартаОбъект.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоНормамВремениТехОпераций") Тогда
				
				ТехКартаОбъект.РассчитатьПродолжительностьПоОперациям(Истина);
				
			ИначеЕсли ТехКартаОбъект.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоНормамТрудозатрат") Тогда
				
				ТехКартаОбъект.РассчитатьПродолжительностьПоТрудозатратам();
				
			ИначеЕсли ТехКартаОбъект.СпособРасчетаПродолжительности = ПредопределенноеЗначение("Перечисление.торо_СпособыРасчетаПродолжительности.ПоПродолжительностиОперацийРемонтов") Тогда
				
				ТехКартаОбъект.РассчитатьПродолжительностьПоОперациям();
				
			КонецЕсли;
			
			Попытка
				ТехКартаОбъект.Записать();
				
				СписокИзмененныхСвязанныхТехКарт.Добавить(ТехКартаОбъект.Ссылка);
				
				Если Не Выборка.ИзменятьСуществующуюВерсию Тогда // создаем запись о новой версии
					
					МенеджерЗаписи = РегистрыСведений.торо_ВерсииТехКарт.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ИдентификаторТехКарты = Выборка.ИдентификаторТехКарты;
					МенеджерЗаписи.Период                = ТехКартаОбъект.ДатаПринятия;
					МенеджерЗаписи.ТехКарта              = ТехКартаОбъект.Ссылка;
					МенеджерЗаписи.Записать();
					

					ТекстСозданныхТехКарт = ТекстСозданныхТехКарт + Символы.ПС +
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '    <%1> (действует с %2)'"),
						Выборка.ИдентификаторТехКарты,Формат(ТехКартаОбъект.ДатаПринятия, "ДФ=dd.MM.yyyy"));
	
					ИмеютсяСозданные = Истина;
				Иначе
					
					ТекстИзмененныхТехКарт = ТекстИзмененныхТехКарт + Символы.ПС +
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '    <%1> (действует с %2)'"),
						Выборка.ИдентификаторТехКарты, Формат(ТехКартаОбъект.ДатаПринятия, "ДФ=dd.MM.yyyy"));
					
					ИмеютсяИзмененные = Истина;
					
				КонецЕсли; 
			Исключение
			КонецПопытки; 

		КонецЦикла;
		
		ТекстСообщения = "";
		
		Если ИмеютсяИзмененные Тогда
			ТекстСообщения = 
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Изменены связанные тех. карты: %1'"), ТекстИзмененныхТехКарт);
		КонецЕсли;  
		
		Если ИмеютсяСозданные Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Созданы новые версии тех. карт: %1'"),ТекстСозданныхТехКарт);
		КонецЕсли; 
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить(); 
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура СоздатьНедостающиеВерсииТехКарты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВерсииТехКарт.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	               |ГДЕ
	               |	торо_ВерсииТехКарт.Период > &Период
	               |	И торо_ВерсииТехКарт.ИдентификаторТехКарты В(&СписокИдентификаторов)
	               |	И торо_ВерсииТехКарт.Период < &ПериодОкончания
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_ВерсииТехКарт.Период
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
	
	Запрос.УстановитьПараметр("СписокИдентификаторов", ТехКарта.СписокОпераций.Выгрузить(,"Операция"));
	Запрос.УстановитьПараметр("Период", ТехКарта.ДатаПринятия);
	Запрос.УстановитьПараметр("ПериодОкончания", ДатаСледующейВерсииТехКарты());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	мСтруктураТабличныхЧастейНормативов = Новый Структура();
	мСтруктураТабличныхЧастейНормативов.Вставить("МатериальныеЗатраты" , "МатериальныеЗатраты");	
	мСтруктураТабличныхЧастейНормативов.Вставить("ТрудовыеЗатраты"     , "ТрудовыеЗатраты");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИнструментыИТехника" , "ИнструментыИТехника");
	мСтруктураТабличныхЧастейНормативов.Вставить("ИзмеряемыеПоказатели", "ИзмеряемыеПоказатели");
	мСтруктураТабличныхЧастейНормативов.Вставить("МерыБезопасности"    , "МерыБезопасности");
	мСтруктураТабличныхЧастейНормативов.Вставить("ОказываемыеУслуги"   , "ОказываемыеУслуги");
	мСтруктураТабличныхЧастейНормативов.Вставить("СписокОпераций"      , "СписокОпераций");


	Пока Выборка.Следующий() Цикл
					
			Версия = Справочники.торо_ТехКарты.СоздатьЭлемент(); 			
			
			ЗаполнитьЗначенияСвойств(Версия, ТехКарта);
			Версия.ДатаПринятия = Выборка.Период;
			Версия.Код = "";
			
			Для Каждого КлючИЗначение Из мСтруктураТабличныхЧастейНормативов Цикл
				Версия[КлючИЗначение.Ключ].Загрузить(ТехКарта[КлючИЗначение.Ключ].Выгрузить());
			КонецЦикла;
			
			Версия.Записать();
			
			НЗ = РегистрыСведений.торо_ВерсииТехКарт.СоздатьМенеджерЗаписи();
			НЗ.ТехКарта = Версия.Ссылка;
			НЗ.ИдентификаторТехКарты = Объект.Ссылка;
			НЗ.Период = Выборка.Период;
			
			НЗ.Записать(Истина);			
		
	КонецЦикла;	
		
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьСвязанныеТехКартыОбИзменении()
	
	Для каждого СвязанннаяТехКарта из СписокИзмененныхСвязанныхТехКарт Цикл
		Оповестить("ИзменениеТехКарты", СвязанннаяТехКарта.Значение, Объект.Ссылка);
	КонецЦикла;
	
	СписокИзмененныхСвязанныхТехКарт.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОповещениеОбИзмененииТехКарты()
	
	ОбработатьОповещениеОбИзмененииТехКартыНаСервере();
		
	Элементы.НормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.НормаВремени);
	Элементы.ВремяПростоя.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ТехКарта.ВремяПростоя);
	
	Элементы.КартинкаСодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	Элементы.СодержитОпасныеОперации.Видимость = ТехКарта.СодержитОпасныеОперации;
	
	Элементы.КартинкаСодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	Элементы.СодержитРаботыПовышеннойОпасности.Видимость = ТехКарта.СодержитРаботыПовышеннойОпасности;
	
	УстановитьЗаголовокФормы();
	
	СписокОперацийПриАктивизацииСтроки(Элементы.СписокОпераций);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьОповещениеОбИзмененииТехКартыНаСервере()
	
	ТехКартаОбъект = ТехКарта.Ссылка.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ТехКартаОбъект, "ТехКарта");
	ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКарта.Ссылка);
	
	УстановитьПризнакиОпаснойИПовышеннойОпасностиРаботВТЧ();
		
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
		Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);
	КонецЦикла; 
	
	ЕстьОпасныеОперацииИсх = ТехКарта.СодержитОпасныеОперации;
	ЕстьРаботыПовышеннойОпасностиИсх = ТехКарта.СодержитРаботыПовышеннойОпасности;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры


&НаСервере
Функция ДатаСледующейВерсииТехКарты()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЕСТЬNULL(МИНИМУМ(торо_ВерсииТехКарт.Период), ДАТАВРЕМЯ(3999, 12, 31)) КАК Период
	               |ИЗ
	               |	РегистрСведений.торо_ВерсииТехКарт КАК торо_ВерсииТехКарт
	               |ГДЕ
	               |	торо_ВерсииТехКарт.Период > &Период
	               |	И торо_ВерсииТехКарт.ИдентификаторТехКарты = &ИдентификаторТехКарты";
	Запрос.УстановитьПараметр("ИдентификаторТехКарты", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", ТехКарта.ДатаПринятия);

	Выборка = Запрос.Выполнить().Выгрузить();
	
	Если Выборка.Количество() Тогда
		Возврат Выборка[0].Период;
	Иначе
		Возврат Дата(3999,12,31);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыбораНеобходимостиСохраненияИзменений(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Записать();
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли; 	
	
	Если Не ДопПараметры = Неопределено
		И ДопПараметры.Свойство("Назначение")
		И ДопПараметры.Назначение = "Создание_новой_версии" Тогда
		СоздатьНовуюВерсиюТехкарты(Истина);
		УстановитьЗаголовокФормы();
		
		ТехКартаВыполнениеРемонтаТребуетОстановаОборудованияПриИзменении(Истина);
		
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВыбораТехкартыДляРедактирования",ЭтаФорма, Новый Структура("ТекущаяКарта", ТехКарта));
		ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.Форма.ФормаИсторииТехкарты",Новый Структура("Идентификатор",Объект.Ссылка),ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТехкартыДляРедактирования(Результат, ДопПараметры) Экспорт
	Если Не Результат = Неопределено Тогда
		Если Не Результат = ПредопределенноеЗначение("Справочник.торо_ТехКарты.ПустаяСсылка") Тогда
			
			ЗаполнитьТехКартуНаСервере(Результат);
			ЗаполнитьТаблицыЗначенийПоТабЧастям(Результат);
			
			СписокОперацийПриАктивизацииСтроки(Истина);
			
			Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Объект.Родитель = Параметры.Родитель;
			КонецЕсли;
			
			УстановитьПризнакиОпаснойИПовышеннойОпасностиРаботВТЧ();
			 
			ЭтаФорма.Модифицированность = Ложь;
			СоздаватьНовыйОбъект        = Ложь;
			УстановитьЗаголовокФормы();
			
			ТехКартаВыполнениеРемонтаТребуетОстановаОборудованияПриИзменении(Истина);
			
			Для каждого Стр Из ТехКарта.СписокОпераций Цикл
				
				Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
				Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);

			КонецЦикла; 
			
		Иначе
			
			СоздатьНовуюВерсиюТехкарты(Истина);
			УстановитьЗаголовокФормы();
			
		КонецЕсли;
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТехКартуНаСервере(СсылкаНаТехКарту)
ТехКартаОбъект = СсылкаНаТехКарту.ПолучитьОбъект();
СтараяДатаПринятия = ТехКартаОбъект.ДатаПринятия;
ЗначениеВРеквизитФормы(ТехКартаОбъект,"ТехКарта");
 
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТипаДанныхОперации(Результат, ДопПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт") Тогда
			
			ФормаВыбора = ПолучитьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора",Новый Структура("ДатаПринятия", ТехКарта.ДатаПринятия) , Элементы.СписокОпераций);
			ФормаВыбора.Открыть();
			
		ИначеЕсли Результат.Значение = Тип("СправочникСсылка.торо_ТехнологическиеОперации")  Тогда 
			
			ОткрытьФорму("Справочник.торо_ТехнологическиеОперации.ФормаВыбора", , Элементы.СписокОпераций);	
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаНаВопросПриИзмененииДаты(Результат, ДопПараметры) Экспорт
	
	МассивИдентификаторов = Новый Массив;
	
	Если Не ДопПараметры = Неопределено
		И ДопПараметры.Свойство("МассивИдентификаторов") Тогда
		МассивИдентификаторов = ДопПараметры.МассивИдентификаторов;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ВозможностьИзменитьДату = ПроверитьДатуНаСервере(ТехКарта.ДатаПринятия, Объект.Ссылка, ТехКарта.Ссылка, МассивИдентификаторов);
		
		Если ТипЗнч(ВозможностьИзменитьДату) = Тип("Массив") Тогда
			
			Для каждого Элемент Из ВозможностьИзменитьДату Цикл
				МассивСтрокКУдалению = ТехКарта.СписокОпераций.НайтиСтроки(Новый Структура("Операция",Элемент));
				Для каждого Строка Из МассивСтрокКУдалению Цикл
					ТехКарта.СписокОпераций.Удалить(Строка);
				КонецЦикла; 
			КонецЦикла; 
			ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКарта.Ссылка);
		Иначе
			
			Если Не ВозможностьИзменитьДату Тогда
				ТехКарта.ДатаПринятия = СтараяДатаПринятия;
			Иначе
				ЗаполнитьТаблицыЗначенийПоТабЧастям(ТехКарта.Ссылка);
			КонецЕсли;
			
		КонецЕсли;
		
		СписокОперацийПриАктивизацииСтроки(Истина);
		ДатаПринятияИзменена = Истина;
		
	Иначе
		ТехКарта.ДатаПринятия = СтараяДатаПринятия;
		ДатаПринятияИзменена = Ложь;
	КонецЕсли;
	
	Для каждого Стр Из ТехКарта.СписокОпераций Цикл
		
		Стр.ПродолжительностьТекст = СформироватьПродолжительность(Стр.НормаВремениВСекундах);
		Стр.Картинка               = ?(ТипЗнч(Стр.Операция) = Тип("СправочникСсылка.торо_ТехнологическиеОперации"),2,0);

	КонецЦикла; 

	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьОВозможномИзмененииПродолжительностиРемонта(флСписокОперацийМодифицированность, флТрудозатратыМодифицированность)
	
	Если флСписокОперацийМодифицированность Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Изменен состав операций технологической карты, перерассчитайте продолжительность ремонта!'"));
	КонецЕсли;
	
	Если флТрудозатратыМодифицированность Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Изменены трудозатраты операций технологической карты, перерассчитайте продолжительность ремонта!'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, СтруктураСтроки, ИмяТЧ, ИмяРеквизита)
	
	ID = СтруктураСтроки.ID;
	Операция = СтруктураСтроки.Операция;
	Кол = ?(СтруктураСтроки.Количество = 0, 1, СтруктураСтроки.Количество);
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		Если ИмяТЧ = "МатериальныеЗатраты" Тогда
			СтруктураПоиска = Новый Структура("ID, Номенклатура, Характеристика", ID, текСтрока.Номенклатура, текСтрока.Характеристика);
		ИначеЕсли ИмяТЧ = "ИнструментыИТехника" Тогда 
			СтруктураПоиска = Новый Структура("ID, Инструмент", ID, текСтрока.Номенклатура);
		ИначеЕсли ИмяТЧ = "ОказываемыеУслуги" Тогда 
			СтруктураПоиска = Новый Структура("ID, Номенклатура", ID, текСтрока.Номенклатура);	
		КонецЕсли;
			
		НайС = ЭтотОбъект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = ЭтотОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			Если ИмяТЧ <> "ОказываемыеУслуги" Тогда				
				нс.Количество = текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
			КонецЕсли;
			
			Если ИмяТЧ = "МатериальныеЗатраты" Тогда
				нс.КоличествоНаЕдиницу = нс.Количество / Кол;
				нс.КоличествоУпаковокНаЕдиницу = нс.КоличествоУпаковок / Кол;
			КонецЕсли;
		
			нс.ID = ID;
			нс.Операция = Операция;
			
			нсТехКарты = ТехКарта[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нсТехКарты, нс);
			
		Иначе
			Если ИмяТЧ <> "ОказываемыеУслуги" Тогда	
				
				нс = НайС[0];
				Если НЕ ЗначениеЗаполнено(нс.Упаковка)Тогда
					нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
				ИначеЕсли нс.Упаковка <> текСтрока.Упаковка Тогда
					нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр / ?(ЗначениеЗаполнено(нс.Упаковка), нс.Упаковка.Коэффициент, 1);
				Иначе
					нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок;
				КонецЕсли;
				
				нс.Количество = нс.Количество + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
				
				Если ИмяТЧ = "МатериальныеЗатраты" Тогда
					нс.КоличествоНаЕдиницу = нс.Количество / Кол;
					нс.КоличествоУпаковокНаЕдиницу = нс.КоличествоУпаковок / Кол;
				КонецЕсли;
				
				нсТехКарты = ТехКарта[ИмяТЧ].НайтиСтроки(СтруктураПоиска)[0];
				ЗаполнитьЗначенияСвойств(нсТехКарты, нс);
				
			КонецЕсли;	
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиМерБезопасности(Форма)
	
	Для каждого Строка из Форма.МерыБезопасности Цикл
		Строка.ЭтоТехКарта = ТипЗнч(Строка.Операция) = Тип("СправочникСсылка.торо_ИдентификаторыТехКарт");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#Если Клиент Тогда
	НоваяСтрока = Ложь;
#КонецЕсли

#КонецОбласти


