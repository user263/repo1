
#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "ОбщаяФорма.торо_ФормаПодбораПродолжительности" Тогда
		Элементы.ГиперссылкаНормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(ВыбранноеЗначение);
		Объект.НормаВремени = ВыбранноеЗначение;
		Модифицированность = Истина;
	ИначеЕсли ИсточникВыбора.Имяформы = "Обработка.торо_ПодборНоменклатуры.Форма.Форма" Тогда
		
		Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
			ИмяТЧ = "МатериальныеЗатраты";
			ИмяРеквизита = "Номенклатура";
		Иначе
			ИмяТЧ = "ИнструментыИТехника";
			ИмяРеквизита = "Инструмент";
		КонецЕсли;
		
		ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение, ИмяТЧ, ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Валюта) Тогда
			
			Объект.Валюта = Константы.ВалютаУправленческогоУчета.Получить();
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Коэффициент) Тогда
			
			Объект.Коэффициент = 1;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ВалютыУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Для каждого Стр Из Объект.ТрудовыеЗатраты Цикл
		
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
		
	КонецЦикла;
	
	Для каждого Стр Из Объект.ИнструментыИТехника Цикл
		
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
		
	КонецЦикла;
	
	УстановитьУсловноеОформление();
	
	ОпаснаяИсх = Объект.Опасная;
	РаботаПовышеннойОпасностиИсх = Объект.РаботаПовышеннойОпасности;
	
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Элементы.ГиперссылкаНормаВремени.Заголовок = торо_ОбщегоНазначенияКлиентСервер.СформироватьЗаголовокПоПродолжительности(Объект.НормаВремени);	
	ОбновитьНадписьВалюта();
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		Элементы.РасценкаВВалютеУчета.Заголовок = СформироватьРасценкаВВалютеУчёта(Объект.Расценка, Объект.Валюта, ВалютыУчета);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	Для каждого Стр Из Объект.ТрудовыеЗатраты Цикл
		
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
		
	КонецЦикла;
	
	Для каждого Стр Из Объект.ИнструментыИТехника Цикл
		
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
		
	КонецЦикла;
	
	СлужебныеРеквизитыЗаполнитьНаСервере();
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Для каждого Стр Из Объект.ТрудовыеЗатраты Цикл
		
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
		
	КонецЦикла;
	
	Для каждого Стр Из Объект.ИнструментыИТехника Цикл
		
		Стр.ВремяРаботыТекст = СформироватьПродолжительность(Стр.ВремяРаботы);
		
	КонецЦикла;
	
	ФОИспользоватьОпасноеПроизводство = ПолучитьФункциональнуюОпцию("торо_ИспользоватьОпасноеПроизводство");
	ФОИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно");
	
	Если (ФОИспользоватьОпасноеПроизводство И ТекущийОбъект.Опасная <> ОпаснаяИсх) 
		ИЛИ (ФОИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно И ТекущийОбъект.РаботаПовышеннойОпасности <> РаботаПовышеннойОпасностиИсх) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ТехКартыСписокОпераций.Ссылка КАК ТехКарта
		|ПОМЕСТИТЬ ТехКарты
		|ИЗ
		|	Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКартыСписокОпераций
		|ГДЕ
		|	торо_ТехКартыСписокОпераций.Операция = &Операция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_СоставИерархическихТехКартРемонтов.ТехКарта КАК ТехКартаВУ
		|ПОМЕСТИТЬ ВсеТехКартыДляИзменения
		|ИЗ
		|	ТехКарты КАК ТехКарты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
		|		ПО ТехКарты.ТехКарта = торо_СоставИерархическихТехКартРемонтов.Состав
		|ГДЕ
		|	НЕ торо_СоставИерархическихТехКартРемонтов.ТехКарта В
		|				(ВЫБРАТЬ
		|					ТехКарты.ТехКарта
		|				ИЗ
		|					ТехКарты КАК ТехКарты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТехКарты.ТехКарта
		|ИЗ
		|	ТехКарты КАК ТехКарты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеТехКартыДляИзменения.ТехКартаВУ КАК ТехКарта,
		|	СУММА(ВЫБОР
		|			КОГДА торо_СоставИерархическихТехКартРемонтов.Состав ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК Приоритет
		|ИЗ
		|	ВсеТехКартыДляИзменения КАК ВсеТехКартыДляИзменения
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СоставИерархическихТехКартРемонтов КАК торо_СоставИерархическихТехКартРемонтов
		|		ПО ВсеТехКартыДляИзменения.ТехКартаВУ = торо_СоставИерархическихТехКартРемонтов.Состав
		|			И (торо_СоставИерархическихТехКартРемонтов.ТехКарта В
		|				(ВЫБРАТЬ
		|					ТехКарты.ТехКартаВУ
		|				ИЗ
		|					ВсеТехКартыДляИзменения КАК ТехКарты))
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеТехКартыДляИзменения.ТехКартаВУ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет УБЫВ";
		
		Запрос.УстановитьПараметр("Операция", ТекущийОбъект.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если ФОИспользоватьОпасноеПроизводство Тогда
					Если НЕ Выборка.ТехКарта.СодержитОпасныеОперации И ТекущийОбъект.Опасная Тогда
						
						ТехКартаОбъект = Выборка.ТехКарта.ПолучитьОбъект();
						ТехКартаОбъект.СодержитОпасныеОперации = Истина;
						ТехКартаОбъект.Записать();
						
					ИначеЕсли Выборка.ТехКарта.СодержитОпасныеОперации И НЕ ТекущийОбъект.Опасная Тогда
						
						МассивОпераций = Новый Массив;
						
						Для каждого Стр Из Выборка.ТехКарта.СписокОпераций Цикл
							
							МассивОпераций.Добавить(Стр.Операция);
							
						КонецЦикла; 
						
						ЕстьОпасныеОперации = ПроверитьНаличиеОпасныхОперацийНаСервере(МассивОпераций,Выборка.ТехКарта.ДатаПринятия);
						
						Если НЕ ЕстьОпасныеОперации Тогда
							
							ТехКартаОбъект = Выборка.ТехКарта.ПолучитьОбъект();
							ТехКартаОбъект.СодержитОпасныеОперации = Ложь;
							ТехКартаОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				Если ФОИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно Тогда
					Если НЕ Выборка.ТехКарта.СодержитРаботыПовышеннойОпасности И ТекущийОбъект.РаботаПовышеннойОпасности Тогда
						
						ТехКартаОбъект = Выборка.ТехКарта.ПолучитьОбъект();
						ТехКартаОбъект.СодержитРаботыПовышеннойОпасности = Истина;
						ТехКартаОбъект.Записать();
						
					ИначеЕсли Выборка.ТехКарта.СодержитРаботыПовышеннойОпасности И НЕ ТекущийОбъект.РаботаПовышеннойОпасности Тогда
						
						МассивОпераций = Новый Массив;
						
						Для каждого Стр Из Выборка.ТехКарта.СписокОпераций Цикл
							
							МассивОпераций.Добавить(Стр.Операция);
							
						КонецЦикла; 
						
						ЕстьРаботыПовышеннойОпасности = ПроверитьНаличиеРаботПовышеннойОпасностиНаСервере(МассивОпераций, Выборка.ТехКарта.ДатаПринятия);
						
						Если НЕ ЕстьРаботыПовышеннойОпасности Тогда
							
							ТехКартаОбъект = Выборка.ТехКарта.ПолучитьОбъект();
							ТехКартаОбъект.СодержитРаботыПовышеннойОпасности = Ложь;
							ТехКартаОбъект.Записать();
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ОпаснаяИсх = ТекущийОбъект.Опасная;
	РаботаПовышеннойОпасностиИсх = ТекущийОбъект.РаботаПовышеннойОпасности;
	СлужебныеРеквизитыЗаполнитьНаСервере();
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РасценкаПриИзменении(Элемент)
	
	Элементы.РасценкаВВалютеУчета.Заголовок = СформироватьРасценкаВВалютеУчёта(Объект.Расценка, Объект.Валюта, ВалютыУчета);	
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаНадписьНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВалютаНажатиеЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.Валюты.ФормаВыбора",,ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте 
Процедура ГиперссылкаНормаВремениНажатие(Элемент)
	торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(Объект.НормаВремени, ЭтаФорма, Объект.Ссылка);	
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИнструментыИТехника

&НаКлиенте
Процедура ИнструментыИТехникаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекДанные.Инструмент) Тогда
				Отказ = Истина;
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Инструмент"" не может быть пустым!'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаУпаковкаПриИзменении(Элемент)
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ТекДанные.ЕдиницаИзмерения = ПолучитьЕдиницуИзмеренияНаСервере(ТекДанные.Упаковка);
		ТекДанные.Количество = ТекДанные.КоличествоУпаковок * ПолучитьКоэффициентУпаковкиНаСервере(ТекДанные.Упаковка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаКоличествоУпаковокПриИзменении(Элемент)
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличествИлиУпаковки(ТекДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнтрументыИТехникаКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.ИнструментыИТехника.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличествИлиУпаковки(ТекДанные, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ИнструментыИТехникаВремяРаботыТекст" Тогда
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(Элементы.ИнструментыИТехника.ТекущиеДанные.ВремяРаботы,Элемент, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструментыИТехникаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТекДанные.ВремяРаботы = ВыбранноеЗначение;
		ТекДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтрументыИТехникаУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.ИнструментыИТехника.ТекущиеДанные.Инструмент, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТрудовыеЗатраты

&НаКлиенте
Процедура ТрудовыеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ТекДанные = Элементы.ТрудовыеЗатраты.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекДанные.Квалификация) Тогда
				Отказ = Истина;
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Квалицикация"" не может быть пустым!'"));
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТрудовыеЗатратыВремяРаботыТекст" Тогда
		торо_ЗаполнениеДокументовКлиент.ОткрытьФормуПодбораПродолжительности(Элементы.ТрудовыеЗатраты.ТекущиеДанные.ВремяРаботы,Элемент, Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ТекДанные.ВремяРаботы = ВыбранноеЗначение;
		ТекДанные.ВремяРаботыТекст = СформироватьПродолжительность(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ФормаПодбораПродолжительности = ПолучитьФорму("ОбщаяФорма.торо_ФормаПодбораПродолжительности", ,Элемент,,ВариантОткрытияОкна.ОтдельноеОкно); 
	
	ФормаПодбораПродолжительности.ПродолжительностьВСекундах = Элемент.Родитель.ТекущиеДанные.ВремяРаботы;
	ФормаПодбораПродолжительности.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудовыеЗатратыВремяРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Элемент = ВыбранноеЗначение;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериальныеЗатраты

&НаКлиенте
Процедура МатериальныеЗатратыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
				Отказ = Истина;
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поле ""Номенклатура"" не может быть пустым!'"));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыУпаковкаПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличествИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыУпаковкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЗаполнитьДанныеВыбораУпаковки(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоУпаковокПриИзменении(Элемент)
	
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличествИлиУпаковки(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		ПриСменеЗначенийКоличествИлиУпаковки(ТекДанные, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.МатериальныеЗатраты.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ПодборНоменклатуры(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",         Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                  Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                    Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",           Истина);
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ГруппаМатериальныеЗатраты Тогда
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор номенклатуры'"));
	Иначе
		ПараметрыФормы.Вставить("Заголовок",                                 НСтр("ru = 'Подбор инструментов и техники'"));
	КонецЕсли;
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену", НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                      ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                  Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				 "ПростойПодборНоменклатуры");
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();
	Если РольДоступна("ЧтениеНоменклатуры") Или РольДоступна("ПолныеПрава") Тогда
		// Чтобы не отображалась единица измерения в Материальных затратах, когда заполнена Упаковка.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ИнтрументыИТехникаЕдиницаИзмерения.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ИнструментыИТехника.Упаковка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыНоменклатураЕдиницаИзмерения.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.Упаковка");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		
		// Условное оформление для использования/неиспользования характеристик.
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.МатериальныеЗатратыХарактеристика.Имя);
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.МатериальныеЗатраты.ХарактеристикиИспользуются");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.НейтральноСерый);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<характеристики не используются>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Доступность",Ложь);
		//
		
	КонецЕсли;

КонецПроцедуры // УстановитьУсловноеОформление()


&НаСервере
Процедура СлужебныеРеквизитыЗаполнитьНаСервере()
	
	НоменклатураСервер.ЗаполнитьСлужебныеРеквизитыПоНоменклатуреВКоллекции(
	Объект.МатериальныеЗатраты,
	Новый Структура("ЗаполнитьПризнакХарактеристикиИспользуются",
	Новый Структура("Номенклатура", "ХарактеристикиИспользуются")));
	
КонецПроцедуры

&НаСервере
Функция ПолучитьХарактеристикиИспользуются(Номенклатура)
	
	Возврат НЕ Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать = Номенклатура.ИспользованиеХарактеристик;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьДанныеВыбораУпаковки(Номенклатура, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораУпаковки = Новый Структура("Номенклатура", Номенклатура);
	СтандартнаяОбработка = Ложь;
	ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбораУпаковки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДанныеВыбораУпаковкиСервер(ДанныеВыбора, ПараметрыВыбора)

	ДанныеВыбора = Справочники.УпаковкиНоменклатуры.ПолучитьДанныеВыбора(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьВалюта()
	
	Если ЗначениеЗаполнено(Объект.Валюта) Тогда
		Элементы.ВалютаНадпись.Заголовок = Объект.Валюта;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаНажатиеЗавершение(ЗначениеВалюты, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеВалюты = Неопределено Тогда
		Объект.Валюта = ЗначениеВалюты;
		Модифицированность = Истина;
		Элементы.РасценкаВВалютеУчета.Заголовок = СформироватьРасценкаВВалютеУчёта(Объект.Расценка, Объект.Валюта, ВалютыУчета);
	КонецЕсли;
	ОбновитьНадписьВалюта();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьПродолжительность(ПродолжительностьВСекундах)
	
	Если ПродолжительностьВСекундах = 0 Тогда
		
		Возврат "Ввести продолжительность";
		
	Иначе
		
		Часы    = Цел(ПродолжительностьВСекундах / 3600);
		Минуты  = Цел((ПродолжительностьВСекундах - 3600 * Часы) / 60);
		Секунды = ПродолжительностьВСекундах - 3600 * Часы - Минуты * 60;
		
		Возврат "" + Часы + " ч. " + Минуты + " м. " + Секунды + " с.";
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьРасценкаВВалютеУчёта(Знач Расценка, Знач Валюта, ВалютыУчета)
	
	Если Расценка = 0 Тогда
		
		Возврат "0,00";
		
	Иначе
		ВылютыРасценки = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта,ТекущаяДата());
		ВалютаУчета = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютыУчета,ТекущаяДата());
		
		Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Расценка,Валюта,ВалютыУчета,ВылютыРасценки.Курс,ВалютаУчета.Курс,ВылютыРасценки.Кратность,ВалютаУчета.Кратность);		
		
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмеренияНаСервере(Упаковка)
	
	Возврат Упаковка.Владелец.ЕдиницаИзмерения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоэффициентУпаковкиНаСервере(Упаковка)
	
	Возврат Упаковка.Коэффициент;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеРаботПовышеннойОпасностиНаСервере(Операции, ДатаПринятия)
	
	флЕстьРаботаПовышеннойОпасности = Ложь;
	Для каждого СтрокаМассива Из Операции Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Если СтрокаМассива.РаботаПовышеннойОпасности Тогда
				флЕстьРаботаПовышеннойОпасности = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ДатаПринятия, Новый Структура("ИдентификаторТехКарты", СтрокаМассива));
			
			Если Таб.Количество() > 0 Тогда
				Если Таб[0].ТехКарта.СодержитРаботыПовышеннойОпасности Тогда
					флЕстьРаботаПовышеннойОпасности = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флЕстьРаботаПовышеннойОпасности;
	
КонецФункции

&НаСервере
Функция ПроверитьНаличиеОпасныхОперацийНаСервере(Операции, ДатаПринятия)
	
	флЕстьОпаснаяОперация = Ложь;
	Для каждого СтрокаМассива Из Операции Цикл
		Если ТипЗнч(СтрокаМассива) = Тип("СправочникСсылка.торо_ТехнологическиеОперации") Тогда
			Если СтрокаМассива.Опасная Тогда
				флЕстьОпаснаяОперация = Истина;
				Прервать;
			КонецЕсли;
		Иначе
			Таб = РегистрыСведений.торо_ВерсииТехКарт.СрезПоследних(ДатаПринятия, Новый Структура("ИдентификаторТехКарты", СтрокаМассива));
			
			Если Таб.Количество() > 0 Тогда
				Если Таб[0].ТехКарта.СодержитОпасныеОперации Тогда
					флЕстьОпаснаяОперация = Истина;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флЕстьОпаснаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПриСменеЗначенийКоличествИлиУпаковки(ТекущиеДанные, ИзменениеКоличестваЕдиниц = Ложь)
	
	КоэффициентУпаковки = ПолучитьКоэффициентУпаковкиНаСервере(ТекущиеДанные.Упаковка);	
	
	Если КоэффициентУпаковки = 0 Тогда
		КоэффициентУпаковки = 1;
	КонецЕсли; 
	
	Если ИзменениеКоличестваЕдиниц Тогда
		
		ТекущиеДанные.КоличествоУпаковок = ТекущиеДанные.Количество / КоэффициентУпаковки;
		
	Иначе	
		
		ТекущиеДанные.Количество = ТекущиеДанные.КоличествоУпаковок * КоэффициентУпаковки;
		
	КонецЕсли;
	
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес, ИмяТЧ, ИмяРеквизита)
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		Если ИмяТЧ = "МатериальныеЗатраты" Тогда
			СтруктураПоиска = Новый Структура("Номенклатура, Характеристика", текСтрока.Номенклатура, текСтрока.Характеристика);
		Иначе
			СтруктураПоиска = Новый Структура("Инструмент", текСтрока.Номенклатура);
		КонецЕсли;
			
		НайС = Объект[ИмяТЧ].НайтиСтроки(СтруктураПоиска);
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);
		Если НайС.Количество() = 0 Тогда
			нс = Объект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс[ИмяРеквизита] = текСтрока.Номенклатура;
			нс.Количество = текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
		Иначе
			
			нс = НайС[0];
			Если НЕ ЗначениеЗаполнено(нс.Упаковка)Тогда
				нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
			ИначеЕсли нс.Упаковка <> текСтрока.Упаковка Тогда
				нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр / ?(ЗначениеЗаполнено(нс.Упаковка), нс.Упаковка.Коэффициент, 1);
			Иначе
				нс.КоличествоУпаковок = нс.КоличествоУпаковок + текСтрока.КоличествоУпаковок;
			КонецЕсли;
			
			нс.Количество = нс.Количество + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура МатериальныеЗатратыХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.МатериальныеЗатраты.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.МатериальныеЗатраты.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти