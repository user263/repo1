#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Функция - Получить дерево элементов
//
// Параметры:
//  Ссылка	 - СправочникСсылка.торо_ОбъектыРемонта - Объект ремонта для которого получаем дерево,
//  Иерархия - СправочникСсылка.торо_СтруктурыОР - Структура иерархии по которой будет построено дерево. 
// Возвращаемое значение:
//  ДеревоЗначений - дерево объектов ремонта.
Функция ПолучитьДеревоЭлементов(Ссылка, Иерархия) Экспорт
	ДеревоЭлементов = новый ДеревоЗначений;
	ДеревоЭлементов.Колонки.Добавить("Ссылка");
	
	ИсходнаяСсылка = ДеревоЭлементов.Строки.Добавить();
	ИсходнаяСсылка.Ссылка = Ссылка;
	
	Если НЕ ЗначениеЗаполнено(Иерархия) Тогда
		Выборка = Справочники.торо_ОбъектыРемонта.ВыбратьИерархически(Ссылка);
		Пока Выборка.Следующий() Цикл
			СтрокаРодитель = ДеревоЭлементов.Строки.Найти(Выборка.Родитель,,Истина);
			Если СтрокаРодитель <> Неопределено тогда
				СтрокаЭлемента = СтрокаРодитель.Строки.Добавить();
				СтрокаЭлемента.Ссылка = Выборка.Ссылка;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПолучитьПодчиненныеОбъекты(Ссылка,Иерархия,ДеревоЭлементов.Строки[0]);
	КонецЕсли;
	
	Возврат ДеревоЭлементов;
	
КонецФункции

// Возвращает массив подчиненных объектов ремонта.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.торо_ОбъектыРемонта - Объект ремонта для которого получаем подчиненные,
//  Иерархия - СправочникСсылка.торо_СтруктурыОР - Структура иерархии в которой нужно искать подчиненных. 
// Возвращаемое значение:
//  Массив - массив объектов ремонта.
Функция ПолучитьВсеПодчиненныеОР(Ссылка,Иерархия) Экспорт
	
	МассивОР = Новый Массив;
	ПолучитьПодчиненныеОбъекты(Ссылка, Иерархия, МассивОР);
	Возврат МассивОР;
	
КонецФункции

// Функция - Получить массив строк для заполнения дерева
//
// Параметры:
//  СтруктураПараметровИерархии	 - Структура - Ключи:
//		"СтруктураИерархии,
//		ИзменяетсяДокументами,
//		СтроитсяАвтоматически,
//		РеквизитОР,
//		ТипРеквизитаОР,
//		ИерархическийСправочник,
//		РодительИерархии",
//  СтруктураПараметровФормы	 - Структура - Ключи: "ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта".
// Возвращаемое значение:
//  Массив - Массив структур в который записан результат запроса.
Функция ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии, СтруктураПараметровФормы) Экспорт
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
		
		МассивВозврата = Новый Массив;
		
		// Если иерархия автоматическая и делается отбор, то подчиненных быть не может,
		// поэтому вернем сразу нужный ОР не выполняя лишних действий.

		Если ЗначениеЗаполнено(СтруктураПараметровФормы.ОтборОбъектРемонта) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
			|	торо_ОбъектыРемонта.ПометкаУдаления,
			|	ВЫБОР
			|		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			|			ТОГДА ВЫБОР
			|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			|						ТОГДА 6
			|					ИНАЧЕ 5
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК ИндексКартинки
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|ГДЕ
			|	торо_ОбъектыРемонта.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", СтруктураПараметровФормы.ОтборОбъектРемонта);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				МассивВозврата.Добавить(Новый Структура("ОбъектИерархии,РодительИерархии,ПометкаУдаления,ИндексКартинки,РеквизитДопУпорядочиванияОР", Выборка.ОбъектИерархии, "<>", Выборка.ПометкаУдаления, ?(Выборка.ПометкаУдаления, 1, 0), 0));
			КонецЕсли;
			Возврат МассивВозврата;
		КонецЕсли;
		
		СтруктураПараметровИерархии.РодительИерархии = Справочники[СтруктураПараметровИерархии.ТипРеквизитаОР].ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
		|	торо_ОбъектыРемонта.ПометкаУдаления,
		|	торо_ОбъектыРемонта.Код,
		|	торо_ОбъектыРемонта.ИнвентарныйНомер,
		|	торо_ОбъектыРемонта.ЗаводскойНомер,
		|	торо_ОбъектыРемонта.ТехНомер,
		|	торо_ОбъектыРемонта.НеУчаствуетВПланировании,
		|	ВЫРАЗИТЬ(торо_ОбъектыРемонта.Комментарий КАК Строка(1000)) КАК Комментарий,
		|	ВЫБОР
		|		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
		|			ТОГДА ВЫБОР
		|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		|						ТОГДА 6
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК ИндексКартинки,
		|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР,0) КАК РеквизитДопУпорядочиванияОР
		|	%ТекстДляСозданияВТ1%
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		|		ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
		|		И торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии
		|ГДЕ
		|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " = ЗНАЧЕНИЕ(Справочник." + СтруктураПараметровИерархии.ТипРеквизитаОР + ".ПустаяСсылка)
		|%УсловиеДляОтбора%";
		
		Запрос.УстановитьПараметр("СтруктураИерархии",СтруктураПараметровИерархии.СтруктураИерархии);
		
		ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
		ДополнитьТекстИПараметрыЗапросаДляНаложенияОтборов(Запрос, СтруктураПараметровФормы, Истина);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			МассивВозврата.Добавить(Новый Структура("ОбъектИерархии,РодительИерархии,ПометкаУдаления,ИндексКартинки,РеквизитДопУпорядочиванияОР","<>",СтруктураПараметровИерархии.РодительИерархии,Ложь,9,0));
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
			
				МассивВозврата.Добавить(Новый Структура("ОбъектИерархии,РодительИерархии,ПометкаУдаления,ИндексКартинки,
				|Код,ИнвентарныйНомер,ЗаводскойНомер,ТехНомер,РеквизитДопУпорядочиванияОР,НеУчаствуетВПланировании",
				Выборка.ОбъектИерархии,"<>",Выборка.ПометкаУдаления,Выборка.ИндексКартинки,
				Выборка.Код,Выборка.ИнвентарныйНомер,Выборка.ЗаводскойНомер,Выборка.ТехНомер,Выборка.РеквизитДопУпорядочиванияОР,Выборка.НеУчаствуетВПланировании));
				

			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметровИерархии.ИерархическийСправочник Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СправочникСсылка.Ссылка КАК Ссылка,
			|	СправочникСсылка.Родитель
			|ПОМЕСТИТЬ ТабПервогоУровня
			|ИЗ
			|	Справочник." + СтруктураПараметровИерархии.ТипРеквизитаОР + " КАК СправочникСсылка
			|ГДЕ
			|	СправочникСсылка.Родитель = ЗНАЧЕНИЕ(Справочник." + СтруктураПараметровИерархии.ТипРеквизитаОР + ".ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТабПервогоУровня.Ссылка,
			|	ТабПервогоУровня.Родитель
			|ПОМЕСТИТЬ ТабИерархии
			|ИЗ
			|	ТабПервогоУровня КАК ТабПервогоУровня
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СправочникСсылка.Ссылка,
			|	СправочникСсылка.Родитель
			|ИЗ
			|	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК СправочникСсылка
			|ГДЕ
			|	СправочникСсылка.Родитель В
			|			(ВЫБРАТЬ
			|				ТабПервогоУровня.Ссылка
			|			ИЗ
			|				ТабПервогоУровня КАК ТабПервогоУровня)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТабИерархии.Ссылка КАК РеквизитОРСсылка,
			|	ТабИерархии.Ссылка.ПометкаУдаления КАК РеквизитОРСсылкаПометкаУдаления,
			|	ТабИерархии.Родитель КАК РодительРеквизитОРСсылка,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.Ссылка,ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК ОбъектИерархии,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.Код,"""") КАК Код,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ИнвентарныйНомер,"""") КАК ИнвентарныйНомер,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ЗаводскойНомер,"""") КАК ЗаводскойНомер,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ТехНомер,"""") КАК ТехНомер,
			|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочиванияОР,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ПометкаУдаления, Ложь) КАК ПометкаУдаления,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.НеУчаствуетВПланировании, Ложь) КАК НеУчаствуетВПланировании
			|	%ТекстДляСозданияВТ1%
			|ИЗ
			|	ТабИерархии КАК ТабИерархии
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|			ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|				И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
			|		ПО ТабИерархии.Ссылка = торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР+"
			|%УсловиеДляОтбора%";
			
			Запрос.УстановитьПараметр("СтруктураИерархии",СтруктураПараметровИерархии.СтруктураИерархии);
			
			ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
			ДополнитьТекстИПараметрыЗапросаДляНаложенияОтборов(Запрос, СтруктураПараметровФормы);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ТабИерархии = РезультатЗапроса.Выгрузить();
			
			СтруктураПоиска = Новый Структура("РодительРеквизитОРСсылка", СтруктураПараметровИерархии.РодительИерархии);
			
			МассивКорневыхСтрок = ТабИерархии.НайтиСтроки(СтруктураПоиска);
			МассивДобавленныхСтрок = Новый Массив;
			
			Для Каждого СтрокаКорневая ИЗ МассивКорневыхСтрок Цикл
				
				Если МассивДобавленныхСтрок.Найти(СтрокаКорневая.РеквизитОРСсылка) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				МассивДобавленныхСтрок.Добавить(СтрокаКорневая.РеквизитОРСсылка);
				МассивВозврата.Добавить(Новый Структура("ОбъектИерархии,РодительИерархии,ПометкаУдаления,ИндексКартинки,РеквизитДопУпорядочиванияОР",
				СтрокаКорневая.РеквизитОРСсылка,СтрокаКорневая.РодительРеквизитОРСсылка,СтрокаКорневая.РеквизитОРСсылкаПометкаУдаления,?(СтрокаКорневая.РеквизитОРСсылкаПометкаУдаления,10,9),0));

				МассивСтрокПервогоУровня = ТабИерархии.НайтиСтроки(Новый Структура("РодительРеквизитОРСсылка",СтрокаКорневая.РеквизитОРСсылка));
				
				МассивДобавленныхСтрокПервогоУровня = Новый Массив;
				
				Для Каждого СтрокаПервогоУровня Из МассивСтрокПервогоУровня Цикл
					
					Если МассивДобавленныхСтрокПервогоУровня.Найти(СтрокаПервогоУровня.РеквизитОРСсылка) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					МассивДобавленныхСтрокПервогоУровня.Добавить(СтрокаПервогоУровня.РеквизитОРСсылка);
					МассивВозврата.Добавить(Новый Структура("ОбъектИерархии,РодительИерархии,ПометкаУдаления,ИндексКартинки,РеквизитДопУпорядочиванияОР",
					СтрокаПервогоУровня.РеквизитОРСсылка,СтрокаКорневая.РеквизитОРСсылка,СтрокаПервогоУровня.РеквизитОРСсылкаПометкаУдаления,?(СтрокаПервогоУровня.РеквизитОРСсылкаПометкаУдаления,10,9),0));
					
				КонецЦикла;
				
				МассивСтрокПервогоУровня = ТабИерархии.НайтиСтроки(Новый Структура("РеквизитОРСсылка",СтрокаКорневая.РеквизитОРСсылка));
				
				Для Каждого СтрокаПервогоУровня Из МассивСтрокПервогоУровня Цикл
					
					Если СтрокаПервогоУровня.ОбъектИерархии = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
						Продолжить;
					КонецЕсли;
					
					МассивВозврата.Добавить(Новый Структура("ОбъектИерархии,РодительИерархии,ПометкаУдаления,ИндексКартинки,
					|Код,ИнвентарныйНомер,ЗаводскойНомер,ТехНомер,РеквизитДопУпорядочиванияОР,НеУчаствуетВПланировании",
					СтрокаПервогоУровня.ОбъектИерархии,СтрокаКорневая.РеквизитОРСсылка,СтрокаПервогоУровня.ПометкаУдаления,?(СтрокаПервогоУровня.ПометкаУдаления,1,0),
					СтрокаПервогоУровня.Код,СтрокаПервогоУровня.ИнвентарныйНомер,СтрокаПервогоУровня.ЗаводскойНомер,СтрокаПервогоУровня.ТехНомер,СтрокаПервогоУровня.РеквизитДопУпорядочиванияОР,СтрокаПервогоУровня.НеУчаствуетВПланировании));

				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	СправочникСсылка.Ссылка КАК Ссылка,
			|	СправочникСсылка.ПометкаУдаления КАК РеквизитОРСсылкаПометкаУдаления,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.Ссылка,ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК ОбъектИерархии,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.Код,"""") КАК Код,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ИнвентарныйНомер,"""") КАК ИнвентарныйНомер,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ЗаводскойНомер,"""") КАК ЗаводскойНомер,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ТехНомер,"""") КАК ТехНомер,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ПометкаУдаления, ЛОЖЬ) КАК ПометкаУдаления,
			|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочиванияОР,
			|	ВЫБОР
			|		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			|			ТОГДА ВЫБОР
			|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			|						ТОГДА 6
			|					ИНАЧЕ 5
			|				КОНЕЦ
			|		ИНАЧЕ ВЫБОР
			|				КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			|					ТОГДА 1
			|				ИНАЧЕ 0
			|			КОНЕЦ
			|	КОНЕЦ КАК ИндексКартинки,
			|	торо_ОбъектыРемонта.НеУчаствуетВПланировании
			|	%ТекстДляСозданияВТ1%
			|ИЗ
			|	Справочник." + СтруктураПараметровИерархии.ТипРеквизитаОР + " КАК СправочникСсылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|			ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|			И торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии
			|		ПО (торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " = СправочникСсылка.Ссылка)
			|	%УсловиеДляОтбора%";

			
			Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.СтруктураИерархии);
			ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
			ДополнитьТекстИПараметрыЗапросаДляНаложенияОтборов(Запрос, СтруктураПараметровФормы, Истина);
			Запрос.Текст = Запрос.Текст + "
			|ИТОГИ ПО
			|	Ссылка";
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаПоСсылкеСправочника = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСсылкеСправочника.Следующий() Цикл
				
				МассивВозврата.Добавить(Новый Структура("ОбъектИерархии,РодительИерархии,ПометкаУдаления,ИндексКартинки,
				|Код,ИнвентарныйНомер,ЗаводскойНомер,ТехНомер,РеквизитДопУпорядочиванияОР,НеУчаствуетВПланировании",
				ВыборкаПоСсылкеСправочника.Ссылка,СтруктураПараметровИерархии.РодительИерархии,ВыборкаПоСсылкеСправочника.РеквизитОРСсылкаПометкаУдаления,?(ВыборкаПоСсылкеСправочника.РеквизитОРСсылкаПометкаУдаления,10,9),
				"","","","",0,Истина));
				
				ВыборкаДетЗаписи = ВыборкаПоСсылкеСправочника.Выбрать();
				
				Пока ВыборкаДетЗаписи.Следующий() Цикл
					
					Если ВыборкаДетЗаписи.ОбъектИерархии = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
						Продолжить;
					КонецЕсли;
					
					МассивВозврата.Добавить(Новый Структура("ОбъектИерархии,РодительИерархии,ПометкаУдаления,ИндексКартинки,
					|Код,ИнвентарныйНомер,ЗаводскойНомер,ТехНомер,РеквизитДопУпорядочиванияОР,НеУчаствуетВПланировании",
					ВыборкаДетЗаписи.ОбъектИерархии,ВыборкаПоСсылкеСправочника.Ссылка,ВыборкаДетЗаписи.ПометкаУдаления,ВыборкаДетЗаписи.ИндексКартинки,
					ВыборкаДетЗаписи.Код,ВыборкаДетЗаписи.ИнвентарныйНомер,ВыборкаДетЗаписи.ЗаводскойНомер,ВыборкаДетЗаписи.ТехНомер,ВыборкаДетЗаписи.РеквизитДопУпорядочиванияОР,ВыборкаДетЗаписи.НеУчаствуетВПланировании));
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат МассивВозврата;
		
	Иначе
		
		СтруктураПараметровИерархии.РодительИерархии = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
		
		Если СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			               |ПОМЕСТИТЬ РасположениеОР
			               |ИЗ
			               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_ИерархическиеСтруктурыОР
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ
			               |	И (торо_ИерархическиеСтруктурыОР.РодительИерархии В(&РодительИерархии)
						   |		ИЛИ торо_ИерархическиеСтруктурыОР.ОбъектИерархии = &ОтборОбъектРемонта)
			               |
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
			               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии,
			               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
			               |ПОМЕСТИТЬ ТабБезПорядка
			               |ИЗ
			               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			               |ГДЕ
			               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии В
			               |			(ВЫБРАТЬ
			               |				РасположениеОР.ОбъектИерархии
			               |			ИЗ
			               |				РасположениеОР КАК РасположениеОР)
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	РасположениеОР.ОбъектИерархии,
			               |	РасположениеОР.СтруктураИерархии,
			               |	РасположениеОР.РодительИерархии
			               |ИЗ
			               |	РасположениеОР КАК РасположениеОР
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ТабБезПорядка.ОбъектИерархии КАК Ссылка,
			               |	КОЛИЧЕСТВО(торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии) КАК КоличествоПодчиненных
			               |ПОМЕСТИТЬ ОРСКоличествомВложенных
			               |ИЗ
			               |	ТабБезПорядка КАК ТабБезПорядка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(,СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархии
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_РасположениеОРВСтруктуреИерархии.РодительИерархии
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ТабБезПорядка.ОбъектИерархии
			               |
			               |ИМЕЮЩИЕ
			               |	КОЛИЧЕСТВО(торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии) > 0
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ТабБезПорядка.ОбъектИерархии,
			               |	ТабБезПорядка.СтруктураИерархии,
			               |	ТабБезПорядка.РодительИерархии,
			               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР,
			               |	ВЫБОР
			               |		КОГДА ТабБезПорядка.ОбъектИерархии ССЫЛКА Справочник.торо_ОбъектыРемонта
			               |			ТОГДА ВЫБОР
			               |					КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			               |						ТОГДА ВЫБОР
			               |								КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |									ТОГДА 6
			               |								ИНАЧЕ 5
			               |							КОНЕЦ
			               |					ИНАЧЕ ВЫБОР
			               |							КОГДА ОРСКоличествомВложенных.Ссылка ЕСТЬ NULL
			               |								ТОГДА ВЫБОР
			               |										КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |											ТОГДА 1
			               |										ИНАЧЕ 0
			               |									КОНЕЦ
			               |							ИНАЧЕ ВЫБОР
			               |									КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |										ТОГДА 3
			               |									ИНАЧЕ 2
			               |								КОНЕЦ
			               |						КОНЕЦ
			               |				КОНЕЦ
			               |		ИНАЧЕ 4
			               |	КОНЕЦ КАК ИндексКартинки,
			               |	торо_ОбъектыРемонта.Код,
			               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
			               |	торо_ОбъектыРемонта.ЗаводскойНомер,
			               |	торо_ОбъектыРемонта.ТехНомер,
						   |	торо_ОбъектыРемонта.ПометкаУдаления,
						   |	торо_ОбъектыРемонта.НеУчаствуетВПланировании,
						   |	ВЫРАЗИТЬ(торо_ОбъектыРемонта.Комментарий КАК Строка(1000)) КАК Комментарий
						   |	%ТекстДляСозданияВТ1%
			               |ИЗ
			               |	ТабБезПорядка КАК ТабБезПорядка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
			               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ОРСКоличествомВложенных КАК ОРСКоличествомВложенных
			               |		ПО ТабБезПорядка.ОбъектИерархии = ОРСКоличествомВложенных.Ссылка
						   |%УсловиеДляОтбора%";
						   
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			               |ПОМЕСТИТЬ РасположениеОР
			               |ИЗ
			               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			               |	И (торо_ИерархическиеСтруктурыОР.РодительИерархии В (&РодительИерархии)
			               |			ИЛИ торо_ИерархическиеСтруктурыОР.ОбъектИерархии = &ОтборОбъектРемонта)
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
			               |ПОМЕСТИТЬ ТабБезПорядка
			               |ИЗ
			               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасположениеОР КАК РасположениеОР
			               |		ПО торо_ИерархическиеСтруктурыОР.РодительИерархии = РасположениеОР.ОбъектИерархии
			               |			И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = РасположениеОР.СтруктураИерархии
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	РасположениеОР.ОбъектИерархии,
			               |	РасположениеОР.СтруктураИерархии,
			               |	РасположениеОР.РодительИерархии
			               |ИЗ
			               |	РасположениеОР КАК РасположениеОР
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ТабБезПорядка.ОбъектИерархии КАК ОбъектИерархии,
			               |	ТабБезПорядка.СтруктураИерархии КАК СтруктураИерархии,
			               |	ТабБезПорядка.РодительИерархии КАК РодительИерархии
			               |ПОМЕСТИТЬ ВТ_ТабБезПорядка
			               |ИЗ
			               |	ТабБезПорядка КАК ТабБезПорядка
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	ОбъектИерархии,
			               |	СтруктураИерархии,
			               |	РодительИерархии
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ОбъектыРемонтаГруппы.ОбъектИерархии КАК ОбъектИерархии
			               |ПОМЕСТИТЬ ВТ_Группы
			               |ИЗ
			               |	РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ТабБезПорядка КАК ВТ_ТабБезПорядка
			               |		ПО торо_ОбъектыРемонтаГруппы.ОбъектИерархии = ВТ_ТабБезПорядка.ОбъектИерархии
			               |			И (торо_ОбъектыРемонтаГруппы.СтруктураИерархии = &СтруктураИерархии)
			               |			И (торо_ОбъектыРемонтаГруппы.ОбъектГруппа)
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	ОбъектИерархии
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ТабБезПорядка.ОбъектИерархии,
			               |	ТабБезПорядка.СтруктураИерархии,
			               |	ТабБезПорядка.РодительИерархии,
			               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР,
			               |	ВЫБОР
			               |		КОГДА ТабБезПорядка.ОбъектИерархии ССЫЛКА Справочник.торо_ОбъектыРемонта
			               |			ТОГДА ВЫБОР
			               |					КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			               |						ТОГДА ВЫБОР
			               |								КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |									ТОГДА 6
			               |								ИНАЧЕ 5
			               |							КОНЕЦ
			               |					ИНАЧЕ ВЫБОР
			               |							КОГДА ВТ_Группы.ОбъектИерархии ЕСТЬ NULL
			               |								ТОГДА ВЫБОР 
			               |										КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |											ТОГДА 1
			               |										ИНАЧЕ 0
			               |									КОНЕЦ
			               |							ИНАЧЕ ВЫБОР
			               |									КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |										ТОГДА 3
			               |									ИНАЧЕ 2
			               |								КОНЕЦ
			               |						КОНЕЦ
			               |				КОНЕЦ
			               |		ИНАЧЕ 4
			               |	КОНЕЦ КАК ИндексКартинки,
			               |	торо_ОбъектыРемонта.Код,
			               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
			               |	торо_ОбъектыРемонта.ЗаводскойНомер,
			               |	торо_ОбъектыРемонта.ТехНомер,
			               |	торо_ОбъектыРемонта.ПометкаУдаления,
			               |	торо_ОбъектыРемонта.НеУчаствуетВПланировании,
			               |	ВЫРАЗИТЬ(торо_ОбъектыРемонта.Комментарий КАК Строка(1000)) КАК Комментарий
						   |	%ТекстДляСозданияВТ1%
			               |ИЗ
			               |	ВТ_ТабБезПорядка КАК ТабБезПорядка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
			               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонтаГруппы.ОбъектИерархии
			               |			И ТабБезПорядка.СтруктураИерархии = торо_ОбъектыРемонтаГруппы.СтруктураИерархии
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Группы КАК ВТ_Группы
			               |		ПО ТабБезПорядка.ОбъектИерархии = ВТ_Группы.ОбъектИерархии
						   |%УсловиеДляОтбора%";
			
					   КонецЕсли;
					   
					   
		ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
		
		ДополнитьТекстИПараметрыЗапросаДляНаложенияОтборов(Запрос,СтруктураПараметровФормы);
		
		Если ЗначениеЗаполнено(СтруктураПараметровФормы.ОтборОбъектРемонта) Тогда
			СтруктураПараметровИерархии.РодительИерархии = СтруктураПараметровФормы.ОтборОбъектРемонта;
		КонецЕсли;
		
		СостояниеДереваОР = СтруктураПараметровФормы.СостояниеДереваОР;
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.СтруктураИерархии);				
		Запрос.УстановитьПараметр("РодительИерархии", ?(СостояниеДереваОР <> Неопределено,?(СостояниеДереваОР.МассивОткрытыхОР.Количество() = 0,СтруктураПараметровИерархии.РодительИерархии,СостояниеДереваОР.МассивОткрытыхОР),СтруктураПараметровИерархии.РодительИерархии));
		Запрос.УстановитьПараметр("ОтборОбъектРемонта", СтруктураПараметровИерархии.РодительИерархии);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультатЗапроса);

	КонецЕсли;

КонецФункции

// Функция - Получить структуру новых строк для дерева при разворачивании
//
// Параметры:
//  Ссылка						 - СправочникСсылка.торо_ОбъектыРемонта - Ссылка на объект ремонта,
//  ПараметрыСтруктурыИерархии	 - Структура - Ключи: 
//		"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник",
//  МассивЭлементов				 - Массив - Массив ссылок на объекты ремонта текущих строк,
//  СтруктураПараметровФормы	 - Структура - Ключи:
//		"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта".
// Возвращаемое значение:
//  Массив - Массив структур в который записан результат запроса.
Функция ПолучитьСтруктуруНовыхСтрокДляДереваПриРазворачивании(Ссылка, ПараметрыСтруктурыИерархии, МассивЭлементов, СтруктураПараметровФормы) Экспорт

	Если ПараметрыСтруктурыИерархии.СтроитсяАвтоматически Тогда
		
		МассивВозврата = Новый Массив;
		
		Если ПараметрыСтруктурыИерархии.ИерархическийСправочник Тогда

			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СправочникСсылка.Родитель КАК Родитель,
			|	СправочникСсылка.Ссылка КАК ОбъектИерархии,
			|	СправочникСсылка.ПометкаУдаления,
			|	0 КАК РеквизитДопУпорядочиванияОР,
			|	ВЫБОР КОГДА СправочникСсылка.ПометкаУдаления ТОГДА 10 ИНАЧЕ 9 КОНЕЦ КАК ИндексКартинки,
			|	"""" КАК Код,
            |	"""" КАК ИнвентарныйНомер,
            |	"""" КАК ЗаводскойНомер,
            |	"""" КАК ТехНомер,
			|	"""" КАК Комментарий
			|	%ТекстДляСозданияВТ1%
			|ИЗ
			|	Справочник." + ПараметрыСтруктурыИерархии.ТипРеквизитаОР + " КАК СправочникСсылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ПараметрыСтруктурыИерархии.ТипРеквизитаОР + " КАК СпрСсылка
			|		ПО СправочникСсылка.Родитель = СпрСсылка.Ссылка
			|ГДЕ
			|	СпрСсылка.Ссылка В (&МассивЭлементов)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	торо_ОбъектыРемонта."+ПараметрыСтруктурыИерархии.РеквизитОР+",
			|	торо_ОбъектыРемонта.Ссылка,
			|	торо_ОбъектыРемонта.ПометкаУдаления,
			|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР,0),
			|	ВЫБОР
            |		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
            |			ТОГДА ВЫБОР
            |					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
            |						ТОГДА 6
            |					ИНАЧЕ 5
            |				КОНЕЦ
            |		ИНАЧЕ ВЫБОР
            |				КОГДА торо_ОбъектыРемонта.ПометкаУдаления
            |					ТОГДА 1
            |				ИНАЧЕ 0
            |			КОНЕЦ
            |	КОНЕЦ КАК ИндексКартинки,
			|	торо_ОбъектыРемонта.Код,
            |	торо_ОбъектыРемонта.ИнвентарныйНомер,
            |	торо_ОбъектыРемонта.ЗаводскойНомер,
            |	торо_ОбъектыРемонта.ТехНомер,
			|	ВЫРАЗИТЬ(торо_ОбъектыРемонта.Комментарий КАК Строка(1000)) КАК Комментарий
			|	%ТекстДляСозданияВТ2%
			|ИЗ
			|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|		ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|			И торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии
			|ГДЕ
			|	торо_ОбъектыРемонта."+ПараметрыСтруктурыИерархии.РеквизитОР+" В (&МассивЭлементов)
			|%УсловиеДляОтбора%";
		
			Запрос.УстановитьПараметр("СтруктураИерархии", ПараметрыСтруктурыИерархии.СтруктураИерархии);
			Запрос.УстановитьПараметр("МассивЭлементов",МассивЭлементов);
			ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
			ДополнитьТекстИПараметрыЗапросаДляНаложенияОтборов(Запрос, СтруктураПараметровФормы, Истина);
			
			РезультатЗапроса = Запрос.Выполнить();
			Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультатЗапроса);
			
		Иначе // не иерархический
			// Тут пока ничего нет и я не уверен, что надо. По идее,
			// если справочник в реквизите не иерархический, то всё дерево построено сразу
			// по умолчанию, и достраивать его тут динамически вообще не нужно.

		КонецЕсли;

	Иначе
		
		Если ПараметрыСтруктурыИерархии.ИзменяетсяДокументами Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии КАК Ссылка,
			               |	торо_РасположениеОРВСтруктуреИерархии.СтруктураИерархии,
			               |	торо_РасположениеОРВСтруктуреИерархии.РодительИерархии,
			               |	торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии.ПометкаУдаления КАК ПометкаУдаления
			               |ПОМЕСТИТЬ ТабБезПорядка
			               |ИЗ
			               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархии
			               |		ПО (торо_РасположениеОРВСтруктуреИерархии.РодительИерархии = торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии)
			               |ГДЕ
			               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии = &РодительИерархии
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ТабБезПорядка.Ссылка,
			               |	КОЛИЧЕСТВО(торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии) КАК КоличествоПодчиненных
			               |ПОМЕСТИТЬ ОРСКоличествомВложенных
			               |ИЗ
			               |	ТабБезПорядка КАК ТабБезПорядка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(,СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархии
			               |		ПО ТабБезПорядка.Ссылка = торо_РасположениеОРВСтруктуреИерархии.РодительИерархии
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ТабБезПорядка.Ссылка
			               |
			               |ИМЕЮЩИЕ
			               |	КОЛИЧЕСТВО(торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии) > 0
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ТабБезПорядка.Ссылка КАК ОбъектИерархии,
			               |	ТабБезПорядка.СтруктураИерархии,
			               |	ТабБезПорядка.РодительИерархии КАК Родитель,
			               |	ТабБезПорядка.ПометкаУдаления,
			               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР,
			               |	ВЫБОР
			               |		КОГДА ТабБезПорядка.Ссылка ССЫЛКА Справочник.торо_ОбъектыРемонта
			               |			ТОГДА ВЫБОР
			               |					КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			               |						ТОГДА ВЫБОР
			               |								КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |									ТОГДА 6
			               |								ИНАЧЕ 5
			               |							КОНЕЦ
			               |					ИНАЧЕ ВЫБОР
			               |							КОГДА ОРСКоличествомВложенных.Ссылка ЕСТЬ NULL 
			               |								ТОГДА ВЫБОР
			               |										КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |											ТОГДА 1
			               |										ИНАЧЕ 0
			               |									КОНЕЦ
			               |							ИНАЧЕ ВЫБОР
			               |									КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |										ТОГДА 3
			               |									ИНАЧЕ 2
			               |								КОНЕЦ
			               |						КОНЕЦ
			               |				КОНЕЦ
			               |		ИНАЧЕ 4
			               |	КОНЕЦ КАК ИндексКартинки,
						   |	торо_ОбъектыРемонта.Код,
			               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
			               |	торо_ОбъектыРемонта.ЗаводскойНомер,
			               |	торо_ОбъектыРемонта.ТехНомер,
						   |	ВЫРАЗИТЬ(торо_ОбъектыРемонта.Комментарий КАК Строка(1000)) КАК Комментарий
						   |	%ТекстДляСозданияВТ1%
			               |ИЗ
			               |	ТабБезПорядка КАК ТабБезПорядка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			               |		ПО ТабБезПорядка.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |		ПО ТабБезПорядка.Ссылка = торо_ОбъектыРемонта.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ОРСКоличествомВложенных КАК ОРСКоличествомВложенных
			               |		ПО ТабБезПорядка.Ссылка = ОРСКоличествомВложенных.Ссылка
						   |%УсловиеДляОтбора%";
			
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ИерархическиеСтруктурыОР.ОбъектИерархии КАК Ссылка,
			               |	ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	ИерархическиеСтруктурыОР.РодительИерархии,
			               |	ИерархическиеСтруктурыОР.ОбъектИерархии.ПометкаУдаления КАК ПометкаУдаления
			               |ПОМЕСТИТЬ ТабБезПорядка
			               |ИЗ
			               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ИерархическиеСтруктурыОР
			               |		ПО (ИерархическиеСтруктурыОР.РодительИерархии = торо_ИерархическиеСтруктурыОР.ОбъектИерархии)
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			               |	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии
			               |	И ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ТабБезПорядка.Ссылка
			               |ПОМЕСТИТЬ ОРСКоличествомВложенных
			               |ИЗ
			               |	ТабБезПорядка КАК ТабБезПорядка
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
			               |		ПО (торо_ОбъектыРемонтаГруппы.СтруктураИерархии = &СтруктураИерархии)
			               |			И ТабБезПорядка.Ссылка = торо_ОбъектыРемонтаГруппы.ОбъектИерархии
						   |			И торо_ОбъектыРемонтаГруппы.ОбъектГруппа
			               |
						   |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	ТабБезПорядка.Ссылка КАК ОбъектИерархии,
			               |	ТабБезПорядка.СтруктураИерархии,
			               |	ТабБезПорядка.РодительИерархии КАК Родитель,
			               |	ТабБезПорядка.ПометкаУдаления,
			               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР,
			               |	ВЫБОР
			               |		КОГДА ТабБезПорядка.Ссылка ССЫЛКА Справочник.торо_ОбъектыРемонта
			               |			ТОГДА ВЫБОР
			               |					КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			               |						ТОГДА ВЫБОР
			               |								КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |									ТОГДА 6
			               |								ИНАЧЕ 5
			               |							КОНЕЦ
			               |					ИНАЧЕ ВЫБОР
			               |							КОГДА ОРСКоличествомВложенных.Ссылка ЕСТЬ NULL 
			               |								ТОГДА ВЫБОР
			               |										КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |											ТОГДА 1
			               |										ИНАЧЕ 0
			               |									КОНЕЦ
			               |							ИНАЧЕ ВЫБОР
			               |									КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |										ТОГДА 3
			               |									ИНАЧЕ 2
			               |								КОНЕЦ
			               |						КОНЕЦ
			               |				КОНЕЦ
			               |		ИНАЧЕ 4
			               |	КОНЕЦ КАК ИндексКартинки,
						   |	торо_ОбъектыРемонта.Код,
			               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
			               |	торо_ОбъектыРемонта.ЗаводскойНомер,
			               |	торо_ОбъектыРемонта.ТехНомер,
			               |	ВЫРАЗИТЬ(торо_ОбъектыРемонта.Комментарий КАК Строка(1000)) КАК Комментарий
						   |	%ТекстДляСозданияВТ1%
						   |ИЗ
			               |	ТабБезПорядка КАК ТабБезПорядка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			               |		ПО ТабБезПорядка.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |		ПО ТабБезПорядка.Ссылка = торо_ОбъектыРемонта.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ОРСКоличествомВложенных КАК ОРСКоличествомВложенных
			               |		ПО ТабБезПорядка.Ссылка = ОРСКоличествомВложенных.Ссылка
						   |%УсловиеДляОтбора%";
						   
						   
		КонецЕсли;		
		
		Запрос.УстановитьПараметр("СтруктураИерархии", ПараметрыСтруктурыИерархии.СтруктураИерархии);				
		Запрос.УстановитьПараметр("РодительИерархии" , Ссылка);
		
		ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
		
		ДополнитьТекстИПараметрыЗапросаДляНаложенияОтборов(Запрос, СтруктураПараметровФормы);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультатЗапроса);
		
	КонецЕсли;
	
КонецФункции

// Функция - Проверить зацикливание зависимых остановочных.
//
// Параметры:
//  ВР	 - СправочникСсылка.торо_ВидыРемонта - Вид ремонта проверяемый на зацикливание. 
//  ВыбранныйВР	 - СправочникСсылка.торо_ВидыРемонта - Выбранный вид ремонта. 
//  ОР	 - СправочникСсылка.торо_ОбъектыРемонта - Объект ремонта проверяемый на зацикливание.
//  ВыбранныйОР	 - СправочникСсылка.торо_ОбъектыРемонта - Выбранный объект ремонта.
//  Основной - Булево - признак, что выбирается основной или связанный ОР.
//  ТабДляПроверки - ТаблицаЗначений - таблица для проверки зацикливания.
// Возвращаемое значение:
//  Булево - Истина - происходит зацикливание, Ложь - зацикливания не происходит.
Функция ПроверитьЗацикливаниеЗависимыхОстановочных(ВР, ВыбранныйВР, ОР, ВыбранныйОР, Основной, ТабДляПроверки) Экспорт 	
	
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	&ОбъектРемонта КАК %ВыбираемыйОР%,
	|	&ВидРемонта КАК %ВыбираемыйВР%";
	
	Если Основной Тогда
		ВыбираемыйОР 	= "ОсновнойОбъектРемонта";
		ВыбираемыйВР 	= "ВидРемонтаОсновногоОбъекта";
		
	Иначе
		ВыбираемыйОР 	= "СвязанныйОбъектРемонта";
		ВыбираемыйВР 	= "ВидРемонтаЗависимогоОбъекта";
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыбираемыйОР%", ВыбираемыйОР);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыбираемыйВР%", ВыбираемыйВР);
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОбъектРемонта", ВыбранныйОР);
	Запрос.УстановитьПараметр("ВидРемонта", ВыбранныйВР);
	
	Зависимые = Запрос.Выполнить().Выгрузить();
	
	Если Зависимые.НайтиСтроки(Новый Структура(ВыбираемыйОР + ", " + ВыбираемыйВР, ОР, ВР)).Количество() > 0
		ИЛИ ТабДляПроверки.НайтиСтроки(Новый Структура("ОбъектРемонта, " + ВыбираемыйВР, ВыбранныйОР, ВР)).Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		Возврат ПроверитьЗацикливаниеЗависимыхОстановочныхРек(Зависимые, ОР, ВР, Основной, ТабДляПроверки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ПолучитьПодчиненныеОбъекты(Ссылка,Иерархия,СтруктураДляДобавления)
	
	Запрос = Новый Запрос;
	
	Если Иерархия.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасположениеОРВСтруктуреИерархии.ОбъектИерархии,
		|	РасположениеОРВСтруктуреИерархии.РодительИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&Дата, СтруктураИерархии = &Иерархия) КАК РасположениеОРВСтруктуреИерархии
		|ГДЕ
		|	НЕ РасположениеОРВСтруктуреИерархии.Удален
		|	И РасположениеОРВСтруктуреИерархии.РодительИерархии = &Ссылка";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("Иерархия", Иерархия);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &Иерархия
		|	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &Ссылка";
		
		Запрос.УстановитьПараметр("Иерархия", Иерархия);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
	КонецЕсли;
	
	Выборка = запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(СтруктураДляДобавления) = Тип("Массив") Тогда
			
			Если НЕ Выборка.ОбъектИерархии.ЭтоГруппа Тогда
				СтруктураДляДобавления.Добавить(Выборка.ОбъектИерархии);
			КонецЕсли;
			ПолучитьПодчиненныеОбъекты(Выборка.ОбъектИерархии, Иерархия, СтруктураДляДобавления);
			
		Иначе
			НСтрока = СтруктураДляДобавления.Строки.Добавить();
			НСтрока.Ссылка = Выборка.ОбъектИерархии;
			ПолучитьПодчиненныеОбъекты(Выборка.ОбъектИерархии, Иерархия, НСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВычислитьТекущееЗначениеНаработки(Ссылка, ПараметрНаработки, УчитыватьПростоиОборудования) Экспорт
	ТекДата = ТекущаяДата();
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВт;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_НаработкаОбъектовРемонта.ОбъектРемонта,
	|	торо_НаработкаОбъектовРемонта.Показатель,
	|	торо_НаработкаОбъектовРемонта.Наработка,
	|	ВЫБОР
	|		КОГДА торо_НаработкаОбъектовРемонта.ДатаНач = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА торо_НаработкаОбъектовРемонта.ОбъектРемонта.ДатаВводаВЭксплуатацию
	|		ИНАЧЕ торо_НаработкаОбъектовРемонта.ДатаНач
	|	КОНЕЦ КАК ФактДатаНач,
	|	торо_НаработкаОбъектовРемонта.ДатаКон КАК ФактДатаКон,
	|	&ДатаСреза КАК ДатаКон,
	|	торо_НаработкаОбъектовРемонта.ОбъектРемонта.ПлановыйГрафикРаботы КАК ГрафикРемонтныхРабот,
	|	торо_НаработкаОбъектовРемонта.ОбъектРемонта.ДатавводаВЭксплуатацию КАК ДатаНач
	|ПОМЕСТИТЬ ТабНаработки
	|ИЗ
	|	РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	|ГДЕ
	|	торо_НаработкаОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	|	И торо_НаработкаОбъектовРемонта.Показатель = &Показатель
	|	И торо_НаработкаОбъектовРемонта.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабНаработки.ОбъектРемонта КАК Объект,
	|	ТабНаработки.Показатель,
	|	МАКСИМУМ(ТабНаработки.ФактДатаКон) КАК ДатаРаботыС,
	|	&ДатаСреза КАК ДатаРаботыПо,
	|	ТабНаработки.ГрафикРемонтныхРабот
	|ИЗ
	|	ТабНаработки КАК ТабНаработки
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабНаработки.ОбъектРемонта,
	|	ТабНаработки.Показатель,
	|	ТабНаработки.ГрафикРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ДатаСреза", ТекДата);
	Запрос.УстановитьПараметр("ОбъектРемонта", Ссылка);
	Запрос.УстановитьПараметр("Показатель", ПараметрНаработки);
	
	Результат = Запрос.Выполнить();
	
	ТаблЗнач = Результат.Выгрузить();
	
	ТаблицаДанных = торо_РаботаСНаработкой.ПолучитьИнтервалыРасчетаПлановойНаработки(ТаблЗнач, ТекущаяДата(), УчитыватьПростоиОборудования); 
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТабСНаработкой.ОбъектРемонта,
	|	ТабСНаработкой.Показатель,
	|	ТабСНаработкой.ДатаРаботыС,
	|	ТабСНаработкой.ДатаРаботыПо,
	|	ТабСНаработкой.ДатаНачала,
	|	ТабСНаработкой.ДатаОкончания,
	|	ТабСНаработкой.ПериодПлановойНаработки,
	|	ТабСНаработкой.ПродолжительностьПериодаПлановойНаработки,
	|	ТабСНаработкой.КоэффициентИспользованияОборудования,
	|	ТабСНаработкой.ПлановаяНаработка,
	|	ТабСНаработкой.ФактическаяНаработка
	|ПОМЕСТИТЬ ТабСНаработкой
	|ИЗ
	|	&ТабСНаработкой КАК ТабСНаработкой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабСНаработкой.ОбъектРемонта,
	|	ТабСНаработкой.Показатель,
	|	ТабСНаработкой.ДатаРаботыС,
	|	ТабСНаработкой.ДатаРаботыПо,
	|	ТабСНаработкой.ДатаНачала,
	|	ТабСНаработкой.ДатаОкончания,
	|	ТабСНаработкой.ПериодПлановойНаработки,
	|	ТабСНаработкой.ПродолжительностьПериодаПлановойНаработки,
	|	ТабСНаработкой.КоэффициентИспользованияОборудования,
	|	ТабСНаработкой.ПлановаяНаработка,
	|	ТабСНаработкой.ФактическаяНаработка,
	|	Итог.ГрафикРемонтныхРабот КАК ПлановыйГрафикРаботы
	|ИЗ
	|	ТабСНаработкой КАК ТабСНаработкой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабНаработки КАК Итог
	|		ПО ТабСНаработкой.ОбъектРемонта = Итог.ОбъектРемонта
	|			И ТабСНаработкой.Показатель = Итог.Показатель";
	
	Запрос.УстановитьПараметр("ТабСНаработкой", ТаблицаДанных);
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	ВариантыПериодов = ТаблицаДанных.Скопировать(,"ПериодПлановойНаработки");
	ВариантыПериодов.Свернуть("ПериодПлановойНаработки",);
	Для Каждого Период Из ВариантыПериодов Цикл
		ТаблицаСПериодом = ТаблицаДанных.Скопировать(Новый Структура("ПериодПлановойНаработки",Период.ПериодПлановойНаработки));
		ТаблицаСНаработкой = торо_РаботаСНаработкой.РасчитатьВремяРаботыОР(ТаблицаСПериодом,Период.ПериодПлановойНаработки);
		Для Каждого ЗаписьСНаработкой Из ТаблицаСНаработкой Цикл
			МассивСтрок = ТаблицаДанных.НайтиСтроки(Новый Структура("ОбъектРемонта,ДатаНачала,ДатаОкончания,Показатель",
			ЗаписьСНаработкой.ОбъектРемонта,ЗаписьСНаработкой.ДатаНачала,ЗаписьСНаработкой.ДатаОкончания,ЗаписьСНаработкой.Показатель));
			
			
			Для Каждого Строка Из МассивСтрок Цикл
				Строка.ФактическаяНаработка = Строка.ФактическаяНаработка 
				+ ЗаписьСНаработкой.Периодов / ?(Строка.ПродолжительностьПериодаПлановойНаработки = 0,1,Строка.ПродолжительностьПериодаПлановойНаработки) 
				* Строка.КоэффициентИспользованияОборудования * Строка.ПлановаяНаработка;									
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;
	
	ТаблДанных = ТаблицаДанных.Скопировать(,"ОбъектРемонта, Показатель, ДатаРаботыС, ДатаРаботыПо, ПлановыйГрафикРаботы, ФактическаяНаработка"); 
	ТаблДанных.Свернуть("ОбъектРемонта, Показатель, ДатаРаботыС, ДатаРаботыПо, ПлановыйГрафикРаботы","ФактическаяНаработка");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПериодыФактичНаработки.ОбъектРемонта,
	|	ПериодыФактичНаработки.Показатель,
	|	ПериодыФактичНаработки.Наработка * 3600 КАК Наработка,
	|	ВЫБОР
	|		КОГДА ПериодыФактичНаработки.ДатаКон <= ПериодыФактичНаработки.ФактДатаКон
	|				И ПериодыФактичНаработки.ДатаНач >= ПериодыФактичНаработки.ФактДатаНач
	|			ТОГДА РАЗНОСТЬДАТ(ПериодыФактичНаработки.ДатаНач, ПериодыФактичНаработки.ДатаКон, СЕКУНДА)
	|		КОГДА ПериодыФактичНаработки.ДатаКон >= ПериодыФактичНаработки.ФактДатаКон
	|				И ПериодыФактичНаработки.ДатаНач <= ПериодыФактичНаработки.ФактДатаНач
	|			ТОГДА РАЗНОСТЬДАТ(ПериодыФактичНаработки.ФактДатаНач, ПериодыФактичНаработки.ФактДатаКон, СЕКУНДА)
	|		КОГДА ПериодыФактичНаработки.ДатаКон >= ПериодыФактичНаработки.ФактДатаКон
	|				И ПериодыФактичНаработки.ДатаНач >= ПериодыФактичНаработки.ФактДатаНач
	|			ТОГДА РАЗНОСТЬДАТ(ПериодыФактичНаработки.ДатаНач, ПериодыФактичНаработки.ФактДатаКон, СЕКУНДА)
	|		КОГДА ПериодыФактичНаработки.ДатаКон <= ПериодыФактичНаработки.ФактДатаКон
	|				И ПериодыФактичНаработки.ДатаНач <= ПериодыФактичНаработки.ФактДатаНач
	|			ТОГДА РАЗНОСТЬДАТ(ПериодыФактичНаработки.ФактДатаНач, ПериодыФактичНаработки.ДатаКон, СЕКУНДА)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Секунды,
	|	РАЗНОСТЬДАТ(ПериодыФактичНаработки.ФактДатаНач, ПериодыФактичНаработки.ФактДатаКон, СЕКУНДА) КАК СекундыКонецНачало,
	|	ПериодыФактичНаработки.ДатаНач
	|ПОМЕСТИТЬ ТабСекунды
	|ИЗ
	|	ТабНаработки КАК ПериодыФактичНаработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабСекунды.ОбъектРемонта,
	|	ТабСекунды.Показатель,
	|	ВЫБОР
	|		КОГДА НЕ ТабСекунды.Секунды ЕСТЬ NULL 
	|			ТОГДА ТабСекунды.Наработка * ТабСекунды.Секунды / ТабСекунды.СекундыКонецНачало / 3600
	|		ИНАЧЕ ТабСекунды.Наработка / 3600
	|	КОНЕЦ КАК ФактНаработка,
	|	ТабСекунды.ДатаНач
	|ПОМЕСТИТЬ ФактическаяНаработка
	|ИЗ
	|	ТабСекунды КАК ТабСекунды
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабПланНаработки.ОбъектРемонта,
	|	ТабПланНаработки.Показатель,
	|	ТабПланНаработки.ДатаРаботыС,
	|	ТабПланНаработки.ДатаРаботыПо,
	|	ТабПланНаработки.ФактическаяНаработка
	|ПОМЕСТИТЬ ПлановаяНаработка
	|ИЗ
	|	&ТабПланНаработки КАК ТабПланНаработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФактическаяНаработка.ОбъектРемонта,
	|	ФактическаяНаработка.Показатель,
	|	ФактическаяНаработка.ФактНаработка,
	|	ФактическаяНаработка.ДатаНач
	|ПОМЕСТИТЬ ОбъединениеФактПлан
	|ИЗ
	|	ФактическаяНаработка КАК ФактическаяНаработка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланНаработкаСВидами.ОбъектРемонта,
	|	ПланНаработкаСВидами.Показатель,
	|	ПланНаработкаСВидами.ФактическаяНаработка,
	|	ПланНаработкаСВидами.ДатаРаботыС КАК ДатаОкончания
	|ИЗ
	|	ПлановаяНаработка КАК ПланНаработкаСВидами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъединениеФактПлан.ОбъектРемонта КАК ОбъектРемонта,
	|	ОбъединениеФактПлан.Показатель,
	|	СУММА(ОбъединениеФактПлан.ФактНаработка) КАК Наработка
	|ИЗ
	|	ОбъединениеФактПлан КАК ОбъединениеФактПлан
	|
	|СГРУППИРОВАТЬ ПО
	|	ОбъединениеФактПлан.ОбъектРемонта,
	|	ОбъединениеФактПлан.Показатель";
	
	Запрос.УстановитьПараметр("ТабПланНаработки", ТаблДанных);
	Запрос.УстановитьПараметр("ДатаСреза",ТекДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МенеджерВТ.Закрыть();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Наработка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРассчитываемыйКоэффициент(ВозрастОборудования, Владелец) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностей.Ссылка,
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностей.Коэффициент,
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностей.ВозрастОборудования КАК ВозрастОборудования
	|ИЗ
	|	Справочник.торо_ЗначенияКоэффициентовРемонтныхОсобенностей КАК торо_ЗначенияКоэффициентовРемонтныхОсобенностей
	|ГДЕ
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностей.Владелец = &Владелец
	|	И торо_ЗначенияКоэффициентовРемонтныхОсобенностей.ВозрастОборудования >= &ВозрастОборудования
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВозрастОборудования";
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("ВозрастОборудования", ВозрастОборудования);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("ЗначениеКоэффициента, Коэффициент",Выборка.Ссылка, Выборка.Коэффициент);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВычислитьВремяРаботыОборудованияСУчетомГрафика(Ссылка, СчитатьВозрастОтДатыИзготовления) Экспорт
	
	Перем МинГод;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	МассивГрафиков = Новый Массив;
	МассивГрафиков.Добавить(Ссылка.ПлановыйГрафикРаботы);
	Если СчитатьВозрастОтДатыИзготовления Тогда
		НачГод = Год(Ссылка.ДатаВыпуска);
	Иначе
		НачГод = Год(Ссылка.ДатаВводаВЭксплуатацию);
	КонецЕсли;
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачГод, ТекущаяДата());
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика) КАК ГодРаботы,
	|	СУММА(РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяНачала, ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ОсновноеЗначение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТРасписанияРаботы.ДатаГрафика) КАК КоличествоРабочихДней
	|ПОМЕСТИТЬ ВТРасписанияРаботыИзм
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписанияРаботыИзм.ГодРаботы,
	|	ВТРасписанияРаботыИзм.ОсновноеЗначение,
	|	ВТРасписанияРаботыИзм.КоличествоРабочихДней
	|ИЗ
	|	ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
	|ГДЕ
	|	ВТРасписанияРаботыИзм.ОсновноеЗначение > 0";
	
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	КолРабДней = 0;
	
	Для каждого СтрокаТаб Из ТабРезультат Цикл
		
		КолРабДней = КолРабДней + СтрокаТаб.КоличествоРабочихДней;
		
	КонецЦикла;
	
	Если ТабРезультат.Количество() > 0 Тогда
		МинГод = ТабРезультат[0].ГодРаботы;
	КонецЕсли;
	
	Если МинГод = Неопределено Тогда
		ВозрастОборудования = Год(ТекущаяДата()) - Год(НачГод) + 1;
	Иначе
		ВозрастОборудования = МинГод - НачГод + КолРабДней / 365;
	КонецЕсли;
	
	Возврат ВозрастОборудования;
	
КонецФункции

Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка)
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	ДоступныеЗначения = Новый СписокЗначений;
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		Если Параметры.Отбор.Свойство("Документ") И ЗначениеЗаполнено(Параметры.Отбор.Документ) Тогда
			
			Документ = Параметры.Отбор.Документ;
			
			ДоступныеЗначения = Новый СписокЗначений;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
			|ИЗ
			|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
			|ГДЕ
			|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				Если Не ((Документ = "Состояния объектов ремонта"
					ИЛИ Документ = "Учет наработки оборудования"
					ИЛИ Документ = "Ввод начальных данных")
					И Выборка.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету) Тогда
					
					ДоступныеЗначения.Добавить(Выборка.СтатусОРВУчете);
					
				КонецЕсли;
				
				
			КонецЦикла;
			Если Документ = "Выявленные дефекты_ОтказавшийЭлемент" Тогда
				
				СтруктураИерархии = Параметры.Отбор.ТекСтруктураИерархии;
				ОбъектРемонта     = Параметры.Отбор.ОбъектРемонта;
				
				Запрос = Новый Запрос;
				
				Если СтруктураИерархии.ИзменяетсяДокументами Тогда
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
					|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
					|ПОМЕСТИТЬ СписокОбъектовРемонта
					|ИЗ
					|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
					|			,
					|			СтруктураИерархии = &СтруктураИерархии
					|				И РодительИерархии = &РодительИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
					|ГДЕ
					|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
					|";
					
				Иначе
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
					|	торо_ИерархическиеСтруктурыОР.РодительИерархии
					|ПОМЕСТИТЬ СписокОбъектовРемонта
					
					|ИЗ
					|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
					|";
				КонецЕсли;
				
				Запрос.Текст = Запрос.Текст + ";
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	СписокОбъектовРемонта.ОбъектИерархии,
				|	СписокОбъектовРемонта.РодительИерархии,
				|	ВЫБОР
				|		КОГДА НЕ СписокОбъектовРемонта.ОбъектИерархии.ЭтоГруппа
				|			ТОГДА ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету))
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПустаяСсылка)
				|	КОНЕЦ КАК СтатусВУчете
				|ИЗ
				|	СписокОбъектовРемонта КАК СписокОбъектовРемонта
				|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|			торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта КАК ОбъектРемонта,
				|			МАКСИМУМ(торо_СтатусыОбъектовРемонтаВУчете.Период) КАК Период
				|		ИЗ
				|			РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
				|		ГДЕ
				|			торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта В
				|					(ВЫБРАТЬ
				|						СписокОбъектовРемонта.ОбъектИерархии КАК ОбъектРемонта
				|					ИЗ
				|						СписокОбъектовРемонта КАК СписокОбъектовРемонта)
				|		
				|		СГРУППИРОВАТЬ ПО
				|			торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта) КАК ВложенныйЗапрос
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
				|			ПО ВложенныйЗапрос.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
				|				И ВложенныйЗапрос.Период = торо_СтатусыОбъектовРемонтаВУчете.Период
				|		ПО СписокОбъектовРемонта.ОбъектИерархии = ВложенныйЗапрос.ОбъектРемонта";
				
				Запрос.УстановитьПараметр("СтруктураИерархии",СтруктураИерархии);
				
				ТЗРезультат = Запрос.Выполнить().Выгрузить();
				ДанныеВыбора = Новый СписокЗначений;
				
				ЗаполнитьДанныеВыбора(ОбъектРемонта, ДанныеВыбора, ТЗРезультат, ДоступныеЗначения, Ложь, Параметры.СтрокаПоиска,ФОИспользоватьДокументыЖЦОборудования);
				
				СтандартнаяОбработка = Ложь;
			Иначе	
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_ОбъектыРемонта.Ссылка КАК Ссылка,
				|	торо_ОбъектыРемонта.Код КАК Код
				|ПОМЕСТИТЬ ОбъектыРемонта
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ
				|	торо_ОбъектыРемонта.Наименование ПОДОБНО &Наименование
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МАКСИМУМ(торо_СтатусыОбъектовРемонтаВУчете.Период) КАК Период,
				|	ОбъектыРемонта.Ссылка КАК Ссылка
				|ПОМЕСТИТЬ ПоследниеДатыСтатусовПоОбъектамРемонта
				|ИЗ
				|	ОбъектыРемонта КАК ОбъектыРемонта
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
				|		ПО ОбъектыРемонта.Ссылка = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
				|
				|СГРУППИРОВАТЬ ПО
				|	ОбъектыРемонта.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ОбъектыРемонта.Ссылка,
				|	ОбъектыРемонта.Код
				|ИЗ
				|	ОбъектыРемонта КАК ОбъектыРемонта
				|		ЛЕВОЕ СОЕДИНЕНИЕ ПоследниеДатыСтатусовПоОбъектамРемонта КАК ПоследниеДатыСтатусовПоОбъектамРемонта
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
				|			ПО ПоследниеДатыСтатусовПоОбъектамРемонта.Период = торо_СтатусыОбъектовРемонтаВУчете.Период
				|				И ПоследниеДатыСтатусовПоОбъектамРемонта.Ссылка = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
				|		ПО ОбъектыРемонта.Ссылка = ПоследниеДатыСтатусовПоОбъектамРемонта.Ссылка
				|ГДЕ
				|	ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВучете.НеПринятоКУчету)) В (&СтатусОР)";
				Запрос.УстановитьПараметр("Наименование", "%"+Параметры.СтрокаПоиска+"%");
				Запрос.УстановитьПараметр("СтатусОР", ДоступныеЗначения);
				Результат = Запрос.Выполнить();
				Выборка = Результат.Выбрать();
				
				ДанныеВыбора = Новый СписокЗначений;
				
				Пока Выборка.Следующий() Цикл
					
					ДанныеВыбора.Добавить(Выборка.Ссылка,Строка(Выборка.Ссылка) + " (" + Строка(Выборка.Код) + ")");
					
				КонецЦикла; 				
				СтандартнаяОбработка = Ложь;
			КонецЕсли; 
			
		КонецЕсли;
	Иначе
		Если Параметры.Отбор.Свойство("Документ") И ЗначениеЗаполнено(Параметры.Отбор.Документ) Тогда
			
			Документ = Параметры.Отбор.Документ;
			
			Если Документ = "Выявленные дефекты_ОтказавшийЭлемент" Тогда
				
				СтруктураИерархии = Параметры.Отбор.ТекСтруктураИерархии;
				ОбъектРемонта     = Параметры.Отбор.ОбъектРемонта;
				
				Запрос = Новый Запрос;
				
				Если СтруктураИерархии.ИзменяетсяДокументами Тогда
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
					|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
					
					|ИЗ
					|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
					|			,
					|			СтруктураИерархии = &СтруктураИерархии
					|				И РодительИерархии = &РодительИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
					|ГДЕ
					|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
					|";
					
				Иначе
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
					|	торо_ИерархическиеСтруктурыОР.РодительИерархии
					
					
					|ИЗ
					|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
					|";
				КонецЕсли;
				
				ТЗРезультат = Запрос.Выполнить().Выгрузить();
				ДанныеВыбора = Новый СписокЗначений;
				
				ЗаполнитьДанныеВыбора(ОбъектРемонта, ДанныеВыбора, ТЗРезультат, ДоступныеЗначения, Ложь, Параметры.СтрокаПоиска,ФОИспользоватьДокументыЖЦОборудования);
				
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьДанныеВыбора(ОбъектРемонта, ДанныеВыбора, ТЗРезультат, СписокДоступныхСтатусов, СамОбъектДобавлен, ПодстрокаПоиска,ФОИспользоватьДокументыЖЦОборудования)
	
	Если НЕ СамОбъектДобавлен Тогда
		ПараметрыПоиска = Новый Структура("ОбъектИерархии", ОбъектРемонта);
		МассивСтрок = ТЗРезультат.НайтиСтроки(ПараметрыПоиска);
		Если МассивСтрок.Количество() > 0 Тогда
			Если Не МассивСтрок[0].ОбъектИерархии.ЭтоГруппа
				И Найти(НРег(Строка(МассивСтрок[0].ОбъектИерархии)), НРег(ПодстрокаПоиска)) > 0 
				И (Не ФОИспользоватьДокументыЖЦОборудования ИЛИ Не СписокДоступныхСтатусов.НайтиПоЗначению(МассивСтрок[0].СтатусВУчете) = Неопределено) Тогда
					ДанныеВыбора.Добавить(МассивСтрок[0].ОбъектИерархии,Строка(МассивСтрок[0].ОбъектИерархии) + " (" + Строка(МассивСтрок[0].ОбъектИерархии.Код) + ")");
			КонецЕсли; 
				 
		КонецЕсли; 
		
	КонецЕсли; 
	
	ПараметрыПоиска = Новый Структура("РодительИерархии", ОбъектРемонта);
	МассивСтрок = ТЗРезультат.НайтиСтроки(ПараметрыПоиска);
	Если МассивСтрок.Количество() > 0 Тогда
		Для каждого Элемент Из МассивСтрок Цикл
			Если Не Элемент.ОбъектИерархии.ЭтоГруппа
				И Найти(НРег(Строка(Элемент.ОбъектИерархии)), НРег(ПодстрокаПоиска)) > 0 
				И (Не ФОИспользоватьДокументыЖЦОборудования ИЛИ Не СписокДоступныхСтатусов.НайтиПоЗначению(Элемент.СтатусВУчете) = Неопределено) Тогда
				ДанныеВыбора.Добавить(Элемент.ОбъектИерархии,Строка(Элемент.ОбъектИерархии) + " (" + Строка(Элемент.ОбъектИерархии.Код) + ")");
				ЗаполнитьДанныеВыбора(Элемент.ОбъектИерархии,ДанныеВыбора,ТЗРезультат,СписокДоступныхСтатусов,Истина,ПодстрокаПоиска,ФОИспользоватьДокументыЖЦОборудования);
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры

Процедура ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы) Экспорт
	
	Если (СтруктураПараметровФормы.ИмяФормы = "Справочник.торо_ОбъектыРемонта.Форма.ФормаВыбора"	
		ИЛИ СтруктураПараметровФормы.ИмяФормы = "Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР"
		ИЛИ СтруктураПараметровФормы.ИмяФормы = "Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовИЦепочекДляПланаГрафикаППР")
		И ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования") Тогда
		
		Если Не СтруктураПараметровФормы.Свойство("СписокСтатусов") 
			ИЛИ СтруктураПараметровФормы.СписокСтатусов = Неопределено Тогда
			
			ВидПодбора = "";
			Если СтруктураПараметровФормы.Свойство("ВидПодбора") Тогда
				ВидПодбора = СтруктураПараметровФормы.ВидПодбора;
			КонецЕсли; 
			
			СписокСтатусов = Новый СписокЗначений;
			ПолучитьСписокСтатусов(СписокСтатусов,ВидПодбора);
			
			СтруктураПараметровФормы.Вставить("СписокСтатусов",СписокСтатусов);
			
		КонецЕсли; 
		
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстДляСозданияВТ1%", "ПОМЕСТИТЬ СписокОбъектовРемонта"); 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстДляСозданияВТ2%", ""); 
		
		Запрос.Текст = Запрос.Текст + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ %РАЗЛИЧНЫЕ%
		|	СписокОбъектовРемонта.*,
		|	ВЫБОР
		|		КОГДА НЕ СписокОбъектовРемонта.ОбъектИерархии.ЭтоГруппа
		|			ТОГДА ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету))
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПустаяСсылка)
		|	КОНЕЦ КАК СтатусВУчете
		|ИЗ
		|	СписокОбъектовРемонта КАК СписокОбъектовРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта КАК ОбъектРемонта,
		|			МАКСИМУМ(торо_СтатусыОбъектовРемонтаВУчете.Период) КАК Период
		|		ИЗ
		|			РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
		|		ГДЕ
		|			торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта В
		|					(ВЫБРАТЬ
		|						СписокОбъектовРемонта.ОбъектИерархии КАК ОбъектРемонта
		|					ИЗ
		|						СписокОбъектовРемонта КАК СписокОбъектовРемонта)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта) КАК ВложенныйЗапрос
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
		|			ПО ВложенныйЗапрос.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
		|				И ВложенныйЗапрос.Период = торо_СтатусыОбъектовРемонтаВУчете.Период
		|		ПО СписокОбъектовРемонта.ОбъектИерархии = ВложенныйЗапрос.ОбъектРемонта
		|		%ТекстДляСоединенияСРегистромПараметровНаработки%
		|ГДЕ
		|	(ВЫБОР
		|				КОГДА НЕ СписокОбъектовРемонта.ОбъектИерархии.ЭтоГруппа
		|					ТОГДА ЕСТЬNULL(торо_СтатусыОбъектовРемонтаВУчете.СтатусОР, ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.НеПринятоКУчету))
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПустаяСсылка)
		|			КОНЕЦ В (&СписокСтатусов)
		|			ИЛИ СписокОбъектовРемонта.ОбъектИерархии.ЭтоГруппа)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СписокОбъектовРемонта.РеквизитДопУпорядочиванияОР";
		
		Если СтруктураПараметровФормы.Свойство("ВидПодбора") И СтруктураПараметровФормы.ВидПодбора = "ВидПараметровНаработки" Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстДляСоединенияСРегистромПараметровНаработки%", 
									"ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
									|	ПО СписокОбъектовРемонта.ОбъектИерархии = торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РАЗЛИЧНЫЕ%","РАЗЛИЧНЫЕ");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстДляСоединенияСРегистромПараметровНаработки%", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "%РАЗЛИЧНЫЕ%","");
		КонецЕсли;
		
		
		Запрос.УстановитьПараметр("СписокСтатусов",СтруктураПараметровФормы.СписокСтатусов);

	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстДляСозданияВТ1%", ", NULL КАК СтатусВУчете");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ТекстДляСозданияВТ2%", ", NULL");
		Запрос.Текст = Запрос.Текст + "	
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочиванияОР";
	КонецЕсли; 

КонецПроцедуры

Процедура ДополнитьТекстИПараметрыЗапросаДляНаложенияОтборов(Запрос, СтруктураПараметровФормы, БезГде = Ложь) Экспорт
		
	ДобавляемоеУсловие = "";
	Если СтруктураПараметровФормы.Свойство("Организация") И ЗначениеЗаполнено(СтруктураПараметровФормы.Организация) Тогда
		ДобавляемоеУсловие = "торо_ОбъектыРемонта.Организация = &Организация";
		Запрос.УстановитьПараметр("Организация", СтруктураПараметровФормы.Организация);
	КонецЕсли;
	
	Если СтруктураПараметровФормы.Свойство("Подразделение") И ЗначениеЗаполнено(СтруктураПараметровФормы.Подразделение)Тогда
		Если ДобавляемоеУсловие <> "" Тогда
			ДобавляемоеУсловие = ДобавляемоеУсловие + " и ";
		КонецЕсли;
		ДобавляемоеУсловие = ДобавляемоеУсловие + "торо_ОбъектыРемонта.Подразделение В ИЕРАРХИИ (&Подразделение)";
		Запрос.УстановитьПараметр("Подразделение", СтруктураПараметровФормы.Подразделение);
	КонецЕсли;
	
	Если СтруктураПараметровФормы.Свойство("НеУчаствуетВПланировании") И СтруктураПараметровФормы.НеУчаствуетВПланировании = Истина Тогда
		Если ДобавляемоеУсловие <> "" Тогда
			ДобавляемоеУсловие = ДобавляемоеУсловие + " и ";
		КонецЕсли;
		ДобавляемоеУсловие = ДобавляемоеУсловие + "торо_ОбъектыРемонта.НеУчаствуетВПланировании = Ложь";
	КонецЕсли;
	
	Если ДобавляемоеУсловие <> "" Тогда
		Если БезГде тогда
			ДобавляемоеУсловие = "и торо_ОбъектыРемонта.ЭтоГруппа ИЛИ ( " + ДобавляемоеУсловие + ")"
		Иначе
			ДобавляемоеУсловие = "ГДЕ торо_ОбъектыРемонта.ЭтоГруппа ИЛИ ( " + ДобавляемоеУсловие + ")"
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%УсловиеДляОтбора%", ДобавляемоеУсловие);
		
КонецПроцедуры

Процедура ПолучитьСписокСтатусов(СписокСтатусов,ВидПодбора) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОтображатьНепринятые = (НЕ ВидПодбора = "ВидПараметровНаработки"
						  И НЕ ВидПодбора = "НастройкаПодбораВводНачальныхДанныхСоВременем"
						  И НЕ ВидПодбора = "ВводНачальныхДанных");
	
	Пока Выборка.Следующий() Цикл
		Если ОтображатьНепринятые Тогда
			СписокСтатусов.Добавить(Выборка.СтатусОРВУчете);
		ИначеЕсли Не Выборка.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету Тогда
			СписокСтатусов.Добавить(Выборка.СтатусОРВУчете);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьЗацикливаниеЗависимыхОстановочныхРек(Основные, ОР, ВР, Основной, ТабДляПроверки)
	
	Если Основные.Количество() > 0 Тогда
		Запрос = Новый Запрос;
		ТекстЗапроса = "ВЫБРАТЬ
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйОР% КАК %ОтборПоОР%,
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйВР% КАК %ОтборПоВР%
		|ПОМЕСТИТЬ Основные
		|ИЗ
		|	&Основные КАК торо_РемонтыОсновногоЗависимогоОборудования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйОР%,
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйВР%
		|ИЗ
		|	Основные КАК Основные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтыОсновногоЗависимогоОборудования КАК торо_РемонтыОсновногоЗависимогоОборудования
		|		ПО Основные.%ОтборПоОР% = торо_РемонтыОсновногоЗависимогоОборудования.%ОтборПоОР%
		|			И Основные.%ОтборПоВР% = торо_РемонтыОсновногоЗависимогоОборудования.%ОтборПоВР%
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйОР%,
		|	торо_РемонтыОсновногоЗависимогоОборудования.%ВыбираемыйВР%
		|ИЗ
		|	Основные КАК Основные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РемонтыОсновногоЗависимогоОборудования КАК торо_РемонтыОсновногоЗависимогоОборудования
		|		ПО Основные.%ОтборПоОР% = торо_РемонтыОсновногоЗависимогоОборудования.%ОтборПоОР%
		|			И (торо_РемонтыОсновногоЗависимогоОборудования.%ОтборПоВР% = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка)
		|				ИЛИ Основные.%ОтборПоВР% = ЗНАЧЕНИЕ(Справочник.торо_ВидыРемонтов.ПустаяСсылка))";
		Запрос.УстановитьПараметр("Основные", Основные);
		
		Если Основной Тогда
			ВыбираемыйОР 	= "ОсновнойОбъектРемонта";
			ВыбираемыйВР 	= "ВидРемонтаОсновногоОбъекта";
			ОтборПоОР		= "СвязанныйОбъектРемонта";
			ОтборПоВР		= "ВидРемонтаЗависимогоОбъекта";
		Иначе
			ВыбираемыйОР 	= "СвязанныйОбъектРемонта";
			ВыбираемыйВР 	= "ВидРемонтаЗависимогоОбъекта";
			ОтборПоОР		= "ОсновнойОбъектРемонта";
			ОтборПоВР		= "ВидРемонтаОсновногоОбъекта";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыбираемыйОР%", ВыбираемыйОР);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ВыбираемыйВР%", ВыбираемыйВР);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоОР%", ОтборПоОР);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ОтборПоВР%", ОтборПоВР);
		
		Запрос.Текст = ТекстЗапроса;
		Зависимые = Запрос.Выполнить().Выгрузить();
		
		Если Зависимые.НайтиСтроки(Новый Структура(ВыбираемыйОР + ", " + ВыбираемыйВР, ОР, ВР)).Количество() > 0
			Или ТабДляПроверки.НайтиСтроки(Новый Структура("ОбъектРемонта, " + ВыбираемыйВР, ОР, ВР)).Количество() > 0 Тогда
			Возврат Истина;
		Иначе
			Для Каждого Строка Из Зависимые Цикл
				НС = Основные.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Строка);
			КонецЦикла; 
			Возврат ПроверитьЗацикливаниеЗависимыхОстановочныхРек(Зависимые, ОР, ВР, Основной, ТабДляПроверки);
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#Область РаботаСДеревомОР

Функция ЗаполнитьОсновноеВДеревеСервере(СтрокаДерева,СостояниеДереваОР = Неопределено,СтруктураПараметровИерархии,СтруктураПараметровФормы) Экспорт
	
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
		
		РодительИерархии = Справочники[СтруктураПараметровИерархии.ТипРеквизитаОР].ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
		|	торо_ОбъектыРемонта.ПометкаУдаления,
		|	торо_ОбъектыРемонта.Код,
		|	торо_ОбъектыРемонта.ИнвентарныйНомер,
		|	торо_ОбъектыРемонта.ЗаводскойНомер,
		|	торо_ОбъектыРемонта.ТехНомер,
		|	ВЫБОР
        |		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
        |			ТОГДА ВЫБОР
        |					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
        |						ТОГДА 6
        |					ИНАЧЕ 5
        |				КОНЕЦ
        |		ИНАЧЕ ВЫБОР
        |				КОГДА торо_ОбъектыРемонта.ПометкаУдаления
        |					ТОГДА 1
        |				ИНАЧЕ 0
        |			КОНЕЦ
        |	КОНЕЦ КАК ИндексКартинки,
		|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР,0) КАК РеквизитДопУпорядочиванияОР
		|	%ТекстДляСозданияВТ1%
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		|		ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
		|		И торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии
		|ГДЕ
		|	торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " = ЗНАЧЕНИЕ(Справочник." + СтруктураПараметровИерархии.ТипРеквизитаОР + ".ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("СтруктураИерархии",СтруктураПараметровИерархии.СтруктураИерархии);
		Если ЗначениеЗаполнено(СтруктураПараметровФормы.ОтборОбъектРемонта) Тогда
			РодительИерархии = СтруктураПараметровФормы.ОтборОбъектРемонта;
		КонецЕсли;
		
		ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			НовСтрокаДерева.Ссылка = "<>";
			НовСтрокаДерева.РодительИерархии = РодительИерархии;
			НовСтрокаДерева.ПометкаУдаления = ЛОЖЬ;
			НовСтрокаДерева.Картинка = 9;
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НС = НовСтрокаДерева.Строки.Добавить();
				НС.Ссылка 			= Выборка.ОбъектИерархии;
				НС.РодительИерархии = НовСтрокаДерева.Ссылка;
				НС.ПометкаУдаления  = Выборка.ПометкаУдаления;
				НС.Картинка		    = Выборка.ИндексКартинки;
				// заполнение данных в дереве, для использования в списке
				НС.Код 				= Выборка.Код;
				НС.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
				НС.ЗаводскойНомер 	= Выборка.ЗаводскойНомер;
				НС.ТехНомер 		= Выборка.ТехНомер;
				
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметровИерархии.ИерархическийСправочник Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СправочникСсылка.Ссылка КАК Ссылка,
			|	СправочникСсылка.Родитель
			|ПОМЕСТИТЬ ТабПервогоУровня
			|ИЗ
			|	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК СправочникСсылка
			|ГДЕ
			|	СправочникСсылка.Родитель = ЗНАЧЕНИЕ(Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+".ПустаяСсылка)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабПервогоУровня.Ссылка,
			|	ТабПервогоУровня.Родитель
			|ПОМЕСТИТЬ ТабИерархии
			|ИЗ
			|	ТабПервогоУровня КАК ТабПервогоУровня
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СправочникСсылка.Ссылка,
			|	СправочникСсылка.Родитель
			|ИЗ
			|	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК СправочникСсылка
			|ГДЕ
			|	СправочникСсылка.Родитель В
			|			(ВЫБРАТЬ
			|				ТабПервогоУровня.Ссылка
			|			ИЗ
			|				ТабПервогоУровня КАК ТабПервогоУровня)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТабИерархии.Ссылка КАК РеквизитОРСсылка,
			|	ТабИерархии.Родитель КАК РодительРеквизитОРСсылка,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.Ссылка,ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)) КАК ОбъектИерархии,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.Код,"""") КАК Код,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ИнвентарныйНомер,"""") КАК ИнвентарныйНомер,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ЗаводскойНомер,"""") КАК ЗаводскойНомер,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ТехНомер,"""") КАК ТехНомер,
			|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочиванияОР,
			|	ЕСТЬNULL(торо_ОбъектыРемонта.ПометкаУдаления, Ложь) КАК ПометкаУдаления
			|	%ТекстДляСозданияВТ1%
			|ИЗ
			|	ТабИерархии КАК ТабИерархии
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|			ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|				И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
			|		ПО ТабИерархии.Ссылка = торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР;
			


			
			Запрос.УстановитьПараметр("СтруктураИерархии",СтруктураПараметровИерархии.СтруктураИерархии);
			ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
			Если ЗначениеЗаполнено(СтруктураПараметровФормы.ОтборОбъектРемонта) Тогда
				РодительИерархии = СтруктураПараметровФормы.ОтборОбъектРемонта;
			КонецЕсли;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ТабИерархии = РезультатЗапроса.Выгрузить();
			
			СтруктураПоиска = Новый Структура("РодительРеквизитОРСсылка", РодительИерархии);
			МассивКорневыхСтрок = ТабИерархии.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого СтрокаКорневая ИЗ МассивКорневыхСтрок Цикл
				
				Если СтрокаДерева.Строки.Найти(СтрокаКорневая.РеквизитОРСсылка,"Ссылка") <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
				НовСтрокаДерева.Ссылка = СтрокаКорневая.РеквизитОРСсылка;
				НовСтрокаДерева.РодительИерархии = СтрокаКорневая.РодительРеквизитОРСсылка;
				НовСтрокаДерева.ПометкаУдаления = СтрокаКорневая.РеквизитОРСсылка.ПометкаУдаления;
				НовСтрокаДерева.Картинка = ?(НовСтрокаДерева.ПометкаУдаления,10,9);
				
				МассивСтрокПервогоУровня = ТабИерархии.НайтиСтроки(Новый Структура("РодительРеквизитОРСсылка",НовСтрокаДерева.Ссылка));
				
				Для Каждого СтрокаПервогоУровня Из МассивСтрокПервогоУровня Цикл
					
					НовНовСтрокаДерева = НовСтрокаДерева.Строки.Добавить();
					НовНовСтрокаДерева.Ссылка 			= СтрокаПервогоУровня.РеквизитОРСсылка;
					НовНовСтрокаДерева.РодительИерархии	= НовСтрокаДерева.Ссылка;
					НовНовСтрокаДерева.ПометкаУдаления 	= СтрокаПервогоУровня.РеквизитОРСсылка.ПометкаУдаления;
					НовНовСтрокаДерева.Картинка 		= ?(НовНовСтрокаДерева.ПометкаУдаления,10,9);
					
				КонецЦикла;
				
				МассивСтрокПервогоУровня = ТабИерархии.НайтиСтроки(Новый Структура("РеквизитОРСсылка",НовСтрокаДерева.Ссылка));
				
				Для Каждого СтрокаПервогоУровня Из МассивСтрокПервогоУровня Цикл
					
					Если СтрокаПервогоУровня.ОбъектИерархии = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
						Продолжить;
					КонецЕсли;
					
					НовНовСтрокаДерева = НовСтрокаДерева.Строки.Добавить();
					НовНовСтрокаДерева.Ссылка 			= СтрокаПервогоУровня.ОбъектИерархии;
					НовНовСтрокаДерева.РодительИерархии = НовСтрокаДерева.Ссылка;
					НовНовСтрокаДерева.ПометкаУдаления 	= СтрокаПервогоУровня.ПометкаУдаления;
					НовНовСтрокаДерева.Картинка 		= ?(НовНовСтрокаДерева.ПометкаУдаления,1,0);
					НовНовСтрокаДерева.Код 				= СтрокаПервогоУровня.Код;
					НовНовСтрокаДерева.ИнвентарныйНомер = СтрокаПервогоУровня.ИнвентарныйНомер;
					НовНовСтрокаДерева.ЗаводскойНомер 	= СтрокаПервогоУровня.ЗаводскойНомер;
					НовНовСтрокаДерева.ТехНомер 		= СтрокаПервогоУровня.ТехНомер;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СправочникСсылка.Ссылка КАК Ссылка,
			|	СправочникСсылка.ПометкаУдаления,
			|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
			|	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаленияОР,
			|	торо_ОбъектыРемонта.ТехНомер КАК ТехНомер,
			|	торо_ОбъектыРемонта.Код КАК Код,
			|	торо_ОбъектыРемонта.ИнвентарныйНомер КАК ИнвентарныйНомер,
            |	торо_ОбъектыРемонта.ЗаводскойНомер КАК ЗаводскойНомер,
            |	торо_ОбъектыРемонта.ПометкаУдаления КАК ПометкаУдаления,
			|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
			|	%ТекстДляСозданияВТ1%
			|ИЗ
			|	Справочник." + СтруктураПараметровИерархии.ТипРеквизитаОР + " КАК СправочникСсылка
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			|			ПО торо_ОбъектыРемонта.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
			|		ПО (торо_ОбъектыРемонта." + СтруктураПараметровИерархии.РеквизитОР + " = СправочникСсылка.Ссылка)
			|ГДЕ
			|	торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии";


			
			Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.СтруктураИерархии);
			ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
			Запрос.Текст = Запрос.Текст + "
			|ИТОГИ ПО
			|	Ссылка";
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаПоСсылкеСправочника = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоСсылкеСправочника.Следующий() Цикл
				
				НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
				НовСтрокаДерева.Ссылка = ВыборкаПоСсылкеСправочника.Ссылка;
				НовСтрокаДерева.ПометкаУдаления = ВыборкаПоСсылкеСправочника.ПометкаУдаления;
				НовСтрокаДерева.Картинка = ?(НовСтрокаДерева.ПометкаУдаления,10,9);
				
				ВыборкаДетЗаписи = ВыборкаПоСсылкеСправочника.Выбрать();
				
				Пока ВыборкаДетЗаписи.Следующий() Цикл
					
					НС = НовСтрокаДерева.Строки.Добавить();
					НС.Ссылка 			= ВыборкаДетЗаписи.ОбъектИерархии;
					НС.ПометкаУдаления 	= ВыборкаДетЗаписи.ПометкаУдаленияОР;
					НС.Картинка 		= ?(НС.ПометкаУдаления,1,0);
					НС.Код 				= ВыборкаДетЗаписи.Код;
					НС.ИнвентарныйНомер = ВыборкаДетЗаписи.ИнвентарныйНомер;
					НС.ЗаводскойНомер 	= ВыборкаДетЗаписи.ЗаводскойНомер;
					НС.ТехНомер 		= ВыборкаДетЗаписи.ТехНомер;
					НС.РеквизитДопУпорядочивания = ВыборкаДетЗаписи.РеквизитДопУпорядочиванияОР;
					
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		РодительИерархии = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
		
		Если СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			               |ПОМЕСТИТЬ РасположениеОР
			               |ИЗ
			               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_ИерархическиеСтруктурыОР
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ
			               |	И торо_ИерархическиеСтруктурыОР.РодительИерархии В(&РодительИерархии)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
			               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии,
			               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
			               |ПОМЕСТИТЬ ТабБезПорядка
			               |ИЗ
			               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			               |ГДЕ
			               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии В
			               |			(ВЫБРАТЬ
			               |				РасположениеОР.ОбъектИерархии
			               |			ИЗ
			               |				РасположениеОР КАК РасположениеОР)
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	РасположениеОР.ОбъектИерархии,
			               |	РасположениеОР.СтруктураИерархии,
			               |	РасположениеОР.РодительИерархии
			               |ИЗ
			               |	РасположениеОР КАК РасположениеОР
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТабБезПорядка.ОбъектИерархии,
			               |	ТабБезПорядка.СтруктураИерархии,
			               |	ТабБезПорядка.РодительИерархии,
			               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР,
			               |	ВЫБОР
			               |		КОГДА ТабБезПорядка.ОбъектИерархии ССЫЛКА Справочник.торо_ОбъектыРемонта
			               |			ТОГДА ВЫБОР
			               |					КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			               |						ТОГДА ВЫБОР
			               |								КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |									ТОГДА 6
			               |								ИНАЧЕ 5
			               |							КОНЕЦ
			               |					ИНАЧЕ ВЫБОР
			               |							КОГДА НЕ ЕСТЬNULL(торо_ОбъектыРемонтаГруппы.ОбъектГруппа,ЛОЖЬ)
			               |								ТОГДА ВЫБОР
			               |										КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |											ТОГДА 1
			               |										ИНАЧЕ 0
			               |									КОНЕЦ
			               |							ИНАЧЕ ВЫБОР
			               |									КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |										ТОГДА 3
			               |									ИНАЧЕ 2
			               |								КОНЕЦ
			               |						КОНЕЦ
			               |				КОНЕЦ
			               |		ИНАЧЕ 4
			               |	КОНЕЦ КАК ИндексКартинки,
			               |	торо_ОбъектыРемонта.Код,
			               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
			               |	торо_ОбъектыРемонта.ЗаводскойНомер,
			               |	торо_ОбъектыРемонта.ТехНомер,
						   |	торо_ОбъектыРемонта.ПометкаУдаления
						   |	%ТекстДляСозданияВТ1%
			               |ИЗ
			               |	ТабБезПорядка КАК ТабБезПорядка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
			               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонтаГруппы.ОбъектИерархии
			               |			И ТабБезПорядка.СтруктураИерархии = торо_ОбъектыРемонтаГруппы.СтруктураИерархии";
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			               |ПОМЕСТИТЬ РасположениеОР
			               |ИЗ
			               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			               |	И торо_ИерархическиеСтруктурыОР.РодительИерархии В(&РодительИерархии)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
						   |ПОМЕСТИТЬ ТабБезПорядка
			               |ИЗ
			               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии В
			               |			(ВЫБРАТЬ
			               |				РасположениеОР.ОбъектИерархии
			               |			ИЗ
			               |				РасположениеОР КАК РасположениеОР)
			               |	И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			               |
			               |ОБЪЕДИНИТЬ
			               |
			               |ВЫБРАТЬ
			               |	РасположениеОР.ОбъектИерархии,
			               |	РасположениеОР.СтруктураИерархии,
			               |	РасположениеОР.РодительИерархии
			               |ИЗ
			               |	РасположениеОР КАК РасположениеОР
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТабБезПорядка.ОбъектИерархии,
			               |	ТабБезПорядка.СтруктураИерархии,
			               |	ТабБезПорядка.РодительИерархии,
			               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР,
			               |	ВЫБОР
			               |		КОГДА ТабБезПорядка.ОбъектИерархии ССЫЛКА Справочник.торо_ОбъектыРемонта
			               |			ТОГДА ВЫБОР
			               |					КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			               |						ТОГДА ВЫБОР
			               |								КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |									ТОГДА 6
			               |								ИНАЧЕ 5
			               |							КОНЕЦ
			               |					ИНАЧЕ ВЫБОР
			               |							КОГДА НЕ ЕСТЬNULL(торо_ОбъектыРемонтаГруппы.ОбъектГруппа, ЛОЖЬ)
			               |								ТОГДА ВЫБОР
			               |										КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |											ТОГДА 1
			               |										ИНАЧЕ 0
			               |									КОНЕЦ
			               |							ИНАЧЕ ВЫБОР
			               |									КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |										ТОГДА 3
			               |									ИНАЧЕ 2
			               |								КОНЕЦ
			               |						КОНЕЦ
			               |				КОНЕЦ
			               |		ИНАЧЕ 4
			               |	КОНЕЦ КАК ИндексКартинки,
			               |	торо_ОбъектыРемонта.Код,
			               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
			               |	торо_ОбъектыРемонта.ЗаводскойНомер,
			               |	торо_ОбъектыРемонта.ТехНомер,
						   |	торо_ОбъектыРемонта.ПометкаУдаления
						   |	%ТекстДляСозданияВТ1%
			               |ИЗ
			               |	ТабБезПорядка КАК ТабБезПорядка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
			               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
			               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ОбъектыРемонтаГруппы.ОбъектИерархии
			               |			И ТабБезПорядка.СтруктураИерархии = торо_ОбъектыРемонтаГруппы.СтруктураИерархии
						   |";
			
					   КонецЕсли;
					   
		ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
		
		Если ЗначениеЗаполнено(СтруктураПараметровФормы.ОтборОбъектРемонта) Тогда
			РодительИерархии = СтруктураПараметровФормы.ОтборОбъектРемонта;
		КонецЕсли;
		
		СостояниеДереваОР = СтруктураПараметровФормы.СостояниеДереваОР;
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.СтруктураИерархии);				
		Запрос.УстановитьПараметр("РодительИерархии", ?(СостояниеДереваОР <> Неопределено,?(СостояниеДереваОР.МассивОткрытыхОР.Количество() = 0,РодительИерархии,СостояниеДереваОР.МассивОткрытыхОР),РодительИерархии));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(РезультатЗапроса);

		ТаблицаИерархии = РезультатЗапроса.Выгрузить();	
		
		СтруктураПоиска = Новый Структура("РодительИерархии", РодительИерархии);
		МассивКорневыхСтрок = ТаблицаИерархии.НайтиСтроки(СтруктураПоиска);
		
		Для каждого Элем Из МассивКорневыхСтрок Цикл
			
			НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
			НовСтрокаДерева.Ссылка 			 = Элем.ОбъектИерархии;
			НовСтрокаДерева.РодительИерархии = Элем.РодительИерархии;
			НовСтрокаДерева.ПометкаУдаления  = Элем.ПометкаУдаления;
			НовСтрокаДерева.Картинка 		 = Элем.ИндексКартинки;
			НовСтрокаДерева.Код 			 = Элем.Код;
			НовСтрокаДерева.ИнвентарныйНомер = Элем.ИнвентарныйНомер;
			НовСтрокаДерева.ЗаводскойНомер 	 = Элем.ЗаводскойНомер;
			НовСтрокаДерева.ТехНомер 		 = Элем.ТехНомер;
			НовСтрокаДерева.РеквизитДопУпорядочивания = Элем.РеквизитДопУпорядочиванияОР;
	
			СтруктураПоиска = Новый Структура("РодительИерархии", Элем.ОбъектИерархии);
			МассивСтрок = ТаблицаИерархии.НайтиСтроки(СтруктураПоиска);
			
			Для каждого ЭлементМассива ИЗ МассивСтрок Цикл
				НС = НовСтрокаДерева.Строки.Добавить();
				НС.Ссылка 			= ЭлементМассива.ОбъектИерархии;
				НС.РодительИерархии = ЭлементМассива.РодительИерархии;
				НС.ПометкаУдаления 	= ЭлементМассива.ПометкаУдаления;
				НС.Картинка 		= ЭлементМассива.ИндексКартинки;
				НС.Код 				= ЭлементМассива.Код;
				НС.ИнвентарныйНомер = ЭлементМассива.ИнвентарныйНомер;
				НС.ЗаводскойНомер 	= ЭлементМассива.ЗаводскойНомер;
				НС.ТехНомер 		= ЭлементМассива.ТехНомер;
				НС.РеквизитДопУпорядочивания = ЭлементМассива.РеквизитДопУпорядочиванияОР;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
		
КонецФункции

Функция ЗаполнитьДеревоНаСервере(ЗНАЧ ДеревоРеквизит,СостояниеДереваОР = Неопределено,СтруктураПараметровИерархии,СтруктураПараметровФормы) Экспорт
	
	ДеревоСФормы = ДанныеФормыВЗначение(ДеревоРеквизит,Тип("ДеревоЗначений"));
	НС = ДеревоСФормы.Строки.Добавить();
	НС.Ссылка = СтруктураПараметровИерархии.СтруктураИерархии;
	НС.Картинка = 4;
	НС.СвязиОбновлялись = Истина;
	
	ЗаполнитьОсновноеВДеревеСервере(НС,СтруктураПараметровИерархии,,СтруктураПараметровФормы);
	
	ЗначениеВДанныеФормы(ДеревоСФормы,ДеревоРеквизит);
		
КонецФункции

Процедура ПеренестиЭлементыВКореньИерархии(МассивОР,СтруктураИерархии,ИзменяетсяДокументами,МассивУдаляемых) Экспорт
	
	Если ТипЗнч(МассивОР) = Тип("Массив") Тогда
		ВыполнитьПереносЭлементов(МассивОР,СтруктураИерархии,ИзменяетсяДокументами,МассивУдаляемых);
	Иначе 
		
		Для каждого Элем Из МассивОР Цикл
			
			Если Элем.Ключ <> "СтрокаИерархий" Тогда
				ВыполнитьПереносЭлементов(Элем.Значение,Элем.Ключ,Элем.Ключ.ИзменяетсяДокументами,МассивУдаляемых);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьПереносЭлементов(МассивОР,СтруктураИерархии,ИзменяетсяДокументами,МассивУдаляемых)
	
	Если ИзменяетсяДокументами Тогда
			
			НовДокумент = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
			НовДокумент.СтруктураИерархии = СтруктураИерархии;
			НовДокумент.Дата = ТекущаяДата();
			
			НовДокумент.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнаяОрганизация",
			Истина);
			
			НовДокумент.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеПодразделение",
			Истина);
			
			НовДокумент.Ответственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойОтветственный",
			Справочники.Пользователи.ПустаяСсылка());
			
			СоответствиеОРИРодителей = торо_РаботаСИерархией.ПолучитьТекущихРодителейВИерархии(МассивОР,СтруктураИерархии);
			
			Для Каждого КлючИЗначение Из СоответствиеОРИРодителей Цикл
				
				НС = НовДокумент.ПоложенияВСтруктуреИерархии.Добавить();
				НС.ОбъектИерархии 		= КлючИЗначение.Ключ;
				НС.ПредыдущееПоложение  = КлючИЗначение.Значение;
				Если МассивУдаляемых <> Неопределено Тогда
					НС.Удален = МассивУдаляемых.Найти(НС.ОбъектИерархии) <> Неопределено;
				КонецЕсли;
				
			КонецЦикла;
			Попытка
				НовДокумент.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Перенос Объектов ремонта не выполнен по причине: %1'"),ОписаниеОшибки()));
			КонецПопытки
			
		Иначе
			
			Для Каждого ОбъектИерархии Из МассивОР Цикл
				Если МассивУдаляемых <> Неопределено
					И МассивУдаляемых.Найти(ОбъектИерархии) <> Неопределено Тогда
					// удаляем
					УдалитьЗаписиДереваНаСервере(ОбъектИерархии,СтруктураИерархии);
				Иначе
					// переносим в корень
					ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектИерархии, Справочники.торо_ОбъектыРемонта.ПустаяСсылка(), СтруктураИерархии);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСписокПодчиненныхОбъектов(СтруктураПараметровИерархии,РодительИерархии = Неопределено,СтруктураПараметровФормы) Экспорт
	
	Запрос = Новый Запрос;
	// получаем все ОР
	Если СтруктураПараметровИерархии.СтроитсяАвтоматически Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	Справочник.Ссылка КАК Ссылка,
		|	Справочник.ПометкаУдаления,
		|	Справочник.Родитель
		|ПОМЕСТИТЬ ВТ_Справочник
		|ИЗ
		|	Справочник."+СтруктураПараметровИерархии.ТипРеквизитаОР+" КАК Справочник
		//|ГДЕ
		//|	&КореньВетки = ""<>""
		//|	или Справочник.Ссылка В ИЕРАРХИИ(&КореньВетки)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ОбъектыРемонта.Ссылка,
		|	торо_ОбъектыРемонта.Код,
		|	торо_ОбъектыРемонта.Организация,
		|	торо_ОбъектыРемонта.Наименование,
		|	торо_ОбъектыРемонта.ИнвентарныйНомер,
		|	торо_ОбъектыРемонта.ТехНомер,
		|	торо_ОбъектыРемонта.ПометкаУдаления,
		|	ВЫБОР
		|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL 
		|			ТОГДА 1
		|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЕстьФайлы,
		|	ВЫБОР
		|		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
		|			ТОГДА ВЫБОР
		|					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		|						ТОГДА 6
		|					ИНАЧЕ 5
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА торо_ОбъектыРемонта.ПометкаУдаления
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ
		|	КОНЕЦ КАК Картинка,
		|	ЕСТЬNULL(торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР, 0) КАК РеквизитДопУпорядочиванияОР,
		|	торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" КАК Родитель
		|ПОМЕСТИТЬ ВТ_ОР
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Справочник КАК ВТ_Справочник
		|		ПО торо_ОбъектыРемонта."+СтруктураПараметровИерархии.РеквизитОР+" = ВТ_Справочник.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		|		ПО (торо_ПорядокОРПоИерархии.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка)
		|			И (торо_ПорядокОРПоИерархии.СтруктураИерархии = &СтруктураИерархии)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
		|		ПО торо_ОбъектыРемонта.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами
		|ГДЕ
		|	НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОР.Код,
		|	ВТ_ОР.Организация,
		|	ВТ_ОР.Наименование,
		|	ВТ_ОР.ИнвентарныйНомер,
		|	ВТ_ОР.ТехНомер,
		|	ВТ_ОР.ПометкаУдаления,
		|	ВТ_ОР.ЕстьФайлы,
		|	ВТ_ОР.Картинка,
		|	ВТ_ОР.РеквизитДопУпорядочиванияОР,
		|	ВТ_ОР.Ссылка КАК ОбъектИерархии,
		|	ВТ_ОР.Родитель КАК РодительИерархии
		|ПОМЕСТИТЬ ВТ_Финальная
		|ИЗ
		|	ВТ_ОР КАК ВТ_ОР
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	NULL,
		|	ВЫБОР
		|		КОГДА ВТ_Справочник.ПометкаУдаления
		|			ТОГДА 10
		|		ИНАЧЕ 9
		|	КОНЕЦ,
		|	NULL,
		|	ВТ_Справочник.Ссылка,
		|	ВТ_Справочник.Родитель
		|ИЗ
		|	ВТ_Справочник КАК ВТ_Справочник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Финальная.Код,
		|	ВТ_Финальная.Организация,
		|	ВТ_Финальная.Наименование,
		|	ВТ_Финальная.ИнвентарныйНомер,
		|	ВТ_Финальная.ТехНомер,
		|	ВТ_Финальная.ПометкаУдаления,
		|	ВТ_Финальная.ЕстьФайлы,
		|	ВТ_Финальная.Картинка,
		|	ВТ_Финальная.РеквизитДопУпорядочиванияОР,
		|	ВТ_Финальная.ОбъектИерархии,
		|	ВТ_Финальная.РодительИерархии
		|	%ТекстДляСозданияВТ1%
		|ИЗ
		|	ВТ_Финальная КАК ВТ_Финальная";
				   
		Запрос.УстановитьПараметр("КореньВетки", РодительИерархии);
		Запрос.УстановитьПараметр("СтруктураИерархии",СтруктураПараметровИерархии.СтруктураИерархии);
		
		Если Метаданные.Справочники[СтруктураПараметровИерархии.ТипРеквизитаОР].Реквизиты.найти("Родитель") = Неопределено тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "	Справочник.Родитель", "Null как Родитель");
		КонецЕсли;
		
		ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);
		
	Иначе
		Если СтруктураПараметровИерархии.ИзменяетсяДокументами Тогда
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
						   |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии,
			               |	торо_ОбъектыРемонта.Наименование,
			               |	торо_ОбъектыРемонта.ТехНомер,
			               |	торо_ОбъектыРемонта.Код,
						    |	торо_ОбъектыРемонта.Организация,
			               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
			               |	торо_ОбъектыРемонта.ПометкаУдаления,
						   |	ВЫБОР
						   |		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL ТОГДА
							|		1
							|	КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ТОГДА
							|		0
							|	ИНАЧЕ
							|		1
							|КОНЕЦ КАК ЕстьФайлы ,
			               |	ВЫБОР
			               |		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			               |			ТОГДА ВЫБОР
			               |					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |						ТОГДА 6
			               |					ИНАЧЕ 5
			               |				КОНЕЦ
			               |		ИНАЧЕ ВЫБОР
			               |				КОГДА ЕСТЬNULL(торо_ОбъектыРемонтаГруппы.ОбъектГруппа, ЛОЖЬ)
			               |					ТОГДА ВЫБОР
			               |							КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |								ТОГДА 3
			               |							ИНАЧЕ 2
			               |						КОНЕЦ
			               |				ИНАЧЕ ВЫБОР
			               |						КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |							ТОГДА 1
			               |						ИНАЧЕ 0
			               |					КОНЕЦ
			               |			КОНЕЦ
			               |	КОНЕЦ КАК Картинка,
						   |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР
						   |	%ТекстДляСозданияВТ1%
			               |ИЗ
			               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
			               |			,
			               |			СтруктураИерархии = &СтруктураИерархии
			               |				И НЕ Удален) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |		ПО торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
			               |		ПО торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = торо_ОбъектыРемонтаГруппы.ОбъектИерархии
			               |			И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии = торо_ОбъектыРемонтаГруппы.СтруктураИерархии
						   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		              	   |		ПО торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
		           		   |			И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
						    |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
						   |        ПО торо_ОбъектыРемонта.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами";
			         
		Иначе
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
						   |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
			               |	торо_ОбъектыРемонта.Наименование,
			               |	торо_ОбъектыРемонта.ТехНомер,
			               |	торо_ОбъектыРемонта.Код,
						   |	торо_ОбъектыРемонта.Организация,
			               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
			               |	торо_ОбъектыРемонта.ПометкаУдаления,
							|	ВЫБОР
							|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ЕСТЬ NULL ТОГДА
							|			1
							|		КОГДА НаличиеПрисоединенныхФайлов.ЕстьФайлы ТОГДА
							|			0
							|		ИНАЧЕ
							|			1
							|	КОНЕЦ КАК ЕстьФайлы ,
			               |	ВЫБОР
			               |		КОГДА торо_ОбъектыРемонта.ЭтоГруппа
			               |			ТОГДА ВЫБОР
			               |					КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |						ТОГДА 6
			               |					ИНАЧЕ 5
			               |				КОНЕЦ
			               |		ИНАЧЕ ВЫБОР
			               |				КОГДА ЕСТЬNULL(торо_ОбъектыРемонтаГруппы.ОбъектГруппа, ЛОЖЬ)
			               |					ТОГДА ВЫБОР
			               |							КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |								ТОГДА 3
			               |							ИНАЧЕ 2
			               |						КОНЕЦ
			               |				ИНАЧЕ ВЫБОР
			               |						КОГДА торо_ОбъектыРемонта.ПометкаУдаления
			               |							ТОГДА 1
			               |						ИНАЧЕ 0
			               |					КОНЕЦ
			               |			КОНЕЦ
			               |	КОНЕЦ КАК Картинка,
						   |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР
						   |	%ТекстДляСозданияВТ1%
			               |ИЗ
			               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			               |		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
			               |		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонтаГруппы.ОбъектИерархии
			               |			И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = торо_ОбъектыРемонтаГруппы.СтруктураИерархии
						   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		              	   |		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
		           		   |			И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
						   |        ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
						   |        ПО торо_ОбъектыРемонта.Ссылка = НаличиеПрисоединенныхФайлов.ОбъектСФайлами
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";
							   
		КонецЕсли;
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураПараметровИерархии.СтруктураИерархии);
		ДополнитьТекстИПараметрыЗапросаДляПолученияСтатусаУчета(Запрос,СтруктураПараметровФормы);

	КонецЕсли;
	
	Если РодительИерархии = Неопределено Тогда
		Возврат торо_ОбщегоНазначения.РезультатЗапросаВМассивСтруктур(Запрос.Выполнить());
	Иначе
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Возврат ПолучитьМассивПодчиненныхПоТаблицеИерархии(РодительИерархии,РезультатЗапроса,"ОбъектИерархии","РодительИерархии");
	КонецЕсли;
КонецФункции

Процедура УдалитьПорядокЭлементаИзРегистра(ОбъектИерархии,ТекСтруктураИерархии) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.торо_ПорядокОРПоИерархии.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектРемонта     = ОбъектИерархии;
	МенеджерЗаписи.СтруктураИерархии  = ТекСтруктураИерархии;
	
	МенеджерЗаписи.Удалить();	 
	
КонецПроцедуры

Процедура ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ОбъектРемонта, СтруктураИерархии, ОбъектГруппа = Неопределено, ПроверкаПриУдалении = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ОбъектРемонта) И ТипЗнч(ОбъектРемонта) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		Если ОбъектГруппа = Неопределено Тогда
			КоличествоПодчиненных = торо_РаботаСИерархией.ПолучитьКоличествоПодчиненныхОРВСтруктуреИерархии(ОбъектРемонта, СтруктураИерархии);
			ОбъектГруппа = (КоличествоПодчиненных > ?(ПроверкаПриУдалении,1,0));
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.ОбъектИерархии.Установить(ОбъектРемонта);
		НаборЗаписей.Отбор.СтруктураИерархии.Установить(СтруктураИерархии);
		
		НаборЗаписей.Прочитать();
		
		Если ОбъектГруппа = Истина Тогда
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей[0].ОбъектГруппа = Истина;
			Иначе
			   НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.ОбъектГруппа      = Истина;
				НоваяЗапись.ОбъектИерархии    = ОбъектРемонта;
				НоваяЗапись.СтруктураИерархии = СтруктураИерархии;
			КонецЕсли;
			
		Иначе
			
			НаборЗаписей.Очистить();
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Функция вовзращает все/подчиненные объекты ремонта, входящие в иерархию (с картинками)
// (используется при отключении иерархического просмотра например).
Процедура УдалитьЗаписиДереваНаСервере(Ссылка,ТекСтруктураИерархии) Экспорт
	
	Если НЕ ТипЗнч(Ссылка) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		
		МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СтруктураИерархии = ТекСтруктураИерархии;
		МенеджерЗаписи.ОбъектИерархии = Ссылка;
		МенеджерЗаписи.Удалить();
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектИерархии, РодительИерархии, СтруктураИерархии) Экспорт
	
	// Добавление записи в регистр
	МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИерархии     = ОбъектИерархии;
	МенеджерЗаписи.СтруктураИерархии  = СтруктураИерархии;
	МенеджерЗаписи.РодительИерархии   = ?(ТипЗнч(РодительИерархии) = Тип("СправочникСсылка.торо_СтруктурыОР"),
	Неопределено, РодительИерархии);
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры
// Процедура заполняет массив подчиненными первого уровня (используется например для проверки наличия подчиненных).
Процедура ПолучитьМассивПодчиненныхНаСервере(Ссылка,Массив,СтруктураИерархии,ИзменяетсяДокументами, ПоВсемИерархиям = Ложь) Экспорт
	
	Если ПоВсемИерархиям Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних() КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии = &РодительИерархии
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии";
		Запрос.УстановитьПараметр("РодительИерархии",Ссылка);
		Таб = Запрос.Выполнить().Выгрузить();
		МассивСтруктур = Таб.ВыгрузитьКолонку("СтруктураИерархии");
		Стр = "";
		Для каждого Элем Из МассивСтруктур Цикл
			Если НЕ СтруктураИерархии = Элем Тогда
				Стр = Стр + """" + Строка(Элем) + """, ";
			КонецЕсли;
			НовТаб = Таб.Скопировать(Новый Структура("СтруктураИерархии", Элем));
			Массив.Вставить(Элем, НовТаб.ВыгрузитьКолонку("ОбъектИерархии"));
		КонецЦикла;
		
		Если Стр <> "" Тогда
			Стр = ЛЕВ(Стр, СтрДлина(Стр) - 2);
			Массив.Вставить("СтрокаИерархий", Стр);
		КонецЕсли;
	Иначе 
		Если ИзменяетсяДокументами Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			|ГДЕ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии = &РодительИерархии";
			Запрос.УстановитьПараметр("СтруктураИерархии",СтруктураИерархии);
			Запрос.УстановитьПараметр("РодительИерархии",Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Массив.Добавить(Выборка.ОбъектИерархии);
			КонецЦикла;
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			|	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии";
			Запрос.УстановитьПараметр("СтруктураИерархии",СтруктураИерархии);
			Запрос.УстановитьПараметр("РодительИерархии",Ссылка);
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Массив.Добавить(Выборка.ОбъектИерархии);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьВыборОРНаСервере(ВыбранноеЗначение,ТекущийОР,ТекСтруктураИерархии,РодительТекущего,РодительДобавляемогоЭлемента, ИерархияИсточник, КореньВетки) Экспорт
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		Если РодительТекущего <> Неопределено И РодительДобавляемогоЭлемента <> Неопределено Тогда
			Если Не РодительДобавляемогоЭлемента = ТекущийОР И НЕ ВыбранноеЗначение = ТекущийОР Тогда
		        
		        УдалитьЗаписиВРегистреИерархическихСтруктур(ВыбранноеЗначение, РодительТекущего, ТекСтруктураИерархии);
		        
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьЗаписиВРегистрИерархическихСтруктур(ВыбранноеЗначение, ТекущийОР, ТекСтруктураИерархии);
		
		ЗаполнитьРеквизитУпорядочиванияНаСервере(ВыбранноеЗначение, ТекСтруктураИерархии, Ложь);
		
		ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекущийОР, ТекСтруктураИерархии, Истина);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		
		тзУзлыИРодители = торо_РаботаСИерархией.НайтиРодителейУзловВИерархии(ИерархияИсточник, ВыбранноеЗначение, КореньВетки);
		
		тз = Новый ТаблицаЗначений;
		тз.Колонки.Добавить("Ключ", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		тз.Колонки.Добавить("Значение", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		Для Каждого текОР Из тзУзлыИРодители Цикл
			нс = тз.Добавить();
			
			Значение = Неопределено;
			Если КореньВетки <> текОР.Ключ И типЗнч(текОР.Значение) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				
				Наименование = текОР.Значение.Наименование;
				Элемент = Справочники.торо_ОбъектыРемонта.НайтиПоНаименованию(Наименование);
				Если НЕ ЗначениеЗаполнено(Элемент) Тогда
					Элемент = Справочники.торо_ОбъектыРемонта.СоздатьГруппу();
					Элемент.Наименование = Наименование;
					Элемент.Записать();
					Значение = Элемент.Ссылка;
				Иначе
					Значение = Элемент;
				КонецЕсли;
			КонецЕсли;
			
			Ключ = Неопределено;
			Если типЗнч(текОР.Ключ) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				
				Наименование = текОР.Ключ.Наименование;
				Элемент = Справочники.торо_ОбъектыРемонта.НайтиПоНаименованию(Наименование);
				Если НЕ ЗначениеЗаполнено(Элемент) Тогда
					Элемент = Справочники.торо_ОбъектыРемонта.СоздатьГруппу();
					Элемент.Наименование = Наименование;
					Элемент.Записать();
					Ключ = Элемент.Ссылка;
				Иначе
					Ключ = Элемент;
				КонецЕсли;
			КонецЕсли;
			
			нс.Значение = ?(ЗначениеЗаполнено(Значение), Значение, текОР.значение);
			нс.Ключ = ?(ЗначениеЗаполнено(Ключ), Ключ, текОР.Ключ);
			
			Если КореньВетки = текОР.Ключ Тогда
				КореньВетки = нс.Ключ;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого текОР Из тз Цикл
	
			Если РодительТекущего <> Неопределено И РодительДобавляемогоЭлемента[текОР.Ключ] <> Неопределено Тогда
				Если РодительДобавляемогоЭлемента[текОР.Ключ] <> ТекущийОР И текОР.Ключ <> ТекущийОР Тогда
			        
					УдалитьЗаписиВРегистреИерархическихСтруктур(текОР.Ключ, РодительТекущего, ТекСтруктураИерархии);
			        
				КонецЕсли;
			КонецЕсли;
			
			текущийРодитель = ?(текОР.Ключ = КореньВетки или ВыбранноеЗначение.Количество() = 1, ТекущийОР, текОР.Значение);
			
			ДобавитьЗаписиВРегистрИерархическихСтруктур(текОР.Ключ, текущийРодитель, ТекСтруктураИерархии);
			
			ЗаполнитьРеквизитУпорядочиванияНаСервере(текОР.Ключ, ТекСтруктураИерархии, Ложь);
			
			ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(текущийРодитель, ТекСтруктураИерархии, Истина);

		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьЗаписиВРегистреИерархическихСтруктур(ВыбранноеЗначение, РодительИерархии, СтруктураИерархии)
	
	// Удаление записи регистра 
	МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИерархии     = ВыбранноеЗначение;
	МенеджерЗаписи.СтруктураИерархии  = СтруктураИерархии;
	МенеджерЗаписи.РодительИерархии   = РодительИерархии;
	
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитУпорядочиванияНаСервере(Ссылка, СтруктураИерархии, Отказ) Экспорт
	
	торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(Ссылка, СтруктураИерархии, Отказ);	
	
КонецПроцедуры

// Функция берёт таблицу со всеми ОР иерархии и выбирает все подчиненные родителю, помещая их в массив.
Функция ПолучитьМассивПодчиненныхПоТаблицеИерархии(РодительИерархии,ТаблицаИерархии,ИмяКолонкиОР,ИмяКолонкиРодителя,ВключаяРодителя = Истина)
	
	МассивВозврата = Новый Массив;
	
	Если ВключаяРодителя Тогда
		Эл = ТаблицаИерархии.Найти(РодительИерархии,ИмяКолонкиОР);
		Если Эл = неопределено тогда
			Возврат МассивВозврата;
		Иначе 
			МассивВозврата.Добавить(ТаблицаИерархии.Найти(РодительИерархии,ИмяКолонкиОР)[ИмяКолонкиОР]);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивПодчиненных = ТаблицаИерархии.НайтиСтроки(Новый Структура(ИмяКолонкиРодителя,РодительИерархии));
	Для Каждого Эл Из МассивПодчиненных Цикл
		
		МассивВозврата.Добавить(Эл[ИмяКолонкиОР]);
		
		ДобавитьПодчиненныхВМассив(МассивВозврата,ТаблицаИерархии,Эл,ИмяКолонкиРодителя,ИмяКолонкиОР);
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура ДобавитьПодчиненныхВМассив(МассивСтруктур,ТаблицаИерархии,СтрокаРодитель,ИмяКолонкиРодителя,ИмяКолонкиОР)
	
	МассивПодчиненных = ТаблицаИерархии.НайтиСтроки(Новый Структура(ИмяКолонкиРодителя,СтрокаРодитель[ИмяКолонкиОР]));
	Для Каждого Эл Из МассивПодчиненных Цикл
		МассивСтруктур.Добавить(Эл[ИмяКолонкиОР]);
		ДобавитьПодчиненныхВМассив(МассивСтруктур,ТаблицаИерархии,Эл,ИмяКолонкиРодителя,ИмяКолонкиОР);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьПоложениеВИерархии(Ссылка,ТекСтруктураИерархии,ВыбранноеЗначение, РодительИерархии) Экспорт
	
	УдалитьЗаписиДереваНаСервере(Ссылка,ТекСтруктураИерархии);
	
	Если Не ТекСтруктураИерархии.СтроитсяАвтоматически Тогда
	    ДобавитьЗаписиВРегистрИерархическихСтруктур(Ссылка, ВыбранноеЗначение, ТекСтруктураИерархии);
		
		Если Не ТекСтруктураИерархии.ИзменяетсяДокументами Тогда
			
			ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ВыбранноеЗначение, ТекСтруктураИерархии, Истина);
			
			Если ЗначениеЗаполнено(РодительИерархии) Тогда
				КоличествоПодчиненных = торо_РаботаСИерархией.ПолучитьКоличествоПодчиненныхОРВСтруктуреИерархии(РодительИерархии, ТекСтруктураИерархии);
				ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(РодительИерархии, ТекСтруктураИерархии, КоличествоПодчиненных > 0);
			КонецЕсли;
			
		КонецЕсли;         
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
//
// Параметры:
// КомандыПечати – ТаблицаЗначений – состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Паспорт объекта ремонта
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Справочник.торо_ОбъектыРемонта";
	КомандаПечати.Идентификатор = "ПаспортОР";
	КомандаПечати.Представление = НСтр("ru = 'Паспорт объекта ремонта'");
	КомандаПечати.Обработчик = "торо_Печать.ЗапроситьДопПараметрыПечатиОР";
	КомандаПечати.СразуНаПринтер = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ПечатьДокументовБезПредварительногоПросмотра",
	Ложь);
	
КонецПроцедуры

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПаспортОР") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
		"ПаспортОР", 
		"Паспорт объекта ремонта", 
		ПечатьПаспортаОР(МассивОбъектов, ПараметрыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьПаспортаОР(МассивОбъектов, ПараметрыПечати)
	
	Макет = ПолучитьМакет("ПаспортОР");
	
	ТабДок = Новый ТабличныйДокумент;
	
	ТабДок.АвтоМасштаб = Истина;
	
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ОбъектыРемонта.Код,
	|	торо_ОбъектыРемонта.Наименование,
	|	торо_ОбъектыРемонта.Направление,
	|	торо_ОбъектыРемонта.ТиповойОР,
	|	торо_ОбъектыРемонта.ИнвентарныйНомер,
	|	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию,
	|	торо_ОбъектыРемонта.СрокПолезногоИспользования,
	|	торо_ОбъектыРемонта.ПлановыйГрафикРаботы,
	|	торо_ОбъектыРемонта.Организация,
	|	торо_ОбъектыРемонта.Подразделение,
	|	торо_ОбъектыРемонта.ВнешнийОбъект,
	|	торо_ОбъектыРемонта.Контрагент,
	|	торо_ОбъектыРемонта.ДоговорКонтрагента,
	|	торо_ОбъектыРемонта.Изготовитель,
	|	торо_ОбъектыРемонта.ЗаводскойНомер,
	|	торо_ОбъектыРемонта.ТехНомер,
	|	торо_ОбъектыРемонта.КодПоОКОФ,
	|	торо_ОбъектыРемонта.ДатаВыпуска,
	|	торо_ОбъектыРемонта.НомерПаспорта,
	|	торо_ОбъектыРемонта.АдресМестонахождения,
	|	торо_ОбъектыРемонта.ПодразделениеИсполнитель,
	|	торо_ОбъектыРемонта.КонтрагентИсполнительРемонта,
	|	торо_ОбъектыРемонта.НеУчаствуетВПланировании,
	|	торо_ОбъектыРемонта.ВестиУчетСерийныхЗапчастей,
	|	торо_ОбъектыРемонта.Приоритет,
	|	&РодительИерархии КАК Родитель
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов[0]);
	Запрос.УстановитьПараметр("РодительИерархии", ПараметрыПечати.Родитель);
	
	ЗаголовокИОсновныеДанные = Запрос.Выполнить().Выбрать();
	ЗаголовокИОсновныеДанные.Следующий();
	
	
	
	ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("Заголовок"), ТабДок,ЗаголовокИОсновныеДанные);
	
	
	// Флаг основные
	Если ПараметрыПечати.Свойство("ФлагОсновные") И ПараметрыПечати.ФлагОсновные = Истина Тогда
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлОсновные"), ТабДок);
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ОбщиеБлок1"), Табдок, ЗаголовокИОсновныеДанные);
		
		Если ЗаголовокИОсновныеДанные.ВнешнийОбъект Тогда
			
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ОбщиеБлок3"), Табдок, ЗаголовокИОсновныеДанные);
			
		Иначе
			
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ОбщиеБлок2"), Табдок, ЗаголовокИОсновныеДанные);
		КонецЕсли; 
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ОбщиеБлок4"), Табдок, ЗаголовокИОсновныеДанные);
		
	КонецЕсли;
	
	// Характеристики
	Если ПараметрыПечати.Свойство("ФлагХарактеристики") И ПараметрыПечати.ФлагХарактеристики = Истина И ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения") Тогда
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлСвойства"), ТабДок);
		
		Результат = УправлениеСвойствами.ПолучитьЗначенияСвойств(МассивОбъектов[0]);	
		
		// заполнить недублирующиеся свойства из типового ор
		Если ЗначениеЗаполнено(МассивОбъектов[0].ТиповойОР) Тогда
			СписокЗаполненныхСвойств = Новый массив;
			Для каждого СтрокаДопРеквизита из МассивОбъектов[0].ДополнительныеРеквизиты Цикл
				Если ЗначениеЗаполнено(СтрокаДопРеквизита.Значение) Тогда
					СписокЗаполненныхСвойств.Добавить(СтрокаДопРеквизита.Свойство);
				КонецЕсли;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 	"ВЫБРАТЬ
			|	торо_ТиповыеОРДополнительныеРеквизиты.Ссылка КАК Источник,
			|	торо_ТиповыеОРДополнительныеРеквизиты.Свойство,
			|	торо_ТиповыеОРДополнительныеРеквизиты.Значение
			|ИЗ
			|	Справочник.торо_ТиповыеОР.ДополнительныеРеквизиты КАК торо_ТиповыеОРДополнительныеРеквизиты
			|ГДЕ
			|	торо_ТиповыеОРДополнительныеРеквизиты.Ссылка = &ТиповойОР
			|	И НЕ торо_ТиповыеОРДополнительныеРеквизиты.Свойство В (&Свойства)";
			
			Запрос.УстановитьПараметр("ТиповойОР", МассивОбъектов[0].ТиповойОР);
			Запрос.УстановитьПараметр("Свойства", СписокЗаполненныхСвойств);
			
			ВыборкаСвойств = Запрос.Выполнить().Выбрать();
			Пока ВыборкаСвойств.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(ВыборкаСвойств.Значение) Тогда
					Продолжить;
				Конецесли;
				
				НовСтр = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаСвойств);
				
			КонецЦикла;
			
		КонецЕсли;

		
		Если Результат.Количество() <> 0 Тогда
			
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокСвойства"),ТабДок);
			
			Область = Макет.ПолучитьОбласть("ТаблСвойства");
			
			Для каждого Характеристика Из Результат Цикл
			
				ЗаполнитьИВывестиОбласть(Область, ТабДок, Характеристика);
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////
	// Флаг Показатели 
	Если ПараметрыПечати.Свойство("ФлагКонтролируемыеПоказатели") И ПараметрыПечати.ФлагКонтролируемыеПоказатели = Истина Тогда
		
		// Область "ГлПоказатели"
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлПоказатели"),Табдок,ЗаголовокИОсновныеДанные);
		
		ТаблицаРодителейТОР = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейОбъекта(МассивОбъектов[0].ТиповойОР);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	Таб.Родитель КАК ТОР
		               |ПОМЕСТИТЬ ТабРодителейТОР
		               |ИЗ
		               |	&ТабРодителейТОР КАК Таб
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ТОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК ОбъектРемонта,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель КАК Показатель,
		               |	ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка) КАК ТиповойОР,
		               |	1 КАК Приоритет,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум КАК ДопустимыйМинимум,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум КАК ДопустимыйМаксимум,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум КАК КритическийМинимум,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум КАК КритическийМаксимум,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР КАК ЗначенияКонтролируемыхПоказателейИзОР,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ТочкаЗамера КАК ТочкаЗамера,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Удален КАК Удален
		               |ПОМЕСТИТЬ ПоказателиОРИТиповогоОР
		               |ИЗ
		               |	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
		               |ГДЕ
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	ЗНАЧЕНИЕ(Справочник.торо_ОбъектыРемонта.ПустаяСсылка),
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта,
		               |	0,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ТочкаЗамера,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Удален
		               |ИЗ
		               |	ТабРодителейТОР КАК ТабРодителейТОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
		               |		ПО ТабРодителейТОР.ТОР = торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаПриоритетовПолная.Показатель КАК Показатель,
		               |	МАКСИМУМ(ТаблицаПриоритетовПолная.Приоритет) КАК Приоритет
		               |ПОМЕСТИТЬ ТаблицаПриоритетов
		               |ИЗ
		               |	ПоказателиОРИТиповогоОР КАК ТаблицаПриоритетовПолная
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ТаблицаПриоритетовПолная.Показатель
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ПоказателиОРИТиповогоОР.Показатель КАК Показатель,
		               |	ПоказателиОРИТиповогоОР.ДопустимыйМинимум КАК ДопустимыйМинимум,
		               |	ПоказателиОРИТиповогоОР.ДопустимыйМаксимум КАК ДопустимыйМаксимум,
		               |	ПоказателиОРИТиповогоОР.КритическийМинимум КАК КритическийМинимум,
		               |	ПоказателиОРИТиповогоОР.КритическийМаксимум КАК КритическийМаксимум,
		               |	ПоказателиОРИТиповогоОР.ЗначенияКонтролируемыхПоказателейИзОР КАК ЗначенияКонтролируемыхПоказателейИзОР,
		               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЕдиницаИзмерения КАК ЕдИзм
		               |ИЗ
		               |	ПоказателиОРИТиповогоОР КАК ПоказателиОРИТиповогоОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПриоритетов КАК ТаблицаПриоритетов
		               |		ПО ПоказателиОРИТиповогоОР.Показатель = ТаблицаПриоритетов.Показатель
		               |			И ПоказателиОРИТиповогоОР.Приоритет = ТаблицаПриоритетов.Приоритет
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
		               |		ПО ПоказателиОРИТиповогоОР.Показатель = торо_ИзмеряемыеПоказателиОбъектовРемонта.Ссылка
		               |ГДЕ
		               |	НЕ ПоказателиОРИТиповогоОР.Удален";
		
		Запрос.УстановитьПараметр("ТабРодителейТОР", ТаблицаРодителейТОР);
		Запрос.УстановитьПараметр("ОбъектРемонта", МассивОбъектов[0]);
		Запрос.УстановитьПараметр("СсылкаТиповойОбъект", МассивОбъектов[0].ТиповойОР);
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпПоказатели"),ТабДок);
			
			Показатели = Результат.Выбрать();
			
			Область = Макет.ПолучитьОбласть("ТблПоказатели");
			
			Пока Показатели.Следующий() Цикл
				
				ЗаполнитьИВывестиОбласть(Область, ТабДок, Показатели);
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;                                                                    
	
	///////////////////////////////////////////////////////////////////////////
	// Флаг Наработка
	Если ПараметрыПечати.Свойство("ФлагНаработка") И ПараметрыПечати.ФлагНаработка = Истина Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
		|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
		|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
		|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
		|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
		|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
		|ПОМЕСТИТЬ Таб3
		|ИЗ
		|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(, ОбъектРемонта = &ОбъектРемонта) КАК торо_ПараметрыНаработкиОбъектовРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_НаработкаОбъектовРемонта.Период,
		|	торо_НаработкаОбъектовРемонта.Регистратор,
		|	торо_НаработкаОбъектовРемонта.ОбъектРемонта,
		|	Таб3.Показатель                                КАК ПоказательНаработки,
		|	торо_НаработкаОбъектовРемонта.ДатаКон,
		|	торо_НаработкаОбъектовРемонта.Наработка        КАК Наработка,
		|	Таб3.ЕдиницаИзмерения                          КАК ЕдИзм,
		|	Таб3.ПлановаяНаработка                         КАК ПлановаяНаработка,
		|	Таб3.ПродолжительностьПериодаПлановойНаработки КАК ПродолжительностьПериода,
		|	Таб3.ПериодПлановойНаработки                   КАК ПериодПлановойНаработки,
		|	Таб3.КоэффициентИспользованияОборудования      КАК Коэф
		|ИЗ
		|	Таб3 КАК Таб3
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
		|		ПО    (торо_НаработкаОбъектовРемонта.ОбъектРемонта = Таб3.ОбъектРемонта)
		|			И (торо_НаработкаОбъектовРемонта.Показатель = Таб3.Показатель)
		|ИТОГИ
		|	СУММА(Наработка),
		|	МИНИМУМ(ЕдИзм),
		|	МИНИМУМ(ПлановаяНаработка),
		|	МИНИМУМ(ПродолжительностьПериода),
		|	МИНИМУМ(ПериодПлановойНаработки),
		|	МИНИМУМ(Коэф)
		|ПО
		|	ПоказательНаработки";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", МассивОбъектов[0]);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлНаработка"), Табдок);
			
			// Определим области, которые будут использоваться в цикле, чтобы не получать их постоянно.
			
			ОбластьТаблШапкаПоказатели      = Макет.ПолучитьОбласть("ТблШпПоказателиНаработки");
			ОбластьТаблПоказатели           = Макет.ПолучитьОбласть("ТблПоказателиНаработки");
			
			ОбластьТаблШапкаЖурналНаработки = Макет.ПолучитьОбласть("ТблШпЖурналНаработки");
			ОбластьТаблЖурналНаработки      = Макет.ПолучитьОбласть("ТблЖурналНаработки");
			
			ОбластьНаработкаИтого           = Макет.ПолучитьОбласть("ТблЖурналНаработкиИтоги");
			
			Пока Выборка.Следующий() Цикл
				
				ЗаполнитьИВывестиОбласть(ОбластьТаблШапкаПоказатели, Табдок);
				ЗаполнитьИВывестиОбласть(ОбластьТаблПоказатели, Табдок, Выборка);
				
				ВыборкаВторогоУровня = Выборка.Выбрать(ОбходРезультатаЗапроса.Прямой);
				
				Если ВыборкаВторогоУровня.Количество() > 0 Тогда
					
					ЗаполнитьИВывестиОбласть(ОбластьТаблШапкаЖурналНаработки, Табдок);
					
					Пока ВыборкаВторогоУровня.Следующий() Цикл 
						
						ЗаполнитьИВывестиОбласть(ОбластьТаблЖурналНаработки,Табдок, ВыборкаВторогоУровня);
						
					КонецЦикла;
					
					ЗаполнитьИВывестиОбласть(ОбластьНаработкаИтого,Табдок, Выборка);
					
					
				КонецЕсли; 
				
			КонецЦикла;
			
			
		КонецЕсли; 
		
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////
	// Флаг Ремонты
	Если ПараметрыПечати.Свойство("ФлагРемонты") И ПараметрыПечати.ФлагРемонты = Истина Тогда
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлРемонты"), Табдок);
		
		//////////////////////////////////////////////////////////////////////////	
		
		// Область "Заявки на ремонт"  
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаявкиНаРемонт"), Табдок);
		
		//////////////////////////////////////////////////////////////////////////	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала КАК НачалоРемонта,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаОкончания КАК ОкончаниеРемонта,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Дата КАК ДатаДокумента,
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Номер КАК Номер
		               |ИЗ
		               |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		               |ГДЕ
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
		               |	И торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	торо_ЗаявкаНаРемонтРемонтыОборудования.ДатаНачала";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", МассивОбъектов[0]);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			
			// Область "ТблШпЗаявкиНаРемонт"
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпЗаявкиНаРемонт"), Табдок);
			//////////////////////////////////////////////////////////////////////////	
			
			// Область "ТблЗаявкиНаРемонт"  	
			
			
			Область = Макет.ПолучитьОбласть("ТблЗаявкиНаРемонт");
			
			Пока Выборка.Следующий() Цикл
				
				ЗаполнитьИВывестиОбласть(Область, Табдок, Выборка);
				
			КонецЦикла;
			
			
		КонецЕсли;
		
		
		
		
		//////////////////////////////////////////////////////////////////////////
		//////////////////////////////////////////////////////////////////////////	
		// Область "ВыполненныеРемонты"
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ВыполненныеРемонты"),ТабДок);
		//////////////////////////////////////////////////////////////////////////	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ЗавершенныеРемонтныеРаботы.ВидРемонтныхРабот,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(торо_ЗавершенныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_АктОВыполненииЭтапаРабот)
		|				ТОГДА ВЫБОР
		|						КОГДА ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_ЗаявкаНаРемонт)
		|							ТОГДА торо_Ремонты.ДатаНачалаПлан
		|						ИНАЧЕ NULL
		|					КОНЕЦ
		|			ИНАЧЕ торо_ЗавершенныеРемонтныеРаботы.Период
		|		КОНЕЦ) КАК ДатаНачалаЗаявка,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(торо_ЗавершенныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_АктОВыполненииЭтапаРабот)
		|				ТОГДА ВЫБОР
		|						КОГДА ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_ЗаявкаНаРемонт)
		|							ТОГДА торо_Ремонты.ДатаОкончанияПлан
		|						ИНАЧЕ NULL
		|					КОНЕЦ
		|			ИНАЧЕ торо_ЗавершенныеРемонтныеРаботы.Период
		|		КОНЕЦ) КАК ДатаОкончанияЗаявка,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(торо_ЗавершенныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_АктОВыполненииЭтапаРабот)
		|				ТОГДА ВЫБОР
		|						КОГДА торо_Ремонты.ДатаНачалаФакт = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|							ТОГДА NULL
		|						ИНАЧЕ торо_Ремонты.ДатаНачалаФакт
		|					КОНЕЦ
		|			ИНАЧЕ торо_ЗавершенныеРемонтныеРаботы.Период
		|		КОНЕЦ) КАК ДатаНачалаФакт,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(торо_ЗавершенныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_АктОВыполненииЭтапаРабот)
		|				ТОГДА ВЫБОР
		|						КОГДА торо_Ремонты.ДатаОкончанияФакт = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|							ТОГДА NULL
		|						ИНАЧЕ торо_Ремонты.ДатаОкончанияФакт
		|					КОНЕЦ
		|			ИНАЧЕ торо_ЗавершенныеРемонтныеРаботы.Период
		|		КОНЕЦ) КАК ДатаОкончанияФакт,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(торо_ЗавершенныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_АктОВыполненииЭтапаРабот)
		|				ТОГДА ВЫБОР
		|						КОГДА НЕ ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_ЗаявкаНаРемонт)
		|							ТОГДА ВЫБОР
		|									КОГДА торо_Ремонты.ДатаНачалаПлан = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|										ТОГДА NULL
		|									ИНАЧЕ торо_Ремонты.ДатаНачалаПлан
		|								КОНЕЦ
		|						ИНАЧЕ NULL
		|					КОНЕЦ
		|			ИНАЧЕ торо_ЗавершенныеРемонтныеРаботы.Период
		|		КОНЕЦ) КАК ДатаНачалаППР,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ТИПЗНАЧЕНИЯ(торо_ЗавершенныеРемонтныеРаботы.Регистратор) = ТИП(Документ.торо_АктОВыполненииЭтапаРабот)
		|				ТОГДА ВЫБОР
		|						КОГДА НЕ ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_ЗаявкаНаРемонт)
		|							ТОГДА ВЫБОР
		|									КОГДА торо_Ремонты.ДатаОкончанияПлан = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|										ТОГДА NULL
		|									ИНАЧЕ торо_Ремонты.ДатаОкончанияПлан
		|								КОНЕЦ
		|						ИНАЧЕ NULL
		|					КОНЕЦ
		|			ИНАЧЕ торо_ЗавершенныеРемонтныеРаботы.Период
		|		КОНЕЦ) КАК ДатаОкончанияППР,
		|	торо_ЗавершенныеРемонтныеРаботы.ID
		|ПОМЕСТИТЬ ТаблицаЗавершенныхРемонтов
		|ИЗ
		|	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		|		ПО торо_ЗавершенныеРемонтныеРаботы.ID = торо_Ремонты.ID
		|ГДЕ
		|	торо_ЗавершенныеРемонтныеРаботы.ОбъектРемонта = &ОбъектРемонта
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_ЗавершенныеРемонтныеРаботы.ВидРемонтныхРабот,
		|	торо_ЗавершенныеРемонтныеРаботы.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЗавершенныхРемонтов.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ЕСТЬNULL(ТаблицаЗавершенныхРемонтов.ДатаНачалаЗаявка, ЕСТЬNULL(ТаблицаЗавершенныхРемонтов.ДатаНачалаППР, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ПланДатаНачалаРемонтныхРабот,
		|	ЕСТЬNULL(ТаблицаЗавершенныхРемонтов.ДатаОкончанияЗаявка, ЕСТЬNULL(ТаблицаЗавершенныхРемонтов.ДатаОкончанияППР, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ПланДатаЗавершенияРемонтныхРабот,
		|	ЕСТЬNULL(ТаблицаЗавершенныхРемонтов.ДатаНачалаФакт, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ФактДатаНачалаРемонтныхРабот,
		|	ЕСТЬNULL(ТаблицаЗавершенныхРемонтов.ДатаОкончанияФакт, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ФактДатаЗавершенияРемонтныхРабот
		|ИЗ
		|	ТаблицаЗавершенныхРемонтов КАК ТаблицаЗавершенныхРемонтов
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаЗавершенныхРемонтов.ВидРемонтныхРабот,
		|	ПланДатаНачалаРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", МассивОбъектов[0]);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			// Область "ТблШпВыполненныеРемонты"
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпВыполненныеРемонты"),ТабДок);
			//////////////////////////////////////////////////////////////////////////	
			
			// Область "ТблВыполненныеРемонты"  	
			Выборка = Результат.Выбрать();
			
			ТаблВыполненныеРемонты = Макет.ПолучитьОбласть("ТблВыполненныеРемонты");
			
			Пока Выборка.Следующий() Цикл
				ТаблВыполненныеРемонты.Параметры.Заполнить(Выборка);
				ТаблВыполненныеРемонты.Параметры.ВидРемонтныхРабот = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(Выборка.ВидРемонтныхРабот);
				ТабДок.Вывести(ТаблВыполненныеРемонты, Выборка.Уровень()); 
			КонецЦикла;
			
		КонецЕсли; 
		
		// Предстоящие ремонты
		// Область "ПредстоящиеРемонты"  
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ПредстоящиеРемонты"),ТабДок);	
		//////////////////////////////////////////////////////////////////////////	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	МАКСИМУМ(торо_ПлановыеРемонтныеРаботы.Регистратор.Дата) КАК РегистраторДата,
		|	торо_ПлановыеРемонтныеРаботы.ID КАК ID
		|ПОМЕСТИТЬ РемонтыСУчетомКорректировок
		|ИЗ
		|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
		|			&ДатаНачала,
		|			НЕ Отменен
		|				И ОбъектРемонтныхРабот = &ОбъектРемонтныхРабот
		|				И ДатаНачалаРемонтныхРабот >= &ДатаНачала) КАК торо_ПлановыеРемонтныеРаботы
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботы.ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботы.Регистратор.Дата КАК РегистраторДата,
		|	торо_ПлановыеРемонтныеРаботы.Регистратор,
		|	торо_ПлановыеРемонтныеРаботы.ID КАК ID,
		|	торо_ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботы.ДатаОкончанияРемонтныхРабот,
		|	торо_ПлановыеРемонтныеРаботы.Отменен
		|ПОМЕСТИТЬ РемонтыПолныйСписок
		|ИЗ
		|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(
		|			&ДатаНачала,
		|			ОбъектРемонтныхРабот = &ОбъектРемонтныхРабот
		|				И ДатаНачалаРемонтныхРабот >= &ДатаНачала) КАК торо_ПлановыеРемонтныеРаботы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РемонтыСУчетомКорректировок.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	РемонтыСУчетомКорректировок.ОбъектРемонтныхРабот,
		|	РемонтыСУчетомКорректировок.ID,
		|	РемонтыПолныйСписок.ДатаНачалаРемонтныхРабот КАК НачалоРемонта,
		|	РемонтыПолныйСписок.ДатаОкончанияРемонтныхРабот КАК ОкончаниеРемонта,
		|	РемонтыПолныйСписок.Отменен,
		|	РемонтыПолныйСписок.Регистратор КАК Регистратор
		|ИЗ
		|	РемонтыСУчетомКорректировок КАК РемонтыСУчетомКорректировок
		|		ЛЕВОЕ СОЕДИНЕНИЕ РемонтыПолныйСписок КАК РемонтыПолныйСписок
		|		ПО РемонтыСУчетомКорректировок.ID = РемонтыПолныйСписок.ID
		|			И РемонтыСУчетомКорректировок.РегистраторДата = РемонтыПолныйСписок.Регистратор.Дата
		|			И (НЕ РемонтыПолныйСписок.Отменен)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(&ДатаНачала, ) КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
		|		ПО РемонтыСУчетомКорректировок.ID = торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID
		|ГДЕ
		|	НЕ РемонтыПолныйСписок.Регистратор ЕСТЬ NULL 
		|	И торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID ЕСТЬ NULL 
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидРемонтныхРабот,
		|	НачалоРемонта";
		
		Запрос.УстановитьПараметр("ДатаНачала", ТекущаяДата());
		Запрос.УстановитьПараметр("ОбъектРемонтныхРабот", МассивОбъектов[0]);;
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			// Область "ТблШпПредстоящиеРемонты"  
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТблШпПредстоящиеРемонты"),ТабДок);	
			//////////////////////////////////////////////////////////////////////////	
			
			// Область "ТблПредстоящиеРемонты"
			
			Выборка = Результат.Выбрать();
			
			ТаблВыполненныеРемонты = Макет.ПолучитьОбласть("ТблПредстоящиеРемонты");
			
			Пока Выборка.Следующий() Цикл
				ТаблВыполненныеРемонты.Параметры.Заполнить(Выборка);
				ТаблВыполненныеРемонты.Параметры.ВидРемонтныхРабот = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(Выборка.ВидРемонтныхРабот);
				ТабДок.Вывести(ТаблВыполненныеРемонты, Выборка.Уровень()); 
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////
	// Флаг Нормативные ремонты
	Если ПараметрыПечати.Свойство("ФлагНормативныеРемонты") И ПараметрыПечати.ФлагНормативныеРемонты = Истина  Тогда
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("НормативныеРемонты"),ТабДок);
		
		// Область "ТаблНормативныеРемонты" 
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
		|	торо_НормативныеРемонтыОборудования.ВидРемонта,
		|	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
		|	торо_НормативныеРемонтыОборудования.СпособПланирования,
		|	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
		|	торо_НормативныеРемонтыОборудования.СпособВыполнения,
		|	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
		|	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета
		|ПОМЕСТИТЬ НормРемонты
		|ИЗ
		|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|ГДЕ
		|	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОР
		|	И торо_НормативныеРемонтыОборудования.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
		|	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта,
		|	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта
		|ПОМЕСТИТЬ ПредшРемонты
		|ИЗ
		|	РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
		|ГДЕ
		|	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта = &ОР
		|	И торо_ПредшествующиеНормативныеРемонтыОборудования.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница
		|ПОМЕСТИТЬ ПараметрыЗамещения
		|ИЗ
		|	РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
		|ГДЕ
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта = &ОР
		|	И торо_ПараметрыЗамещенияПланированияРемонтныхРабот.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НормРемонты.ВидРемонта,
		|	НормРемонты.НормативныйРемонт,
		|	НормРемонты.СпособПланирования,
		|	НормРемонты.ГрафикРемонтныхРабот,
		|	НормРемонты.СпособВыполнения,
		|	НормРемонты.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
		|	НормРемонты.СпособУчетаДатыОтсчета,
		|	""Предшеств"" КАК Груп,
		|	NULL КАК ЗамещаемыйВидРемонта,
		|	NULL КАК НачальнаяГраница,
		|	NULL КАК КонечнаяГраница,
		|	NULL КАК СпособЗамещения,
		|	ПредшРемонты.ПредшествующийВидРемонта
		|ПОМЕСТИТЬ ИтогТаб
		|ИЗ
		|	НормРемонты КАК НормРемонты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПредшРемонты КАК ПредшРемонты
		|		ПО НормРемонты.ОбъектРемонта = ПредшРемонты.ОбъектРемонта
		|			И НормРемонты.ВидРемонта = ПредшРемонты.ВидРемонта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НормРемонты.ВидРемонта,
		|	НормРемонты.НормативныйРемонт,
		|	НормРемонты.СпособПланирования,
		|	НормРемонты.ГрафикРемонтныхРабот,
		|	НормРемонты.СпособВыполнения,
		|	НормРемонты.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
		|	НормРемонты.СпособУчетаДатыОтсчета,
		|	""Зам"",
		|	ПараметрыЗамещения.ЗамещаемыйВидРемонта,
		|	ПараметрыЗамещения.НачальнаяГраница,
		|	ПараметрыЗамещения.КонечнаяГраница,
		|	ПараметрыЗамещения.СпособЗамещения,
		|	NULL
		|ИЗ
		|	НормРемонты КАК НормРемонты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗамещения КАК ПараметрыЗамещения
		|		ПО НормРемонты.ОбъектРемонта = ПараметрыЗамещения.ОбъектРемонта
		|			И НормРемонты.ВидРемонта = ПараметрыЗамещения.ВидРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИтогТаб.ВидРемонта КАК ВидРемонта,
		|	ИтогТаб.НормативныйРемонт КАК НормативныйРемонт,
		|	ИтогТаб.СпособПланирования КАК СпособПланирования,
		|	ИтогТаб.ГрафикРемонтныхРабот КАК ГрафикРемонтныхРабот,
		|	ИтогТаб.СпособВыполнения КАК СпособВыполнения,
		|	ИтогТаб.НеИспользоватьВПланированииДатуВводаВЭксплуатацию КАК НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
		|	ИтогТаб.СпособУчетаДатыОтсчета КАК СпособУчетаДатыОтсчета,
		|	ИтогТаб.Груп КАК Груп,
		|	ИтогТаб.ЗамещаемыйВидРемонта,
		|	ИтогТаб.НачальнаяГраница,
		|	ИтогТаб.КонечнаяГраница,
		|	ИтогТаб.СпособЗамещения,
		|	ИтогТаб.ПредшествующийВидРемонта
		|ИЗ
		|	ИтогТаб КАК ИтогТаб
		|ИТОГИ
		|	МИНИМУМ(НормативныйРемонт),
		|	МИНИМУМ(СпособПланирования),
		|	МИНИМУМ(ГрафикРемонтныхРабот),
		|	МИНИМУМ(СпособВыполнения),
		|	МИНИМУМ(НеИспользоватьВПланированииДатуВводаВЭксплуатацию),
		|	МИНИМУМ(СпособУчетаДатыОтсчета)
		|ПО
		|	ВидРемонта,
		|	Груп";
	
		Запрос.УстановитьПараметр("ОР", МассивОбъектов[0]);
		
		Результат = Запрос.Выполнить();
		ВыборкаПервогоУровня = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		ВидНормативногоРемонта = Макет.ПолучитьОбласть     ("ВидНормативногоРемонта");
		ЗаголовокНормативныеРемонты = Макет.ПолучитьОбласть("ЗаголовокНормативныеРемонты");
		ТаблНормативныеРемонты = Макет.ПолучитьОбласть     ("ТаблНормативныеРемонты");
		
		Пока ВыборкаПервогоУровня.Следующий() Цикл
			
			ЗаполнитьИВывестиОбласть(ВидНормативногоРемонта,ТабДок,ВыборкаПервогоУровня);
			
			ТабДок.Вывести(ЗаголовокНормативныеРемонты);
			
			ЗаполнитьИВывестиОбласть(ТаблНормативныеРемонты,ТабДок,ВыборкаПервогоУровня);
			
			ВыборкаВторогоУровня = ВыборкаПервогоУровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			
			Пока ВыборкаВторогоУровня.Следующий() Цикл 
				Если ВыборкаВторогоУровня.Груп = "Предшеств" Тогда 
					
					ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокПредшРем"),ТабДок);
					
					ТаблПредшРем = Макет.ПолучитьОбласть("ТаблПредшРем");
					ВыборкаТретьегоУровня = ВыборкаВторогоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
					
					Пока ВыборкаТретьегоУровня.Следующий() Цикл 
						
						ЗаполнитьИВывестиОбласть(ТаблПредшРем,ТабДок,ВыборкаТретьегоУровня);
						
					КонецЦикла;
					
					
				ИначеЕсли ВыборкаВторогоУровня.Груп = "Зам" Тогда 
					
					ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокЗамещРем"),ТабДок);
					
					ТаблЗамещРем = Макет.ПолучитьОбласть("ТаблЗамещРем");
					ВыборкаТретьегоУровня = ВыборкаВторогоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
					
					Пока ВыборкаТретьегоУровня.Следующий() Цикл 
						
						ЗаполнитьИВывестиОбласть(ТаблЗамещРем,ТабДок,ВыборкаТретьегоУровня);
						
					КонецЦикла; 
					
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	///////////////////////////////////////////////////////////////////////////
	// Флаг Состав техкарт
	Если ПараметрыПечати.Свойство("ФлагТехкарты") И ПараметрыПечати.ФлагТехкарты = Истина  Тогда
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТехКартыРемонта"),ТабДок);
		
		//////////////////////////////////////////////////////////////////////////	
		
		// Область "ТаблВидыРемонта"  	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
		               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
		               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт
		               |ПОМЕСТИТЬ ВсеНормативы
		               |ИЗ
		               |	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		               |ГДЕ
		               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОР
		               |	И торо_НормативныеРемонтыОборудования.Приоритет
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ТехКарты_СписокОпераций.Ссылка КАК ТехКарта,
		               |	торо_ТехКарты_СписокОпераций.Продолжительность,
		               |	торо_ТехКарты_СписокОпераций.ID,
		               |	торо_ТехКарты_СписокОпераций.Операция,
		               |	торо_ТехКарты_СписокОпераций.Ссылка,
		               |	торо_ТехКарты_СписокОпераций.СпособВыполнения,
		               |	торо_ТехКарты_СписокОпераций.Количество КАК Кратность,
		               |	ВсеНормативы.ВидРемонта КАК ВидРемонта,
		               |	ВсеНормативы.НормативныйРемонт
		               |ПОМЕСТИТЬ СписокОпераций
		               |ИЗ
		               |	ВсеНормативы КАК ВсеНормативы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних(
		               |				,
		               |				ИдентификаторТехКарты В
		               |					(ВЫБРАТЬ
		               |						ВсеНормативы.НормативныйРемонт
		               |					ИЗ
		               |						ВсеНормативы КАК ВсеНормативы)) КАК торо_ВерсииТехКартСрезПоследних
		               |			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТехКарты.СписокОпераций КАК торо_ТехКарты_СписокОпераций
		               |			ПО торо_ВерсииТехКартСрезПоследних.ТехКарта = торо_ТехКарты_СписокОпераций.Ссылка
		               |		ПО ВсеНормативы.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ВидРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта КАК ОбъектРемонта,
		               |	СписокОпераций.ВидРемонта КАК ВидРемонта,
		               |	СписокОпераций.НормативныйРемонт КАК НормативныйРемонт,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество КАК Количество,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика,
		               |	ИСТИНА КАК Приоритет,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура.ЕдиницаИзмерения КАК НоменклатураЕдиницаИзмерения
		               |ПОМЕСТИТЬ МинимПриоритеты
		               |ИЗ
		               |	СписокОпераций КАК СписокОпераций
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
		               |		ПО СписокОпераций.ВидРемонта = торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта
		               |			И (торо_НормыЗапчастейНаОбъектыРемонта.Приоритет)
		               |ГДЕ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СписокОпераций.ВидРемонта КАК ВидРемонта,
		               |	СписокОпераций.НормативныйРемонт КАК НормативныйРемонт,
		               |	СписокОпераций.Операция КАК Операция,
		               |	СписокОпераций.Продолжительность КАК Продолжительность,
		               |	СписокОпераций.СпособВыполнения КАК СпособВыполнения,
		               |	""Материалы"" КАК ДопКолонка,
		               |	торо_РемонтыМатериальныеЗатраты.Номенклатура КАК Номенклатура,
		               |	торо_РемонтыМатериальныеЗатраты.КоличествоУпаковок КАК Количество,
		               |	ВЫБОР
		               |		КОГДА торо_РемонтыМатериальныеЗатраты.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		               |			ТОГДА торо_РемонтыМатериальныеЗатраты.Номенклатура.ЕдиницаИзмерения
		               |		ИНАЧЕ торо_РемонтыМатериальныеЗатраты.Упаковка
		               |	КОНЕЦ КАК ЕдиницаИзмерения,
		               |	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) * торо_РемонтыМатериальныеЗатраты.Количество * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК Сумма,
		               |	NULL КАК Квалификация,
		               |	NULL КАК ВремяРаботы,
		               |	NULL КАК Инструмент,
		               |	NULL КАК Показатель,
		               |	NULL КАК МерыБезопасности,
		               |	NULL КАК НомерСтроки
		               |ИЗ
		               |	Справочник.торо_ТехКарты.МатериальныеЗатраты КАК торо_РемонтыМатериальныеЗатраты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
		               |		ПО торо_РемонтыМатериальныеЗатраты.Ссылка = СписокОпераций.Ссылка
		               |			И торо_РемонтыМатериальныеЗатраты.ID = СписокОпераций.ID
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
		               |			ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
		               |		ПО торо_РемонтыМатериальныеЗатраты.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СписокОпераций.ВидРемонта,
		               |	СписокОпераций.НормативныйРемонт,
		               |	СписокОпераций.Операция,
		               |	СписокОпераций.Продолжительность,
		               |	СписокОпераций.СпособВыполнения,
		               |	""Трудозатраты"",
		               |	NULL,
		               |	торо_РемонтыТрудовыеЗатраты.Количество,
		               |	NULL,
		               |	ВЫРАЗИТЬ(торо_СтоимостьЧасаКвалификации.Стоимость * торо_РемонтыТрудовыеЗатраты.Количество * торо_РемонтыТрудовыеЗатраты.ВремяРаботы / 3600 * ЕСТЬNULL(КурсыВалютСрезПоследних.Курс, 0) / ЕСТЬNULL(КурсыВалютСрезПоследних.Кратность, 1) КАК ЧИСЛО(10, 2)),
		               |	торо_РемонтыТрудовыеЗатраты.Квалификация,
		               |	торо_РемонтыТрудовыеЗатраты.ВремяРаботы,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL
		               |ИЗ
		               |	Справочник.торо_ТехКарты.ТрудовыеЗатраты КАК торо_РемонтыТрудовыеЗатраты
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
		               |		ПО торо_РемонтыТрудовыеЗатраты.Ссылка = СписокОпераций.Ссылка
		               |			И торо_РемонтыТрудовыеЗатраты.ID = СписокОпераций.ID
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтоимостьЧасаКвалификации.СрезПоследних КАК торо_СтоимостьЧасаКвалификации
		               |		ПО торо_РемонтыТрудовыеЗатраты.Квалификация = торо_СтоимостьЧасаКвалификации.Квалификация
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
		               |		ПО (торо_СтоимостьЧасаКвалификации.Валюта = КурсыВалютСрезПоследних.Валюта)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СписокОпераций.ВидРемонта,
		               |	СписокОпераций.НормативныйРемонт,
		               |	СписокОпераций.Операция,
		               |	СписокОпераций.Продолжительность,
		               |	СписокОпераций.СпособВыполнения,
		               |	""Инструменты"",
		               |	NULL,
		               |	торо_РемонтыИнструментыИТехника.КоличествоУпаковок,
		               |	ВЫБОР
		               |		КОГДА торо_РемонтыИнструментыИТехника.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиНоменклатуры.ПустаяСсылка)
		               |			ТОГДА торо_РемонтыИнструментыИТехника.Инструмент.ЕдиницаИзмерения
		               |		ИНАЧЕ торо_РемонтыИнструментыИТехника.Упаковка
		               |	КОНЕЦ,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	торо_РемонтыИнструментыИТехника.Инструмент,
		               |	NULL,
		               |	NULL,
		               |	NULL
		               |ИЗ
		               |	Справочник.торо_ТехКарты.ИнструментыИТехника КАК торо_РемонтыИнструментыИТехника
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
		               |		ПО торо_РемонтыИнструментыИТехника.Ссылка = СписокОпераций.Ссылка
		               |			И торо_РемонтыИнструментыИТехника.ID = СписокОпераций.ID
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СписокОпераций.ВидРемонта,
		               |	СписокОпераций.НормативныйРемонт,
		               |	СписокОпераций.Операция,
		               |	СписокОпераций.Продолжительность,
		               |	СписокОпераций.СпособВыполнения,
		               |	""Показатели"",
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	торо_РемонтыИзмеряемыеПоказатели.Показатель,
		               |	NULL,
		               |	NULL
		               |ИЗ
		               |	Справочник.торо_ТехКарты.ИзмеряемыеПоказатели КАК торо_РемонтыИзмеряемыеПоказатели
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
		               |		ПО торо_РемонтыИзмеряемыеПоказатели.Ссылка = СписокОпераций.Ссылка
		               |			И торо_РемонтыИзмеряемыеПоказатели.ID = СписокОпераций.ID
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	СписокОпераций.ВидРемонта,
		               |	СписокОпераций.НормативныйРемонт,
		               |	""ДокИУслуги"",
		               |	NULL,
		               |	NULL,
		               |	""МерыБезопасности"",
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	торо_ТехКартыМерыБезопасности.МерыБезопасности,
		               |	торо_ТехКартыМерыБезопасности.НомерСтроки
		               |ИЗ
		               |	Справочник.торо_ТехКарты.МерыБезопасности КАК торо_ТехКартыМерыБезопасности
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокОпераций КАК СписокОпераций
		               |		ПО торо_ТехКартыМерыБезопасности.Ссылка = СписокОпераций.Ссылка
		               |			И торо_ТехКартыМерыБезопасности.ID = СписокОпераций.ID
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	МинимПриоритеты.ВидРемонта,
		               |	МинимПриоритеты.НормативныйРемонт,
		               |	""ДокИУслуги"",
		               |	NULL,
		               |	NULL,
		               |	""Номенклатура"",
		               |	МинимПриоритеты.Номенклатура,
		               |	МинимПриоритеты.Количество,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL,
		               |	NULL
		               |ИЗ
		               |	МинимПриоритеты КАК МинимПриоритеты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(&ТекущаяДата, ВидЦены = &ВидЦены) КАК ЦеныНоменклатурыСрезПоследних
		               |			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ТекущаяДата, ) КАК КурсыВалютСрезПоследних
		               |			ПО ЦеныНоменклатурыСрезПоследних.Валюта = КурсыВалютСрезПоследних.Валюта
		               |		ПО МинимПриоритеты.Номенклатура = ЦеныНоменклатурыСрезПоследних.Номенклатура
		               |			И МинимПриоритеты.Характеристика = ЦеныНоменклатурыСрезПоследних.Характеристика
		               |ИТОГИ
		               |	МАКСИМУМ(НормативныйРемонт),
		               |	МАКСИМУМ(Продолжительность),
		               |	МАКСИМУМ(СпособВыполнения),
		               |	СУММА(Сумма)
		               |ПО
		               |	ВидРемонта,
		               |	Операция,
		               |	ДопКолонка";
		
		
		
		Запрос.УстановитьПараметр("ОР", МассивОбъектов[0]);
		Запрос.УстановитьПараметр("ГР", МассивОбъектов[0].ТиповойОР);
		Запрос.УстановитьПараметр("ВидЦены", Константы.торо_ТипЦеныДляРасчетаСебестоимостиРемонта.Получить());
		Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
		
		Результат = Запрос.Выполнить();
		ВыборкаПервогоУровня = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		ЗаголовокВидыРемонта = Макет.ПолучитьОбласть("ЗаголовокВидыРемонта");
		ТаблВидыРемонта = Макет.ПолучитьОбласть("ТаблВидыРемонта");
		
		Пока ВыборкаПервогоУровня.Следующий() Цикл
			
			ТабДок.Вывести(ЗаголовокВидыРемонта);
			
			ЗаполнитьИВывестиОбласть(ТаблВидыРемонта,ТабДок,ВыборкаПервогоУровня);
			
			ЗаголовокИнструкции = Макет.ПолучитьОбласть("ЗаголовокИнструкции");			
			ЗаголовокНоменклатура = Макет.ПолучитьОбласть("ЗаголовокНоменклатура"); 
			
			ВыборкаВторогоУровня = ВыборкаПервогоУровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
			Пока ВыборкаВторогоУровня.Следующий() Цикл 						
				
				Если ВыборкаВторогоУровня.Операция <> "ДокИУслуги" Тогда
					
					ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТаблСписокОпераций"),ТабДок,ВыборкаВторогоУровня);
					
					
					ВыборкаТретьегоУровня = ВыборкаВторогоУровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);			
					
					Пока ВыборкаТретьегоУровня.Следующий() Цикл 
						
						Если ВыборкаТретьегоУровня.ДопКолонка = "Материалы" Тогда
							
							ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокМатерЗатраты"),ТабДок);
							
							ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
							
							Пока ВыборкаЧетвертогоУровня.Следующий() Цикл 
								
								ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ТаблМатерЗатраты"),ТабДок, ВыборкаЧетвертогоУровня);
								
							КонецЦикла;
						КонецЕсли;
						
						Если ВыборкаТретьегоУровня.ДопКолонка = "Трудозатраты" Тогда
							
							
							ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокКвалификация"),ТабДок); 												
							
							ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);						
							
							Пока ВыборкаЧетвертогоУровня.Следующий() Цикл
								
								
								Если ЗначениеЗаполнено(ВыборкаЧетвертогоУровня.Квалификация)Тогда 
									
									Область = Макет.ПолучитьОбласть("ТаблКвалификация");
									ЗаполнитьЗначенияСвойств(Область.Параметры,ВыборкаЧетвертогоУровня);
									Область.Параметры.ВремяРаботы = ПреобразоватьСекундыВоВремя(ВыборкаЧетвертогоУровня.ВремяРаботы);
									Табдок.Вывести(Область);
									
								КонецЕсли;	
							КонецЦикла;
						КонецЕсли;
						
						Если ВыборкаТретьегоУровня.ДопКолонка = "Инструменты" Тогда
							ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокИнструменты"),ТабДок);									
							
							ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой); 						
							
							ТаблИнструменты = Макет.ПолучитьОбласть("ТаблИнструменты");
							Пока ВыборкаЧетвертогоУровня.Следующий() Цикл 
								
								Если  ЗначениеЗаполнено(ВыборкаЧетвертогоУровня.Инструмент)Тогда 
									
									ЗаполнитьИВывестиОбласть(ТаблИнструменты, ТабДок, ВыборкаЧетвертогоУровня);
									
								КонецЕсли;
							КонецЦикла;
						КонецЕсли;
						
						Если ВыборкаТретьегоУровня.ДопКолонка = "Показатели" Тогда
							
							ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
							
							
							ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокИзмерПоказатели"),ТабДок); 					
							
							ТаблИзмерПоказатели = Макет.ПолучитьОбласть("ТаблИзмерПоказатели");
							
							Пока ВыборкаЧетвертогоУровня.Следующий() Цикл 
								Если  ЗначениеЗаполнено(ВыборкаЧетвертогоУровня.Показатель)Тогда
									
									ЗаполнитьИВывестиОбласть(ТаблИзмерПоказатели,ТабДок,ВыборкаЧетвертогоУровня);
									
								КонецЕсли
							КонецЦикла;
						КонецЕсли;
						
					КонецЦикла;
					
					Граница = Макет.ПолучитьОбласть("Граница");
					ТабДок.Вывести(Граница);
					
				Иначе  					               
					
					ВыборкаТретьегоУровня = ВыборкаВторогоУровня.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
					Пока ВыборкаТретьегоУровня.Следующий() Цикл 
						
						Если ВыборкаТретьегоУровня.ДопКолонка = "Номенклатура" Тогда
							ТабДок.Вывести(ЗаголовокНоменклатура); 
							ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
							Пока ВыборкаЧетвертогоУровня.Следующий() Цикл 
								ТаблНоменклитура = Макет.ПолучитьОбласть("ТаблНоменклитура");
								ТаблНоменклитура.Параметры.Заполнить(ВыборкаЧетвертогоУровня);
								ТабДок.Вывести(ТаблНоменклитура, ВыборкаЧетвертогоУровня.Уровень()); 
							КонецЦикла;
						КонецЕсли;
						
						Если ВыборкаТретьегоУровня.ДопКолонка = "МерыБезопасности" Тогда
							ТабДок.Вывести(ЗаголовокИнструкции); 
							ВыборкаЧетвертогоУровня = ВыборкаТретьегоУровня.Выбрать(ОбходРезультатаЗапроса.Прямой);
							Пока ВыборкаЧетвертогоУровня.Следующий() Цикл 
								ТаблИнструкции = Макет.ПолучитьОбласть("ТаблИнструкции");
								ТаблИнструкции.Параметры.Заполнить(ВыборкаЧетвертогоУровня);
								ТабДок.Вывести(ТаблИнструкции, ВыборкаЧетвертогоУровня.Уровень()); 
							КонецЦикла;
						КонецЕсли;
						
					КонецЦикла;
					Граница = Макет.ПолучитьОбласть("Граница2");
					ТабДок.Вывести(Граница);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////
	// Флаг ФлагКоэффициентыРемонтныхОсобенностей
	Если ПараметрыПечати.Свойство("ФлагКоэффициентыРемонтныхОсобенностей") И ПараметрыПечати.ФлагКоэффициентыРемонтныхОсобенностей = Истина  Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.Период КАК ДатаВвода,
		|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента КАК ВидКоэффициента,
		|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ЗначениеКоэффициента,
		|	торо_ВидыКоэффициентовРемонтныхОсобенностей.Рассчитываемый,
		|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ЗависитОтНаработки,
		|	торо_ВидыКоэффициентовРемонтныхОсобенностей.СчитатьВозрастОтДатыИзготовления,
		|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьГрафикРаботыОборудования,
		|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьПростоиОборудования,
		|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ПараметрНаработки
		|ИЗ
		|	РегистрСведений.торо_ЗначенияКоэффициентовРемонтныхОсобенностей.СрезПоследних(
		|			,
		|			ОбъектРемонта = &ОбъектРемонта
		|				И Использование) КАК торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ВидыКоэффициентовРемонтныхОсобенностей КАК торо_ВидыКоэффициентовРемонтныхОсобенностей
		|		ПО торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента = торо_ВидыКоэффициентовРемонтныхОсобенностей.Ссылка
		|ГДЕ
		|	НЕ торо_ВидыКоэффициентовРемонтныхОсобенностей.ПометкаУдаления";
		Запрос.УстановитьПараметр("ОбъектРемонта", МассивОбъектов[0]);
		РезультатЗапроса = Запрос.Выполнить();
		
		ТаблицаКоэффициентов = РезультатЗапроса.Выгрузить().СкопироватьКолонки("ДатаВвода,ВидКоэффициента, ЗначениеКоэффициента");
		ТаблицаКоэффициентов.Колонки.Добавить("Коэффициент");
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.Рассчитываемый Тогда
				Если Выборка.ЗависитОтНаработки Тогда
					
					НаработкаОР = ВычислитьТекущееЗначениеНаработки(МассивОбъектов[0], Выборка.ПараметрНаработки, Выборка.УчитыватьПростоиОборудования);
					Если НЕ НаработкаОР = Неопределено Тогда
						СтруктураКоэффициент = ПолучитьРассчитываемыйКоэффициент(НаработкаОР, Выборка.ВидКоэффициента);
						Если НЕ СтруктураКоэффициент = Неопределено Тогда
							
							НС = ТаблицаКоэффициентов.Добавить();
							НС.ДатаВвода = Выборка.ДатаВвода;
							НС.ВидКоэффициента = Выборка.ВидКоэффициента;
							НС.ЗначениеКоэффициента = СтруктураКоэффициент.ЗначениеКоэффициента;
							НС.Коэффициент = СтруктураКоэффициент.Коэффициент;
							
						КонецЕсли;
					КонецЕсли;
					
				Иначе
					Если Выборка.УчитыватьГрафикРаботыОборудования Тогда
						ВозрастОР = ВычислитьВремяРаботыОборудованияСУчетомГрафика(МассивОбъектов[0],Выборка.СчитатьВозрастОтДатыИзготовления);	
					Иначе
						Если Выборка.СчитатьВозрастОтДатыИзготовления Тогда
							ВозрастОР = Год(ТекущаяДата()) - Год(МассивОбъектов[0].ДатаВыпуска) + 1;
						Иначе
							ВозрастОР = Год(ТекущаяДата()) - Год(МассивОбъектов[0].ДатаВводаВЭксплуатацию) + 1;
						КонецЕсли;
					КонецЕсли;
					
					СтруктураКоэффициент = ПолучитьРассчитываемыйКоэффициент(ВозрастОР, Выборка.ВидКоэффициента);
					Если НЕ СтруктураКоэффициент = Неопределено Тогда
						
						НС = ТаблицаКоэффициентов.Добавить();
						НС.ДатаВвода            = Выборка.ДатаВвода;
						НС.ВидКоэффициента      = Выборка.ВидКоэффициента;
						НС.ЗначениеКоэффициента = СтруктураКоэффициент.ЗначениеКоэффициента;
						НС.Коэффициент          = СтруктураКоэффициент.Коэффициент;
						
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				НС = ТаблицаКоэффициентов.Добавить();
				НС.ДатаВвода            = Выборка.ДатаВвода;
				НС.ВидКоэффициента      = Выборка.ВидКоэффициента;
				НС.ЗначениеКоэффициента = Выборка.ЗначениеКоэффициента;
				НС.Коэффициент          = Выборка.ЗначениеКоэффициента.Коэффициент;
				
			КонецЕсли;
		КонецЦикла;
		
		Граница3 = Макет.ПолучитьОбласть("Граница3");
		ТабДок.Вывести(Граница3);
		
		// Заголовок
		ЗаголовокКоэфРемОсобенностей = Макет.ПолучитьОбласть("КоэффициентыРемонтныхОсобенностей");
		ТабДок.Вывести(ЗаголовокКоэфРемОсобенностей);
		
		// Шапка таблицы
		ШапкаКоэфРемОсобенностей = Макет.ПолучитьОбласть("ЗаголовокКоэфРемОсобенностей");
		ТабДок.Вывести(ШапкаКоэфРемОсобенностей);
		
		// Таблица
		Для Каждого Строка Из ТаблицаКоэффициентов Цикл
			СтрокаТаблицы = Макет.ПолучитьОбласть("ТаблКоэфРемОсобенностей");
			СтрокаТаблицы.Параметры.ДатаВвода            = Строка.ДатаВвода;
			СтрокаТаблицы.Параметры.ВидКоэффициента      = Строка.ВидКоэффициента;
			СтрокаТаблицы.Параметры.ЗначениеКоэффициента = Строка.ЗначениеКоэффициента;
			СтрокаТаблицы.Параметры.Коэффициент          = Строка.Коэффициент;
			ТабДок.Вывести(СтрокаТаблицы);
		КонецЦикла;                         
		
		Граница4 = Макет.ПолучитьОбласть("Граница4");
		ТабДок.Вывести(Граница4);
		
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////
	// Флаг Дополнительно
	Если ПараметрыПечати.Свойство("ФлагДополнительно") И ПараметрыПечати.ФлагДополнительно = Истина  Тогда
		
		Дополнительно = Макет.ПолучитьОбласть("Дополнительно");	
		Дополнительно.Параметры.Приоритет                  = ЗаголовокИОсновныеДанные.Приоритет;
		Дополнительно.Параметры.РемонтноеПодразделение     = ЗаголовокИОсновныеДанные.ПодразделениеИсполнитель;
		Дополнительно.Параметры.КонтрагентИсполнительРемонта = ЗаголовокИОсновныеДанные.КонтрагентИсполнительРемонта;
		Дополнительно.Параметры.НеУчаствуетВПланировании   = ЗаголовокИОсновныеДанные.НеУчаствуетВПланировании;
		Дополнительно.Параметры.ВестиУчетСерийныхЗапчастей = ЗаголовокИОсновныеДанные.ВестиУчетСерийныхЗапчастей;
		
		ТабДок.Вывести(Дополнительно);
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////
	// Флаг ПрикрепленныеФайлы
	Если ПараметрыПечати.Свойство("ФлагПрикрепленныеФайлы") И ПараметрыПечати.ФлагПрикрепленныеФайлы = Истина Тогда
		
		ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ГлФайлы"), ТабДок);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОбъектРемонта", МассивОбъектов[0]);
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ОбъектыРемонтаПрисоединенныеФайлы.Наименование,
		               |	торо_ОбъектыРемонтаПрисоединенныеФайлы.Описание
		               |ИЗ
		               |	Справочник.торо_ОбъектыРемонтаПрисоединенныеФайлы КАК торо_ОбъектыРемонтаПрисоединенныеФайлы
		               |ГДЕ
		               |	торо_ОбъектыРемонтаПрисоединенныеФайлы.ВладелецФайла = &ОбъектРемонта";
					   
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			ЗаполнитьИВывестиОбласть(Макет.ПолучитьОбласть("ЗаголовокФайлы"),ТабДок);
			
			Файл = Результат.Выбрать();
			
			Область = Макет.ПолучитьОбласть("ТаблФайлы");
			
			Пока Файл.Следующий() Цикл
				
				ЗаполнитьИВывестиОбласть(Область, ТабДок, Файл);
				
			КонецЦикла;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	
	
	ТабДок.ТолькоПросмотр = Истина;
	Возврат ТабДок;	
	
	
КонецФункции // ПечатьПаспортаОР(МассивОбъектов, ПараметрыПечати)

Процедура ЗаполнитьИВывестиОбласть(Область,ТабДок, ДанныеЗаполнения = Неопределено)
	
	Если ДанныеЗаполнения = Неопределено Тогда
		
		ТабДок.Вывести(Область);
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(Область.Параметры,ДанныеЗаполнения);
		
		// Обработка представления видов ремонта для печати
		Для Инд = 0 по Область.Параметры.Количество()-1 Цикл
			ТекПараметр = Область.Параметры.Получить(Инд);
			Если ТипЗнч(ТекПараметр) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
				Область.Параметры.Установить(Инд, торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ТекПараметр));
			КонецЕсли;
		КонецЦикла;
		
		ТабДок.Вывести(Область);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПреобразоватьСекундыВоВремя(Секунды)
	
	Часы    = Цел(Секунды / 3600);
	Минуты  = Цел((Секунды - 3600 * Часы) / 60);
	Время = ""+Часы + "час. " + Минуты + "мин.";
	Возврат(Время);
КонецФункции

#КонецОбласти

Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Истина;
	
КонецПроцедуры

Процедура ПриПолученииСлужебныхРеквизитов(Реквизиты) Экспорт
	
	Реквизиты.Добавить("НаборСвойств");
		
КонецПроцедуры

#КонецОбласти

#Область РаботаСПредставлениями

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	ФорматнаяСтрока = торо_РаботаСПользовательскимПредставлениемПовтИсп.ПолучитьФорматнуюСтроку("Справочники.торо_ОбъектыРемонта");
	Если ФорматнаяСтрока = Неопределено Тогда
		Возврат;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	СписокПолей = торо_РаботаСПользовательскимПредставлением.ПолучитьСписокПолей(ФорматнаяСтрока);
	
	Для Каждого Поле Из СписокПолей Цикл
		
		Поля.Добавить(Поле);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	ФорматнаяСтрока = торо_РаботаСПользовательскимПредставлениемПовтИсп.ПолучитьФорматнуюСтроку("Справочники.торо_ОбъектыРемонта");
	Если ФорматнаяСтрока = Неопределено Тогда
		Возврат;
	Иначе
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	Представление = торо_РаботаСПользовательскимПредставлением.ПолучитьПредставлениеПоФорматнойСтроке(ФорматнаяСтрока,Данные);
	
КонецПроцедуры

// Функция - заполняет список реквизитов, которые можно использовать при формировании форматной строки в конструкторе.
//
// Параметры:
//  СписокРеквизитов - СписокЗначений - пустой список значений для заполнения.
Процедура ЗаполнитьСписокРеквизитовДляФорматнойСтроки(СписокРеквизитов) Экспорт
	
	СписокРеквизитов.Добавить("Наименование",			"Наименование");
	СписокРеквизитов.Добавить("Код",					"Код");
	СписокРеквизитов.Добавить("АдресМестонахождения",	"Адрес местонахождения");
	СписокРеквизитов.Добавить("ДатаВводаВЭксплуатацию",	"Дата ввода в эксплуатацию");
	СписокРеквизитов.Добавить("ДатаВыпуска",			"Дата выпуска (постройки)");
	СписокРеквизитов.Добавить("ЗаводскойНомер",			"Заводской №");
	СписокРеквизитов.Добавить("Изготовитель",			"Изготовитель");
	СписокРеквизитов.Добавить("ИнвентарныйНомер",		"Инвентарный №");
	СписокРеквизитов.Добавить("Контрагент",				"Контрагент");	
	СписокРеквизитов.Добавить("Направление",			"Направление");
	СписокРеквизитов.Добавить("КодПоОКОФ",				"Код по ОКОФ");
	СписокРеквизитов.Добавить("НомерПаспорта",			"Номер паспорта (регистрационный)");
	СписокРеквизитов.Добавить("Организация",			"Организация");
	СписокРеквизитов.Добавить("ПлановыйГрафикРаботы",	"Плановый график работы");
	СписокРеквизитов.Добавить("Подразделение",			"Подразделение");
	СписокРеквизитов.Добавить("Приоритет",				"Приоритет");
	СписокРеквизитов.Добавить("ТекСтатусВУчете",		"Текущий статус в учете");
	СписокРеквизитов.Добавить("ТехНомер",				"Технологический №");
	СписокРеквизитов.Добавить("ТиповойОР",				"Типовой ОР");
	СписокРеквизитов.Добавить("Комментарий",			"Комментарий");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
