////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем СостояниеДереваОР;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ИерархияДляВводаНовыхОР) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект), Новый ФорматированнаяСтрока(НСтр("ru = 'Не заполнено значение константы ""Иерархия для ввода новых объектов ремонта""!'"),,,,"e1cib/app/Обработка.торо_ПанельАдминистрированияТОиР"));
        Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборОбъектРемонта) Тогда
		МассивСтрок = Дерево.ПолучитьЭлементы()[0].ПолучитьЭлементы();
		Если МассивСтрок.Количество() Тогда
			ИДСтроки = МассивСтрок[0].ПолучитьИдентификатор();
			Элементы.Дерево.Развернуть(ИДСтроки, Истина);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьДоступностьСозданияНовыхОР();
	
	ТипПоискаДанных = Элементы.ТипПоискаДанных.СписокВыбора[0].Значение;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") 
		И Параметры.Свойство("СтруктураИерархии") 
		И ЗначениеЗаполнено(Параметры.СтруктураИерархии) Тогда
		ТекСтруктураИерархии = Параметры.СтруктураИерархии;
	Иначе
		ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяСтруктураИерархии",
		Истина);
	КонецЕсли;
	
	Если Параметры.Свойство("ЗапретитьИзменениеИерархии") И Параметры.ЗапретитьИзменениеИерархии = Истина Тогда
		Элементы.ФормаСправочникторо_ОбъектыРемонтаНастройкаИерархии.Доступность = Ложь;
		Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаНастройкаИерархии.Доступность = Ложь;
		Элементы.СписокОбъектовКонтекстноеМенюСправочникторо_ОбъектыРемонтаНастройкаИерархии.Доступность = Ложь;
	КонецЕсли;
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	ИерархияДляВводаНовыхОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	
	Если ТекСтруктураИерархии = Справочники.торо_СтруктурыОР.ПустаяСсылка() Тогда
		ТекСтруктураИерархии = ИерархияДляВводаНовыхОР;
	КонецЕсли;
	
	Если Параметры.Свойство("ИспользоватьДокументыЖЦОборудования") Тогда
		ФОИспользоватьДокументыЖЦОборудования = Параметры.ИспользоватьДокументыЖЦОборудования;
	Иначе
		ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	КонецЕсли; 
	
	Если Параметры.Свойство("СтруктураОтбора") Тогда
		ОтборОбъектРемонта = Параметры.СтруктураОтбора;
	КонецЕсли;
	
	Если Параметры.Свойство("РазрешитьВыборГрупп") Тогда
		РазрешитьВыборГрупп = Параметры.РазрешитьВыборГрупп;
	КонецЕсли;
	
	Если Параметры.Свойство("СписокОР") Тогда
		СписокОР = Параметры.СписокОР;
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрНаработки") Тогда
		ПараметрНаработки = Параметры.ПараметрНаработки;
	КонецЕсли;
	
	Если Параметры.Свойство("ТочноНеЗакрыватьПриВыборе") Тогда
		ТочноНеЗакрыватьПриВыборе = Параметры.ТочноНеЗакрыватьПриВыборе;
	Иначе
		ТочноНеЗакрыватьПриВыборе = Ложь;
	КонецЕсли; 
	
	Если Параметры.Свойство("СписокСтатусов") Тогда
		СписокСтатусов.ЗагрузитьЗначения(Параметры.СписокСтатусов.ВыгрузитьЗначения());
	Иначе
		СписокСтатусов.Добавить(Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету);
		СписокСтатусов.Добавить(Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету);
		СписокСтатусов.Добавить(Перечисления.торо_СтатусыОРВУчете.СнятоСУчета);
	КонецЕсли;
	
	Если Не ФОИспользоватьДокументыЖЦОборудования Тогда
		Элементы.СписокОбъектовСтатусВУчете.Видимость = Ложь;
	КонецЕсли; 
	
	Если Параметры.Свойство("ИсходнаяСтруктураИерархии") Тогда
		ИсходнаяСтруктураИерархии = Параметры.ИсходнаяСтруктураИерархии;
	КонецЕсли;
	
	Если Параметры.Свойство("ТекЭлемент") Тогда
		ИсходныйЭлемент = Параметры.ТекЭлемент;
	КонецЕсли;
	
	ЗаполнитьПараметрыИерархии();
	
	ПравоИнтерактивнаяПометкаУдаления = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоИнтерактивноеДобавление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.торо_ОбъектыРемонта);
	
	СтруктураПараметровИерархии = Новый Структура(
	"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник,РодительИерархии",
	ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
	
	СтруктураПараметровФормы = Новый Структура(
	"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта, СписокСтатусов",
	ЭтаФорма.ИмяФормы, Неопределено, ОтборОбъектРемонта, СписокСтатусов);
	
	МассивСтруктурОР = Справочники.торо_ОбъектыРемонта.ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии,СтруктураПараметровФормы);
	торо_РаботаСИерархией.ЗаполнитьДопПоляСпискаОбъектовСервере(МассивСтруктурОР);
	ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР);
	
	// Функциональный опции
	ФОУчетЗапчастей = ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОУчетКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	ФОУчетНаработкиОборудования = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(Элементы.Дерево.ТекущиеДанные.Ссылка, ТекСтруктураИерархии);
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекДанные = Дерево.НайтиПоИдентификатору(Строка);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Ссылка) И НЕ ТекДанные.СвязиОбновлялись Тогда
		
		Если НЕ СтроитсяАвтоматически ИЛИ (СтроитсяАвтоматически И ИерархическийСправочник) Тогда
			
			СтрокиДерева = ТекДанные.ПолучитьЭлементы();
			Если СтрокиДерева.Количество() > 0 Тогда
				СтруктураПараметровИерархии = Новый Структура(
				"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник",
				ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
				
				СтруктураПараметровФормы = Новый Структура(
				"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта, СписокСтатусов",
				ЭтаФорма.ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта, СписокСтатусов);
				
				МассивЭлементов = Новый Массив;
				Для Каждого СтрокаДерева Из СтрокиДерева Цикл
					МассивЭлементов.Добавить(СтрокаДерева.Ссылка);
				КонецЦикла;
				
				СтруктураДобавления = ПолучитьСтруктуруНовыхСтрок(ТекДанные.Ссылка, СтруктураПараметровИерархии,МассивЭлементов,СтруктураПараметровФормы);
			КонецЕсли;
			ТекДанные.СвязиОбновлялись = Истина;
			
			Для каждого СтрокаДерева Из СтрокиДерева Цикл
				ТекЭлемСоотв = СтруктураДобавления[СтрокаДерева.Ссылка];
				Если ТекЭлемСоотв = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементыНайденнойСтроки = СтрокаДерева.ПолучитьЭлементы();
				
				Для каждого ТекЭлем Из ТекЭлемСоотв Цикл
					НС = ЭлементыНайденнойСтроки.Добавить();
					
					Если СтроитсяАвтоматически И ТипЗнч(ТекЭлем.РеквизитДопУпорядочиванияОР) <> Тип("Число") Тогда
						НС.Ссылка = ТекЭлем.РеквизитДопУпорядочивания;
					Иначе
						НС.Ссылка = ТекЭлем.ОбъектИерархии;
						НС.РеквизитДопУпорядочивания = ТекЭлем.РеквизитДопУпорядочиванияОР;
						
					КонецЕсли;		
					
					НС.РодительИерархии = ТекЭлем.Родитель;
					НС.ПометкаУдаления  = ТекЭлем.ПометкаУдаления;
					НС.Картинка 		= ТекЭлем.ИндексКартинки;
					НС.Код 				= ТекЭлем.Код;
					НС.ИнвентарныйНомер = ТекЭлем.ИнвентарныйНомер;
					НС.ЗаводскойНомер 	= ТекЭлем.ЗаводскойНомер;
					НС.ТехНомер 		= ТекЭлем.ТехНомер;
					НС.ЕстьФайлы		= ТекЭлем.ЕстьФайлы;
					
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Картинка = 4 Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаУдалить.Доступность = Ложь;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаУдалить.Доступность = Ложь;
		ИначеЕсли ПравоИнтерактивнаяПометкаУдаления Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаУдалить.Доступность = Истина;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаУдалить.Доступность = Истина;
		ИначеЕсли ТекДанные.Картинка = 9 Тогда 
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Ложь;
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Ложь;
		Иначе
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Истина;
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ДеревоПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборЗначения();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	торо_РаботаСИерархиейКлиент.ОбработкаПеретаскиванияВДереве(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, ЭтаФорма,ИзменяетсяДокументами, ТекСтруктураИерархии);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	торо_РаботаСИерархиейКлиент.ПередНачаломДобавления(Отказ, Копирование, ЭтаФорма, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Картинка = 4 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	торо_РаботаСИерархиейКлиент.ПередУдалением(Отказ, ЭтаФорма, РазрешенВводНовыхОР);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	торо_РаботаСИерархиейКлиент.ПередНачаломИзменения(Отказ, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов
&НаКлиенте
Процедура СписокОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
				
		Если ТекДанные.ЭтоРодитель Тогда			
			
			ИдентификаторРодителя = ПолучитьИдентификаторРодителяВДереве(Элементы.Дерево.ТекущиеДанные, ТекДанные.Ссылка);
			
			Если Не ИдентификаторРодителя = Неопределено Тогда
				Элементы.Дерево.ТекущаяСтрока = ИдентификаторРодителя;
			КонецЕсли;
		Иначе
			Если (ТекДанные.Картинка = 2 Или ТекДанные.Картинка = 3 
				Или ТекДанные.Картинка = 5 Или ТекДанные.Картинка = 6) И Элементы.ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр.Пометка Тогда
				
				Для Каждого ПодчиненныйЭлемент Из Элементы.Дерево.ТекущиеДанные.ПолучитьЭлементы() Цикл
					Если ПодчиненныйЭлемент.Ссылка = ТекДанные.Ссылка Тогда
						Элементы.Дерево.ТекущаяСтрока = ПодчиненныйЭлемент.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;				
			Иначе	
				Если ТекДанные.Картинка = 0 или ТекДанные.Картинка = 1 или ТекДанные.Картинка = 2 или ТекДанные.Картинка = 3 Тогда
					ВыборЗначения();
				Иначе 
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя выбрать группу!'"));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархиейКлиент.ОбработкаПеретаскиванияВДереве(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, ЭтаФорма,ИзменяетсяДокументами, ТекСтруктураИерархии);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	торо_РаботаСИерархиейКлиент.ПередНачаломДобавления(Отказ, Копирование, ЭтаФорма, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередУдалением(Элемент, Отказ)
	торо_РаботаСИерархиейКлиент.ПередУдалением(Отказ, ЭтаФорма, РазрешенВводНовыхОР);
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередНачаломИзменения(Элемент, Отказ)
	торо_РаботаСИерархиейКлиент.ПередНачаломИзменения(Отказ, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПрочихЭлементовФормы
&НаКлиенте
Процедура ЗначениеОтбораСпискаОбъектовРемонтаПриИзменении(Элемент)
	
	ОтборНаКлиентеСписокОР(Элемент.ТекстРедактирования);	
	ДеревоПриАктивизацииСтрокиОбработчикОжидания();	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОтбораСпискаОбъектовРемонтаОчистка(Элемент, СтандартнаяОбработка)	
	ОтборНаКлиентеСписокОР("");	
	ДеревоПриАктивизацииСтрокиОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОтбораСпискаОбъектовРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОтборНаКлиентеСписокОР(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаДанныхПриИзменении(Элемент)
	ОтборНаКлиентеСписокОР();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыборЗначения();	
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	СписокОбъектовПередНачаломДобавления(Истина, Ложь,Ложь,Ложь,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоложениеВИерархии(Команда)
	
	торо_РаботаСИерархиейКлиент.ИзменитьПоложениеВИерархии(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает идентификатор родителя строки в дереве находя его среди родителей переданной строки дерева.
&НаКлиенте
Функция ПолучитьИдентификаторРодителяВДереве(СтрокаДерева, Ссылка)
	
	Если Не СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
		Если СтрокаДерева.Ссылка = Ссылка Тогда
			Возврат СтрокаДерева.ПолучитьРодителя().ПолучитьИдентификатор();
		Иначе
			Возврат ПолучитьИдентификаторРодителяВДереве(СтрокаДерева.ПолучитьРодителя(), Ссылка);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции


&НаКлиенте
Процедура ВыборЗначения()
	
	ТекДанные = Неопределено;
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент;
	
	Если ТекЭлементФормы.Имя = "Дерево" Тогда
		
		ТекДанные = Элементы.Дерево.ТекущиеДанные;
		
	ИначеЕсли ТекЭлементФормы.Имя = "СписокОбъектов" Тогда
		
		ТекДанные = Элементы.СписокОбъектов.ТекущиеДанные;
		
	КонецЕсли;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.ссылка = "<>" тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Этот элемент не может быть добавлен в иерархию!'"));
		возврат;
	КонецЕсли;
	
	Если НЕ РазрешитьВыборГрупп И ТекДанные.Картинка = 5 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя выбрать группу!'"));
		Возврат;
	ИначеЕсли типЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Нельзя выбирать корень!'"));
		Возврат;
	ИначеЕсли ТекДанные.Картинка = 1 ИЛИ ТекДанные.Картинка = 3 ИЛИ ТекДанные.Картинка = 6 ИЛИ ТекДанные.Картинка = 8 ИЛИ ТекДанные.Картинка = 10 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыборЗначенияФрагмент",ЭтотОбъект,Новый Структура("ТекДанные",ТекДанные)),
			НСтр("ru = 'Выбранные данные помечены на удаление.
			|Выполнить выбор этих данных?'"),РежимДиалогаВопрос.ДаНет);
		Возврат;
	Иначе
		ВыборЗначенияФрагмент(КодВозвратаДиалога.Да,Новый Структура("ТекДанные",ТекДанные));
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияФрагмент(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = ДополнительныеПараметры.ТекДанные;
	
	Если ЗначениеЗаполнено(Параметры.КлючНазначенияИспользования) Тогда 
		Если Параметры.КлючНазначенияИспользования = "ДобавлениеВИерархию" Тогда
			Если ТекДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			СтруктураПараметровИерархии = Новый Структура(
			"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник,РодительИерархии",
			ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
			
			СтруктураПараметровФормы = Новый Структура(
			"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта, СписокСтатусов",
			ЭтаФорма.ИмяФормы, Неопределено, ОтборОбъектРемонта, СписокСтатусов);
			
			Если СтроитсяАвтоматически тогда
				
				Если ТипЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
					МассивОР = Новый Массив;
					МассивОР.Добавить(ТекДанные.Ссылка);
				Иначе
					МассивОР = торо_РаботаСИерархией.ПолучитьСписокПодчиненныхОбъектов(СтруктураПараметровИерархии,ТекДанные.Ссылка,СтруктураПараметровФормы);
				КонецЕсли;
				
			Иначе
				МассивОР = торо_РаботаСИерархией.ПолучитьСписокПодчиненныхОбъектов(СтруктураПараметровИерархии,ТекДанные.Ссылка,СтруктураПараметровФормы);
			КонецЕсли;
			
			отказ = ПроверитьЦикличностьДобавляемойВетки_НаСервере(ТекДанные.Ссылка, МассивОР);
			Если отказ тогда
				Возврат;
			КонецЕсли;
			
			Если МассивОР.Количество() > 1 Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ВыборЗначенияЗавершение", ЭтотОбъект, Новый Структура("ТекДанные,МассивОР", ТекДанные,МассивОР)), НСтр("ru = 'Выбрать все подчиненные объекты ремонта вместе с текущим?'"), РежимДиалогаВопрос.ДаНетОтмена);
			Иначе
				Если СтроитсяАвтоматически Тогда
					стрПараметров = Новый Структура;
					стрПараметров.Вставить("МассивОР", МассивОР);
					стрПараметров.Вставить("КореньВетки", ТекДанные.Ссылка);
					стрПараметров.Вставить("Иерархия", ТекСтруктураИерархии);
					
					ОповеститьОВыборе(стрПараметров);
				Иначе
					ОповеститьОВыборе(ТекДанные.Ссылка);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_НастройкаРегистрацииНаработкиЗависимыхОР" Тогда
			
			ВыбранноеЗначениеОР = СписокОР.НайтиПоЗначению(ТекДанные.Ссылка);
			Если ВыбранноеЗначениеОР = Неопределено Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У выбранного объекта ремонта не ведется учет наработки по параметру ""%1"".'"),ПараметрНаработки));
				ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
				Возврат;
			Иначе
				ЭтаФорма.ЗакрыватьПриВыборе = Истина;
				
				
				Если Не ТекДанные = Неопределено Тогда
					
					ОповеститьОВыборе(ТекДанные.Ссылка);
					
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		
		Если ЭтаФорма.ТекущийЭлемент.МножественныйВыбор Тогда
			
			ВыдСтроки = ЭтаФорма.ТекущийЭлемент.ВыделенныеСтроки;
			МассивОР = Новый Массив;
			Для Каждого ВыдСтрока Из ВыдСтроки Цикл
				МассивОР.Добавить(ЭтаФорма.ТекущийЭлемент.ДанныеСтроки(ВыдСтрока).Ссылка);
			КонецЦикла;
			ЭтаФорма.ЗакрыватьПриВыборе = Истина;
			ОповеститьОВыборе(МассивОР);
		Иначе
			Если Не ТекДанные = Неопределено Тогда
				
				Если ТочноНеЗакрыватьПриВыборе Тогда
				    ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
				Иначе	
					ЭтаФорма.ЗакрыватьПриВыборе = Истина;
				КонецЕсли; 
				
				ОповеститьОВыборе(ТекДанные.Ссылка);
				
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    МассивОР = ДополнительныеПараметры.МассивОР;
    
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		стрПараметров = Новый Структура;
		стрПараметров.Вставить("МассивОР", МассивОР);
		стрПараметров.Вставить("КореньВетки", ТекДанные.Ссылка);
		стрПараметров.Вставить("Иерархия", ТекСтруктураИерархии);

        ОповеститьОВыборе(стрПараметров);
    ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Если СтроитсяАвтоматически Тогда
			стрПараметров = Новый Структура;
			МассивОР = Новый Массив;
			МассивОР.Добавить(ТекДанные.Ссылка);
			стрПараметров.Вставить("МассивОР", МассивОР);
			стрПараметров.Вставить("КореньВетки", ТекДанные.Ссылка);
			стрПараметров.Вставить("Иерархия", ТекСтруктураИерархии);
			
			ОповеститьОВыборе(стрПараметров);
		Иначе
			ОповеститьОВыборе(ТекДанные.Ссылка);
		КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьЦикличностьДобавляемойВетки_НаСервере(УзелДобавления, МассивОР)
	
	МассивРодителей = Новый Массив;
	МассивРодителей.Добавить(ИсходныйЭлемент);
	ПолучитьРодителя(ИсходныйЭлемент, МассивРодителей);
	
	МассивОРОР = Новый Массив;
	МассивОРНеОР = Новый Массив;
	Для каждого текОР из МассивОР Цикл
		Если ТипЗнч(текОР) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			МассивОРОР.Добавить(текОР);
		Иначе 
			МассивОРНеОР.Добавить(текОР.Наименование);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК ОРРодитель
	               |ПОМЕСТИТЬ Вт_Родители
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка В(&МассивРодителей)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка КАК Потомок
	               |ПОМЕСТИТЬ Вт_Добавляемые
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка В(&МассивПотомков_ОР)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Наименование В(&МассивНаименований)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_Добавляемые.Потомок КАК Потомок
	               |ПОМЕСТИТЬ ВТ_ПотомкиСИндексом
	               |ИЗ
	               |	Вт_Добавляемые КАК Вт_Добавляемые
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	Потомок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПотомкиСИндексом.Потомок.Наименование КАК Наименование
	               |ИЗ
	               |	Вт_Родители КАК Вт_Родители
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ПотомкиСИндексом КАК ВТ_ПотомкиСИндексом
	               |		ПО Вт_Родители.ОРРодитель.Ссылка = ВТ_ПотомкиСИндексом.Потомок.Ссылка";
				   
	Запрос.УстановитьПараметр("МассивРодителей", МассивРодителей);
	Запрос.УстановитьПараметр("МассивПотомков_ОР", МассивОРОР);
	Запрос.УстановитьПараметр("МассивНаименований", МассивОРНеОР);
				   
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда
		Возврат ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	СписокЭлементов = "";
	первый = истина;
	Пока Выборка.Следующий() цикл
		Если первый тогда
			первый = ложь;
			СписокЭлементов = Выборка.Наименование;
		Иначе 
			СписокЭлементов = СписокЭлементов + ", " + Выборка.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'В ветке которую вы добавляете присутствуют элементы которые встречаются выше по дереву иерархии: %1. Добавление отменено!'"),СписокЭлементов));
	Возврат истина;				   
	
КонецФункции

&НаСервере 
Процедура ПолучитьРодителя(Элемент, МассивРодителей)
	
	ЭлементРодитель = торо_РаботаСИерархией.ПолучитьТекущихРодителейВИерархии(Элемент, ИсходнаяСтруктураИерархии);
	Если типЗнч(ЭлементРодитель[Элемент]) = Тип("Строка") Тогда
		возврат;
	КонецЕсли;
	МассивРодителей.Добавить(ЭлементРодитель[Элемент]);
	ПолучитьРодителя(ЭлементРодитель[Элемент], МассивРодителей);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьСозданияНовыхОР()
	
	торо_РаботаСИерархиейКлиент.УстановитьДоступностьСозданияНовыхОР(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
    
    ПриОткрытииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииФрагмент()
    
    УстановитьДоступностьСозданияНовыхОР();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтрокиОбработчикОжидания()
	
	Если ТекущийЭлементДерева = Элементы.Дерево.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанныеСписок = Элементы.СписокОбъектов.ТекущиеДанные;
	ТекОРВСписке = ?(ТекДанныеСписок = Неопределено,ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"),ТекДанныеСписок.Ссылка);
	торо_РаботаСИерархиейКлиент.УстановитьОтборВСписке(ЭтаФорма,Элементы.Дерево.ТекущиеДанные.Ссылка);
	Массив = СписокОбъектов.НайтиСтроки(Новый Структура("Ссылка",ТекОРВСписке));
	Если Массив.Количество() > 0 Тогда
		Элементы.СписокОбъектов.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор();
	КонецЕсли;
	 	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР)
	
	НС = Дерево.ПолучитьЭлементы().Добавить();
	НС.Ссылка = ТекСтруктураИерархии;
	НС.Картинка = 4;
	НС.СвязиОбновлялись = Истина;
	
	Если ЗначениеЗаполнено(ОтборОбъектРемонта) Тогда
		РодительИерархии = ОтборОбъектРемонта;
		ИмяКолонки = "ОбъектИерархии";
	Иначе
		Если СтроитсяАвтоматически Тогда
			РодительИерархии = Справочники[ИерархияТипРеквизитаОР].ПустаяСсылка();
		Иначе
			РодительИерархии = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли;
		ИмяКолонки = "РодительИерархии";
	КонецЕсли;
	
	Для Каждого ЭлементКорневой Из МассивСтруктурОР Цикл
		Если ЭлементКорневой[ИмяКолонки] = РодительИерархии Тогда
			НСКорневая = НС.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НСКорневая,ЭлементКорневой);
			НСКорневая.Ссылка = ЭлементКорневой.ОбъектИерархии;
			НСКорневая.Картинка = ЭлементКорневой.ИндексКартинки;
			НСКорневая.РеквизитДопУпорядочивания = ЭлементКорневой.РеквизитДопУпорядочиванияОР;
			Для Каждого ЭлементПодчиненный Из МассивСтруктурОР Цикл
				Если ЭлементПодчиненный.РодительИерархии = ЭлементКорневой.ОбъектИерархии Тогда
					НСПодчиненная = НСКорневая.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НСПодчиненная,ЭлементПодчиненный);
					НСПодчиненная.Ссылка = ЭлементПодчиненный.ОбъектИерархии;
					НСПодчиненная.Картинка = ЭлементПодчиненный.ИндексКартинки;
					НСПодчиненная.РеквизитДопУпорядочивания = ЭлементПодчиненный.РеквизитДопУпорядочиванияОР;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыИерархии()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СтруктурыОР.РазрешенВводНовыхОР,
	               |	торо_СтруктурыОР.ИзменяетсяДокументами,
	               |	торо_СтруктурыОР.СтроитсяАвтоматически,
				   |	торо_СтруктурыОР.РеквизитОР,
				   |	торо_СтруктурыОР.ТипРеквизитаОР
	               |ИЗ
	               |	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	               |ГДЕ
	               |	торо_СтруктурыОР.Ссылка = &СтруктураИерархии";
	Запрос.УстановитьПараметр("СтруктураИерархии",ТекСтруктураИерархии);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	РазрешенВводНовыхОР    = Выборка.РазрешенВводНовыхОР;
	ИзменяетсяДокументами  = Выборка.ИзменяетсяДокументами;
	СтроитсяАвтоматически  = Выборка.СтроитсяАвтоматически;
	ИерархияРеквизитОР	   = Выборка.РеквизитОР;
	ИерархияТипРеквизитаОР = Выборка.ТипРеквизитаОР;
	Если СтроитсяАвтоматически И ИерархияТипРеквизитаОР <> "" Тогда
		ИерархическийСправочник= Метаданные.Справочники[ИерархияТипРеквизитаОР].Иерархический;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруНовыхСтрок(Ссылка, ПараметрыСтруктурыИерархии, МассивЭлементов, СтруктураПараметровФормы)
	
	СтруктураВозврата = Справочники.торо_ОбъектыРемонта.ПолучитьСтруктуруНовыхСтрокДляДереваПриРазворачивании(Ссылка, ПараметрыСтруктурыИерархии,МассивЭлементов,СтруктураПараметровФормы);
	торо_РаботаСИерархией.ЗаполнитьДопПоляСпискаОбъектовСервере(СтруктураВозврата);
	
	СоответствиеВозврата = Новый Соответствие;
	Для каждого ЭлементСтруктуры из СтруктураВозврата Цикл
		ЭлемСоответсвия = СоответствиеВозврата[ЭлементСтруктуры.Родитель];
		Если ЭлемСоответсвия = Неопределено Тогда
			ЭлемСоответсвия = Новый Массив;
		КонецЕсли;
		ЭлемСоответсвия.Добавить(ЭлементСтруктуры);
		СоответствиеВозврата.Вставить(ЭлементСтруктуры.Родитель, ЭлемСоответсвия);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекущийОР,ТекСтруктураИерархии)
	
	Справочники.торо_ОбъектыРемонта.ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекущийОР, ТекСтруктураИерархии, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаКлиентеСписокОР(Текст = Неопределено)
	Если Текст = Неопределено Тогда
		Текст = Элементы.ЗначениеОтбораСпискаОбъектовРемонта.ТекстРедактирования;		
	КонецЕсли;
	
	РеквизитПоиска = ТипПоискаДанных;
	СтруктураОтбора = Новый Структура;
	
	Если Текст <> "" Тогда
		Кнопка = Элементы.ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр;
		Если Кнопка.Пометка Тогда
			Кнопка.Пометка = НЕ Кнопка.Пометка;
			торо_РаботаСИерархиейКлиент.УстановитьОтборВСписке(ЭтаФорма, Неопределено, Истина);
		КонецЕсли;
		СтруктураОтбора.Вставить(РеквизитПоиска, СокрЛП(Текст));	
	КонецЕсли;

	Элементы.СписокОбъектов.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);		
КонецПРоцедуры

&НаКлиенте
Процедура СписокОбъектовПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр.Пометка Тогда
		Если ЭтаФорма.ТекущийЭлемент = Элементы.СписокОбъектов И (ТекущиеДанные.ЭтоРодитель ИЛИ ТекущиеДанные.Картинка = 9) Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Ложь;
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Ложь;
		Иначе
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Истина;
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Истина;
		КонецЕсли;
			
		Возврат;
	Иначе 
		Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Истина;
		Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

СостояниеДереваОР = Новый Структура("МассивОткрытыхОР",Новый Массив);
#КонецОбласти


