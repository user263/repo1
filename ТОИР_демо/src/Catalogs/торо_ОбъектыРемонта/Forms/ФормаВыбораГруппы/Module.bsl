#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") 
		И Параметры.Свойство("СтруктураИерархии") Тогда
		ТекСтруктураИерархии = Параметры.СтруктураИерархии;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаНастройкаИерархии.Видимость = Ложь;
		Элементы.ФормаКоманднаяПанель.ПодчиненныеЭлементы.ФормаНастройкаИерархии.Доступность = Ложь;
	Иначе
		ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяСтруктураИерархии",
		Истина);
	КонецЕсли;
		
	Если Параметры.Свойство("СписокОР") Тогда
		СписокОР = Параметры.СписокОР;
	КонецЕсли;
	
	Если Параметры.Свойство("ПараметрНаработки") Тогда
		ПараметрНаработки = Параметры.ПараметрНаработки;
	КонецЕсли;
		
	ЗаполнитьДеревоНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьДоступностьСозданияНовыхОР();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если НЕ Элементы.Дерево.ТекущиеДанные = Неопределено 
		И ТипЗнч(Элементы.Дерево.ТекущиеДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(Элементы.Дерево.ТекущиеДанные.Ссылка, ТекСтруктураИерархии, Истина);
	КонецЕсли;
	Обновить(ЭтаФорма.Команды.Обновить);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево
&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборЗначения();	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекДанные = Дерево.НайтиПоИдентификатору(Строка);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Ссылка) И НЕ ТекДанные.СвязиОбновлялись Тогда
		СтрокиДерева = ТекДанные.ПолучитьЭлементы();
		Если СтрокиДерева.Количество() > 0 Тогда
			СтруктураДобавления = ПолучитьСтруктуруНовыхСтрок(ТекДанные.Ссылка);
		КонецЕсли;
		ТекДанные.СвязиОбновлялись = Истина;
		
		Для каждого СтрокаДерева Из СтрокиДерева Цикл
			Для каждого ТекЭлем Из СтруктураДобавления Цикл
				Если ТекЭлем.Значение.Родитель <> СтрокаДерева.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				НС = СтрокаДерева.ПолучитьЭлементы().Добавить();
				НС.Ссылка = ТекЭлем.Значение.ОбъектИерархии;
				НС.РодительИерархии = ТекЭлем.Значение.Родитель;
				НС.ПометкаУдаления = ТекЭлем.Значение.ПометкаУдаления;
				НС.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(НС.Ссылка, ТекСтруктураИерархии);
				НС.РеквизитДопУпорядочивания = ТекЭлем.Ключ;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтрокиОбработчикОжидания()
	
	Если ТекущийЭлементДерева = Элементы.Дерево.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборВСписке(Элементы.Дерево.ТекущиеДанные.Ссылка, Элементы.ФормаИерархическийПросмотр.Пометка);
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов
&НаКлиенте
Процедура СписокОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборЗначения();
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Обновить(Команда)
	
	Дерево.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьДеревоНаСервере();		
	
	Элементы.Дерево.Развернуть(Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаГруппы",
		Новый Структура("ЭтоГруппа, СтруктураИерархии, РодительИерархии", Истина, ТекСтруктураИерархии, ?(Элементы.Дерево.ТекущиеДанные = Неопределено, Неопределено, Элементы.Дерево.ТекущиеДанные.Ссылка)),
		ЭтаФорма);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоложениеВИерархии(Команда)
	Если ПроверитьПравоНаСервере("Редактирование") Тогда
		
		ТекДанные = Элементы.Дерево.ТекущиеДанные;
		
		Если ТекДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВыбранноеЗначение = Неопределено;

		РодительскаяСтрока = ТекДанные.ПолучитьРодителя();
		КоличествоПодчиненных = РодительскаяСтрока.ПолучитьЭлементы().Количество();
		РодительИерархии = РодительскаяСтрока.Ссылка;
		
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаДереваИерархии", Новый Структура("Ключ, ТекущийОбъект, РодительИерархии, СтруктураИерархии", Дерево, Элементы.Дерево.ТекущаяСтрока, Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока).РодительИерархии, ТекСтруктураИерархии), ЭтаФорма,,,, Новый ОписаниеОповещения("ИзменитьПоложениеВИерархииЗавершение", ЭтотОбъект, Новый Структура("РодительИерархии, ТекДанные, ЭтаФорма, КоличествоПодчиненных", РодительИерархии, ТекДанные, ЭтаФорма, КоличествоПодчиненных)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыборЗначения();	
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархическийПросмотр(Команда)
	
	Кнопка = Элементы.ФормаИерархическийПросмотр;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ТекДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		СписокОбъектов.Очистить();
		УстановитьОтборВСписке(ТекДанные.Ссылка, Кнопка.Пометка, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаУдаления(Команда)
	Если ПроверитьПравоНаСервере("ИнтерактивнаяПометкаУдаления") Тогда
		ТекДанные = Элементы.Дерево.ТекущиеДанные;
		Если НЕ ТекДанные = Неопределено Тогда
			Если ТекДанные.ПометкаУдаления Тогда
				ПометитьНаУдалениеНаСервере(ТекДанные.Ссылка);
				Обновить(ЭтаФорма.Команды.Обновить);
			Иначе
				
				Если ТипЗнч(ТекДанные.Ссылка) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
					СтрокаДерева = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
					КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
					Если КоллекцияЭлементов.Количество() > 0 Тогда
						Ответ = Неопределено;

						ПоказатьВопрос(Новый ОписаниеОповещения("ПометкаУдаленияЗавершение", ЭтотОбъект, Новый Структура("КоллекцияЭлементов, ТекДанные", КоллекцияЭлементов, ТекДанные)), НСтр("ru = 'Все подчиненные объекты ремонта переместятся в корень иерархии. Продолжить?'"), РежимДиалогаВопрос.ДаНет);
					Иначе
						
						ПометитьНаУдалениеНаСервере(ТекДанные.Ссылка);
						РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
						КоличествоПодчиненных = РодительскаяСтрока.ПолучитьЭлементы().Количество();
						
						ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекДанные.Ссылка, ТекСтруктураИерархии, Ложь);
						ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(РодительскаяСтрока.Ссылка, ТекСтруктураИерархии, КоличествоПодчиненных > 0);
						
						Обновить(ЭтаФорма.Команды.Обновить);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	Если ПроверитьПравоНаСервере("Редактирование") Тогда
		
		Ответ = Неопределено;

		
		ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьЗавершение", ЭтотОбъект), НСтр("ru = 'Вы уверены что хотите удалить объект ремонта из иерархии?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	ТекДанные = Неопределено;
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент;
	
	Если ТекЭлементФормы.Имя = "Дерево" Тогда
		
		ТекДанные = Элементы.Дерево.ТекущиеДанные;
		
	ИначеЕсли ТекЭлементФормы.Имя = "СписокОбъектов" Тогда
		
		ТекДанные = Элементы.СписокОбъектов.ТекущиеДанные;
		
	КонецЕсли;
	
	Если НЕ ТекДанные = Неопределено Тогда
		ПоказатьЗначение(Неопределено, ТекДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархии(Команда)
	
	ПараметрыОткрытия = Новый Структура("СписокИерархийОР,ТекСтруктураИерархии",ЗаполнитьСписокСтруктурНаСервере(), торо_РаботаСИерархией.ПолучитьСписокИерархий(),ЭтаФорма.ТекСтруктураИерархии);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаНастройкиВидаИерархии",ПараметрыОткрытия,ЭтаФорма,,,,
				Новый ОписаниеОповещения("НастройкаИерархииЗавершение",ЭтотОбъект,Новый Структура("ЭтаФорма",ЭтаФорма)),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьДеревоНаСервере()
	
	ДеревоСФормы = РеквизитФормыВЗначение("Дерево");
	
	ИзменяетсяДокументами = ТекСтруктураИерархии.ИзменяетсяДокументами;
	
	НС = ДеревоСФормы.Строки.Добавить();
	НС.Ссылка = ТекСтруктураИерархии;
	НС.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(НС.Ссылка, ТекСтруктураИерархии);
	НС.СвязиОбновлялись = Истина;
	
	ЗаполнитьОсновноеВДеревеСервере(НС, ТекСтруктураИерархии);
	
	ЗначениеВРеквизитФормы(ДеревоСФормы, "Дерево");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновноеВДеревеСервере(СтрокаДерева, СтруктураИерархии, ЕстьКартинка = Истина)
	
	РодительИерархии = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	
	Если ИзменяетсяДокументами Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		               |ПОМЕСТИТЬ РасположениеОР
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ
		               |	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии
		               |	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии.ЭтоГруппа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
		               |ПОМЕСТИТЬ ТабБезПорядка
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		               |ГДЕ
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии В
		               |			(ВЫБРАТЬ
		               |				РасположениеОР.ОбъектИерархии
		               |			ИЗ
		               |				РасположениеОР КАК РасположениеОР)
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РасположениеОР.ОбъектИерархии,
		               |	РасположениеОР.СтруктураИерархии,
		               |	РасположениеОР.РодительИерархии
		               |ИЗ
		               |	РасположениеОР КАК РасположениеОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабБезПорядка.ОбъектИерархии,
		               |	ТабБезПорядка.СтруктураИерархии,
		               |	ТабБезПорядка.РодительИерархии,
		               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
		               |ИЗ
		               |	ТабБезПорядка КАК ТабБезПорядка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
		               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	РеквизитДопУпорядочиванияОР";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		               |ПОМЕСТИТЬ РасположениеОР
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		               |	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии
		               |	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии.ЭтоГруппа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
		               |ПОМЕСТИТЬ ТабБезПорядка
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии В
		               |			(ВЫБРАТЬ
		               |				РасположениеОР.ОбъектИерархии
		               |			ИЗ
		               |				РасположениеОР КАК РасположениеОР)
		               |	И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	РасположениеОР.ОбъектИерархии,
		               |	РасположениеОР.СтруктураИерархии,
		               |	РасположениеОР.РодительИерархии
		               |ИЗ
		               |	РасположениеОР КАК РасположениеОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабБезПорядка.ОбъектИерархии,
		               |	ТабБезПорядка.СтруктураИерархии,
		               |	ТабБезПорядка.РодительИерархии,
		               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
		               |ИЗ
		               |	ТабБезПорядка КАК ТабБезПорядка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		               |		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
		               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	РеквизитДопУпорядочиванияОР";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);				
	Запрос.УстановитьПараметр("РодительИерархии", РодительИерархии);
	
   РезультатЗапроса = Запрос.Выполнить();
   
   Если РезультатЗапроса.Пустой() Тогда
	   Возврат;
   КонецЕсли;
   
   ТаблицаИерархии = РезультатЗапроса.Выгрузить();	
   
   СтруктураПоиска = Новый Структура("РодительИерархии", РодительИерархии);
   МассивКорневыхСтрок = ТаблицаИерархии.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Элем Из МассивКорневыхСтрок Цикл
		
		НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
		НовСтрокаДерева.Ссылка = Элем.ОбъектИерархии;
		НовСтрокаДерева.РодительИерархии = Элем.РодительИерархии;
		НовСтрокаДерева.ПометкаУдаления = Элем.ОбъектИерархии.ПометкаУдаления;
		НовСтрокаДерева.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(НовСтрокаДерева.Ссылка, СтруктураИерархии);
		НовСтрокаДерева.РеквизитДопУпорядочивания = Элем.РеквизитДопУпорядочиванияОР;
		
		СтруктураПоиска = Новый Структура("РодительИерархии", Элем.ОбъектИерархии);
		МассивСтрок = ТаблицаИерархии.НайтиСтроки(СтруктураПоиска);
		
		Для каждого ЭлементМассива ИЗ МассивСтрок Цикл
			НС = НовСтрокаДерева.Строки.Добавить();
			НС.Ссылка = ЭлементМассива.ОбъектИерархии;
			НС.РодительИерархии = ЭлементМассива.РодительИерархии;
			НС.ПометкаУдаления = ЭлементМассива.ОбъектИерархии.ПометкаУдаления;
			НС.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(НС.Ссылка, СтруктураИерархии);
			НС.РеквизитДопУпорядочивания = ЭлементМассива.РеквизитДопУпорядочиванияОР;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(СсылкаСтроки, СтруктураИерархии, ПометкаУдаления = Неопределено)
	
	Если ТипЗнч(СсылкаСтроки) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ОбъектыРемонтаГруппы.ОбъектИерархии,
		|	торо_ОбъектыРемонтаГруппы.СтруктураИерархии,
		|	торо_ОбъектыРемонтаГруппы.ОбъектГруппа
		|ИЗ
		|	РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
		|ГДЕ
		|	торо_ОбъектыРемонтаГруппы.ОбъектИерархии = &ОбъектИерархии
		|	И торо_ОбъектыРемонтаГруппы.СтруктураИерархии = &СтруктураИерархии
		|	И торо_ОбъектыРемонтаГруппы.ОбъектГруппа";
		
		Запрос.УстановитьПараметр("ОбъектИерархии", СсылкаСтроки);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТабВыборки = РезультатЗапроса.Выгрузить();
		
		Если СсылкаСтроки.ЭтоГруппа Тогда
			ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 6, 5),?(ПометкаУдаления, 6, 5));
		ИначеЕсли ТабВыборки.Количество() > 0 Тогда
			ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 3, 2),?(ПометкаУдаления, 3, 2));
		Иначе
			ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 1, 0),?(ПометкаУдаления, 1, 0));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаСтроки) = Тип("Строка") Тогда
		
		ИндексКартинки = 9;
		
	ИначеЕсли ТипЗнч(СсылкаСтроки) <> Тип("СправочникСсылка.торо_СтруктурыОР") И ТипЗнч(СсылкаСтроки) <> Тип("Строка") Тогда 
		
		ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 10, 9),?(ПометкаУдаления, 10, 9));
		
	Иначе
		
		ИндексКартинки = 4;
		
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции // ОпределитьИндексКартинки()

&НаСервере
Функция ПолучитьСтруктуруНовыхСтрок(Ссылка)
	
	СтруктураВозврата = Новый Соответствие;
	
	Если ИзменяетсяДокументами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии КАК Ссылка,
		               |	торо_РасположениеОРВСтруктуреИерархии.СтруктураИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархии.РодительИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархии.ОбъектИерархии.ПометкаУдаления КАК ПометкаУдаления
		               |ПОМЕСТИТЬ ТабБезПорядка
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархии
		               |		ПО (торо_РасположениеОРВСтруктуреИерархии.РодительИерархии = торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии)
		               |ГДЕ
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии = &РодительИерархии
					   |	И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии.ЭтоГруппа
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабБезПорядка.Ссылка,
		               |	ТабБезПорядка.СтруктураИерархии,
		               |	ТабБезПорядка.РодительИерархии,
		               |	ТабБезПорядка.ПометкаУдаления,
		               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
		               |ИЗ
		               |	ТабБезПорядка КАК ТабБезПорядка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		               |		ПО ТабБезПорядка.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
		               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	РеквизитДопУпорядочиванияОР";
		
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ИерархическиеСтруктурыОР.ОбъектИерархии КАК Ссылка,
		               |	ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	ИерархическиеСтруктурыОР.РодительИерархии,
		               |	ИерархическиеСтруктурыОР.ОбъектИерархии.ПометкаУдаления КАК ПометкаУдаления
					   |ПОМЕСТИТЬ ТабБезПорядка
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ИерархическиеСтруктурыОР
		               |		ПО (ИерархическиеСтруктурыОР.РодительИерархии = торо_ИерархическиеСтруктурыОР.ОбъектИерархии)
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		               |	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии
		               |	И ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
					   |	И ИерархическиеСтруктурыОР.ОбъектИерархии.ЭтоГруппа		              
					   |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТабБезПорядка.Ссылка,
		               |	ТабБезПорядка.СтруктураИерархии,
		               |	ТабБезПорядка.РодительИерархии,
		               |	ТабБезПорядка.ПометкаУдаления,
		               |	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
		               |ИЗ
		               |	ТабБезПорядка КАК ТабБезПорядка
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		               |		ПО ТабБезПорядка.Ссылка = торо_ПорядокОРПоИерархии.ОбъектРемонта
		               |			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	РеквизитДопУпорядочиванияОР";
	КонецЕсли;			   
	Запрос.УстановитьПараметр("СтруктураИерархии", ТекСтруктураИерархии);				
	Запрос.УстановитьПараметр("РодительИерархии", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураВозврата.Вставить(Выборка.РеквизитДопУпорядочиванияОР, Новый Структура("ОбъектИерархии, Родитель, ПометкаУдаления",Выборка.Ссылка, Выборка.РодительИерархии, Выборка.ПометкаУдаления));
	КонецЦикла;
	
	Возврат СтруктураВозврата;  
	
КонецФункции

&НаСервере
Процедура УстановитьОтборВСписке(РодительИерархии, ИерархическийПросмотр,Перезаполнить = Ложь)
	
	Если ИерархическийПросмотр Тогда
		
		СписокОбъектов.Очистить();
		
		Если ИзменяетсяДокументами Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ОбъектыРемонта.Ссылка,
			|	торо_ОбъектыРемонта.Наименование,
			|	торо_ОбъектыРемонта.ТехНомер,
			|	торо_ОбъектыРемонта.Код,
			|	торо_ОбъектыРемонта.ИнвентарныйНомер
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
			|			,
			|			СтруктураИерархии = &СтруктураИерархии
			|				И РодительИерархии = &РодительИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ПО торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			|ГДЕ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
			|	И торо_ОбъектыРемонта.ЭтоГруппа";
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ОбъектыРемонта.Ссылка,
			|	торо_ОбъектыРемонта.Наименование,
			|	торо_ОбъектыРемонта.ТехНомер,
			|	торо_ОбъектыРемонта.Код,
			|	торо_ОбъектыРемонта.ИнвентарныйНомер
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			|	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии
			|	И торо_ОбъектыРемонта.ЭтоГруппа";
		КонецЕсли;
		Запрос.УстановитьПараметр("СтруктураИерархии", ТекСтруктураИерархии);
		Запрос.УстановитьПараметр("РодительИерархии", ?(ТипЗнч(РодительИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта"), РодительИерархии, Справочники.торо_ОбъектыРемонта.ПустаяСсылка()));
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НС = СписокОбъектов.Добавить();
			НС.Ссылка = Выборка.Ссылка;
			НС.Наименование = Выборка.Наименование;
			НС.Код = Выборка.Код;
			НС.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
			НС.ТехНомер = Выборка.ТехНомер;
			НС.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(Выборка.Ссылка, ТекСтруктураИерархии);
		КонецЦикла;
	ИначеЕсли НЕ ИерархическийПросмотр И Перезаполнить Тогда
		Если ИзменяетсяДокументами Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ОбъектыРемонта.Ссылка,
			|	торо_ОбъектыРемонта.Наименование,
			|	торо_ОбъектыРемонта.ТехНомер,
			|	торо_ОбъектыРемонта.Код,
			|	торо_ОбъектыРемонта.ИнвентарныйНомер
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
			|			,
			|			СтруктураИерархии = &СтруктураИерархии
			|				) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ПО торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			|ГДЕ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
			|	И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Ссылка.ЭтоГруппа";
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	торо_ОбъектыРемонта.Ссылка,
			|	торо_ОбъектыРемонта.Наименование,
			|	торо_ОбъектыРемонта.ТехНомер,
			|	торо_ОбъектыРемонта.Код,
			|	торо_ОбъектыРемонта.ИнвентарныйНомер
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			|	И торо_ИерархическиеСтруктурыОР.Ссылка.ЭтоГруппа";
		КонецЕсли;
		Запрос.УстановитьПараметр("СтруктураИерархии", ТекСтруктураИерархии);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НС = СписокОбъектов.Добавить();
			НС.Ссылка = Выборка.Ссылка;
			НС.Наименование = Выборка.Наименование;
			НС.Код = Выборка.Код;
			НС.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
			НС.ТехНомер = Выборка.ТехНомер;
			НС.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(Выборка.Ссылка, ТекСтруктураИерархии);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоложениеВИерархииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РодительИерархии      = ДополнительныеПараметры.РодительИерархии;
    ТекДанные             = ДополнительныеПараметры.ТекДанные;
    
    ВыбранноеЗначение = Результат;
	
	Если торо_РаботаСИерархиейКлиент.ПеремещениеПриведетКЗацикливанию(ТекДанные, ВыбранноеЗначение) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Перемещение объекта ремонта приведет к зацикливанию. Перемещение невозможно.'");
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	Если НЕ ВыбранноеЗначение = Неопределено
        И НЕ ТекДанные.Ссылка = ВыбранноеЗначение
        И НЕ ТекДанные.РодительИерархии = Неопределено Тогда
        
        Если ИзменяетсяДокументами Тогда
			
			ПараметрыОткрытия = Новый Структура();
			ПараметрыОткрытия.Вставить("СтруктураИерархии",ЭтаФорма.ТекСтруктураИерархии);
			ПараметрыОткрытия.Вставить("ОбъектИерархии"   ,ТекДанные.Ссылка);
			ПараметрыОткрытия.Вставить("РодительИерархии" ,ВыбранноеЗначение);
			
			ОткрытьФорму("Документ.торо_ИзменениеПоложенияВСтруктуреИерархии.ФормаОбъекта",ПараметрыОткрытия,ЭтаФорма);
			
        Иначе
			
			ИзменитьПоложениеВИерархииЗавершениеНаСервере(ТекДанные.Ссылка,ЭтаФорма.ТекСтруктураИерархии,ВыбранноеЗначение, РодительИерархии);
            
            Обновить(ЭтаФорма.Команды.Обновить);
            
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаСервере 
Процедура ИзменитьПоложениеВИерархииЗавершениеНаСервере(ОбъектРемонта, ТекСтруктураИерархии, ВыбранноеЗначение, РодительИерархии)
	
	Справочники.торо_ОбъектыРемонта.ИзменитьПоложениеВИерархии(ОбъектРемонта, ТекСтруктураИерархии, ВыбранноеЗначение, РодительИерархии);
	
КонецПроцедуры
 

&НаСервереБезКонтекста
Процедура ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ОбъектРемонта, СтруктураИерархии, ОбъектГруппа = Неопределено)
	
	Справочники.торо_ОбъектыРемонта.ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ОбъектРемонта, СтруктураИерархии, ОбъектГруппа);	
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаписиДереваНаСервере(Ссылка, РодительИерархии)
	
	Если НЕ ТипЗнч(Ссылка) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
		
		Если ИзменяетсяДокументами Тогда
			
			Если НЕ ТаблицаУдаляемых = Неопределено Тогда
				НоваяСтрокаТЗ = ТаблицаУдаляемых.Добавить();
				НоваяСтрокаТЗ.Удален = Истина;
				НоваяСтрокаТЗ.ОбъектИерархии = Ссылка;
				НоваяСтрокаТЗ.ПредыдущееПоложение = РодительИерархии;
			КонецЕсли;
			
		Иначе
			
			МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.СтруктураИерархии = ТекСтруктураИерархии;
			МенеджерЗаписи.ОбъектИерархии = Ссылка;
			МенеджерЗаписи.Удалить();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоследнихРодителей(ИдентификаторТекСтроки, МассивРодителейОР)
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(ИдентификаторТекСтроки);
	
	КоллекцияСтрок = СтрокаДерева.ПолучитьЭлементы();
	Если НЕ СтрокаДерева.СвязиОбновлялись Тогда
		
		Для каждого Элем Из КоллекцияСтрок Цикл
			МассивРодителейОР.Добавить(Новый Структура("ОбъектИерархии, Идентификатор",Элем.Ссылка, Элем.ПолучитьИдентификатор()));
		КонецЦикла;
		
	Иначе
		
		Для каждого Элем Из КоллекцияСтрок Цикл
		
			НайтиПоследнихРодителей(Элем.ПолучитьИдентификатор() ,МассивРодителейОР);	
		
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = РезультатЗакрытия;
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		ТекСтруктураИерархии = ВыбранноеЗначение;
		
		Дерево.ПолучитьЭлементы().Очистить();
		СписокОбъектов.Очистить();
		
		ЗаполнитьДеревоНаСервере();
		
		Элементы.Дерево.Развернуть(Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
		
		Если НЕ Элементы.ФормаИерархическийПросмотр.Пометка Тогда
			УстановитьОтборВСписке(, Элементы.ФормаИерархическийПросмотр.Пометка, Истина);
		КонецЕсли;
		
	УстановитьДоступностьСозданияНовыхОР();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокСтруктурНаСервере(БезТекИерархии = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_СтруктурыОР.Ссылка,
	|	торо_СтруктурыОР.Наименование
	|ИЗ
	|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	|ГДЕ
	|	торо_СтруктурыОР.ПометкаУдаления = ЛОЖЬ";
	
	Если БезТекИерархии Тогда
		
		Запрос.Текст = Запрос.Текст + " И торо_СтруктурыОР.Ссылка <> &СтруктураИерархии";
		Запрос.УстановитьПараметр("СтруктураИерархии", ТекСтруктураИерархии);
		
	КонецЕсли;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	СписокСтруктурОР = Новый СписокЗначений;

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СписокСтруктурОР.Добавить(ВыборкаДетальныеЗаписи.Ссылка, ВыборкаДетальныеЗаписи.Наименование);
		
	КонецЦикла;
	
	Для каждого ЭлементСписка Из СписокСтруктурОР Цикл
	
		ЭлементСписка.Пометка = ЭлементСписка.Значение = ТекСтруктураИерархии;	
	
	КонецЦикла;
	
	Возврат СписокСтруктурОР;

КонецФункции

&НаКлиенте
Процедура ПометкаУдаленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КоллекцияЭлементов = ДополнительныеПараметры.КоллекцияЭлементов;
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        Для каждого Элем ИЗ КоллекцияЭлементов Цикл
            ИзменитьРодителяВДокументах(ТекДанные.Ссылка, Элем.Ссылка);
        КонецЦикла;
        ПометитьНаУдалениеНаСервере(ТекДанные.Ссылка);
        ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекДанные.Ссылка, ТекСтруктураИерархии, Истина);
        Обновить(ЭтаФорма.Команды.Обновить);
        
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ИзменитьРодителяВДокументах(РодительИерархии, ОбъектИерархии)
	Если ИзменяетсяДокументами Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Регистратор
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии = &РодительИерархии";
		
		Запрос.УстановитьПараметр("РодительИерархии", РодительИерархии);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.торо_РасположениеОРВСтруктуреИерархии.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			
			НаборЗаписей.Прочитать();
			
			Для Каждого Стр ИЗ НаборЗаписей Цикл
				Стр.РодительИерархии = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
		КонецЦикла;
		
	Иначе
		
		УдалитьЗаписиДереваНаСервере(ОбъектИерархии, РодительИерархии);
			
		ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектИерархии, Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПометитьНаУдалениеНаСервере(Ссылка)
	
	ЭлемОбъект = Ссылка.ПолучитьОбъект();	
	Если Ссылка.ПометкаУдаления Тогда
		ЭлемОбъект.ПометкаУдаления = Ложь;
	Иначе
		ЭлемОбъект.ПометкаУдаления = Истина;
	КонецЕсли;
	ЭлемОбъект.Записать();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектИерархии, РодительИерархии)
	
	// Добавление записи в регистр
	МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИерархии     = ОбъектИерархии;
	МенеджерЗаписи.СтруктураИерархии  = ТекСтруктураИерархии;
	МенеджерЗаписи.РодительИерархии   = ?(ТипЗнч(РодительИерархии) = Тип("СправочникСсылка.торо_СтруктурыОР"),
	Неопределено, РодительИерархии);
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        ТекДанные = Элементы.Дерево.ТекущиеДанные;
        
        Если ТекДанные <> Неопределено Тогда
            
            МожноУдалять = ЕстьЛиЭлементВДругихИерархиях(ТекДанные.Ссылка);
            
            Если МожноУдалять Тогда
                
                СтрокаДерева = Дерево.НайтиПоИдентификатору(Элементы.Дерево.ТекущаяСтрока);
                КоллекцияЭлементов = СтрокаДерева.ПолучитьЭлементы();
                
                Если ИзменяетсяДокументами Тогда
                    
                    СсылкаНаДок = СоздатьДокументИзмененияПоложения(ТекДанные.Ссылка, Неопределено, Истина);
                    
                    Сообщение = Новый СообщениеПользователю;
                    Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создан документ %1'"), Строка(СсылкаНаДок));
                    Сообщение.Сообщить(); 
                    
                    Для каждого Элем Из КоллекцияЭлементов Цикл
                        
                        СсылкаНаДок = СоздатьДокументИзмененияПоложения(Элем.Ссылка, Неопределено);
                        
                        Сообщение = Новый СообщениеПользователю;
                        Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Создан документ %1'"), Строка(СсылкаНаДок));
                        Сообщение.Сообщить();
                        
                    КонецЦикла;	
                Иначе
                    УдалитьЗаписиВРегистреИерархическихСтруктур(ТекДанные.Ссылка, ТекДанные.РодительИерархии);
                    Для каждого Элем Из КоллекцияЭлементов Цикл
                        
                        ИзменитьЗаписиВРегистреИерархическихСтруктур(Элем.Ссылка, Элем.РодительИерархии);
                        
                    КонецЦикла;
						 						 						  
                    ИзменитьЗаписьВРСторо_ОбъектыРемонтаГруппы(ТекДанные.РодительИерархии, ТекСтруктураИерархии, Неопределено);
						  
                КонецЕсли;
                
                Обновить(ЭтаФорма.Команды.Обновить);
                
            Иначе
                
                Сообщение = Новый СообщениеПользователю;
                Сообщение.Текст = НСтр("ru = 'Нельзя удалить объект ремонта из единственной иерархии!'");
                Сообщение.Сообщить();
                
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьПравоНаСервере(Право)
	
	Возврат ПравоДоступа(Право, Метаданные.Справочники.торо_ОбъектыРемонта);	
	
КонецФункции

&НаСервере
Функция ЕстьЛиЭлементВДругихИерархиях(ОбъектРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии <> &СтруктураИерархии
		|	И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = &ОбъектИерархии
		|	И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии <> &СтруктураИерархии
		|	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии = &ОбъектИерархии";

	Запрос.УстановитьПараметр("ОбъектИерархии", ОбъектРемонта);
	Запрос.УстановитьПараметр("СтруктураИерархии", ТекСтруктураИерархии);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Если Выборка.Следующий() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

&НаСервере
Функция СоздатьДокументИзмененияПоложения(ОбъектИерархии, РодительИерархии, Удален = Ложь)
	
	НовДок = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
	НовДок.Дата = ТекущаяДата();
	
	НовДок.СтруктураИерархии = ТекСтруктураИерархии;
	
	НС = НовДок.ПоложенияВСтруктуреИерархии.Добавить();
	НС.ОбъектИерархии = ОбъектИерархии;
	НС.РодительИерархии = ?(РодительИерархии = Неопределено, Справочники.торо_ОбъектыРемонта.ПустаяСсылка(), РодительИерархии);
	НС.ПредыдущееПоложение = ОпределитьПредыдущееПоложениеВИерархии(ТекСтруктураИерархии, ОбъектИерархии);	
	НС.Удален = Удален;
	
	НовДок.Записать(РежимЗаписиДокумента.Проведение);	
	
	Возврат НовДок.Ссылка;
	
КонецФункции

&НаСервере
Процедура УдалитьЗаписиВРегистреИерархическихСтруктур(ВыбранноеЗначение, РодительИерархии)
	
	// Удаление записи регистра 
	МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИерархии     = ВыбранноеЗначение;
	МенеджерЗаписи.СтруктураИерархии  = ТекСтруктураИерархии;
	МенеджерЗаписи.РодительИерархии   = РодительИерархии;
	
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаписиВРегистреИерархическихСтруктур(ВыбранноеЗначение, РодительИерархии)
	
	МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
	
	МенеджерЗаписи.ОбъектИерархии     = ВыбранноеЗначение;
	МенеджерЗаписи.СтруктураИерархии  = ТекСтруктураИерархии;
	МенеджерЗаписи.РодительИерархии   = РодительИерархии;
	
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.РодительИерархии = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	
	МенеджерЗаписи.Записать(Истина);	
	
КонецПроцедуры

&НаСервере
Функция ОпределитьПредыдущееПоложениеВИерархии(СтруктураИерархии, ОбъектРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии,
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален
	|ИЗ
	|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
	|			&Дата,
	|			ОбъектИерархии = &ОбъектРемонта
	|				И СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних";
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не Выборка.Удален Тогда
			Если Выборка.РодительИерархии = Неопределено Тогда
				Возврат "Корневая группа";
			КонецЕсли;
			
			Возврат Выборка.РодительИерархии;
		КонецЕсли;
	КонецЕсли;
	Возврат "Внесен в структуру иерархии";
	
КонецФункции

&НаКлиенте
Процедура ВыборЗначения()
	
	ТекДанные = Неопределено;
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент;
	
	Если ТекЭлементФормы.Имя = "Дерево" Тогда
		
		ТекДанные = Элементы.Дерево.ТекущиеДанные;
		
	ИначеЕсли ТекЭлементФормы.Имя = "СписокОбъектов" Тогда
		
		ТекДанные = Элементы.СписокОбъектов.ТекущиеДанные;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КлючНазначенияИспользования) Тогда 
		Если Параметры.КлючНазначенияИспользования = "ДобавлениеВИерархию" Тогда
			Если ТекДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ВыбрЗнач = ВыбратьЗначениеНаСервере(ТекДанные.Ссылка);
			
			Если ВыбрЗнач = Неопределено Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ВыборЗначенияЗавершение", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), НСтр("ru = 'Выбрать все подчиненные объекты ремонта вместе с текущим?'"), РежимДиалогаВопрос.ДаНет);		
			Иначе
				ОповеститьОВыборе(ВыбрЗнач);
			КонецЕсли;
			
		ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_НастройкаРегистрацииНаработкиЗависимыхОР" Тогда
			
			ВыбранноеЗначениеОР = СписокОР.НайтиПоЗначению(ТекДанные.Ссылка);
			Если ВыбранноеЗначениеОР = Неопределено Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'У выбранного объекта ремонта не ведется учет наработки по параметру ""%1"".'"),ПараметрНаработки));
				ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
				Возврат;
			Иначе
				ЭтаФорма.ЗакрыватьПриВыборе = Истина;
				
				
				Если Не ТекДанные = Неопределено Тогда
					
					ОповеститьОВыборе(ТекДанные.Ссылка);
					
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		
		Если Не ТекДанные = Неопределено Тогда
			
			ЭтаФорма.ЗакрыватьПриВыборе = Истина;
			
			ОповеститьОВыборе(ТекДанные.Ссылка);
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ОповеститьОВыборе(ДеревоПодчиненных);
    Иначе
        ОповеститьОВыборе(ТекДанные.Ссылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыбратьЗначениеНаСервере(ОбъектРемонта)
	
	ДеревоПодчиненых = Справочники.торо_ОбъектыРемонта.ПолучитьДеревоЭлементов(ОбъектРемонта,ТекСтруктураИерархии);
	
	Если ДеревоПодчиненых.Строки[0].Строки.Количество() = 0 Тогда
		Возврат ОбъектРемонта;
	Иначе
		ЗначениеВРеквизитФормы(ДеревоПодчиненых, "ДеревоПодчиненных");
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьВозможностьСозданияНовыхОР(ТекСтруктураИерархии)
	
	Возврат ТекСтруктураИерархии.РазрешенВводНовыхОР;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьСозданияНовыхОР()
	
	ВводитьНовыеОР = ПроверитьВозможностьСозданияНовыхОР(ТекСтруктураИерархии);
	
	// Добавлять ОР (в т.ч. копированием), помечать их на удаление можно только в "основной" иерархии.
	Элементы.ФормаПометкаУдаления.Доступность 	= ВводитьНовыеОР;
	
	// Удаление из иерархии и добавлении в иерархию имеет смысл только для "неосновных" иерархий.
	Элементы.ФормаУдалить.Доступность 			= Не ВводитьНовыеОР;
	
КонецПроцедуры

#КонецОбласти