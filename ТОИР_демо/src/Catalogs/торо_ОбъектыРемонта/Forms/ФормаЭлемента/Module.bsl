////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ

&НаКлиенте
Перем МожноПечататьВизуализацию;

&НаКлиенте 
Перем ВыбраноОсновное;

&НаКлиенте
Перем ТекущийОбъектРемонта;

&НаКлиенте
Перем ТекущийВидРемонта;

&НаКлиенте
Перем ОбновитьЗначенияНаработки;

&НаКлиенте
Перем СтруктураДанныхДоРедактирования;

&НаКлиенте
Перем ОповещениеВыполнено;

&НаСервере
Перем ДатаПланированияОкончание;

&НаКлиенте
Перем ВРЭтогоДляОсновного;
&НаКлиенте
Перем ВРЭтогоДляЗависимого;
&НаКлиенте
Перем ОРОсновные;
&НаКлиенте
Перем ОРСвязанные;
&НаКлиенте
Перем ВкладкаОсновноеЗависимоеОткрывалась;

#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Имена элементов формы типа ТаблицаФормы, в которых необходимо обрабатывать события изменения строк.
	Массив = Новый Массив;
	Массив.Добавить("ТабЗапчастейОбъектовРемонта");
	Массив.Добавить("ТабЗатратПоВидамРемонта");
	Массив.Добавить("НормативныеРемонты");
	Массив.Добавить("СписокПараметровНаработки");
	Массив.Добавить("ПредшествующиеРемонты");
	Массив.Добавить("ЗамещаемыеРемонты");
	торо_СобытияФормКлиент.ЗаполнитьСтруктуруДанныхДоРедактирования(СтруктураДанныхДоРедактирования,Массив);
	
	ВыбраноОсновное = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПриЗакрытииНаСервере(ОтображатьИзображение)
		ХранилищеОбщихНастроек.Сохранить("НастройкиТОиР",
	"ОбъектыРемонта_ОтображатьИзображение", ОтображатьИзображение);
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПравоРедактирования = ПравоДоступа("Редактирование", Объект.Ссылка.Метаданные());
	
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	Контекст.Вставить("ПроизвольныйОбъект",         Ложь);
	Контекст.Вставить("ИмяРеквизитаНаборСвойств",   "НаборСвойств");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства
	
	ФОИспользоватьДопРеквизиты = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");
	УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Объект.НаборСвойств);
	ПривязатьОбработчикИзмененияДопРеквизитов();
	УнаследоватьДопРеквизитыИзТиповогоОР();
		
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Печать
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	ТекСтруктураИерархии = ?(Параметры.Свойство("СтруктураИерархии"), Параметры.СтруктураИерархии, Константы.торо_ИерархияДляВводаНовыхОР.Получить());
	
	Если Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
		
		РодительИерархии = ?(Параметры.Свойство("РодительИерархии"), Параметры.РодительИерархии, Справочники.торо_ОбъектыРемонта.ПустаяСсылка());
		
		Если НЕ ЗначениеЗаполнено(Объект.Направление) Тогда 
			Объект.Направление = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновноеНаправлениеОР",
			Истина);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПлановыйГрафикРаботы) Тогда 
			Объект.ПлановыйГрафикРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ОсновнойГрафикРаботы",
			Истина);
		КонецЕсли;
		
		Если Параметры.Свойство("ПараметрКопирования") Тогда
			
			ЗаполнитьЗначенияСвойств(Объект, Параметры.ПараметрКопирования, , "Код, ДополнительныеРеквизиты, НаборСвойств, НеУчаствуетВПланировании");
			Для каждого Стр Из Параметры.ПараметрКопирования.ДополнительныеРеквизиты Цикл
				
				НС = Объект.ДополнительныеРеквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Стр);
				
			КонецЦикла;
			
		КонецЕсли;
		
		СозданКопированием = Параметры.Свойство("СозданКопированием");
		
		Модифицированность = Истина;
		
		Если Параметры.Свойство("СписокПараметровКопирования") Тогда
			Для каждого ЭлементСписка Из Параметры.СписокПараметровКопирования Цикл
				
				Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
					Записать();
				КонецЕсли;
				
				Если ЭлементСписка.Значение = "Контролируемые показатели" Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель,
					               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум,
					               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум,
					               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум,
					               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум,
					               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
					               |ИЗ
					               |	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
					               |ГДЕ
					               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта";
					
					Запрос.УстановитьПараметр("ОбъектРемонта", Параметры.ПараметрКопирования);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					мСписокИзмеряемыхПоказателей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
					мСписокИзмеряемыхПоказателей.Отбор.ОбъектРемонта.Установить(Объект.Ссылка);
					
					Пока Выборка.Следующий() Цикл
						СтрокаНЗ = мСписокИзмеряемыхПоказателей.Добавить();
                        СтрокаНЗ.ОбъектРемонта                         = Объект.Ссылка;
                        СтрокаНЗ.Показатель                            = Выборка.Показатель;
                        СтрокаНЗ.ДопустимыйМинимум                     = ?(ТипЗнч(Выборка.ДопустимыйМинимум) = Тип("Число"), Выборка.ДопустимыйМинимум, 0);
                        СтрокаНЗ.ДопустимыйМаксимум                    = ?(ТипЗнч(Выборка.ДопустимыйМаксимум) = Тип("Число"), Выборка.ДопустимыйМаксимум, 0);
                        СтрокаНЗ.КритическийМинимум                    = ?(ТипЗнч(Выборка.КритическийМинимум) = Тип("Число"), Выборка.КритическийМинимум, 0);
                        СтрокаНЗ.КритическийМаксимум                   = ?(ТипЗнч(Выборка.КритическийМаксимум) = Тип("Число"), Выборка.КритическийМаксимум, 0);
                        СтрокаНЗ.ЗначенияКонтролируемыхПоказателейИзОР = Выборка.ЗначенияКонтролируемыхПоказателейИзОР;
					КонецЦикла;
					
					мСписокИзмеряемыхПоказателей.Записать();
					
				ИначеЕсли ЭлементСписка.Значение = "Параметры наработки (только действующие значения)" Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.Основной,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.Период
					               |ИЗ
					               |	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(, ОбъектРемонта = &ОбъектРемонта) КАК торо_ПараметрыНаработкиОбъектовРемонта";
					
					Запрос.УстановитьПараметр("ОбъектРемонта", Параметры.ПараметрКопирования);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					мСписокПараметровНаработки = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
					мСписокПараметровНаработки.Отбор.ОбъектРемонта.Установить(Объект.Ссылка);
					Пока Выборка.Следующий() Цикл
						СтрокаНЗ = мСписокПараметровНаработки.Добавить();
						СтрокаНЗ.ОбъектРемонта = Объект.Ссылка;
						СтрокаНЗ.ПериодПлановойНаработки = Выборка.ПериодПлановойНаработки;
						СтрокаНЗ.ПлановаяНаработка = Выборка.ПлановаяНаработка;
						СтрокаНЗ.Показатель = Выборка.Показатель;
						СтрокаНЗ.КоэффициентИспользованияОборудования = Выборка.КоэффициентИспользованияОборудования;
						СтрокаНЗ.ПродолжительностьПериодаПлановойНаработки = Выборка.ПродолжительностьПериодаПлановойНаработки;
						СтрокаНЗ.Период = Выборка.Период;
						СтрокаНЗ.Основной = Выборка.Основной;
					КонецЦикла;
					мСписокПараметровНаработки.Записать();
				ИначеЕсли ЭлементСписка.Значение = "Параметры наработки (история изменения)" Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.Основной,
					               |	торо_ПараметрыНаработкиОбъектовРемонта.Период
					               |ИЗ
					               |	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
					               |ГДЕ
					               |	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта";
					
					Запрос.УстановитьПараметр("ОбъектРемонта", Параметры.ПараметрКопирования);
					
					Результат = Запрос.Выполнить();
					Выборка = Результат.Выбрать();
					
					мСписокПараметровНаработки = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
					мСписокПараметровНаработки.Отбор.ОбъектРемонта.Установить(Объект.Ссылка);
					Пока Выборка.Следующий() Цикл
						СтрокаНЗ = мСписокПараметровНаработки.Добавить();
						СтрокаНЗ.ОбъектРемонта = Объект.Ссылка;
						СтрокаНЗ.ПериодПлановойНаработки=Выборка.ПериодПлановойНаработки;
						СтрокаНЗ.ПлановаяНаработка = Выборка.ПлановаяНаработка;
						СтрокаНЗ.Показатель=Выборка.Показатель;
						СтрокаНЗ.КоэффициентИспользованияОборудования = Выборка.КоэффициентИспользованияОборудования;
						СтрокаНЗ.ПродолжительностьПериодаПлановойНаработки = Выборка.ПродолжительностьПериодаПлановойНаработки;
						СтрокаНЗ.Период = Выборка.Период;
						СтрокаНЗ.Основной = Выборка.Основной;
					КонецЦикла;
					мСписокПараметровНаработки.Записать();
				ИначеЕсли ЭлементСписка.Значение = "Запчасти" Тогда
					
					Запрос = Новый Запрос;
					Запрос.Текст = "ВЫБРАТЬ
					               |	торо_Запчасти.ОбъектРемонта,
					               |	торо_Запчасти.ТиповойОР,
					               |	торо_Запчасти.Номенклатура,
					               |	торо_Запчасти.Качество,
					               |	торо_Запчасти.Характеристика,
					               |	торо_Запчасти.Количество
					               |ИЗ
					               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
					               |ГДЕ
					               |	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
					               |;
					               |
					               |////////////////////////////////////////////////////////////////////////////////
					               |ВЫБРАТЬ
					               |	торо_ЗапчастиУдаленные.ОбъектРемонта,
					               |	торо_ЗапчастиУдаленные.ТиповойОР,
					               |	торо_ЗапчастиУдаленные.Номенклатура,
					               |	торо_ЗапчастиУдаленные.Характеристика
					               |ИЗ
					               |	РегистрСведений.торо_ЗапчастиУдаленные КАК торо_ЗапчастиУдаленные
					               |ГДЕ
					               |	торо_ЗапчастиУдаленные.ОбъектРемонта = &ОбъектРемонта
					               |;
					               |
					               |////////////////////////////////////////////////////////////////////////////////
					               |ВЫБРАТЬ
					               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта,
					               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
					               |	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта,
					               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество,
					               |	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР,
					               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика
					               |ИЗ
					               |	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
					               |ГДЕ
					               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
					               |;
					               |
					               |////////////////////////////////////////////////////////////////////////////////
					               |ВЫБРАТЬ
					               |	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта,
					               |	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Номенклатура,
					               |	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ВидРемонта,
					               |	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ТиповойОР
					               |ИЗ
					               |	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные КАК торо_НормыЗапчастейНаОбъектыРемонтаУдаленные
					               |ГДЕ
					               |	торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта = &ОбъектРемонта";
								   
					Запрос.УстановитьПараметр("ОбъектРемонта", Параметры.ПараметрКопирования);
					Результат = Запрос.ВыполнитьПакет();
					
					// записи в рс торо_Запчасти
					Выборка = Результат[0].Выбрать();
					
					мТабЗапчастейОбъектовРемонта = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
					мТабЗапчастейОбъектовРемонта.Отбор.ОбъектРемонта.Установить(Объект.Ссылка);
					Пока Выборка.Следующий() Цикл
						СтрокаЗЧ = мТабЗапчастейОбъектовРемонта.Добавить();
						СтрокаЗЧ.ОбъектРемонта = Объект.Ссылка;
						
						СтрокаЗЧ.Номенклатура = Выборка.Номенклатура;
						СтрокаЗЧ.Количество = Выборка.Количество;
						СтрокаЗЧ.Качество = Выборка.Качество;
						СтрокаЗЧ.Характеристика = Выборка.Характеристика;
						СтрокаЗЧ.ТиповойОР = Выборка.ТиповойОР;
						
					КонецЦикла;
					мТабЗапчастейОбъектовРемонта.Записать();
					
					// записи в рс торо_ЗапчастиУдаленные
					Выборка = Результат[1].Выбрать();
					
					мТабЗапчастейОбъектовРемонтаУдаленные = РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
					мТабЗапчастейОбъектовРемонтаУдаленные.Отбор.ОбъектРемонта.Установить(Объект.Ссылка);
					Пока Выборка.Следующий() Цикл
						СтрокаЗЧ = мТабЗапчастейОбъектовРемонтаУдаленные.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗЧ, выборка);
						СтрокаЗЧ.ОбъектРемонта = Объект.Ссылка;
					КонецЦикла;
					мТабЗапчастейОбъектовРемонтаУдаленные.Записать();
					
					// записи в рс торо_НормыЗапчастейНаОбъектыРемонта
					Выборка = Результат[2].Выбрать();
					
					мТабЗатратПоВидамРемонта = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
					мТабЗатратПоВидамРемонта.Отбор.ОбъектРемонта.Установить(Объект.Ссылка);
					
					Пока Выборка.Следующий() Цикл
						СтрокаЗатрат = мТабЗатратПоВидамРемонта.Добавить();
						СтрокаЗатрат.ОбъектРемонта = Объект.Ссылка;
						
						СтрокаЗатрат.Номенклатура = Выборка.Номенклатура;
						СтрокаЗатрат.Количество = Выборка.Количество;
						СтрокаЗатрат.ВидРемонта = Выборка.ВидРемонта;
						СтрокаЗатрат.ТиповойОР = Выборка.ТиповойОР;
						СтрокаЗатрат.Характеристика = Выборка.Характеристика;
						
					КонецЦикла;
					мТабЗатратПоВидамРемонта.Записать();
					
					// записи в рс торо_НормыЗапчастейНаОбъектыРемонтаУдаленные
					Выборка = Результат[3].Выбрать();
					
					мТабЗатратПоВидамРемонтаУдаленные = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
					мТабЗатратПоВидамРемонтаУдаленные.Отбор.ОбъектРемонта.Установить(Объект.Ссылка);
					
					Пока Выборка.Следующий() Цикл
						СтрокаЗатрат = мТабЗатратПоВидамРемонтаУдаленные.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаЗатрат, Выборка);
						СтрокаЗатрат.ОбъектРемонта = Объект.Ссылка;
					КонецЦикла;
					мТабЗатратПоВидамРемонтаУдаленные.Записать();
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекТиповойОР  = Объект.ТиповойОР;
	ПредТиповойОР = Объект.ТиповойОР;
	
	ИзменяетсяДокументами = ТекСтруктураИерархии.ИзменяетсяДокументами;
	
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	МодифицированностьПараметровНаработки   = Ложь;
	МодифицированностьНормРемонтов          = Ложь;
	МодифицированностьИзмеряемыхПоказателей = Ложь;
	МодифицированностьМаксЗначНаработки = Ложь;
	
	КоличествоПусков.Загрузить(РегистрыНакопления.торо_КоличествоПусковОР.Обороты('00010101',ТекущаяДата(),Новый Структура("ОбъектРемонта", Объект.Ссылка)));
	
	// ЖЦ Оборудования++
	ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		
		ЗаполнитьДатыЭксплуатации();
		УстановитьФлагПланированияИДоступность(Не ЗначениеЗаполнено(Объект.Ссылка));
		
	КонецЕсли; 
	
	// ЖЦ Оборудования--
	
	// Гарантии++
	ФОИспользоватьГарантии = ПолучитьФункциональнуюОпцию("торо_ИспользоватьГарантии");
	Если ФОИспользоватьГарантии Тогда
		
		ТаблицаГарантий = торо_ГарантийноеОбслуживание.ПолучитьТаблицуГарантий(Объект.Ссылка);
		
		Если Не ТаблицаГарантий = Неопределено  Тогда
			
			ГарантииОбъектаРемонта.Загрузить(ТаблицаГарантий);
			
		КонецЕсли; 
		
		Если ГарантииОбъектаРемонта.Количество() > 0 Тогда
			ЕстьГарантияДляОбъекта = Истина;
		Иначе
			ЕстьГарантияДляОбъекта = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	// Гарантии--
	
	// Ремонты_по_состоянию++
	ФОИспользоватьРемонтыПоСостоянию = ПолучитьФункциональнуюОпцию("торо_ИспользоватьРемонтыПоСостоянию");
	// Ремонты_по_состоянию--
	
	ОтображатьИзображение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОбъектыРемонта_ОтображатьИзображение",
	Ложь);	
	
	УстановитьВидимостьДоступность(Истина);
	
	УстановитьПараметрыЗапросовНаСервере();
	
	ВыборОсновногоЗависимого = "Основное";
	
	Родитель = НайтиРодителяИерархии(?(ЗначениеЗаполнено(ТекСтруктураИерархии), ТекСтруктураИерархии, Константы.торо_ИерархияДляВводаНовыхОР.Получить()), Объект.Ссылка);
	Если НЕ ЗначениеЗаполнено(Родитель) и ЗначениеЗаполнено(РодительИерархии) Тогда
		Родитель = РодительИерархии;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Не Объект.ЭтоГруппа Тогда
		
		СтруктураОбязательныхПолейНЗ = Новый Структура("ВидРемонта, НормативныйРемонт, СпособПланирования, ГрафикРемонтныхРабот, СпособВыполнения, СпособУчетаДатыОтсчета");
		
		Для каждого СтрЗамещРемонта Из ЗамещаемыеРемонты Цикл
			Если ЗначениеЗаполнено(СтрЗамещРемонта.ЗамещаемыйВидРемонта) Тогда
				МежремонтныйИнтервал = ВычислениеМежремонтногоИнтервала(СтрЗамещРемонта);
				Если НЕ МежремонтныйИнтервал = Неопределено Тогда
					Если МежремонтныйИнтервал <= СтрЗамещРемонта.НачальнаяГраница Тогда
						торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Некорректно заполнено поле ""Дней от начала"" для ремонта %1 в строке %2'"),СтрЗамещРемонта.ВидРемонта,СтрЗамещРемонта.ЗамещаемыйВидРемонта));
						Отказ = Истина;
					КонецЕсли;
					Если МежремонтныйИнтервал <= СтрЗамещРемонта.КонечнаяГраница Тогда
						торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Некорректно заполнено поле ""Дней от окончания"" для ремонта %1 в строке %2'"),СтрЗамещРемонта.ВидРемонта,СтрЗамещРемонта.ЗамещаемыйВидРемонта));
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаСДублями = Новый ТаблицаЗначений;
		ТаблицаСДублями.Колонки.Добавить("Ремонт"); 
		Для Каждого СтрокаЗамещения ИЗ ЗамещаемыеРемонты Цикл
			Для Каждого СтрокаЗамещения1 Из ЗамещаемыеРемонты Цикл
				Если СтрокаЗамещения.ВидРемонта = СтрокаЗамещения1.ВидРемонта
					И СтрокаЗамещения.ЗамещаемыйВидРемонта = СтрокаЗамещения1.ЗамещаемыйВидРемонта
					И СтрокаЗамещения.ТиповойОР = СтрокаЗамещения1.ТиповойОР
					И СтрокаЗамещения <> СтрокаЗамещения1 Тогда
					ТаблицаСДублями.Добавить().Ремонт = СтрокаЗамещения.ВидРемонта;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаСДублями.Свернуть("Ремонт");
		
		Если ЗначениеЗаполнено(ТаблицаСДублями) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не корректно настроены замещаемые ремонты у видов ремонта:'"));
			Для Каждого СтрокаРемонта Из ТаблицаСДублями Цикл
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(" - "+СтрокаРемонта.Ремонт);
			КонецЦикла;
			Отказ = Истина;
		КонецЕсли;
		
		Если МодифицированностьГарантий Тогда
			Для Каждого Строка Из ГарантииОбъектаРемонта Цикл
				Строка.ДатаНачала = Строка.УсловияГарантии.ДатаНачалаГарантии;
				Строка.ДатаОкончания = Строка.УсловияГарантии.ДатаОкончанияГарантии;
			КонецЦикла;
			
			ТЗГарантий = ГарантииОбъектаРемонта.Выгрузить();
						
			Для Каждого Строка Из ТЗГарантий Цикл
				
				СтруктураОтбора = Новый Структура("ДатаНачала, ДатаОкончания", Строка.ДатаНачала, Строка.ДатаОкончания);
				НайденныеСтроки = ТЗГарантий.НайтиСтроки(СтруктураОтбора);
				
				Если ЗначениеЗаполнено(Строка.ДатаНачала) И ЗначениеЗаполнено(Строка.ДатаОкончания) 
					И Строка.ДатаНачала >= Строка.ДатаОкончания Тогда
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Дата начала гарантии %1 не может быть больше либо равной дате окончания гарантии %2!'");
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст,Формат(Строка.ДатаНачала,"ДФ=dd.MM.yyyy"),Формат(Строка.ДатаОкончания,"ДФ=dd.MM.yyyy"));
					Сообщение.Сообщить();
				ИначеЕсли ЗначениеЗаполнено(Строка.ДатаНачала) И ЗначениеЗаполнено(Строка.ДатаОкончания) 
					И НайденныеСтроки.Количество() > 1 Тогда
					Отказ = Истина;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = НСтр("ru = 'Гарантийный период %1-%2 совпадает с другим гарантийным периодом!'");
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение.Текст,Формат(Строка.ДатаНачала,"ДФ=dd.MM.yyyy"),Формат(Строка.ДатаОкончания,"ДФ=dd.MM.yyyy"));
					Сообщение.Сообщить();
					Сч = НайденныеСтроки.ВГраница();
					Пока Сч > 0 Цикл
						ТЗГарантий.Удалить(НайденныеСтроки[Сч]);
						Сч = Сч - 1;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			ТекстЗапроса = "ВЫБРАТЬ
			               |	ТабГарантий.ДатаНачала,
			               |	ТабГарантий.ДатаОкончания
			               |ПОМЕСТИТЬ ТабГарантий
			               |ИЗ
			               |	&ТабГарантий КАК ТабГарантий
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТабГарантий1.ДатаНачала,
			               |	ТабГарантий1.ДатаОкончания
			               |ИЗ
			               |	ТабГарантий КАК ТабГарантий1
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабГарантий КАК ТабГарантий2
			               |		ПО (ТабГарантий1.ДатаНачала >= ТабГарантий2.ДатаНачала
			               |					И ТабГарантий1.ДатаНачала <= ТабГарантий2.ДатаОкончания
			               |				ИЛИ ТабГарантий1.ДатаОкончания >= ТабГарантий2.ДатаНачала
			               |					И ТабГарантий1.ДатаОкончания <= ТабГарантий2.ДатаОкончания)
			               |			И НЕ (ТабГарантий1.ДатаНачала = ТабГарантий2.ДатаНачала
			               |			И ТабГарантий1.ДатаОкончания = ТабГарантий2.ДатаОкончания)";
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ТабГарантий", ГарантииОбъектаРемонта.Выгрузить());
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Гарантийный период %1-%2 пересекается с другим гарантийным периодом!'");
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения,Формат(Выборка.ДатаНачала,"ДФ=dd.MM.yyyy"),Формат(Выборка.ДатаОкончания,"ДФ=dd.MM.yyyy"));
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
	Если Не Отказ Тогда  // Проверка выполняется только если отключена возможность вводить документ ЖЦ оборудования.
		Если НЕ ФОИспользоватьДокументыЖЦОборудования
			И ЗначениеЗаполнено(Объект.ДатаВводаВЭксплуатацию) 
			И Объект.ДатаВыпуска > Объект.ДатаВводаВЭксплуатацию Тогда
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата выпуска не может быть больше даты ввода в эксплуатацию!'"));
			Отказ = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	ПродолжительностьЗаполнено = Истина;
	ПлановаяНаработкаЗаполнено = Истина;
	КоэффициентИспользованияОборудования = Истина;
	
	Для каждого Строчка Из СписокПараметровНаработки Цикл
		
		Если Строчка.ОбъектРемонта = Объект.Ссылка Тогда
			Если Строчка.ПродолжительностьПериодаПлановойНаработки = 0 Тогда
				ПродолжительностьЗаполнено = Ложь;
				Отказ = Истина;
			КонецЕсли;                                                               
			
			Если Строчка.ПлановаяНаработка = 0 Тогда
				ПлановаяНаработкаЗаполнено = Ложь;
				Отказ = Истина;
			КонецЕсли;
			
			Если Строчка.КоэффициентИспользованияОборудования = 0 Тогда
				КоэффициентИспользованияОборудования = Ложь;
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПлановаяНаработкаЗаполнено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Плановая наработка"".'"));
	КонецЕсли;
	
	Если НЕ ПродолжительностьЗаполнено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Продолжительность периода плановой наработки"".'"));
	КонецЕсли;
	
	Если НЕ КоэффициентИспользованияОборудования Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Коэффициент использования оборудования"".'"));
	КонецЕсли;
	
	МаксимальноеЗначение = Истина;
	Для каждого Строчка Из ТабМаксимальныхЗначенийНаработки Цикл
		
		Если Строчка.МаксимальноеЗначение = 0 И Строчка.НазначенныйРесурс = 0 Тогда
			МаксимальноеЗначение = Ложь;
			Отказ = Истина;
		КонецЕсли;                                                               
		
	КонецЦикла;
	
	Если НЕ МаксимальноеЗначение Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнено поле ""Максимальное значение наработки"" или ""Назначенный ресурс"".'"));
	КонецЕсли;
	
	Если МодифицированностьНормРемонтов Тогда		 
			
		Для Каждого Стр Из НормативныеРемонты Цикл
			Если Не Стр.Удален Тогда
				Если НЕ ЗначениеЗаполнено(Стр.ВидРемонта) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Вид ремонта"" в строке № %1'"), Строка(Стр.ПолучитьИдентификатор()+1));
					Сообщение.Сообщить();
					Отказ = Истина;	
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.НормативныйРемонт) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Технологическая карта"" в строке № %1'"), Строка(Стр.ПолучитьИдентификатор()+1));
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.СпособПланирования) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ планирования"" в строке № %1'"), Строка(Стр.ПолучитьИдентификатор()+1));
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.ГрафикРемонтныхРабот) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""График ремонтных работ"" в строке № %1'"), Строка(Стр.ПолучитьИдентификатор()+1));
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Стр.СпособВыполнения) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ выполнения"" в строке № %1'"), Строка(Стр.ПолучитьИдентификатор()+1));
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Стр.СпособУчетаДатыОтсчета) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Не удалось записать нормативные ремонты: не заполнено поле ""Способ учета даты отсчета"" в строке № %1'"), Строка(Стр.ПолучитьИдентификатор()+1));
					Сообщение.Сообщить();
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
			
	Если НЕ Отказ Тогда
		
		Если Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			СсылкаНаОбъект = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(ТекущийОбъект);
		Иначе 
			СсылкаНаОбъект = Объект.Ссылка;
		КонецЕсли;
		
		Попытка
			
			Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
				Если ИзменяетсяДокументами Тогда
					
					НовДок = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
					НовДок.Дата = ТекущаяДата();
					
					НовДок.СтруктураИерархии = ТекСтруктураИерархии;
					
					НС = НовДок.ПоложенияВСтруктуреИерархии.Добавить();
					НС.ОбъектИерархии = СсылкаНаОбъект;
					НС.РодительИерархии = РодительИерархии;
					НС.ПредыдущееПоложение = "Внесен в структуру иерархии";	
					
					НовДок.Записать(РежимЗаписиДокумента.Проведение);
					
				Иначе
					
					МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
					МенеджерЗаписи.ОбъектИерархии     = СсылкаНаОбъект;
					МенеджерЗаписи.СтруктураИерархии  = ТекСтруктураИерархии;
					МенеджерЗаписи.РодительИерархии   = РодительИерархии;
					МенеджерЗаписи.Записать(Истина);
					
				КонецЕсли;
				
				
				Если НЕ ТекущийОбъект.ОбменДанными.Загрузка Тогда
					торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(СсылкаНаОбъект, ТекСтруктураИерархии, Отказ);
					
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	торо_СтруктурыОР.Ссылка,
					|	торо_СтруктурыОР.РеквизитОР
					|ИЗ
					|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
					|ГДЕ
					|	торо_СтруктурыОР.СтроитсяАвтоматически";
					
					РезультатЗапроса = Запрос.Выполнить();
					
					Выборка = РезультатЗапроса.Выбрать();
					
					Пока Выборка.Следующий() Цикл
						
						торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(СсылкаНаОбъект, Выборка.Ссылка, Отказ);		
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
		Исключение
			Отказ = Истина;
		КонецПопытки;
	КонецЕсли;
	
	СтеретьЗначенияУнаследованныхРеквизитовТиповогоОР();
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ТекущийОбъект.ЭтоНовый() 
		и ЗначениеЗаполнено(РодительИерархии)
		И ЗначениеЗаполнено(ТекСтруктураИерархии) И НЕ (ТекСтруктураИерархии.СтроитсяАвтоматически или ТекСтруктураИерархии.ИзменяетсяДокументами)
		Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектИерархии.Установить(РодительИерархии);
		НаборЗаписей.Отбор.СтруктураИерархии.Установить(ТекСтруктураИерархии);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НС = НаборЗаписей.Добавить();
			НС.ОбъектИерархии = РодительИерархии;
			НС.СтруктураИерархии = ТекСтруктураИерархии;
			НС.ОбъектГруппа = Истина;
			НаборЗаписей.Записать();
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия  = "ПАРАМЕТРЫ_ПЕЧАТИ_ПаспортОР" И Источник = ЭтаФорма Тогда
		
		Если Не Параметр = Неопределено ИЛИ НЕ Параметр.Количество() = 0 Тогда
			
			Параметр.Вставить("Родитель", Родитель);
			
			МассивПараметровКоманды = Новый Массив();
			МассивПараметровКоманды.Добавить(Объект.Ссылка);
			торо_Печать.НапечататьДокумент("Справочник.торо_ОбъектыРемонта",
			"ПаспортОР",
			МассивПараметровКоманды,
			Параметр);
			
		КонецЕсли; 
		
	ИначеЕсли ФОИспользоватьДокументыЖЦОборудования
		И ИмяСобытия  = "СОЗДАН_ДОКУМЕНТ_ПРИНЯТИЕ_К_УЧЕТУ" 
		И Параметр.Свойство("ОбъектРемонта")
		И Параметр.ОбъектРемонта = Объект.Ссылка Тогда	
		
		ЗаполнитьДатыЭксплуатации();
		
		Если ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Заголовок   = РегистраторСнятияСУчета;
		Иначе
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Заголовок   = НСтр("ru = 'Ввести документ ""Выбытие объекта ремонта""'");
		КонецЕсли;
		
		УстановитьФлагПланированияИДоступность(Истина);
		
		УстановитьВидимостьДоступность();
		
		ЗаписатьОбъектНаСервере();
		
	ИначеЕсли ФОИспользоватьДокументыЖЦОборудования
		И ИмяСобытия  = "СОЗДАН_ДОКУМЕНТ_СНЯТИЕ_С_УЧЕТА" И Параметр = Объект.Ссылка Тогда	
		
		ЗаполнитьДатыЭксплуатации();
		
		УстановитьФлагПланированияИДоступность(Истина);
		
		УстановитьВидимостьДоступность();
		
		ЗаписатьОбъектНаСервере();
		
	ИначеЕсли ИмяСобытия = "Запись_ПрисоединенныйФайл" Тогда
		
		Модифицированность = Истина;
		СсылкаНаФайл = ?(ТипЗнч(Источник) = Тип("Массив"), Источник[0], Источник);
		
		Если ВыборИзображения Тогда
			
			Объект.ФайлКартинки = СсылкаНаФайл;
			АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
						
		КонецЕсли;	
	ИначеЕсли ИмяСобытия = "ИЗМЕНЕН_ТИПОВОЙ_ОБЪЕКТ" Тогда
		Если Модифицированность = Ложь Тогда
			ТиповойОРПриИзменении(ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтаФорма, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект, "НаборСвойств");
	// Конец СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Объект.НаборСвойств);
	
	Если Не Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор);
	Иначе
		АдресКартинки = "";
	Конецесли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекОбъект = Объект.Ссылка;
	Иначе
		ТекОбъект = ТекущийОбъект.Ссылка;
	КонецЕсли;
	
	Если МодифицированностьПараметровНаработки Тогда
		// Запись набора записей.
		Попытка
			ТаблицаЗначенийПараметровНаработки = СписокПараметровНаработки.Выгрузить();
			МассивСтрокПараметров = ТаблицаЗначенийПараметровНаработки.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекОбъект));
			ТаблицаБуфер = ТаблицаЗначенийПараметровНаработки.Скопировать(МассивСтрокПараметров);
			
			НаборПараметровНаработки = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СоздатьНаборЗаписей();
			НаборПараметровНаработки.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборПараметровНаработки.Загрузить(ТаблицаБуфер);
			НаборПараметровНаработки.Записать();
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать параметры наработки: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	Если МодифицированностьИзмеряемыхПоказателей Тогда		
		
		Попытка
			
			ЗаписиОР = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекОбъект));
			
			НаборКонтролируемыхПоказателей = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.СоздатьНаборЗаписей();
			НаборКонтролируемыхПоказателей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборКонтролируемыхПоказателей.Прочитать();
			НаборКонтролируемыхПоказателей.Очистить();
			
			Для Каждого СтрПоказателя Из ЗаписиОР Цикл
				Если СтрПоказателя.ИзТиповогоОР И НЕ СтрПоказателя.ЗначенияКонтролируемыхПоказателейИзОР И НЕ СтрПоказателя.Удален Тогда
					Продолжить;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НаборКонтролируемыхПоказателей.Добавить(),СтрПоказателя);
			КонецЦикла;
			
			НаборКонтролируемыхПоказателей.Записать();
			
			МодифицированностьИзмеряемыхПоказателей = Ложь;
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать контролируемые показатели: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьПараметровОповещенияОСостоянииОР Тогда
		
		Попытка
			ТаблицаПараметровОповещения = ПараметрыОповещенияПоСостояниямОР.Выгрузить(Новый Структура("ТиповойОР", Справочники.торо_ТиповыеОР.ПустаяСсылка()));
			
			НаборПараметровОповещения = РегистрыСведений.торо_ПараметрыОповещенияОСостоянииОборудования.СоздатьНаборЗаписей();
			НаборПараметровОповещения.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборПараметровОповещения.Загрузить(ТаблицаПараметровОповещения);
			НаборПараметровОповещения.Записать();
			МодифицированностьПараметровОповещенияОСостоянииОР = Ложь;
		Исключение
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать параметры оповещения о состоянии оборудования: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьЗапчастейОР или МодифицированностьНормативныхЗатратПоЗапчастям Тогда	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_Запчасти.Номенклатура КАК Номенклатура,
		               |	торо_Запчасти.Качество,
		               |	торо_Запчасти.Характеристика КАК Характеристика,
		               |	торо_Запчасти.ТиповойОР,
		               |	торо_Запчасти.Количество
		               |ПОМЕСТИТЬ ВТ_ЗапчастиТОР
		               |ИЗ
		               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
		               |ГДЕ
		               |	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
		               |	И торо_Запчасти.ТиповойОР = &ТиповойОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	таб.Номенклатура КАК Номенклатура,
		               |	таб.Качество,
		               |	таб.Характеристика КАК Характеристика,
		               |	таб.ТиповойОР,
		               |	таб.Количество,
		               |	таб.ИзТипового КАК ИзТипового,
		               |	таб.Удален
		               |ПОМЕСТИТЬ ВТ_ЗапчастиОР
		               |ИЗ
		               |	&Запчасти_ОР КАК таб
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура КАК Номенклатура,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта КАК ВидРемонта,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика КАК Характеристика,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество
		               |ПОМЕСТИТЬ ВТ_ВР_ТОР
		               |ИЗ
		               |	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
		               |ГДЕ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта
		               |	И торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = &ТиповойОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	таб.Номенклатура КАК Номенклатура,
		               |	таб.ВидРемонта КАК ВидРемонта,
		               |	таб.ТиповойОР,
		               |	таб.Характеристика КАК Характеристика,
		               |	таб.Количество,
		               |	таб.ИзТипового КАК ИзТипового,
		               |	таб.Удален
		               |ПОМЕСТИТЬ ВТ_ВР_ОР
		               |ИЗ
		               |	&ВР_ОР КАК таб
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(ВТ_ЗапчастиТОР.Номенклатура, ВТ_ЗапчастиОР.Номенклатура) КАК Номенклатура,
		               |	ЕСТЬNULL(ВТ_ЗапчастиТОР.Качество, ВТ_ЗапчастиОР.Качество) КАК Качество,
		               |	ЕСТЬNULL(ВТ_ЗапчастиТОР.Характеристика, ВТ_ЗапчастиОР.Характеристика) КАК Характеристика,
		               |	ЕСТЬNULL(ВТ_ЗапчастиТОР.Количество, ВТ_ЗапчастиОР.Количество) КАК Количество,
		               |	ВЫБОР
		               |		КОГДА НЕ ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL 
		               |			ТОГДА ВТ_ЗапчастиТОР.ТиповойОР
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР
		               |					ТОГДА ВТ_ЗапчастиОР.ТиповойОР
		               |				ИНАЧЕ &ПустойТОР
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ТиповойОР,
		               |	ВЫБОР
		               |		КОГДА НЕ ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL 
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ВЫБОР
		               |				КОГДА ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР
		               |					ТОГДА ИСТИНА
		               |				ИНАЧЕ ЛОЖЬ
		               |			КОНЕЦ
		               |	КОНЕЦ КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА (НЕ(ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL 
		               |						ИЛИ ВТ_ЗапчастиОР.Номенклатура ЕСТЬ NULL) ИЛИ ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР)
		               |				И ВТ_ЗапчастиОР.Удален
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Удален
		               |ПОМЕСТИТЬ ВТ_Запчасти
		               |ИЗ
		               |	ВТ_ЗапчастиТОР КАК ВТ_ЗапчастиТОР
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ЗапчастиОР КАК ВТ_ЗапчастиОР
		               |		ПО ВТ_ЗапчастиТОР.Номенклатура = ВТ_ЗапчастиОР.Номенклатура
		               |			И ВТ_ЗапчастиТОР.Качество = ВТ_ЗапчастиОР.Качество
		               |			И ВТ_ЗапчастиТОР.Характеристика = ВТ_ЗапчастиОР.Характеристика
		               |			И ВТ_ЗапчастиТОР.Количество = ВТ_ЗапчастиОР.Количество
		               |ГДЕ
		               |	НЕ(ВТ_ЗапчастиТОР.Номенклатура ЕСТЬ NULL 
		               |				И ЕСТЬNULL(ВТ_ЗапчастиОР.Удален, ЛОЖЬ))
					   |	ИЛИ ВТ_ЗапчастиОР.ТиповойОР = &ТиповойОР
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Запчасти.Номенклатура,
		               |	ВТ_Запчасти.Характеристика,
		               |	СУММА(1) КАК КоличествоСтрок
		               |ПОМЕСТИТЬ ВТ_ДублиВЗапчастях
		               |ИЗ
		               |	ВТ_Запчасти КАК ВТ_Запчасти
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_Запчасти.Номенклатура,
		               |	ВТ_Запчасти.Характеристика
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(1) > 1
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_Запчасти.Номенклатура,
		               |	ВТ_Запчасти.Качество,
		               |	ВТ_Запчасти.Характеристика,
		               |	ВТ_Запчасти.Количество,
		               |	ВТ_Запчасти.ТиповойОР,
		               |	ВТ_Запчасти.ИзТипового,
		               |	ВЫБОР
		               |		КОГДА ВТ_ДублиВЗапчастях.Номенклатура ЕСТЬ NULL 
		               |			ТОГДА ВТ_Запчасти.Удален
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ПОМЕСТИТЬ ВТ_Запчасти_Промежуточная
		               |ИЗ
		               |	ВТ_Запчасти КАК ВТ_Запчасти
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДублиВЗапчастях КАК ВТ_ДублиВЗапчастях
		               |		ПО ВТ_Запчасти.Номенклатура = ВТ_ДублиВЗапчастях.Номенклатура
		               |			И ВТ_Запчасти.Характеристика = ВТ_ДублиВЗапчастях.Характеристика
		               |			И (ВТ_Запчасти.ИзТипового)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(ВТ_ВР_ТОР.Номенклатура, ВТ_ВР_ОР.Номенклатура) КАК Номенклатура,
		               |	ЕСТЬNULL(ВТ_ВР_ТОР.ВидРемонта, ВТ_ВР_ОР.ВидРемонта) КАК ВидРемонта,
		               |	ЕСТЬNULL(ВТ_ВР_ТОР.Характеристика, ВТ_ВР_ОР.Характеристика) КАК Характеристика,
		               |	ЕСТЬNULL(ВТ_ВР_ТОР.Количество, ВТ_ВР_ОР.Количество) КАК Количество,
		               |	ВЫБОР
		               |		КОГДА НЕ ВТ_ВР_ТОР.Номенклатура ЕСТЬ NULL 
		               |			ТОГДА ВТ_ВР_ТОР.ТиповойОР
		               |		ИНАЧЕ &ПустойТОР
		               |	КОНЕЦ КАК ТиповойОР,
		               |	ВЫБОР
		               |		КОГДА НЕ ВТ_ВР_ТОР.Номенклатура ЕСТЬ NULL 
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА НЕ(ВТ_ВР_ТОР.Номенклатура ЕСТЬ NULL 
		               |						ИЛИ ВТ_ВР_ОР.Номенклатура ЕСТЬ NULL )
		               |				И ВТ_ВР_ОР.Удален
		               |			ТОГДА ИСТИНА
		               |		ИНАЧЕ ЛОЖЬ
		               |	КОНЕЦ КАК Удален
		               |ПОМЕСТИТЬ ВТ_ВР
		               |ИЗ
		               |	ВТ_ВР_ТОР КАК ВТ_ВР_ТОР
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ВР_ОР КАК ВТ_ВР_ОР
		               |		ПО ВТ_ВР_ТОР.Номенклатура = ВТ_ВР_ОР.Номенклатура
		               |			И ВТ_ВР_ТОР.ВидРемонта = ВТ_ВР_ОР.ВидРемонта
		               |			И ВТ_ВР_ТОР.Характеристика = ВТ_ВР_ОР.Характеристика
		               |			И ВТ_ВР_ТОР.Количество = ВТ_ВР_ОР.Количество
		               |ГДЕ
		               |	НЕ(ВТ_ВР_ТОР.Номенклатура ЕСТЬ NULL 
		               |				И ЕСТЬNULL(ВТ_ВР_ОР.Удален, ЛОЖЬ))
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ВР.Номенклатура,
		               |	ВТ_ВР.ВидРемонта,
		               |	ВТ_ВР.Характеристика,
		               |	СУММА(1) КАК КоличествоСтрок
		               |ПОМЕСТИТЬ Вт_ДублиВВР
		               |ИЗ
		               |	ВТ_ВР КАК ВТ_ВР
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ВТ_ВР.Номенклатура,
		               |	ВТ_ВР.ВидРемонта,
		               |	ВТ_ВР.Характеристика
		               |
		               |ИМЕЮЩИЕ
		               |	СУММА(1) > 1
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ВР.Номенклатура,
		               |	ВТ_ВР.ВидРемонта,
		               |	ВТ_ВР.Характеристика,
		               |	ВТ_ВР.Количество,
		               |	ВТ_ВР.ТиповойОР,
		               |	ВТ_ВР.ИзТипового,
		               |	ВЫБОР
		               |		КОГДА Вт_ДублиВВР.Номенклатура ЕСТЬ NULL 
		               |			ТОГДА ВТ_ВР.Удален
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ПОМЕСТИТЬ ВТ_ВР_Финальная
		               |ИЗ
		               |	ВТ_ВР КАК ВТ_ВР
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Вт_ДублиВВР КАК Вт_ДублиВВР
		               |		ПО ВТ_ВР.Номенклатура = Вт_ДублиВВР.Номенклатура
		               |			И ВТ_ВР.ВидРемонта = Вт_ДублиВВР.ВидРемонта
		               |			И ВТ_ВР.Характеристика = Вт_ДублиВВР.Характеристика
		               |			И (ВТ_ВР.ИзТипового)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ЕСТЬNULL(ВТ_Запчасти.Номенклатура, ВТ_ВР.Номенклатура) КАК Номенклатура,
		               |	ЕСТЬNULL(ВТ_Запчасти.Качество, &ПустоеКачество) КАК Качество,
		               |	ЕСТЬNULL(ВТ_Запчасти.Характеристика, ВТ_ВР.Характеристика) КАК Характеристика,
		               |	МАКСИМУМ(ЕСТЬNULL(ВТ_Запчасти.Количество, ВТ_ВР.Количество)) КАК Количество,
		               |	ЕСТЬNULL(ВТ_Запчасти.ТиповойОР, &ПустойТОР) КАК ТиповойОР,
		               |	ЕСТЬNULL(ВТ_Запчасти.ИзТипового, ЛОЖЬ) КАК ИзТипового,
		               |	ЕСТЬNULL(ВТ_Запчасти.Удален, ЛОЖЬ) КАК Удален,
		               |	МАКСИМУМ(ВЫБОР
		               |			КОГДА ЕСТЬNULL(ВТ_ВР.Удален, ИСТИНА)
		               |				ТОГДА 0
		               |			ИНАЧЕ ВТ_ВР.Количество
		               |		КОНЕЦ) КАК КоличествоДляПроверки
		               |ИЗ
		               |	ВТ_Запчасти_Промежуточная КАК ВТ_Запчасти
		               |		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_ВР_Финальная КАК ВТ_ВР
		               |		ПО ВТ_Запчасти.Номенклатура = ВТ_ВР.Номенклатура
		               |			И ВТ_Запчасти.Характеристика = ВТ_ВР.Характеристика
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ЕСТЬNULL(ВТ_Запчасти.Удален, ЛОЖЬ),
		               |	ЕСТЬNULL(ВТ_Запчасти.ТиповойОР, &ПустойТОР),
		               |	ЕСТЬNULL(ВТ_Запчасти.Номенклатура, ВТ_ВР.Номенклатура),
		               |	ЕСТЬNULL(ВТ_Запчасти.ИзТипового, ЛОЖЬ),
		               |	ЕСТЬNULL(ВТ_Запчасти.Характеристика, ВТ_ВР.Характеристика),
		               |	ЕСТЬNULL(ВТ_Запчасти.Качество, &ПустоеКачество)
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВТ_ВР_Финальная.Номенклатура,
		               |	ВТ_ВР_Финальная.ВидРемонта,
		               |	ВТ_ВР_Финальная.Характеристика,
		               |	ВТ_ВР_Финальная.Количество,
		               |	ВТ_ВР_Финальная.ТиповойОР,
		               |	ВТ_ВР_Финальная.ИзТипового,
		               |	ВТ_ВР_Финальная.Удален
		               |ИЗ
		               |	ВТ_ВР_Финальная КАК ВТ_ВР_Финальная";
					   
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
					   
		Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
		Запрос.УстановитьПараметр("ТиповойОР", ?(ЗначениеЗаполнено(Объект.ТиповойОР),Объект.ТиповойОР, Неопределено));
		Запрос.УстановитьПараметр("Запчасти_ОР", ТабЗапчастейОбъектовРемонта.Выгрузить());
		Запрос.УстановитьПараметр("ВР_ОР", ТабЗатратПоВидамРемонта.Выгрузить());
		Запрос.УстановитьПараметр("ПустоеКачество", Перечисления.ГрадацииКачества.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустойТОР", Справочники.торо_ТиповыеОР.ПустаяСсылка());
		
		Результат = Запрос.ВыполнитьПакет();
		Запчасти = Результат[10].выгрузить();
		ВидРемонтов = Результат[11].выгрузить();
	КонецЕсли;
	
	Если МодифицированностьЗапчастейОР ИЛИ МодифицированностьНормативныхЗатратПоЗапчастям Тогда
		
		Попытка
			
			Если МодифицированностьЗапчастейОР Тогда
				НаборЗаписейДействующие = РегистрыСведений.торо_Запчасти.СоздатьНаборЗаписей();
				НаборЗаписейДействующие.Отбор.ОбъектРемонта.Установить(ТекОбъект);
				НаборЗаписейУдаленные	= РегистрыСведений.торо_ЗапчастиУдаленные.СоздатьНаборЗаписей();
				НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			КонецЕсли;
			
			масОшибок = Новый Массив;
			Для Каждого СтрокаЗапчастей Из Запчасти Цикл
				
				Если СтрокаЗапчастей.Количество < СтрокаЗапчастей.КоличествоДляПроверки Тогда
					масОшибок.Добавить(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Количество нормативных затрат по номенклатуре ""%1"" превышает количество номенклатуры. Запись была отменена!'"),СтрокаЗапчастей.Номенклатура));
				КонецЕсли;
				
				Если МодифицированностьЗапчастейОР Тогда
					Если НЕ ЗначениеЗаполнено(СтрокаЗапчастей.ТиповойОР) Тогда
						
						НС = НаборЗаписейДействующие.Добавить();
						ЗаполнитьЗначенияСвойств(НС,СтрокаЗапчастей);
						НС.ОбъектРемонта = ТекОбъект;
						НС.Приоритет = Истина;
						
					ИначеЕсли СтрокаЗапчастей.Удален Тогда
						
						НС = НаборЗаписейДействующие.Добавить();
						ЗаполнитьЗначенияСвойств(НС,СтрокаЗапчастей);
						НС.ОбъектРемонта = ТекОбъект;
						НС.Приоритет = Ложь;
						
						НС = НаборЗаписейУдаленные.Добавить();
						ЗаполнитьЗначенияСвойств(НС,СтрокаЗапчастей,"ТиповойОР,Номенклатура,Характеристика");
						НС.ОбъектРемонта = ТекОбъект;
						
					Иначе	
						
						НС = НаборЗаписейДействующие.Добавить();
						ЗаполнитьЗначенияСвойств(НС,СтрокаЗапчастей);
						НС.ОбъектРемонта = ТекОбъект;
						НС.Приоритет = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ТиповойОР",
						СтрокаЗапчастей.Номенклатура, СтрокаЗапчастей.Характеристика, Справочники.торо_ТиповыеОР.ПустаяСсылка())).Количество() = 0;
						
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ТекОшибка из масОшибок цикл
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекОшибка);
				отказ = Истина;
			КонецЦикла;
			
			Если отказ тогда Возврат; КонецЕсли;
			
			Если МодифицированностьЗапчастейОР Тогда
				НаборЗаписейДействующие.Записать();
				НаборЗаписейУдаленные.Записать();
			КонецЕсли;
			
			Если Отказ = Истина Тогда
				Возврат;
			Иначе			
				МодифицированностьЗапчастейОР = Ложь;
			КонецЕсли;
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать запчасти: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если МодифицированностьНормативныхЗатратПоЗапчастям Тогда		
		
		Попытка
			
			НаборЗаписейДействующие = РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонта.СоздатьНаборЗаписей();
			НаборЗаписейДействующие.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписейУдаленные	= РегистрыСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			
			Для Каждого СтрокаЗапчастей Из ВидРемонтов Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаЗапчастей.ТиповойОР) Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаЗапчастей);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Истина;
					
				ИначеЕсли СтрокаЗапчастей.Удален Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаЗапчастей);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Ложь;
					
					НС = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаЗапчастей,"ТиповойОР,Номенклатура,ВидРемонта, Характеристика");
					НС.ОбъектРемонта = ТекОбъект;
					
				Иначе	
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаЗапчастей);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура,ТиповойОР,ВидРемонта,Характеристика",
						СтрокаЗапчастей.Номенклатура,Справочники.торо_ТиповыеОР.ПустаяСсылка(),СтрокаЗапчастей.ВидРемонта, СтрокаЗапчастей.Характеристика)).Количество() = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписейДействующие.Записать();
			НаборЗаписейУдаленные.Записать();
			
			Если Отказ = Истина Тогда
				Возврат;
			Иначе			
				МодифицированностьНормативныхЗатратПоЗапчастям = Ложь;
			КонецЕсли;
			
			МодифицированностьНормативныхЗатратПоЗапчастям = Ложь;
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать запчасти: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	
	Если МодифицированностьМаксЗначНаработки Тогда
		
		ТабМаксЗнач = ТабМаксимальныхЗначенийНаработки.Выгрузить();
		// Удалить строки, которые могут быть получены из параметров Типовго ОР и не прописаны для текущего ОР.
		
		ПараметрыОтбора = Новый Структура("ОбъектРемонта", ТекОбъект);
		ВременнаяТЗ = ТабМаксЗнач.Скопировать(ПараметрыОтбора);
		ТабМаксЗнач.Очистить();
		ТабМаксЗнач = ВременнаяТЗ.Скопировать();
		
		НаборКонтролируемыхПоказателей = РегистрыСведений.торо_МаксимальныеЗначенияНаработкиОР.СоздатьНаборЗаписей();
		НаборКонтролируемыхПоказателей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
		НаборКонтролируемыхПоказателей.Загрузить(ТабМаксЗнач);
		НаборКонтролируемыхПоказателей.Записать();		
		
	КонецЕсли;
	
	Если МодифицированностьНормРемонтов Тогда
		
		Попытка
			
			НаборЗаписейДействующие = РегистрыСведений.торо_НормативныеРемонтыОборудования.СоздатьНаборЗаписей();
			НаборЗаписейДействующие.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписейУдаленные	= РегистрыСведений.торо_НормативныеРемонтыОборудованияУдаленные.СоздатьНаборЗаписей();
			НаборЗаписейУдаленные.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			
			Для Каждого СтрокаНорматива Из НормативныеРемонты Цикл
				
				Если НЕ ЗначениеЗаполнено(СтрокаНорматива.ТиповойОР) Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаНорматива);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Истина;
					
				ИначеЕсли СтрокаНорматива.Удален Тогда
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаНорматива);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = Ложь;
					
					НС = НаборЗаписейУдаленные.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаНорматива,"ТиповойОР,ВидРемонта");
					НС.ОбъектРемонта = ТекОбъект;
					
				Иначе	
					
					НС = НаборЗаписейДействующие.Добавить();
					ЗаполнитьЗначенияСвойств(НС,СтрокаНорматива);
					НС.ОбъектРемонта = ТекОбъект;
					НС.Приоритет = НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта,ТиповойОР",СтрокаНорматива.ВидРемонта,Справочники.торо_ТиповыеОР.ПустаяСсылка())).Количество() = 0;
					
				КонецЕсли;
				
			КонецЦикла;
			
			НаборЗаписейДействующие.Записать();
			НаборЗаписейУдаленные.Записать();
			
			Если Отказ = Истина Тогда
				Возврат;
			КонецЕсли;
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать нормативные ремонты: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	Если МодифицированностьНормРемонтов ИЛИ МодифицированностьПредшествующихРемонтов Тогда
		Попытка
			Если ПредТиповойОР <> Объект.ТиповойОР Тогда
				ИзменитьПредшествующиеРемонтыНаСервере(ТекОбъект, ПредТиповойОР, Объект.ТиповойОР);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписей.Отбор.ТиповойОР.Установить(Справочники.торо_ТиповыеОР.ПустаяСсылка());
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТабТекПредшествующих",ПредшествующиеРемонты.Выгрузить(Новый Структура("ТиповойОР",Справочники.торо_ТиповыеОР.ПустаяСсылка())));
			Запрос.УстановитьПараметр("ОбъектРемонта",Объект.Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ТабПредРемонтов.ВидРемонта,
			               |	ТабПредРемонтов.ПредшествующийВидРемонта,
			               |	ТабПредРемонтов.ТиповойОР
			               |ПОМЕСТИТЬ ТабПредРемонтов
			               |ИЗ
			               |	&ТабТекПредшествующих КАК ТабПредРемонтов
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
			               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта,
			               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР,
			               |	ЛОЖЬ КАК Приоритет
			               |ПОМЕСТИТЬ ТабСПриоритетами
			               |ИЗ
			               |	РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
			               |ГДЕ
			               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ТабПредРемонтов.ВидРемонта,
			               |	ТабПредРемонтов.ПредшествующийВидРемонта,
			               |	ТабПредРемонтов.ТиповойОР,
			               |	ИСТИНА
			               |ИЗ
			               |	ТабПредРемонтов КАК ТабПредРемонтов
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТабСПриоритетами.ВидРемонта,
						   |	ТабСПриоритетами.ТиповойОР,
			               |	МАКСИМУМ(ТабСПриоритетами.Приоритет) КАК Приоритет
			               |ПОМЕСТИТЬ ТабСМаксПриоритетами
			               |ИЗ
			               |	ТабСПриоритетами КАК ТабСПриоритетами
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ТабСПриоритетами.ВидРемонта,
						   |	ТабСПриоритетами.ТиповойОР
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТабСПриоритетами.ВидРемонта,
			               |	ТабСПриоритетами.ПредшествующийВидРемонта,
			               |	ТабСПриоритетами.ТиповойОР,
						   |	&ОбъектРемонта КАК ОбъектРемонта,
						   |	ВЫБОР
			               |		КОГДА торо_НормативныеРемонтыОборудования.ВидРемонта ЕСТЬ NULL 
			               |			ТОГДА ИСТИНА
			               |		ИНАЧЕ ТабСПриоритетами.Приоритет
			               |	КОНЕЦ КАК Приоритет
			               |ИЗ
			               |	ТабСМаксПриоритетами КАК ТабСМаксПриоритетами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСПриоритетами КАК ТабСПриоритетами
			               |		ПО ТабСМаксПриоритетами.ВидРемонта = ТабСПриоритетами.ВидРемонта
						   |			И ТабСМаксПриоритетами.ТиповойОР = ТабСПриоритетами.ТиповойОР
			               |			И ТабСМаксПриоритетами.Приоритет = ТабСПриоритетами.Приоритет
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			               |		ПО ТабСМаксПриоритетами.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
			               |			И (торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			               |				И торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
			               |				И торо_НормативныеРемонтыОборудования.Приоритет)";
						   
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.ПредшествующийВидРемонта) Тогда
						
						Отказ = Истина;
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = 
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось записать предшествующие ремонты: для вида ремонта <%1> не заполнено поле ""Предшествующий вид ремонта""'"), Выборка.ВидРемонта);
						Сообщение.Сообщить();
						
					ИначеЕсли Не ЗначениеЗаполнено(Выборка.ВидРемонта) Тогда
						
						торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Не удалось записать предшествующие ремонты: в одной из строк не заполнено поле ""Вид ремонта""'"));	
						Отказ = Истина;	
						
					КонецЕсли;
					
					Если Отказ Тогда
						Продолжить;
					КонецЕсли;
					
					НаборЗаписейОР = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
					НаборЗаписейОР.Отбор.ОбъектРемонта.Установить(ТекОбъект);
					НаборЗаписейОР.Отбор.ТиповойОР.Установить(Выборка.ТиповойОР);
					НаборЗаписейОР.Отбор.ВидРемонта.Установить(Выборка.ВидРемонта);
					НаборЗаписейОР.Отбор.ПредшествующийВидРемонта.Установить(Выборка.ПредшествующийВидРемонта);
					
					ЗаполнитьЗначенияСвойств(НаборЗаписейОР.Добавить(),Выборка);
					
					НаборЗаписейОР.Записать(Истина);
					
				КонецЦикла;
			КонецЕсли;
						
			Если Отказ = Истина Тогда
				Возврат;
			КонецЕсли;
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать предшествующие ремонты: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	Если МодифицированностьНормРемонтов ИЛИ МодифицированностьЗамещаемыхРемонтов Тогда
		Попытка
			Если ПредТиповойОР <> Объект.ТиповойОР Тогда
				ИзменитьЗамещаемыеРемонтыНаСервере(ТекОбъект, ПредТиповойОР, Объект.ТиповойОР);
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
			НаборЗаписей.Отбор.ТиповойОР.Установить(Справочники.торо_ТиповыеОР.ПустаяСсылка());
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ТабТекЗамещающих",ЗамещаемыеРемонты.Выгрузить(Новый Структура("ТиповойОР",Справочники.торо_ТиповыеОР.ПустаяСсылка())));
			Запрос.УстановитьПараметр("ОбъектРемонта",Объект.Ссылка);
			Запрос.Текст = "ВЫБРАТЬ
			               |	ТабТекЗамещающих.ВидРемонта,
			               |	ТабТекЗамещающих.ЗамещаемыйВидРемонта,
			               |	ТабТекЗамещающих.ТиповойОР,
			               |	ТабТекЗамещающих.СпособЗамещения,
			               |	ТабТекЗамещающих.НачальнаяГраница,
			               |	ТабТекЗамещающих.КонечнаяГраница
			               |ПОМЕСТИТЬ ТабТекЗамещающих
			               |ИЗ
			               |	&ТабТекЗамещающих КАК ТабТекЗамещающих
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
			               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
			               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР,
			               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
			               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
			               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница,
			               |	ЛОЖЬ КАК Приоритет
			               |ПОМЕСТИТЬ ТабСПриоритетами
			               |ИЗ
			               |	РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
			               |ГДЕ
			               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта = &ОбъектРемонта
			               |
			               |ОБЪЕДИНИТЬ ВСЕ
			               |
			               |ВЫБРАТЬ
			               |	ТабТекЗамещающих.ВидРемонта,
			               |	ТабТекЗамещающих.ЗамещаемыйВидРемонта,
			               |	ТабТекЗамещающих.ТиповойОР,
			               |	ТабТекЗамещающих.СпособЗамещения,
			               |	ТабТекЗамещающих.НачальнаяГраница,
			               |	ТабТекЗамещающих.КонечнаяГраница,
			               |	ИСТИНА
			               |ИЗ
			               |	ТабТекЗамещающих КАК ТабТекЗамещающих
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТабСПриоритетами.ВидРемонта,
						   |	ТабСПриоритетами.ТиповойОР,
			               |	МАКСИМУМ(ТабСПриоритетами.Приоритет) КАК Приоритет
			               |ПОМЕСТИТЬ ТабСМаксПриоритетами
			               |ИЗ
			               |	ТабСПриоритетами КАК ТабСПриоритетами
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ТабСПриоритетами.ВидРемонта,
						   |	ТабСПриоритетами.ТиповойОР
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ТабСПриоритетами.ВидРемонта,
			               |	ТабСПриоритетами.ЗамещаемыйВидРемонта,
			               |	ТабСПриоритетами.ТиповойОР,
			               |	ТабСПриоритетами.СпособЗамещения,
			               |	ТабСПриоритетами.НачальнаяГраница,
			               |	ТабСПриоритетами.КонечнаяГраница,
			               |	ВЫБОР
			               |		КОГДА торо_НормативныеРемонтыОборудования.ВидРемонта ЕСТЬ NULL 
			               |			ТОГДА ИСТИНА
			               |		ИНАЧЕ ТабСПриоритетами.Приоритет
			               |	КОНЕЦ КАК Приоритет,
			               |	&ОбъектРемонта КАК ОбъектРемонта
			               |ИЗ
			               |	ТабСМаксПриоритетами КАК ТабСМаксПриоритетами
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабСПриоритетами КАК ТабСПриоритетами
			               |		ПО ТабСМаксПриоритетами.ВидРемонта = ТабСПриоритетами.ВидРемонта
			               |			И ТабСМаксПриоритетами.ТиповойОР = ТабСПриоритетами.ТиповойОР
						   |			И ТабСМаксПриоритетами.Приоритет = ТабСПриоритетами.Приоритет
			               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			               |		ПО ТабСМаксПриоритетами.ВидРемонта = торо_НормативныеРемонтыОборудования.ВидРемонта
			               |			И (торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			               |				И торо_НормативныеРемонтыОборудования.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
			               |				И торо_НормативныеРемонтыОборудования.Приоритет)";
						  
						   
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Если Не ЗначениеЗаполнено(Выборка.ЗамещаемыйВидРемонта) Тогда
						
						Отказ = Истина;
						Сообщение = Новый СообщениеПользователю;
						Сообщение.Текст = 
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не удалось записать предшествующие ремонты: для вида ремонта <%1> не заполнено поле ""Замещаемый вид ремонта""'"), Выборка.ВидРемонта);
						Сообщение.Сообщить();
						
					ИначеЕсли Не ЗначениеЗаполнено(Выборка.ВидРемонта) Тогда
						
						торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
							НСтр("ru = 'Не удалось записать предшествующие ремонты: в одной из строк не заполнено поле ""Вид ремонта""'"));	
						Отказ = Истина;	
						
					КонецЕсли;
					
					Если Отказ Тогда
						Продолжить;
					КонецЕсли;
					
					НаборЗаписейОР = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
					НаборЗаписейОР.Отбор.ОбъектРемонта.Установить(ТекОбъект);
					НаборЗаписейОР.Отбор.ТиповойОР.Установить(Выборка.ТиповойОР);
					НаборЗаписейОР.Отбор.ВидРемонта.Установить(Выборка.ВидРемонта);
					НаборЗаписейОР.Отбор.ЗамещаемыйВидРемонта.Установить(Выборка.ЗамещаемыйВидРемонта);
					
					ЗаполнитьЗначенияСвойств(НаборЗаписейОР.Добавить(),Выборка);
					
					НаборЗаписейОР.Записать(Истина);
					
				КонецЦикла;
			КонецЕсли;
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать замещаемые ремонты: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЕсли;
	
	Если ТаблицаОценокРММодифицированность Тогда
		// Запись набора записей.
		Попытка
			
			ТаблицаЗначенийОценокРМ = РСНЗТаблицаОценокРМ.Выгрузить();
			МассивСтрокОценокРМ = ТаблицаЗначенийОценокРМ.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов", ТекОбъект));
			ТаблицаБуфер = ТаблицаЗначенийОценокРМ.Скопировать(МассивСтрокОценокРМ);
			
			НаборНормативов = РегистрыСведений.торо_РМРемонтов.СоздатьНаборЗаписей();
			НаборНормативов.Отбор.ГруппаОбъектовРемонтов.Установить(ТекОбъект);
			НаборНормативов.Загрузить(ТаблицаБуфер);
			НаборНормативов.Записать();
			ТаблицаОценокРММодифицированность = Ложь;
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать нормативы ремонтных работ: '") + ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	// Цепочки
	Если МодифицированностьРемЦиклов Тогда 
		
		// Запись набора записей.
		Попытка
			
			ТаблицаЗначенийРемонтныеЦиклыОборудования = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить();
			МассивСтрокЦиклов = ТаблицаЗначенийРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов", ТекОбъект));
			ТаблицаБуфер = ТаблицаЗначенийРемонтныеЦиклыОборудования.Скопировать(МассивСтрокЦиклов);
			
			НаборРемонтныхЦикловОборудования = РегистрыСведений.торо_РемонтныеЦиклыОборудования.СоздатьНаборЗаписей();
			НаборРемонтныхЦикловОборудования.Отбор.ГруппаОбъектовРемонтов.Установить(ТекОбъект);
			НаборРемонтныхЦикловОборудования.Загрузить(ТаблицаБуфер);
			НаборРемонтныхЦикловОборудования.Записать();
			
		Исключение
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать фиксированные ремонтные циклы: '")+ ОписаниеОшибки());
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
		
	Если МодифицированностьГарантий Тогда
		
		МассивСтрок = ГарантииОбъектаРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекОбъект));
		
		НаборЗаписей = РегистрыСведений.торо_СрокиГарантииОбъектовРемонта.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектРемонта.Установить(ТекОбъект);
		Для каждого Строка Из МассивСтрок Цикл
			ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Строка);
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
			МодифицированностьГарантий = Ложь;
		Исключение
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Запись в регистр сведений <Сроки гарантии объектов ремонта> не выполнена.'"));
		КонецПопытки; 
		
	КонецЕсли;
	
	Если МодифицированностьОсновныхЗависимых Тогда
		Если ВыборОсновногоЗависимого = "Основное" Тогда
			ТЧДляРаботы = ОсновноеОборудование;
		Иначе
			ТЧДляРаботы = ЗависимоеОборудование;
		КонецЕсли;
		
		ТЧДляРаботы.Очистить();
		
		Для Каждого Строка Из ВидыРемонтаОсновногоСвязанного Цикл
			НС = ТЧДляРаботы.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Строка);
		КонецЦикла;
				
		Для каждого Строка Из ОсновноеОборудование Цикл
			
			МенеджерЗаписи = РегистрыСведений.торо_РемонтыОсновногоЗависимогоОборудования.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.ОсновнойОбъектРемонта       = Строка.ОбъектРемонта;
			МенеджерЗаписи.СвязанныйОбъектРемонта      = Объект.Ссылка;
			МенеджерЗаписи.ВидРемонтаОсновногоОбъекта  = Строка.ВидРемонтаОсновногоОбъекта;
			МенеджерЗаписи.ВидРемонтаЗависимогоОбъекта = Строка.ВидРемонтаЗависимогоОбъекта;
			
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
			КонецПопытки; 
			
		КонецЦикла;
		
		Для каждого Строка Из ЗависимоеОборудование Цикл
			
			МенеджерЗаписи = РегистрыСведений.торо_РемонтыОсновногоЗависимогоОборудования.СоздатьМенеджерЗаписи();
			
			МенеджерЗаписи.ОсновнойОбъектРемонта       = Объект.Ссылка;
			МенеджерЗаписи.СвязанныйОбъектРемонта      = Строка.ОбъектРемонта;
			МенеджерЗаписи.ВидРемонтаОсновногоОбъекта  = Строка.ВидРемонтаОсновногоОбъекта;
			МенеджерЗаписи.ВидРемонтаЗависимогоОбъекта = Строка.ВидРемонтаЗависимогоОбъекта;
			
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
			КонецПопытки; 
			
		КонецЦикла;
	КонецЕсли;
	
	Если ФОИспользоватьДопРеквизиты Тогда
		УправлениеСвойствами.ЗаписатьДопРеквизитыСведенияНабора(ЭтаФорма, Отказ, "ДопРеквизит", ТекущийОбъект.НаборСвойств);
	КонецЕсли;
	
	ПредТиповойОР = Объект.ТиповойОР;
	МодифицированностьНормРемонтов = Ложь;
	МодифицированностьЗамещаемыхРемонтов = Ложь;
	МодифицированностьПредшествующихРемонтов = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		
		Если Не ЗначениеЗаполнено(ДатаВводаВЭксплуатацию) Тогда 
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru = 'Объект ремонта будет недоступен для подбора в документы ""Ввод начальных данных"", ""Учет наработки оборудования"", ""Состояния объектов ремонта"". Введите документ ""Принятие объекта ремонта к учету"" (Группа ""Статус объекта ремонта"")'");
			Сообщение.Поле  = "ВвестиОткрытьДокументПринятиеКУчету";
			Сообщение.УстановитьДанные(ЭтаФорма);
			Сообщение.Сообщить(); 

		КонецЕсли;
		
		Объект.ДатаВводаВЭксплуатацию = ДатаВводаВЭксплуатацию;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(Объект.ДатаВводаВЭксплуатацию) Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = НСтр("ru = 'Не заполнено поле <Дата ввода в эксплуатацию>. Запись не выполнена.'");
			Сообщение.Сообщить();
			Отказ = Истина;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ГарантииОбъектаРемонта.Количество() > 0 Тогда
		СтруктураОтбора = Новый Структура("ОбъектРемонта", Объект.Ссылка);
		МассивСтрок = ГарантииОбъектаРемонта.НайтиСтроки(СтруктураОтбора);
		
		Для каждого Строка Из МассивСтрок Цикл
			
			СтрокаСОрганизациейГарантииЗаполнена = Истина;
			СтрокаСУсловиямиГарантииЗаполнена	 = Истина;
			
			Если СтрокаСУсловиямиГарантииЗаполнена И Не ЗначениеЗаполнено(Строка.УсловияГарантии) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'В таблице сроков гарантии объекта не все поля в колонке <Условия гарантии> заполнены. Запись не выполнена'");
				Сообщение.Сообщить();
				СтрокаСУсловиямиГарантииЗаполнена = Ложь;
				Отказ = Истина;
			КонецЕсли;
			
			Если СтрокаСОрганизациейГарантииЗаполнена И Не ЗначениеЗаполнено(Строка.ГарантирующаяОрганизация) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'В таблице сроков гарантии объекта не все поля в колонке <Гарантирующая организация> заполнены. Запись не выполнена'");
				Сообщение.Сообщить();
				СтрокаСОрганизациейГарантииЗаполнена = Ложь;
				Отказ = Истина;
			КонецЕсли;
			
			Если Не СтрокаСОрганизациейГарантииЗаполнена 
				И НЕ СтрокаСУсловиямиГарантииЗаполнена Тогда
				Прервать;
			КонецЕсли; 
			
		КонецЦикла; 
	КонецЕсли; 
	
	Если (МодифицированностьНормРемонтов Или МодифицированностьЗамещаемыхРемонтов Или  МодифицированностьПредшествующихРемонтов)
		И ЗначениеЗаполнено(ВРНачалоЦикла) Тогда
		
		Элементы.Перерасчитать.Доступность 	= Ложь;
		Элементы.Построить.Доступность 		= Ложь;
		Элементы.Настройки.Доступность 		= Ложь;
		
		ВРНачалоЦикла = Неопределено;
		торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
		ОчиститьПолеТабличногоДокумента();
		Декорация1			= "";
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Данные на вкладке <Структура ремонтного цикла> были очищены, так как нормативы изменены.'");
		Сообщение.Сообщить();		
		
	КонецЕсли;
	
	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		
		Если Не Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Доступность = Истина;
		КонецЕсли;
		СтатусОР = РегистрыСведений.торо_СтатусыОбъектовРемонтаВУчете.ПолучитьТекущийСтатусОР(Объект.Ссылка);
		Структура = РегистрыСведений.торо_НастройкиДоступностиОбъектовРемонта.Получить(Новый Структура("СтатусОРВУчете",СтатусОР));
		
		Если Не Структура = Неопределено Тогда
			
			ОбязательностьПоляДатаВводаВЭксплуатацию = Структура.ДоступностьПриПодборе;
			
		КонецЕсли;		
	КонецЕсли; 
	
	СтруктураВозврата = ОбновитьНаработку(Объект.Ссылка, Объект.ТиповойОР);
	
	СписокПараметровНаработки.Очистить();
	
	Для каждого Элем Из СтруктураВозврата Цикл
		НС = СписокПараметровНаработки.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	
	УправлениеСвойствами.ПослеЗаписиНаСервере(ЭтаФорма, ТекущийОбъект, "НаборСвойств");
	УнаследоватьДопРеквизитыИзТиповогоОР();

	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если СозданКопированием И Не ОповещениеВыполнено Тогда
		ОповеститьОЗаписиНового(Объект.Ссылка);
		ОповещениеВыполнено = Истина;
	КонецЕсли;
	
	Оповестить("ОбновитьФормуСпискаОР", Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере(ОтображатьИзображение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	ДобавитьНоменклатуруИзПодбора(ВыбранноеЗначение);
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаСервереБезКонтекста
Функция ТиповойОРПриИзмененииНаСервере(ОбъектРемонта, ТекТиповойОР, НовТиповойОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_НормативныеРемонтыОборудования.ВидРемонта,
	|	торо_НормативныеРемонтыОборудования.Ссылка КАК ТиповойОР,
	|	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	|	торо_НормативныеРемонтыОборудования.СпособПланирования,
	|	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	|	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	|	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	|	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	|	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
	|	торо_НормативныеРемонтыОборудования.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	|	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	|	торо_НормативныеРемонтыОборудования.НеУчитыватьПродолжительность,
	|	торо_НормативныеРемонтыОборудования.ИспользоватьКоэффициентыРемонтныхОсобенностей,
	|	торо_НормативныеРемонтыОборудования.УчитыватьПростоиОборудования
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_НормативныеРемонтыОборудования
	|ГДЕ
	|	торо_НормативныеРемонтыОборудования.Ссылка = &НовТиповойОР
	|	И торо_НормативныеРемонтыОборудования.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует)";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("НовТиповойОР", НовТиповойОР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата.Добавить(Новый Структура("ВидРемонта, ТиповойОР, НормативныйРемонт, СпособПланирования, ГрафикРемонтныхРабот, 
		|СпособВыполнения, НеИспользоватьВПланированииДатуВводаВЭксплуатацию, СпособУчетаДатыОтсчета, НеУчаствуетВПланировании, 
		|РазрешитьСокращатьМежремонтныйПериодПриПланировании, НеУчитыватьПриПланированииГрафикРаботыОборудования, НеУчитыватьПриПланированииГрафикРемонтныхРабот, НеУчитыватьПродолжительность, 
		|ИспользоватьКоэффициентыРемонтныхОсобенностей, УчитыватьПростоиОборудования",
		Выборка.ВидРемонта, Выборка.ТиповойОР, Выборка.НормативныйРемонт, Выборка.СпособПланирования, Выборка.ГрафикРемонтныхРабот, 
		Выборка.СпособВыполнения, Выборка.НеИспользоватьВПланированииДатуВводаВЭксплуатацию, Выборка.СпособУчетаДатыОтсчета, 
		Выборка.НеУчаствуетВПланировании, Выборка.РазрешитьСокращатьМежремонтныйПериодПриПланировании, Выборка.НеУчитыватьПриПланированииГрафикРаботыОборудования, 
		Выборка.НеУчитыватьПриПланированииГрафикРемонтныхРабот, Выборка.НеУчитыватьПродолжительность, Выборка.ИспользоватьКоэффициентыРемонтныхОсобенностей, 
		Выборка.УчитыватьПростоиОборудования));
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура НаправлениеПриИзменении(Элемент)
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Направление = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР,"Направление") Тогда
		Элемент.ЦветТекста = Новый Цвет(128,128,128);
	Иначе
		Элемент.ЦветТекста = Новый Цвет(0,0,0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТиповойОРПриИзменении(Элемент)
	
	ЗаполнитьНормативныеРемонты();
	
	// обновить нормативные ремонты
	СтруктураВозврата = ТиповойОРПриИзмененииНаСервере(Объект.Ссылка, ТекТиповойОР, Объект.ТиповойОР);		
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		СтрокиДляУдаления = НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР", ТекТиповойОР));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			НормативныеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Элем Из СтруктураВозврата Цикл
		НС = НормативныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;	
	
	// обновить предшествующие ремонты
	
	СтруктураВозврата = ПолучитьПредшествующиеРемонтыНаСервере(Объект.ТиповойОР);
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		СтрокиДляУдаления = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ТиповойОР", ТекТиповойОР));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			ПредшествующиеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из СтруктураВозврата Цикл
		НС = ПредшествующиеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;	
	МодифицированностьПредшествующихРемонтов = Истина;
	
	// Обновить замещаемые ремонты
	
	СтруктураВозврата = ПолучитьЗамещаемыеРемонтыНаСервере(Объект.ТиповойОР);
	
	Если ЗначениеЗаполнено(ТекТиповойОР) Тогда
		СтрокиДляУдаления = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ТиповойОР", ТекТиповойОР));
		Для Каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
			ЗамещаемыеРемонты.Удалить(СтрокаДляУдаления);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элем Из СтруктураВозврата Цикл
		НС = ЗамещаемыеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
	КонецЦикла;
	МодифицированностьЗамещаемыхРемонтов = Истина;
		
	Если Элемент = Элементы.ТиповойОР Тогда
		Объект.Изготовитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ТиповойОР, "Изготовитель");
		Объект.Направление  = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ТиповойОР, "Направление");		
		
		Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
			Элементы.Изготовитель.ЦветТекста = Новый Цвет(128,128,128);
			Элементы.Направление.ЦветТекста = Новый Цвет(128,128,128);
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поля ""Изготовитель"" и ""Направление"" заполнены по типовому объекту ремонта.'"),СтатусСообщения.Информация);
		ИначеЕсли ЗначениеЗаполнено(ТекТиповойОР) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Поля ""Изготовитель"" и ""Направление"" очищены.'"),СтатусСообщения.Информация);
		КонецЕсли;
	КонецЕсли;	
	
	МодифицированностьНормРемонтов = Истина;
	
	ТекТиповойОР = Объект.ТиповойОР;
	
	МассивРемонтовИзТипового = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("ИзТиповогоОР",Истина));
	Для Каждого Эл Из МассивРемонтовИзТипового Цикл
		
		СписокИзмеряемыхПоказателей.Удалить(Эл);
		
	КонецЦикла;
	
	СтруктураКонтрПоказателей = ОбновитьИзмеряемыеПоказатели(Объект.Ссылка, Объект.ТиповойОР);
	Для Каждого Элем Из СтруктураКонтрПоказателей Цикл
		Если Элем.ИзТиповогоОР Тогда
			НС = СписокИзмеряемыхПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем); 
			
		КонецЕсли;
	КонецЦикла;
	
	
	Массив = ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(Объект.Ссылка, Объект.ТиповойОР);
	Для Каждого Эл Из Массив Цикл
		Если ЗначениеЗаполнено(Эл.ТиповойОР) Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыОповещенияПоСостояниямОР.Добавить(),Эл);
		КонецЕсли;
	КонецЦикла;
	
	МодифицированностьИзмеряемыхПоказателей = Истина;
	
	
	
	
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
		
		СтрВозврата = ПолучитьЗапчастиИзТиповогоОР(Объект.ТиповойОР);
		
		// ТабЗатратПоВидамРемонта
		мУдаления = Новый Массив;
		Для каждого ТекСтрока из ТабЗатратПоВидамРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			ТабЗатратПоВидамРемонта.Удалить(текСтрока);
		КонецЦикла;
		
		Если СтрВозврата.Свойство("НормативныеЗатраты") Тогда
			Для каждого ТекСтрока из СтрВозврата.НормативныеЗатраты Цикл
				нс = ТабЗатратПоВидамРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(нс, ТекСтрока);
				нс.ИзТипового = Истина;
				нс.ТиповойОр = Объект.ТиповойОР;
				нс.ОбъектРемонта = Объект.Ссылка;
			КонецЦикла;
		КонецЕсли;
		
		// ТабЗапчастейОбъектовРемонта
		мУдаления.Очистить();
		Для каждого ТекСтрока из ТабЗапчастейОбъектовРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			ТабЗапчастейОбъектовРемонта.Удалить(текСтрока);
		КонецЦикла;
		
		Если СтрВозврата.Свойство("Запчасти") Тогда
			Для каждого ТекСтрока из СтрВозврата.Запчасти Цикл
				НайС = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", ТекСтрока.Номенклатура, ТекСтрока.Характеристика));
				нс = ТабЗапчастейОбъектовРемонта.Добавить();
				ЗаполнитьЗначенияСвойств(нс, ТекСтрока);
				нс.ИзТипового = Истина;
				нс.ТиповойОр = Объект.ТиповойОР;
				нс.ОбъектРемонта = Объект.Ссылка;
				нс.Удален = НайС.Количество() > 0;
				
				Если нс.Удален тогда
					НайС = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового", 
						ТекСтрока.Номенклатура, ТекСтрока.Характеристика, истина));
						
					Для каждого текЗатрата из Найс цикл
						текЗатрата.Удален = Истина;	
					КонецЦикла;	
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		
	Иначе
		
		мУдаления = Новый Массив;
		Для каждого ТекСтрока из ТабЗапчастейОбъектовРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			ТабЗапчастейОбъектовРемонта.Удалить(текСтрока);
		КонецЦикла;
		
		мУдаления.Очистить();
		Для каждого ТекСтрока из ТабЗатратПоВидамРемонта Цикл
			Если ТекСтрока.ИзТипового = Истина Тогда
				мУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого ТекСтрока из мУдаления Цикл
			ТабЗатратПоВидамРемонта.Удалить(текСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	ПанельОРПриСменеСтраницы(Элементы.ПанельОР, Элементы.ПанельОР.ТекущаяСтраница);
	
	// СтандартныеПодсистемы.Свойства
	ОбновитьЭлементыДополнительныхРеквизитов();
	УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнийОбъектПриИзменении(Элемент)
	ПоказыватьКонтрагента = Объект.ВнешнийОбъект;
	Элементы.СтраницаКонтрагента.Видимость = ПоказыватьКонтрагента;
	Элементы.СтарницаОрганизации.Видимость = НЕ ПоказыватьКонтрагента;
КонецПроцедуры

&НаКлиенте
Процедура ПанельОРПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) и (ТекущаяСтраница <> 0) 
		И (ТекущаяСтраница <> Элементы.СтраницаВизуализацияРемонтногоЦикла) 
		И (ТекущаяСтраница <> Элементы.ГруппаДополнительныеРеквизиты)
		И (ТекущаяСтраница <> Элементы.Основное)
		Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ПанельОРПриСменеСтраницыЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтраница, Элемент", ТекущаяСтраница, Элемент)), НСтр("ru = 'Для продолжения необходимо записать информацию об объекте. Записать?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		// устанавливаем фильтры для таблиц
		Если ТекущаяСтраница = Элементы.СтраницаНормативыПланирования Тогда
			СтраницыНормативыПланированияПриСменеСтраницы(Элементы.СтраницыНормативыПланирования,Элементы.СтраницыНормативыПланирования.ПодчиненныеЭлементы[0]);
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПоказателиЭксплуатации Тогда
			ТекСтраницаПараметр = Элементы.СтраницыПоказателиЭксплуатации.ТекущаяСтраница;
			Если ТекСтраницаПараметр = Неопределено Тогда
				ТекСтраницаПараметр = Элементы.СтраницыПоказателиЭксплуатации.ПодчиненныеЭлементы[0];
			КонецЕсли;
			СтраницыПоказателиЭксплуатацииПриСменеСтраницы(Элементы.СтраницыПоказателиЭксплуатации, ТекСтраницаПараметр);
		ИначеЕсли ТекущаяСтраница = Элементы.ГруппаДополнительныеРеквизиты Тогда
			УправлениеСвойствамиКлиентСервер.НастроитьКнопкиКоманднойПанелиТаблицыДопРеквизитов(ЭтаФорма, ПравоРедактирования);
		Иначе
			// на случай неправильной (старой) компоновки страниц
		   Если Элементы.СтраницыПоказателиЭксплуатации.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) <> -1 Тогда
				СтраницыПоказателиЭксплуатацииПриСменеСтраницы(Элемент, ТекущаяСтраница);
			ИначеЕсли Элементы.СтраницыНормативыПланирования.ПодчиненныеЭлементы.Индекс(ТекущаяСтраница) <> -1 Тогда
				СтраницыНормативыПланированияПриСменеСтраницы(Элемент, ТекущаяСтраница);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыСостоянийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если Элементы.СтраницыСостояний.ТекущаяСтраница = Элементы.СтраницыСостояний.ПодчиненныеЭлементы.ГрафикСостоянияОР Тогда
		
		ПостроитьГрафикСостоянийОР();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзготовительПриИзменении(Элемент)
	
	Если Объект.Изготовитель = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ТекТиповойОР,"Изготовитель") Тогда
		Элемент.ЦветТекста = Новый Цвет(128,128,128);
	Иначе
		Элемент.ЦветТекста = Новый Цвет(0,0,0);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЕстьГарантияДляОбъектаПриИзменении(Элемент)
	Если ЕстьГарантияДляОбъекта Тогда
		Элементы.СтраницаГарантийныеРемонты.Видимость = Истина;
	Иначе
		Если ГарантииОбъектаРемонта.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаСнятияФлажкаГарантий",ЭтаФорма);
			ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Таблица сроков гарантий заполнена. Очистить таблицу гарантий?'"),РежимДиалогаВопрос.ДаНет,,,НСтр("ru = 'Для объекта ремонта имеется гарантия'"));
		Иначе
			Элементы.СтраницаГарантийныеРемонты.Видимость = Ложь;
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаПриИзменении(Элемент)
	
	Если НЕ ВРНачалоЦикла = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") Тогда
		Элементы.Перерасчитать.Доступность 	= Истина;
		Элементы.Построить.Доступность 		= Истина;
		Элементы.Настройки.Доступность 		= Истина;
	Иначе 
		Элементы.Перерасчитать.Доступность 	= Ложь;
		Элементы.Построить.Доступность 		= Ложь;
		Элементы.Настройки.Доступность 		= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеМнемосхемыВыбор(Элемент)
	Если НЕ Элемент.ТекущийЭлемент = Неопределено Тогда
		Масс = СоответствиеИндексаИНомераКолонки.НайтиСтроки(Новый Структура("ТекЭлементИмя", Элемент.ТекущийЭлемент.Имя));
		Если Масс.Количество() = 0 Тогда
			Масс = СоответствиеИндексаИНомераКолонки.НайтиСтроки(Новый Структура("ТекЭлементИмя", Элемент.ТекущийЭлемент.КонецЭлемент.Имя));
			СтруктураНомерКолонкиСдвиг = Масс[0];
		Иначе
			СтруктураНомерКолонкиСдвиг = Масс[0];
		КонецЕсли;
		НомерКолонки = СтруктураНомерКолонкиСдвиг.НомерКолонки;
		СдвигСтрок = СтруктураНомерКолонкиСдвиг.СдвигСтрок;
		ИндексСтроки = 9 + КолонкиНаработки.Количество();
		Элементы.ПолеТД.ТекущаяОбласть = ПолеТД.Область(3+СдвигСтрок,НомерКолонки,6 + ИндексСтроки - 7+СдвигСтрок);
		ЭтаФорма.ТекущийЭлемент = Элементы.ПолеТД;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтраница = Элементы.ПанельОР.ТекущаяСтраница;
	
	Если МодифицированностьНормРемонтов ИЛИ НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда 
		ПоказатьВопрос(Новый ОписаниеОповещения("ПанельОРПриСменеСтраницыЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтраница, Элемент", ТекущаяСтраница, Элемент)), НСтр("ru = 'Для продолжения необходимо записать информацию об объекте. Записать?'"), РежимДиалогаВопрос.ДаНет);
	Иначе
		
		СтруктураВозврата = ЗаполнитьНормативныеРемонтыНаСервере(Объект.Ссылка);
		
		СписокЗначВР = Новый СписокЗначений;
				НормативныеРемонты.Очистить();
		Для каждого Элем Из СтруктураВозврата Цикл
			НС = НормативныеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
			
			Если НЕ Элем.Удален И СписокЗначВР.НайтиПоЗначению(Элем.ВидРемонта) = Неопределено Тогда
				СписокЗначВР.Добавить(Элем.ВидРемонта);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокЗначВР.Количество() > 0 Тогда
			СписокЗначВР.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ВРНачалоЦиклаНачалоВыбораЗавершение", ЭтаФорма, Новый Структура("Элемент", Элемент)), НСтр("ru = 'Выберите вид ремонта'"));
		Иначе
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Нормативные ремонты отсутствуют!'");
			Сообщение.Сообщить();
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если Не ВыбранныйЭлемент = Неопределено Тогда
		ВРНачалоЦикла = ВыбранныйЭлемент.Значение;
	КонецЕсли;
	
	ВРНачалоЦиклаПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПериодуПриИзменении(Элемент)
	Если ОтборПоПериоду Тогда
		Элементы.ДатаНачала.Доступность = Истина;
		Элементы.ДатаОкончания.Доступность = Истина;
	Иначе
		Элементы.ДатаНачала.Доступность = Ложь;
		Элементы.ДатаОкончания.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияИнтервалаГрафикаПриИзменении(Элемент)
	
	Если ПолосаРегулированияИнтервалаГрафика < 1 Тогда
		
		ГрафикСостоянийОР.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
		
	Иначе
		
		ГрафикСостоянийОР.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
		
		ГрафикСостоянийОР.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени["День"];
		
		ГрафикСостоянийОР.КратностьПериодическогоВарианта = ПолосаРегулированияИнтервалаГрафика;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаИерархииИсторияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;	
	ФормаВыбораСтруктуры = ПолучитьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора" ,,Элемент);
	ОтборСписка = ФормаВыбораСтруктуры.Список.Отбор;
	
	ЭлементОтбора = ОтборСписка.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИзменяетсяДокументами");
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование = Истина;
	
	парам = ФормаВыбораСтруктуры.ОткрытьМодально();
	
	Если НЕ парам = Неопределено Тогда
		ВыборВидаИерархииИстория = парам;		
		ПолучитьИсториюПеремещения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресКартинкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаблокироватьДанныеФормыДляРедактирования();
	ДобавитьИзображениеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКартинкиПриИзменении(Элемент)

	Если Не Объект.ФайлКартинки.Пустая() Тогда
		АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор)
	Иначе
		АдресКартинки = "";
	Конецесли;

КонецПроцедуры // ФайлКартинкиПриИзменении()

&НаКлиенте
Процедура ВыборОсновногоЗависимогоПриИзменении(Элемент)
	
	Если Не ВыборОсновногоЗависимого = "Основное" Тогда
		// сначала необходимо сохранить текущие настройки в ТЗ
		ТЧДляРаботы = ОсновноеОборудование;
		ВыбраноОсновное = Ложь;
		
	Иначе
		ТЧДляРаботы = ЗависимоеОборудование;
		ВыбраноОсновное = Истина;
	КонецЕсли; 
	
	ТЧДляРаботы.Очистить();
	
	Для каждого Строка Из ВидыРемонтаОсновногоСвязанного Цикл
		НС = ТЧДляРаботы.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Строка);
	КонецЦикла; 
	
	УстановитьВидимостьЭлементовФормыОсновноеЗависимое();
	ЗаполнитьОсновныеИЗависимыеРемонтыНаФорме(ВыбраноОсновное);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНормативныеРемонты
&НаКлиенте
Процедура НормативныеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьНормРемонтов = Истина;
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если НоваяСтрока Тогда
			// переопределим предшествующие ремонты
			СтрокиПредшРемонтов = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта));
			Если СтрокиПредшРемонтов.Количество() Тогда
				Для Каждого Строка Из СтрокиПредшРемонтов Цикл
					НС = ПредшествующиеРемонты.Добавить();
					ЗаполнитьЗначенияСвойств(НС, Строка);
					НС.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
				КонецЦикла;
			Иначе 
				НС = ПредшествующиеРемонты.Добавить();
				НС.ВидРемонта = ТекДанные.ВидРемонта;
				НС.ПредшествующийВидРемонта = ТекДанные.ВидРемонта;
				НС.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
			КонецЕсли;
			
			// переопределим замещаемые ремонты
			СтрокиЗамещРемонтов = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта));
			Для Каждого Строка Из СтрокиЗамещРемонтов Цикл
				НС = ЗамещаемыеРемонты.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Строка);
				НС.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
			КонецЦикла;
			Если СтрокиЗамещРемонтов.Количество() Тогда
				МодифицированностьЗамещаемыхРемонтов = Истина;
			КонецЕсли;
			
			МодифицированностьПредшествующихРемонтов = Истина;
			
			Если ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ТекДанные.ВидРемонта)).Количество() = 0 Тогда
				НС = ЗапланированныеРемонты.Добавить();
				НС.ВидРемонтныхРабот = ТекДанные.ВидРемонта;
				НС.Цвет = Новый Цвет(255, 255, 255);
				НС.ЦветТекста = Новый Цвет(0, 0, 0);
				НС.Выбран = Истина;
			КонецЕсли;
			
		Иначе
			
			СтарыйВидРемонта = СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта;
			СтрокиЗапланированныхРемонтов = ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", СтарыйВидРемонта)); 
			Для каждого Строка из СтрокиЗапланированныхРемонтов Цикл
				Строка.ВидРемонтныхРабот = ТекДанные.ВидРемонта;
				Строка.Цвет = Новый Цвет(255, 255, 255);
				Строка.ЦветТекста = Новый Цвет(0, 0, 0);
				Строка.Выбран = Истина;
			КонецЦикла;
		КонецЕсли;
		
		НормативныеРемонтыПриАктивизацииСтроки(Элементы.НормативныеРемонты);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПослеУдаления(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда	
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;
		
	Если Копирование Тогда
		
		ТекДанные.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
		
		МодифицированностьНормРемонтов = Истина;
		
	ИначеЕсли НоваяСтрока Тогда
		
		ТекДанные.ГрафикРемонтныхРабот = ПолучитьЗначениеГрафикаРемРаботНаСервере();
			
		ТекДанные.СпособВыполнения = ПредопределенноеЗначение("Перечисление.СпособыСтроительства.Хозспособ");
			
		ТекДанные.СпособУчетаДатыОтсчета = ПредопределенноеЗначение("Перечисление.торо_СпособыУчетаДатыОтсчетаПриПланированииРемонтныхРабот.ИспользоватьДатуВводаВЭксплуатацию");
		
		МодифицированностьНормРемонтов = Истина;
			
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если НЕ ОтменаРедактирования Тогда
		
		МассивСтрок = НормативныеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта));
		Если МассивСтрок.Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный вид ремонта уже добавлен!'"), СтатусСообщения.Важное);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТекДанные.ВидРемонта) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Выберите вид ремонта!'");
			Сообщение.Сообщить();
		КонецЕсли;
		Если Не Отказ И Не НоваяСтрока И  СтруктураДанныхДоРедактирования[Элемент.Имя] <> Неопределено
			И СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта <> ТекДанные.ВидРемонта Тогда
			СтарыйВР = СтруктураДанныхДоРедактирования[Элемент.Имя].ВидРемонта;
			НайденныеСтроки = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ВидРемонта, ТиповойОР", СтарыйВР, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ВидРемонта = ТекДанные.ВидРемонта
			КонецЦикла;
			НайденныеСтроки = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ПредшествующийВидРемонта, ТиповойОР", СтарыйВР, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ПредшествующийВидРемонта = ТекДанные.ВидРемонта
			КонецЦикла;
			НайденныеСтроки = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта, ТиповойОР", СтарыйВР, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ВидРемонта = ТекДанные.ВидРемонта
			КонецЦикла;
			НайденныеСтроки = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ЗамещаемыйВидРемонта, ТиповойОР", СтарыйВР, ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка")));
			Для Каждого Найденная Из НайденныеСтроки Цикл
				Найденная.ЗамещаемыйВидРемонта = ТекДанные.ВидРемонта
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПриАктивизацииСтроки(Элемент)
	Если НЕ Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено Тогда
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("ВидРемонта, ТиповойОР", Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта, Элементы.НормативныеРемонты.ТекущиеДанные.ТиповойОР);
		Элементы.ПредшествующиеРемонты.ОтборСтрок = ПараметрыОтбора;
		Элементы.ЗамещаемыеРемонты.ОтборСтрок = ПараметрыОтбора;
		
		Если ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ТиповойОР) Тогда
			ЗапретРедактированияНормРемонтов = ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ТиповойОР);
		Иначе
			ЗапретРедактированияНормРемонтов = Ложь;
		КонецЕсли;
		
		
		Элементы.ГрафикРемонтныхРабот.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.СпособВыполнения.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.СпособУчетаДатыОтсчета.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.УчитыватьПростоиОборудования.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.НеИспользоватьВПланировании.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.НеУчитыватьПриПланированииГрафикРаботОборудования.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.НеУчитыватьПриПланированииГрафикРемонтныхРабот.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.НеУчитыватьПродолжительность.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.ИспользоватьКоэффициентыРемонтныхОсобенностей.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.НормативныеРемонтыНеИспользоватьВПланированииДатуВводаВЭксплуатацию.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		Элементы.НормативныеРемонтыРазрешитьСокращатьМежремонтныйПериодПриПланировании.ТолькоПросмотр = ЗапретРедактированияНормРемонтов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ТиповойОР) Тогда
		
		Отказ = Истина;
		Если НЕ ТекДанные.Удален Тогда
		
			СтруктураСвязанныхСтрок = НайтиСвязанныеСтроки(ТекДанные.ВидРемонта,ТекДанные.ТиповойОР);
			ТекстВопроса = "";
			Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокПредшествующиеРемонты.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + НСтр("ru = '
				|	- Предшествующие ремонты'");
			КонецЕсли;
			
			Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗамещаемыеРемонты.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + НСтр("ru = '
				|	- Замещаемые ремонты'");
			КонецЕсли;
			
			Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокТабЗатратПоВидамРемонта.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + НСтр("ru = '
				|	- Нормативные затраты при ТОиР'");
			КонецЕсли;
			
			Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокВидыРемонтаЭтогоОбъекта.Количество() > 0
				Или СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокВидыРемонтаОсновногоСвязанного.Количество() > 0
				Или СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокОсновноеОборудование.Количество() > 0 
				Или СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗависимоеОборудование.Количество() > 0 Тогда
				ТекстВопроса = ТекстВопроса + НСтр("ru = '
				|	- Виды ремонта для настройки основного и зависимого оборудования остановочных ремонтов'");
			КонецЕсли;
						
			Если ТекстВопроса <> "" Тогда
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выбранный вид ремонта используется в таблицах:%1
					|При удалении вида ремонта, связанные строки в этих таблицах будут удалены. Продолжить?'"),ТекстВопроса);
				СтруктураСвязанныхСтрок.Вставить("ТекДанные",ТекДанные);
				ПоказатьВопрос(Новый ОписаниеОповещения("НормативныеРемонтыПередУдалениемЗавершение",ЭтаФорма,СтруктураСвязанныхСтрок),ТекстВопроса,РежимДиалогаВопрос.ДаНет);
			Иначе
				ТекДанные.Удален = НЕ ТекДанные.Удален;
				Для Каждого Элем Из СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗапланированныеРемонты Цикл
					ЗапланированныеРемонты.Удалить(Элем);
				КонецЦикла;
				УстановитьОтборНеИспользуемыхСтрок(Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка,"НормативныеРемонты");
				МодифицированностьНормРемонтов = Истина;
			КонецЕсли;
		Иначе
			ТекДанные.Удален = Ложь;
			МодифицированностьНормРемонтов = Истина;
		КонецЕсли;
			
	Иначе
		
		СтруктураСвязанныхСтрок = НайтиСвязанныеСтроки(ТекДанные.ВидРемонта,ТекДанные.ТиповойОР);
		
		ТекстВопроса = "";
		Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокПредшествующиеРемонты.Количество() > 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|	- Предшествующие ремонты'");
		КонецЕсли;
		
		Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗамещаемыеРемонты.Количество() > 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|	- Замещаемые ремонты'");
		КонецЕсли;
		
		Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокТабЗатратПоВидамРемонта.Количество() > 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|	- Нормативные затраты при ТОиР'");
		КонецЕсли;
		
		Если СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокВидыРемонтаЭтогоОбъекта.Количество() > 0
			Или СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокВидыРемонтаОсновногоСвязанного.Количество() > 0
			Или СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокОсновноеОборудование.Количество() > 0 
			Или СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗависимоеОборудование.Количество() > 0 Тогда
			ТекстВопроса = ТекстВопроса + НСтр("ru = '
			|	- Виды ремонта для настройки основного и зависимого оборудования остановочных ремонтов'");
		КонецЕсли;
		
		Если ТекстВопроса <> "" Тогда
			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выбранный вид ремонта используется в таблицах:%1
				|При удалении вида ремонта, связанные строки в этих таблицах будут удалены. Продолжить?'"),ТекстВопроса);
			Отказ = Истина;
			СтруктураСвязанныхСтрок.Вставить("ТекДанные",ТекДанные);
			ПоказатьВопрос(Новый ОписаниеОповещения("НормативныеРемонтыПередУдалениемЗавершение",ЭтаФорма,СтруктураСвязанныхСтрок),ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		Иначе
			Для Каждого Элем Из СтруктураСвязанныхСтрок.МассивУдаляемыхСтрокЗапланированныеРемонты Цикл
				ЗапланированныеРемонты.Удалить(Элем);
			КонецЦикла;
			МодифицированностьНормРемонтов = Истина;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГрафикРемонтныхРаботПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособВыполненияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособУчетаДатыОтсчетаПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеИспользоватьВПланированииПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриПланированииГрафикРаботОборудованияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПриПланированииГрафикРемонтныхРаботПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеУчитыватьПродолжительностьПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПростоиОборудованияПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьКоэффициентыРемонтныхОсобенностейПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыНеИспользоватьВПланированииДатуВводаВЭксплуатациюПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормативныеРемонтыРазрешитьСокращатьМежремонтныйПериодПриПланированииПриИзменении(Элемент)
	МодифицированностьНормРемонтов = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокПараметровНаработки

&НаКлиенте
Процедура СписокПараметровНаработкиПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ДанныеНаработки = ТабВыработкиОбъектаРемонта.НайтиСтроки(Новый Структура("Показатель",ТекДанные.Показатель));
		Если ДанныеНаработки.Количество() > 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Нельзя удалить показатель, если по нему уже введена наработка.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		НайденныеСтроки = СписокПараметровНаработки.НайтиСтроки(Новый Структура("ОбъектРемонта, Показатель", ТекДанные.ОбъектРемонта, ТекДанные.Показатель));
		Если НайденныеСтроки.Количество() = 1 Тогда
			НайденныеСтроки = ТабМаксимальныхЗначенийНаработки.НайтиСтроки(Новый Структура("ОбъектРемонта, Показатель", ТекДанные.ОбъектРемонта, ТекДанные.Показатель));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ТабМаксимальныхЗначенийНаработки.Удалить(НайденнаяСтрока);
			КонецЦикла;
			МодифицированностьМаксЗначНаработки = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПослеУдаления(Элемент)
	МодифицированностьПараметровНаработки = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриАктивизацииСтроки(Элемент)
		
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	
	Если ТекДанные <> Неопределено Тогда
		Элементы.ТабВыработкиОбъектаРемонта.ОтборСтрок = Новый ФиксированнаяСтруктура("Показатель", ТекДанные.Показатель);
		
		СтруктураОтбора = Новый Структура("Показатель",ТекДанные.Показатель);
		Если НЕ Элементы.ТабМаксимальныхЗначенийНаработкиПоказыватьУдаленныеМаксЗначенияНаработки.Пометка Тогда
			СтруктураОтбора.Вставить("Удален", Ложь);
		КонецЕсли;
		Элементы.ТабМаксимальныхЗначенийНаработки.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		МассивСтрок = ТабВыработкиОбъектаРемонта.НайтиСтроки(Новый Структура("Показатель",ТекДанные.Показатель ));
		
		НаработкаАбсолютная  = 0;
		НаработкаПослеСброса = 0;
		
		Для каждого Строка Из МассивСтрок Цикл
			
			Наработка = ?(Строка.ВидДвижения = ВидДвиженияНакопления.Приход,1,-1) * Строка.Наработка;
			
			НаработкаПослеСброса = НаработкаПослеСброса + Наработка;
			Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
				НаработкаАбсолютная = НаработкаАбсолютная + Наработка;
			КонецЕсли;
			
		КонецЦикла;
		ТекстПодвалаНаработки = Строка(НаработкаПослеСброса) + " / " + Строка(НаработкаАбсолютная);
	Иначе
		ТекстПодвалаНаработки = "0 / 0";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		
		Элемент.ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
		
		МодифицированностьПараметровНаработки = Истина;
		Модифицированность = Истина;
		
		// Дополнительно, если имеются максимальные значения для параметра из типового -- проставляем ОР в нем.
		Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
			Отбор = Новый Структура();
			Отбор.Вставить("Показатель", Элемент.ТекущиеДанные.Показатель);
			МассивСтрокМаксЗначенийНаработки = ТабМаксимальныхЗначенийНаработки.НайтиСтроки(Отбор);
			Для каждого Элем Из МассивСтрокМаксЗначенийНаработки Цикл
				Элем.ОбъектРемонта = Объект.Ссылка;
				МодифицированностьМаксЗначНаработки = Истина;	
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		
		Если НЕ Объект.ЭтоГруппа Тогда 
			// проверка
			ИмяТЧ = "СписокПараметровНаработки";
			НомерСтроки = СписокПараметровНаработки.Индекс(Элемент.ДанныеСтроки(ТекСтрока)) + 1;
			СообщениеПользователю = Новый СообщениеПользователю;
			
			Если НЕ ЗначениеЗаполнено(ТекДанные.Период) Тогда 
				ТекстОшибки = НСтр("ru = 'Укажите дату введения показателя наработки.'"); 
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
				ТекстОшибки = НСтр("ru = 'Укажите показатель наработки.'"); 
			Иначе
				
				Строки = СписокПараметровНаработки.НайтиСтроки(Новый Структура("Период, Показатель",ТекДанные.Период, ТекДанные.Показатель));			
				
				Если Строки.Количество() > 1 Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Показатель плановой наработки на период <%1> уже задан в другой строке таблицы.'"),ТекДанные.Период); 
				ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.ПродолжительностьПериодаПлановойНаработки) ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ПериодПлановойНаработки) Тогда
					ТекстОшибки = НСтр("ru = 'Укажите период плановой наработки.'");
				ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.ПлановаяНаработка) Тогда
					ТекстОшибки = НСтр("ru = 'Укажите значение плановой наработки.'");
				ИначеЕсли НЕ ЗначениеЗаполнено(ТекДанные.КоэффициентИспользованияОборудования) Тогда
					ТекстОшибки = НСтр("ru = 'Укажите значение коэффициента использования оборудования.'");
				КонецЕсли;
			КонецЕсли;
			
			Если ТекстОшибки <> "" Тогда
				#Если НЕ ВебКлиент Тогда
					Отказ = Истина;
				#КонецЕсли
				СообщениеПользователю.Текст = ТекстОшибки;
				СообщениеПользователю.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабМаксимальныхЗначенийНаработки
&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		МассивСтрок = ТабМаксимальныхЗначенийНаработки.НайтиСтроки(Новый Структура("Показатель", ТекДанные.Показатель));
		Если МассивСтрок.Количество() > 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Для показателя наработки <%1> уже введено его максимальное значение или назначенный ресурс.'"),ТекДанные.Показатель);
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран показатель наработки!'");
		Сообщение.Сообщить();
		Отказ = Истина;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	ТекСтрокаМаксимальногоЗначения = Элементы.ТабМаксимальныхЗначенийНаработки.ТекущиеДанные;
		
	Если Не ТекДанные = Неопределено 
		И Не ТекСтрокаМаксимальногоЗначения = Неопределено Тогда
		ТекСтрокаМаксимальногоЗначения.Показатель = ТекДанные.Показатель;
		ТекСтрокаМаксимальногоЗначения.ОбъектРемонта = Объект.Ссылка;
		Если ТекСтрокаМаксимальногоЗначения.МаксимальноеЗначение < 0 Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Максимальное значение наработки не может быть отрицательным!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		МодифицированностьМаксЗначНаработки = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПослеУдаления(Элемент)
	МодифицированностьМаксЗначНаработки = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	МассивПараметровНаработки = Новый Массив;
	Для Каждого Строка Из СписокПараметровНаработки Цикл
		МассивПараметровНаработки.Добавить(Строка.Показатель);
	КонецЦикла;
	ПараметрыФормы = Новый Структура("СписокПараметровНаработки",МассивПараметровНаработки);
	Форма = ПолучитьФорму("Справочник.ПараметрыВыработкиОС.ФормаВыбора",ПараметрыФормы,Элемент);
	ОткрытьФорму(Форма);

КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПоказательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокЗначенийПараметровНаработки = Новый СписокЗначений;
	Для Каждого Строка Из СписокПараметровНаработки Цикл
		СписокЗначенийПараметровНаработки.Добавить(Строка.Показатель);
	КонецЦикла;
	
	ДанныеВыбора = СписокЗначенийПараметровНаработки;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные.ОбъектРемонта = Объект.Ссылка Тогда
		
		// Взамен удаленной добавим строку типового, если такая есть
		ДанныеПоказателяТипового = ПолучитьДанныеМаксЗначенияНаработкиТипового(ТекДанные.Показатель,Объект.ТиповойОР);
		Если ДанныеПоказателяТипового <> Неопределено Тогда
			Отказ = Истина;
			ЗаполнитьЗначенияСвойств(ТекДанные,ДанныеПоказателяТипового);
		КонецЕсли;
		
	Иначе 
		Отказ = Истина;
		ТекДанные.Удален = НЕ ТекДанные.Удален;
		
		Если ТекДанные.Удален Тогда
			ТекДанные.ОбъектРемонта = Объект.Ссылка;
		Иначе
			ТекДанные.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли;
		
		СписокПараметровНаработкиПриАктивизацииСтроки(Элементы.ТабМаксимальныхЗначенийНаработки);
	КонецЕсли;
	

	МодифицированностьМаксЗначНаработки = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеМаксЗначенияНаработки(Команда)
	
	Элементы.ТабМаксимальныхЗначенийНаработкиПоказыватьУдаленныеМаксЗначенияНаработки.Пометка = НЕ Элементы.ТабМаксимальныхЗначенийНаработкиПоказыватьУдаленныеМаксЗначенияНаработки.Пометка;
	СписокПараметровНаработкиПриАктивизацииСтроки(Элементы.ТабМаксимальныхЗначенийНаработки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеМаксЗначенияНаработкиТипового(Показатель,Типовой)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
	               |	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
	               |	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
	               |	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс
	               |ИЗ
	               |	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	               |ГДЕ
	               |	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ТиповойОР
	               |	И торо_МаксимальныеЗначенияНаработкиОР.Показатель = &Показатель";
						
	Запрос.УстановитьПараметр("ТиповойОР",Типовой);
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат
			Новый Структура("ОбъектРемонта,Показатель, МаксимальноеЗначение,НазначенныйРесурс,Удален",
							 Выборка.ОбъектРемонта,Выборка.Показатель,Выборка.МаксимальноеЗначение,Выборка.НазначенныйРесурс,Ложь);
		
	КонецЕсли;
КонецФункции


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабВыработкиОбъектаРемонта
&НаКлиенте
Процедура ТабВыработкиОбъектаРемонтаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ТабВыработкиОбъектаРемонта.ТекущиеДанные;
	Если Не ТекДанные = Неопределено Тогда
		Если ТипЗнч(ТекДанные.Регистратор) = Тип("ДокументСсылка.торо_УчетНаработкиОборудования") Тогда
			ИмяФормыДляОткрытия = "Документ.торо_УчетНаработкиОборудования.Форма.ФормаДокумента";
		ИначеЕсли ТипЗнч(ТекДанные.Регистратор) = Тип("ДокументСсылка.торо_УстановкаПроизвольногоЗначенияНаработки") Тогда
			ИмяФормыДляОткрытия = "Документ.торо_УстановкаПроизвольногоЗначенияНаработки.Форма.ФормаДокумента"; 
		Иначе
			ИмяФормыДляОткрытия = "Документ.торо_ВводНачальныхДанных.Форма.ФормаДокумента";
		КонецЕсли; 
		ОткрытьФорму(ИмяФормыДляОткрытия, Новый Структура("Ключ", ТекДанные.Регистратор), ЭтаФорма,,,,Новый ОписаниеОповещения("ОбработкаВводаДокументаНаработки",ЭтаФорма));
	КонецЕсли; 
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокИзмеряемыхПоказателей
&НаКлиенте
Процедура СписокИзмеряемыхПоказателейОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовХарактеристикСсылка.торо_ИзмеряемыеПоказателиОбъектовРемонта") Тогда
		
		СписокПоказателейВТаблице = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", ВыбранноеЗначение));
		Если СписокПоказателейВТаблице.Количество() = 0 Тогда
			
			НС = СписокИзмеряемыхПоказателей.Добавить();
			СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ВыбранноеЗначение,Объект.Ссылка,Истина);
			СтруктураЗначенийПолей.Вставить("ОбъектРемонта", Объект.Ссылка);
			СтруктураЗначенийПолей.Вставить("Показатель"   , ВыбранноеЗначение);
			
			Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
				СтруктураЗначенийПолей.Вставить("Доступность", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВыбранноеЗначение, "ТипЗначения").СодержитТип(Тип("Число")));
			Иначе
				СтруктураЗначенийПолей.Вставить("Доступность", Ложь);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НС, СтруктураЗначенийПолей);
			
			МодифицированностьИзмеряемыхПоказателей = Истина;
			Модифицированность = Истина;
		ИначеЕсли СписокПоказателейВТаблице.Количество() = 1 И СписокПоказателейВТаблице[0].Удален Тогда
			Строка = СписокПоказателейВТаблице[0];
			СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(Строка.Показатель,Объект.Ссылка, Истина);
			ЗаполнитьЗначенияСвойств(Строка, СтруктураЗначенийПолей);
			Строка.ОбъектРемонта = Объект.Ссылка;
			Строка.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
			Строка.ИзТиповогоОР = Ложь;
			Строка.Удален = Ложь;
			
			МодифицированностьИзмеряемыхПоказателей = Истина;
			Модифицированность = Истина;
		Иначе
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выбранный показатель %1 уже имеется в списке!'"),ВыбранноеЗначение));
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ТекДанные = Элемент.ТекущиеДанные;
		
		Если НоваяСтрока Тогда
			ТекДанные.ОбъектРемонта = Объект.Ссылка;
		КонецЕсли;
		
		МодифицированностьИзмеряемыхПоказателей = Истина;
		
		Если ТекДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
			ТекДанные.ОбъектРемонта = Объект.Ссылка;

		Иначе
			СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ТекДанные.Показатель,ТекДанные.ОбъектРемонта, Истина);
			
			ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураЗначенийПолей);
			ТекДанные.Доступность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекДанные.Показатель, "ТипЗначения").СодержитТип(Тип("Число"));
				
		КонецЕсли;
		
		СписокИзмеряемыхПоказателейПриАктивизацииСтроки(Элементы.СписокИзмеряемыхПоказателей);
				
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПослеУдаления(Элемент)
	МодифицированностьИзмеряемыхПоказателей = Истина;
	Элементы.СписокИзмеряемыхПоказателей.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПриАктивизацииСтроки(Элемент)
	
	ЗначенияКонтролируемыхПоказателей.Отбор.Элементы.Очистить();
	
	Если Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные <> Неопределено Тогда
		ЭлемОтбора = ЗначенияКонтролируемыхПоказателей.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлемОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлемОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектРемонта");
		ЭлемОтбора.ПравоеЗначение = Объект.Ссылка;
		ЭлемОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлемОтбора = ЗначенияКонтролируемыхПоказателей.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлемОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлемОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатель");
		ЭлемОтбора.ПравоеЗначение = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные.Показатель;
		ЭлемОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный; 
	Иначе
		
		ЭлемОтбора = ЗначенияКонтролируемыхПоказателей.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлемОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлемОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектРемонта");
		ЭлемОтбора.ПравоеЗначение = Объект.Ссылка;
		ЭлемОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлемОтбора = ЗначенияКонтролируемыхПоказателей.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлемОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлемОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатель");
		ЭлемОтбора.ПравоеЗначение = ПредопределенноеЗначение("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка");
		ЭлемОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	Если Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные <> Неопределено Тогда
		ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("Показатель",Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные.Показатель);
		Элементы.ПараметрыОповещенияПоСостояниямОР.ОтборСтрок = ОтборПараметровОповещений;
	Иначе
		ОтборПараметровОповещений = Новый ФиксированнаяСтруктура("Показатель",ПредопределенноеЗначение("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПустаяСсылка"));
		Элементы.ПараметрыОповещенияПоСостояниямОР.ОтборСтрок = ОтборПараметровОповещений;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередНачаломИзменения(Элемент, Отказ)
	
	ТабПоле = Элементы.СписокИзмеряемыхПоказателей;
	Если ТабПоле.ТекущиеДанные <> Неопределено 
		И НЕ ТабПоле.ТекущиеДанные.ЗначенияКонтролируемыхПоказателейИзОР
		И Элементы.СписокИзмеряемыхПоказателей.ТекущийЭлемент.Имя <> "СписокИзмеряемыхПоказателейЗначенияКонтролируемыхПоказателейИзОР" Тогда
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейЗначенияКонтролируемыхПоказателейИзОРПриИзменении(Элемент)
	
	ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
		ТекДанные.ИзТиповогоОР = Не ТекДанные.ЗначенияКонтролируемыхПоказателейИзОР;
	КонецЕсли;
	ТекДанные.ОбъектРемонта = Объект.Ссылка;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		СтруктураКолонок = Новый Структура("Период, ОбъектРемонта, Показатель, ПлановаяНаработка, 
		|ПериодПлановойНаработки, ПродолжительностьПериодаПлановойНаработки, КоэффициентИспользованияОборудования");
		ЗаполнитьЗначенияСвойств(СтруктураКолонок, Элемент.ТекущиеДанные);
		СтруктураДанныхДоРедактирования.Вставить(Элемент.Имя,СтруктураКолонок);
	КонецЕсли;
	
	Если НоваяСтрока Тогда 
		
		Элемент.ТекущиеДанные.КоэффициентИспользованияОборудования = 1;
		Элемент.ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки = 1;
		
	ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.ОбъектРемонта) 
		И Элемент.ТекущиеДанные.ОбъектРемонта <> Объект.Ссылка Тогда
		
		Элемент.ТекущиеДанные.Период = Объект.ДатаВводаВЭксплуатацию;
		Элемент.ТекущиеДанные.КоэффициентИспользованияОборудования = 1;
		Элемент.ТекущиеДанные.ПродолжительностьПериодаПлановойНаработки = 1;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокПараметровНаработкиПоказательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СписокПараметровНаработки.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Период) Тогда
		НайденныеСтроки = СписокПараметровНаработки.НайтиСтроки(Новый Структура("Показатель", ТекущиеДанные.Показатель));
		Если НайденныеСтроки.Количество() = 1 Тогда 
			ТекущиеДанные.Период = Объект.ДатаВводаВЭксплуатацию;
		Иначе 
			ТекущиеДанные.Период = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НЕ (НоваяСтрока И ОтменаРедактирования) Тогда
		ТекДанные = Элемент.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекДанные.Показатель) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Укажите контролируемый показатель.'");
			Сообщение.Поле = "СписокИзмеряемыхПоказателей[" + СписокИзмеряемыхПоказателей.Индекс(ТекДанные) + "].Показатель";
			Сообщение.УстановитьДанные(СписокИзмеряемыхПоказателей);
			Сообщение.Сообщить();
		ИначеЕсли СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", ТекДанные.Показатель)).Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выбранный показатель %1 уже имеется в списке!"),ТекДанные.Показатель));
		КонецЕсли;
		Если ТекДанные.ЗначенияКонтролируемыхПоказателейИзОР Тогда
			ТекстСообщения = "";
			Если ТипЗнч(ТекДанные.КритическийМинимум) = Тип("Число") 
				И ТипЗнч(ТекДанные.ДопустимыйМинимум) = Тип("Число") 
				И ТипЗнч(ТекДанные.ДопустимыйМаксимум) = Тип("Число") 
				И ТипЗнч(ТекДанные.КритическийМаксимум) = Тип("Число") Тогда
				Если ТекДанные.КритическийМинимум > ТекДанные.ДопустимыйМинимум Тогда
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'Критический минимум превышает допустимый минимум! '");
				КонецЕсли;
				Если ТекДанные.ДопустимыйМинимум > ТекДанные.ДопустимыйМаксимум Тогда
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'Допустимый минимум превышает допустимый максимум! '");
				КонецЕсли;
				Если ТекДанные.ДопустимыйМаксимум > ТекДанные.КритическийМаксимум Тогда
					Отказ = Истина;
					ТекстСообщения = ТекстСообщения + НСтр("ru = 'Допустимый максимум превышает критический максимум! '");
				КонецЕсли;
			КонецЕсли;
			Если ТекстСообщения <> "" Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = 'Попробуйте отредактировать границы допустимых значений!'");
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
			
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекДанные.ИзТиповогоОР Тогда
		
		МассивСтрок = ПараметрыОповещенияПоСостояниямОР.НайтиСтроки(Новый Структура("ОбъектРемонта,Показатель",Объект.Ссылка,ТекДанные.Показатель));
		Для Каждого СтрокаКУдалению Из МассивСтрок Цикл
			ПараметрыОповещенияПоСостояниямОР.Удалить(СтрокаКУдалению);
			МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
		КонецЦикла;
		
		// Взамен удаленной добавим строку типового, если такая есть
		ДанныеПоказателяТипового = ПолучитьДанныеПоказателяТипового(ТекДанные.Показатель,Объект.ТиповойОР);
		Если ДанныеПоказателяТипового <> Неопределено Тогда
			Отказ = Истина;
			ЗаполнитьЗначенияСвойств(ТекДанные,ДанныеПоказателяТипового);
			МассивСтруктурПараметровОповещения = ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"), Объект.ТиповойОР);
			Для Каждого ПараметрыОповещения Из МассивСтруктурПараметровОповещения Цикл
				Если ПараметрыОповещения.Показатель = ТекДанные.Показатель И ПараметрыОповещения.ТиповойОР = Объект.ТиповойОР Тогда
					ЗаполнитьЗначенияСвойств(ПараметрыОповещенияПоСостояниямОР.Добавить(),ПараметрыОповещения);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе 
		Отказ = Истина;
		ТекДанные.Удален = НЕ ТекДанные.Удален;
		Если ТекДанные.Удален Тогда
			ТекДанные.ОбъектРемонта = Объект.Ссылка;
			УстановитьОтборНеИспользуемыхСтрок(Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка,"СписокИзмеряемыхПоказателей");
		Иначе
			ТекДанные.ОбъектРемонта = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	МодифицированностьИзмеряемыхПоказателей = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПоказательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из СписокИзмеряемыхПоказателей Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.Показатель);
		КонецЕсли;
		
	КонецЦикла;
	
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, ЗакрыватьПриВыборе", "ОбъектыРемонта", Ложь);
	
	ФормаВыбораПоказателя = ПолучитьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормыСтруктура, Элемент, Объект.Ссылка);
	ФормаВыбораПоказателя.ЗакрыватьПриВыборе = Истина;
	
	ФормаВыбораПоказателя.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура СписокИзмеряемыхПоказателейПоказательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокПоказателейВТаблице = СписокИзмеряемыхПоказателей.НайтиСтроки(Новый Структура("Показатель", ВыбранноеЗначение));
	СтандартнаяОбработка = Ложь;
	Если СписокПоказателейВТаблице.Количество() = 0 Тогда
		
		ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
		ПоказательДоИзменения = ТекДанные.Показатель;
		СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ВыбранноеЗначение,Объект.Ссылка,Истина);
		СтруктураЗначенийПолей.Вставить("ОбъектРемонта", Объект.Ссылка);
		СтруктураЗначенийПолей.Вставить("Показатель"   , ВыбранноеЗначение);
		
		ЗаполнитьЗначенияСвойств(ТекДанные, СтруктураЗначенийПолей);
		
		МодифицированностьИзмеряемыхПоказателей = Истина;
	ИначеЕсли СписокПоказателейВТаблице.Количество() = 1 И СписокПоказателейВТаблице[0].Удален Тогда
		СписокИзмеряемыхПоказателей.Удалить(СписокПоказателейВТаблице[0]);
		Строка = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
		СтруктураЗначенийПолей = ПолучитьЗначенияКонтролируемыхПоказателей(ВыбранноеЗначение,Объект.Ссылка,Истина);
		
		ЗаполнитьЗначенияСвойств(Строка, СтруктураЗначенийПолей);
		Строка.Показатель = ВыбранноеЗначение;
		Строка.ОбъектРемонта = Объект.Ссылка;
		Строка.ТиповойОР = ПредопределенноеЗначение("Справочник.торо_ТиповыеОР.ПустаяСсылка");
		Строка.ИзТиповогоОР = Ложь;
		Строка.Удален = Ложь;
		
		МодифицированностьИзмеряемыхПоказателей = Истина;
	Иначе
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выбранный показатель %1 уже имеется в списке!'"),ВыбранноеЗначение));
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредшествующиеРемонты
&НаКлиенте
Процедура ПредшествующиеРемонтыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан нормативный ремонт!'"));
		Отказ = Истина;
	ИначеЕсли ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ПредшествующиеРемонты.ТекущиеДанные.ВидРемонта = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если не ОтменаРедактирования Тогда
		МодифицированностьПредшествующихРемонтов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПослеУдаления(Элемент)
	МодифицированностьПредшествующихРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.ПредшествующийВидРемонта) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите предшествующий вид ремонта.'"));
			Отказ = Истина;
		КонецЕсли;
		МассивСтрок = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ТиповойОР, ВидРемонта, ПредшествующийВидРемонта", ТекДанные.ТиповойОР, ТекДанные.ВидРемонта, ТекДанные.ПредшествующийВидРемонта));
		Если МассивСтрок.Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный вид ремонта уже добавлен!'"), СтатусСообщения.Важное);
		КонецЕсли;
		
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредшествующиеРемонтыПредшествующийВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗамещаемыеРемонты
&НаКлиенте
Процедура ЗамещаемыеРемонтыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Если Элементы.НормативныеРемонты.ТекущиеДанные = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан нормативный ремонт!'"));
		Отказ = Истина;
	ИначеЕсли ЗначениеЗаполнено(Элементы.НормативныеРемонты.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ЗамещаемыеРемонты.ТекущиеДанные.ВидРемонта = Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если не ОтменаРедактирования Тогда
		МодифицированностьЗамещаемыхРемонтов = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПослеУдаления(Элемент)
	МодифицированностьЗамещаемыхРемонтов = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПередНачаломИзменения(Элемент, Отказ)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ОтменаРедактирования Тогда
		Если Не ЗначениеЗаполнено(ТекДанные.ЗамещаемыйВидРемонта) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите вид замещаемого ремонта.'"));
			Отказ = Истина;
		КонецЕсли;
		МассивСтрок = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта, ТиповойОР, ЗамещаемыйВидРемонта", 
													ТекДанные.ВидРемонта, ТекДанные.ТиповойОР, ТекДанные.ЗамещаемыйВидРемонта));
		Если МассивСтрок.Количество() > 1 Тогда
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Данный вид ремонта уже добавлен!'"), СтатусСообщения.Важное);
		КонецЕсли;
	ИначеЕсли Не НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТиповойОР) Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗамещаемыеРемонтыЗамещаемыйВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Элементы.НормативныеРемонты.ТекущиеДанные.ВидРемонта = Строка.ВидРемонта И НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабЗапчастейОбъектовРемонта
&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		
		МодифицированностьЗапчастейОР = Истина;
		МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
		Модифицированность = Истина;
		Если НоваяСтрока Тогда
			Элемент.ТекущиеДанные.ОбъектРемонта = Параметры.Ключ;
		КонецЕсли;
		ТекДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
		Если СтруктураДанныхДоРедактирования[Элемент.Имя] = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если НЕ НоваяСтрока И ТекДанные <> Неопределено Тогда
			// Заменим номенклатуру в существующих строках нормативных затрат запчастей.
			МассивСтрок = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",
			СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура, СтруктураДанныхДоРедактирования[Элемент.Имя].Характеристика));
			Для Каждого Эл Из МассивСтрок Цикл
				МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
				Эл.Номенклатура = ТекДанные.Номенклатура;
				Эл.Характеристика = ТекДанные.Характеристика;
			КонецЦикла;
			
		КонецЕсли;
		Если ТекДанные <> Неопределено и НоваяСтрока Или ТекДанные.Номенклатура <> СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура Тогда
			СтруктураОтбора = Новый ФиксированнаяСтруктура("Номенклатура, Характеристика", ТекДанные.Номенклатура, ТекДанные.Характеристика);
			Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = СтруктураОтбора;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПослеУдаления(Элемент)
	
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПриАктивизацииСтроки(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если НЕ ТекДанные = Неопределено Тогда
		
		ТекущаяНоменклатура = ТекДанные.Номенклатура;
		ТекущаяХарактеристика = ТекДанные.Характеристика;
		
		СтруктураОтбора = УстановитьОтборДляТЧТабЗатратПоВидамРемонта(ТекущаяНоменклатура, ТекущаяХарактеристика);
		Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = СтруктураОтбора;
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура("Запчасть", ТекущаяНоменклатура);
		Элементы.ТабИсторииЗаменыЗЧ.ОтборСтрок 		= СтруктураОтбора;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	Модифицированность = Истина;
	Если ТекДанные.ИзТипового Тогда
		Отказ = Истина;
		ТекДанные.Удален = НЕ ТекДанные.Удален;
		
		Если ТекДанные.Удален Тогда
			УстановитьОтборНеИспользуемыхСтрок(Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка,"ТабЗапчастейОбъектовРемонта");
		КонецЕсли;
		
		МассивСтрок = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового",
			ТекДанные.Номенклатура, ТекДанные.Характеристика, Истина)); 
		Если МассивСтрок.Количество() > 0 Тогда
			МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
		КонецЕсли;
			
		Для Каждого СтрокаНорм Из МассивСтрок Цикл
			СтрокаНорм.Удален = ТекДанные.Удален;
		КонецЦикла;
		
		текДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
		Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = 
			УстановитьОтборДляТЧТабЗатратПоВидамРемонта(?(текДанные = неопределено, неопределено, текДанные.Номенклатура),
														?(текДанные = неопределено, неопределено, текДанные.Характеристика));
	Иначе	
		УдалитьСвязанныеСтрокиПоЗапчастям(ТекДанные.Номенклатура, ТекДанные.Характеристика);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	Модифицированность = Истина;
	
	Если ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика,Удален,ИзТипового",ВыбранноеЗначение, ПредопределенноеЗначение("Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка"),Ложь,Ложь)).Количество() = 0 Тогда
		
		НС = ТабЗапчастейОбъектовРемонта.Добавить();
		НС.ИзТипового = Ложь;
		НС.Количество = 1;
		НС.Номенклатура = ВыбранноеЗначение;
		НС.ОбъектРемонта = Объект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		Если ТекДанные.Номенклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Укажите номенклатуру.'");
		Иначе
			СтрокиНоменклатуры = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика,Удален,ИзТипового",ТекДанные.Номенклатура, ТекДанные.Характеристика,Ложь,Ложь));
			Если СтрокиНоменклатуры.Количество() > 1 Тогда
				ТекстОшибки = НСтр("ru = 'Номенклатура уже добавлена в другой строке.'");
			ИначеЕсли ТекДанные.Количество = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Укажите количество номенклатуры.'");
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки = "" И СтруктураДанныхДоРедактирования[Элемент.Имя] <> Неопределено Тогда
			
			МассивСтрок = ТабЗатратПоВидамРемонта.НайтиСтроки(?(НоваяСтрока, Новый Структура("Номенклатура, Характеристика",ТекДанные.Номенклатура, ТекДанные.Характеристика), 
												Новый Структура("Номенклатура, Характеристика", СтруктураДанныхДоРедактирования[Элемент.Имя].Номенклатура, 
																								СтруктураДанныхДоРедактирования[Элемент.Имя].Характеристика)));
			
			МаксКол = 0;
			
			Для каждого Элем Из МассивСтрок Цикл
				Если Элем.Количество > МаксКол Тогда
					МаксКол = Элем.Количество;
					ВР = Элем.ВидРемонта;
				КонецЕсли;
			КонецЦикла;
			
			Если МаксКол > ТекДанные.Количество Тогда
				Если ЗначениеЗаполнено(ВР) Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Количество затрат при ТОиР (%1) для вида ремонта ""%2"" больше, чем количество в составе объекта ремонта.'"),МаксКол,ВР);
				Иначе
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Количество затрат при ТОиР (%1) больше, чем количество в составе объекта ремонта.'"),МаксКол);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			#Если НЕ ВебКлиент Тогда
				Отказ = Истина;
			#КонецЕсли
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "ТабЗапчастейОбъектовРемонта";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено И Копирование Тогда
		Отказ = ТекДанные.ИзТипового;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаНоменклатураПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	
	ТекущаяСтрока.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(ТекущаяСтрока.Номенклатура);
	
	Если Не ТекущаяСтрока.ХарактеристикиИспользуются Тогда
		ТекущаяСтрока.Характеристика = Неопределено;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабЗатратПоВидамРемонта
&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПослеУдаления(Элемент)
	
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
		
		Если Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные <> Неопределено Тогда
			ТекущаяНоменклатура = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура;
			ТекущаяХарактеристика = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Характеристика;
			
			Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = УстановитьОтборДляТЧТабЗатратПоВидамРемонта(ТекущаяНоменклатура,ТекущаяХарактеристика);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	ТекДанныеЗапчастей = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	Если ТекДанныеЗапчастей = Неопределено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Добавление нормативных затрат по видам ремонта возможно только для конкретных запчастей!'");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТекДанныеЗапчастей.Удален Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Добавление нормативных затрат по видам ремонта возможно только для используемых запчастей!'");
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ТабЗатратПоВидамРемонта.ТекущиеДанные.ОбъектРемонта = Параметры.Ключ;
		Элементы.ТабЗатратПоВидамРемонта.ТекущиеДанные.Номенклатура = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура;
		Элементы.ТабЗатратПоВидамРемонта.ТекущиеДанные.Характеристика = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Характеристика;
	КонецЕсли;
	
	// Запись данных до редактирования
	Если НЕ НоваяСтрока Тогда
		торо_СобытияФормКлиент.ПриНачалеРедактирования(Элемент,СтруктураДанныхДоРедактирования,Элемент.ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НормативныеРемонты.Количество() = 0 Тогда
		СтруктураВозврата = ЗаполнитьНормативныеРемонтыНаСервере(Объект.Ссылка);
		
		НормативныеРемонты.Очистить();
		Для каждого Элем Из СтруктураВозврата Цикл
			НС = НормативныеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные.ИзТипового Тогда
		Отказ = Истина;
		ТекДанные.Удален = НЕ ТекДанные.Удален;
		
		текДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
		Если текДанные <> Неопределено Тогда
			Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = УстановитьОтборДляТЧТабЗатратПоВидамРемонта(
				Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура, 
				Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Характеристика);
		КонецЕсли;
		МодифицированностьНормативныхЗатратПоЗапчастям = Истина;		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.ИзТипового Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабЗатратПоВидамРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	ТекДанные = Элемент.ТекущиеДанные;
	ТекСтрока = Элемент.ТекущаяСтрока;
	ТекДанныеЗапчастей = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	ТекстОшибки = "";
	Если НЕ ОтменаРедактирования Тогда
		// проверка
		Если ТекДанные.ВидРемонта = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка") Тогда
			ТекстОшибки = НСтр("ru = 'Укажите вид ремонта.'");
		Иначе
			Если ТекДанные.Количество = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Укажите количество номенклатуры при ТОиР.'");
			Иначе
				
				Если ТекДанныеЗапчастей <> Неопределено Тогда
					СтрокиНоменклатуры = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("ВидРемонта,Номенклатура, Характеристика,Удален,ИзТИпового",
						ТекДанные.ВидРемонта, ТекДанныеЗапчастей.Номенклатура, ТекДанныеЗапчастей.Характеристика, Ложь, ТекДанные.ИзТипового));
					Если СтрокиНоменклатуры.Количество() > 1 Тогда
						ТекстОшибки = НСтр("ru = 'Вид ремонта уже добавлена в другой строке.'");
					КонецЕсли;
				
					Если ТекДанные.Количество > ТекДанныеЗапчастей.Количество Тогда
						ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Количество затрат при ТОиР (%1) больше, чем количество в составе объекта ремонта.'"),ТекДанные.Количество);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекстОшибки <> "" Тогда
			#Если НЕ ВебКлиент Тогда
				Отказ = Истина;
			#КонецЕсли
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = ТекстОшибки;
			СообщениеПользователю.Поле = "ТабЗатратПоВидамРемонта";
			СообщениеПользователю.Сообщить();
		КонецЕсли;

	ИначеЕсли НЕ НоваяСтрока Тогда
		// возврат старых значений
		ЗаполнитьЗначенияСвойств(ТекДанные,СтруктураДанныхДоРедактирования[Элемент.Имя]);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаОценокРМ
&НаКлиенте
Процедура ТаблицаОценокРМПередНачаломИзменения(Элемент, Отказ)
	
	ТекСтрока = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	Отказ = (ТипЗнч(ТекСтрока.ГруппаОбъектовРемонтов) = Тип("СправочникСсылка.торо_ТиповыеОР"));
	
	Если Не Отказ Тогда
		
		Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период",ТекСтрока.ВидРемонта,ТекСтрока.Сезон,ТекСтрока.Период));
		Если Строки.Количество() > 0 Тогда
			ТекВРРМ = ТекСтрока.ВидРемонта;
			ТекСезонРМ = ТекСтрока.Сезон;
			ТекПериодРМ = ТекСтрока.Период;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда 
		ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
		Если Не ТекДанные.ГруппаОбъектовРемонтов = Объект.Ссылка Тогда
			
			ТекДанные.ГруппаОбъектовРемонтов = Объект.Ссылка;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования Тогда
		
		Строки = ТаблицаОценокРМ.НайтиСтроки(Новый Структура("ГруппаОбъектовРемонтов, ВидРемонта,Сезон,Период", ТекДанные.ГруппаОбъектовРемонтов, ТекДанные.ВидРемонта,ТекДанные.Сезон,ТекДанные.Период));
		Количество = 0;
		Если Строки.Количество() > 1 Тогда 
			Отказ = Истина;
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Текущая строка оценок риск-менеджмента дублирует уже введенную!'"),СтатусСообщения.Важное);
			Возврат;
		КонецЕсли;
		ТаблицаОценокРММодифицированность = Истина;
		Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
		
		Если НоваяСтрока Тогда
			ЗаполнитьЗначенияСвойств(РСНЗТаблицаОценокРМ.Добавить(),ТекДанные);
		Иначе
			Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период", ТекВРРМ, ТекСезонРМ, ТекПериодРМ));
			Если Строки.Количество() > 0 Тогда
				ЗаполнитьЗначенияСвойств(Строки[0],ТекДанные);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМПередУдалением(Элемент, Отказ)
	ТекДанные = Элементы.ТаблицаОценокРМ.ТекущиеДанные;
	
	Строки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта,Сезон,Период",ТекДанные.ВидРемонта,ТекДанные.Сезон,ТекДанные.Период));
	Для Каждого Строка Из Строки Цикл
		РСНЗТаблицаОценокРМ.Удалить(Строка);
	КонецЦикла; 
	ТаблицаОценокРММодифицированность = Истина;
	Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "ПредшествующиеРемонты", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;

	ПараметрыПолученияДанных.Отбор.Вставить("Ссылка", СписокОтбора);

КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОценокРМВидРемонтаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;

	Если ЗначениеЗаполнено(ВыбранноеЗначение) И СписокОтбора.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабличноеПолеРемонтныеЦиклыОборудования
&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриАктивизацииСтроки(Элемент)
	
	ТекСтрокаРемонтныеЦиклыОборудования = Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные;
	
	Если ТекСтрокаРемонтныеЦиклыОборудования = Неопределено Тогда
		ТабличноеПолеСоставРемонтногоЦикла.Очистить();			
	Иначе
		
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияУдалить.Доступность     = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияИзменить.Доступность    = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияСкопировать.Доступность = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияКонтекстноеМенюУдалить.Доступность     = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияКонтекстноеМенюИзменить.Доступность    = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияКонтекстноеМенюСкопировать.Доступность = (НЕ ТекСтрокаРемонтныеЦиклыОборудования.ТиповойОР);
		
		
		МассивРемонтов = ЗаполнитьПоследовательностьРемонтовНаСервере(ТекСтрокаРемонтныеЦиклыОборудования.ВидЦепочки);
		
		ТабличноеПолеСоставРемонтногоЦикла.Очистить();
		Для каждого Элем Из МассивРемонтов Цикл
			
			НС = ТабличноеПолеСоставРемонтногоЦикла.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если Копирование Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ТиповойОР Тогда	
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		МодифицированностьРемЦиклов = Истина;
		ТабличноеПолеРемонтныеЦиклыОборудованияПриАктивизацииСтроки(Элементы.ТабличноеПолеРемонтныеЦиклыОборудования);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередУдалением(Элемент, Отказ)
	МодифицированностьРемЦиклов = Истина;
	Если Элемент.ТекущиеДанные.ТиповойОР Тогда	
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияВидЦепочкиПриИзменении(Элемент)
	МасСтрок = ТабличноеПолеРемонтныеЦиклыОборудования.НайтиСтроки(Новый Структура("ВидЦепочки, ГруппаОбъектовРемонтов", Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки, Объект.Ссылка));
	Если МасСтрок.Количество() = 1 Тогда
		
		ДобавлятьЦепочку = ПроверитьПересеченияНаСервере(Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки);	
		Если НЕ ДобавлятьЦепочку Тогда
			Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки = ПредопределенноеЗначение("Справочник.торо_ЦепочкиРемонта.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Цепочка ""%1"" уже есть в списке фиксированных ремонтных циклов'"),Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки));
		Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные.ВидЦепочки = ПредопределенноеЗначение("Справочник.торо_ЦепочкиРемонта.ПустаяСсылка");
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ГруппаОбъектовРемонтов = Объект.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеРемонтныеЦиклыОборудованияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекДанные = Элементы.ТабличноеПолеРемонтныеЦиклыОборудования.ТекущиеДанные;
		
		Если НЕ ТекДанные = Неопределено Тогда
			
			Если НЕ ЗначениеЗаполнено(ТекДанные.ВидЦепочки) Тогда
				
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан вид цепочки!'"));
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГарантииОбъектаРемонта
&НаКлиенте
Процедура ГарантииОбъектаРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если Не (НоваяСтрока И ОтменаРедактирования) И ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.УсловияГарантии) Тогда
		РеквизитыГарантии = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущиеДанные.УсловияГарантии, "ПроверятьПериодГарантии, ДатаНачалаГарантии");
		Если РеквизитыГарантии.ПроверятьПериодГарантии 
			И РеквизитыГарантии.ДатаНачалаГарантии < Объект.ДатаВыпуска Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Дата начала гарантии не может быть меньше даты выпуска (%1)!'"), Формат(Объект.ДатаВыпуска,"ДФ=dd.MM.yyyy"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	МодифицированностьГарантий = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГарантииОбъектаРемонтаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не ТекущиеДанные = Неопределено Тогда
		ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
		Если НоваяСтрока И ГарантииОбъектаРемонта.Количество() = 1 Тогда
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГарантииОбъектаРемонтаПередУдалением(Элемент, Отказ)
	ТекущиеДаные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДаные = Неопределено
		И Не ТекущиеДаные.ОбъектРемонта = Объект.Ссылка Тогда
		Отказ = Истина;
	КонецЕсли; 
	Если Не Отказ Тогда
		МодифицированностьГарантий = Истина;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГарантииОбъектаРемонтаПриАктивизацииСтроки(Элемент)
	
	ТекущиеДаные = Элемент.ТекущиеДанные;
	Если Не ТекущиеДаные = Неопределено И Не ТекущиеДаные.ОбъектРемонта = Объект.Ссылка Тогда
		Элементы.ГарантииОбъектаРемонтаУдалить.Доступность = Ложь;
	Иначе
		Элементы.ГарантииОбъектаРемонтаУдалить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПредстоящиеРемонты
&НаКлиенте
Процедура ПредстоящиеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ПредстоящиеРемонты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОткрытьФорму("Документ.торо_ПланГрафикРемонта.Форма.ФормаДокумента", Новый Структура("Ключ, ID", ТекДанные.Регистратор, ТекДанные.ID), ЭтаФорма);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаявкиНаРемонт
&НаКлиенте
Процедура ЗаявкиНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЗаявкиНаРемонт.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.Форма.ФормаДокумента", Новый Структура("Ключ", ТекДанные.Ссылка), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыявленныеДефекты
&НаКлиенте
Процедура ВыявленныеДефектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ВыявленныеДефекты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ОткрытьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаДокумента", Новый Структура("Ключ", ТекДанные.Документ), ЭтаФорма);
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВыполненныеРемонты
&НаКлиенте
Процедура ВыполненныеРемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекДанные = Элементы.ВыполненныеРемонты.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТипЗнч(ТекДанные.Ссылка) = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
			ОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаДокумента", Новый Структура("Ключ", ТекДанные.Ссылка), ЭтаФорма);
		Иначе
			ОткрытьФорму("Документ.торо_ВводНачальныхДанных.Форма.ФормаДокумента", Новый Структура("Ключ", ТекДанные.Ссылка), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыОповещенияПоСостояниямОР
&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			Элемент.ТекущиеДанные.ОбъектРемонта = Объект.Ссылка;
			Элемент.ТекущиеДанные.Показатель = ТекДанные.Показатель;
			Элемент.ТекущиеДанные.ID = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПослеУдаления(Элемент)
	
	МодифицированностьПараметровОповещенияОСостоянииОР = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыОповещенияПоСостояниямОРПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите контролируемый показатель в списке показателей.'"));
		Отказ = Истина;
	ИначеЕсли Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные.ИзТиповогоОР Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗначенияКонтролируемыхПоказателей
&НаКлиенте
Процедура ЗначенияКонтролируемыхПоказателейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРемонтаЭтогоОбъекта

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПриАктивизацииСтроки(Элемент)
	УстановитьОтборВТЧОсновныеЗависимыеРемонты();
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	МодифицированностьОсновныхЗависимых = Истина;
	Модифицированность = МодифицированностьОсновныхЗависимых;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Не (НоваяСтрока И ОтменаРедактирования) Тогда
			Если ВидыРемонтаЭтогоОбъекта.НайтиСтроки(Новый Структура("ВидРемонта", ТекДанные.ВидРемонта)).Количество() > 1 Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Выбранный вид ремонта уже добавлен!'");
				Сообщение.Сообщить();
			КонецЕсли;
			Если Не Отказ Тогда
				ОсновноеЗависимоеПроверитьСтрокиИДобавить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из НормативныеРемонты Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "Визуализация", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекстВопроса = НСтр("ru = 'Связанные данные будут очищены. Продолжить?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ВидыРемонтаЭтогоОбъектаПередУдалениемЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТекДанные = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ОбъектРемонта = ТекДанные.ОбъектРемонта;
		Иначе
			ОбъектРемонта = Неопределено;
		КонецЕсли;	
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ВидыРемонтаЭтогоОбъекта.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ВидыРемонтаЭтогоОбъекта.ДанныеСтроки(ВыделеннаяСтрока);
			СтруктураПоиска = Новый Структура("ОбъектРемонта", ОбъектРемонта);
			
			Если ВыбраноОсновное Тогда
				СтруктураПоиска.Вставить("ВидРемонтаЗависимогоОбъекта", ДанныеСтроки.ВидРемонта);
			Иначе
				СтруктураПоиска.Вставить("ВидРемонтаОсновногоОбъекта", ДанныеСтроки.ВидРемонта);
			КонецЕсли;
			
			НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				ВидыРемонтаОсновногоСвязанного.Удалить(ВидыРемонтаОсновногоСвязанного.Индекс(НайденнаяСтрока));
				
			КонецЦикла;
			
			ВидыРемонтаЭтогоОбъекта.Удалить(ВидыРемонтаЭтогоОбъекта.Индекс(ВидыРемонтаЭтогоОбъекта.НайтиПоИдентификатору(ВыделеннаяСтрока)));
		КонецЦикла;
		
		МодифицированностьОсновныхЗависимых = Истина;
		Модифицированность = Истина;
	КонецЕсли;
		
КонецПроцедуры


&НаКлиенте
Процедура ВидыРемонтаЭтогоОбъектаПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ВидыРемонтаЭтогоОбъектаПриИзмененииНаСервере(ТекДанные.ВидРемонта, ВыбраноОсновное);
		УстановитьОтборВТЧОсновныеЗависимыеРемонты();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидыРемонтаЭтогоОбъектаПриИзмененииНаСервере(ВидРемонтаНовый, ВыбраноОсновное)
	
	ОтборСтрок = Элементы.ВидыРемонтаОсновногоСвязанного.ОтборСтрок;
	
	ВидРемонтаСтарый = Неопределено;
	Если ВыбраноОсновное Тогда
		ОтборСтрок.Свойство("ВидРемонтаЗависимогоОбъекта", ВидРемонтаСтарый);
	Иначе
		ОтборСтрок.Свойство("ВидРемонтаОсновногоОбъекта", ВидРемонтаСтарый);
	КонецЕсли;
	
	Если ВидРемонтаСтарый <> Неопределено Тогда
		
		Если ВидРемонтаНовый <> ВидРемонтаСтарый Тогда
			Если ВыбраноОсновное Тогда
				НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(Новый Структура("ВидРемонтаЗависимогоОбъекта", ВидРемонтаСтарый));
			Иначе	
				НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(Новый Структура("ВидРемонтаОсновногоОбъекта", ВидРемонтаСтарый))
			КонецЕсли;
			
			Для Каждого Строка Из НайденныеСтроки Цикл
				Если ВыбраноОсновное Тогда
					Строка.ВидРемонтаЗависимогоОбъекта = ВидРемонтаНовый;
				Иначе
					Строка.ВидРемонтаОсновногоОбъекта = ВидРемонтаНовый;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектовРемонта

&НаКлиенте
Процедура СписокОбъектовРемонтаПриАктивизацииСтроки(Элемент)
	УстановитьОтборВТЧОсновныеЗависимыеРемонты();
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьКоличествоОсновногоЗависимогоОборудования();
	МодифицированностьОсновныхЗависимых = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если Не (НоваяСтрока И ОтменаРедактирования) Тогда
			Если СписокОбъектовРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", ТекДанные.ОбъектРемонта)).Количество() > 1 Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Выбранный объект ремонта уже добавлен!'");
				Сообщение.Сообщить();
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекДанные.ОбъектРемонта) Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Выберите объект ремонта!'");
				Сообщение.Сообщить();
			КонецЕсли;
			Если Не Отказ Тогда
				ОсновноеЗависимоеПроверитьСтрокиИДобавить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ТекстВопроса = НСтр("ru = 'Связанные данные будут очищены. Продолжить?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("СписокОбъектовРемонтаПередУдалениемЗавершение", ЭтаФорма), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаПередУдалениемЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТекДанные = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ВидРемонта = ТекДанные.ВидРемонта;
			
			Для Каждого ВыделеннаяСтрока Из Элементы.СписокОбъектовРемонта.ВыделенныеСтроки Цикл
				ДанныеСтроки = Элементы.СписокОбъектовРемонта.ДанныеСтроки(ВыделеннаяСтрока);
				СтруктураПоиска = Новый Структура("ОбъектРемонта", ДанныеСтроки.ОбъектРемонта);
				
				Если ВыбраноОсновное Тогда
					СтруктураПоиска.Вставить("ВидРемонтаЗависимогоОбъекта", ВидРемонта);
				Иначе
					СтруктураПоиска.Вставить("ВидРемонтаОсновногоОбъекта", ВидРемонта);
				КонецЕсли;
				
				НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					ВидыРемонтаОсновногоСвязанного.Удалить(ВидыРемонтаОсновногоСвязанного.Индекс(НайденнаяСтрока));
					
				КонецЦикла;
				
				СписокОбъектовРемонта.Удалить(СписокОбъектовРемонта.Индекс(СписокОбъектовРемонта.НайтиПоИдентификатору(ВыделеннаяСтрока)));
			КонецЦикла;
			УстановитьКоличествоОсновногоЗависимогоОборудования();
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовРемонтаПриИзменении(Элемент)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		УстановитьОтборВТЧОсновныеЗависимыеРемонты();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРемонтаОсновногоСвязанного

&НаКлиенте
Процедура ОсновноеЗависимоеПроверитьСтрокиИДобавить()
	
	ТекСтрокаОР = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
	ТекСтрокаВР = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
	Если ТекСтрокаВР <> Неопределено И ТекСтрокаОР <> Неопределено Тогда
		
		ВРПолеДляПоиска = ?(ВыбраноОсновное, "ВидРемонтаЗависимогоОбъекта", "ВидРемонтаОсновногоОбъекта");
		ПараметрыПоиска = Новый Структура("ОбъектРемонта, " + ВРПолеДляПоиска, ТекСтрокаОР.ОбъектРемонта, ТекСтрокаВР.ВидРемонта);
		Если ВидыРемонтаОсновногоСвязанного.НайтиСтроки(ПараметрыПоиска).Количество() = 0 
			И Не ПроверитьЗацикливаниеОстановочных(ВыбраноОсновное, ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка"), ТекСтрокаВР.ВидРемонта, ТекСтрокаОР.ОбъектРемонта) Тогда
			
			НС = ВидыРемонтаОсновногоСвязанного.Добавить();
			ЗаполнитьЗначенияСвойств(НС, ПараметрыПоиска);
			
		КонецЕсли;
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекущийВидРемонта    = Неопределено;
	ТекущийОбъектРемонта = Неопределено;
	
	ТекущиеДанные = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущийВидРемонта = ТекущиеДанные.ВидРемонта;
	КонецЕсли; 
	
	ТекущиеДанные = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		ТекущийОбъектРемонта = ТекущиеДанные.ОбъектРемонта;
	КонецЕсли; 
	
	Если ТекущийВидРемонта = Неопределено
		Или ТекущийОбъектРемонта = Неопределено Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущиеДанные = Элементы.ВидыРемонтаОсновногоСвязанного.ТекущиеДанные;
	
	Если Не ТекущиеДанные = Неопределено Тогда
		
		Если НоваяСтрока и Не ОтменаРедактирования Тогда
			
			ТекущиеДанные.ОбъектРемонта = ТекущийОбъектРемонта;
			
			Если ВыбраноОсновное Тогда
				ТекущиеДанные.ВидРемонтаЗависимогоОбъекта = ТекущийВидРемонта;
			Иначе
				ТекущиеДанные.ВидРемонтаОсновногоОбъекта  = ТекущийВидРемонта;
			КонецЕсли; 
			
		КонецЕсли;
		
		Если Не (НоваяСтрока И ОтменаРедактирования) Тогда
			
			СтруктураПоиска = Новый Структура("ОбъектРемонта, ВидРемонтаЗависимогоОбъекта, ВидРемонтаОсновногоОбъекта", 
												ТекущиеДанные.ОбъектРемонта,
												ТекущиеДанные.ВидРемонтаЗависимогоОбъекта,
												ТекущиеДанные.ВидРемонтаОсновногоОбъекта);
			
			Если ВидыРемонтаОсновногоСвязанного.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Выбранный вид ремонта уже добавлен!'");
				Сообщение.Сообщить();
			КонецЕсли;
			
			Если ПроверитьЗацикливаниеОстановочных(ВыбраноОсновное, ?(ВыбраноОсновное, ТекущиеДанные.ВидРемонтаОсновногоОбъекта, ТекущиеДанные.ВидРемонтаЗависимогоОбъекта), ?(НЕ ВыбраноОсновное, ТекущиеДанные.ВидРемонтаОсновногоОбъекта, ТекущиеДанные.ВидРемонтаЗависимогоОбъекта), ТекущиеДанные.ОбъектРемонта) Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Выбор данного вида ремонта приведет к зацикливанию и неверной работе системы!'");
				Сообщение.Сообщить();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	МодифицированностьОсновныхЗависимых = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоВидРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	 ВидыРемонтаОсновногоСвязанногоНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоВидРемонтаЗависимыйНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВидыРемонтаОсновногоСвязанногоНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТабМаксимальныхЗначенийНаработки

&НаКлиенте
Процедура ТабМаксимальныхЗначенийНаработкиНазначенныйРесурсПриИзменении(Элемент)
	
	ОбновитьЗначенияИзноса(Элементы.ТабМаксимальныхЗначенийНаработки.ТекущиеДанные);
	
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеРеквизиты

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриИзменении(Элемент)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриАктивизацииСтроки(Элемент)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриАктивизацииСтроки(ЭтаФорма, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПередНачаломДобавления(ЭтаФорма, Объект.НаборСвойств, Элемент, Отказ, Копирование, Родитель, Группа);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПередУдалением(Элемент, Отказ)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПередУдалением(ЭтаФорма, Объект.НаборСвойств, Элемент, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовПриОкончанииРедактирования(ЭтаФорма, Элемент, НоваяСтрока, ОтменаРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Свойства_ЗначенияДополнительныхРеквизитовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	УправлениеСвойствамиКлиент.Свойства_ЗначенияДополнительныхРеквизитовВыбор(ЭтаФорма, Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеАкты(Команда)
	Кнопка = Элементы.ВыполненныеРемонтыОтображатьТолькоПроведенныеАкты;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеППР(Команда)
	Кнопка = Элементы.ПредстоящиеРемонтыОтображатьТолькоПроведенныеППР;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеЗаявки(Команда)
	Кнопка = Элементы.ЗаявкиНаРемонтОтображатьТолькоПроведенныеЗаявки;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьТолькоПроведенныеДефекты(Команда)
	Кнопка = Элементы.ВыявленныеДефектыОтображатьТолькоПроведенныеДефекты;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	УстановитьПараметрыЗапросовНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	
	Если МожноПечататьВизуализацию Тогда
		ТабДок = ПечатьНаСервере();
		ТабДок.Показать(НСтр("ru = 'Структура ремонтного цикла'"));
	Иначе
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно распечатать структуру ремонтного цикла, так как она еще не построена!'"), СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перерасчитать(Команда)
	ТаблицаРемонтовВизуализация.Очистить();
	Декорация1 = "";
	
	СписокВидовРемонтов = ЗаполнитьВидыРемонтаНаСервере();
	Если СписокВидовРемонтов.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно рассчитать структуру ремонтного цикла, так как не заполнены нормативные ремонты'"), СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	СписокВидовРемонтов.ЗаполнитьПометки(Истина);
	
	СписокНеНужныхВР = Новый СписокЗначений;
	
	СписокВидовРемонтов.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ПерерасчитатьЗавершение",ЭтотОбъект, Новый Структура("СписокНеНужныхВР",СписокНеНужныхВР)), НСтр("ru = 'Выберите виды ремонтных работ'"));
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда)
	
	СписокПараметровКопирования = Новый СписокЗначений;
	
	ДанныеДляКопирования = ПолучитьДанныеДляКопирования(Объект.Ссылка);
	
    ФОУчетЗапчастей                 = ДанныеДляКопирования.ФОУчетЗапчастей;
    ФОУчетКонтролируемыхПоказателей = ДанныеДляКопирования.ФОУчетКонтролируемыхПоказателей;
    ФОУчетНаработкиОборудования     = ДанныеДляКопирования.ФОУчетНаработкиОборудования;
    
    РодительИерархииДляКопирования  = ДанныеДляКопирования.РодительИерархии;
    СтруктураИерархииДляКопирования = ДанныеДляКопирования.ИерархияДляВводаНовыхОР;
	
	Если ФОУчетКонтролируемыхПоказателей Тогда
		СписокПараметровКопирования.Добавить("Контролируемые показатели");
	КонецЕсли;
	
	Если ФОУчетНаработкиОборудования Тогда
		СписокПараметровКопирования.Добавить("Параметры наработки (только действующие значения)");
		СписокПараметровКопирования.Добавить("Параметры наработки (история изменения)");
	КонецЕсли;
	
	Если ФОУчетЗапчастей Тогда
		СписокПараметровКопирования.Добавить("Запчасти");
	КонецЕсли;
	
	Если СписокПараметровКопирования.Количество() Тогда
		
		СписокПараметровКопирования.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("СоздатьОбъектРемонтаКопированиемЗавершение", ЭтаФорма, Новый Структура("РодительИерархии, СписокПараметровКопирования, СтруктураИерархии", РодительИерархииДляКопирования, СписокПараметровКопирования, СтруктураИерархииДляКопирования)), НСтр("ru = 'Переносить при копировании'"));
        Возврат;
		
	КонецЕсли;
    
    СоздатьОбъектРемонтаКопированиемФрагмент(РодительИерархииДляКопирования, СписокПараметровКопирования, СтруктураИерархииДляКопирования);
				
КонецПроцедуры

&НаКлиенте
Процедура Настройки(Команда)
	
	МассивРемонтов = Новый Массив;
	
	Для каждого Стр из ЗапланированныеРемонты Цикл
		
		МассивРемонтов.Добавить(Новый Структура("ВидРемонтныхРабот, Выбран, Цвет, ЦветТекста, Шрифт", Стр.ВидРемонтныхРабот, Стр.Выбран, Стр.Цвет, Стр.ЦветТекста, Стр.Шрифт));
		
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыНастроек", ЭтаФорма);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаВРВизуализация", Новый Структура("МассивРемонтов, Нормировать",МассивРемонтов, Нормировать),ЭтаФорма,ЭтаФорма,,,ОписаниеОповещения);
	
	
КонецПроцедуры

&НаКлиенте
Процедура Построить(Команда)
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		НарисоватьМнемосхему(ОбщаяПродолжительность);	
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура ПодборКонтролируемыхПоказателей(Команда)
	СтандартнаяОбработка = Ложь;
	СписокОтбора = Новый СписокЗначений();
	
	Для каждого Строка Из СписокИзмеряемыхПоказателей Цикл
		
		Если НЕ Строка.Удален Тогда
			СписокОтбора.Добавить(Строка.Показатель);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора, ЗакрыватьПриВыборе", "ОбъектыРемонта", СписокОтбора, Ложь);
	
	ФормаВыбораПоказателя = ПолучитьФорму("ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ФормаВыбора", ПараметрыФормыСтруктура, Элементы.СписокИзмеряемыхПоказателей, Объект.Ссылка);
	
	ФормаВыбораПоказателя.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ВводЗначенияКонтрПоказателей(Команда)
	
	ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекДанные = Неопределено ИЛИ ТекДанные.Удален Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Или МодифицированностьИзмеряемыхПоказателей Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВводЗначенияКонтрПоказателейЗавершение3", ЭтотОбъект), НСтр("ru = 'Записать объект ремонта для ввода информации по измеряемым показателям?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВводЗначенияКонтрПоказателейФрагмент2();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияКонтролируемыхПоказателейПоказатьЛегенду(Команда)
	
	ЭлементФормыКнопка = Элементы.ЗначенияКонтролируемыхПоказателейПоказатьЛегенду;
	ВидимостьЛегенды = Не ЭлементФормыКнопка.Пометка;
	ЭлементФормыКнопка.Пометка = ВидимостьЛегенды;
	Элементы.ЗначенияКонтролируемыхПоказателейЛегенда.Видимость = ВидимостьЛегенды;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИсторию(Команда)
	
	Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка = НЕ Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка;
	ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоВозрастаниюРемЦиклы(Команда)
	СортироватьПоВозрастаниюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоУбываниюРемЦиклы(Команда)
	СортироватьПоУбываниюНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РемонтныеЦиклыОбъекта(Команда)
	
	Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыОбъекта.Пометка = Не Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыОбъекта.Пометка;
	НаложитьОтборНаРемЦиклы(Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыОбъекта.Пометка, Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыГруппы.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтныеЦиклыГруппы(Команда)
	
	Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыГруппы.Пометка = Не Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыГруппы.Пометка;
	НаложитьОтборНаРемЦиклы(Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыОбъекта.Пометка, Элементы.ТабличноеПолеРемонтныеЦиклыОборудованияРемонтныеЦиклыГруппы.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНаработки(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВводНаработкиВопросЗаписать",ЭтотОбъект),НСтр("ru = 'Записать объект ремонта для ввода информации по измеряемым показателям?'"),
		РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;	
	
	ВводНаработкиФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСостояния(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВводСостоянияЗавершение", ЭтотОбъект), НСтр("ru = 'Записать объект ремонта для ввода информации о состоянии?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	ВводСостоянияФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	Строить = Истина;
	Если ОтборПоПериоду Тогда
		Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
			Строить = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена дата начала для отбора!'");
			Сообщение.Сообщить();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
			Строить = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не заполнена дата окончания для отбора!'");
			Сообщение.Сообщить();
		КонецЕсли;
		Если Строить И ДатаНачала > ДатаОкончания Тогда
			Строить = Ложь;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Дата начала для отбора больше даты окончания!'");
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
		
	Если Строить Тогда	
		ПостроитьГрафикСостоянийОР();	
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЛегенду(Команда)
	
	Элементы.ПоказыватьЛегенду.Пометка = Не Элементы.ПоказыватьЛегенду.Пометка;
	
	Элементы.ЛегендаГрафика.Видимость = Элементы.ПоказыватьЛегенду.Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСостоянияНаПериод(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ВводСостоянияНаПериодЗавершение", ЭтотОбъект), НСтр("ru = 'Записать объект ремонта для ввода информации о состоянии?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВводСостоянияНаПериодФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОткрытьДокументПринятиеКУчету(Команда)
	
	Если ЗначениеЗаполнено(РегистраторПринятияКУчету) Тогда
		
		ОткрытьФорму("Документ.торо_ПринятиеОРКУчету.Форма.ФормаДокумента", Новый Структура("Ключ", РегистраторПринятияКУчету), ЭтаФорма);
		
	Иначе
		
		Ссылка = Объект.Ссылка;
		ОткрытьФорму("Документ.торо_ПринятиеОРКУчету.Форма.ФормаДокумента", Новый Структура("ОбъектРемонта, ДатаВводаВЭксплуатацию", Ссылка, ДатаВводаВЭксплуатацию), ЭтаФорма);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиОткрытьДокументСнятияСУчета(Команда)
	
	Если ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда
		ОткрытьФорму("Документ.торо_ВыбытиеОбъектаРемонта.Форма.ФормаДокумента", Новый Структура("Ключ,ОбъектРемонта", РегистраторСнятияСУчета, Объект.Ссылка), ЭтаФорма);
	Иначе
		ОткрытьФорму("Документ.торо_ВыбытиеОбъектаРемонта.Форма.ФормаДокумента", Новый Структура("ОбъектРемонта", Объект.Ссылка), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетСостояниеОборудования(Команда)
	
	Если Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные <> Неопределено Тогда
		
		ПараметрыОтчет = Новый Структура();
		ПараметрыОтчет.Вставить("ОбъектРемонта",Объект.Ссылка);	
		ПараметрыОтчет.Вставить("ТекПоказатель",Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные.Показатель);
		ПараметрыОтчет.Вставить("СформироватьПриОткрытии",Истина);
		ПараметрыОтчет.Вставить("ВыводитьСуммуВыделенныхЯчеек",Ложь);
		
		ОткрытьФорму("Отчет.торо_СостояниеОборудования.Форма",ПараметрыОтчет);
	Иначе
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран контролируемый показатель. Для вывода отчета добавьте показатель на форму.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЖурналНаработки(Команда)
	МассивСтрокНаработки = ПолучитьМассивДокументовНаработки(Объект.Ссылка);
	ТабВыработкиОбъектаРемонта.Очистить();
	Для каждого Элемент Из МассивСтрокНаработки Цикл
		НС = ТабВыработкиОбъектаРемонта.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элемент);
	КонецЦикла;
	
	СписокПараметровНаработкиПриАктивизацииСтроки(Истина);
	ОбновитьЗначенияИзноса();
			
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображение(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьИзображение(Команда)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект.ФайлКартинки) Тогда
		
		ПрисоединенныеФайлыКлиент.ОткрытьФормуПрисоединенногоФайла(Объект.ФайлКартинки);
		
	Иначе
		
		ТекстСообщения = НСтр("ru='Отсутствует изображение для редактирования'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "АдресКартинки");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИзображение(Команда)
	
	Объект.ФайлКартинки = ПредопределенноеЗначение("Справочник.НоменклатураПрисоединенныеФайлы.ПустаяСсылка");
	АдресКартинки = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьИзображение(Команда)
	
	ПросмотретьПрисоединенныйФайл("ФайлКартинки", "АдресКартинки",
		НСтр("ru='Отсутствует изображение для просмотра'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайлов(Команда)
	
	ПараметрыВыбораКартинки = Новый Структура("ВладелецФайла, ЗакрыватьПриВыборе, РежимВыбора", 
									   Объект.Ссылка, Истина, Истина);
	ЗначениеВыбора = Неопределено;

	ОткрытьФорму("ОбщаяФорма.ПрисоединенныеФайлы", ПараметрыВыбораКартинки,,,,, Новый ОписаниеОповещения("ВыбратьКартинкуИзПрисоединенныхФайловЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИзображение(Команда)
	ОтображатьИзображение = Не ОтображатьИзображение;
	Элементы.ФормаПоказатьСкрытьИзображение.Пометка = ОтображатьИзображение;
	Элементы.ГруппаДанныеЭксплПравая.Видимость      = ОтображатьИзображение;
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗапчастей(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимПодбораБезСуммовыхПараметров",        Истина);
	ПараметрыФормы.Вставить("ИспользоватьДатыОтгрузки",                 Истина);
	ПараметрыФормы.Вставить("СкрыватьКолонкуВидЦены",                   Истина);
	ПараметрыФормы.Вставить("СкрыватьКомандуЦеныНоменклатуры",          Истина);
	ПараметрыФормы.Вставить("Заголовок",                                НСтр("ru = 'Подбор запчастей'"));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗапрашиватьКоличествоИЦену",НСтр("ru = 'Запрашивать количество'"));
	ПараметрыФормы.Вставить("Дата",                                     ТекущаяДата());
	ПараметрыФормы.Вставить("Документ",                                 Объект.Ссылка);
	ПараметрыФормы.Вставить("КлючНазначенияИспользования",				"ПростойПодборНоменклатуры");
	ПараметрыФормы.Вставить("ОтборПоТипуНоменклатуры",					Новый Массив(Элементы.ТабЗапчастейОбъектовРемонтаНоменклатура.ПараметрыВыбора[0].Значение));
	
	ОткрытьФорму("Обработка.торо_ПодборНоменклатуры.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеПоказатели(Команда)
	Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка = НЕ Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка;
	УстановитьОтборНеИспользуемыхСтрок(Элементы.СписокИзмеряемыхПоказателейПоказыватьУдаленныеПоказатели.Пометка,"СписокИзмеряемыхПоказателей");
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеНормативы(Команда)
	Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка = НЕ Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка;
	УстановитьОтборНеИспользуемыхСтрок(Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка,"НормативныеРемонты");
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьУдаленныеЗапчасти(Команда)
	Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка = НЕ Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка;
	УстановитьОтборНеИспользуемыхСтрок(Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка,"ТабЗапчастейОбъектовРемонта");
	
	текДанные = Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		Элементы.ТабЗатратПоВидамРемонта.ОтборСтрок = УстановитьОтборДляТЧТабЗатратПоВидамРемонта(
			Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура,
			Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Характеристика);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетНаработкаОборудования(Команда)
	
	ПараметрыОтчет = Новый Структура();
	ПараметрыОтчет.Вставить("ОбъектРемонта", Объект.Ссылка);	
	ПараметрыОтчет.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	ПараметрыОтчет.Вставить("ВместеСПодчиненными", Ложь);
	ПараметрыОтчет.Вставить("ДатаНач", НачалоГода(ТекущаяДата()));
	ПараметрыОтчет.Вставить("ДатаКон", ТекущаяДата());
	ПараметрыОтчет.Вставить("ВыводитьСуммуВыделенныхЯчеек",Ложь);
	ПараметрыОтчет.Вставить("СформироватьПриОткрытии",Истина);
	
	ОткрытьФорму("Отчет.торо_НаработкаОборудованияСПоследнихРемонтов.Форма",ПараметрыОтчет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновныеИЗависимыеПоИерархии(Команда)
	
	ОткрытьФорму("Справочник.торо_СтруктурыОР.ФормаВыбора",,,,,,Новый ОписаниеОповещения("ЗаполнитьОсновныеИЗависимыеПоИерархииВыбранаИерархия", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновныеИЗависимыеПоИерархииВыбранаИерархия(РезультатЗакрытия, ДополнтельныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда
		
		ТекВР = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
		
		ЗаполнитьОсновныеИЗависимыеПоИерархииНаСервере(ВыбраноОсновное, РезультатЗакрытия, ?(ТекВР = Неопределено, Неопределено, ТекВР.ВидРемонта));
		
		МодифицированностьОсновныхЗависимых = Истина;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВидыРемонтовИзНормативов(Команда)
	Для Каждого ТекСтрока Из НормативныеРемонты Цикл
		ВведенныеОценки = РСНЗТаблицаОценокРМ.НайтиСтроки(Новый Структура("ВидРемонта, Период", ТекСтрока.ВидРемонта, НачалоМесяца(ТекущаяДата())));
		Если ВведенныеОценки.Количество() = 0 Тогда 
			НС = РСНЗТаблицаОценокРМ.Добавить();
			НС.Период = НачалоМесяца(ТекущаяДата());
			НС.ВидРемонта = ТекСтрока.ВидРемонта;
			НС.ГруппаОбъектовРемонтов = Объект.Ссылка;
			НС.Сезон = ПредопределенноеЗначение("Справочник.торо_Сезоны.ПустаяСсылка");
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
	
	ТаблицаОценокРММодифицированность = Истина;
	Модифицированность = Модифицированность Или ТаблицаОценокРММодифицированность;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьЗначенияИзноса(ТекДанные = Неопределено)
	
	ТекДата = ТекущаяДата();
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.НазначенныйРесурс <> 0 Тогда
			МассивСтрок = ТабВыработкиОбъектаРемонта.НайтиСтроки(Новый Структура("Показатель",ТекДанные.Показатель ));
			
			НаработкаАбсолютная  = 0;
			
			Для каждого Строка Из МассивСтрок Цикл
				
				Если Строка.ВидДвижения = ВидДвиженияНакопления.Приход И Строка.Период <= ТекДата Тогда
					НаработкаАбсолютная = НаработкаАбсолютная + Строка.Наработка;
				КонецЕсли;
				
			КонецЦикла;
			
			ТекДанные.Износ = Формат(((ТекДанные.НазначенныйРесурс - НаработкаАбсолютная)/ТекДанные.НазначенныйРесурс)*100, "ЧДЦ=2") + "%";
		КонецЕсли;
	Иначе
		Для Каждого Строка Из ТабМаксимальныхЗначенийНаработки Цикл
			Если Строка.НазначенныйРесурс <> 0 Тогда
				МассивСтрок = ТабВыработкиОбъектаРемонта.НайтиСтроки(Новый Структура("Показатель",Строка.Показатель));
				
				НаработкаАбсолютная  = 0;
				
				Для каждого СтрокаНайденная Из МассивСтрок Цикл
					
					Если СтрокаНайденная.ВидДвижения = ВидДвиженияНакопления.Приход И СтрокаНайденная.Период <= ТекДата Тогда
						НаработкаАбсолютная = НаработкаАбсолютная + СтрокаНайденная.Наработка;
					КонецЕсли;
					
				КонецЦикла;
				
				Строка.Износ = Формат(((Строка.НазначенныйРесурс - НаработкаАбсолютная)/Строка.НазначенныйРесурс)*100, "ЧДЦ=2") + "%";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтаОсновногоСвязанногоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокОтбора = Новый СписокЗначений();
	
	ТекДанные = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	Иначе
		ОбъектРемонта = ТекДанные.ОбъектРемонта;
	КонецЕсли;
	
	СтруктураВозврата = ЗаполнитьНормативныеРемонтыНаСервере(ОбъектРемонта);
	
	Для каждого Структура Из СтруктураВозврата Цикл
		
		Если НЕ Структура.Удален Тогда
			СписокОтбора.Добавить(Структура.ВидРемонта);
		КонецЕсли;
		
	КонецЦикла;
	ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокОтбора", "Визуализация", СписокОтбора);	
	ФормаВыборка = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора", ПараметрыФормыСтруктура, Элемент);
	ФормаВыборка.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновныеИЗависимыеПоИерархииНаСервере(ВыбраноОсновное, СтруктураОР, ТекВР)
	
	ЛюбойВР = Справочники.торо_ВидыРемонтов.ПустаяСсылка();
		
	Запрос = Новый Запрос;
	
	Если СтруктураОР.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РасположениеОРВСтруктуреИерархии.%НужноеПоле% КАК Значение
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&Дата, СтруктураИерархии = &Иерархия) КАК РасположениеОРВСтруктуреИерархии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО РасположениеОРВСтруктуреИерархии.%НужноеПоле% = торо_ОбъектыРемонта.Ссылка
		|			И НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|ГДЕ
		|	НЕ РасположениеОРВСтруктуреИерархии.Удален
		|	И РасположениеОРВСтруктуреИерархии.%ОтборПоСсылке% = &Ссылка";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());
		Запрос.УстановитьПараметр("Иерархия", СтруктураОР);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.%НужноеПоле% КАК Значение
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ПО торо_ИерархическиеСтруктурыОР.%НужноеПоле% = торо_ОбъектыРемонта.Ссылка
		|			И НЕ торо_ОбъектыРемонта.ЭтоГруппа
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &Иерархия
		|	И торо_ИерархическиеСтруктурыОР.%ОтборПоСсылке% = &Ссылка";
		
		Запрос.УстановитьПараметр("Иерархия", СтруктураОР);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ОтборПоСсылке%", ?(ВыбраноОсновное, "ОбъектИерархии", "РодительИерархии"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%НужноеПоле%", ?(НЕ ВыбраноОсновное, "ОбъектИерархии", "РодительИерархии"));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		Если ТекВР = Неопределено Тогда
			НС = ВидыРемонтаЭтогоОбъекта.Добавить();
			НС.ВидРемонта = ЛюбойВР;
			ТекВР = ЛюбойВР;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбраноОсновное Тогда
		ВРЗависимого = ТекВР;
		ВРОсновного = ЛюбойВР; 
	Иначе
		ВРЗависимого = ЛюбойВР;
		ВРОсновного = ТекВР;
	КонецЕсли;
	 
	
	Пока Выборка.Следующий() Цикл
		Если СписокОбъектовРемонта.НайтиСтроки(Новый Структура("ОбъектРемонта", Выборка.Значение)).Количество() = 0 Тогда
			НС = СписокОбъектовРемонта.Добавить();
			НС.ОбъектРемонта = Выборка.Значение;
		КонецЕсли;
		
	    СтруктураПоиска = Новый Структура("ОбъектРемонта, ВидРемонтаЗависимогоОбъекта, ВидРемонтаОсновногоОбъекта", Выборка.Значение, ВРЗависимого, ВРОсновного);
		НайденныеСтроки = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(СтруктураПоиска);
		Для Каждого Строка Из НайденныеСтроки Цикл
			ВидыРемонтаОсновногоСвязанного.Удалить(Строка);
		КонецЦикла;
		
		СтруктураВозврата = ЗаполнитьНормативныеРемонтыНаСервере(Выборка.Значение);
		
		Для каждого Структура Из СтруктураВозврата Цикл
			
			Если НЕ Структура.Удален Тогда
				ВРДобавляемый = Структура.ВидРемонта;
				Если ВыбраноОсновное Тогда
					ВРОсновного = ВРДобавляемый; 
				Иначе
					ВРЗависимого = ВРДобавляемый;
				КонецЕсли;				
				
				СтруктураПоиска = Новый Структура("ОбъектРемонта, ВидРемонтаЗависимогоОбъекта, ВидРемонтаОсновногоОбъекта", Выборка.Значение, ВРЗависимого, ВРОсновного);;
				Если ВидыРемонтаОсновногоСвязанного.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
					НС = ВидыРемонтаОсновногоСвязанного.Добавить();
					НС.ОбъектРемонта = Выборка.Значение;
					НС.ВидРемонтаЗависимогоОбъекта = ВРЗависимого;
					НС.ВидРемонтаОсновногоОбъекта = ВРОсновного;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	МодифицированностьОсновныхЗависимых = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗацикливаниеОстановочных(ВыбраноОсновное, ВыбранныйВР, ВР, ВыбранныйОР)
	
	Возврат Справочники.торо_ОбъектыРемонта.ПроверитьЗацикливаниеЗависимыхОстановочных(ВР, ВыбранныйВР, Объект.Ссылка, ВыбранныйОР, ВыбраноОсновное, ?(ВыбраноОсновное, ЗависимоеОборудование.Выгрузить(), ОсновноеОборудование.Выгрузить()));
		
КонецФункции

&НаКлиенте
Процедура УстановитьОтборВТЧОсновныеЗависимыеРемонты()
	
	ТекущиеДанные = Элементы.ВидыРемонтаЭтогоОбъекта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ВидРемонта = "--------";
	Иначе
		ВидРемонта = ТекущиеДанные.ВидРемонта;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокОбъектовРемонта.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбъектРемонта = "--------";
	Иначе
		ОбъектРемонта = ТекущиеДанные.ОбъектРемонта;
	КонецЕсли;
	
	СтруктураДляОтбора = Новый Структура;
	СтруктураДляОтбора.Вставить("ОбъектРемонта", ОбъектРемонта);
	
	Если ВыбраноОсновное Тогда
		СтруктураДляОтбора.Вставить("ВидРемонтаЗависимогоОбъекта", ВидРемонта);
	Иначе
		СтруктураДляОтбора.Вставить("ВидРемонтаОсновногоОбъекта", ВидРемонта);
	КонецЕсли; 
	
	Элементы.ВидыРемонтаОсновногоСвязанного.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураДляОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновноеИЗависимоеДляПереключения(ДляОсновного)
	
	Если ОРОсновные = Неопределено Тогда
		ОРОсновные = Новый Массив;
		Для каждого Строка Из ОсновноеОборудование Цикл
			Если ОРОсновные.Найти(Строка.ОбъектРемонта) = Неопределено Тогда
				ОРОсновные.Добавить(Строка.ОбъектРемонта);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Не ДляОсновного Тогда
		ОРОсновные.Очистить();
		Для Каждого Строка Из СписокОбъектовРемонта Цикл
			ОРОсновные.Добавить(Строка.ОбъектРемонта);
		КонецЦикла;
	КонецЕсли;
	
	Если ВРЭтогоДляОсновного = Неопределено Тогда
		ВРЭтогоДляОсновного = Новый Массив;
		Для каждого Строка Из ОсновноеОборудование Цикл
			Если ВРЭтогоДляОсновного.Найти(Строка.ВидРемонтаЗависимогоОбъекта) = Неопределено Тогда
				ВРЭтогоДляОсновного.Добавить(Строка.ВидРемонтаЗависимогоОбъекта);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Не ДляОсновного Тогда
		ВРЭтогоДляОсновного.Очистить();
		Для Каждого Строка Из ВидыРемонтаЭтогоОбъекта Цикл
			ВРЭтогоДляОсновного.Добавить(Строка.ВидРемонта);
		КонецЦикла;
	КонецЕсли;
	
		
	Если ОРСвязанные = Неопределено Тогда
		ОРСвязанные = Новый Массив;
		Для каждого Строка Из ЗависимоеОборудование Цикл
			Если ОРСвязанные.Найти(Строка.ОбъектРемонта) = Неопределено Тогда
				ОРСвязанные.Добавить(Строка.ОбъектРемонта);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ДляОсновного Тогда
		ОРСвязанные.Очистить();
		Для Каждого Строка Из СписокОбъектовРемонта Цикл
			ОРСвязанные.Добавить(Строка.ОбъектРемонта);
		КонецЦикла;
	КонецЕсли;
	
	Если ВРЭтогоДляЗависимого = Неопределено Тогда
		ВРЭтогоДляЗависимого = Новый Массив;
		Для каждого Строка Из ЗависимоеОборудование Цикл
			Если ВРЭтогоДляЗависимого.Найти(Строка.ВидРемонтаОсновногоОбъекта) = Неопределено Тогда
				ВРЭтогоДляЗависимого.Добавить(Строка.ВидРемонтаОсновногоОбъекта);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ДляОсновного Тогда
		ВРЭтогоДляЗависимого.Очистить();
		Для Каждого Строка Из ВидыРемонтаЭтогоОбъекта Цикл
			ВРЭтогоДляЗависимого.Добавить(Строка.ВидРемонта);
		КонецЦикла;
	КонецЕсли;
	
	СписокОбъектовРемонта.Очистить();
	ВидыРемонтаЭтогоОбъекта.Очистить();
	Если ДляОсновного Тогда
		МассивОР = ОРОсновные;
		МассивВР = ВРЭтогоДляОсновного;
	Иначе
		МассивОР = ОРСвязанные;
		МассивВР = ВРЭтогоДляЗависимого;
	КонецЕсли;
	
	Для Каждого ОР Из МассивОР Цикл
		НС = СписокОбъектовРемонта.Добавить();
		НС.ОбъектРемонта = ОР;
	КонецЦикла;
	Для Каждого ВР Из МассивВР Цикл
		НС = ВидыРемонтаЭтогоОбъекта.Добавить();
		НС.ВидРемонта = ВР;
	КонецЦикла;
	
	УстановитьКоличествоОсновногоЗависимогоОборудования();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКоличествоОсновногоЗависимогоОборудования()
	
	Основное = Элементы.ВыборОсновногоЗависимого.СписокВыбора.НайтиПоЗначению("Основное");
	Зависимое = Элементы.ВыборОсновногоЗависимого.СписокВыбора.НайтиПоЗначению("Зависимое");
	
	Если ВыбраноОсновное Тогда
		Основное.Представление = "Основное оборудование (" + СписокОбъектовРемонта.Количество()+ ")";
		Зависимое.Представление = "Зависимое оборудование (" + ОРСвязанные.Количество()+ ")";
	Иначе
		Зависимое.Представление = "Зависимое оборудование (" + СписокОбъектовРемонта.Количество()+ ")";
		Основное.Представление = "Основное оборудование (" + ОРОсновные.Количество()+ ")";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОсновныеИЗависимыеРемонтыНаФорме(ДляОсновного = Истина)
	
	ЗаполнитьОсновноеИЗависимоеДляПереключения(ДляОсновного);
	ВидыРемонтаОсновногоСвязанного.Очистить();
	
	Если ДляОсновного Тогда
		
		Для каждого Строка Из ОсновноеОборудование Цикл
						
			НС = ВидыРемонтаОсновногоСвязанного.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Строка);
			
		КонецЦикла; 
	Иначе
		
		Для каждого Строка Из ЗависимоеОборудование Цикл
			
			НС = ВидыРемонтаОсновногоСвязанного.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Строка);
			
		КонецЦикла; 

	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновныеИЗависимыеРемонты()
	ОсновноеОборудование.Очистить();
	ЗависимоеОборудование.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта = &ОбъектРемонта
		|			ТОГДА торо_РемонтыОсновногоЗависимогоОборудования.ОсновнойОбъектРемонта
		|		ИНАЧЕ торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта
		|	КОНЕЦ КАК ОбъектРемонта,
		|	торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаОсновногоОбъекта,
		|	торо_РемонтыОсновногоЗависимогоОборудования.ВидРемонтаЗависимогоОбъекта,
		|	ВЫБОР
		|		КОГДА торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта = &ОбъектРемонта
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоОсновной
		|ИЗ
		|	РегистрСведений.торо_РемонтыОсновногоЗависимогоОборудования КАК торо_РемонтыОсновногоЗависимогоОборудования
		|ГДЕ
		|	(торо_РемонтыОсновногоЗависимогоОборудования.ОсновнойОбъектРемонта = &ОбъектРемонта
		|			ИЛИ торо_РемонтыОсновногоЗависимогоОборудования.СвязанныйОбъектРемонта = &ОбъектРемонта)";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЭтоОсновной Тогда
			НС = ОсновноеОборудование.Добавить();
		Иначе
			НС = ЗависимоеОборудование.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НС, ВыборкаДетальныеЗаписи);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНеИспользуемыхСтрок(ПоказыватьУдаленные,ИмяТаблицаФормы)
	Если ПоказыватьУдаленные Тогда
		Элементы[ИмяТаблицаФормы].ОтборСтрок = Неопределено;
	Иначе
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Удален", Ложь);
		Элементы[ИмяТаблицаФормы].ОтборСтрок = ПараметрыОтбора;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыЗапросовНаСервере()
	
	Кнопка = Элементы.ЗаявкиНаРемонтОтображатьТолькоПроведенныеЗаявки;
	ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", Объект.Ссылка);
	
	Кнопка = Элементы.ВыявленныеДефектыОтображатьТолькоПроведенныеДефекты;
	ВыявленныеДефекты.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", Объект.Ссылка);
	ВыявленныеДефекты.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);

	Кнопка = Элементы.ВыполненныеРемонтыОтображатьТолькоПроведенныеАкты;
	ВыполненныеРемонты.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	ВыполненныеРемонты.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", Объект.Ссылка);
	
	Кнопка = Элементы.ПредстоящиеРемонтыОтображатьТолькоПроведенныеППР;
	ПредстоящиеРемонты.Параметры.УстановитьЗначениеПараметра("ОтображатьТолькоПроведенные", Кнопка.Пометка);
	ПредстоящиеРемонты.Параметры.УстановитьЗначениеПараметра("ОбъектРемонта", Объект.Ссылка);
	ПредстоящиеРемонты.Параметры.УстановитьЗначениеПараметра("ДатаНачала", ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте  
Процедура УстановитьВидимостьЭлементовФормыОсновноеЗависимое()
	
	Элементы.ВидыРемонтаОсновногоСвязанногоВидРемонта.Видимость = ВыбраноОсновное;
	Элементы.ВидыРемонтаОсновногоСвязанногоВидРемонтаЗависимый.Видимость = Не ВыбраноОсновное;
	Если ВыбраноОсновное Тогда
		ЗаголовокТЧ = "Выды ремонта основного объекта";
	Иначе
		ЗаголовокТЧ = "Виды ремонта зависимого объекта";
	КонецЕсли; 
	Элементы.ВидыРемонтаОсновногоСвязанного.Заголовок = ЗаголовокТЧ;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(ПриСозданииФормыНаСервере = Ложь)
	Если ПриСозданииФормыНаСервере Тогда
		
		Если Объект.Изготовитель = ТекТиповойОР.Изготовитель Тогда
			Элементы.Изготовитель.ЦветТекста = Новый Цвет(128,128,128);
		КонецЕсли;
		
		Если Объект.Направление = ТекТиповойОР.Направление Тогда
			Элементы.Направление.ЦветТекста = Новый Цвет(128,128,128);
		КонецЕсли;
		
		// Отбор не удаленных строк
		ПараметрыОтбора = Новый ФиксированнаяСтруктура("Удален", Ложь);
		Элементы.СписокИзмеряемыхПоказателей.ОтборСтрок = ПараметрыОтбора;
		Элементы.НормативныеРемонты.ОтборСтрок = ПараметрыОтбора;
		Элементы.ТабЗапчастейОбъектовРемонта.ОтборСтрок = ПараметрыОтбора;
		
		ПоказыватьКонтрагента = Объект.ВнешнийОбъект;
		Элементы.СтраницаКонтрагента.Видимость = ПоказыватьКонтрагента;
		Элементы.СтарницаОрганизации.Видимость = НЕ ПоказыватьКонтрагента;
		
		// функциональные опции
		ФОУчетЗапчастей                 				= ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
		ФОУчетКонтролируемыхПоказателей 				= ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
		ФОУчетНаработкиОборудования     				= ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
		ФОУчетСостоянияОборудования     				= ПолучитьФункциональнуюОпцию("торо_УчетСостоянияОборудования");
		ФОУчетПусковОборудования        				= ПолучитьФункциональнуюОпцию("торо_УчетПусковОборудования");
		ФОУчетЗамещающихРемонтов        				= ПолучитьФункциональнуюОпцию("торо_УчетЗамещающихРемонтов");
		ФОИспользоватьКоэффициентыРемонтныхОсобенностей = ПолучитьФункциональнуюОпцию("торо_ИспользоватьКоэффициентыРемОсобенностей");
		ФОИспользоватьПланированиеПоЖесткимРемЦиклам 	= ПолучитьФункциональнуюОпцию("торо_ИспользоватьПланированиеПоЖесткимРемЦиклам");
		ФОИспользоватьОценкиРМ							= ПолучитьФункциональнуюОпцию("торо_ИспользованиеОценокРМ");
		ФОИспользоватьОстановочные						= ПолучитьФункциональнуюОпцию("торо_ИспользоватьОстановочныеРемонты");
		
		Элементы.СтраницаЗапчасти.Видимость                              = ФОУчетЗапчастей;
		Элементы.СтраницаКонтролируемыеПоказатели.Видимость              = ФОУчетКонтролируемыхПоказателей;
		Элементы.СтраницаНаработка.Видимость                             = ФОУчетНаработкиОборудования;
		Элементы.СтраницаСостояниеОР.Видимость                           = ФОУчетСостоянияОборудования;
		Элементы.СтраницаКоличествоПусков.Видимость                      = ФОУчетПусковОборудования;
		Элементы.ГруппаЗамещаемые.Видимость                              = ФОУчетЗамещающихРемонтов;
		Элементы.СтраницаКоэффициентыРемонтныхОсобенностей.Видимость     = ФОИспользоватьКоэффициентыРемонтныхОсобенностей;
		Элементы.СтраницаФиксированныеРемонтныеЦиклы.Видимость           = ФОИспользоватьПланированиеПоЖесткимРемЦиклам;
		Элементы.СтраницаОценкаРМ.Видимость 							 = ФОИспользоватьОценкиРМ;
		Элементы.ОсновноеИЗависимоеОборудование.Видимость 				 = ФОИспользоватьОстановочные;
		
	КонецЕсли;	
	
	// ЖЦ Оборудования++
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		
		Элементы.ГруппаСтатусОбъектаРемонта.Видимость = Истина;
		Элементы.ДатаВводаВЭксплуатацию1.Видимость    = Ложь;

		Элементы.АдресКартинки.Высота = 9;
		
		Элементы.ДатаВводаВЭксплуатацию.ТолькоПросмотр = Истина;// ТолькоПросмотрДатыВводаВЭксплуатацию;
		Элементы.ДатаСнятияСУчета.ТолькоПросмотр       = Истина;// ТолькоПросмотрДатыСнятияСучета;
		
		Если Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Доступность = Ложь;
		КонецЕсли;
		
		
		Если ЗначениеЗаполнено(РегистраторПринятияКУчету) Тогда
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Заголовок = РегистраторПринятияКУчету;
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Доступность = Истина;	
		Иначе
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Заголовок = НСтр("ru = 'Ввести документ ""Принятие объекта ремонта к учету""'");
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Доступность = Ложь;	
		КонецЕсли; 
		
		
		Если ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Заголовок   = РегистраторСнятияСУчета;
		Иначе
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Заголовок   = НСтр("ru = 'Ввести документ ""Выбытие объекта ремонта""'");
		КонецЕсли;
		
		ПравоВводаДокументовПринятияКУчету = ПравоДоступа("Добавление", Метаданные.Документы.торо_ПринятиеОРКУчету);
		ПравоВводаДокументовСнятияСУчета = ПравоДоступа("Добавление", Метаданные.Документы.торо_ВыбытиеОбъектаРемонта);
		Если НЕ ЗначениеЗаполнено(РегистраторПринятияКУчету) Тогда
			Элементы.ВвестиОткрытьДокументПринятиеКУчету.Доступность = Элементы.ВвестиОткрытьДокументПринятиеКУчету.Доступность И ПравоВводаДокументовПринятияКУчету;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда
			Элементы.ВвестиОткрытьДокументСнятияСУчета.Доступность = Элементы.ВвестиОткрытьДокументСнятияСУчета.Доступность И ПравоВводаДокументовСнятияСУчета;
		КонецЕсли;
		
		Элементы.НеУчаствуетВПланировании.Доступность = ДоступностьФлагаПланирования;
		
		
		ТекСтатусВУчете = РегистрыСведений.торо_СтатусыОбъектовРемонтаВУчете.ПолучитьТекущийСтатусОР(Объект.Ссылка);
		
		Если Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			ЭтаФорма.Заголовок = НСтр("ru = 'Объекты ремонта (Создание)'");
		Иначе
			ЭтаФорма.Заголовок = Строка(Объект.Ссылка) + " [" + ТекСтатусВУчете + "]";
		КонецЕсли;
		
		Если ТекСтатусВУчете = Перечисления.торо_СтатусыОРВУчете.СнятоСУчета Тогда
			ЭтаФорма.ТолькоПросмотр                                = Истина;
			Элементы.ЗначенияКонтролируемыхПоказателей.Доступность = Ложь;
			Элементы.ТабВыработкиОбъектаРемонта.Доступность        = Ложь;
			Элементы.КомПанельГрафика.Доступность                  = Ложь;
		Иначе
			ЭтаФорма.ТолькоПросмотр                                = Ложь;;
			Элементы.ЗначенияКонтролируемыхПоказателей.Доступность = Истина;
			Элементы.ТабВыработкиОбъектаРемонта.Доступность        = Истина;
			Элементы.КомПанельГрафика.Доступность                  = Истина;
		КонецЕсли;
		
	Иначе
		Элементы.АдресКартинки.Высота = 7;
		Элементы.ГруппаСтатусОбъектаРемонта.Видимость = Ложь;
		Элементы.ДатаВводаВЭксплуатацию1.Видимость    = Истина;
		
		Если Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
			ЭтаФорма.Заголовок = НСтр("ru = 'Объекты ремонта (Создание)'");
		Иначе
			ЭтаФорма.Заголовок = Строка(Объект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;

	// ЖЦ Оборудования--
	
	Если НЕ Объект.Ссылка = Справочники.торо_ОбъектыРемонта.ПустаяСсылка() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ЕСТЬNULL(торо_ТекущееСостояниеОРСрезПоследних.ВидЭксплуатации, ЗНАЧЕНИЕ(Справочник.торо_ВидыЭксплуатации.ПустаяСсылка)) КАК ВидЭксплуатации
		               |ИЗ
		               |	РегистрСведений.торо_ТекущееСостояниеОР.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта) КАК торо_ТекущееСостояниеОРСрезПоследних";
		Запрос.УстановитьПараметр("ОбъектРемонта",Объект.Ссылка);
		Запрос.УстановитьПараметр("ТекущаяДата",ОбщегоНазначения.ТекущаяДатаПользователя());
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Выборка.ВидЭксплуатации = Справочники.торо_ВидыЭксплуатации.ПустаяСсылка() Тогда
				ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Вид эксплуатации не установлен]'");
			Иначе
				ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + " [" + Выборка.ВидЭксплуатации + "]";
			КонецЕсли;
		КонецЕсли;
				
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	торо_Ремонты.ID,
		               |	торо_Ремонты.ОбъектРемонта,
	    	           |	торо_Ремонты.Регистратор КАК Регистратор,
	        	       |	1 КАК Приоритет
	            	   |ИЗ
		               |	РегистрСведений.торо_Ремонты КАК торо_Ремонты
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
	    	           |		ПО торо_Ремонты.ID = торо_ЗавершенныеРемонтныеРаботы.ID
	        	       |ГДЕ
	            	   |	торо_Ремонты.ОбъектРемонта = &ОбъектРемонта
		               |	И торо_Ремонты.Регистратор ССЫЛКА Документ.торо_ВыявленныеДефекты
		               |	И торо_ЗавершенныеРемонтныеРаботы.Регистратор ЕСТЬ NULL 
	    	           |
	        	       |ОБЪЕДИНИТЬ ВСЕ
	            	   |
		               |ВЫБРАТЬ
		               |	торо_Ремонты.ID,
	    	           |	торо_Ремонты.ОбъектРемонта,
	        	       |	торо_Ремонты.Регистратор,
	            	   |	2
		               |ИЗ
		               |	РегистрСведений.торо_Ремонты КАК торо_Ремонты
	    	           |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
	        	       |		ПО торо_Ремонты.ID = торо_ЗавершенныеРемонтныеРаботы.ID
	            	   |ГДЕ
		               |	торо_Ремонты.ОбъектРемонта = &ОбъектРемонта
		               |	И торо_Ремонты.Регистратор ССЫЛКА Документ.торо_НарядНаВыполнениеРемонтныхРабот
	    	           |	И торо_ЗавершенныеРемонтныеРаботы.Регистратор ЕСТЬ NULL 
	        	       |
	            	   |УПОРЯДОЧИТЬ ПО
	            	   |	Приоритет УБЫВ";
				   
		Запрос.УстановитьПараметр("ОбъектРемонта",Объект.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Приоритет = 1 Тогда
				ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Выявлен дефект]'");
			Иначе
				ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Выполняется ремонт]'");
			КонецЕсли;			
		Иначе
			ЭтаФорма.Заголовок = ЭтаФорма.Заголовок + НСтр("ru = ' [Работает]'");
		КонецЕсли;
	КонецЕсли;
	
	// Гарантии++
	Элементы.СтраницаГарантийныеРемонты.Видимость = ЕстьГарантияДляОбъекта;
	СтруктураОтбора = Новый Структура("ОбъектРемонта", Объект.Ссылка);
	МассивСтрок = ГарантииОбъектаРемонта.НайтиСтроки(СтруктураОтбора);
	
	Если МассивСтрок.Количество() <> ГарантииОбъектаРемонта.Количество() Тогда // Значит имеются гарантии у одного из родителей ОР
		Элементы.ЕстьГарантияДляОбъекта.Доступность = Ложь;                    // и изменять значение флага нельзя.
	Иначе
		Элементы.ЕстьГарантияДляОбъекта.Доступность = Истина;
	КонецЕсли;
	
	// Гарантии--
	
	Элементы.ФормаПоказатьСкрытьИзображение.Пометка = ОтображатьИзображение;	
	Элементы.ГруппаДанныеЭксплПравая.Видимость = Элементы.ФормаПоказатьСкрытьИзображение.Пометка;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыЭксплуатации()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА торо_СтатусыОбъектовРемонтаВУчете.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.ПринятоКУчету)
	               |				ТОГДА торо_СтатусыОбъектовРемонтаВУчете.Период
	               |		КОНЕЦ) КАК ДатаПринятияКУчету,
	               |	МАКСИМУМ(ВЫБОР
	               |			КОГДА торо_СтатусыОбъектовРемонтаВУчете.СтатусОР = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыОРВУчете.СнятоСУчета)
	               |				ТОГДА торо_СтатусыОбъектовРемонтаВУчете.Период
	               |		КОНЕЦ) КАК ДатаСнятияСУчета,
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ПоследниеДатыСтатусов
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
	               |ГДЕ
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта = &ОбъектРемонта
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследниеДатыСтатусов.ОбъектРемонта КАК ОбъектРемонта,
	               |	торо_СтатусыОбъектовРемонтаВУчете.Период КАК ДатаВводаВЭксплуатацию,
	               |	торо_СтатусыОбъектовРемонтаВУчете.Регистратор КАК РегистраторПринятияКУчету,
	               |	ВЫБОР
	               |		КОГДА НЕ ПоследниеДатыСтатусов.ДатаСнятияСУчета ЕСТЬ NULL 
	               |				И ПоследниеДатыСтатусов.ДатаПринятияКУчету < ПоследниеДатыСтатусов.ДатаСнятияСУчета
	               |			ТОГДА торо_СтатусыОбъектовРемонтаВУчете1.Период
	               |		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	               |	КОНЕЦ КАК ДатаСнятияСУчета,
	               |	ВЫБОР
	               |		КОГДА НЕ ПоследниеДатыСтатусов.ДатаСнятияСУчета ЕСТЬ NULL 
	               |				И ПоследниеДатыСтатусов.ДатаПринятияКУчету < ПоследниеДатыСтатусов.ДатаСнятияСУчета
	               |			ТОГДА торо_СтатусыОбъектовРемонтаВУчете1.Регистратор
	               |		ИНАЧЕ ЗНАЧЕНИЕ(Документ.торо_ВыбытиеОбъектаРемонта.ПустаяСсылка)
	               |	КОНЕЦ КАК РегистраторСнятияСУчета
	               |ИЗ
	               |	ПоследниеДатыСтатусов КАК ПоследниеДатыСтатусов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете
	               |		ПО ПоследниеДатыСтатусов.ДатаПринятияКУчету = торо_СтатусыОбъектовРемонтаВУчете.Период
	               |			И ПоследниеДатыСтатусов.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчете.ОбъектРемонта
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете1
	               |		ПО ПоследниеДатыСтатусов.ДатаСнятияСУчета = торо_СтатусыОбъектовРемонтаВУчете1.Период
	               |			И ПоследниеДатыСтатусов.ОбъектРемонта = торо_СтатусыОбъектовРемонтаВУчете1.ОбъектРемонта";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата",   ТекущаяДата());
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ДатаВводаВЭксплуатацию     = Выборка.ДатаВводаВЭксплуатацию;
		РегистраторПринятияКУчету  = Выборка.РегистраторПринятияКУчету;
		ДатаСнятияСУчета           = Выборка.ДатаСнятияСУчета;
		РегистраторСнятияСУчета    = Выборка.РегистраторСнятияСУчета;
	Иначе
		ДатаВводаВЭксплуатацию     = Дата("00010101");
		РегистраторПринятияКУчету  = Документы.торо_ПринятиеОРКУчету.ПустаяСсылка();
		ДатаСнятияСУчета           = Дата("00010101");
		РегистраторСнятияСУчета    = Документы.торо_ВыбытиеОбъектаРемонта.ПустаяСсылка();
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьНормативныеРемонтыНаСервере(ОбъектРемонта)
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
		|	торо_НормативныеРемонтыОборудования.ВидРемонта,
		|	торо_НормативныеРемонтыОборудования.ТиповойОР,
		|	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
		|	торо_НормативныеРемонтыОборудования.СпособПланирования,
		|	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
		|	торо_НормативныеРемонтыОборудования.СпособВыполнения,
		|	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
		|	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
		|	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
		|	торо_НормативныеРемонтыОборудования.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
		|	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРаботыОборудования,
		|	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
		|	торо_НормативныеРемонтыОборудования.НеУчитыватьПродолжительность,
		|	торо_НормативныеРемонтыОборудования.ИспользоватьКоэффициентыРемонтныхОсобенностей,
		|	торо_НормативныеРемонтыОборудования.УчитыватьПростоиОборудования,
		|	ВЫБОР
		|		КОГДА торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК Удален
		|ИЗ
		|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудованияУдаленные КАК торо_НормативныеРемонтыОборудованияУдаленные
		|		ПО торо_НормативныеРемонтыОборудования.ОбъектРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ОбъектРемонта
		|			И торо_НормативныеРемонтыОборудования.ВидРемонта = торо_НормативныеРемонтыОборудованияУдаленные.ВидРемонта
		|			И торо_НормативныеРемонтыОборудования.ТиповойОР = торо_НормативныеРемонтыОборудованияУдаленные.ТиповойОР
		|ГДЕ
		|	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		СтруктураВозврата = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			СтруктураВозврата.Добавить(Новый Структура("ВидРемонта, ТиповойОР, НормативныйРемонт, СпособПланирования, ГрафикРемонтныхРабот, 
			|СпособВыполнения, НеИспользоватьВПланированииДатуВводаВЭксплуатацию, СпособУчетаДатыОтсчета, НеУчаствуетВПланировании, 
			|РазрешитьСокращатьМежремонтныйПериодПриПланировании, НеУчитыватьПриПланированииГрафикРаботыОборудования, НеУчитыватьПриПланированииГрафикРемонтныхРабот, НеУчитыватьПродолжительность, 
			|ИспользоватьКоэффициентыРемонтныхОсобенностей, УчитыватьПростоиОборудования, Удален",
			Выборка.ВидРемонта, Выборка.ТиповойОР, Выборка.НормативныйРемонт, Выборка.СпособПланирования, Выборка.ГрафикРемонтныхРабот, 
			Выборка.СпособВыполнения, Выборка.НеИспользоватьВПланированииДатуВводаВЭксплуатацию, Выборка.СпособУчетаДатыОтсчета, 
			Выборка.НеУчаствуетВПланировании, Выборка.РазрешитьСокращатьМежремонтныйПериодПриПланировании, Выборка.НеУчитыватьПриПланированииГрафикРаботыОборудования, 
			Выборка.НеУчитыватьПриПланированииГрафикРемонтныхРабот, Выборка.НеУчитыватьПродолжительность, Выборка.ИспользоватьКоэффициентыРемонтныхОсобенностей, 
			Выборка.УчитыватьПростоиОборудования,Выборка.Удален));
			
		КонецЦикла;
		
		Возврат СтруктураВозврата;
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВычислениеМежремонтногоИнтервала(ТекДанные)
	
	Перем МежремонтныйИнтервал;
	
	Запрос = Новый Запрос;
	Таб = НормативныеРемонты.Выгрузить(,"ВидРемонта, СпособПланирования");
	Запрос.УстановитьПараметр("Таб", Таб);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.СпособПланирования
	|ПОМЕСТИТЬ ОпредСпособПланирования
	|ИЗ
	|	&Таб КАК Таб
	|ГДЕ
	|	Таб.ВидРемонта = &ВидРемонта
	|	И Таб.СпособПланирования <>ЗНАЧЕНИЕ(Справочник.торо_СпособыПланированияРемонтныхРабот.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПараметрыНаработки,
	|	торо_СпособыПланированияРемонтныхРабот.ИспользоватьПериодичность,
	|	торо_СпособыПланированияРемонтныхРабот.КоличествоПериодов,
	|	торо_СпособыПланированияРемонтныхРабот.ПериодичностьРемонтныхРабот КАК Периодичность,
	|	ОпредСпособПланирования.СпособПланирования КАК СпособПланирования
	|ИЗ
	|	ОпредСпособПланирования КАК ОпредСпособПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_СпособыПланированияРемонтныхРабот КАК торо_СпособыПланированияРемонтныхРабот
	|		ПО ОпредСпособПланирования.СпособПланирования = торо_СпособыПланированияРемонтныхРабот.Ссылка";
	
	
	Запрос.УстановитьПараметр("ВидРемонта", ТекДанные.ЗамещаемыйВидРемонта);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДляПериодичности = Результат.Выбрать();
	
	Если ВыборкаДляПериодичности.Следующий() Тогда
		
		Если ВыборкаДляПериодичности.ИспользоватьПериодичность Тогда
			
			Если ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Год Тогда
				Период = 365;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Полугодие Тогда
				Период = 182;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Квартал Тогда
				Период = 90;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Месяц Тогда
				Период = 28;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Декада Тогда
				Период = 10;
			ИначеЕсли ВыборкаДляПериодичности.Периодичность = Перечисления.Периодичность.Неделя Тогда
				Период = 7;
			Иначе Период = 1;
			КонецЕсли;
			
			МежремонтныйИнтервал = ВыборкаДляПериодичности.КоличествоПериодов * Период;
			
		КонецЕсли;
		
		Если ВыборкаДляПериодичности.ИспользоватьПараметрыНаработки Тогда
			
			Запрос3 = Новый Запрос;
			
			Если СписокПараметровНаработки.Количество() > 0 Тогда
				
				ТаблНараб = СписокПараметровНаработки.Выгрузить(, "ОбъектРемонта,Показатель,ПродолжительностьПериодаПлановойНаработки,ПериодПлановойНаработки,ПлановаяНаработка,КоэффициентИспользованияОборудования"); 
				
			Иначе
				
				СписокОтбора = Новый СписокЗначений;
				СписокОтбора.Добавить(Объект.Ссылка);
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
				|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
				|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
				|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
				|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
				|	торо_ПараметрыНаработкиОбъектовРемонта.Период,
				|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
				|ИЗ
				|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
				|ГДЕ
				|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта В(&СписокОтбора)";
				
				Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
				
				Результат = Запрос.Выполнить();
				ТаблНараб = Результат.Выгрузить();
				
			КонецЕсли;
			
			Запрос3.УстановитьПараметр("ТаблНараб", ТаблНараб);
			
			
			Запрос3.Текст = 
			"ВЫБРАТЬ
			|	ТаблНараб.Показатель,
			|	ТаблНараб.ПродолжительностьПериодаПлановойНаработки,
			|	ТаблНараб.ПериодПлановойНаработки,
			|	ТаблНараб.ПлановаяНаработка * ТаблНараб.КоэффициентИспользованияОборудования КАК ПлановаяНаработка
			|ПОМЕСТИТЬ ВыбрПараметрыНаработки
			|ИЗ
			|	&ТаблНараб КАК ТаблНараб
			|ГДЕ
			|	ТаблНараб.ОбъектРемонта = &ОбъектРемонта
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки,
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ПараметрНаработки
			|ПОМЕСТИТЬ ВыбрСпобобыПланирования
			|ИЗ
			|	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
			|ГДЕ
			|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = &Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВыбрСпобобыПланирования.ЗначениеПараметраНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки,0) КАК ПродолжительностьПериодаПлановойНаработки,
			|	ВыбрПараметрыНаработки.ПериодПлановойНаработки,
			|	ЕстьNULL(ВыбрПараметрыНаработки.ПлановаяНаработка,0) КАК ПлановаяНаработка
			|ИЗ
			|	ВыбрСпобобыПланирования КАК ВыбрСпобобыПланирования
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВыбрПараметрыНаработки КАК ВыбрПараметрыНаработки
			|		ПО ВыбрСпобобыПланирования.ПараметрНаработки = ВыбрПараметрыНаработки.Показатель";
			
			
			Запрос3.УстановитьПараметр("Ссылка", ВыборкаДляПериодичности.СпособПланирования);
			Запрос3.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
			
			Результат = Запрос3.Выполнить();
			
			ВыборкаДляНаработки = Результат.Выбрать();
			ВыборкаДляНаработки.Следующий();
			
			Если ВыборкаДляНаработки.ПлановаяНаработка > 0 И ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки > 0 Тогда
				
				
				Если ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Год Тогда
					ПериодПлановойНаработки = 365;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Полугодие Тогда
					ПериодПлановойНаработки = 182;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Квартал Тогда
					ПериодПлановойНаработки = 90;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Месяц Тогда
					ПериодПлановойНаработки = 28;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Декада Тогда
					ПериодПлановойНаработки = 10;
				ИначеЕсли ВыборкаДляНаработки.ПериодПлановойНаработки = Перечисления.Периодичность.Неделя Тогда
					ПериодПлановойНаработки = 7;
				Иначе ПериодПлановойНаработки = 1;
				КонецЕсли;
				
				ПериодВДнях = ПериодПлановойНаработки * ВыборкаДляНаработки.ПродолжительностьПериодаПлановойНаработки;
				ПланНарабВДень = ВыборкаДляНаработки.ПлановаяНаработка / ПериодВДнях;
				
				МежремИнтервал = ВыборкаДляНаработки.ЗначениеПараметраНаработки / ПланНарабВДень;
				Если ЗначениеЗаполнено(МежремонтныйИнтервал) Тогда
					Если МежремИнтервал < МежремонтныйИнтервал Тогда
						МежремонтныйИнтервал = МежремИнтервал;
					КонецЕсли;
				Иначе МежремонтныйИнтервал = МежремИнтервал;
				КонецЕсли;
			Иначе 
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Проверьте заполнение показателей на вкладке ""Наработка"", Параметров планирования по наработке в способе планирования %1'"), ВыборкаДляПериодичности.СпособПланирования));
			КонецЕсли;
		КонецЕсли;
		
		
	Иначе 
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проверьте заполнение ""Способ планирования""'"));
	КонецЕсли;
	
	Возврат МежремонтныйИнтервал;
КонецФункции 

&НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	
	ИндивидуальныйНабор = Объект.НаборСвойств;
	
	Если ЗначениеЗаполнено(ИндивидуальныйНабор) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ПоказатьДополнительныеРеквизиты");
		
		ОткрытьФорму("Справочник.НаборыДополнительныхРеквизитовИСведений.ФормаСписка", ПараметрыФормы);
		
		ПараметрыПерехода = Новый Структура;
		ПараметрыПерехода.Вставить("Набор", ИндивидуальныйНабор);
		ПараметрыПерехода.Вставить("Свойство", Неопределено);
		ПараметрыПерехода.Вставить("ЭтоДополнительноеСведение", Ложь);
		
		Оповестить("Переход_НаборыДополнительныхРеквизитовИСведений", ПараметрыПерехода);
		
	Иначе
		
		УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтаФорма, Объект.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагПланированияИДоступность(СменаСтатуса = Ложь)
	ЗначениеПеречисления = Перечисления.торо_СтатусыОРВУчете.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(РегистраторПринятияКУчету)
		И Не ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда // Принят к учету
		
		ЗначениеПеречисления = Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету;
		
	ИначеЕсли ЗначениеЗаполнено(РегистраторПринятияКУчету)
		И ЗначениеЗаполнено(РегистраторСнятияСУчета) Тогда // Снят с учета
		
		ЗначениеПеречисления = Перечисления.торо_СтатусыОРВУчете.СнятоСУчета;
		
	Иначе
		
		ЗначениеПеречисления = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету;
		
	КонецЕсли;
	
	Структура = РегистрыСведений.торо_НастройкиДоступностиОбъектовРемонта.Получить(Новый Структура("СтатусОРВУчете",ЗначениеПеречисления));
	
	Если Не Структура = Неопределено Тогда
		
		ДоступностьФлагаПланирования = Структура.ДоступностьФлага;
		
		Если СменаСтатуса Тогда
			
			Объект.НеУчаствуетВПланировании = Структура.ЗначениеПоУмолчанию;
			
		КонецЕсли; 
		
		ОбязательностьПоляДатаВводаВЭксплуатацию = Структура.ДоступностьПриПодборе;
		
	КонецЕсли;	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	СтеретьЗначенияУнаследованныхРеквизитовТиповогоОР();
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,,,"НаборСвойств");
	УправлениеСвойствами.ПроставитьПризнакОбщегоСвойстваВТаблицеДопРеквизитов(ЭтаФорма, Объект.НаборСвойств);
	УнаследоватьДопРеквизитыИзТиповогоОР();
	ПривязатьОбработчикИзмененияДопРеквизитов();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьНормативныеРемонты()
	
	Если НЕ МодифицированностьНормРемонтов Тогда
		
		СтруктураВозврата = ЗаполнитьНормативныеРемонтыНаСервере(Объект.Ссылка);
		
		НормативныеРемонты.Очистить();
		Для каждого Элем Из СтруктураВозврата Цикл
			НС = НормативныеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	Если не МодифицированностьПредшествующихРемонтов Тогда
		СтруктураВозврата = ЗаполнитьПредшествующиеРемонтыНаСервере(Объект.Ссылка);
		
		ПредшествующиеРемонты.Очистить();
		Для Каждого Элем Из СтруктураВозврата Цикл
			НС = ПредшествующиеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	Если не МодифицированностьЗамещаемыхРемонтов Тогда
		СтруктураВозврата = ЗаполнитьЗамещаемыеРемонтыНаСервере(Объект.Ссылка);
		
		ЗамещаемыеРемонты.Очистить();
		Для Каждого Элем Из СтруктураВозврата Цикл
			НС = ЗамещаемыеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельОРПриСменеСтраницыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущаяСтраница = ДополнительныеПараметры.ТекущаяСтраница;
	Элемент = ДополнительныеПараметры.Элемент;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Невозможно записать объект. Заполните наименование'"));
			Элементы.ПанельОР.ТекущаяСтраница = Элементы.ПанельОР.ПодчиненныеЭлементы[0];
		ИначеЕсли Не ОбязательныеЗначенияЗаполнены() Тогда
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Невозможно записать объект. Заполните обязательные поля на вкладке ""Общие""'"));
			Элементы.ПанельОР.ТекущаяСтраница = Элементы.ПанельОР.ПодчиненныеЭлементы[0];
		Иначе
			Попытка
				Если Записать() Тогда
					ПанельОРПриСменеСтраницы(Элемент, ТекущаяСтраница);
				КонецЕсли;
			Исключение
				Инфо = ИнформацияОбОшибке();
				ПоказатьПредупреждение(Неопределено,Инфо.Причина);
				Элементы.ПанельОР.ТекущаяСтраница = Элементы.ПанельОР.ПодчиненныеЭлементы[0];
			КонецПопытки;				
		КонецЕсли;
	Иначе
		Элементы.ПанельОР.ТекущаяСтраница = Элементы.ПанельОР.ПодчиненныеЭлементы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоэффициентыРемонтныхОсобенностей()
	
	Перем МассивКоэффициентов;
	
	РассчитываемыеКоэффициенты.Очистить();
	УстанавливаемыеКоэффициенты.Очистить();
	
	МассивКоэффициентов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента КАК Ссылка,
	|	торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ЗначениеКоэффициента,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.Рассчитываемый,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ЗависитОтНаработки,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.СчитатьВозрастОтДатыИзготовления,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьГрафикРаботыОборудования,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.УчитыватьПростоиОборудования,
	|	торо_ВидыКоэффициентовРемонтныхОсобенностей.ПараметрНаработки
	|ИЗ
	|	РегистрСведений.торо_ЗначенияКоэффициентовРемонтныхОсобенностей.СрезПоследних(&ТекущаяДата, ОбъектРемонта = &ОбъектРемонта И Использование) КАК торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ВидыКоэффициентовРемонтныхОсобенностей КАК торо_ВидыКоэффициентовРемонтныхОсобенностей
	|		ПО торо_ЗначенияКоэффициентовРемонтныхОсобенностейСрезПоследних.ВидКоэффициента = торо_ВидыКоэффициентовРемонтныхОсобенностей.Ссылка
	|ГДЕ
	|	НЕ торо_ВидыКоэффициентовРемонтныхОсобенностей.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.Рассчитываемый Тогда
			Если Выборка.ЗависитОтНаработки Тогда
				
				НаработкаОР = Справочники.торо_ОбъектыРемонта.ВычислитьТекущееЗначениеНаработки(Объект.Ссылка, Выборка.ПараметрНаработки, Выборка.УчитыватьПростоиОборудования);
				Если НЕ НаработкаОР = Неопределено Тогда
					СтруктураКоэффициент = Справочники.торо_ОбъектыРемонта.ПолучитьРассчитываемыйКоэффициент(НаработкаОР, Выборка.Ссылка);
					Если НЕ СтруктураКоэффициент = Неопределено Тогда
						
						НС = РассчитываемыеКоэффициенты.Добавить();
						НС.ВидКоэффициента = Выборка.Ссылка;
						НС.ЗначениеКоэффициента = СтруктураКоэффициент.ЗначениеКоэффициента;
						НС.Коэффициент = СтруктураКоэффициент.Коэффициент;
						
						МассивКоэффициентов.Добавить(СтруктураКоэффициент.Коэффициент);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				Если Выборка.УчитыватьГрафикРаботыОборудования Тогда
					ВозрастОР = Справочники.торо_ОбъектыРемонта.ВычислитьВремяРаботыОборудованияСУчетомГрафика(Объект.Ссылка, Выборка.СчитатьВозрастОтДатыИзготовления);	
				Иначе
					Если Выборка.СчитатьВозрастОтДатыИзготовления Тогда
						ВозрастОР = Год(ТекущаяДата()) - Год(Объект.ДатаВыпуска) + 1;
					Иначе
						ВозрастОР = Год(ТекущаяДата()) - Год(Объект.ДатаВводаВЭксплуатацию) + 1;
					КонецЕсли;
				КонецЕсли;
				
				СтруктураКоэффициент = Справочники.торо_ОбъектыРемонта.ПолучитьРассчитываемыйКоэффициент(ВозрастОР, Выборка.Ссылка);
				Если НЕ СтруктураКоэффициент = Неопределено Тогда
					
					НС = РассчитываемыеКоэффициенты.Добавить();
					НС.ВидКоэффициента = Выборка.Ссылка;
					НС.ЗначениеКоэффициента = СтруктураКоэффициент.ЗначениеКоэффициента;
					НС.Коэффициент = СтруктураКоэффициент.Коэффициент;
					
					МассивКоэффициентов.Добавить(СтруктураКоэффициент.Коэффициент);
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			НС = УстанавливаемыеКоэффициенты.Добавить();
			НС.ВидКоэффициента = Выборка.Ссылка;
			НС.ЗначениеКоэффициента = Выборка.ЗначениеКоэффициента;
			НС.Коэффициент = Выборка.ЗначениеКоэффициента.Коэффициент;
			
			МассивКоэффициентов.Добавить(НС.Коэффициент);
		КонецЕсли;
	КонецЦикла;
	
	ИтогКоэф = 1;
	Для каждого Элем Из МассивКоэффициентов Цикл
		
		ИтогКоэф = ИтогКоэф * Элем;
		
	КонецЦикла; 
	
	Если НЕ МассивКоэффициентов.Количество() = 0 Тогда
		ИтоговыйКоэффициент = ИтогКоэф;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьОценкиРМ(ОтображатьИсторию = Истина)
	
	Если ОтображатьИсторию Тогда
		ТаблицаОценокРМ.Загрузить(РСНЗТаблицаОценокРМ.Выгрузить());
	Иначе
		
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить(Объект.Ссылка);
		СписокОтбора.Добавить(Объект.ТиповойОР);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РМРемонтов.ВидРемонта,
		|	торо_РМРемонтов.ГруппаОбъектовРемонтов,
		|	торо_РМРемонтов.Период,
		|	торо_РМРемонтов.Сезон,
		|	торо_РМРемонтов.ВероятностьВыходаИзСтроя,
		|	торо_РМРемонтов.Ущерб
		|ПОМЕСТИТЬ РСНаборЗаписей
		|ИЗ
		|	&РСНаборЗаписей КАК торо_РМРемонтов
		|ГДЕ
		|	торо_РМРемонтов.Период <= &Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РМРемонтов.ВидРемонта,
		|	торо_РМРемонтов.ГруппаОбъектовРемонтов,
		|	МАКСИМУМ(торо_РМРемонтов.Период) КАК Период,
		|	торо_РМРемонтов.Сезон
		|ПОМЕСТИТЬ ДатыСреза
		|ИЗ
		|	РСНаборЗаписей КАК торо_РМРемонтов
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_РМРемонтов.ГруппаОбъектовРемонтов,
		|	торо_РМРемонтов.ВидРемонта,
		|	торо_РМРемонтов.Сезон
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РСНаборЗаписей.ГруппаОбъектовРемонтов,
		|	РСНаборЗаписей.ВидРемонта,
		|	РСНаборЗаписей.Сезон,
		|	РСНаборЗаписей.Период,
		|	РСНаборЗаписей.ВероятностьВыходаИзСтроя,
		|	РСНаборЗаписей.Ущерб,
		|	ВЫБОР
		|		КОГДА РСНаборЗаписей.ГруппаОбъектовРемонтов ССЫЛКА Справочник.торо_ТиповыеОР
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ТиповойОР
		|ИЗ
		|	ДатыСреза КАК ДатыСреза
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РСНаборЗаписей КАК РСНаборЗаписей
		|		ПО ДатыСреза.ГруппаОбъектовРемонтов = РСНаборЗаписей.ГруппаОбъектовРемонтов
		|			И ДатыСреза.ВидРемонта = РСНаборЗаписей.ВидРемонта
		|			И ДатыСреза.Сезон = РСНаборЗаписей.Сезон
		|			И ДатыСреза.Период = РСНаборЗаписей.Период";
		
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Запрос.УстановитьПараметр("РСНаборЗаписей", РСНЗТаблицаОценокРМ.Выгрузить());
		
		Результат = Запрос.Выполнить();
		ТаблицаОценокРМ.Загрузить(Результат.Выгрузить());
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПрочитатьОценкиРМ(ОР, ТиповойОР)
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить(ОР);
	СписокОтбора.Добавить(ТиповойОР);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_РМРемонтов.ВидРемонта,
	|	торо_РМРемонтов.ГруппаОбъектовРемонтов,
	|	торо_РМРемонтов.Период,
	|	торо_РМРемонтов.Сезон,
	|	торо_РМРемонтов.ВероятностьВыходаИзСтроя,
	|	торо_РМРемонтов.Ущерб,
	|	ВЫБОР
	|		КОГДА торо_РМРемонтов.ГруппаОбъектовРемонтов ССЫЛКА Справочник.торо_ТиповыеОР
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТиповойОР
	|ИЗ
	|	РегистрСведений.торо_РМРемонтов КАК торо_РМРемонтов
	|ГДЕ
	|	торо_РМРемонтов.ГруппаОбъектовРемонтов В(&СписокОтбора)";
	
	Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивСтруктур = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		СтруктураРМ = Новый Структура("ВидРемонта, ГруппаОбъектовРемонтов, Период, Сезон, ВероятностьВыходаИзСтроя, Ущерб, ТиповойОР");
		ЗаполнитьЗначенияСвойств(СтруктураРМ, Выборка);
		МассивСтруктур.Добавить(СтруктураРМ);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьМаксимальныеЗначенияПоказателейНаработки(ОбъектРемонта, ТиповойОР)
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
		|	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
		|	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
		|	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс,
		|	0 КАК Приоритет,
		|	торо_МаксимальныеЗначенияНаработкиОР.Удален
		|ПОМЕСТИТЬ ВсеПараметры
		|ИЗ
		|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
		|ГДЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ОбъектРемонта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
		|	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
		|	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
		|	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс,
		|	1,
		|	торо_МаксимальныеЗначенияНаработкиОР.Удален
		|ИЗ
		|	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
		|ГДЕ
		|	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &Типовой
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПараметры.ОбъектРемонта,
		|	ВсеПараметры.Показатель,
		|	ВсеПараметры.МаксимальноеЗначение,
		|	ВсеПараметры.НазначенныйРесурс,
		|	ВсеПараметры.Удален
		|ИЗ
		|	ВсеПараметры КАК ВсеПараметры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВсеПараметры.Показатель КАК Показатель,
		|			МИНИМУМ(ВсеПараметры.Приоритет) КАК Приоритет
		|		ИЗ
		|			ВсеПараметры КАК ВсеПараметры
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ВсеПараметры.Показатель) КАК ВложенныйЗапрос
		|		ПО ВсеПараметры.Показатель = ВложенныйЗапрос.Показатель
		|			И ВсеПараметры.Приоритет = ВложенныйЗапрос.Приоритет";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		Запрос.УстановитьПараметр("Типовой", ТиповойОР);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		СтруктураВозврата = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			СтруктураВозврата.Добавить(Новый Структура("ОбъектРемонта, Показатель, МаксимальноеЗначение, НазначенныйРесурс, Удален", 
			Выборка.ОбъектРемонта, Выборка.Показатель, Выборка.МаксимальноеЗначение, Выборка.НазначенныйРесурс, Выборка.Удален));
		КонецЦикла;
		
		Возврат СтруктураВозврата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьНаработку(ОбъектРемонта, ТиповойОР)
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
		|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
		|	торо_ПараметрыНаработкиОбъектовРемонта.Период,
		|	0 КАК Приоритет,
		|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
		|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
		|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
		|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
		|	торо_ПараметрыНаработкиОбъектовРемонта.Основной
		|ПОМЕСТИТЬ ПоказателиОР
		|ИЗ
		|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
		|ГДЕ
		|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаРодителей.Приоритет,
		|	ТаблицаРодителей.Родитель
		|ПОМЕСТИТЬ ТаблицаРодителей
		|ИЗ
		|	&ТаблицаРодителей КАК ТаблицаРодителей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
		|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ТаблицаРодителей.Приоритет
		|ПОМЕСТИТЬ ПоказателиГрупп
		|ИЗ
		|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
		|			,
		|			ОбъектРемонта В
		|					(ВЫБРАТЬ
		|						ТаблицаРодителей.Родитель
		|					ИЗ
		|						ТаблицаРодителей КАК ТаблицаРодителей)
		|				И НЕ Показатель В
		|						(ВЫБРАТЬ
		|							ПоказателиОР.Показатель
		|						ИЗ
		|							ПоказателиОР КАК ПоказателиОР)) КАК торо_ПараметрыНаработкиОбъектовРемонта
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРодителей КАК ТаблицаРодителей
		|		ПО торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = ТаблицаРодителей.Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиГрупп.ОбъектРемонта,
		|	ПоказателиГрупп.Показатель,
		|	ПоказателиГрупп.Период,
		|	ПоказателиГрупп.Приоритет
		|ПОМЕСТИТЬ ПоказателиГруппУникальные
		|ИЗ
		|	ПоказателиГрупп КАК ПоказателиГрупп
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ПоказателиГрупп.Показатель КАК Показатель,
		|			МИНИМУМ(ПоказателиГрупп.Приоритет) КАК Приоритет
		|		ИЗ
		|			ПоказателиГрупп КАК ПоказателиГрупп
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ПоказателиГрупп.Показатель) КАК ВложенныйЗапрос
		|		ПО ПоказателиГрупп.Показатель = ВложенныйЗапрос.Показатель
		|			И ПоказателиГрупп.Приоритет = ВложенныйЗапрос.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПоказательНаработки КАК ПоказательНаработки,
		|	МАКСИМУМ(торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ЗначениеНаработки) КАК ЗначениеНаработки
		|ПОМЕСТИТЬ ГарантийныеРесурсы
		|ИЗ
		|	РегистрСведений.торо_СрокиГарантииОбъектовРемонта КАК торо_СрокиГарантииОбъектовРемонта
		|ГДЕ
		|	торо_СрокиГарантииОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
		|	И торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПроверятьНаработку
		|
		|СГРУППИРОВАТЬ ПО
		|	торо_СрокиГарантииОбъектовРемонта.УсловияГарантии.ПоказательНаработки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПоказательНаработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоказателиОР.ОбъектРемонта,
		|	ПоказателиОР.Показатель,
		|	ПоказателиОР.Период,
		|	ПоказателиОР.Приоритет КАК Приоритет,
		|	ПоказателиОР.ПлановаяНаработка,
		|	ПоказателиОР.ПериодПлановойНаработки,
		|	ПоказателиОР.ПродолжительностьПериодаПлановойНаработки,
		|	ПоказателиОР.КоэффициентИспользованияОборудования,
		|	ЕСТЬNULL(ГарантийныеРесурсы.ЗначениеНаработки, 0) КАК РесурсГарантии,
		|	ПоказателиОР.Основной
		|ИЗ
		|	ПоказателиОР КАК ПоказателиОР
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГарантийныеРесурсы КАК ГарантийныеРесурсы
		|		ПО ПоказателиОР.Показатель = ГарантийныеРесурсы.ПоказательНаработки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоказателиГруппУникальные.ОбъектРемонта,
		|	ПоказателиГруппУникальные.Показатель,
		|	ПоказателиГруппУникальные.Период,
		|	ПоказателиГруппУникальные.Приоритет,
		|	0,
		|	НЕОПРЕДЕЛЕНО,
		|	0,
		|	0,
		|	ЕСТЬNULL(ГарантийныеРесурсы.ЗначениеНаработки, 0),
		|	ЛОЖЬ
		|ИЗ
		|	ПоказателиГруппУникальные КАК ПоказателиГруппУникальные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ГарантийныеРесурсы КАК ГарантийныеРесурсы
		|		ПО ПоказателиГруппУникальные.Показатель = ГарантийныеРесурсы.ПоказательНаработки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Приоритет";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		
		СписокРодителей = ПолучитьСписокРодителейТиповогоОбъекта(ТиповойОР);
		Если ЗначениеЗаполнено(ТиповойОР) Тогда
			СписокРодителей.Вставить(0, ТиповойОР);
		КонецЕсли;
		
		ТаблицаРодителей = Новый ТаблицаЗначений;
		ТаблицаРодителей.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
		ТаблицаРодителей.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
		СчетчикЦикла = СписокРодителей.Количество() - 1;
		
		Пока СчетчикЦикла >= 0 Цикл
			НоваяСтрокаТабл = ТаблицаРодителей.Добавить();
			НоваяСтрокаТабл.Родитель = СписокРодителей[СчетчикЦикла].Значение;
			НоваяСтрокаТабл.Приоритет = СчетчикЦикла + 1;
			СчетчикЦикла = СчетчикЦикла - 1;
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		СтруктураВозврата = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			СтруктураВозврата.Добавить(Новый Структура("ОбъектРемонта, Показатель, Период, ПлановаяНаработка, ПериодПлановойНаработки, ПродолжительностьПериодаПлановойНаработки, КоэффициентИспользованияОборудования, РесурсГарантии, Основной",
			Выборка.ОбъектРемонта, Выборка.Показатель, Выборка.Период, Выборка.ПлановаяНаработка, Выборка.ПериодПлановойНаработки, Выборка.ПродолжительностьПериодаПлановойНаработки, Выборка.КоэффициентИспользованияОборудования, Выборка.РесурсГарантии, Выборка.Основной));
			
		КонецЦикла;
		
		Возврат СтруктураВозврата;
	Иначе 
		Возврат Новый Массив;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Функция проверяет заполнения обязательных реквизитов формы.
//  Параметры:
//  Возвращаемое значение:
//   булево - признак заполнения обязательных реквизитов формы.
Функция ОбязательныеЗначенияЗаполнены()
	Возврат (ЗначениеЗаполнено(Объект.ДатаВыпуска) 
				И (ЗначениеЗаполнено(Объект.ДатаВводаВЭксплуатацию) ИЛИ ФОИспользоватьДокументыЖЦОборудования)
				И ЗначениеЗаполнено(Объект.ПлановыйГрафикРаботы));
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеГрафикаРемРаботНаСервере()
	
	Возврат Константы.торо_ГрафикРемонтныхРабот.Получить();
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьИзмеряемыеПоказатели(ОбъектРемонта, ТиповойОР)
	
	СтруктураВозврата = Новый Массив;
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда 
		
		СписокТиповых = Новый Массив;
		Если ЗначениеЗаполнено(ТиповойОР) Тогда
			СписокТиповых.Добавить(ТиповойОР);
		КонецЕсли;
		
		ТаблицаРодителейТиповых = торо_ОбщегоНазначения.ПолучитьТаблицуРодителейСпискаОбъектов(СписокТиповых, Истина, Тип("СправочникСсылка.торо_ТиповыеОР"));
		ТаблицаРодителейТиповых.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		ТаблицаРодителейТиповых.ЗаполнитьЗначения(ОбъектРемонта, "ОбъектРемонта");
		
		МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРемонта,,Истина,,ТаблицаРодителейТиповых);
		
		Для Каждого СтрокаПоказатель из МассивПоказателей Цикл	
			
			СтруктураСтроки = Новый Структура("ОбъектРемонта, Показатель,
				|ДопустимыйМинимум, ДопустимыйМаксимум, КритическийМинимум, КритическийМаксимум,
				|ЗначенияКонтролируемыхПоказателейИзОР, ИзТиповогоОР,
				|ТочкаЗамера,ТиповойОР,Удален, Доступность",
				СтрокаПоказатель.ОбъектРемонта, СтрокаПоказатель.Показатель,
				СтрокаПоказатель.ДопустимыйМинимум, СтрокаПоказатель.ДопустимыйМаксимум, СтрокаПоказатель.КритическийМинимум, СтрокаПоказатель.КритическийМаксимум,
				СтрокаПоказатель.ЗначенияКонтролируемыхПоказателейИзОР, СтрокаПоказатель.ИзТиповогоОР,
				СтрокаПоказатель.ТочкаЗамера,СтрокаПоказатель.ТиповойОР,СтрокаПоказатель.Удален, Истина);
				
			Если НЕ ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
				СтруктураСтроки.ДопустимыйМаксимум = 0;
			КонецЕсли;
			Если НЕ ТипЗнч(СтруктураСтроки.КритическийМинимум) = Тип("Число") Тогда
				СтруктураСтроки.КритическийМинимум = 0;
			КонецЕсли;
			Если НЕ ТипЗнч(СтруктураСтроки.КритическийМаксимум) = Тип("Число") Тогда
				СтруктураСтроки.КритическийМаксимум = 0;
			КонецЕсли;
			Если НЕ ТипЗнч(СтруктураСтроки.ДопустимыйМаксимум) = Тип("Число") Тогда
				СтруктураСтроки.ДопустимыйМаксимум = 0;
			КонецЕсли;
			
			СтруктураСтроки.Доступность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураСтроки.Показатель, "ТипЗначения").СодержитТип(Тип("Число"));
			
			СтруктураВозврата.Добавить(СтруктураСтроки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(ОбъектРемонта, ТиповойОР)
	МассивВозврата = Новый Массив;
	Если ЗначениеЗаполнено(ОбъектРемонта) ИЛИ ЗначениеЗаполнено(ТиповойОР) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ОбъектРемонта,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.Показатель,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР,
		|	1 КАК Приоритет,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.Значение,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.СобытиеВозникновенияОповещения,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ВидСравнения,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ID,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.Значение1,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения1,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ПараметрыВводаДефекта
		|ПОМЕСТИТЬ ТабИсточников
		|ИЗ
		|	РегистрСведений.торо_ПараметрыОповещенияОСостоянииОборудования КАК торо_ПараметрыОповещенияОСостоянииОборудования
		|ГДЕ
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ОбъектРемонта = &ОбъектРемонта
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ОбъектРемонта,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.Показатель,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР,
		|	0,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.Значение,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.СобытиеВозникновенияОповещения,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ВидСравнения,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ID,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.Значение1,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ВариантЗначения1,
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ПараметрыВводаДефекта
		|ИЗ
		|	РегистрСведений.торо_ПараметрыОповещенияОСостоянииОборудования КАК торо_ПараметрыОповещенияОСостоянииОборудования
		|ГДЕ
		|	торо_ПараметрыОповещенияОСостоянииОборудования.ТиповойОР = &ТиповойОР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ТабПриоритетов.Приоритет) КАК Приоритет,
		|	ТабПриоритетов.Показатель
		|ПОМЕСТИТЬ ТабПриоритетов
		|ИЗ
		|	ТабИсточников КАК ТабПриоритетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабПриоритетов.Показатель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабИсточников.ОбъектРемонта,
		|	ТабИсточников.Показатель,
		|	ТабИсточников.ТиповойОР,
		|	ТабИсточников.ВариантЗначения,
		|	ТабИсточников.Значение,
		|	ТабИсточников.СобытиеВозникновенияОповещения,
		|	ТабИсточников.ВидСравнения,
		|	ТабИсточников.ID,
		|	ТабИсточников.Значение1,
		|	ТабИсточников.ВариантЗначения1,
		|	ТабИсточников.ПараметрыВводаДефекта
		|ИЗ
		|	ТабИсточников КАК ТабИсточников
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабПриоритетов КАК ТабПриоритетов
		|		ПО ТабИсточников.Показатель = ТабПриоритетов.Показатель
		|			И ТабИсточников.Приоритет = ТабПриоритетов.Приоритет";
		Запрос.УстановитьПараметр("ОбъектРемонта",ОбъектРемонта);
		Запрос.УстановитьПараметр("ТиповойОР",?(ЗначениеЗаполнено(ТиповойОР),ТиповойОР,NULL));
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				МассивВозврата.Добавить(
				Новый Структура("ОбъектРемонта,Показатель,ТиповойОР,ВариантЗначения,Значение,СобытиеВозникновенияОповещения,ВидСравнения,ID,Значение1,ВариантЗначения1,ПараметрыВводаДефекта",
				Выборка.ОбъектРемонта,Выборка.Показатель,Выборка.ТиповойОР,Выборка.ВариантЗначения,Выборка.Значение,Выборка.СобытиеВозникновенияОповещения,Выборка.ВидСравнения,Выборка.ID,Выборка.Значение1,Выборка.ВариантЗначения1,Выборка.ПараметрыВводаДефекта));
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат МассивВозврата;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияКонтролируемыхПоказателей(ИзмеряемыйПоказатель,ОР,НеУчитыватьОР = Ложь)
	СтруктураЗначенийПолей = Новый Структура();
	МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОР,ИзмеряемыйПоказатель,Истина, НеУчитыватьОР);
	Если МассивПоказателей.Количество() > 0 Тогда
		СтрокаПоказателя = МассивПоказателей[0];
		СтруктураЗначенийПолей.Вставить("ДопустимыйМинимум", 	СтрокаПоказателя.ДопустимыйМинимум);
		СтруктураЗначенийПолей.Вставить("ДопустимыйМаксимум",	СтрокаПоказателя.ДопустимыйМаксимум);
		СтруктураЗначенийПолей.Вставить("КритическийМинимум",	СтрокаПоказателя.КритическийМинимум);
		СтруктураЗначенийПолей.Вставить("КритическийМаксимум",	СтрокаПоказателя.КритическийМаксимум);
		СтруктураЗначенийПолей.Вставить("ЗначенияКонтролируемыхПоказателейИзОР",СтрокаПоказателя.ЗначенияКонтролируемыхПоказателейИзОР);
		СтруктураЗначенийПолей.Вставить("ИзТиповогоОР",СтрокаПоказателя.ИзТиповогоОР);
	ИначеЕсли НеУчитыватьОР Тогда
		СтруктураЗначенийПолей.Вставить("ДопустимыйМинимум", 	ИзмеряемыйПоказатель.ДопустимыйМинимум);
		СтруктураЗначенийПолей.Вставить("ДопустимыйМаксимум",	ИзмеряемыйПоказатель.ДопустимыйМаксимум);
		СтруктураЗначенийПолей.Вставить("КритическийМинимум",	ИзмеряемыйПоказатель.КритическийМинимум);
		СтруктураЗначенийПолей.Вставить("КритическийМаксимум",	ИзмеряемыйПоказатель.КритическийМаксимум);
		СтруктураЗначенийПолей.Вставить("ЗначенияКонтролируемыхПоказателейИзОР",Ложь);
		СтруктураЗначенийПолей.Вставить("ИзТиповогоОР",Ложь);
	КонецЕсли;
	
	Если ИзмеряемыйПоказатель.ТипЗначения.СодержитТип(Тип("Число")) Тогда
		Если НЕ ТипЗнч(СтруктураЗначенийПолей.ДопустимыйМаксимум) = Тип("Число") Тогда
			СтруктураЗначенийПолей.ДопустимыйМаксимум = 0;
		КонецЕсли;
		Если НЕ ТипЗнч(СтруктураЗначенийПолей.КритическийМинимум) = Тип("Число") Тогда
			СтруктураЗначенийПолей.КритическийМинимум = 0;
		КонецЕсли;
		Если НЕ ТипЗнч(СтруктураЗначенийПолей.КритическийМаксимум) = Тип("Число") Тогда
			СтруктураЗначенийПолей.КритическийМаксимум = 0;
		КонецЕсли;
		Если НЕ ТипЗнч(СтруктураЗначенийПолей.ДопустимыйМинимум) = Тип("Число") Тогда
			СтруктураЗначенийПолей.ДопустимыйМинимум = 0;
		КонецЕсли;
	КонецЕсли;

	Возврат СтруктураЗначенийПолей;
КонецФункции

&НаКлиенте
Процедура ВводЗначенияКонтрПоказателейЗавершение3(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьОбъектНаСервере();
		ВводЗначенияКонтрПоказателейФрагмент2();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводЗначенияКонтрПоказателейФрагмент2()
	
	ТекДанные = Элементы.СписокИзмеряемыхПоказателей.ТекущиеДанные;
	Если ТекДанные = Неопределено ИЛИ ПоказательУдаленНаСервере(Объект.Ссылка,ТекДанные.Показатель) ИЛИ Не ПроверитьСтатусНаСервере("торо_УчетКонтролируемыхПоказателей") Тогда
		Возврат;
	КонецЕсли;
	
	стрПараметры = Новый Структура("Основание, Организация, Подразделение", Объект.Ссылка);
	ОткрытьФорму("Документ.торо_УчетКонтролируемыхПоказателей.ФормаОбъекта", стрПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоказательУдаленНаСервере(ОР,Показатель)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта
	               |ИЗ
	               |	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	               |ГДЕ
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	               |	И торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = &Показатель
	               |	И торо_ИзмеряемыеПоказателиОбъектовРемонта.Удален";
	Запрос.УстановитьПараметр("ОбъектРемонта",ОР);
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗаписатьОбъектНаСервере()
	
	Объект.ДатаВводаВЭксплуатацию = ДатаВводаВЭксплуатацию;
	ЭтаФорма.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПредшествующиеРемонтыНаСервере(ОбъектРемонта)
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
		|	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта,
		|	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР
		|ИЗ
		|	РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
		|ГДЕ
		|	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		СтруктураВозврата = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			СтруктураВозврата.Добавить(Новый Структура("ВидРемонта, ТиповойОР, ПредшествующийВидРемонта",
			Выборка.ВидРемонта, Выборка.ТиповойОР, Выборка.ПредшествующийВидРемонта));
			
		КонецЦикла;
		
		Возврат СтруктураВозврата;
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;		
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьЗамещаемыеРемонтыНаСервере(ОбъектРемонта)
	
	Если ЗначениеЗаполнено(ОбъектРемонта) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница
		|ИЗ
		|	РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
		|ГДЕ
		|	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		СтруктураВозврата = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			СтруктураВозврата.Добавить(Новый Структура("ВидРемонта, ТиповойОР, ЗамещаемыйВидРемонта,
			|СпособЗамещения, НачальнаяГраница, КонечнаяГраница",
			Выборка.ВидРемонта, Выборка.ТиповойОР, Выборка.ЗамещаемыйВидРемонта, 
			Выборка.СпособЗамещения, Выборка.НачальнаяГраница, Выборка.КонечнаяГраница));
			
		КонецЦикла;
		
		Возврат СтруктураВозврата;
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредшествующиеРемонтыНаСервере(НовТиповойОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта,
	|	торо_ТиповыеОРНормативныеРемонты.Ссылка
	|ПОМЕСТИТЬ ДействующиеВР
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|ГДЕ
	|	торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
	|	И торо_ТиповыеОРНормативныеРемонты.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТиповыеОРПредшествующиеРемонты.ВидРемонта,
	|	торо_ТиповыеОРПредшествующиеРемонты.ПредшествующийВидРемонта,
	|	торо_ТиповыеОРПредшествующиеРемонты.Ссылка КАК ТиповойОР
	|ИЗ
	|	ДействующиеВР КАК торо_ТиповыеОРНормативныеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР.ПредшествующиеРемонты КАК торо_ТиповыеОРПредшествующиеРемонты
	|		ПО торо_ТиповыеОРНормативныеРемонты.Ссылка = торо_ТиповыеОРПредшествующиеРемонты.Ссылка
	|			И торо_ТиповыеОРНормативныеРемонты.ВидРемонта = торо_ТиповыеОРПредшествующиеРемонты.ВидРемонта
	|			И (торо_ТиповыеОРПредшествующиеРемонты.ПредшествующийВидРемонта В
	|				(ВЫБРАТЬ
	|					ДействующиеВР.ВидРемонта
	|				ИЗ
	|					ДействующиеВР КАК ДействующиеВР))";
	
	Запрос.УстановитьПараметр("Ссылка", НовТиповойОР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата.Добавить(Новый Структура("ВидРемонта, ТиповойОР, ПредшествующийВидРемонта",
		Выборка.ВидРемонта, Выборка.ТиповойОР, Выборка.ПредшествующийВидРемонта));
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗамещаемыеРемонтыНаСервере(НовТиповойОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта,
	|	торо_ТиповыеОРНормативныеРемонты.Ссылка
	|ПОМЕСТИТЬ ДействующиеВР
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|ГДЕ
	|	торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
	|	И торо_ТиповыеОРНормативныеРемонты.Статус = ЗНАЧЕНИЕ(Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТиповыеОРЗамещаемыеРемонты.Ссылка КАК ТиповойОР,
	|	торо_ТиповыеОРЗамещаемыеРемонты.ВидРемонта,
	|	торо_ТиповыеОРЗамещаемыеРемонты.ЗамещаемыйВидРемонта,
	|	торо_ТиповыеОРЗамещаемыеРемонты.СпособЗамещения,
	|	торо_ТиповыеОРЗамещаемыеРемонты.НачальнаяГраница,
	|	торо_ТиповыеОРЗамещаемыеРемонты.КонечнаяГраница
	|ИЗ
	|	ДействующиеВР КАК торо_ТиповыеОРНормативныеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР.ЗамещаемыеРемонты КАК торо_ТиповыеОРЗамещаемыеРемонты
	|		ПО торо_ТиповыеОРНормативныеРемонты.Ссылка = торо_ТиповыеОРЗамещаемыеРемонты.Ссылка
	|			И торо_ТиповыеОРНормативныеРемонты.ВидРемонта = торо_ТиповыеОРЗамещаемыеРемонты.ВидРемонта
	|			И (торо_ТиповыеОРЗамещаемыеРемонты.ЗамещаемыйВидРемонта В
	|				(ВЫБРАТЬ
	|					ДействующиеВР.ВидРемонта
	|				ИЗ
	|					ДействующиеВР КАК ДействующиеВР))";
	
	Запрос.УстановитьПараметр("Ссылка", НовТиповойОР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СтруктураВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		СтруктураВозврата.Добавить(Новый Структура("ВидРемонта, ТиповойОР, ЗамещаемыйВидРемонта,
		|СпособЗамещения, НачальнаяГраница, КонечнаяГраница",
		Выборка.ВидРемонта, Выборка.ТиповойОР, Выборка.ЗамещаемыйВидРемонта,
		Выборка.СпособЗамещения, Выборка.НачальнаяГраница, Выборка.КонечнаяГраница));
		
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ИзменитьПредшествующиеРемонтыНаСервере(ОбъектРемонта, ТекТиповойОР, НовТиповойОР)
	
	НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(ТекТиповойОР);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ТиповыеОРПредшествующиеРемонты.ВидРемонта КАК ВидРемонта,
	|	торо_ТиповыеОРПредшествующиеРемонты.ПредшествующийВидРемонта
	|ПОМЕСТИТЬ ВТ_ПредшествующиеРемонты
	|ИЗ
	|	Справочник.торо_ТиповыеОР.ПредшествующиеРемонты КАК торо_ТиповыеОРПредшествующиеРемонты
	|ГДЕ
	|	торо_ТиповыеОРПредшествующиеРемонты.Ссылка = &ТиповойОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта КАК ВидРемонта
	|ПОМЕСТИТЬ ВТ_ВидРемонта_Действует
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|ГДЕ
	|	торо_ТиповыеОРНормативныеРемонты.Статус = &СтатусДействует
	|	И торо_ТиповыеОРНормативныеРемонты.Ссылка = &ТиповойОР
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПредшествующиеРемонты.ВидРемонта,
	|	ВТ_ПредшествующиеРемонты.ПредшествующийВидРемонта
	|ИЗ
	|	ВТ_ПредшествующиеРемонты КАК ВТ_ПредшествующиеРемонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидРемонта_Действует КАК ВТ_ВидРемонта_Действует
	|		ПО ВТ_ПредшествующиеРемонты.ВидРемонта = ВТ_ВидРемонта_Действует.ВидРемонта";
	
	Запрос.УстановитьПараметр("ТиповойОР", НовТиповойОР);
	Запрос.УстановитьПараметр("СтатусДействует", Перечисления.торо_СтатусыНормативныхРемонтовИТехКарт.Действует);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(НовТиповойОР);
	НаборЗаписей.Прочитать();
	
	Пока Выборка.Следующий() Цикл
		
		НС = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);
		НС.ОбъектРемонта = ОбъектРемонта;
		НС.ТиповойОР = НовТиповойОР;
		НС.Приоритет = Истина;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИзменитьЗамещаемыеРемонтыНаСервере(ОбъектРемонта, ТекТиповойОР, НовТиповойОР)
	
	НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(ТекТиповойОР);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ТиповыеОРЗамещаемыеРемонты.ВидРемонта,
	|	торо_ТиповыеОРЗамещаемыеРемонты.ЗамещаемыйВидРемонта,
	|	торо_ТиповыеОРЗамещаемыеРемонты.СпособЗамещения,
	|	торо_ТиповыеОРЗамещаемыеРемонты.НачальнаяГраница,
	|	торо_ТиповыеОРЗамещаемыеРемонты.КонечнаяГраница
	|ИЗ
	|	Справочник.торо_ТиповыеОР.ЗамещаемыеРемонты КАК торо_ТиповыеОРЗамещаемыеРемонты
	|ГДЕ
	|	торо_ТиповыеОРЗамещаемыеРемонты.Ссылка = &ТиповойОР";
	
	Запрос.УстановитьПараметр("ТиповойОР", НовТиповойОР);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	НаборЗаписей = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ОбъектРемонта.Установить(ОбъектРемонта);
	НаборЗаписей.Отбор.ТиповойОР.Установить(НовТиповойОР);
	НаборЗаписей.Прочитать();
	
	Пока Выборка.Следующий() Цикл
		
		НС = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Выборка);
		НС.ОбъектРемонта = ОбъектРемонта;
		НС.ТиповойОР = НовТиповойОР;
		НС.Приоритет = Истина;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьТабЗапчастейОбъектовРемонта(Ссылка)
	
	СтруктураДанных = Новый Структура();
	
	Если НЕ Ссылка.Пустая() Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_Запчасти.ОбъектРемонта,
		               |	торо_Запчасти.Номенклатура,
		               |	торо_Запчасти.Качество,
		               |	торо_Запчасти.Характеристика,
		               |	торо_Запчасти.ТиповойОР,
		               |	торо_Запчасти.Количество,
		               |	ВЫБОР
		               |		КОГДА торо_Запчасти.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА торо_ЗапчастиУдаленные.ОбъектРемонта ЕСТЬ NULL 
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ИЗ
		               |	РегистрСведений.торо_Запчасти КАК торо_Запчасти
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗапчастиУдаленные КАК торо_ЗапчастиУдаленные
		               |		ПО торо_Запчасти.ОбъектРемонта = торо_ЗапчастиУдаленные.ОбъектРемонта
		               |			И торо_Запчасти.Номенклатура = торо_ЗапчастиУдаленные.Номенклатура
		               |			И торо_Запчасти.Характеристика = торо_ЗапчастиУдаленные.Характеристика
		               |			И торо_Запчасти.ТиповойОР = торо_ЗапчастиУдаленные.ТиповойОР
		               |ГДЕ
		               |	торо_Запчасти.ОбъектРемонта = &ОбъектРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ВидРемонта,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Количество,
		               |	торо_НормыЗапчастейНаОбъектыРемонта.Характеристика,
		               |	ВЫБОР
		               |		КОГДА торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = ЗНАЧЕНИЕ(Справочник.торо_ТиповыеОР.ПустаяСсылка)
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК ИзТипового,
		               |	ВЫБОР
		               |		КОГДА торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта ЕСТЬ NULL 
		               |			ТОГДА ЛОЖЬ
		               |		ИНАЧЕ ИСТИНА
		               |	КОНЕЦ КАК Удален
		               |ИЗ
		               |	РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонта КАК торо_НормыЗапчастейНаОбъектыРемонта
		               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормыЗапчастейНаОбъектыРемонтаУдаленные КАК торо_НормыЗапчастейНаОбъектыРемонтаУдаленные
		               |		ПО торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ОбъектРемонта
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.Номенклатура = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Номенклатура
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.Характеристика = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.Характеристика
		               |			И торо_НормыЗапчастейНаОбъектыРемонта.ТиповойОР = торо_НормыЗапчастейНаОбъектыРемонтаУдаленные.ТиповойОР
		               |ГДЕ
		               |	торо_НормыЗапчастейНаОбъектыРемонта.ОбъектРемонта = &ОбъектРемонта";
		
		Запрос.УстановитьПараметр("ОбъектРемонта", Ссылка);
		
		МассивРезультатов = Запрос.ВыполнитьПакет();
		
		МассивНормЗапчастей = Новый Массив;
		
		Если НЕ МассивРезультатов[0].Пустой() Тогда
			
			МассивЗапчастей = Новый Массив;
			Выборка = МассивРезультатов[0].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				МассивЗапчастей.Добавить(Новый Структура("ОбъектРемонта,Номенклатура,Качество,Характеристика,Количество,ТиповойОР,Удален,ИзТипового",
				Выборка.ОбъектРемонта,Выборка.Номенклатура,Выборка.Качество,Выборка.Характеристика,Выборка.Количество,Выборка.ТиповойОР,Выборка.Удален,Выборка.ИзТипового));
				
			КонецЦикла;
			
			СтруктураДанных.Вставить("Запчасти",МассивЗапчастей);
			
		КонецЕсли;
		
		Если НЕ МассивРезультатов[1].Пустой() Тогда
			
			МассивНормЗапчастей = Новый Массив;
			
			Выборка = МассивРезультатов[1].Выбрать();
			Пока Выборка.Следующий() Цикл
				
				МассивНормЗапчастей.Добавить(Новый Структура("ОбъектРемонта,Номенклатура,ВидРемонта,Количество,ТиповойОР,ИзТипового, Удален, Характеристика",
				Выборка.ОбъектРемонта,Выборка.Номенклатура,Выборка.ВидРемонта,Выборка.Количество,Выборка.ТиповойОР,Выборка.ИзТипового, Выборка.Удален, Выборка.Характеристика));
				
			КонецЦикла;
			
			СтруктураДанных.Вставить("НормаЗапчастей",МассивНормЗапчастей);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьИсториюЗапчастейОРНаСервере(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ИсторияЗапчастейОбъектаРемонта.Регистратор КАК Ремонт,
	|	торо_ИсторияЗапчастейОбъектаРемонта.ОбъектРемонта,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Запчасть,
	|	торо_ИсторияЗапчастейОбъектаРемонта.СерийныйНомер,
	|	торо_ИсторияЗапчастейОбъектаРемонта.СтатусДвиженияЗЧ,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Количество,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Установлена,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Запчасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	торо_ИсторияЗапчастейОбъектаРемонта.Период КАК ДатаЗамены
	|ИЗ
	|	РегистрСведений.торо_ИсторияЗапчастейОбъектаРемонта КАК торо_ИсторияЗапчастейОбъектаРемонта
	|ГДЕ
	|	торо_ИсторияЗапчастейОбъектаРемонта.ОбъектРемонта = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивВозврата = Новый Массив;
	
	Пока Выборка.Следующий() Цикл
		
		МассивВозврата.Добавить(Новый Структура("Ремонт,ОбъектРемонта,Запчасть,СерийныйНомер,СтатусДвиженияЗЧ,Количество,Установлена,ЕдиницаИзмерения,ДатаЗамены",
		Выборка.Ремонт,Выборка.ОбъектРемонта,Выборка.Запчасть,Выборка.СерийныйНомер,Выборка.СтатусДвиженияЗЧ,Выборка.Количество,Выборка.Установлена,Выборка.ЕдиницаИзмерения,Выборка.ДатаЗамены));
		
	КонецЦикла;
	
	Возврат МассивВозврата;
	
КонецФункции

&НаКлиенте
Процедура УдалитьСвязанныеСтрокиПоЗапчастям(Запчасть, Характеристика)
	
	СтрокиНормативов = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика, ИзТипового",
		Запчасть, Характеристика, Ложь));
	
	Для Каждого Стр Из СтрокиНормативов Цикл
		ТабЗатратПоВидамРемонта.Удалить(Стр);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПоследовательностьРемонтовНаСервере(Цепочка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НомерСтроки,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НормативныйРемонт,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособПланирования,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ГрафикРемонтныхРабот,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.СпособВыполнения,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.НеУчитыватьПродолжительность
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Цепочка);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	МассивРемонтов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		Структ = Новый Структура("НомерСтроки, ВидРемонта, НормативныйРемонт, СпособПланирования, ГрафикРемонтныхРабот, СпособВыполнения, 
		|РазрешитьСокращатьМежремонтныйПериодПриПланировании, НеУчитыватьПриПланированииГрафикРаботыОборудования, НеУчитыватьПриПланированииГрафикРемонтныхРабот, НеУчитыватьПродолжительность");
		
		ЗаполнитьЗначенияСвойств(Структ, Выборка);
		
		МассивРемонтов.Добавить(Структ);
		
	КонецЦикла;
	
	Возврат МассивРемонтов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбновитьФиксированныеРемонтныеЦиклы(Ссылка, МодифицированностьРемЦиклов, ТолькоОР = Истина, ТолькоТиповыеОР = Истина)
	
	МассивЦепочек = Новый Массив;
	Если ЗначениеЗаполнено(Ссылка) И Не МодифицированностьРемЦиклов Тогда 
		
		СписокОтбора = Новый СписокЗначений;
		Если ТолькоОР Тогда 
			СписокОтбора.Добавить(Ссылка);
		КонецЕсли;
		Если ТолькоТиповыеОР Тогда
			СписокОтбора.Добавить(Ссылка.ТиповойОР);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РемонтныеЦиклыОборудования.ВидЦепочки,
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов,
		|	торо_РемонтныеЦиклыОборудования.НеУчитыватьПростоиОборудования
		|ИЗ
		|	РегистрСведений.торо_РемонтныеЦиклыОборудования КАК торо_РемонтныеЦиклыОборудования
		|ГДЕ
		|	торо_РемонтныеЦиклыОборудования.ГруппаОбъектовРемонтов В(&СписокОтбора)";
		
		Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
		
		Результат = Запрос.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		МассивЦепочек = Новый Массив;
		Пока Выборка.Следующий() Цикл
			
			Структ = Новый Структура("ВидЦепочки, ГруппаОбъектовРемонтов, НеУчитыватьПростоиОборудования, ТиповойОР");
			ЗаполнитьЗначенияСвойств(Структ, Выборка);
			Структ.ТиповойОР = ?(ТипЗнч(Выборка.ГруппаОбъектовРемонтов) = Тип("СправочникСсылка.торо_ТиповыеОР"), Истина, Ложь);
			МассивЦепочек.Добавить(Структ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЦепочек;
	
КонецФункции

&НаСервере
Процедура СортироватьПоВозрастаниюНаСервере()
	
	ТаблЦиклов = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить();
	ТаблЦиклов.Сортировать("ВидЦепочки Возр");
	ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(ТаблЦиклов);
	
КонецПроцедуры

&НаСервере
Процедура СортироватьПоУбываниюНаСервере()
	
	ТаблЦиклов = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить();
	ТаблЦиклов.Сортировать("ВидЦепочки Убыв");
	ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(ТаблЦиклов);
	
КонецПроцедуры

&НаСервере
Процедура НаложитьОтборНаРемЦиклы(ТолькоОР, ТолькоТиповыеОР)
	
	Если ТолькоОР и ТолькоТиповыеОР Тогда
		
		ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(РемЦиклыОборудования.Выгрузить());
		
	ИначеЕсли ТолькоОР Тогда
		
		ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(РемЦиклыОборудования.Выгрузить(Новый Структура("ТиповойОР", Ложь)));
		
	ИначеЕсли ТолькоТиповыеОР Тогда
		
		ТабличноеПолеРемонтныеЦиклыОборудования.Загрузить(РемЦиклыОборудования.Выгрузить(Новый Структура("ТиповойОР", Истина)));
		
	Иначе
		
		ТабличноеПолеРемонтныеЦиклыОборудования.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПересеченияНаСервере(ТекЦепочка)
	
	СтандартнаяОбработка = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	|ПОМЕСТИТЬ Ремонты
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка В(&МассивСсылок)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	|ПОМЕСТИТЬ РемонтыНовые
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ремонты.ВидРемонта КАК ВидРемонтаСтарый,
	|	РемонтыНовые.ВидРемонта КАК ВидРемонтаНовый,
	|	Ремонты.Ссылка
	|ИЗ
	|	Ремонты КАК Ремонты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РемонтыНовые КАК РемонтыНовые
	|		ПО Ремонты.ВидРемонта = РемонтыНовые.ВидРемонта";
	
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	
	МассивЦепочек = ТабличноеПолеРемонтныеЦиклыОборудования.Выгрузить().ВыгрузитьКолонку("ВидЦепочки");
	ИндексТекЦепочки = МассивЦепочек.Найти(ТекЦепочка);
	Если ИндексТекЦепочки <> Неопределено Тогда
		МассивЦепочек.Удалить(ИндексТекЦепочки);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивЦепочек);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	флДобавлятьЦепочку = Истина;
	Пока Выборка.Следующий() Цикл
		Если Выборка.Ссылка <> ТекЦепочка Тогда
			флДобавлятьЦепочку = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НЕ флДобавлятьЦепочку Тогда
		СтандартнаяОбработка = Ложь;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Цепочку ""%1"" нельзя добавить в список фиксированных ремонтных циклов, так как она содержит виды ремонтов, входящие в другие выбранные цепочки.'"),ТекЦепочка));
	КонецЕсли;
	
	Если НормативныеРемонты.Количество() = 0 Тогда 
		
		СтруктураВозврата = ЗаполнитьНормативныеРемонтыНаСервере(Объект.Ссылка);
		
		НормативныеРемонты.Очистить();
		Для каждого Элем Из СтруктураВозврата Цикл
			НС = НормативныеРемонты.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	МассивРемонтов = НормативныеРемонты.Выгрузить().ВыгрузитьКолонку("ВидРемонта");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта,
	|	торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка
	|ИЗ
	|	Справочник.торо_ЦепочкиРемонта.ПоследовательностьРемонтов КАК торо_ЦепочкиРемонтаПоследовательностьРемонтов
	|ГДЕ
	|   торо_ЦепочкиРемонтаПоследовательностьРемонтов.ВидРемонта В (&МассивРемонтов)
	|	И торо_ЦепочкиРемонтаПоследовательностьРемонтов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("МассивРемонтов", МассивРемонтов);
	Запрос.УстановитьПараметр("Ссылка", ТекЦепочка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СтандартнаяОбработка = Ложь;
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вид ремонта ""%1"" из цепочки ""%2"" уже выбран в качестве нормативного ремонта!'"),Выборка.ВидРемонта,Выборка.Ссылка));
	КонецЦикла;
	
	Возврат СтандартнаяОбработка;
	
КонецФункции


&НаСервереБезКонтекста
Функция ПолучитьМассивДокументовНаработки(Ссылка)
	
	Массив = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_НаработкаОбъектовРемонта.Период КАК Период,
	               |	торо_НаработкаОбъектовРемонта.Регистратор,
	               |	торо_НаработкаОбъектовРемонта.Показатель,
				   |	торо_НаработкаОбъектовРемонта.Наработка КАК Наработка,
	               |	торо_НаработкаОбъектовРемонта.ДатаНач,
	               |	торо_НаработкаОбъектовРемонта.ВидДвижения,
	               |	ВЫБОР
	               |		КОГДА торо_НаработкаОбъектовРемонта.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	               |			ТОГДА 28
	               |		ИНАЧЕ 29
	               |	КОНЕЦ КАК Картинка
	               |ИЗ
	               |	РегистрНакопления.торо_НаработкаОбъектовРемонта КАК торо_НаработкаОбъектовРемонта
	               |ГДЕ
	               |	торо_НаработкаОбъектовРемонта.ОбъектРемонта = &ОбъектРемонта
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";
				   
	Запрос.УстановитьПараметр("ОбъектРемонта", Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Структура = Новый Структура("Период, Регистратор, Показатель, Наработка, ВидДвижения, Картинка");
			ЗаполнитьЗначенияСвойств(Структура, Выборка);
			Массив.Добавить(Структура);	
		КонецЦикла; 
	КонецЕсли; 
	
	Возврат Массив;
	
КонецФункции

&НаКлиенте
Процедура ВводНаработкиВопросЗаписать(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьОбъектНаСервере();
		ВводНаработкиФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНаработкиФрагмент()
	
	Если Не ПроверитьСтатусНаСервере("торо_УчетНаработкиОборудования") Тогда
		Возврат;
	КонецЕсли;

	
	Если НЕ Элементы.СписокПараметровНаработки.ТекущиеДанные = Неопределено Тогда 
		
		ПараметрыФормы = Новый Структура("ОбъектРемонта, Показатель, Иерархия", Объект.Ссылка,Элементы.СписокПараметровНаработки.ТекущиеДанные.Показатель, ТекСтруктураИерархии);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВводаДокументаНаработки", ЭтаФорма);
		
		ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.ФормаОбъекта",ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения);
				
	Иначе
		Попытка
			СписокОтбора = Новый СписокЗначений();
			
			Для каждого Строка Из СписокПараметровНаработки Цикл
				
				СписокОтбора.Добавить(Строка.Показатель);
				
			КонецЦикла;			
			
			ПараметрыФормыСтруктура = Новый Структура("КлючНазначенияИспользования, СписокПараметровНаработки, ЗакрыватьПриВыборе, ВидСравнения", "ОбъектыРемонта", СписокОтбора, Истина, ВидСравненияКомпоновкиДанных.ВСписке);
			
			ФормаВыбораПоказателя = ПолучитьФорму("Справочник.ПараметрыВыработкиОС.Форма.ФормаВыбора", ПараметрыФормыСтруктура, ЭтаФорма, Объект.Ссылка);
		Исключение
			ПоказатьПредупреждение(Неопределено, ИнформацияОбОшибке().Причина.Описание);
			Возврат;
		КонецПопытки;
		
		ФормаВыбораПоказателя.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ФормаВыбораПоказателя.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ВводНаработкиЗавершение",ЭтотОбъект);
		ФормаВыбораПоказателя.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНаработкиЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
    Показатель           = РезультатЗакрытия;
	
	Если НЕ Показатель = Неопределено Тогда
		ПараметрыФормы = Новый Структура("ОбъектРемонта, Показатель", Объект.Ссылка, Показатель);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаВводаДокументаНаработки", ЭтаФорма);
		
		ОткрытьФорму("Документ.торо_УчетНаработкиОборудования.ФормаОбъекта",ПараметрыФормы,ЭтаФорма,,,,ОписаниеОповещения);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВводаДокументаНаработки(Результат, ДопПараметры) Экспорт
	ОбновитьЖурналНаработки(Истина);	
КонецПроцедуры


&НаСервере
Функция ПроверитьСтатусНаСервере(ВидСоздаваемогоДокумента)
	
	Если Не ФОИспользоватьДокументыЖЦОборудования Тогда
		Возврат Истина;
	КонецЕсли; 	
	
	ТекущийСтатусОР = РегистрыСведений.торо_СтатусыОбъектовРемонтаВУчете.ПолучитьТекущийСтатусОР(Объект.Ссылка);
	
	ДоступныеЗначения = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоступныеЗначения.Добавить(Выборка.СтатусОРВУчете);
	КонецЦикла;
	
	Если ВидСоздаваемогоДокумента = "торо_УчетНаработкиОборудования"
		ИЛИ ВидСоздаваемогоДокумента = "торо_СостоянияОбъектовРемонта" Тогда
		
		Если ТекущийСтатусОР <> Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету
			И Не ДоступныеЗначения.НайтиПоЗначению(ТекущийСтатусОР) = Неопределено Тогда
			Возврат Истина;
		Иначе
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В статусе <%1> создание документа недоступно.'"),ТекущийСтатусОР));
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли ВидСоздаваемогоДокумента = "торо_УчетКонтролируемыхПоказателей" Тогда 
		
		Если Не ДоступныеЗначения.НайтиПоЗначению(ТекущийСтатусОР) = Неопределено Тогда
			Возврат Истина;
		Иначе
			
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В статусе <%1> создание документа недоступно.'"),ТекущийСтатусОР));
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоказателяТипового(Показатель,Типовой)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК ТиповойОР,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМинимум
	               |	КОНЕЦ КАК ДопустимыйМинимум,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.ДопустимыйМаксимум
	               |	КОНЕЦ КАК ДопустимыйМаксимум,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.КритическийМинимум
	               |	КОНЕЦ КАК КритическийМинимум,
	               |	ВЫБОР
	               |		КОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР
	               |			ТОГДА торо_ИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум
	               |		ИНАЧЕ торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.КритическийМаксимум
	               |	КОНЕЦ КАК КритическийМаксимум,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ЗначенияКонтролируемыхПоказателейИзОР,
	               |	торо_ИзмеряемыеПоказателиОбъектовРемонта.ТочкаЗамера
	               |ИЗ
	               |	РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ПВХИзмеряемыеПоказателиОбъектовРемонта
	               |		ПО торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = торо_ПВХИзмеряемыеПоказателиОбъектовРемонта.Ссылка
	               |ГДЕ
	               |	(ВЫРАЗИТЬ(торо_ИзмеряемыеПоказателиОбъектовРемонта.ОбъектРемонта КАК Справочник.торо_ТиповыеОР)) = &ТиповойОР
	               |	И торо_ИзмеряемыеПоказателиОбъектовРемонта.Показатель = &Показатель";
	Запрос.УстановитьПараметр("ТиповойОР",Типовой);
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат
			Новый Структура("ОбъектРемонта,ТиповойОР,Показатель,
							|ДопустимыйМинимум,ДопустимыйМаксимум,КритическийМинимум,КритическийМаксимум,
							|ЗначенияКонтролируемыхПоказателейИзОР,ТочкаЗамера,ИзТиповогоОР,Удален",
							 Справочники.торо_ОбъектыРемонта.ПустаяСсылка(),Выборка.ТиповойОР,Выборка.Показатель,
							 Выборка.ДопустимыйМинимум,Выборка.ДопустимыйМаксимум,Выборка.КритическийМинимум,Выборка.КритическийМаксимум,
							 Выборка.ЗначенияКонтролируемыхПоказателейИзОР,Выборка.ТочкаЗамера,Истина,Ложь);
		
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВводСостоянияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьОбъектНаСервере();
	Иначе
		Возврат;
	КонецЕсли;
	
	ВводСостоянияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСостоянияФрагмент()
	
	Перем НС, ФормаДокСостояния;
	
	Если Не ПроверитьСтатусНаСервере("торо_СостоянияОбъектовРемонта") Тогда
		Возврат;
	КонецЕсли;
	Попытка
		
		ФормаДокСостояния = ПолучитьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта",,ЭтаФорма);
		
		ФормаДокСостояния.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации");
		НС = ФормаДокСостояния.Объект.ОбъектыРемонта.Добавить();
		НС.ОбъектРемонта = Объект.Ссылка;
		НС.ДатаОкончания = ТекущаяДата();
		НС.Иерархия = ТекСтруктураИерархии;
		
		ФормаДокСостояния.Открыть();
		
	Исключение
		ПоказатьПредупреждение(Неопределено, ИнформацияОбОшибке().Причина.Описание);
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьГрафикСостоянийОР()
	// тут строим график
	
	ГрафикСостоянийОР.Очистить();
	ГрафикСостоянийОР.АвтоОпределениеПолногоИнтервала = Ложь;
	ГрафикСостоянийОР.ОтображатьЛегенду = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ТекущееСостояниеОР.ВидЭксплуатации КАК ВидЭксплуатации,
	|	торо_ТекущееСостояниеОР.Период КАК Период,
	|	торо_ТекущееСостояниеОР.Регистратор
	|ПОМЕСТИТЬ ТаблицаСостояний
	|ИЗ
	|	РегистрСведений.торо_ТекущееСостояниеОР КАК торо_ТекущееСостояниеОР
	|ГДЕ
	|	торо_ТекущееСостояниеОР.ОбъектРемонта = &ОбъектРемонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСостояний.ВидЭксплуатации КАК ВидЭксплуатации,
	|	ВЫБОР
	|		КОГДА ГОД(ТаблицаСостояний.Период) < 1000
	|			ТОГДА ДАТАВРЕМЯ(1000, 1, 1)
	|		ИНАЧЕ ТаблицаСостояний.Период
	|	КОНЕЦ КАК Период,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ВспромогательнаяТаблица.Период ЕСТЬ NULL 
	|					И &ДатаОкончания = ДАТАВРЕМЯ(2999, 12, 31)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаСостояний.Период, ДЕНЬ, 1)
	|			КОГДА ВспромогательнаяТаблица.Период ЕСТЬ NULL 
	|				ТОГДА &ДатаОкончания
	|			ИНАЧЕ ВспромогательнаяТаблица.Период
	|		КОНЕЦ) КАК ДатаКон,
	|	ТаблицаСостояний.Регистратор,
	|	ВЫБОР
	|		КОГДА ВспромогательнаяТаблица.Период ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОткрытоеСостояние
	|ИЗ
	|	ТаблицаСостояний КАК ТаблицаСостояний
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСостояний КАК ВспромогательнаяТаблица
	|		ПО ТаблицаСостояний.Период < ВспромогательнаяТаблица.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСостояний.Период,
	|	ТаблицаСостояний.ВидЭксплуатации,
	|	ТаблицаСостояний.Регистратор,
	|	ВЫБОР
	|		КОГДА ВспромогательнаяТаблица.Период ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|
	|ИМЕЮЩИЕ
	|	МИНИМУМ(ЕСТЬNULL(ВспромогательнаяТаблица.Период, &ТекДата)) >= &ДатаНачала И
	|	ТаблицаСостояний.Период <= &ДатаОкончания
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	ВидЭксплуатации";
	
	Если ОтборПоПериоду Тогда			   
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Если ДатаНачала > ДатаОкончания Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата окончания периода меньше даты начала!'"));
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("ДатаНачала",'1000.01.01');
		Запрос.УстановитьПараметр("ДатаОкончания",'2999.12.31');
	КонецЕсли;
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТекДата", ТекущаяДата());
	
	Результат = Запрос.Выполнить();
	ЗаполнитьТабличноеПолеСостоянийОР(Результат);
	
	ВыборкаПоВидЭксплуатации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Серия = ГрафикСостоянийОР.Серии.Добавить();
	Серия.Цвет = WebЦвета.Красный;
	
	НачалоПериода = Дата('1000.01.01');
	КонецПериода = Дата('1000.01.01');
	
	ГрафикСостоянийОР.Окантовка = Истина;
	
	Пока ВыборкаПоВидЭксплуатации.Следующий() Цикл
		ТочкаДиаграммы = ГрафикСостоянийОР.Точки.Добавить();
		ТочкаДиаграммы.Текст = ВыборкаПоВидЭксплуатации.ВидЭксплуатации; 
		
		Если ТочкаДиаграммы.Текст = "" Тогда
			ТочкаДиаграммы.Текст = "Не установлено";
		КонецЕсли;
		
		Выборка = ВыборкаПоВидЭксплуатации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока  Выборка.Следующий() Цикл
			Если Выборка.Период > Выборка.ДатаКон Тогда
				Продолжить;
			КонецЕсли;
			
			Значение = ГрафикСостоянийОР.ПолучитьЗначение(ТочкаДиаграммы, Серия);
			Интервал = Значение.Добавить();
			Интервал.Начало = Выборка.Период;
			Интервал.Конец  = Выборка.ДатаКон;
			Интервал.Расшифровка = Выборка.Регистратор;
			
			Если Выборка.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Эксплуатация Тогда
				Интервал.Цвет = WebЦвета.Зеленый;
			ИначеЕсли Выборка.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
				Интервал.Цвет = WebЦвета.Красный;
			ИначеЕсли Выборка.ВидЭксплуатации.ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Испытания Тогда
				Интервал.Цвет = WebЦвета.Синий;
			КонецЕсли;
			
			НачалоПериода = ?(НачалоПериода = Дата('1000.01.01'),Выборка.Период,Мин(НачалоПериода,Выборка.Период));
			КонецПериода = Макс(КонецПериода,Выборка.ДатаКон);
			Если Выборка.ОткрытоеСостояние Тогда
				Интервал.Текст = "с " + Строка(Выборка.Период);
			Иначе 
				Интервал.Текст = Строка(Выборка.Период) + " - " + Строка(Выборка.ДатаКон);
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	Если ОтборПоПериоду Тогда
		ДатаПланированияДляИнтервала = ДатаНачала;
		ДатаОкончанияДляИнтервала = ДатаОкончания;
	Иначе	
		Если Год(НачалоПериода)<1000 Тогда
			ДатаПланированияДляИнтервала = '10000101';
		ИначеЕсли Год(НачалоПериода)>2999 Тогда
			ДатаПланированияДляИнтервала = '29991231';
		Иначе
			ДатаПланированияДляИнтервала = НачалоПериода;
		КонецЕсли;
		Если Год(КонецПериода)<1000 Тогда
			ДатаОкончанияДляИнтервала = '10000101';
		ИначеЕсли Год(КонецПериода)>2999 Тогда
			ДатаОкончанияДляИнтервала = '29991231';
		Иначе
			ДатаОкончанияДляИнтервала = КонецПериода;
		КонецЕсли;
	КонецЕсли;
	ГрафикСостоянийОР.УстановитьПолныйИнтервал(НачалоДня(ДатаПланированияДляИнтервала), КонецДня(ДатаОкончанияДляИнтервала));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТабличноеПолеСостоянийОР(РезультатЗапроса)
	
	ПолеТДТаблицаСостояний.Очистить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	ТЗСостояний = РезультатЗапроса.Выгрузить();
	ТЗСостояний.Сортировать("Период Возр");
	Пока ТЗСостояний[0].Период = null Цикл
		ТзСостояний.Удалить(0);
	КонецЦикла;
	ТабДок = ПолеТДТаблицаСостояний;
	ПервичныйСдвигСтрок = 0;
	
	ИндексСтроки = 2 + ТЗСостояний.Количество() + 1;
	флВсеНарисовано = Ложь;
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	
	КоличествоСостояний = ТЗСостояний.Количество();
	КоличествоКолонокПоляТД = 15;
	ЭтоПерваяЧастьТаблицы = Истина;
	
	Пока НЕ флВсеНарисовано Цикл
		
		Если КоличествоКолонокПоляТД = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Если КоличествоСостояний + 1 > КоличествоКолонокПоляТД Тогда
			ЧертитьКолонок = КоличествоКолонокПоляТД;
			КоличествоСостояний = КоличествоСостояний - КоличествоКолонокПоляТД + 1;
		Иначе 
			ЧертитьКолонок = КоличествоСостояний + 1;
			флВсеНарисовано = Истина;
		КонецЕсли;
		
		ОбластьВывода = ТабДок.Область(1,1,1,1);
		ОбластьВывода.ШиринаКолонки = 4; 
		
		ОбластьВывода = ТабДок.Область(3+ СдвигСтрокПоляТД,2,7 + СдвигСтрокПоляТД,ЧертитьКолонок + 1);
		ОбластьВывода.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		ОбластьВывода.ВысотаСтроки = 22;
		
		ОбластьВывода = ТабДок.Область(3+ СдвигСтрокПоляТД,2,7 + СдвигСтрокПоляТД+1);
		ОбластьВывода.ШиринаКолонки = 15;
		ОбластьВывода.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Если НЕ ЭтоПерваяЧастьТаблицы Тогда
			ОбластьВывода = ТабДок.Область(3+ СдвигСтрокПоляТД - 1, 2);
			ОбластьВывода.Текст = "Продолжение";
		КонецЕсли;
		ЭтоПерваяЧастьТаблицы = Ложь;
		ОбластьВывода = ТабДок.Область(3 + СдвигСтрокПоляТД, 3,3 + СдвигСтрокПоляТД,ЧертитьКолонок+1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода.Объединить();
		ОбластьВывода.Текст = "Период:";
		ОбластьВывода = ТабДок.Область(3 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Состояние:"; 
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода = ТабДок.Область(4 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Не установлено"; 
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода = ТабДок.Область(5+СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Испытания";
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода = ТабДок.Область(6 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Эксплуатация";
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода = ТабДок.Область(7 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Простой";
		ОбластьВывода.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		СдвигСтрокПоляТД = СдвигСтрокПоляТД + 7;
	КонецЦикла;
	
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	Номер = 1;
	
	Для Каждого СтрокаСостояния Из ТЗСостояний Цикл
		ТипЭксплуатации = ?(ЗначениеЗаполнено(СтрокаСостояния.ВидЭксплуатации),СтрокаСостояния.ВидЭксплуатации.ТипЭксплуатации,Неопределено);
		Если ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Эксплуатация Тогда
			ДопИндекс = 6;
		ИначеЕсли ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Простой Тогда
			ДопИндекс = 7;
		ИначеЕсли ТипЭксплуатации = Перечисления.торо_ТипЭксплуатации.Испытания Тогда
			ДопИндекс = 5;
		ИначеЕсли ТипЭксплуатации = Неопределено Тогда
			ДопИндекс = 4;
		КонецЕсли;
		
		ОбластьВывода2 = ТабДок.Область(ДопИндекс + СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода2.ШиринаКолонки = 10;
		ОбластьВывода2.Текст = Строка(Формат(СтрокаСостояния.Период,"ДФ=dd.MM.yyyy")) + " -"+ Символы.ПС + Строка(Формат(СтрокаСостояния.ДатаКон,"ДФ=dd.MM.yyyy"));
		
		Номер = Номер + 1;
		
		Если ОбластьВывода2.Лево = КоличествоКолонокПоляТД + 1 Тогда
			СдвигСтрокПоляТД = СдвигСтрокПоляТД + 7;
			Номер = 1;	
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаСостояния.ОткрытоеСостояние Тогда
		ОбластьВывода2.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
		ОбластьВывода2.Текст ="с " + Строка(Формат(СтрокаСостояния.Период,"ДФ=dd.MM.yyyy"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСостоянияНаПериодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаписатьОбъектНаСервере();
	Иначе
		Возврат;
	КонецЕсли;
	
	ВводСостоянияНаПериодФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ВводСостоянияНаПериодФрагмент()
	
	Перем НС, ФормаДокСостояния;
	
	Если Не ПроверитьСтатусНаСервере("торо_СостоянияОбъектовРемонта") Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ФормаДокСостояния = ПолучитьФорму("Документ.торо_СостоянияОбъектовРемонта.ФормаОбъекта",,ЭтаФорма);
		
		ФормаДокСостояния.Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатацииНаПериод");
		НС = ФормаДокСостояния.Объект.ОбъектыРемонта.Добавить();
		НС.ОбъектРемонта = Объект.Ссылка;
		НС.ДатаОкончания = ТекущаяДата();
		НС.Иерархия = ТекСтруктураИерархии;
		
		ФормаДокСостояния.Открыть();
		
	Исключение
		ПоказатьПредупреждение(Неопределено, ИнформацияОбОшибке().Причина.Описание);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСнятияФлажкаГарантий(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ГарантииОбъектаРемонта.Очистить();
		Элементы.СтраницаГарантийныеРемонты.Видимость = Ложь;
		МодифицированностьГарантий = Истина;
	Иначе
		ЕстьГарантияДляОбъекта = Истина;
	КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура НарисоватьМнемосхему(ОбщаяПродолжительность)
	
	торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
	Элементы.ПолеМнемосхемы.ТекущийЭлемент = Неопределено;
	
	КолСтрокСхемы = 0;
	
	Если Элементы.ПолеТД.Ширина < 20 Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Размер окна слишком мал. Невозможно вывести таблицу!'"));
		Возврат;
	КонецЕсли;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		
		КоличествоРемонтов = Новый Соответствие;
		Для каждого Стр Из ТаблицаРемонтовВизуализация Цикл
		
			ЗначениеКлюча = КоличествоРемонтов.Получить(Стр.ВидРемонтныхРабот);
			Если ЗначениеКлюча = Неопределено Тогда
				КоличествоРемонтов.Вставить(Стр.ВидРемонтныхРабот, 1);
			Иначе
				КоличествоРемонтов.Вставить(Стр.ВидРемонтныхРабот, ЗначениеКлюча + 1);
			КонецЕсли;
		
		КонецЦикла; 
		
		ПоследняяСтрокаРемонта = ТаблицаРемонтовВизуализация[ТаблицаРемонтовВизуализация.Количество() - 1];
		РазностьДат = (ПоследняяСтрокаРемонта.ДатаНач - ПоследняяСтрокаРемонта.ДатаПредшествующегоТогожеВида) / 86400;
		Надпись1 = "Всего:";
		Для каждого Стр Из КоличествоРемонтов Цикл
			Надпись1 = Надпись1 + Символы.ПС + Стр.Ключ + ": " + Стр.Значение + " шт.";
		КонецЦикла;
		
		Надпись1 = Надпись1 + Символы.ПС + "Календарных дней: " + ?(РазностьДат > 0,РазностьДат - 1, 0) + "
		|Рабочих дней: " + ПоследняяСтрокаРемонта.ДниОтПредшествующего;
		
		МассивКолонокНаработки = КолонкиНаработки.НайтиСтроки(Новый Структура("ПредшествующийТогоЖеВида", Истина));
		
		Для Каждого КолонкаНаработки из МассивКолонокНаработки Цикл
			ИмяКолонки = КолонкаНаработки.ИмяКолонки;	
			
			СтрокиНаработки = ЗначенияНаработки.НайтиСтроки(Новый Структура("ID, ВидРемонтныхРабот, Показатель", ПоследняяСтрокаРемонта.ID, ПоследняяСтрокаРемонта.ВидРемонтныхРабот, ИмяКолонки));
			
			Если СтрокиНаработки.Количество() Тогда
				СтрНар = СтрокиНаработки[0];
				
				Надпись1 = Надпись1 + "
				|" + КолонкаНаработки.Показатель + ": " + СтрНар.Значение;
			КонецЕсли;
		КонецЦикла;
		Декорация1 = Надпись1;
	КонецЕсли;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 100 Тогда
		Ответ = Неопределено;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("НарисоватьМнемосхемуЗавершение", ЭтотОбъект), НСтр("ru = 'Вывод схемы ремонтного цикла может занять продолжительное время. Вывести схему?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	НарисоватьМнемосхемуЗавершение(Неопределено, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НарисоватьМнемосхемуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
    Флаг                    = Ложь;
    ИндексЭлемента          = Неопределено;
    НачалоСтроки            = Неопределено;
    КонецСтроки             = Неопределено;
    НаправлениеЭлемента     = "Вправо";
    СоединятьЛинией         = Истина;
    ШиринаПоля              = Элементы.ПолеМнемосхемы.Ширина * 10 - 150;
    
    ИндексСтроки            = 8 + КолонкиНаработки.Количество() + 1;
    флВсеНарисовано         = Ложь;
    СдвигСтрокПоляТД        = 0;
    КоличествоРемонтов      = ТаблицаРемонтовВизуализация.Количество(); // - 1;
    ШиринаПоляТД            = Элементы.ПолеТД.Ширина * 15 - 150;
    КоличествоКолонокПоляТД = Цел((ШиринаПоляТД - 50) / 50) - 1;
    ЭтоПерваяЧастьТаблицы   = Истина;
	 
	 МаксЭлементовДляВебКлиента = 10;
	 
	Если КоличествоРемонтов + 1 > 16 Тогда
		КолвоКолонок = 16;
	Иначе
		КолвоКолонок = КоличествоРемонтов+1;
	КонецЕсли;
	
	
	Пока НЕ флВсеНарисовано Цикл
		
		Если КоличествоКолонокПоляТД = 1 Тогда
			Прервать;
		КонецЕсли;
		
		Если КоличествоРемонтов + 1 > КоличествоКолонокПоляТД Тогда
            ЧертитьКолонок     = КоличествоКолонокПоляТД;
            КоличествоРемонтов = КоличествоРемонтов - КоличествоКолонокПоляТД + 1;
		Иначе 
            ЧертитьКолонок  = КоличествоРемонтов + 1;
            флВсеНарисовано = Истина;
		КонецЕсли;
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок + 1);
        ОбластьВывода.ГраницаСверху           = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
        ОбластьВывода.ГраницаСлева            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
        ОбластьВывода.ГраницаСнизу            = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
        ОбластьВывода.ГраницаСправа           = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
        ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД,3,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок + 1);
		ОбластьВывода.ШиринаКолонки = 8;
		
		
		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД);
        ОбластьВывода.ШиринаКолонки           = 20;
        ОбластьВывода.РазмещениеТекста        = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
        ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Если НЕ ЭтоПерваяЧастьТаблицы Тогда
            ОбластьВывода       = ПолеТД.Область(3 + СдвигСтрокПоляТД - 1, 2);
            ОбластьВывода.Текст = "Продолжение";
		КонецЕсли;
		ЭтоПерваяЧастьТаблицы = Ложь;
        ОбластьВывода       = ПолеТД.Область(3 + СдвигСтрокПоляТД, 2);
        ОбластьВывода.Текст = "Вид ремонта"; 
        ОбластьВывода       = ПолеТД.Область(4 + СдвигСтрокПоляТД, 2);
        ОбластьВывода.Текст = "Продолжительность (ч)"; 
        ОбластьВывода       = ПолеТД.Область(5 + СдвигСтрокПоляТД, 2);
        ОбластьВывода.Текст = "Тек. рабочие дни (от предшествующего)";
        ОбластьВывода       = ПолеТД.Область(6 + СдвигСтрокПоляТД, 2);
        ОбластьВывода.Текст = "Тек. календарные дни (от предшествующего)";
        ОбластьВывода       = ПолеТД.Область(7 + СдвигСтрокПоляТД, 2);
        ОбластьВывода.Текст = "Время работы (от предшествующего того же вида)";
		
		ДопИндекс = 0;
		Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
			
			ОбластьВывода = ПолеТД.Область(8 + ДопИндекс + СдвигСтрокПоляТД, 2);
			ОбластьВывода.Текст = ПолучитьНаименованиеПоказателя(КолонкаНаработки.Показатель) + " (" + ?(КолонкаНаработки.ПредшествующийТогоЖеВида, "от предшествующего того же вида", "от предшествующего") + ")"; 	 
			ДопИндекс = ДопИндекс + 1;
		КонецЦикла;
		
		ОбластьВывода = ПолеТД.Область(8 + ДопИндекс + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Рассчитан по наработке";
		
		СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
		
		
	КонецЦикла;
	
	СдвигСтрокПоляТД = 0;
	Номер = 1;
	
	
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ДатаНачПервого = ТаблицаРемонтовВизуализация[0].ДатаНач;
	КонецЕсли;
	Для Каждого СтрокаРемонта Из ТаблицаРемонтовВизуализация Цикл
		Если Не ЗначениеЗаполнено(СтрокаРемонта.ВидРемонтныхРабот) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Ответ = КодВозвратаДиалога.Да ИЛИ Ответ = Неопределено Тогда
			
			Если Нормировать Тогда
				Шаг = Окр((СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / ОбщаяПродолжительность * 40 / МинШаг);
				Если Шаг = 0 Тогда
					Шаг = 1;
				КонецЕсли;
			Иначе
				Шаг = 40;
			КонецЕсли;
			
			#Если ВебКлиент Тогда
			Если Не (Элементы.ПолеМнемосхемы.ТекущийЭлемент = Неопределено) И Номер = МаксЭлементовДляВебКлиента+?(СдвигСтрокПоляТД>0, 0, 1) Тогда
			#Иначе
			Если Не (Элементы.ПолеМнемосхемы.ТекущийЭлемент = Неопределено) И Элементы.ПолеМнемосхемы.ТекущийЭлемент.Лево + Шаг > ШиринаПоля Тогда
			#КонецЕсли
				КонецСтроки = Элементы.ПолеМнемосхемы.ТекущийЭлемент;
				Элементы.ПолеМнемосхемы.ТекущийЭлемент = НачалоСтроки;
				НаправлениеЭлемента = "Вниз";
				Шаг = 40;
				СоединятьЛинией = Ложь;
			КонецЕсли;
			
			НайденныеСтроки = СоответсвиеЦветов.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", СтрокаРемонта.ВидРемонтныхРабот));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрокаВидРемонта =  НайденныеСтроки[0];
                ЦветВР     = СтрокаВидРемонта.Цвет;
                ЦветТекста = СтрокаВидРемонта.ЦветТекста;
                Шрифт      = СтрокаВидРемонта.Шрифт; 
			Иначе
				ЦветВР     = Новый Цвет(255,255,255);
                ЦветТекста = Новый Цвет(0,0,0);
                Шрифт      = Новый Шрифт(); 
			КонецЕсли; 

			
			
			СтруктураДопСвойств = Новый Структура("Наименование, Фигура, ЦветВР,ЦветТекста,Шрифт, Подсказка",
			ПолучитьКодДляВР(СтрокаРемонта.ВидРемонтныхРабот), ФигурыГрафическойСхемы.Блок, ЦветВР,ЦветТекста,Шрифт, "Дата начала: "+Строка(СтрокаРемонта.ДатаНач));
			
			ДобавитьЭлемент(Новый Картинка,ИндексЭлемента,НаправлениеЭлемента, СоединятьЛинией,Шаг, СтруктураДопСвойств);
			
			Если Элементы.ПолеМнемосхемы.ТекущийЭлемент = Неопределено Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Построить мнемосхему не удалось!'"));
				Прервать;
			КонецЕсли;
			
			НС = СоответствиеИндексаИНомераКолонки.Добавить();
			НС.ТекЭлементИмя = Элементы.ПолеМнемосхемы.ТекущийЭлемент.Имя;
			НС.НомерКолонки = Номер + 2;
			НС.СдвигСтрок = СдвигСтрокПоляТД;
			
			Если (НачалоСтроки = Неопределено Или НаправлениеЭлемента = "Вниз") Тогда
				
				Если НаправлениеЭлемента = "Вниз" Тогда 
					ТекЭлемент = ИндексЭлемента;
					
					НачалоСтроки = Элементы.ПолеМнемосхемы.ТекущийЭлемент;
					
					СтруктураЭлем = Новый Структура("КонецСтроки,ТекЭлемент",КонецСтроки,Элементы.ПолеМнемосхемы.ТекущийЭлемент);
					торо_РаботаСМнемосхемами.мнс_СоздатьЛинию(КонецСтроки.Имя,Элементы.ПолеМнемосхемы.ТекущийЭлемент.Имя, ПолеМнемосхемы);
					
					ОбновитьОтображениеДанных();
					
					КолСтрокСхемы = КолСтрокСхемы + 1;
					
				Иначе
					ДатаПервого = СтрокаРемонта.ДатаНач;
					НачалоСтроки = Элементы.ПолеМнемосхемы.ТекущийЭлемент;
				КонецЕсли;
				
				СоединятьЛинией = Истина;
				НаправлениеЭлемента = "Вправо";
			КонецЕсли;	
			
		КонецЕсли;
		
		Флаг = Истина;
		ДатаПоследнего = СтрокаРемонта.ДатаКон;

		ОбластьВывода = ПолеТД.Область(3 + СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода.Текст = ПолучитьКодДляВР(СтрокаРемонта.ВидРемонтныхРабот);
		
		ОбластьВывода2 = ПолеТД.Область(4 + СдвигСтрокПоляТД,Номер + 2);
		Продолжительность = Формат((СтрокаРемонта.Продолжительность) / 3600,"ЧДЦ=1"); 
		ОбластьВывода2.Текст = ?(СтрокаРемонта.НеУчитыватьПродолжительность,"(","") + Продолжительность + ?(СтрокаРемонта.НеУчитыватьПродолжительность,")","");   // продолжительность (часов)
		
		ОбластьВывода2 = ПолеТД.Область(5 + СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода2.Текст = СтрокаРемонта.Дни; 	// рабочих дней от предыдущего 
		
		ОбластьВывода2 = ПолеТД.Область(6 + СдвигСтрокПоляТД,Номер + 2);
		РазностьДат = (СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / 86400;
		ОбластьВывода2.Текст = ?(РазностьДат > 0,РазностьДат - 1, 0); 	// календарных дней от предыдущего
		
		ОбластьВывода2 = ПолеТД.Область(7 + СдвигСтрокПоляТД, Номер + 2);
		ОбластьВывода2.Текст = СтрокаРемонта.ДниОтПредшествующего;
		
		ДопИндекс = 0;
		Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
			ИмяКолонки = КолонкаНаработки.ИмяКолонки;	
			
			СтрокиНаработки = ЗначенияНаработки.НайтиСтроки(Новый Структура("ID, ВидРемонтныхРабот, Показатель", СтрокаРемонта.ID, СтрокаРемонта.ВидРемонтныхРабот, ИмяКолонки));
			
			Если СтрокиНаработки.Количество() Тогда
				СтрНар = СтрокиНаработки[0];
				
				ОбластьВывода2 = ПолеТД.Область(8 + ДопИндекс + СдвигСтрокПоляТД,Номер + 2);
				ОбластьВывода2.Текст = СтрНар.Значение;
							
				// очередная наработка 
				ДопИндекс = ДопИндекс + 1;
			КонецЕсли;
		КонецЦикла;
		
		ОбластьВывода2 = ПолеТД.Область(8 + ДопИндекс + СдвигСтрокПоляТД, Номер + 2);
		ОбластьВывода2.Текст = ?(СтрокаРемонта.РассчитанПоПериодичности = Ложь, "v", "");
		
		Номер = Номер + 1;
		
		Если Не (Элементы.ПолеТД.ТекущаяОбласть = Неопределено) И (ОбластьВывода2.Лево + 2)*50 > ШиринаПоляТД Тогда 
			СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
			Номер = 1;
		КонецЕсли;
		
	КонецЦикла;
	
	МожноПечататьВизуализацию = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНаименованиеПоказателя(Показатель)
	
	Возврат Показатель.Наименование;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКодДляВР(ВР)
	
	Возврат ВР.Код;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьЭлемент(Картинка=Неопределено,ИндексЭлемента, НаправлениеЭлемента, СоединятьЛинией, Шаг = 40, СтруктураДопСвойств)
	
	Шаг = ?(Шаг = 0,1,Шаг);
	
	ТекЭлемент = Элементы.ПолеМнемосхемы.ТекущийЭлемент;
	
	Если ТекЭлемент <> Неопределено И ТекЭлемент.Имя = "Фоновый объект" Тогда
		ТекЭлемент = Неопределено;
	КонецЕсли;
	
	Если ТекЭлемент <> Неопределено И ТипЗнч(ТекЭлемент) <> Тип("ЭлементГрафическойСхемыДекорация") Тогда
		ТекЭлемент = Неопределено;
	КонецЕсли;
	
	Если ТекЭлемент = Неопределено Тогда
		
		Если ПолеМнемосхемы.ЭлементыГрафическойСхемы.Количество() = 0 Тогда
			
			торо_РаботаСМнемосхемами.мнс_СоздатьНовуюКарту(ПолеМнемосхемы,Картинка, СтруктураДопСвойств);
			
			ОбновитьОтображениеДанных();
			
			Элементы.ПолеМнемосхемы.ТекущийЭлемент = ПолеМнемосхемы.ЭлементыГрафическойСхемы[0];
			
			ИндексЭлемента = 0;
			
			Возврат;
			
		Иначе
			
			Инд = ПолеМнемосхемы.ЭлементыГрафическойСхемы.Количество();
			
			Пока Инд > 0 Цикл
				Если ТипЗнч(ПолеМнемосхемы.ЭлементыГрафическойСхемы[Инд-1]) = Тип("ЭлементГрафическойСхемыДекорация") 
					И ПолеМнемосхемы.ЭлементыГрафическойСхемы[Инд-1].Имя <> "Фоновый объект" Тогда
					ТекЭлемент = ПолеМнемосхемы.ЭлементыГрафическойСхемы[Инд-1];
					Прервать;
				Иначе
					Инд = Инд - 1;
				КонецЕсли;
			КонецЦикла;
			
			НомерДобавленногоЭлемента = неопределено;
			
			Если ТекЭлемент = Неопределено Тогда
				торо_РаботаСМнемосхемами.мнс_СоздатьПервыйЭлемент(ПолеМнемосхемы,Картинка, СтруктураДопСвойств);
				НомерДобавленногоЭлемента = ПолеМнемосхемы.ЭлементыГрафическойСхемы.Количество();
			Иначе
				торо_РаботаСМнемосхемами.мнс_СоздатьУзел(ТекЭлемент.Имя, ПолеМнемосхемы, НаправлениеЭлемента, СоединятьЛинией, ТолщинаСоединительнойЛинии, Шаг,Картинка,НомерДобавленногоЭлемента, СтруктураДопСвойств);
			КонецЕсли;
			
			ОбновитьОтображениеДанных();
			
			Элементы.ПолеМнемосхемы.ТекущийЭлемент = ПолеМнемосхемы.ЭлементыГрафическойСхемы[НомерДобавленногоЭлемента - 1];
			
			ИндексЭлемента = НомерДобавленногоЭлемента - 1;
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	НомерДобавленногоЭлемента = неопределено;
	
	торо_РаботаСМнемосхемами.мнс_СоздатьУзел(ТекЭлемент.Имя, ПолеМнемосхемы, НаправлениеЭлемента, СоединятьЛинией,1, Шаг,Картинка,НомерДобавленногоЭлемента, СтруктураДопСвойств);
	
	ОбновитьОтображениеДанных();
	
	Элементы.ПолеМнемосхемы.ТекущийЭлемент = ПолеМнемосхемы.ЭлементыГрафическойСхемы[НомерДобавленногоЭлемента - 1];
	
	ИндексЭлемента = НомерДобавленногоЭлемента - 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыНастроек(Результат, ПараметрыВыбора) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапланированныеРемонты.Очистить();
	Для каждого Элем Из Результат.МассивРемонтов Цикл
		
		НС = ЗапланированныеРемонты.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Элем);
		
	КонецЦикла;
	
	Нормировать = Результат.Нормировать;
	
	Если Результат.Пересчитать Тогда
		
		МожноПечататьВизуализацию = Ложь;
		
		ТаблицаРемонтовВизуализация.Очистить();
		
		Для каждого Стр Из ТаблицаРемонтов Цикл
			
			НС = ТаблицаРемонтовВизуализация.Добавить();
			ЗаполнитьЗначенияСвойств(НС, Стр);
			
		КонецЦикла;
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
		РассчитатьПараметрыОтПредыдущего();
	Иначе
		
		Для Каждого ЗапланированныйВидРемонта Из ЗапланированныеРемонты Цикл
			Если ЗапланированныйВидРемонта.Выбран Тогда
				Продолжить;
			КонецЕсли;
			МассивНеВидимыхРемонтов = ТаблицаРемонтовВизуализация.НайтиСтроки(Новый Структура("ВидРемонтныхРабот",ЗапланированныйВидРемонта.ВидРемонтныхРабот));
			Для Каждого СтрокаНВРемонта Из МассивНеВидимыхРемонтов Цикл
				ТаблицаРемонтовВизуализация.Удалить(СтрокаНВРемонта);
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	СоответсвиеЦветов.Очистить();
	Для Каждого СтрокаРемонт Из ЗапланированныеРемонты Цикл
		Если Не СтрокаРемонт.Выбран Тогда
			Продолжить;
		КонецЕсли;
		НС = СоответсвиеЦветов.Добавить();
		НС.ВидРемонтныхРабот = СтрокаРемонт.ВидРемонтныхРабот;
		НС.Цвет = СтрокаРемонт.Цвет;
		НС.ЦветТекста = СтрокаРемонт.ЦветТекста;
		НС.Шрифт = СтрокаРемонт.Шрифт;
	КонецЦикла;
	
	Если ТаблицаРемонтов.Количество()>0 Тогда
		ПоследнийРемонт = ТаблицаРемонтов[ТаблицаРемонтов.Количество() - 1];
		ДатаПоследнего = ТаблицаРемонтов[0].ДатаНач;
		ОбщаяПродолжительность = ПоследнийРемонт.ДатаНач - ДатаПоследнего;
		
		Если ОбщаяПродолжительность = 0 Тогда
			ОбщаяПродолжительность = 1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерерасчитатьЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	СписокНеНужныхВР = ДополнительныеПараметры.СписокНеНужныхВР;
	
	Если Список <> Неопределено Тогда
		
		Для Каждого ЭлементСписка Из Список Цикл
			
			Если НЕ ЭлементСписка.Пометка Тогда
				
				СписокНеНужныхВР.Добавить(ЭлементСписка.Значение);
				
			КонецЕсли; 
			
		КонецЦикла;
		
	Иначе
		Возврат;
	КонецЕсли;
	
	РасчетВыполнен = ПерерасчитатьНаСервере(СписокНеНужныхВР);
	
	Если Не РасчетВыполнен Тогда
		Возврат;
	КонецЕсли;
	
	НарисоватьМнемосхему(ОбщаяПродолжительность);
	 
КонецПроцедуры

&НаСервере
Функция ЗаполнитьВидыРемонтаНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта КАК ОбъектРемонтныхРабот,
	|	торо_НормативныеРемонтыОборудования.ВидРемонта КАК ВидРемонтныхРабот,
	|	&ГрафикРаботы КАК ПлановыйГрафикРаботы,
	|	&РГ КАК РемонтнаяГруппа
	|ИЗ
	|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|ГДЕ
	|	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОР
	|	И торо_НормативныеРемонтыОборудования.Приоритет
	|	И НЕ торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании";
	
	Запрос.УстановитьПараметр("ОР", Объект.Ссылка);
	Запрос.УстановитьПараметр("ГрафикРаботы", Объект.ПлановыйГрафикРаботы);
	Запрос.УстановитьПараметр("РГ", Объект.Ссылка.ТиповойОР);
	
	ТаблицаОбъектыРемонта.Загрузить(Запрос.Выполнить().Выгрузить());
	
	СписокВидовРемонтов.Очистить();
	
	Для каждого Строчка Из ТаблицаОбъектыРемонта Цикл
		
		СписокВидовРемонтов.Добавить(Строчка.ВидРемонтныхРабот);
		
	КонецЦикла;
	
	Возврат СписокВидовРемонтов;
	
КонецФункции

&НаСервере
Функция ПерерасчитатьНаСервере(СписокНеНужныхВР)
	
	ПолеТД.Очистить();
	ПолеТД.АвтоМасштаб = Истина;
	
	СоответствиеИндексаИНомераКолонки.Очистить();
	
	Для каждого ЭлемСписка Из СписокНеНужныхВР Цикл
		
		МассивСтрок = ТаблицаОбъектыРемонта.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", ЭлемСписка.Значение));
		
		Если МассивСтрок.Количество() Тогда
			ТаблицаОбъектыРемонта.Удалить(МассивСтрок[0]);
		КонецЕсли;
		
	КонецЦикла;
	
	ТабПараметрыНаработки = ПолучитьТаблицуПараметровНаработки();
	ТабПараметрыНаработкиОбъектовРемонта.Загрузить(ТабПараметрыНаработки);
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ТаблицаПланРемонтов"     , Документы.торо_ПланГрафикРемонта.ПустаяСсылка().ПланРемонтов.ВыгрузитьКолонки());
	СтруктураДанных.Вставить("ТаблицаОбъектыРемонта"   , ТаблицаОбъектыРемонта.Выгрузить().Скопировать(,"ОбъектРемонтныхРабот,ВидРемонтныхРабот,ПлановыйГрафикРаботы,РемонтнаяГруппа"));
	СтруктураДанных.Вставить("ДатаПланирования"        , НачалоДня(ТекущаяДата()));
	СтруктураДанных.Вставить("ПериодичностьДетализации", Перечисления.Периодичность.Год);
	СтруктураДанных.Вставить("КоличествоПериодов"      , 1);
	СтруктураДанных.Вставить("ТабПараметрыНаработкиОбъектовРемонта", ТабПараметрыНаработкиОбъектовРемонта.Выгрузить());
	СтруктураДанных.Вставить("ВРНачалоЦикла"           , ВРНачалоЦикла);
	СтруктураДанных.Вставить("ВизуализацияТипОР"       , Ложь);
	
	ТабНормативов = Новый ТаблицаЗначений;
	СтруктураДанных.Вставить("ТаблицаНормативов", ТабНормативов);
	
	// Для совместимости с расчетом ППР создаем пустую таблицу
	ТаблицаЦепочки = Новый ТаблицаЗначений;
	ТаблицаЦепочки.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаЦепочки.Колонки.Добавить("Цепочка",              Новый ОписаниеТипов("СправочникСсылка.торо_ЦепочкиРемонта"));
	
	СтруктураДанных.Вставить("ТаблицаЦепочки", ТаблицаЦепочки);
	
	ВыполнятьРасчет = ПроверкаПередРасчетом(СтруктураДанных["ДатаПланирования"], ТаблицаОбъектыРемонта.Выгрузить().Скопировать(, "ОбъектРемонтныхРабот, ВидРемонтныхРабот"), СтруктураДанных["ТабПараметрыНаработкиОбъектовРемонта"]);
	
	Если ВыполнятьРасчет Тогда
		
		СтруктураДанных.Вставить("ДатаОкончанияВизуализации",ДатаПланированияОкончание);
		ТабРемонтов = торо_РасчетППР.РасчетППР(Неопределено,,,СтруктураДанных);
		
		Если ТабРемонтов = ложь или ТабРемонтов.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось рассчитать ремонтный цикл, проверьте настройки планирования!'"));
			Возврат ложь;
		Иначе
			ТаблицаРемонтов.Загрузить(ТабРемонтов);
		КонецЕсли;
		
		ТаблицаНормативов.Загрузить(СтруктураДанных.ТаблицаНормативов);
		
		ТаблицаРемонтов.Сортировать("ДатаНач");
		
		СтрокиНачало = ТаблицаРемонтов.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", ВРНачалоЦикла));
		Если СтрокиНачало.Количество() > 0 Тогда
			СтрНачало = СтрокиНачало[0];
			ИндексНачало = ТаблицаРемонтов.Индекс(СтрНачало);
			Пока ИндексНачало > 0 Цикл
				ТаблицаРемонтов.Удалить(0);
				ИндексНачало = ИндексНачало - 1;
			КонецЦикла;
		КонецЕсли;
		
		
		КоличествоРемонтов = ТаблицаРемонтов.Количество();
		Пока КоличествоРемонтов > 0 Цикл
			Если ТаблицаРемонтов[КоличествоРемонтов - 1].ВидРемонтныхРабот = ВРНачалоЦикла Тогда
				Прервать;
			Иначе
				ТаблицаРемонтов.Удалить(КоличествоРемонтов - 1);
				КоличествоРемонтов = КоличествоРемонтов - 1;
			КонецЕсли;
		КонецЦикла;
		
		
		Если ТаблицаРемонтов.Количество() > 0 Тогда
			
			ЗапланРемонты = ТаблицаОбъектыРемонта.Выгрузить().Скопировать(,"ВидРемонтныхРабот");
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("Булево"));
			ОписаниеТиповБул = Новый ОписаниеТипов(Массив);
			ЗапланРемонты.Колонки.Добавить("Выбран",ОписаниеТиповБул);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Цвет"));
			ОписаниеТиповЦвет = Новый ОписаниеТипов(Массив);
			ЗапланРемонты.Колонки.Добавить("Цвет",ОписаниеТиповЦвет);
			ЗапланРемонты.ЗаполнитьЗначения(Истина,"Выбран");
			ЗапланРемонты.ЗаполнитьЗначения(Новый Цвет(255, 255, 255) ,"Цвет");
			
			Нормировать = Ложь;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось рассчитать ремонтный цикл, проверьте настройки планирования!'"));
			Возврат Ложь;
			
		КонецЕсли;
		
		
		
		
		ТаблицаРемонтовВизуализация.Загрузить(ТаблицаРемонтов.Выгрузить().Скопировать());
		РассчитатьПараметрыОтПредыдущего();
		
		Если ТаблицаРемонтов.Количество() > 0 Тогда
			ПоследнийРемонт = ТаблицаРемонтов[ТаблицаРемонтов.Количество() - 1];
			ДатаПоследнего = ТаблицаРемонтов[0].ДатаНач;
			ОбщаяПродолжительность = ПоследнийРемонт.ДатаНач - ДатаПоследнего;
			
			Если ОбщаяПродолжительность = 0 Тогда
				ОбщаяПродолжительность = 1;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

&НаСервере
Процедура ОчиститьПолеТабличногоДокумента()
	
	ПолеТД.Очистить();

КонецПроцедуры	

&НаСервере
Функция РассчитатьПараметрыОтПредыдущего()
	Номер = 1;
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ДатаНачПервого = ТаблицаРемонтовВизуализация[0].ДатаНач;
		ДатаПредшествующего = ДатаНачПервого;
	КонецЕсли;
		
	Для Каждого СтрРемонт Из ТаблицаРемонтовВизуализация Цикл
		СтрРемонт.ДатаПредшествующего = Мин(НачалоДня(ДатаПредшествующего),СтрРемонт.ДатаНач);
		ДатаПредшествующего = СтрРемонт.ДатаКон;
	КонецЦикла;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ПоследняяСтрокаРемонта = ТаблицаРемонтовВизуализация[ТаблицаРемонтовВизуализация.Количество() - 1];
		СтрокаДляПодвала = ТаблицаРемонтовВизуализация.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаДляПодвала,ПоследняяСтрокаРемонта);
		СтрокаДляПодвала.Замещен = Ложь;
	КонецЕсли;
	
	МассивГрафиков = Новый Массив(1);
	МассивГрафиков[0] = Объект.ПлановыйГрафикРаботы;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	торо_РасчетППР.СоздатьВТРасписанияРаботыНаПериодСКопированиемПериода(МенеджерВТ,МассивГрафиков,ДатаНачПервого,ДатаПредшествующего,Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаРемонтов.ДатаНач,
	               |	ТаблицаРемонтов.ДатаКон,
	               |	ТаблицаРемонтов.ВидРемонтныхРабот,
	               |	ТаблицаРемонтов.Замещен,
	               |	ТаблицаРемонтов.ДатаПредшествующего,
	               |	ТаблицаРемонтов.РассчитанПоПериодичности,
	               |	ТаблицаРемонтов.ID
	               |ПОМЕСТИТЬ ТаблицаРемонтов
	               |ИЗ
	               |	&ТаблицаРемонтов КАК ТаблицаРемонтов
	               |ГДЕ
	               |	НЕ ТаблицаРемонтов.Замещен
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаНормативов.ВидРемонтныхРабот,
	               |	ТаблицаНормативов.ПлановыйГрафикРаботы,
	               |	ТаблицаНормативов.НормативныйРемонт,
	               |	ТаблицаНормативов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаНормативов.Продолжительность,
	               |	ТаблицаНормативов.НеУчитыватьПродолжительность
	               |ПОМЕСТИТЬ ТаблицаНормативов
	               |ИЗ
	               |	&ТаблицаНормативов КАК ТаблицаНормативов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТРасписанияРаботы.ГрафикРаботы,
	               |	ВТРасписанияРаботы.ДатаГрафика,
	               |	РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяОкончания, ВТРасписанияРаботы.ВремяНачала, ЧАС) КАК ОсновноеЗначение
	               |ПОМЕСТИТЬ ТаблицаГрафиковСоВременем
	               |ИЗ
	               |	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРемонтов.ДатаНач,
	               |	ТаблицаРемонтов.ДатаКон,
	               |	ТаблицаРемонтов.ВидРемонтныхРабот,
	               |	ТаблицаРемонтов.Замещен,
	               |	ТаблицаРемонтов.ДатаПредшествующего,
	               |	ТаблицаРемонтов.РассчитанПоПериодичности,
	               |	ТаблицаРемонтов.ID,
	               |	ТаблицаНормативов.ПлановыйГрафикРаботы,
	               |	ТаблицаНормативов.НормативныйРемонт,
	               |	ТаблицаНормативов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаНормативов.НеУчитыватьПродолжительность,
	               |	ЕСТЬNULL(ТаблицаНормативов.Продолжительность, 0) КАК Продолжительность
	               |ПОМЕСТИТЬ ТаблицаСНормативами
	               |ИЗ
	               |	ТаблицаРемонтов КАК ТаблицаРемонтов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНормативов КАК ТаблицаНормативов
	               |		ПО ТаблицаРемонтов.ВидРемонтныхРабот = ТаблицаНормативов.ВидРемонтныхРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСНормативами.ДатаНач КАК ДатаНач,
	               |	ТаблицаСНормативами.ДатаКон,
	               |	ТаблицаСНормативами.ВидРемонтныхРабот,
	               |	ТаблицаСНормативами.Замещен,
	               |	ТаблицаСНормативами.ДатаПредшествующего КАК ДатаПредшествующего,
	               |	ТаблицаСНормативами.РассчитанПоПериодичности,
	               |	ТаблицаСНормативами.ПлановыйГрафикРаботы,
	               |	ТаблицаСНормативами.НормативныйРемонт,
	               |	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаСНормативами.НеУчитыватьПродолжительность,
	               |	ТаблицаСНормативами.Продолжительность,
	               |	ТаблицаСНормативами.ID,
	               |	СУММА(ЕСТЬNULL(ТаблицаГрафиковСоВременем.ОсновноеЗначение, 0)) КАК Часы,
	               |	СУММА(ВЫБОР
	               |			КОГДА ТаблицаГрафиковСоВременем.ОсновноеЗначение ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК Дни,
	               |	0 КАК ФактическаяНаработка
	               |ПОМЕСТИТЬ ТаблицаРемонтыИНормативы
	               |ИЗ
	               |	ТаблицаСНормативами КАК ТаблицаСНормативами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГрафиковСоВременем КАК ТаблицаГрафиковСоВременем
	               |		ПО ТаблицаСНормативами.ПлановыйГрафикРаботы = ТаблицаГрафиковСоВременем.ГрафикРаботы
	               |			И ТаблицаСНормативами.ДатаПредшествующего < ТаблицаГрафиковСоВременем.ДатаГрафика
	               |			И ТаблицаСНормативами.ДатаНач > ТаблицаГрафиковСоВременем.ДатаГрафика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаСНормативами.Замещен,
	               |	ТаблицаСНормативами.ПлановыйГрафикРаботы,
	               |	ТаблицаСНормативами.ВидРемонтныхРабот,
	               |	ТаблицаСНормативами.ДатаПредшествующего,
	               |	ТаблицаСНормативами.РассчитанПоПериодичности,
	               |	ТаблицаСНормативами.ДатаНач,
	               |	ТаблицаСНормативами.ДатаКон,
	               |	ТаблицаСНормативами.НеУчитыватьПродолжительность,
	               |	ТаблицаСНормативами.НормативныйРемонт,
	               |	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаСНормативами.Продолжительность,
	               |	ТаблицаСНормативами.ID
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаРемонтов.ВидРемонтныхРабот,
	               |	ТаблицаРемонтов.ID,
	               |	ТаблицаРемонтов.ДатаНач КАК ДатаНач,
	               |	ТаблицаРемонтов.ДатаКон,
	               |	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(МАКСИМУМ(ТаблицаРемонтов1.ДатаКон), ДЕНЬ, 1), ТаблицаРемонтов.ДатаНач) КАК ДатаПредшествующегоТогожеВида,
	               |	ТаблицаРемонтов.Замещен,
	               |	ТаблицаРемонтов.ДатаПредшествующего,
	               |	ТаблицаРемонтов.РассчитанПоПериодичности,
	               |	ТаблицаРемонтов.ПлановыйГрафикРаботы,
	               |	ТаблицаРемонтов.НормативныйРемонт,
	               |	ТаблицаРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаРемонтов.НеУчитыватьПродолжительность,
	               |	ТаблицаРемонтов.Продолжительность,
	               |	ТаблицаРемонтов.Часы,
	               |	ТаблицаРемонтов.Дни,
	               |	ТаблицаРемонтов.ФактическаяНаработка
	               |ПОМЕСТИТЬ РемонтыСПредшествующими
	               |ИЗ
	               |	ТаблицаРемонтыИНормативы КАК ТаблицаРемонтов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРемонтыИНормативы КАК ТаблицаРемонтов1
	               |		ПО ТаблицаРемонтов.ВидРемонтныхРабот = ТаблицаРемонтов1.ВидРемонтныхРабот
	               |			И ТаблицаРемонтов.ДатаНач > ТаблицаРемонтов1.ДатаКон
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаРемонтов.ВидРемонтныхРабот,
	               |	ТаблицаРемонтов.ID,
	               |	ТаблицаРемонтов.ДатаНач,
	               |	ТаблицаРемонтов.ДатаКон,
	               |	ТаблицаРемонтов.Замещен,
	               |	ТаблицаРемонтов.ДатаПредшествующего,
	               |	ТаблицаРемонтов.РассчитанПоПериодичности,
	               |	ТаблицаРемонтов.ПлановыйГрафикРаботы,
	               |	ТаблицаРемонтов.НормативныйРемонт,
	               |	ТаблицаРемонтов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаРемонтов.НеУчитыватьПродолжительность,
	               |	ТаблицаРемонтов.Продолжительность,
	               |	ТаблицаРемонтов.Часы,
	               |	ТаблицаРемонтов.Дни,
	               |	ТаблицаРемонтов.ФактическаяНаработка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РемонтыСПредшествующими.ВидРемонтныхРабот,
	               |	РемонтыСПредшествующими.ДатаНач КАК ДатаНач,
	               |	РемонтыСПредшествующими.ДатаКон,
	               |	РемонтыСПредшествующими.ДатаПредшествующегоТогожеВида,
	               |	РемонтыСПредшествующими.Замещен,
	               |	РемонтыСПредшествующими.ДатаПредшествующего КАК ДатаПредшествующего,
	               |	РемонтыСПредшествующими.РассчитанПоПериодичности,
	               |	РемонтыСПредшествующими.ПлановыйГрафикРаботы,
	               |	РемонтыСПредшествующими.НормативныйРемонт,
	               |	РемонтыСПредшествующими.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	РемонтыСПредшествующими.НеУчитыватьПродолжительность,
	               |	РемонтыСПредшествующими.Продолжительность,
	               |	РемонтыСПредшествующими.Часы,
	               |	РемонтыСПредшествующими.Дни,
	               |	РемонтыСПредшествующими.ФактическаяНаработка,
	               |	СУММА(ВЫБОР
	               |			КОГДА ТаблицаГрафиковСоВременем.ОсновноеЗначение ЕСТЬ NULL 
	               |				ТОГДА 0
	               |			ИНАЧЕ 1
	               |		КОНЕЦ) КАК ДниОтПредшествующего,
	               |	РемонтыСПредшествующими.ID
	               |ИЗ
	               |	РемонтыСПредшествующими КАК РемонтыСПредшествующими
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаГрафиковСоВременем КАК ТаблицаГрафиковСоВременем
	               |		ПО РемонтыСПредшествующими.ПлановыйГрафикРаботы = ТаблицаГрафиковСоВременем.ГрафикРаботы
	               |			И РемонтыСПредшествующими.ДатаПредшествующегоТогожеВида < ТаблицаГрафиковСоВременем.ДатаГрафика
	               |			И РемонтыСПредшествующими.ДатаНач > ТаблицаГрафиковСоВременем.ДатаГрафика
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РемонтыСПредшествующими.ВидРемонтныхРабот,
	               |	РемонтыСПредшествующими.ДатаНач,
	               |	РемонтыСПредшествующими.ДатаКон,
	               |	РемонтыСПредшествующими.ДатаПредшествующегоТогожеВида,
	               |	РемонтыСПредшествующими.Замещен,
	               |	РемонтыСПредшествующими.ДатаПредшествующего,
	               |	РемонтыСПредшествующими.РассчитанПоПериодичности,
	               |	РемонтыСПредшествующими.ПлановыйГрафикРаботы,
	               |	РемонтыСПредшествующими.НормативныйРемонт,
	               |	РемонтыСПредшествующими.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	РемонтыСПредшествующими.НеУчитыватьПродолжительность,
	               |	РемонтыСПредшествующими.Продолжительность,
	               |	РемонтыСПредшествующими.Часы,
	               |	РемонтыСПредшествующими.Дни,
	               |	РемонтыСПредшествующими.ФактическаяНаработка,
	               |	РемонтыСПредшествующими.ID
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаНач,
	               |	ДатаПредшествующего УБЫВ";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтов",ТаблицаРемонтовВизуализация.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаНормативов",ТаблицаНормативов.Выгрузить());
	
	ТаблицаРемонтовВизуализация.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ИндексСтроки = 7;
	СоответсвиеИменКолонок = Новый Соответствие;
	
	КолонкиНаработки.Очистить();
	ЗначенияНаработки.Очистить();
	
	РассчитатьНаработкуДляВизуализации(ИндексСтроки, "ДатаПредшествующего");
	РассчитатьНаработкуДляВизуализации(ИндексСтроки, "ДатаПредшествующегоТогожеВида");
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ПоследнийРемонт = ТаблицаРемонтовВизуализация[ТаблицаРемонтовВизуализация.Количество() - 1];
		ДатаПоследнего = ТаблицаРемонтовВизуализация[0].ДатаНач;
		ОбщаяПродолжительность = ПоследнийРемонт.ДатаНач - ДатаПоследнего;
		
		Если ОбщаяПродолжительность = 0 Тогда
			ОбщаяПродолжительность = 1;
		КонецЕсли;
	КонецЕсли;
	
	
	ТаблицаШагов = Новый ТаблицаЗначений;
	Если ТаблицаШагов.Колонки.Найти("Шаг") = Неопределено Тогда
		ТаблицаШагов.Колонки.Добавить("Шаг");
	КонецЕсли;
	
	Для Каждого СтрокаРемонта Из ТаблицаРемонтовВизуализация Цикл
		СтрокаШаг = ТаблицаШагов.Добавить();
		СтрокаШаг.Шаг = (СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / ОбщаяПродолжительность;
		Если СтрокаШаг.Шаг = 0 Тогда 
			ТаблицаШагов.Удалить(СтрокаШаг);
		КонецЕсли;
	КонецЦикла;
	ТаблицаШагов.Сортировать("Шаг Возр");
	Если ТаблицаШагов.Количество() > 0 Тогда
		МинШаг = ТаблицаШагов[0].Шаг;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура РассчитатьНаработкуДляВизуализации(ИндексСтроки, ТипДатыНачала)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаРемонтов.ДатаНач КАК ДатаОкончания,
	|	ТаблицаРемонтов." + ТипДатыНачала + " КАК ДатаНачала,
	|	ТаблицаРемонтов.ПлановыйГрафикРаботы
	|ПОМЕСТИТЬ ТаблицаРемонтов
	|ИЗ
	|	&ТаблицаРемонтов КАК ТаблицаРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.Показатель,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ПлановаяНаработка,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ПериодПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.ПродолжительностьПериодаПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ ТаблицаНаработки
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(, ОбъектРемонта В (&СписокОР)) КАК торо_ПараметрыНаработкиОбъектовРемонтаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРемонтов.ДатаНачала,
	|	ТаблицаРемонтов.ДатаОкончания,
	|	ТаблицаНаработки.Показатель,
	|	ТаблицаНаработки.ОбъектРемонта,
	|	ТаблицаРемонтов.ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы,
	|	ТаблицаНаработки.ПлановаяНаработка,
	|	ТаблицаНаработки.ПериодПлановойНаработки,
	|	ТаблицаНаработки.ПродолжительностьПериодаПлановойНаработки,
	|	ТаблицаНаработки.КоэффициентИспользованияОборудования
	|ИЗ
	|	ТаблицаНаработки КАК ТаблицаНаработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРемонтов КАК ТаблицаРемонтов
	|		ПО (ИСТИНА)";
	
	Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтовВизуализация.Выгрузить());
	СписокОР = Новый СписокЗначений;
	СписокОР.ЗагрузитьЗначения(ТабПараметрыНаработкиОбъектовРемонта.Выгрузить().ВыгрузитьКолонку("ОбъектРемонта"));
	Запрос.УстановитьПараметр("СписокОР",СписокОР);
	ТаблицаНаработка = Запрос.Выполнить().Выгрузить();
	
	ВариантыПериодов = ТаблицаНаработка.Скопировать(,"ПериодПлановойНаработки");
	ВариантыПериодов.Свернуть("ПериодПлановойНаработки",);
	
	СоответсвиеИменКолонок = Новый Соответствие;
	
	ТабРемонтовВизуализация = ТаблицаРемонтовВизуализация.Выгрузить().Скопировать();
	
	Для Каждого Период Из ВариантыПериодов Цикл
		ТаблицаСПериодом = ТаблицаНаработка.Скопировать(Новый Структура("ПериодПлановойНаработки",Период.ПериодПлановойНаработки));
		ТаблицаСНаработкой = торо_РаботаСНаработкой.РассчитатьВремяРаботыОРСПериодами(ТаблицаСПериодом,Период.ПериодПлановойНаработки,Истина);
		Для Каждого ЗаписьСНаработкой Из ТаблицаСНаработкой Цикл
			
			МассивСПараметрами = ТаблицаНаработка.НайтиСтроки(Новый Структура("ДатаНачала,ДатаОкончания",
			ЗаписьСНаработкой.ДатаНачала,ЗаписьСНаработкой.ДатаОкончания));	
			
			Для Каждого СтрокаСПараметрами Из МассивСПараметрами Цикл 
				Показатель = СтрокаСПараметрами.Показатель;
				ПоказательID = Показатель.УникальныйИдентификатор();
				ИмяКолонки = СоответсвиеИменКолонок.Получить(ПоказательID);
				Если ИмяКолонки = Неопределено Тогда
					ИмяКолонки = "Колонка" + ИндексСтроки;
					
					НоваяКолонка = ТабРемонтовВизуализация.Колонки.Добавить(ИмяКолонки);
					
					СоответсвиеИменКолонок.Вставить(ПоказательID,ИмяКолонки);
					НоваяСтрокаКолнки = КолонкиНаработки.Добавить();
					НоваяСтрокаКолнки.Показатель = Показатель;
					НоваяСтрокаКолнки.ИмяКолонки = ИмяКолонки;
					НоваяСтрокаКолнки.ПредшествующийТогоЖеВида = ?(ТипДатыНачала = "ДатаПредшествующего", Ложь, Истина);
					ТабРемонтовВизуализация.ЗаполнитьЗначения(0,ИмяКолонки);
					ОбластьВывода = ПолеТД.Область(ИндексСтроки, 2);
					ОбластьВывода.Текст = Показатель;
					ИндексСтроки = ИндексСтроки + 1;
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить(ТипДатыНачала, ЗаписьСНаработкой.ДатаНачала);
				Отбор.Вставить("ДатаНач",ЗаписьСНаработкой.ДатаОкончания); 
				
				МассивСтрок = ТабРемонтовВизуализация.НайтиСтроки(Отбор);
				
				Для Каждого Строка Из МассивСтрок Цикл
					
					Строка[ИмяКолонки] = Строка[ИмяКолонки] 
					+ ЗаписьСНаработкой.Периодов / ?(СтрокаСПараметрами.ПродолжительностьПериодаПлановойНаработки = 0,1,СтрокаСПараметрами.ПродолжительностьПериодаПлановойНаработки) 
					* СтрокаСПараметрами.КоэффициентИспользованияОборудования * СтрокаСПараметрами.ПлановаяНаработка;									
					
					НС = ЗначенияНаработки.Добавить();
					НС.ID = Строка.ID;
					НС.ВидРемонтныхРабот = Строка.ВидРемонтныхРабот;
					НС.Показатель = ИмяКолонки;
					НС.Значение = Строка[ИмяКолонки];
					
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПередРасчетом(ДатаПланирования, НужныеРемонты, ТабПараметрыНаработкиОбъектовРемонта)
	
	ДатаПланированияОкончание = РассчитатьДатуОкончанияПланирования(ДатаПланирования, ТабПараметрыНаработкиОбъектовРемонта);
	
	Если ДатаПланированияОкончание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НужныеГода = Новый ТаблицаЗначений;
	ТипГодГрафика = Новый Массив;
	ТипГодГрафика.Добавить(Тип("Число"));
	НужныеГода.Колонки.Добавить("ГодГрафика",Новый ОписаниеТипов(ТипГодГрафика), "ГодГрафика");
	НужныеГода.Добавить().ГодГрафика = Год(ТекущаяДата());
	
	Если НЕ ПроверитьЗаполненностьГрафика(ДатаПланирования,ДатаПланированияОкончание,НужныеГода, НужныеРемонты) Тогда
		Возврат Ложь;
	Иначе 
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьГрафика(ДатаПланированияНачало, ДатаПланированияОкончание, НужныеГода, НужныеРемонты)
	
	ГрафикЗаполнен = Истина;
	ТабПлановыйГрафикРаботы = Новый ТаблицаЗначений;
	ТабПлановыйГрафикРаботы.Колонки.Добавить("График", Новый ОписаниеТипов("СправочникСсылка.Календари"));
	НовСтрока = ТабПлановыйГрафикРаботы.Добавить();
	НовСтрока.График = Объект.ПлановыйГрафикРаботы;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта,
	|	торо_ТиповыеОРНормативныеРемонты.Ссылка КАК ТиповойОР,
	|	торо_ТиповыеОРНормативныеРемонты.НормативныйРемонт
	|ПОМЕСТИТЬ ВсеНормРемонтыТиповогоОР
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|ГДЕ
	|	торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НужныеРемонты.ВидРемонтныхРабот
	|ПОМЕСТИТЬ ВидыРемонтов
	|ИЗ
	|	&НужныеРемонты КАК НужныеРемонты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеНормРемонтыТиповогоОР.ВидРемонта,
	|	ВсеНормРемонтыТиповогоОР.ТиповойОР,
	|	ВсеНормРемонтыТиповогоОР.НормативныйРемонт
	|ПОМЕСТИТЬ НужныеРемонты
	|ИЗ
	|	ВсеНормРемонтыТиповогоОР КАК ВсеНормРемонтыТиповогоОР
	|ГДЕ
	|	ВсеНормРемонтыТиповогоОР.ВидРемонта В
	|			(ВЫБРАТЬ
	|				НужныеРемонты.ВидРемонтныхРабот
	|			ИЗ
	|				ВидыРемонтов КАК НужныеРемонты)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлановыйГрафикРаботы.График
	|ПОМЕСТИТЬ ПлановыйГрафикРаботы
	|ИЗ
	|	&ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеРемонты.ГрафикРемонтныхРабот
	|ПОМЕСТИТЬ ТабГрафиков
	|ИЗ
	|	НужныеРемонты КАК НужныеРемонты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|		ПО НужныеРемонты.ВидРемонта = торо_ТиповыеОРНормативныеРемонты.ВидРемонта
	|			И НужныеРемонты.ТиповойОР = торо_ТиповыеОРНормативныеРемонты.Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПлановыйГрафикРаботы.График
	|ИЗ
	|	ПлановыйГрафикРаботы КАК ПлановыйГрафикРаботы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабГрафиков.ГрафикРемонтныхРабот
	|ИЗ
	|	ТабГрафиков КАК ТабГрафиков";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ДатаПланированияНачало", ДатаПланированияНачало);
	Запрос.УстановитьПараметр("НужныеРемонты", НужныеРемонты);
	Запрос.УстановитьПараметр("ПлановыйГрафикРаботы", ТабПлановыйГрафикРаботы);
	
	Результат = Запрос.Выполнить();
	МассивГрафиков = Результат.Выгрузить().ВыгрузитьКолонку("ГрафикРемонтныхРабот");
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачалоДня(ДатаПланированияНачало), ДатаПланированияОкончание);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	|	НужныеГода.ГодГрафика
	|ПОМЕСТИТЬ НужныеГода
	|ИЗ
	|	&НужныеГода КАК НужныеГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабГрафиков.ГрафикРемонтныхРабот,
	|	НужныеГода.ГодГрафика
	|ПОМЕСТИТЬ ВремТабл
	|ИЗ
	|	ТабГрафиков КАК ТабГрафиков,
	|	НужныеГода КАК НужныеГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика) КАК ГодГрафика,
	|	СУММА(РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяНачала, ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ОсновноеЗначение
	|ПОМЕСТИТЬ ВТРасписанияРаботыИзм
	|ИЗ
	|	ВТРасписанияРаботы КАК ВТРасписанияРаботы
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписанияРаботы.ГрафикРаботы,
	|	ГОД(ВТРасписанияРаботы.ДатаГрафика)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВремТабл.ГрафикРемонтныхРабот КАК ГрафикРаботы,
	|	ВремТабл.ГодГрафика,
	|	ЕСТЬNULL(ВТРасписанияРаботыИзм.ОсновноеЗначение, 0) КАК ОсновноеЗначение
	|ИЗ
	|	ВремТабл КАК ВремТабл
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
	|		ПО ВремТабл.ГодГрафика = ВТРасписанияРаботыИзм.ГодГрафика
	|			И ВремТабл.ГрафикРемонтныхРабот = ВТРасписанияРаботыИзм.ГрафикРаботы";
	
	Запрос.УстановитьПараметр("НужныеГода", НужныеГода);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОсновноеЗначение = 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнен график %1 за %2 год'"),Выборка.ГрафикРаботы,Выборка.ГодГрафика));
			ГрафикЗаполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ГрафикЗаполнен;
	
КонецФункции

&НаСервере
Функция РассчитатьДатуОкончанияПланирования(ДатаПланирования, ТабПараметрыНаработкиОбъектовРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	торо_НормативныеРемонтыОборудования.СпособПланирования.ПериодичностьРемонтныхРабот КАК ПериодичностьРемонтныхРабот,
	|	торо_НормативныеРемонтыОборудования.СпособПланирования.КоличествоПериодов КАК КоличествоПериодов
	|ИЗ
	|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	|ГДЕ
	|	торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
	|	И торо_НормативныеРемонтыОборудования.ОбъектРемонта = &Ссылка
	|			И торо_НормативныеРемонтыОборудования.Приоритет";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВидРемонта", ВРНачалоЦикла);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Периодичность = Выборка.ПериодичностьРемонтныхРабот;
		КолПериодов = Выборка.КоличествоПериодов;
		
		Если Не ЗначениеЗаполнено(Периодичность) Или Не ЗначениеЗаполнено(КолПериодов) Тогда
			
			РассчитатьПоНаработке = ПроверитьЗаполненностьПараметровНаработки(ТабПараметрыНаработкиОбъектовРемонта);
			Если РассчитатьПоНаработке Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК Дата
				|ИЗ
				|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
				|ГДЕ
				|	КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
				|	И КалендарныеГрафики.Календарь = &График
				|	И КалендарныеГрафики.ДеньВключенВГрафик";
				
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
				Запрос.УстановитьПараметр("График", Объект.ПлановыйГрафикРаботы);
				
				Выборка = Запрос.Выполнить().Выбрать();
				
				Если Выборка.Следующий() Тогда
					КолвоРабДнейВМесяце = Выборка.Дата;
					Если КолвоРабДнейВМесяце = 0 Тогда
						торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнен плановый график работы за текущий месяц'"));
						Возврат Неопределено;
					КонецЕсли;
				КонецЕсли;
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ
				|	&Ссылка КАК ОбъектРемонта,
				|	ТабПараметрыНаработки.Показатель,
				|	ТабПараметрыНаработки.Период,
				|	ТабПараметрыНаработки.ПлановаяНаработка,
				|	ТабПараметрыНаработки.ПериодПлановойНаработки,
				|	ТабПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки,
				|	ТабПараметрыНаработки.КоэффициентИспользованияОборудования
				|ПОМЕСТИТЬ
				|	ТабПараметрыНаработки
				|ИЗ
				|	&ТабПараметрыНаработки КАК ТабПараметрыНаработки
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	МИНИМУМ(ВЫБОР                     
				|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
				|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
				|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
				|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 7
				|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
				|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 10
				|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
				|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 28
				|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
				|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 90
				|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
				|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 182
				|			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
				|				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 365
				|		КОНЕЦ) КАК МаксНаработкаВДень
				|ПОМЕСТИТЬ НаработкаВДень
				|ИЗ
				|	ТабПараметрыНаработки КАК торо_ПараметрыНаработкиОбъектовРемонта
				|ГДЕ
				|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КалендарныеГрафики.ДатаГрафика) КАК Дата
				|ПОМЕСТИТЬ КоличествоДнейВМесяце
				|ИЗ
				|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
				|ГДЕ
				|	КалендарныеГрафики.ДатаГрафика МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
				|	И КалендарныеГрафики.Календарь = &График
				|	И КалендарныеГрафики.ДеньВключенВГрафик
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки
				|ПОМЕСТИТЬ ПараметрНаработки
				|ИЗ
				|	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
				|		ПО торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = торо_НормативныеРемонтыОборудования.СпособПланирования
				|ГДЕ
				|	торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
				|	И торо_НормативныеРемонтыОборудования.ОбъектРемонта = &Ссылка
				|	И торо_НормативныеРемонтыОборудования.Приоритет
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ПараметрНаработки.ЗначениеПараметраНаработки / НаработкаВДень.МаксНаработкаВДень / КоличествоДнейВМесяце.Дата КАК МесяцевНаработки
				|ИЗ
				|	ПараметрНаработки КАК ПараметрНаработки,
				|	КоличествоДнейВМесяце КАК КоличествоДнейВМесяце,
				|	НаработкаВДень КАК НаработкаВДень";
				
				Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
				Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
				Запрос.УстановитьПараметр("График", Объект.ПлановыйГрафикРаботы);
				Запрос.УстановитьПараметр("ВидРемонта", ВРНачалоЦикла);
				Запрос.УстановитьПараметр("ТабПараметрыНаработки", ТабПараметрыНаработкиОбъектовРемонта);
				
				Выборка = Запрос.Выполнить().Выбрать();
				Если Выборка.Следующий() Тогда
					КолПериодов = Цел(Выборка.МесяцевНаработки) + 1;
					Периодичность = Перечисления.Периодичность.Месяц;
				КонецЕсли;
				
			Иначе
				Возврат Неопределено;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Периодичность = Перечисления.Периодичность.Год И ((Год(ДатаПланирования) + 3*КолПериодов) > 3999) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В способе планирования указано слишком большое значение периодичности. Проверьте настройки планирования!'"));
			Возврат Неопределено;                                                                                                                    
		КонецЕсли;
			
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(Периодичность) + ", " + Формат(?(КолПериодов = 0, 1, КолПериодов)*3,"ЧГ=0") + ") КАК ДатаОкончания";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаПланирования);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Возврат НачалоДня(Выборка.ДатаОкончания)-1;
		Иначе
			Возврат '39991231235959';
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьПараметровНаработки(ТабПараметрыНаработкиОбъектовРемонта)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта,
	|	торо_ТиповыеОРНормативныеРемонты.Ссылка КАК ТиповойОР
	|ПОМЕСТИТЬ РассчитываемыеПоНаработке
	|ИЗ
	|	Справочник.торо_ТиповыеОР.НормативныеРемонты КАК торо_ТиповыеОРНормативныеРемонты
	|ГДЕ
	|	торо_ТиповыеОРНормативныеРемонты.ВидРемонта = &ВР
	|	И торо_ТиповыеОРНормативныеРемонты.Ссылка = &Ссылка
	|	И торо_ТиповыеОРНормативныеРемонты.СпособПланирования.ИспользоватьПараметрыНаработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК ОбъектРемонта,
	|	ТабПараметрыНаработки.Показатель,
	|	ТабПараметрыНаработки.Период,
	|	ТабПараметрыНаработки.ПлановаяНаработка,
	|	ТабПараметрыНаработки.ПериодПлановойНаработки,
	|	ТабПараметрыНаработки.ПродолжительностьПериодаПлановойНаработки,
	|	ТабПараметрыНаработки.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ
	|	ТабПараметрыНаработки
	|ИЗ
	|	&ТабПараметрыНаработки КАК ТабПараметрыНаработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РассчитываемыеПоНаработке.ВидРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель
	|ПОМЕСТИТЬ ПараметрыПлановойНаработки
	|ИЗ
	|	РассчитываемыеПоНаработке КАК РассчитываемыеПоНаработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабПараметрыНаработки КАК торо_ПараметрыНаработкиОбъектовРемонта
	|		ПО (торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = РассчитываемыеПоНаработке.ТиповойОР)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыПлановойНаработки.ВидРемонта
	|ИЗ
	|	ПараметрыПлановойНаработки КАК ПараметрыПлановойНаработки
	|ГДЕ
	|	ПараметрыПлановойНаработки.Показатель ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("ВР", ВРНачалоЦикла);
	Запрос.УстановитьПараметр("ТабПараметрыНаработки", ТабПараметрыНаработкиОбъектовРемонта);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() > 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Проверьте заполненность показателей плановой наработки.'"));
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьТаблицуПараметровНаработки()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Период,
	|	0 КАК Приоритет,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ ПоказателиОР
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	|ГДЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРодителей.Приоритет,
	|	ТаблицаРодителей.Родитель
	|ПОМЕСТИТЬ ТаблицаРодителей
	|ИЗ
	|	&ТаблицаРодителей КАК ТаблицаРодителей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
	|	торо_ПараметрыНаработкиОбъектовРемонта.Период,
	|	ТаблицаРодителей.Приоритет,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
	|	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ ПоказателиГрупп
	|ИЗ
	|	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|					(ВЫБРАТЬ
	|						ТаблицаРодителей.Родитель
	|					ИЗ
	|						ТаблицаРодителей КАК ТаблицаРодителей)
	|				И НЕ Показатель В
	|						(ВЫБРАТЬ
	|							ПоказателиОР.Показатель
	|						ИЗ
	|							ПоказателиОР КАК ПоказателиОР)) КАК торо_ПараметрыНаработкиОбъектовРемонта
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаРодителей КАК ТаблицаРодителей
	|		ПО торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = ТаблицаРодителей.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОР.ОбъектРемонта,
	|	ПоказателиОР.Показатель,
	|	ПоказателиОР.Период,
	|	ПоказателиОР.Приоритет КАК Приоритет,
	|	ПоказателиОР.ПлановаяНаработка,
	|	ПоказателиОР.ПериодПлановойНаработки,
	|	ПоказателиОР.ПродолжительностьПериодаПлановойНаработки,
	|	ПоказателиОР.КоэффициентИспользованияОборудования
	|ПОМЕСТИТЬ ВсеПоказатели
	|ИЗ
	|	ПоказателиОР КАК ПоказателиОР
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПоказателиГрупп.ОбъектРемонта,
	|	ПоказателиГрупп.Показатель,
	|	ПоказателиГрупп.Период,
	|	ПоказателиГрупп.Приоритет,
	|	ПоказателиГрупп.ПлановаяНаработка,
	|	ПоказателиГрупп.ПериодПлановойНаработки,
	|	ПоказателиГрупп.ПродолжительностьПериодаПлановойНаработки,
	|	ПоказателиГрупп.КоэффициентИспользованияОборудования
	|ИЗ
	|	ПоказателиГрупп КАК ПоказателиГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Ссылка КАК ОбъектРемонта,
	|	ВсеПоказатели.Показатель,
	|	ВсеПоказатели.Период,
	|	ВсеПоказатели.Приоритет,
	|	ВсеПоказатели.ПлановаяНаработка,
	|	ВсеПоказатели.ПериодПлановойНаработки,
	|	ВсеПоказатели.ПродолжительностьПериодаПлановойНаработки,
	|	ВсеПоказатели.КоэффициентИспользованияОборудования
	|ИЗ
	|	ВсеПоказатели КАК ВсеПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВсеПоказатели.Показатель КАК Показатель,
	|			МИНИМУМ(ВсеПоказатели.Приоритет) КАК Приоритет
	|		ИЗ
	|			ВсеПоказатели КАК ВсеПоказатели
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВсеПоказатели.Показатель) КАК ВнутреннийЗапрос
	|		ПО ВсеПоказатели.Показатель = ВнутреннийЗапрос.Показатель
	|			И ВсеПоказатели.Приоритет = ВнутреннийЗапрос.Приоритет";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	СписокРодителей = ПолучитьСписокРодителейТиповогоОбъекта(Объект.Ссылка);
	ТаблицаРодителей = Новый ТаблицаЗначений;
	ТаблицаРодителей.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ТаблицаРодителей.Колонки.Добавить("Родитель", Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	СчетчикЦикла = СписокРодителей.Количество() - 1;
	Пока СчетчикЦикла >= 0 Цикл
		НоваяСтрокаТабл = ТаблицаРодителей.Добавить();
		НоваяСтрокаТабл.Родитель = СписокРодителей[СчетчикЦикла].Значение;
		НоваяСтрокаТабл.Приоритет = СчетчикЦикла + 1;
		СчетчикЦикла = СчетчикЦикла - 1;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаРодителей", ТаблицаРодителей);
	
	Результат = Запрос.Выполнить();
	ТаблицаПоказателей = Результат.Выгрузить();
	
	Возврат ТаблицаПоказателей;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокРодителейТиповогоОбъекта(знач Ссылка)
	
	СписокРодителей = Новый СписокЗначений;
	
	Пока ЗначениеЗаполнено(Ссылка.Родитель) цикл
		Ссылка=Ссылка.Родитель;
		СписокРодителей.Добавить(Ссылка)
	КонецЦикла;
	Возврат СписокРодителей;
	
КонецФункции

&НаСервере
Функция ПечатьНаСервере()
	
	ТабДок = Новый ТабличныйДокумент;
	
	ПолужирныйШрифт = Новый Шрифт("Arial", 9,ИСТИНА,,,);
	
	ОбластьДляЗаголовка = ТабДок.ПолучитьОбласть(1,2,4,17);
	ОбластьЗаголовок = ОбластьДляЗаголовка.Область(1,2,4,17);
	ОбластьЗаголовок.Объединить();
	ОбластьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьЗаголовок.Текст = НСтр("ru = 'Структура ремонтного цикла'");
	ОбластьЗаголовок.Шрифт = Новый Шрифт("Arial", 18, Истина);  
	ОбластьЗаголовок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	ОбластьЗаголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ТабДок.Вывести(ОбластьДляЗаголовка);
	
	ОбластьПараметров = ТабДок.ПолучитьОбласть(6,2,12, 17);
	
	ОбластьОРЗголовок = ОбластьПараметров.Область(2,2,2,17);
	ОбластьОРЗголовок.Объединить();
	ОбластьОРЗголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьОРЗголовок.Шрифт = ПолужирныйШрифт;
	ОбластьОРЗголовок.Текст = НСтр("ru = 'Объект ремонта: '") + торо_ЗаполнениеДокументов.ПолучитьПредоставленияОРДляПечати(Объект.Ссылка);
	ОбластьОРЗголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьГрафикЗаголовок = ОбластьПараметров.Область(3,2,3,17);
	ОбластьГрафикЗаголовок.Объединить();
	ОбластьГрафикЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьГрафикЗаголовок.Шрифт = ПолужирныйШрифт;
	ОбластьГрафикЗаголовок.Текст = НСтр("ru = 'Плановый график работы: '") + Объект.ПлановыйГрафикРаботы;
	ОбластьГрафикЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьНормироватьЗаголовок = ОбластьПараметров.Область(4,2,4,17);
	ОбластьНормироватьЗаголовок.Объединить();
	ОбластьНормироватьЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьНормироватьЗаголовок.Шрифт = ПолужирныйШрифт;
	ОбластьНормироватьЗаголовок.Текст = НСтр("ru = 'Нормировать интервалы между ремонтами: '") + ?(Нормировать, НСтр("ru = 'Да'"), НСтр("ru = 'Нет'"));
	ОбластьНормироватьЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьВРЗаголовок = ОбластьПараметров.Область(5,2,5,17);
	ОбластьВРЗаголовок.Объединить();
	ОбластьВРЗаголовок.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьВРЗаголовок.Шрифт = ПолужирныйШрифт;
	
	ПредставлениеПланируемыхРемонтов = "";
	Для Каждого ПланируемыйВР Из СписокВидовРемонтов Цикл
		ПредставлениеВР = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ПланируемыйВР.Значение);
		ПредставлениеПланируемыхРемонтов = ?(ПредставлениеПланируемыхРемонтов = "", ПредставлениеПланируемыхРемонтов, ПредставлениеПланируемыхРемонтов + "; ") + ПредставлениеВР;
	КонецЦикла;
	
	ОбластьВРЗаголовок.Текст = НСтр("ru = 'Планируемые виды ремонтов: '") + ПредставлениеПланируемыхРемонтов;
	ОбластьВРЗаголовок.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьВРЗаголовок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОбластьОтображВР = ОбластьПараметров.Область(6,2,6,17);
	ОбластьОтображВР.Объединить();
	ОбластьОтображВР.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
	ОбластьОтображВР.Шрифт = ПолужирныйШрифт;
	ОбластьОтображВР.ВертикальноеПоложение = ВертикальноеПоложение.Центр;
	ОбластьОтображВР.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	
	ОтображаемыеВР = Новый СписокЗначений;
	ОтображаемыеВРТекст = "";
	Для Каждого ЗапланированныйРемонт Из ЗапланированныеРемонты Цикл
		Если ЗапланированныйРемонт.Выбран Тогда
			ПредставлениеВР = торо_ЗаполнениеДокументов.ПолучитьПредоставленияВРДляПечати(ЗапланированныйРемонт.ВидРемонтныхРабот);
			ОтображаемыеВР.Добавить(ЗапланированныйРемонт.ВидРемонтныхРабот, ПредставлениеВР);
			ОтображаемыеВРТекст = ?(ОтображаемыеВРТекст = "", ОтображаемыеВРТекст, ОтображаемыеВРТекст + "; ") + ПредставлениеВР;
		КонецЕсли;
	КонецЦикла;
	ОбластьОтображВР.Текст = НСтр("ru = 'Отображаемые ремонты: '") + ОтображаемыеВРТекст;
	
	
	ТабДок.Вывести(ОбластьПараметров);
	
	ПолеМнемосхемы.ИспользоватьСетку = Ложь;
	ГрафСхема = ПолеМнемосхемы.ПолучитьКартинку();
	ПолеМнемосхемы.ИспользоватьСетку = Истина;
	
	ОбластьКартинка = ТабДок.ПолучитьОбласть(13,2,13,КолвоКолонок+1);
	Рис = Областькартинка.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рис.Картинка = ГрафСхема;
	Рис.РазмерКартинки  = РазмерКартинки.Пропорционально;
	Рис.Расположить(ТабДок.Область(2,2,2,КолвоКолонок+1));
	Рис.Высота = (50+ (90*КолСтрокСхемы) + 20)/4;
	Рис.ГраницаСверху = Ложь;
	Рис.ГраницаСлева = Ложь;
	рис.ГраницаСнизу = Ложь;
	Рис.ГраницаСправа = Ложь;
	
	ТабДок.Вывести(ОбластьКартинка);
	
	НарисоватьТаблицу(ТабДок);
	
	Для Каждого Элемент Из ОтображаемыеВР Цикл
		ОбластьРасшифровкаКода = ТабДок.ПолучитьОбласть(ТабДок.ВысотаТаблицы + 1 ,2,	ТабДок.ВысотаТаблицы + 2, 17);
		ОбластьКод = ОбластьРасшифровкаКода.Область(2,2,2, 17);
		ОбластьКод.Объединить();
		ОбластьКод.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Текст;
		ОбластьКод.Шрифт = Новый Шрифт("Arial", 9, Ложь);
		ОбластьКод.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьКод.Текст = СокрЛП(Элемент.Значение.Код) + " - " + Элемент.Значение;
		ТабДок.Вывести(ОбластьРасшифровкаКода);
	КонецЦикла;
	
	
	ТабДок.ОтображатьСетку = Ложь;
	табДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ТолькоПросмотр = Истина;
	ТабДок.КлючПараметровПечати = "торо_РемонтныеГруппы_Визуализация";
	ТабДок.ИмяПараметровПечати = "торо_РемонтныеГруппы_Визуализация";
	
	Возврат ТабДок;
	
КонецФункции

&НаСервере
Процедура НарисоватьТаблицу(ТабличныйДокумент)
	
	ПервичныйСдвигСтрок = ТабличныйДокумент.ВысотаТаблицы;
	
	ИндексСтроки = 8 + КолонкиНаработки.Количество() + 1;
	флВсеНарисовано = Ложь;
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	КоличествоРемонтов = ТаблицаРемонтовВизуализация.Количество() - 1;
	ШиринаПоляТД = 145;
	КоличествоКолонокПоляТД = 16;
	ЭтоПерваяЧастьТаблицы = Истина;
	
	Пока НЕ флВсеНарисовано Цикл
		
		Если КоличествоКолонокПоляТД = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Если КоличествоРемонтов + 1 >= КоличествоКолонокПоляТД Тогда
			ЧертитьКолонок = КоличествоКолонокПоляТД;
			КоличествоРемонтов = КоличествоРемонтов - КоличествоКолонокПоляТД + 1;
		Иначе 
			ЧертитьКолонок = КоличествоРемонтов + 2;
			флВсеНарисовано = Истина;
		КонецЕсли;
		
		ОбластьВывода = ТабличныйДокумент.Область(1,1,1,1);
		ОбластьВывода.ширинаКолонки = 4;
		
		ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок+1 );
		ОбластьВывода.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная,1);
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		
		ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД,ЧертитьКолонок);
		ОбластьВывода.ШиринаКолонки = 8;
		
		
		ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД,2,6 + ИндексСтроки - 7 + СдвигСтрокПоляТД+1);
		ОбластьВывода.ШиринаКолонки = 20;
		ОбластьВывода.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ОбластьВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
		Если НЕ ЭтоПерваяЧастьТаблицы Тогда
			ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД - 1, 2);
			ОбластьВывода.Текст = "Продолжение";
		КонецЕсли;
		ЭтоПерваяЧастьТаблицы = Ложь;
		ОбластьВывода = ТабличныйДокумент.Область(3 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Вид ремонта"; 
		ОбластьВывода = ТабличныйДокумент.Область(4 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Продолжительность (ч)"; 
		ОбластьВывода = ТабличныйДокумент.Область(5+СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Тек. рабочие дни (от предшествующего)";
		ОбластьВывода = ТабличныйДокумент.Область(6 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Тек. календарные дни (от предшествующего)";
		ОбластьВывода = ТабличныйДокумент.Область(7 + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Время работы (от предшествующего того же вида)";
		
		
		ДопИндекс = 0;
		Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
			
			ОбластьВывода = ТабличныйДокумент.Область(8 + ДопИндекс + СдвигСтрокПоляТД, 2);
			ОбластьВывода.Текст = ПолучитьНаименованиеПоказателя(КолонкаНаработки.Показатель) + " (" + ?(КолонкаНаработки.ПредшествующийТогоЖеВида, "от предшествующего того же вида", "от предшествующего") + ")";	 
			ДопИндекс = ДопИндекс + 1;
		КонецЦикла;
		
		ОбластьВывода = ТабличныйДокумент.Область(8 + ДопИндекс + СдвигСтрокПоляТД, 2);
		ОбластьВывода.Текст = "Рассчитан по наработке";
		
		СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
	КонецЦикла;
	
	СдвигСтрокПоляТД = ПервичныйСдвигСтрок;
	Номер = 1;
	
	Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
		ДатаНачПервого = ТаблицаРемонтовВизуализация[0].ДатаНач;
	КонецЕсли;
	Для Каждого СтрокаРемонта Из ТаблицаРемонтовВизуализация Цикл
		Если Не ЗначениеЗаполнено(СтрокаРемонта.ВидРемонтныхРабот) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаПоследнего = СтрокаРемонта.ДатаКон;
		
		ОбластьВывода = ТабличныйДокумент.Область(3+ СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода.Текст = СтрокаРемонта.ВидРемонтныхРабот.Код;
		
		ОбластьВывода2 = ТабличныйДокумент.Область(4 + СдвигСтрокПоляТД,Номер + 2);
		Продолжительность = Формат((СтрокаРемонта.Продолжительность) / 3600,"ЧДЦ=1"); 
		ОбластьВывода2.Текст = ?(СтрокаРемонта.НеУчитыватьПродолжительность,"(","") + Продолжительность + ?(СтрокаРемонта.НеУчитыватьПродолжительность,")","");   // продолжительность (часов)
		
		ОбластьВывода2 = ТабличныйДокумент.Область(5 + СдвигСтрокПоляТД,Номер + 2);
		ОбластьВывода2.Текст = СтрокаРемонта.Дни; 	// рабочих дней от предыдущего 
		
		ОбластьВывода2 = ТабличныйДокумент.Область(6 + СдвигСтрокПоляТД,Номер + 2);
		РазностьДат = (СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / 86400;
		ОбластьВывода2.Текст = ?(РазностьДат > 0,РазностьДат - 1, 0); 	// календарных дней от предыдущего
		
		ОбластьВывода2 = ТабличныйДокумент.Область(7 + СдвигСтрокПоляТД, Номер + 2);
		ОбластьВывода2.Текст = СтрокаРемонта.ДниОтПредшествующего; // рабочих дней от предшествующего того же вида 
		
		
		ДопИндекс = 0;
		Для Каждого КолонкаНаработки из КолонкиНаработки Цикл
			ИмяКолонки = КолонкаНаработки.ИмяКолонки;	
			
			СтрокиНаработки = ЗначенияНаработки.НайтиСтроки(Новый Структура("ID, ВидРемонтныхРабот, Показатель", СтрокаРемонта.ID, СтрокаРемонта.ВидРемонтныхРабот, ИмяКолонки));
			
			Если СтрокиНаработки.Количество() Тогда
				СтрНар = СтрокиНаработки[0];
				
				ОбластьВывода2 = ТабличныйДокумент.Область(8 + ДопИндекс + СдвигСтрокПоляТД,Номер + 2);
				ОбластьВывода2.Текст = СтрНар.Значение;
				
				// очередная наработка 
				ДопИндекс = ДопИндекс + 1;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбластьВывода2 = ТабличныйДокумент.Область(8 + ДопИндекс + СдвигСтрокПоляТД, Номер + 2);
		ОбластьВывода2.Текст = ?(СтрокаРемонта.РассчитанПоПериодичности = Ложь, "v", "");
		
		Номер = Номер + 1;
		
		Если Не (ТабличныйДокумент.ТекущаяОбласть = Неопределено) И (ОбластьВывода2.Лево)*9 > ШиринаПоляТД Тогда 
			СдвигСтрокПоляТД = СдвигСтрокПоляТД + ИндексСтроки - 1;
			Номер = 1;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИсториюПеремещения()
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Период,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Регистратор,
		|	0 КАК НомерСтроки,		
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = &ОбъектИерархии
		|	И торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии = &СтруктураИерархии";
 
	Запрос.УстановитьПараметр("ОбъектИерархии", Объект.Ссылка);
	Запрос.УстановитьПараметр("СтруктураИерархии", ВыборВидаИерархииИстория);

	ИсторияПеремещенияОборудования.Загрузить(Запрос.Выполнить().Выгрузить());
	парам = 0;
	Для Каждого ТекСтрока Из ИсторияПеремещенияОборудования Цикл
		парам = парам + 1;
		ТекСтрока.НомерСтроки = парам;
	КонецЦикла;	
	
КонецФункции

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Если ДатаНачала < Объект.ДатаВводаВЭксплуатацию Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата начала меньше, чем дата ввода в эксплуатацию объекта ремонта'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбъектРемонтаКопированиемЗавершение(Список1, ДополнительныеПараметры) Экспорт
    
    СписокПараметровКопирования = ДополнительныеПараметры.СписокПараметровКопирования;
	РодительИерархииДляКопирования = ДополнительныеПараметры.РодительИерархии;
	СтруктураИерархииДляКопирования = ДополнительныеПараметры.СтруктураИерархии;
	
	Если Список1 = Неопределено Тогда
		Возврат;
	Иначе
        СписокОбхода = СписокПараметровКопирования.Скопировать();
        Для каждого ЭлементСписка Из СписокОбхода Цикл
            Если НЕ ЭлементСписка.Пометка Тогда
                СписокПараметровКопирования.Удалить(СписокПараметровКопирования.НайтиПоЗначению(ЭлементСписка.Значение));
            КонецЕсли;
        КонецЦикла;

    КонецЕсли;
    
    СоздатьОбъектРемонтаКопированиемФрагмент(РодительИерархииДляКопирования, СписокПараметровКопирования, СтруктураИерархииДляКопирования);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбъектРемонтаКопированиемФрагмент(Знач РодительИерархииДляКопирования, Знач СписокПараметровКопирования, Знач СтруктураИерархииДляКопирования)
    
    Перем Инф;
    
    Если СписокПараметровКопирования.Количество() Тогда 
		ТекстВопроса = НСтр("ru = 'Для копирования выбранных параметров необходимо записать новый объект ремонта. Записать?
			|(В случае отказа параметры не будут скопированы.)'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьОбъектРемонтаКопированиемФрагментЗавершение", ЭтаФорма, Новый Структура("РодительИерархии, СписокПараметровКопирования, СтруктураИерархии", РодительИерархииДляКопирования, СписокПараметровКопирования, СтруктураИерархииДляКопирования)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
    КонецЕсли;
    СоздатьОбъектРемонтаКопированиемФрагментФрагмент(РодительИерархииДляКопирования, СписокПараметровКопирования, СтруктураИерархииДляКопирования);
КонецПроцедуры


&НаКлиенте
Процедура СоздатьОбъектРемонтаКопированиемФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    СписокПараметровКопирования = ДополнительныеПараметры.СписокПараметровКопирования;
	РодительИерархииДляКопирования = ДополнительныеПараметры.РодительИерархии;
	СтруктураИерархииДляКопирования = ДополнительныеПараметры.СтруктураИерархии;
	
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        СписокПараметровКопирования.Очистить();
    КонецЕсли;
    
    СоздатьОбъектРемонтаКопированиемФрагментФрагмент(РодительИерархииДляКопирования, СписокПараметровКопирования, СтруктураИерархииДляКопирования);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбъектРемонтаКопированиемФрагментФрагмент(Знач РодительИерархииДляКопирования, Знач СписокПараметровКопирования, Знач СтруктураИерархииДляКопирования)
	
	Перем Инф;
	
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", Новый Структура("СписокПараметровКопирования, ПараметрКопирования, СтруктураИерархии, РодительИерархии, СозданКопированием", СписокПараметровКопирования, Объект.Ссылка, СтруктураИерархииДляКопирования, РодительИерархииДляКопирования, Истина), ЭтаФорма);
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляКопирования(ОбъектРемонта)
	
	ДанныеДляКопирования = Новый Структура("ФОУчетЗапчастей, ФОУчетКонтролируемыхПоказателей, ФОУчетНаработкиОборудования",
					  ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей"),
					  ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей"),
					  ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования"));
	ДанныеДляКопирования.Вставить("ИерархияДляВводаНовыхОР", Константы.торо_ИерархияДляВводаНовыхОР.Получить());
	
	ДанныеДляКопирования.Вставить("РодительИерархии", НайтиРодителяИерархии(ДанныеДляКопирования.ИерархияДляВводаНовыхОР, ОбъектРемонта));
	
	Возврат ДанныеДляКопирования;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиРодителяИерархии(Иерархия, ОбъектРемонта)
	
	Запрос = Новый Запрос;
	
	Если Иерархия.ИзменяетсяДокументами Тогда
		Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			       
			               |ИЗ
			               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии И ОбъектИерархии = &ОбъектРемонта) КАК торо_ИерархическиеСтруктурыОР
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ";

	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			              
			               |ИЗ
			               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			               |	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии = &ОбъектРемонта";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", Иерархия);
	Запрос.УстановитьПараметр("ОбъектРемонта"    , ОбъектРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РодительИерархии;
	Иначе
		Возврат Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция УстановитьОтборДляТЧТабЗатратПоВидамРемонта(ТекущаяНоменклатура, ТекущаяХарактеристика)
	
	Если Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка = Истина Тогда
		Струк = Новый Структура("Номенклатура, Характеристика", ТекущаяНоменклатура, ТекущаяХарактеристика);
	Иначе
		Струк = Новый Структура("Номенклатура, Характеристика, Удален", 
			ТекущаяНоменклатура, ТекущаяХарактеристика, Элементы.ТабЗапчастейОбъектовРемонтаПоказыватьУдаленныеЗапчасти.Пометка);
	КонецЕсли;
	СтруктураОтбора = Новый ФиксированнаяСтруктура(Струк);
	
	возврат СтруктураОтбора;
	
КонецФункции

&НаКлиенте
Процедура ИсторияПеремещенияОборудования1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(,Элемент.ТекущиеДанные.Регистратор);
	КонецЕсли;
КонецПроцедуры

#Область РаботаСИзображением

&НаКлиенте
Процедура ДобавитьИзображениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Записать();
    Иначе 
        Возврат
    КонецЕсли;
    
    
    ДобавитьИзображениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеФрагмент()
    
    ВыборИзображения = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла,ФильтрФайловИзображений());
    ВыборИзображения = Ложь;

КонецПроцедуры

&НаКлиенте
Процедура ПросмотретьПрисоединенныйФайл(ИмяРеквизитаОбъекта, ИмяРеквизитаФормы, ТекстСообщенияОбОшибке)
	
	ОчиститьСообщения();
	
	Если ЗначениеЗаполнено(Объект[ИмяРеквизитаОбъекта]) Тогда
		ПрисоединенныеФайлыКлиент.ОткрытьФайл(
			ПрисоединенныеФайлыСлужебныйВызовСервера.ПолучитьДанныеФайла(
				ЭтаФорма.Объект[ИмяРеквизитаОбъекта],
				УникальныйИдентификатор));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщенияОбОшибке,, ИмяРеквизитаФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьКартинкуИзПрисоединенныхФайловЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ЗначениеВыбора = Результат;
    
    Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
        
        Объект.ФайлКартинки = ЗначениеВыбора;
        АдресКартинки = НавигационнаяСсылкаКартинки(Объект.ФайлКартинки, УникальныйИдентификатор)
        
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НавигационнаяСсылкаКартинки(ФайлКартинки, ИдентификаторФормы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		АдресКартинки = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ФайлКартинки, ИдентификаторФормы).СсылкаНаДвоичныеДанныеФайла;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		АдресКартинки = "";
	КонецПопытки;
	
	Возврат АдресКартинки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиенте()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = НСтр("ru='Для выбора изображения необходимо записать объект. Записать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьИзображениеНаКлиентеЗавершение", ЭтотОбъект), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьИзображениеНаКлиентеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Если Не Записать() Тогда
            Возврат;
        КонецЕсли;
    Иначе
        Возврат;
    КонецЕсли;
    
    
    ДобавитьИзображениеНаКлиентеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзображениеНаКлиентеФрагмент()
    
    Перем ИдентификаторФайла;
    
    ВыборИзображения   = Истина;
    ИдентификаторФайла = Новый УникальныйИдентификатор;
    
    ПрисоединенныеФайлыКлиент.ДобавитьФайлы(Объект.Ссылка, ИдентификаторФайла, ФильтрФайловИзображений());
    ВыборИзображения   = Ложь;

КонецПроцедуры

&НаКлиенте
// Возвращает фильтр, используемый для выбора файлов-изображений.
// Возвращаемое значение:
// Строка - строка, содержащая фильтр для файлов-изображений.
//
Функция ФильтрФайловИзображений()
	Возврат НСтр("ru = 'Все картинки (*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf)|*.bmp;*.gif;*.png;*.jpeg;*.dib;*.rle;*.tif;*.jpg;*.ico;*.wmf;*.emf"
		                            + "|Все файлы(*.*)|*.*"
		                            + "|Формат bmp(*.bmp*;*.dib;*.rle)|*.bmp;*.dib;*.rle"
		                            + "|Формат GIF(*.gif*)|*.gif"
		                            + "|Формат JPEG(*.jpeg;*.jpg)|*.jpeg;*.jpg"
		                            + "|Формат PNG(*.png*)|*.png"
		                            + "|Формат TIFF(*.tif)|*.tif"
		                            + "|Формат icon(*.ico)|*.ico"
		                            + "|Формат метафайл(*.wmf;*.emf)|*.wmf;*.emf'");
КонецФункции

&НаКлиенте
Процедура НормативныеРемонтыНормативныйРемонтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Справочник.торо_ИдентификаторыТехКарт.ФормаВыбора", Новый Структура("ОтборПоСтатусам", ПредопределенноеЗначение("Перечисление.торо_СтатусыНормативныхРемонтовИТехКарт.Действует")), Элемент);
		
КонецПроцедуры

&НаКлиенте
Функция НайтиСвязанныеСтроки(ВидРемонта,ТиповойОР)
	
	СтруктураВозврата = Новый Структура("МассивУдаляемыхСтрокПредшествующиеРемонты,
			|МассивУдаляемыхСтрокЗамещаемыеРемонты,МассивУдаляемыхСтрокТабЗатратПоВидамРемонта,МассивУдаляемыхСтрокЗапланированныеРемонты,
			|МассивУдаляемыхСтрокОсновноеОборудование,МассивУдаляемыхСтрокЗависимоеОборудование,МассивУдаляемыхСтрокВидыРемонтаЭтогоОбъекта,
			|МассивУдаляемыхСтрокВидыРемонтаОсновногоСвязанного",
			Новый Массив,Новый Массив,Новый Массив,Новый Массив,Новый Массив,Новый Массив,Новый Массив,Новый Массив);
			
			
	МассивУдаляемыхСтрокПредшествующиеРемонты = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ВидРемонта, ТиповойОР", ВидРемонта, ТиповойОР));
	МассивУдаляемыхСтрокЗамещаемыеРемонты = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ВидРемонта,ТиповойОР", ВидРемонта, ТиповойОР));
	
	КолНормРемонтов = НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта,Удален",ВидРемонта,Ложь)).Количество();
	Если КолНормРемонтов = 1 Тогда
		
		ЕщеУдаляемыеСтрокиПредшествующиеРемонты = ПредшествующиеРемонты.НайтиСтроки(Новый Структура("ПредшествующийВидРемонта", ВидРемонта));
		
		Для каждого Эл Из ЕщеУдаляемыеСтрокиПредшествующиеРемонты Цикл
			Если МассивУдаляемыхСтрокПредшествующиеРемонты.Найти(Эл) = Неопределено Тогда
				МассивУдаляемыхСтрокПредшествующиеРемонты.Добавить(Эл);
			КонецЕсли;
		КонецЦикла;
		
		ЕщеУдаляемыеСтрокиЗамещаемыеРемонты = ЗамещаемыеРемонты.НайтиСтроки(Новый Структура("ЗамещаемыйВидРемонта", ВидРемонта));
		
		Для каждого Эл Из ЕщеУдаляемыеСтрокиЗамещаемыеРемонты Цикл
			Если МассивУдаляемыхСтрокЗамещаемыеРемонты.Найти(Эл) = Неопределено Тогда
				МассивУдаляемыхСтрокЗамещаемыеРемонты.Добавить(Эл);
			КонецЕсли;
		КонецЦикла;
		
		СтруктураВозврата.МассивУдаляемыхСтрокТабЗатратПоВидамРемонта = ТабЗатратПоВидамРемонта.НайтиСтроки(Новый Структура("ВидРемонта", ВидРемонта));
		СтруктураВозврата.МассивУдаляемыхСтрокЗапланированныеРемонты = ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", ВидРемонта));
        СтруктураВозврата.МассивУдаляемыхСтрокОсновноеОборудование           = ОсновноеОборудование.НайтиСтроки(          Новый Структура("ВидРемонтаЗависимогоОбъекта", ВидРемонта));
        СтруктураВозврата.МассивУдаляемыхСтрокЗависимоеОборудование          = ЗависимоеОборудование.НайтиСтроки(         Новый Структура("ВидРемонтаОсновногоОбъекта", ВидРемонта));
        СтруктураВозврата.МассивУдаляемыхСтрокВидыРемонтаЭтогоОбъекта        = ВидыРемонтаЭтогоОбъекта.НайтиСтроки(       Новый Структура("ВидРемонта", ВидРемонта));
        СтруктураВозврата.МассивУдаляемыхСтрокВидыРемонтаОсновногоСвязанного = ВидыРемонтаОсновногоСвязанного.НайтиСтроки(Новый Структура(?(ВыбраноОсновное,"ВидРемонтаОсновногоОбъекта","ВидРемонтаЗависимый"), ВидРемонта));
		
	КонецЕсли;
	
	СтруктураВозврата.МассивУдаляемыхСтрокПредшествующиеРемонты = МассивУдаляемыхСтрокПредшествующиеРемонты;
	СтруктураВозврата.МассивУдаляемыхСтрокЗамещаемыеРемонты = МассивУдаляемыхСтрокЗамещаемыеРемонты;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура НормативныеРемонтыПередУдалениемЗавершение(Результат,ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокПредшествующиеРемонты Цикл
			ПредшествующиеРемонты.Удалить(Элем);
			МодифицированностьПредшествующихРемонтов = Истина;
		КонецЦикла;
		
		Для каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокЗамещаемыеРемонты Цикл
			ЗамещаемыеРемонты.Удалить(Элем);
			МодифицированностьЗамещаемыхРемонтов = Истина;
		КонецЦикла;
		
		Для каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокТабЗатратПоВидамРемонта Цикл
			ТабЗатратПоВидамРемонта.Удалить(Элем);
			МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
			МодифицированностьЗапчастейОР = Истина;
			Модифицированность = Истина;
		КонецЦикла;
		
		Для каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокЗапланированныеРемонты Цикл
			ЗапланированныеРемонты.Удалить(Элем);
		КонецЦикла;
		
		Для Каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокОсновноеОборудование Цикл
			ОсновноеОборудование.Удалить(Элем);
			МодифицированностьОсновныхЗависимых = Истина;
			Модифицированность = Истина;
		КонецЦикла;
		
		Для Каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокВидыРемонтаЭтогоОбъекта Цикл
			ВидыРемонтаЭтогоОбъекта.Удалить(Элем);
			МодифицированностьОсновныхЗависимых = Истина;
			Модифицированность = Истина;
		КонецЦикла;
		
		Для Каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокЗависимоеОборудование Цикл
			ЗависимоеОборудование.Удалить(Элем);
			МодифицированностьОсновныхЗависимых = Истина;
			Модифицированность = Истина;
		КонецЦикла;
		
		Для Каждого Элем Из ДополнительныеПараметры.МассивУдаляемыхСтрокВидыРемонтаОсновногоСвязанного Цикл
			ВидыРемонтаОсновногоСвязанного.Удалить(Элем);
			МодифицированностьОсновныхЗависимых = Истина;
			Модифицированность = Истина;
		КонецЦикла;
				
		Если ЗначениеЗаполнено(ДополнительныеПараметры.ТекДанные.ТиповойОР) Тогда
			ДополнительныеПараметры.ТекДанные.Удален = Истина;
			УстановитьОтборНеИспользуемыхСтрок(Элементы.НормативныеРемонтыПоказыватьУдаленныеНормативы.Пометка,"НормативныеРемонты");
		Иначе
			НормативныеРемонты.Удалить(ДополнительныеПараметры.ТекДанные);
		КонецЕсли;
		
		МодифицированностьНормРемонтов = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьНоменклатуруИзПодбора(Адрес)
	
	Тз = ПолучитьИзВременногоХранилища(Адрес);
	СтруктураДействий = Новый Структура;
	Для каждого текСтрока из Тз Цикл
		
		НайС = ТабЗапчастейОбъектовРемонта.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", текСтрока.Номенклатура, текСтрока.Характеристика));
		КоэфУпаковкиВыбр = ?(ЗначениеЗаполнено(текСтрока.Упаковка), текСтрока.Упаковка.Коэффициент, 1);

		Если НайС.Количество() = 0 Тогда
			нс = ТабЗапчастейОбъектовРемонта.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
			нс.Количество = текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
			нс.ОбъектРемонта = Параметры.Ключ; 
		Иначе
			выбСтрока = НайС[0];
			выбСтрока.Количество = выбСтрока.Количество + текСтрока.КоличествоУпаковок * КоэфУпаковкиВыбр;
		КонецЕсли;
		
	КонецЦикла;
	
	МодифицированностьЗапчастейОР = Истина;
	МодифицированностьНормативныхЗатратПоЗапчастям = Истина;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьЗапчастиИзТиповогоОР(ТиповойОР)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ТиповыеОРЗапчасти.Номенклатура,
	               |	торо_ТиповыеОРЗапчасти.Количество,
	               |	торо_ТиповыеОРЗапчасти.Характеристика,
	               |	торо_ТиповыеОРЗапчасти.Качество
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.Запчасти КАК торо_ТиповыеОРЗапчасти
	               |ГДЕ
	               |	торо_ТиповыеОРЗапчасти.Ссылка = &ТиповойОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Номенклатура,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.ВидРемонта,
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Количество,
				   |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Характеристика
	               |ИЗ
	               |	Справочник.торо_ТиповыеОР.НормативныеЗатратыПриТОиР КАК торо_ТиповыеОРНормативныеЗатратыПриТОиР
	               |ГДЕ
	               |	торо_ТиповыеОРНормативныеЗатратыПриТОиР.Ссылка = &ТиповойОР";
	   
	Запрос.УстановитьПараметр("ТиповойОР", ТиповойОР);
	
	Результат = Запрос.ВыполнитьПакет();
	стрВозврата = Новый Структура;
	
	Если НЕ Результат[0].Пустой() Тогда
		Выборка = Результат[0].Выбрать();
		мВозврата = Новый массив;
		
		Пока Выборка.Следующий() Цикл
			мВозврата.Добавить(Новый Структура("Номенклатура, Количество, Характеристика, Качество",
				Выборка.Номенклатура, Выборка.Количество, Выборка.Характеристика, Выборка.Качество));
		КонецЦикла;
			
		стрВозврата.Вставить("Запчасти", мВозврата);
	КонецЕсли;
	
	Если НЕ Результат[1].Пустой() Тогда
		Выборка = Результат[1].Выбрать();
		мВозврата = Новый массив;
		
		Пока Выборка.Следующий() Цикл
			мВозврата.Добавить(Новый Структура("Номенклатура, Количество, ВидРемонта, Характеристика",
				Выборка.Номенклатура, Выборка.Количество, Выборка.ВидРемонта, Выборка.Характеристика));
		КонецЦикла;
			
		стрВозврата.Вставить("НормативныеЗатраты", мВозврата);
	КонецЕсли;
	
	возврат стрВозврата;
		
КонецФункции

&НаСервере
Функция ПолучитьХарактеристикиИспользуются(Номенклатура)
	
	Возврат НЕ Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать = Номенклатура.ИспользованиеХарактеристик;
	
КонецФункции

#Область ДопРеквизиты

&НаСервере
Процедура УнаследоватьДопРеквизитыИзТиповогоОР()
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТиповойОР) Тогда
		СписокЗаполненныхСвойств = Новый массив;
		Для каждого СтрокаДопРеквизита из Объект.ДополнительныеРеквизиты Цикл
			Если ЗначениеЗаполнено(СтрокаДопРеквизита.Значение) Тогда
				СписокЗаполненныхСвойств.Добавить(СтрокаДопРеквизита.Свойство);
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ПолучитьТекстЗапросаДляНаследованияДопРеквизитов();
		
		Запрос.УстановитьПараметр("ТиповойОР", Объект.ТиповойОР);
		Запрос.УстановитьПараметр("Свойства", СписокЗаполненныхСвойств);
		
		ВыборкаСвойств = Запрос.Выполнить().Выбрать();
		Пока ВыборкаСвойств.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(ВыборкаСвойств.Значение) Тогда
				Продолжить;
			Конецесли;
			
			СтрокаОписания = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство", ВыборкаСвойств.Свойство));
			Если СтрокаОписания.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			СтрокаОписания = СтрокаОписания[0];
			
			НовСтр = УнаследованныеДопРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаСвойств);
			НовСтр.ИмяРеквизитаЗначение = СтрокаОписания.ИмяРеквизитаЗначение;
			
			Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
				СтрокиТаблицы = ЭтаФорма.Свойства_ЗначенияДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство", ВыборкаСвойств.Свойство));
				Для каждого ТекущиеДанные из СтрокиТаблицы Цикл 
					ТекущиеДанные.Значение = ВыборкаСвойств.Значение;
					ТекущиеДанные.ЭтоУнаследованный = Истина;
				КонецЦикла;
			Иначе
				ЭтаФорма[СтрокаОписания.ИмяРеквизитаЗначение] = ВыборкаСвойств.Значение;
				УстановитьОформлениеДопРеквизита(ЭтаФорма.Элементы[СтрокаОписания.ИмяРеквизитаЗначение], Истина);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтеретьЗначенияУнаследованныхРеквизитовТиповогоОР()
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
		
		Для каждого ТекущиеДанные из ЭтаФорма.Свойства_ЗначенияДополнительныхРеквизитов Цикл
			Если ТекущиеДанные.ЭтоУнаследованный Тогда
				ТекущиеДанные.ЭтоУнаследованный = Ложь;
				ТекущиеДанные.Значение = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Для каждого СтрокаДопРеквизита из УнаследованныеДопРеквизиты Цикл
			Если ЭтаФорма[СтрокаДопРеквизита.ИмяРеквизитаЗначение] = СтрокаДопРеквизита.Значение Тогда
				ЭтаФорма[СтрокаДопРеквизита.ИмяРеквизитаЗначение] = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	УнаследованныеДопРеквизиты.Очистить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапросаДляНаследованияДопРеквизитов()
	
	Текст = "ВЫБРАТЬ
	|	торо_ТиповыеОРДополнительныеРеквизиты.Ссылка КАК Источник,
	|	торо_ТиповыеОРДополнительныеРеквизиты.Свойство,
	|	торо_ТиповыеОРДополнительныеРеквизиты.Значение
	|ИЗ
	|	Справочник.торо_ТиповыеОР.ДополнительныеРеквизиты КАК торо_ТиповыеОРДополнительныеРеквизиты
	|ГДЕ
	|	торо_ТиповыеОРДополнительныеРеквизиты.Ссылка = &ТиповойОР
	|	И НЕ торо_ТиповыеОРДополнительныеРеквизиты.Свойство В (&Свойства)";
	
	Возврат Текст;
	
КонецФункции

&НаСервере
Процедура ПривязатьОбработчикИзмененияДопРеквизитов()
	
	Если ПолучитьФункциональнуюОпциюФормы("ИспользоватьДополнительныеРеквизитыИСведения") <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
		
		Элемент = Элементы.Свойства_ЗначенияДополнительныхРеквизитовЗначение;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ДополнительныйРеквизитПриИзменении");
		Элемент.УстановитьДействие("Очистка", "Подключаемый_ДополнительныйРеквизитОчистка");
		
	Иначе
		
		Для каждого ОписаниеДопРеквизита из ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов Цикл
			Элемент = ЭтаФорма.Элементы[ОписаниеДопРеквизита.ИмяРеквизитаЗначение];
			Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ДополнительныйРеквизитПриИзменении");
			Попытка
				Элемент.КнопкаОчистки = Истина;
				Элемент.УстановитьДействие("Очистка", "Подключаемый_ДополнительныйРеквизитОчистка");
			Исключение
			КонецПопытки;
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДополнительныйРеквизитПриИзменении(Элемент)

	Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
		
		ТекущиеДанные = Элементы.Свойства_ЗначенияДополнительныхРеквизитов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаУнаследованного = УнаследованныеДопРеквизиты.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
			
			Если СтрокаУнаследованного.Количество() > 0 Тогда
				СтрокаУнаследованного = СтрокаУнаследованного[0];
				ТекущиеДанные.ЭтоУнаследованный = (ТекущиеДанные.Значение = СтрокаУнаследованного.Значение);
			КонецЕсли;
		КонецЕсли;
	
	Иначе
		
		ИмяРеквизитаЗначение = Элемент.Имя;
		СтрокаУнаследованного = УнаследованныеДопРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ИмяРеквизитаЗначение));
		
		Если СтрокаУнаследованного.Количество() > 0 Тогда
			СтрокаУнаследованного = СтрокаУнаследованного[0];
			ЭтоУнаследованный = (ЭтаФорма[ИмяРеквизитаЗначение] = СтрокаУнаследованного.Значение);
			УстановитьОформлениеДопРеквизита(Элемент, ЭтоУнаследованный);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДополнительныйРеквизитОчистка(Элемент, СтандартнаяОбработка)

	Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
		
		ТекущиеДанные = Элементы.Свойства_ЗначенияДополнительныхРеквизитов.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			СтрокаУнаследованного = УнаследованныеДопРеквизиты.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
			
			Если СтрокаУнаследованного.Количество() > 0 Тогда
				СтандартнаяОбработка = Ложь;
				СтрокаУнаследованного = СтрокаУнаследованного[0];
				ТекущиеДанные.Значение = СтрокаУнаследованного.Значение;
				ТекущиеДанные.ЭтоУнаследованный = Истина;
			Иначе
				СтрокаОписания = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("Свойство", ТекущиеДанные.Свойство));
				Если СтрокаОписания.Количество() = 0 Тогда
					Возврат;
				КонецЕсли;
				СтрокаОписания = СтрокаОписания[0];
				
				УнаследоватьРеквизитЕслиВозможно(СтрокаОписания.ИмяРеквизитаЗначение, СтрокаОписания.Свойство, СтандартнаяОбработка, ТекущиеДанные.ПолучитьИдентификатор());
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ИмяРеквизитаЗначение = Элемент.Имя;
		СтрокаУнаследованного = УнаследованныеДопРеквизиты.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ИмяРеквизитаЗначение));
		Если СтрокаУнаследованного.Количество() > 0 Тогда
			СтандартнаяОбработка = Ложь;
			СтрокаУнаследованного = СтрокаУнаследованного[0];
			ЭтаФорма[ИмяРеквизитаЗначение] = СтрокаУнаследованного.Значение;
			УстановитьОформлениеДопРеквизита(Элемент, Истина);
		Иначе
			СтрокаОписания = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(Новый Структура("ИмяРеквизитаЗначение", ИмяРеквизитаЗначение));
			Если СтрокаОписания.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			СтрокаОписания = СтрокаОписания[0];
			
			УнаследоватьРеквизитЕслиВозможно(ИмяРеквизитаЗначение, СтрокаОписания.Свойство, СтандартнаяОбработка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УнаследоватьРеквизитЕслиВозможно(ИмяРеквизитаЗначение, Свойство, СтандартнаяОбработка, ИдентификаторСтроки = Неопределено)
	
	СтрокаСвоего = Объект.ДополнительныеРеквизиты.НайтиСтроки(Новый Структура("Свойство", Свойство));
	Если СтрокаСвоего.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаСвоего = СтрокаСвоего[0];
	
	Запрос = Новый Запрос;
	Запрос.Текст = ПолучитьТекстЗапросаДляНаследованияДопРеквизитов();
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ торо_ТиповыеОРДополнительныеРеквизиты.Свойство В (&Свойства)", "И торо_ТиповыеОРДополнительныеРеквизиты.Свойство В (&Свойства)");
	
	Запрос.УстановитьПараметр("ТиповойОР", Объект.ТиповойОР);
	Запрос.УстановитьПараметр("Свойства", Свойство);

	ВыборкаСвойств = Запрос.Выполнить().Выбрать();
	Если ВыборкаСвойств.Следующий() Тогда
		Если ЗначениеЗаполнено(ВыборкаСвойств.Значение) Тогда
			Объект.ДополнительныеРеквизиты.Удалить(СтрокаСвоего);
			
			НовСтр = УнаследованныеДопРеквизиты.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр, ВыборкаСвойств);
			НовСтр.ИмяРеквизитаЗначение = ИмяРеквизитаЗначение;
			
			Если ЭтаФорма.Свойства_ОтображатьЗначенияВТаблице Тогда
				ТекущиеДанные = ЭтаФорма.Свойства_ЗначенияДополнительныхРеквизитов.НайтиПоИдентификатору(ИдентификаторСтроки);
				ТекущиеДанные.Значение = ВыборкаСвойств.Значение;
				ТекущиеДанные.ЭтоУнаследованный = Истина;
			Иначе
				ЭтаФорма[ИмяРеквизитаЗначение] = ВыборкаСвойств.Значение;
				УстановитьОформлениеДопРеквизита(ЭтаФорма.Элементы[ИмяРеквизитаЗначение], Истина);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОформлениеДопРеквизита(Элемент, Унаследованный)
	
	Если Унаследованный Тогда
		ЦветТекста = WebЦвета.Синий; 
		ЦветЗаголовка = WebЦвета.Синий;
	Иначе
		ЦветТекста = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветТекстаПоля");
		ЦветЗаголовка = ОбщегоНазначенияВызовСервера.ЦветСтиля("ЦветТекстаКнопки");
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
		
		Элемент.ЦветТекстаЗаголовка = ЦветЗаголовка;

		Попытка
			Элемент.ЦветТекста = ЦветТекста;
		Исключение
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПоказателиЭксплуатацииПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаНаработка Тогда
		
		Если Не МодифицированностьПараметровНаработки Тогда
			
			СтруктураВозврата = ОбновитьНаработку(Объект.Ссылка, Объект.ТиповойОР);
			
			СписокПараметровНаработки.Очистить();
			
			Для каждого Элем Из СтруктураВозврата Цикл
				НС = СписокПараметровНаработки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Не МодифицированностьМаксЗначНаработки Тогда
			
			СтруктураВозврата = ОбновитьМаксимальныеЗначенияПоказателейНаработки(Объект.Ссылка, Объект.ТиповойОР);
			
			ТабМаксимальныхЗначенийНаработки.Очистить();
			Для каждого Элем Из СтруктураВозврата Цикл
				НС = ТабМаксимальныхЗначенийНаработки.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
			КонецЦикла;
			
		КонецЕсли;
		
		Если ОбновитьЗначенияНаработки Тогда
			
			ОбновитьЖурналНаработки(Истина);
			
			ОбновитьЗначенияНаработки = Ложь;
			
		КонецЕсли;
		
		ОбновитьЗначенияИзноса();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКонтролируемыеПоказатели Тогда
		
		Если НЕ МодифицированностьИзмеряемыхПоказателей Тогда
			СтруктураКонтрПоказателей = ОбновитьИзмеряемыеПоказатели(Объект.Ссылка, Объект.ТиповойОР);
			СписокИзмеряемыхПоказателей.Очистить();
			Для Каждого Элем Из СтруктураКонтрПоказателей Цикл
				НС = СписокИзмеряемыхПоказателей.Добавить();
				
				ЗаполнитьЗначенияСвойств(НС, Элем);
			КонецЦикла;
			
			// Ремонты_по_состоянию++
			Если НЕ МодифицированностьПараметровОповещенияОСостоянииОР Тогда
				МассивСтруктурПараметровОповещения = ПолучитьПараметрыОповещенияПоКонтролируемымПоказателям(Объект.Ссылка, Объект.ТиповойОР);
				ПараметрыОповещенияПоСостояниямОР.Очистить();
				Для Каждого ЭлементМассива Из МассивСтруктурПараметровОповещения Цикл
					
					ЗаполнитьЗначенияСвойств(ПараметрыОповещенияПоСостояниямОР.Добавить(),ЭлементМассива);
					
				КонецЦикла;
			КонецЕсли;
			// Ремонты_по_состоянию--
			
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСостояниеОР Тогда
		
		Если Элементы.СтраницыСостояний.ТекущаяСтраница = Элементы.СтраницыСостояний.ПодчиненныеЭлементы.ГрафикСостоянияОР Тогда
			ПостроитьГрафикСостоянийОР();	
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыНормативыПланированияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ТекущаяСтраница = Элементы.СтраницаНормативныеРемонты Тогда
		
		ЗаполнитьНормативныеРемонты();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗапчасти Тогда
		
		Если НЕ МодифицированностьЗапчастейОР Тогда
			СтруктураВозврата = ЗаполнитьТабЗапчастейОбъектовРемонта(Параметры.Ключ);
			Если СтруктураВозврата.Свойство("Запчасти") Тогда
				
				ТабЗапчастейОбъектовРемонта.Очистить();
				Для Каждого Стр Из СтруктураВозврата.Запчасти Цикл
					
					НС = ТабЗапчастейОбъектовРемонта.Добавить();
					ЗаполнитьЗначенияСвойств(НС,Стр);
					НС.ХарактеристикиИспользуются = ПолучитьХарактеристикиИспользуются(НС.Номенклатура);
					
				КонецЦикла;
				
			КонецЕсли;
			Если СтруктураВозврата.Свойство("НормаЗапчастей") Тогда
				
				ТабЗатратПоВидамРемонта.Очистить();
				Для Каждого Стр Из СтруктураВозврата.НормаЗапчастей Цикл
					
					НС = ТабЗатратПоВидамРемонта.Добавить();
					ЗаполнитьЗначенияСвойств(НС,Стр);
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивВозврата = ЗаполнитьИсториюЗапчастейОРНаСервере(Объект.Ссылка);
		Для Каждого Стр ИЗ МассивВозврата Цикл
			
			НС = ТабИсторииЗаменыЗЧ.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Стр);
			
		КонецЦикла;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОценкаРМ Тогда
		
		Если НЕ ТаблицаОценокРММодифицированность Тогда
			МассивВозврата = ПрочитатьОценкиРМ(Объект.Ссылка, Объект.ТиповойОР);
			
			РСНЗТаблицаОценокРМ.Очистить();
			
			Для каждого Элем Из МассивВозврата Цикл
				
				НС = РСНЗТаблицаОценокРМ.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
				
			КонецЦикла;
			
			ОбновитьОценкиРМ(Элементы.ТаблицаОценокРМОтображатьИсторию.Пометка);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаКоэффициентыРемонтныхОсобенностей Тогда
		
		ОбновитьКоэффициентыРемонтныхОсобенностей();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаФиксированныеРемонтныеЦиклы Тогда
		
		// Цепочки
		Если НЕ МодифицированностьРемЦиклов Тогда
			МассивЦепочек = ОбновитьФиксированныеРемонтныеЦиклы(Объект.Ссылка, МодифицированностьРемЦиклов);
			
			ТабличноеПолеРемонтныеЦиклыОборудования.Очистить();
			РемЦиклыОборудования.Очистить();
			
			Для каждого Элем Из МассивЦепочек Цикл
				
				НС = ТабличноеПолеРемонтныеЦиклыОборудования.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
				
				НС = РемЦиклыОборудования.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Элем);
				
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВизуализацияРемонтногоЦикла Тогда
		
		Если МодифицированностьНормРемонтов или МодифицированностьЗамещаемыхРемонтов или МодифицированностьПредшествующихРемонтов Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ПанельОРПриСменеСтраницыЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтраница, Элемент", ТекущаяСтраница, Элемент)), НСтр("ru = 'Для продолжения необходимо записать информацию об объекте. Записать?'"), РежимДиалогаВопрос.ДаНет);
			
			Элементы.Перерасчитать.Доступность 	= Ложь;
			Элементы.Построить.Доступность 		= Ложь;
			Элементы.Настройки.Доступность 		= Ложь;
			
			ВРНачалоЦикла = Неопределено;
			торо_РаботаСМнемосхемами.мнс_СоздатьЧистуюКарту(ПолеМнемосхемы);
			ОчиститьПолеТабличногоДокумента();
			Декорация1			= "";
			Возврат;   
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			ВидыРемонтаЗаполненные = ЗаполнитьВидыРемонтаНаСервере();
			МассивРемонтов = Новый Массив;
			Для каждого Ремонт Из ЗапланированныеРемонты Цикл
				МассивРемонтов.Добавить(Ремонт);	
			КонецЦикла;	
			Для каждого РемонтТекущий из МассивРемонтов Цикл
				Если НормативныеРемонты.НайтиСтроки(Новый Структура("ВидРемонта", РемонтТекущий.ВидРемонтныхРабот)).Количество() = 0 Тогда	
					ЗапланированныеРемонты.Удалить(ЗапланированныеРемонты.Индекс(РемонтТекущий));	
				КонецЕсли;
			КонецЦикла;
			Для каждого РемонтТекущий из ВидыРемонтаЗаполненные Цикл
				Если ЗапланированныеРемонты.НайтиСтроки(Новый Структура("ВидРемонтныхРабот", РемонтТекущий.Значение)).Количество() = 0 Тогда
					НС = ЗапланированныеРемонты.Добавить();
					НС.ВидРемонтныхРабот = РемонтТекущий.Значение;
					НС.Цвет = Новый Цвет(255, 255, 255);
					НС.ЦветТекста = Новый Цвет(0, 0, 0);
					НС.Выбран = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Элементы.ОсновноеИЗависимоеОборудование Тогда
		
		Если Не МодифицированностьОсновныхЗависимых Тогда
			Если Не ВкладкаОсновноеЗависимоеОткрывалась Тогда
				ВкладкаОсновноеЗависимоеОткрывалась = Истина;
				Если НЕ МодифицированностьНормРемонтов Тогда
					
					СтруктураВозврата = ЗаполнитьНормативныеРемонтыНаСервере(Объект.Ссылка);
					
					НормативныеРемонты.Очистить();
					Для каждого Элем Из СтруктураВозврата Цикл
						НС = НормативныеРемонты.Добавить();
						ЗаполнитьЗначенияСвойств(НС, Элем);
					КонецЦикла;
				КонецЕсли;
				
				ЗаполнитьОсновныеИЗависимыеРемонты();
				ВыбраноОсновное = ОсновноеОборудование.Количество() <> 0 Или ЗависимоеОборудование.Количество() = 0; 
				ВыборОсновногоЗависимого = ?(ВыбраноОсновное, "Основное", "Зависимое");
				УстановитьВидимостьЭлементовФормыОсновноеЗависимое();
				ЗаполнитьОсновныеИЗависимыеРемонтыНаФорме(ВыбраноОсновное);
			КонецЕсли;
			
		КонецЕсли;
		
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМаксЗначенияПараметровНаработки(Команда)
	
	ОбновитьМаксЗначенияПараметровНаработкиНаСервере();
	
КонецПроцедуры

Процедура ОбновитьМаксЗначенияПараметровНаработкиНаСервере() 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаПараметров.Показатель,
	               |	ТаблицаПараметров.ОбъектРемонта
	               |ПОМЕСТИТЬ ТаблицаПараметров
	               |ИЗ
	               |	&ТаблицаПараметров КАК ТаблицаПараметров
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаПараметров.Показатель,
	               |	ТаблицаПараметров.ОбъектРемонта
	               |ПОМЕСТИТЬ ТаблицаПараметровОР
	               |ИЗ
	               |	ТаблицаПараметров КАК ТаблицаПараметров
	               |ГДЕ
	               |	ТаблицаПараметров.ОбъектРемонта = &ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта,
	               |	торо_МаксимальныеЗначенияНаработкиОР.Показатель,
	               |	торо_МаксимальныеЗначенияНаработкиОР.МаксимальноеЗначение,
	               |	торо_МаксимальныеЗначенияНаработкиОР.НазначенныйРесурс
	               |ИЗ
	               |	РегистрСведений.торо_МаксимальныеЗначенияНаработкиОР КАК торо_МаксимальныеЗначенияНаработкиОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаПараметровОР КАК ТаблицаПараметровОР
	               |		ПО торо_МаксимальныеЗначенияНаработкиОР.Показатель = ТаблицаПараметровОР.Показатель
	               |ГДЕ
	               |	торо_МаксимальныеЗначенияНаработкиОР.ОбъектРемонта = &ТиповойОбъектРемонта";
	Запрос.УстановитьПараметр("ОбъектРемонта", Объект.Ссылка);
	Запрос.УстановитьПараметр("ТиповойОбъектРемонта", Объект.ТиповойОР);
	Запрос.УстановитьПараметр("ТаблицаПараметров", СписокПараметровНаработки.Выгрузить());
	
	СтруктураМаксЗначенийПоказателей = Запрос.Выполнить().Выгрузить();
	Для Каждого Элем Из СтруктураМаксЗначенийПоказателей Цикл
		Отбор = Новый Структура();
		Отбор.Вставить("Показатель", Элем.Показатель);
		МассивПоказателей = ТабМаксимальныхЗначенийНаработки.НайтиСтроки(Отбор);
		Если МассивПоказателей.Количество() > 0 Тогда
			Для каждого Показатель Из МассивПоказателей Цикл
				Показатель.ОбъектРемонта = Объект.Ссылка;
				МодифицированностьМаксЗначНаработки = Истина;
			КонецЦикла; 
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеТаблицыЗапчастей(ТаблицаЗапчастей)
	
	Дубли = Новый Массив;
	ЕстьДубли = Ложь;
	ЕстьПустаяНоменклатура = Ложь;
	ЕстьПустоеКоличество = Ложь;
	ЕстьОшибка = Ложь;
	ТекстОшибки = "Не удалось записать запчасти: ";
	
	Для Каждого Строка Из ТаблицаЗапчастей Цикл
		Если Строка.Номенклатура.Пустая() Тогда
			ЕстьПустаяНоменклатура = Истина;
		ИначеЕсли ТаблицаЗапчастей.НайтиСтроки(Новый Структура("Номенклатура, Характеристика", Строка.Номенклатура)).Количество() > 1 Тогда
			Если Дубли.Найти(Строка.Номенклатура) = Неопределено Тогда
				Дубли.Добавить(Строка.Номенклатура);
				ЕстьДубли = Истина;
			КонецЕсли;
		ИначеЕсли Строка.Количество = 0 Тогда
			ЕстьПустоеКоличество = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
	Если ЕстьПустаяНоменклатура Тогда
		ЕстьОшибка = Истина;
		ТекстОшибки = ТекстОшибки + Символы.ПС + " - Не во всех строках заполнена номенклатура.";
	КонецЕсли;
	
	Если ЕстьДубли Тогда
		ЕстьОшибка = Истина;
		Для Каждого Эл Из Дубли Цикл
			ТекстОшибки = ТекстОшибки + Символы.ПС + " - номенклатура """ + Эл + """ указана в нескольких строках.";
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПустоеКоличество Тогда
		ЕстьОшибка = Истина;
		ТекстОшибки = ТекстОшибки + Символы.ПС + " - Не во всех строках заполнено количество номенклатуры.";
	КонецЕсли;
		
		
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Дубли",Дубли);
	СтруктураВозврата.Вставить("ЕстьОшибка",ЕстьОшибка);
	СтруктураВозврата.Вставить("ТекстОшибки",ТекстОшибки);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеТаблицыНормЗатрат(ТаблицаНормЗатрат, ТаблицаЗапчастей)
	
	Дубли = Новый Массив;
	ПревышениеЗатрат = Новый Массив;
	ЕстьДубли = Ложь;
	ЕстьПустойВидРемонта = Ложь;
	ЕстьПустоеКоличество = Ложь;
	ЕстьПревышениеЗатрат = Ложь;
	ЕстьОшибка = Ложь;
	ТекстОшибки = "Не удалось записать нормативные затраты при ТОиР: ";
	
	Для Каждого Строка Из ТаблицаНормЗатрат Цикл
		СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, ВидРемонта",Строка.Номенклатура, Строка.Характеристика, Строка.ВидРемонта);
		
		
		Если Строка.ВидРемонта.Пустая() Тогда
			ЕстьПустойВидРемонта = Истина;
		ИначеЕсли ТаблицаНормЗатрат.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
			
			Если Не ПроверитьЗаполнениеТаблицыНормЗатратСтруктураЕстьВМассиве(СтруктураПоиска, Дубли) Тогда
				Дубли.Добавить(СтруктураПоиска);
				ЕстьДубли = Истина;
			КонецЕсли;
			
		ИначеЕсли Строка.Количество = 0 Тогда
			ЕстьПустоеКоличество = Истина;
		Иначе
			ВсегоНоменклатуры = 0;
			МассивСтрок = ТаблицаНормЗатрат.НайтиСтроки(Новый Структура("Номенклатура, Характеристика",Строка.Номенклатура, Строка.Характеристика));
			Для Каждого Эл Из МассивСтрок Цикл
				ВсегоНоменклатуры = ВсегоНоменклатуры + Эл.Количество;
			КонецЦикла;
			НайС = ТаблицаЗапчастей.найтиСтроки(Новый Структура("Номенклатура, Характеристика",Строка.Номенклатура, Строка.Характеристика));
			ТекСтрокаНоменкл = ?(НайС.Количество > 0, найс[0], Неопределено);
			Если ТекСтрокаНоменкл <> Неопределено И ВсегоНоменклатуры > ТекСтрокаНоменкл.Количество Тогда
				ЕстьПревышениеЗатрат = Истина;
				СтруктураПоиска = Новый Структура("ВсегоНоменклатуры, Номенклатура", ВсегоНоменклатуры, Строка.Номенклатура);
				Если Не ПроверитьЗаполнениеТаблицыНормЗатратСтруктураЕстьВМассиве(СтруктураПоиска, ПревышениеЗатрат) Тогда
					ПревышениеЗатрат.Добавить(СтруктураПоиска);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;
		
	Если ЕстьПустойВидРемонта Тогда
		ЕстьОшибка = Истина;
		ТекстОшибки = ТекстОшибки + Символы.ПС + " - Не во всех строках заполнен вид ремонта.";
	КонецЕсли;
	
	Если ЕстьДубли Тогда
		ЕстьОшибка = Истина;
		Для Каждого Эл Из Дубли Цикл
			ТекстОшибки = ТекстОшибки + Символы.ПС + " - вид ремонта """ + Эл.ВидРемонта + " для номенклатуры " 
						+ Эл.Номенклатура + """ указан в нескольких строках.";
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьПустоеКоличество Тогда
		ЕстьОшибка = Истина;
		ТекстОшибки = ТекстОшибки + Символы.ПС + " - Не во всех строках заполнено количество нормативных затрат.";
	КонецЕсли;
	
	Если ЕстьПревышениеЗатрат Тогда
		ЕстьОшибка = Истина;
		Для Каждого Эл Из ПревышениеЗатрат Цикл
			ТекстОшибки = ТекстОшибки + Символы.ПС + " - Количество затрат при ТОиР ("+Эл.ВсегоНоменклатуры+") больше, чем количество " + Эл.Номенклатура + " в составе объекта ремонта";
		КонецЦикла;	
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьОшибка",ЕстьОшибка);
	СтруктураВозврата.Вставить("ТекстОшибки",ТекстОшибки);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьЗаполнениеТаблицыНормЗатратСтруктураЕстьВМассиве(СтруктураПоиска, Массив)
	
	СтруктураЕстьВМассиве = Ложь;
	Если СтруктураПоиска.Свойство("ВидРемонта") Тогда
		Для Каждого Элемент Из Массив Цикл
			Если Элемент.Номенклатура = СтруктураПоиска.Номенклатура И Элемент.ВидРемонта = СтруктураПоиска.ВидРемонта Тогда
				СтруктураЕстьВМассиве = Истина;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СтруктураПоиска.Свойство("ВсегоНоменклатуры") Тогда
		Для Каждого Элемент Из Массив Цикл
			Если Элемент.Номенклатура = СтруктураПоиска.Номенклатура И Элемент.ВсегоНоменклатуры = СтруктураПоиска.ВсегоНоменклатуры Тогда
				СтруктураЕстьВМассиве = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураЕстьВМассиве;
	
КонецФункции

&НаКлиенте
Процедура ТабЗапчастейОбъектовРемонтаХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	Если Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура) Тогда
		Вид = торо_ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура, "ВидНоменклатуры");
		СтруктураПараметров = Новый Структура("ВидНоменклатуры, Владелец", Вид, Элементы.ТабЗапчастейОбъектовРемонта.ТекущиеДанные.Номенклатура);
		ОткрытьФорму("Справочник.ХарактеристикиНоменклатуры.Форма.ФормаЭлемента", СтруктураПараметров);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Если Клиент Тогда
	МожноПечататьВизуализацию = Ложь;
	ОбновитьЗначенияНаработки = Истина;
	ОповещениеВыполнено       = Ложь;
	ВкладкаОсновноеЗависимоеОткрывалась = Ложь;
#КонецЕсли

#КонецОбласти



