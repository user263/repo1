////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте

Перем СостояниеДереваОР Экспорт; // Переменная хранит состояние дерева объектов ремонта.

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
	// СтандартныеПодсистемы.Печать
	УправлениеПечатью.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.Печать
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	КоличествоЭлементовВДереве = 0;
	
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнаяСтруктураИерархии",
	Истина);
	
	ИерархияДляВводаНовыхОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	
	Если ТекСтруктураИерархии = Справочники.торо_СтруктурыОР.ПустаяСсылка() Тогда
		ТекСтруктураИерархии = ИерархияДляВводаНовыхОР;
	КонецЕсли;
	
	ЗаполнитьПараметрыИерархии();
	
	СтруктураПараметровИерархии = Новый Структура(
	"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник,РодительИерархии",
	ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
	
	СтруктураПараметровФормы = Новый Структура(
	"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
	ЭтаФорма.ИмяФормы, Неопределено, Неопределено);
	
	МассивСтруктурОР = Справочники.торо_ОбъектыРемонта.ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии,СтруктураПараметровФормы);
	торо_РаботаСИерархией.ЗаполнитьДопПоляСпискаОбъектовСервере(МассивСтруктурОР);
	ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР);
	
	ПравоИнтерактивнаяПометкаУдаления = ПравоДоступа("ИнтерактивнаяПометкаУдаления", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоИнтерактивноеДобавление = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Справочники.торо_ОбъектыРемонта);
	ПравоРедактирование = ПравоДоступа("Редактирование", Метаданные.Справочники.торо_ОбъектыРемонта);
	// переменные
	
	// Функциональный опции
	ФОУчетЗапчастей = ПолучитьФункциональнуюОпцию("торо_УчетЗапчастей");
	ФОУчетКонтролируемыхПоказателей = ПолучитьФункциональнуюОпцию("торо_УчетКонтролируемыхПоказателей");
	ФОУчетНаработкиОборудования = ПолучитьФункциональнуюОпцию("торо_УчетНаработкиОборудования");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(ИерархияДляВводаНовыхОР) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект), Новый ФорматированнаяСтрока(НСтр("ru = 'Не заполнено значение константы ""Иерархия для ввода новых объектов ремонта""!'"),,,,"e1cib/app/Обработка.торо_ПанельАдминистрированияТОиР"));
        Возврат;
	КонецЕсли;
	
	УстановитьДоступностьСозданияНовыхОР();
	
	ТипПоискаДанных = Элементы.ТипПоискаДанных.СписокВыбора[0].Значение;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "СозданиеКопированием" Тогда
		торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
	КонецЕсли;
	
	Если ИмяСобытия  = "ПАРАМЕТРЫ_ПЕЧАТИ_ПаспортОР" И Источник = ЭтаФорма Тогда
		
		Если Не Параметр = Неопределено ИЛИ НЕ Параметр.Количество() = 0 Тогда
			
			МассивПараметровКоманды = Новый Массив();
			
			Если ЭтаФорма.ТекущийЭлемент.Имя = "СписокОбъектов" Тогда
				ТекЭлемент = Элементы.СписокОбъектов;
				РодительИерархии = НайтиРодителяИерархии(ТекСтруктураИерархии, ТекЭлемент.ТекущиеДанные.Ссылка);
				Параметр.Вставить("Родитель", РодительИерархии);
			Иначе
				ТекЭлемент = Элементы.Дерево;
				Параметр.Вставить("Родитель", ТекЭлемент.ТекущиеДанные.РодительИерархии);
			КонецЕсли;
			
			МассивПараметровКоманды.Добавить(ТекЭлемент.ТекущиеДанные.Ссылка);
			торо_Печать.НапечататьДокумент("Справочник.торо_ОбъектыРемонта",
			"ПаспортОР",
			МассивПараметровКоманды,
			Параметр);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьФормуСпискаОР" Тогда // Нужно обновить информацию по объекту
		
		Если СтроитсяАвтоматически Тогда
			ПодключитьОбработчикОжидания("ЗаполнитьДеревоНаКлиентеВФоне", 1, Истина);
		Иначе 
			СтруктураПараметровФормы = Новый Структура("ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
														ЭтаФорма.ИмяФормы, // ИмяФормы
														Неопределено,      // СостояниеДереваОР
														Неопределено);     // ОтборОбъектРемонта
		
			МассивСтрок = СписокОбъектов.НайтиСтроки(Новый Структура("Ссылка", Параметр));
			
			Если МассивСтрок.Количество() > 0 Тогда	
				торо_РаботаСИерархиейКлиент.ОбновитьИнформациюПоОбъектуРемонта(МассивСтрок[0], Дерево, ТекСтруктураИерархии, СтруктураПараметровФормы);
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоНаКлиентеВФоне()
	Состояние("Обновление списка объектов...",,,БиблиотекаКартинок.ДлительнаяОперация48);
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");	
КонецПроцедуры


&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) <> Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Для Каждого Строка Из ТекДанные.ПолучитьЭлементы() Цикл
			Если Строка.Ссылка = НовыйОбъект Тогда
				Элементы.Дерево.ТекущаяСтрока = Строка.ПолучитьИдентификатор(); 
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьРеквизитУпорядочиванияНаСервере(НовыйОбъект, ТекСтруктураИерархии);
		
	КонецЕсли;
	
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ПредопределенноеЗначение("Справочник.КлючевыеОперации.торо_ОткрытиеФормыОбъектовРемонта"));
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	торо_РаботаСИерархиейКлиент.ПередНачаломИзменения(Отказ, ЭтаФорма);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	Если Не Элементы.ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр.Пометка Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Картинка = 4 Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаУдалить.Доступность = Ложь;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаУдалить.Доступность = Ложь;
		ИначеЕсли ПравоИнтерактивнаяПометкаУдаления Тогда
			Элементы.ФормаСправочникторо_ОбъектыРемонтаУдалить.Доступность = Истина;
			Элементы.ДеревоКонтекстноеМенюСправочникторо_ОбъектыРемонтаУдалить.Доступность = Истина;
		КонецЕсли;
		Если ТекДанные.Картинка = 9 Тогда 
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Ложь;
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Ложь;
		Иначе
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Истина;
			Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ДеревоПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	торо_РаботаСИерархиейКлиент.ОбработатьВыборОРДляДерева(ЭтаФорма,ВыбранноеЗначение);
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекДанные = Дерево.НайтиПоИдентификатору(Строка);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Ссылка) И НЕ ТекДанные.СвязиОбновлялись Тогда
		
		Если НЕ СтроитсяАвтоматически ИЛИ (СтроитсяАвтоматически И ИерархическийСправочник) Тогда
			
			СтрокиДерева = ТекДанные.ПолучитьЭлементы();
			Если СтрокиДерева.Количество() > 0 Тогда
				СтруктураПараметровИерархии = Новый Структура(
				"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник",
				ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
				
				СтруктураПараметровФормы = Новый Структура(
				"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
				ЭтаФорма.ИмяФормы, СостояниеДереваОР, Неопределено);
				
				МассивЭлементов = Новый Массив;
				Для Каждого СтрокаДерева Из СтрокиДерева Цикл
					МассивЭлементов.Добавить(СтрокаДерева.Ссылка);
				КонецЦикла;
				СтруктураДобавления = ПолучитьСтруктуруНовыхСтрок(ТекДанные.Ссылка, СтруктураПараметровИерархии,МассивЭлементов,СтруктураПараметровФормы);
			КонецЕсли;
			ТекДанные.СвязиОбновлялись = Истина;
			
			Для каждого СтрокаДерева Из СтрокиДерева Цикл
				ТекЭлемСоотв = СтруктураДобавления[СтрокаДерева.Ссылка];
				Если ТекЭлемСоотв = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ЭлементыНайденнойСтроки = СтрокаДерева.ПолучитьЭлементы();
				
				Для каждого ТекЭлем Из ТекЭлемСоотв Цикл
					НС = ЭлементыНайденнойСтроки.Добавить();
					
					Если СтроитсяАвтоматически И ТипЗнч(ТекЭлем.РеквизитДопУпорядочиванияОР) <> Тип("Число") Тогда
						НС.Ссылка = ТекЭлем.РеквизитДопУпорядочивания;
					Иначе
						НС.Ссылка = ТекЭлем.ОбъектИерархии;
						НС.РеквизитДопУпорядочивания = ТекЭлем.РеквизитДопУпорядочиванияОР;
						
					КонецЕсли;		
					
					НС.РодительИерархии = ТекЭлем.Родитель;
					НС.ПометкаУдаления  = ТекЭлем.ПометкаУдаления;
					НС.Картинка 		= ТекЭлем.ИндексКартинки;
					НС.Код 				= ТекЭлем.Код;
					НС.ИнвентарныйНомер = ТекЭлем.ИнвентарныйНомер;
					НС.ЗаводскойНомер 	= ТекЭлем.ЗаводскойНомер;
					НС.ТехНомер 		= ТекЭлем.ТехНомер;
					НС.ЕстьФайлы		= ТекЭлем.ЕстьФайлы;
					НС.Комментарий		= ТекЭлем.Комментарий;
					
				КонецЦикла;
			КонецЦикла;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)

	торо_РаботаСИерархиейКлиент.ОбработкаПеретаскиванияВДереве(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, ЭтаФорма,ИзменяетсяДокументами, ТекСтруктураИерархии);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	торо_РаботаСИерархиейКлиент.ПередНачаломДобавления(Отказ, Копирование, ЭтаФорма, Группа, Элемент.текущиеДанные.ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.Дерево.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Картинка = 4 Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	торо_РаботаСИерархиейКлиент.ПередУдалением(Отказ, ЭтаФорма, РазрешенВводНовыхОР);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	торо_РаботаСИерархиейКлиент.ПередНачаломИзменения(Отказ, ЭтаФорма);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов

&НаКлиенте
Процедура СписокОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	 
	ТекДанные = Элемент.ТекущиеДанные;
	
	Если Не ТекДанные = Неопределено Тогда
		
		Если ТекДанные.ЭтоРодитель Тогда			
			
			ИдентификаторРодителя = ПолучитьИдентификаторРодителяВДереве(Элементы.Дерево.ТекущиеДанные, ТекДанные.Ссылка);
			
			Если Не ИдентификаторРодителя = Неопределено Тогда
				Элементы.Дерево.ТекущаяСтрока = ИдентификаторРодителя;
			КонецЕсли;
		Иначе
			Если (ТекДанные.Картинка = 2 Или ТекДанные.Картинка = 3 
				Или ТекДанные.Картинка = 5 Или ТекДанные.Картинка = 6 или ТекДанные.Картинка = 9) И Элементы.ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр.Пометка Тогда
				
				Для Каждого ПодчиненныйЭлемент Из Элементы.Дерево.ТекущиеДанные.ПолучитьЭлементы() Цикл
					Если ПодчиненныйЭлемент.Ссылка = ТекДанные.Ссылка Тогда
						Элементы.Дерево.ТекущаяСтрока = ПодчиненныйЭлемент.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
				КонецЦикла;				
			Иначе
				
				Если ТекДанные.Картинка = 0 или ТекДанные.Картинка = 1 или ТекДанные.Картинка = 2 или ТекДанные.Картинка = 3 Тогда
					ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаОбъекта", Новый Структура("Ключ, СтруктураИерархии", ТекДанные.Ссылка, ТекСтруктураИерархии));
				ИначеЕсли ТекДанные.Картинка = 5 или ТекДанные.Картинка = 6 Тогда
					ОткрытьФорму("Справочник.торо_ОбъектыРемонта.ФормаГруппы", Новый Структура("Ключ, СтруктураИерархии", ТекДанные.Ссылка, ТекСтруктураИерархии));
				ИначеЕсли ТекДанные.Картинка = 9 или ТекДанные.Картинка = 10 Тогда
					ОткрытьФорму("Справочник." + ИерархияТипРеквизитаОР + ".ФормаОбъекта", Новый Структура("Ключ", ТекДанные.Ссылка));
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	торо_РаботаСИерархиейКлиент.ОбработкаПеретаскиванияВДереве(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, ЭтаФорма,ИзменяетсяДокументами, ТекСтруктураИерархии);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	текДанные = Элементы.Дерево.ТекущиеДанные;
	Элем = ?(текДанные = Неопределено, Неопределено, ТекДанные.Ссылка);
	торо_РаботаСИерархиейКлиент.ПередНачаломДобавления(Отказ, Копирование, ЭтаФорма, Группа, Элем);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередУдалением(Элемент, Отказ)
	торо_РаботаСИерархиейКлиент.ПередУдалением(Отказ, ЭтаФорма, РазрешенВводНовыхОР);
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПередНачаломИзменения(Элемент, Отказ)
	торо_РаботаСИерархиейКлиент.ПередНачаломИзменения(Отказ, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр.Пометка Тогда
		Если ЭтаФорма.ТекущийЭлемент = Элементы.СписокОбъектов Тогда
			Если (ТекущиеДанные.ЭтоРодитель ИЛИ ТекущиеДанные.Картинка = 9) Тогда
				Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Ложь;
				Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Ложь;
			Иначе
				Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Истина;
				Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;	
		Возврат;
	Иначе 
		Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВверх.Доступность = Истина;
		Элементы.ФормаСправочникторо_ОбъектыРемонтаПереместитьЭлементВниз.Доступность = Истина;
	КонецЕсли;
	
	Если Дерево.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивРодителей = Новый Массив;
	торо_РаботаСИерархией.ЗаполнитьМассивРодителейОбъектаРемонта_Исправленный(ТекущиеДанные.Ссылка, МассивРодителей, ТекСтруктураИерархии);
	
	Если МассивРодителей.Количество() = 0 Тогда
		СтрокаРодителя = Дерево.ПолучитьЭлементы()[0];
		ИдентификаторСтроки = СтрокаРодителя.ПолучитьИдентификатор();
		Элементы.Дерево.ТекущаяСтрока = ИдентификаторСтроки;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеДерева = Элементы.Дерево.ТекущиеДанные;
	Если ТекущиеДанныеДерева <> Неопределено 
		И ТекущиеДанныеДерева.Ссылка = МассивРодителей[0] Тогда
		Возврат;
	КонецЕсли;
	
	ИндексРодителя = МассивРодителей.Количество() - 1;
	СтрокиДерева = Дерево.ПолучитьЭлементы()[0].ПолучитьЭлементы();
	
	Пока ИндексРодителя >= 0 Цикл
		СтрокаРодителя = Неопределено;
		Для каждого ТекСтрокаДерева из СтрокиДерева Цикл 
			Если ТекСтрокаДерева.Ссылка = МассивРодителей[ИндексРодителя] Тогда
				СтрокаРодителя = ТекСтрокаДерева;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаРодителя <> Неопределено Тогда
			ИдентификаторСтроки = СтрокаРодителя.ПолучитьИдентификатор();
			Если ИндексРодителя = 0 Тогда
				Элементы.Дерево.ТекущаяСтрока = ИдентификаторСтроки;
			Иначе
				ДеревоПередРазворачиванием(Элементы.Дерево, ИдентификаторСтроки, Ложь);
				СтрокиДерева = СтрокаРодителя.ПолучитьЭлементы();
			КонецЕсли;
		КонецЕсли;
		
		ИндексРодителя = ИндексРодителя-1;
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийПрочихЭлементовФормы
&НаКлиенте
Процедура ЗначениеОтбораСпискаОбъектовРемонтаПриИзменении(Элемент)
	
	ОтборНаКлиентеСписокОР(Элемент.ТекстРедактирования);	
	ДеревоПриАктивизацииСтрокиОбработчикОжидания();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОтбораСпискаОбъектовРемонтаОчистка(Элемент, СтандартнаяОбработка)	
	ОтборНаКлиентеСписокОР("");	
	ДеревоПриАктивизацииСтрокиОбработчикОжидания();
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеОтбораСпискаОбъектовРемонтаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ОтборНаКлиентеСписокОР(Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаДанныхПриИзменении(Элемент)
	ОтборНаКлиентеСписокОР();
КонецПроцедуры  
#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Печать
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуПечати(Команда)
	
	Если Этаформа.ТекущийЭлемент.Имя = "Дерево" Тогда
		ЭлемФормы = Элементы.Дерево;
	Иначе
		ЭлемФормы = Элементы.СписокОбъектов;
	КонецЕсли;
	
	УправлениеПечатьюКлиент.ВыполнитьПодключаемуюКомандуПечати(Команда, ЭтотОбъект, ЭлемФормы);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Печать

&НаКлиенте
Процедура Обновить(Команда)
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьГруппу(Команда)
	СписокОбъектовПередНачаломДобавления(Истина, Ложь,Ложь,Ложь,Истина,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоложениеВИерархии(Команда)
	
	торо_РаботаСИерархиейКлиент.ИзменитьПоложениеВИерархии(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОборудования(Команда)
	
	ПараметрыОтчета = Новый Структура();
	ПараметрыОтчета.Вставить("ИерархияТип",ТекСтруктураИерархии);	
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Ложь);
	ПараметрыОтчета.Вставить("ВыводитьСуммуВыделенныхЯчеек", Ложь);
	
	ОткрытьФорму("Отчет.торо_СписокОборудования.Форма", ПараметрыОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает идентификатор родителя строки в дереве находя его среди родителей переданной строки дерева.
&НаКлиенте
Функция ПолучитьИдентификаторРодителяВДереве(СтрокаДерева, Ссылка)
	
	Если Не СтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
		Если СтрокаДерева.Ссылка = Ссылка Тогда
			Возврат СтрокаДерева.ПолучитьРодителя().ПолучитьИдентификатор();
		Иначе
			Возврат ПолучитьИдентификаторРодителяВДереве(СтрокаДерева.ПолучитьРодителя(), Ссылка);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли; 
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьСозданияНовыхОР()
	
	торо_РаботаСИерархиейКлиент.УстановитьДоступностьСозданияНовыхОР(ЭтаФорма);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтрокиОбработчикОжидания()
	
	Если ТекущийЭлементДерева = Элементы.Дерево.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанныеСписок = Элементы.СписокОбъектов.ТекущиеДанные;
	ТекОРВСписке = ?(ТекДанныеСписок = Неопределено,ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"),ТекДанныеСписок.Ссылка);
	торо_РаботаСИерархиейКлиент.УстановитьОтборВСписке(ЭтаФорма,Элементы.Дерево.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(ДополнительныеПараметры) Экспорт
    
    ПриОткрытииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииФрагмент()
    
    УстановитьДоступностьСозданияНовыхОР();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР)
	
	НС = Дерево.ПолучитьЭлементы().Добавить();
	НС.Ссылка = ТекСтруктураИерархии;
	НС.Картинка = 4;
	НС.СвязиОбновлялись = Истина;
	
	Если СтроитсяАвтоматически Тогда
		РодительИерархии = Справочники[ИерархияТипРеквизитаОР].ПустаяСсылка();
	Иначе
		РодительИерархии = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
	КонецЕсли;
	
	Для Каждого ЭлементКорневой Из МассивСтруктурОР Цикл
		Если ЭлементКорневой.РодительИерархии = РодительИерархии Тогда
			НСКорневая = НС.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НСКорневая,ЭлементКорневой);
			НСКорневая.Ссылка = ЭлементКорневой.ОбъектИерархии;
			НСКорневая.Картинка = ЭлементКорневой.ИндексКартинки;
			НСКорневая.РеквизитДопУпорядочивания = ЭлементКорневой.РеквизитДопУпорядочиванияОР;
			Для Каждого ЭлементПодчиненный Из МассивСтруктурОР Цикл
				Если ЭлементПодчиненный.РодительИерархии = ЭлементКорневой.ОбъектИерархии Тогда
					НСПодчиненная = НСКорневая.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НСПодчиненная,ЭлементПодчиненный);
					НСПодчиненная.Ссылка = ЭлементПодчиненный.ОбъектИерархии;
					НСПодчиненная.Картинка = ЭлементПодчиненный.ИндексКартинки;
					НСПодчиненная.РеквизитДопУпорядочивания = ЭлементПодчиненный.РеквизитДопУпорядочиванияОР;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыИерархии()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СтруктурыОР.РазрешенВводНовыхОР,
	               |	торо_СтруктурыОР.ИзменяетсяДокументами,
	               |	торо_СтруктурыОР.СтроитсяАвтоматически,
				   |	торо_СтруктурыОР.РеквизитОР,
				   |	торо_СтруктурыОР.ТипРеквизитаОР
	               |ИЗ
	               |	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	               |ГДЕ
	               |	торо_СтруктурыОР.Ссылка = &СтруктураИерархии";
	Запрос.УстановитьПараметр("СтруктураИерархии",ТекСтруктураИерархии);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	РазрешенВводНовыхОР    = Выборка.РазрешенВводНовыхОР;
	ИзменяетсяДокументами  = Выборка.ИзменяетсяДокументами;
	СтроитсяАвтоматически  = Выборка.СтроитсяАвтоматически;
	ИерархияРеквизитОР	   = Выборка.РеквизитОР;
	ИерархияТипРеквизитаОР = Выборка.ТипРеквизитаОР;
	Если СтроитсяАвтоматически И ИерархияТипРеквизитаОР <> "" Тогда
		ИерархическийСправочник= Метаданные.Справочники[ИерархияТипРеквизитаОР].Иерархический;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ПолучитьРодителя(Элемент, МассивРодителей)
	
	ЭлементРодитель = торо_РаботаСИерархией.ПолучитьТекущихРодителейВИерархии(Элемент, ТекСтруктураИерархии);
	Если типЗнч(ЭлементРодитель[Элемент]) = Тип("Строка") Тогда
		возврат;
	КонецЕсли;
	МассивРодителей.Добавить(ЭлементРодитель[Элемент]);
	ПолучитьРодителя(ЭлементРодитель[Элемент], МассивРодителей);
	
КонецПроцедуры

// для дерева
&НаСервереБезКонтекста
Функция ПолучитьСтруктуруНовыхСтрок(Ссылка, ПараметрыСтруктурыИерархии, МассивЭлементов, СтруктураПараметровФормы)
	
	СтруктураВозврата = Справочники.торо_ОбъектыРемонта.ПолучитьСтруктуруНовыхСтрокДляДереваПриРазворачивании(Ссылка, ПараметрыСтруктурыИерархии,МассивЭлементов,СтруктураПараметровФормы);
	торо_РаботаСИерархией.ЗаполнитьДопПоляСпискаОбъектовСервере(СтруктураВозврата);
	
	СоответствиеВозврата = Новый Соответствие;
	Для каждого ЭлементСтруктуры из СтруктураВозврата Цикл
		ЭлемСоответсвия = СоответствиеВозврата[ЭлементСтруктуры.Родитель];
		Если ЭлемСоответсвия = Неопределено Тогда
			ЭлемСоответсвия = Новый Массив;
		КонецЕсли;
		ЭлемСоответсвия.Добавить(ЭлементСтруктуры);
		СоответствиеВозврата.Вставить(ЭлементСтруктуры.Родитель, ЭлемСоответсвия);
	КонецЦикла;
	
	Возврат СоответствиеВозврата;
	
КонецФункции


&НаКлиенте
Процедура ОтборНаКлиентеСписокОР(Текст = Неопределено)
	
	Если Текст = Неопределено Тогда
		Текст = Элементы.ЗначениеОтбораСпискаОбъектовРемонта.ТекстРедактирования;		
	КонецЕсли;
	
	РеквизитПоиска = ТипПоискаДанных;
	СтруктураОтбора = Новый Структура;
	
	Если Текст <> "" Тогда
		Кнопка = Элементы.ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр;
		Если Кнопка.Пометка Тогда
			Кнопка.Пометка = НЕ Кнопка.Пометка;
			торо_РаботаСИерархиейКлиент.УстановитьОтборВСписке(ЭтаФорма, Неопределено, Истина);
		КонецЕсли;
		СтруктураОтбора.Вставить(РеквизитПоиска, СокрЛП(Текст));	
	КонецЕсли;

	Элементы.СписокОбъектов.ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
КонецПРоцедуры

&НаСервереБезКонтекста
Функция НайтиРодителяИерархии(Иерархия, ОбъектРемонта)
	
	Запрос = Новый Запрос;
	
	Если Иерархия.ИзменяетсяДокументами Тогда
		Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			       
			               |ИЗ
			               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии И ОбъектИерархии = &ОбъектРемонта) КАК торо_ИерархическиеСтруктурыОР
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ";

	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
			               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
			              
			               |ИЗ
			               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			               |ГДЕ
			               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			               |	И торо_ИерархическиеСтруктурыОР.ОбъектИерархии = &ОбъектРемонта";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", Иерархия);
	Запрос.УстановитьПараметр("ОбъектРемонта"    , ОбъектРемонта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.РодительИерархии;
	Иначе
		Возврат Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьРеквизитУпорядочиванияНаСервере(СтрокаСсылка,ТекСтруктураИерархии)
	Справочники.торо_ОбъектыРемонта.ЗаполнитьРеквизитУпорядочиванияНаСервере(СтрокаСсылка, ТекСтруктураИерархии, Ложь);
КонецПроцедуры

СостояниеДереваОР = Новый Структура("МассивОткрытыхОР",Новый Массив);

#КонецОбласти
