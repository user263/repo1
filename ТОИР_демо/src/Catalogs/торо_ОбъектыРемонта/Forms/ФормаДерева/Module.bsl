#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ТекСтруктураИерархии") Тогда
		ТекСтруктураИерархии = Параметры.ТекСтруктураИерархии;
	КонецЕсли;
	
	Если Параметры.Свойство("РодительОР") Тогда
		РодительОР = Параметры.РодительОР;
	КонецЕсли;
	
	Если Параметры.Свойство("ОРВерхнегоУровня") Тогда
		ЗаполнитьДеревоНаСервере(Параметры.ОРВерхнегоУровня);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево
&НаКлиенте
Процедура ДеревоИерархииВыбранПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДеревоИерархии.ТекущиеДанные;
	
	Если НЕ ТекСтрока = Неопределено Тогда
		
		Если ТекСтрока.Выбран Тогда
			ПроставитьГалочкиПоВеткеВверх(ТекСтрока, ТекСтрока.Выбран);
		Иначе 
			СнятьГалочкиПоВеткеВниз(ТекСтрока, ТекСтрока.Выбран);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьОперацию(Команда)
	
	Если ПродолжитьОперациюНаСервере() Тогда
		Оповестить("СозданиеКопированием");
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьВсе(Команда)
	
	Для каждого Стр Из ДеревоИерархии.ПолучитьЭлементы() Цикл
		
		СвернутьПодчиненные(Стр);
		Элементы.ДеревоИерархии.Свернуть(Стр.ПолучитьИдентификатор());
		
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсе(Команда)
	
	Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьЗначениеФлажков(ДеревоИерархии.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьЗначениеФлажков(ДеревоИерархии.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаКлиенте
Процедура УстановитьЗначениеФлажков(Строки, ЗначениеФлага)
	
	Для каждого Стр Из Строки Цикл
		
		Стр.Выбран = ЗначениеФлага;
		УстановитьЗначениеФлажков(Стр.ПолучитьЭлементы(), ЗначениеФлага);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СвернутьПодчиненные(Строка)
	
	Для каждого Стр Из Строка.ПолучитьЭлементы() Цикл
		
		СвернутьПодчиненные(Стр);
		Элементы.ДеревоИерархии.Свернуть(Стр.ПолучитьИдентификатор());
		
	КонецЦикла; 	
	
КонецПроцедуры

&НаСервере
Функция ПродолжитьОперациюНаСервере()
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоИерархии");
	
	МассивСтрок = ДеревоОбъект.Строки.НайтиСтроки(Новый Структура("Выбран", Истина), Истина);
	
	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	
	Для каждого Стр из МассивСтрок Цикл
		
		КопияОбъект = Стр.Ссылка.Скопировать();
		
		СсылкаНаОбъект = торо_ОбщегоНазначения.ПолучитьСсылкуНаОбъект(КопияОбъект);
		
		Если Стр.Родитель = Неопределено Тогда
			РодительИерархии = РодительОР;
		Иначе
			МасСтрок = ТабСоответствияНовыхИСтарыхОР.НайтиСтроки(Новый Структура("ОР", Стр.Родитель.Ссылка));
			Если МасСтрок.Количество() Тогда
				РодительИерархии = МасСтрок[0].НовыйОР;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			
			Если ТекСтруктураИерархии.ИзменяетсяДокументами Тогда
				
				НовДок = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
				НовДок.Дата = ТекущаяДата();
				
				НовДок.СтруктураИерархии = ТекСтруктураИерархии;
				
				НС = НовДок.ПоложенияВСтруктуреИерархии.Добавить();
				НС.ОбъектИерархии = СсылкаНаОбъект;
				НС.РодительИерархии = РодительИерархии;
				НС.ПредыдущееПоложение = "Внесен в структуру иерархии";	
				
				НовДок.Записать(РежимЗаписиДокумента.Проведение);
				
			Иначе
				
				МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ОбъектИерархии     = СсылкаНаОбъект;
				МенеджерЗаписи.СтруктураИерархии  = ТекСтруктураИерархии;
				МенеджерЗаписи.РодительИерархии   = РодительИерархии;
				МенеджерЗаписи.Записать(Истина);
				
			КонецЕсли;
			
			Если Стр.Строки.Найти(Истина, "Выбран") <> Неопределено Тогда
				НаборЗаписей = РегистрыСведений.торо_ОбъектыРемонтаГруппы.СоздатьНаборЗаписей();
				
				НаборЗаписей.Отбор.ОбъектИерархии.Установить(СсылкаНаОбъект);
				НаборЗаписей.Отбор.СтруктураИерархии.Установить(ТекСтруктураИерархии);
				НаборЗаписей.Прочитать();
				
				НС = НаборЗаписей.Добавить();
				НС.ОбъектИерархии = СсылкаНаОбъект;
				НС.СтруктураИерархии = ТекСтруктураИерархии;
				НС.ОбъектГруппа = Истина;
				
				НаборЗаписей.Записать();
			КонецЕсли;
			
			Если НЕ КопияОбъект.ОбменДанными.Загрузка Тогда
				торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(СсылкаНаОбъект, ТекСтруктураИерархии, ОшибкаТранзакции);
				
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	торо_СтруктурыОР.Ссылка,
				|	торо_СтруктурыОР.РеквизитОР
				|ИЗ
				|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
				|ГДЕ
				|	торо_СтруктурыОР.СтроитсяАвтоматически";
				
				РезультатЗапроса = Запрос.Выполнить();
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					торо_НастройкаПорядкаЭлементов.ЗаполнитьЗначениеРеквизитаУпорядочивания(СсылкаНаОбъект, Выборка.Ссылка, ОшибкаТранзакции);		
					
				КонецЦикла;
				
			КонецЕсли;
			
			КопияОбъект.Записать();
			
			НС = ТабСоответствияНовыхИСтарыхОР.Добавить();
			НС.ОР = Стр.Ссылка;
			НС.НовыйОР = КопияОбъект.Ссылка;
			
		Исключение
			ОшибкаТранзакции = Истина;
		КонецПопытки;
		
	КонецЦикла;
	
	Если НЕ ОшибкаТранзакции Тогда
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Иначе
		ОтменитьТранзакцию();
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДеревоНаСервере(ВерхнийОР)
	
	ДеревоСФормы = РеквизитФормыВЗначение("ДеревоИерархии");
	
	ИзменяетсяДокументами = ТекСтруктураИерархии.ИзменяетсяДокументами;
	СтроитсяАвтоматически = ТекСтруктураИерархии.СтроитсяАвтоматически;
	Если СтроитсяАвтоматически Тогда
		ИерархическийСправочник = Метаданные.Справочники[ТекСтруктураИерархии.ТипРеквизитаОР].Иерархический;
	КонецЕсли;
	
	НовСтр = ДеревоСФормы.Строки.Добавить();
	КоличествоЭлементовВДереве = КоличествоЭлементовВДереве + 1;
	НовСтр.Ссылка = ВерхнийОР;
	НовСтр.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(ВерхнийОР, ТекСтруктураИерархии);
	НовСтр.СвязиОбновлялись = Истина;
		
	ЗаполнитьОсновноеВДеревеСервере(НовСтр, ВерхнийОР);
	
	ЗначениеВРеквизитФормы(ДеревоСФормы, "ДеревоИерархии");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(СсылкаСтроки, СтруктураИерархии, ПометкаУдаления = Неопределено)
	
	Если ТипЗнч(СсылкаСтроки) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ОбъектыРемонтаГруппы.ОбъектИерархии,
		|	торо_ОбъектыРемонтаГруппы.СтруктураИерархии,
		|	торо_ОбъектыРемонтаГруппы.ОбъектГруппа
		|ИЗ
		|	РегистрСведений.торо_ОбъектыРемонтаГруппы КАК торо_ОбъектыРемонтаГруппы
		|ГДЕ
		|	торо_ОбъектыРемонтаГруппы.ОбъектИерархии = &ОбъектИерархии
		|	И торо_ОбъектыРемонтаГруппы.СтруктураИерархии = &СтруктураИерархии
		|	И торо_ОбъектыРемонтаГруппы.ОбъектГруппа";
		
		Запрос.УстановитьПараметр("ОбъектИерархии", СсылкаСтроки);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТабВыборки = РезультатЗапроса.Выгрузить();
		
		Если СсылкаСтроки.ЭтоГруппа Тогда
			ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 6, 5),?(ПометкаУдаления, 6, 5));
		ИначеЕсли ТабВыборки.Количество() > 0 Тогда
			ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 3, 2),?(ПометкаУдаления, 3, 2));
		Иначе
			ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 1, 0),?(ПометкаУдаления, 1, 0));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаСтроки) = Тип("Строка") Тогда
		
		ИндексКартинки = 9;
		
	ИначеЕсли ТипЗнч(СсылкаСтроки) <> Тип("СправочникСсылка.торо_СтруктурыОР") И ТипЗнч(СсылкаСтроки) <> Тип("Строка") Тогда 
		
		ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 10, 9),?(ПометкаУдаления, 10, 9));
		
	Иначе
		
		ИндексКартинки = 4;
		
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции // ОпределитьИндексКартинки()

&НаСервере
Процедура ЗаполнитьОсновноеВДеревеСервере(СтрокаДерева, РодительИерархии, ЕстьКартинка = Истина)
	
	Если ТекСтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТабБезПорядка
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ
		|	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабБезПорядка.ОбъектИерархии,
		|	ТабБезПорядка.СтруктураИерархии,
		|	ТабБезПорядка.РодительИерархии,
		|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
		|ИЗ
		|	ТабБезПорядка КАК ТабБезПорядка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		|		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
		|			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочиванияОР";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТабБезПорядка
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &РодительИерархии
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабБезПорядка.ОбъектИерархии,
		|	ТабБезПорядка.СтруктураИерархии,
		|	ТабБезПорядка.РодительИерархии,
		|	торо_ПорядокОРПоИерархии.РеквизитДопУпорядочиванияОР КАК РеквизитДопУпорядочиванияОР
		|ИЗ
		|	ТабБезПорядка КАК ТабБезПорядка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПорядокОРПоИерархии КАК торо_ПорядокОРПоИерархии
		|		ПО ТабБезПорядка.ОбъектИерархии = торо_ПорядокОРПоИерархии.ОбъектРемонта
		|			И ТабБезПорядка.СтруктураИерархии = торо_ПорядокОРПоИерархии.СтруктураИерархии
		|
		|УПОРЯДОЧИТЬ ПО
		|	РеквизитДопУпорядочиванияОР";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", ТекСтруктураИерархии);
	Запрос.УстановитьПараметр("РодительИерархии", РодительИерархии);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаИерархии = РезультатЗапроса.Выгрузить();	
	
	СтруктураПоиска = Новый Структура("РодительИерархии", РодительИерархии);
	МассивКорневыхСтрок = ТаблицаИерархии.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Элем Из МассивКорневыхСтрок Цикл
		
		НовСтрокаДерева = СтрокаДерева.Строки.Добавить();
		КоличествоЭлементовВДереве = КоличествоЭлементовВДереве + 1;
		НовСтрокаДерева.Ссылка = Элем.ОбъектИерархии;
		НовСтрокаДерева.РодительИерархии = Элем.РодительИерархии;
		НовСтрокаДерева.ПометкаУдаления = Элем.ОбъектИерархии.ПометкаУдаления;
		НовСтрокаДерева.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(НовСтрокаДерева.Ссылка, ТекСтруктураИерархии);
		НовСтрокаДерева.РеквизитДопУпорядочивания = Элем.РеквизитДопУпорядочиванияОР;
		
		ЗаполнитьОсновноеВДеревеСервере(НовСтрокаДерева, НовСтрокаДерева.Ссылка);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СнятьГалочкиПоВеткеВниз(СтрокаДерева, ЗначГалки)
	
	Для Каждого Элем Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		Элем.Выбран = ЗначГалки;
		СнятьГалочкиПоВеткеВниз(Элем, ЗначГалки);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьГалочкиПоВеткеВверх(СтрокаДерева, ЗначГалки)
	
	СтрРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Если НЕ СтрРодитель = Неопределено Тогда
		
		СтрРодитель.Выбран = ЗначГалки;
		ПроставитьГалочкиПоВеткеВверх(СтрРодитель, ЗначГалки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
