
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// СтандартныеПодсистемы.Свойства
	Контекст = Новый Структура();
	Контекст.Вставить("Объект",                     Объект);
	Контекст.Вставить("ИмяЭлементаДляРазмещения",   "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, Контекст);
	// Конец СтандартныеПодсистемы.Свойства

	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
	ПравоРедактирование = ПравоДоступа("Редактирование", Объект.Ссылка.Метаданные());
	
	// Скрытие закладки доп. реквизитов, используем вместо нее 
	// свою закладку ДополнительныеСвойстваПоНаправлению.
	Элементы.ГруппаДополнительныеРеквизиты.Видимость = Ложь;
	
	Если Параметры.Свойство("СписокНаправлений") И ЗначениеЗаполнено(Параметры.СписокНаправлений) Тогда
		Если Параметры.СписокНаправлений.Количество() > 0 Тогда
			
			СтруктураДопРеквизитов = ПолучитьСтруктуруДопРеквизитов(Параметры.СписокНаправлений);
			
			Объект.Наименование = Параметры.Наименование;
			Объект.Составное = Истина;
			
			Для каждого Строка Из СтруктураДопРеквизитов Цикл
				НС = ДополнительныеРеквизитыОР.Добавить();
				ЗаполнитьЗначенияСвойств(НС, Строка);
			КонецЦикла;	
			
			Для каждого Стр Из Параметры.СписокНаправлений Цикл
				НС = Объект.Состав.Добавить();
				НС.Направление = Стр.Значение;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	ФОИспользоватьДопРеквизиты = ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеРеквизитыИСведения");	
	
	Если ФОИспользоватьДопРеквизиты
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ЗаполнитьДополнительныеРеквизиты(Объект.НаборСвойствОР, "ОбъектыРемонта");
	КонецЕсли;
	
	Элементы.ДополнительныеСвойстваПоНаправлению.Видимость = ФОИспользоватьДопРеквизиты;
	
	// СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма);
	// Конец СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ДополнительныеРеквизитыОР.Количество() > 0 Тогда
		НаборСвойствОР = ТекущийОбъект.НаборСвойствОР.ПолучитьОбъект();
		
		НаборСвойствОР.ДополнительныеРеквизиты.Очистить();
		
		Для каждого Строка Из ДополнительныеРеквизитыОР Цикл
			Если Не Строка.ОбщееСвойство Тогда
				НС = НаборСвойствОР.ДополнительныеРеквизиты.Добавить();
				НС.Свойство             = Строка.ДополнительныйРеквизит;
				НС.ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ДополнительныйРеквизит, "ПометкаУдаления");
			КонецЕсли;
		КонецЦикла;
		НаборСвойствОР.Записать();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	СоставноеНаправление = Объект.Составное;
	
	Элементы.Состав.Видимость                                                       = СоставноеНаправление;
	Элементы.ДополнительныеРеквизиты.ИзменятьСоставСтрок                            = НЕ СоставноеНаправление;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ФОИспользоватьДопРеквизиты И ИмяСобытия = "Запись_НаборыДополнительныхРеквизитовИСведений" Тогда
		ЗаполнитьДополнительныеРеквизиты(Объект.НаборСвойствОР, "ОбъектыРемонта");
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ФОИспользоватьДопРеквизиты Тогда
		ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, "ДопРеквизит", "ОбъектыРемонта");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДополнительныеРеквизиты
&НаКлиенте
Процедура ДополнительныеРеквизитыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ДобавитьДопРеквизитСведение("ДопРеквизит", "ОбъектыРемонта");	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ДополнительныеРеквизиты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипВладельцаНабораЭлементов = "ОбъектыРемонта";
	ТипЭлемента                 = "ДопРеквизит";

	ПометитьТекущееСвойствоНаУдаление(
			ТекущиеДанные.ДополнительныйРеквизит,
			ТекущиеДанные.ИндексКартинки,
			ТипВладельцаНабораЭлементов,
			ТипЭлемента);
		
		Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные =Элементы.ДополнительныеРеквизиты.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ДополнительныйРеквизит);

	ПараметрыОписанияОповещения = Новый Структура("НаборСвойств, ТипВладельцаНабораЭлементов", Объект.НаборСвойствОР, "ОбъектыРемонта");
	
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
	ПараметрыФормы,Элементы.ДополнительныеРеквизиты,,,,Новый ОписаниеОповещения("ОбработкаРедактированияРеквизита",ЭтаФорма,ПараметрыОписанияОповещения));

КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "ОбъектыРемонта");
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныеРеквизитыПриИзменении(Элемент)
	УстановитьДоступностьКомандРедактированияДопРеквизитовСведений("ДопРеквизит", "ОбъектыРемонта");
	Модифицированность = Истина;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСостав
&НаКлиенте
Процедура СоставНаправлениеПриИзменении(Элемент)
	
	ПерезаполнитьТЧДополнительныеРеквизиты();
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПослеУдаления(Элемент)
	
	ПерезаполнитьТЧДополнительныеРеквизиты();
	
КонецПроцедуры


&НаКлиенте
Процедура СоставПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекДанные = Элементы.Состав.ТекущиеДанные;
		НайденныеСтроки = Объект.Состав.НайтиСтроки(Новый Структура("Направление", ТекДанные.Направление));
		Дубль = Ложь;
		ИдТекСтроки = ТекДанные.ПолучитьИдентификатор();
		Для каждого НайденаяСтрока из НайденныеСтроки Цикл
			Если НайденаяСтрока.ПолучитьИдентификатор() <> ИдТекСтроки Тогда
				Дубль = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Дубль > 0 Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru='Это направление уже добавлено'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
 &НаКлиенте
Процедура Подключаемый_РедактироватьСоставСвойств()
	УправлениеСвойствамиКлиент.РедактироватьСоставСвойств(ЭтотОбъект, Объект.Ссылка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаРедактированияРеквизита(Результат, ДопПараметры) Экспорт
	НаборСвойств                = ДопПараметры.НаборСвойств;
	ТипВладельцаНабораЭлементов = ДопПараметры.ТипВладельцаНабораЭлементов;
	ЗаполнитьДополнительныеРеквизиты(НаборСвойств, ТипВладельцаНабораЭлементов);	
КонецПроцедуры
 

// Процедура выполняет добавление дополнительного реквизита (сведения).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента который добавляется. 
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов в который добавляется элемент. 
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаКлиенте
Процедура ДобавитьДопРеквизитСведение(ТипЭлемента, ТипВладельцаНабораЭлементов, Вид = "")
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		ТекстВопроса = Нстр("ru = 'Данные еще не записаны.
		|Добавление дополнительных свойств возможно только после записи элемента.
		|Записать элемент?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьДопРеквизитСведениеЗавершение", ЭтотОбъект, Новый Структура("Вид, ТипВладельцаНабораЭлементов, ТипЭлемента", Вид, ТипВладельцаНабораЭлементов, ТипЭлемента)), ТекстВопроса, РежимДиалогаВопрос.ДаНет);
        Возврат;
		
	КонецЕсли;
	
	ДобавитьДопРеквизитСведениеФрагмент(Вид, ТипВладельцаНабораЭлементов, ТипЭлемента);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизитСведениеФрагмент(Знач Вид, Знач ТипВладельцаНабораЭлементов, Знач ТипЭлемента)
    
    Перем НаборДопРеквизитовСведений, ПараметрыФормы;
    
    ТекущийТипВладельцаНабораЭлементов = ТипВладельцаНабораЭлементов;
    ТекущийТипЭлемента                 = ТипЭлемента;
    
    НаборДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(Объект, ТипВладельцаНабораЭлементов);
	
	Если НЕ ЗначениеЗаполнено(НаборДопРеквизитовСведений) Тогда
        Возврат;
    КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("НаборСвойств"             , НаборДопРеквизитовСведений);
	ПараметрыФормы.Вставить("ТекущийНаборСвойств"      , НаборДопРеквизитовСведений);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", ТипЭлемента <> "ДопРеквизит");

	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
	ПараметрыФормы, ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов));
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДопРеквизитСведениеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Вид                         = ДополнительныеПараметры.Вид;
    ТипВладельцаНабораЭлементов = ДополнительныеПараметры.ТипВладельцаНабораЭлементов;
    ТипЭлемента                 = ДополнительныеПараметры.ТипЭлемента;
       
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        ЭлементЗаписан = Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    Если Не ЭлементЗаписан Тогда
        Возврат;
    КонецЕсли;
    
    ДобавитьДопРеквизитСведениеФрагмент(Вид, ТипВладельцаНабораЭлементов, ТипЭлемента);

КонецПроцедуры

// Функция возвращает ссылку на таблицу набора доп.реквизитов / сведений объекта.
//
// Параметры:
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов в который добавляется элемент. 
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция.
//	Данные табличной части набора свойств.
//
&НаКлиентеНаСервереБезКонтекста
Функция НаборДопРеквизитовСведенийОбъекта(ОбъектНаправление, ТипВладельцаНабораЭлементов)
	
	Если ТипВладельцаНабораЭлементов = "ОбъектыРемонта" Тогда
		Возврат ОбъектНаправление.НаборСвойствОР;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает коллекцию - таблицу доп. ревизитов (сведений), 
// относящуюся к нужному набору (набору номенклатуры, характеристик или серий).
//
// Параметры:
//	Форма - УправляемаяФорма - форма,
//	ТипЭлемента - Строка - Тип элементов, коллекцию которых надо получить, принимает значения: "ДопСведение", "ДопРеквизит".
//	ТипВладельцаНабораЭлементов - Строка - Имя владельца набора элементов, принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ДанныеФормыКоллекция - коллекция доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция ТаблицаДопРеквизитов(Форма, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "ОбъектыРемонта" Тогда
			Возврат Форма.ДополнительныеРеквизитыОР;
		КонецЕсли;
				
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает таблицу формы - таблицу доп. реквизитов (сведений), 
// относящуюся к нужному набору (номенклатуры, характеристик или серий).
//
// Параметры:
//	ТипЭлемента - Строка - тип элементов таблицу формы которых надо получить, принимает значения: "ДопСведение", "ДопРеквизит",
//	ТипВладельцаНабораЭлементов - Строка - Имя владельца набора элементов, таблицу формы которых надо получить, принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	ТаблицаФормы - ЭлементФормы - таблица доп.реквизитов (сведений) нужного набора.
//
&НаКлиенте
Функция ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "ОбъектыРемонта" Тогда
			Возврат Элементы.ДополнительныеРеквизиты;
		КонецЕсли;
				
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеРеквизиты(НаборСвойств, ТипВладельцаНабораЭлементов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК ДополнительныйРеквизит,
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
	               |	ВЫБОР
	               |		КОГДА НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.ПометкаУдаления
	               |			ТОГДА 4
	               |		ИНАЧЕ 3
	               |	КОНЕЦ КАК ИндексКартинки,
	               |	ИСТИНА КАК ОбщееСвойство
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	               |ГДЕ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_торо_НаправленияОбъектовРемонтныхРабот_Общие)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство,
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Заголовок,
	               |	ВЫБОР
	               |		КОГДА НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.ПометкаУдаления
	               |			ТОГДА 4
	               |		ИНАЧЕ 3
	               |	КОНЕЦ,
	               |	ЛОЖЬ
	               |ИЗ
	               |	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	               |ГДЕ
	               |	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = &Ссылка";
	               // Если нужно получить еще и общие реквизиты для ОР или типового ор,
				   	// то это можно сделать в запросе и объединить.
	Запрос.УстановитьПараметр("Ссылка", НаборСвойств);
	
	ТЧРезультат = Запрос.Выполнить().Выгрузить();
	ТаблицаДопРеквизитов = ТаблицаДопРеквизитов(ЭтаФорма, "ДопРеквизит",ТипВладельцаНабораЭлементов);
	
	ТаблицаДопРеквизитов.Очистить();
	
	Для каждого Строка Из ТЧРезультат Цикл
		НС = ТаблицаДопРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строка);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруДопРеквизитов(СписокНаправлений)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство КАК ДополнительныйРеквизит,
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Заголовок КАК ПредставлениеРеквизита,
	|	ВЫБОР
	|		КОГДА НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК ИндексКартинки,
	|	ИСТИНА КАК ОбщееСвойство,
	|	ИСТИНА КАК ИзОР
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.Справочник_торо_НаправленияОбъектовРемонтныхРабот_Общие)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство,
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.Заголовок,
	|	ВЫБОР
	|		КОГДА НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.ПометкаУдаления
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка В(&СписокОР)";
	
	СписокНаборовОР = Новый СписокЗначений;
	Для каждого Направление Из СписокНаправлений Цикл
		СписокНаборовОР.Добавить(Направление.Значение.НаборСвойствОР);
	КонецЦикла;
	Запрос.УстановитьПараметр("СписокОР", СписокНаборовОР.ВыгрузитьЗначения());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выгрузить();
	
	Возврат Выборка;
	
КонецФункции

&НаКлиенте
Процедура ПерезаполнитьТЧДополнительныеРеквизиты()
	
	СписокНаправлений = Новый СписокЗначений;
	Для каждого Стр Из Объект.Состав Цикл
	
		СписокНаправлений.Добавить(Стр.Направление);	
	
	КонецЦикла; 
	
	МассивДопРеквизитов = ПриИзмененииНаСервере(СписокНаправлений, "НаборСвойствОР");	
	
	ДополнительныеРеквизитыОР.Очистить();
	Для каждого Элем Из МассивДопРеквизитов Цикл
		
		НС = ДополнительныеРеквизитыОР.Добавить();
		НС.ДополнительныйРеквизит = Элем;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПриИзмененииНаСервере(СписокНаправлений, ИмяРеквизита)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка,
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка В(&Список)";
	
	СписокНаборов = Новый СписокЗначений;
	Для каждого Направление Из СписокНаправлений Цикл
		
		СписокНаборов.Добавить(Направление.Значение[ИмяРеквизита]);
		
	КонецЦикла;
	Запрос.УстановитьПараметр("Список", СписокНаборов.ВыгрузитьЗначения());
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Свойство");
	
КонецФункции

&НаСервере
Процедура ПометитьТекущееСвойствоНаУдаление(Свойство, ИндексКартинки, ТипВладельцаНабораЭлементов, ТипЭлемента)
	
	НачатьТранзакцию();
	
	ОбъектСвойства = Свойство.ПолучитьОбъект();
	ОбъектСвойства.ПометкаУдаления = НЕ ОбъектСвойства.ПометкаУдаления;
	ОбъектСвойства.Записать();
	
	НаборСвойствДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(Объект, ТипВладельцаНабораЭлементов);
	Если НЕ ЗначениеЗаполнено(НаборСвойствДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНаборСвойств = НаборСвойствДопРеквизитовСведений.ПолучитьОбъект();
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеСведения;
	КонецЕсли;
	
	Для Каждого ЭлементСтр Из ТЧДополнительныеРеквизитыСведения Цикл
		Если ЭлементСтр.Свойство = Свойство Тогда
			ЭлементСтр.ПометкаУдаления = ОбъектСвойства.ПометкаУдаления;
		КонецЕсли;
	КонецЦикла;
	
	ОбъектНаборСвойств.Записать();
	
	ЗафиксироватьТранзакцию();
	
	ИндексКартинки = ?(ОбъектСвойства.ПометкаУдаления, 4, 3);
	
КонецПроцедуры

// Процедура выполняет запись изменившихся наборов доп. реквизитов (сведений).
// Вызывается при записи текущего элемента на сервере.
//
// Параметры:
//	Отказ (Булево) - Признак отказа от записи. Значение по умолчанию: Ложь.
//
//	ТекущийОбъект (СправочникОбъект.ВидыНоменклатуры) - Записываемый объект - вид номенклатуры.
//
//	ТипЭлемента (Строка) - Тип элемента который удаляется. 
//	Принимает значения: "ДопСведение", "ДопРеквизит",
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов из которого удаляется элемент. 
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаСервере
Процедура ЗаписатьДопРеквизитыСведенияНабора(Отказ, ТекущийОбъект, ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	НаборСвойствДопРеквизитовСведений = НаборДопРеквизитовСведенийОбъекта(ТекущийОбъект, ТипВладельцаНабораЭлементов);
	Если НЕ ЗначениеЗаполнено(НаборСвойствДопРеквизитовСведений) Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектНаборСвойств = НаборСвойствДопРеквизитовСведений.ПолучитьОбъект();
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеРеквизиты;
	ИначеЕсли ТипЭлемента = "ДопСведение" Тогда
		ТЧДополнительныеРеквизитыСведения = ОбъектНаборСвойств.ДополнительныеСведения;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = ТаблицаДопРеквизитов(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	ТЧДополнительныеРеквизитыСведения.Очистить();
	
	Для каждого ЭлементСтр Из ТаблицаДопРеквизитов Цикл
		Если Не ЭлементСтр.ОбщееСвойство Тогда
			НовСтр = ТЧДополнительныеРеквизитыСведения.Добавить();
			НовСтр.Свойство = ЭлементСтр.ДополнительныйРеквизит;
			НовСтр.ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭлементСтр.ДополнительныйРеквизит, "ПометкаУдаления");
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ОбъектНаборСвойств.Записать();
	Исключение
		
		// Установить признак отказа записи.
		Отказ = Истина;
		
		// Добавить запись в журнал регистрации.
		ИмяСобытия = НСтр("ru = 'Дополнительные %1 %2. Не удалось обновить состав дополнительных %3 набора.'");
		
		ТипСведений = ?(ТипЭлемента = "ДопРеквизит", "реквизиты", "сведения");
		ТипОбъекта  = ?(ТипВладельцаНабораЭлементов = "Номенклатура", "номенклатуры", ?(ТипВладельцаНабораЭлементов = "Характеристики", "характеристик", "серий"));
		ТипСостава  = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		
		ИмяСобытия = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ИмяСобытия, 
			ТипСведений, 
			ТипОбъекта, 
			ТипСостава);
		
		КомментарийЖурнала  = НСтр("ru = 'При обновлении табличной части дополнительных реквизитов набора свойств ""%1"" произошла ошибка: ""%2""'");
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		КомментарийЖурнала  = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийЖурнала, 
			НаборСвойствДопРеквизитовСведений, 
			ПредставлениеОшибки);
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия, 
			УровеньЖурналаРегистрации.Ошибка, 
			, 
			НаборСвойствДопРеквизитовСведений, 
			КомментарийЖурнала, 
			РежимТранзакцииЗаписиЖурналаРегистрации.Транзакционная);
		
		// Вызвать исключение.
		ВыражениеИсключения = НСтр("ru = 'При записи дополнительных %1 %2 произошла ошибка (см. журнал регистрации).'");
		
		ТипСведений = ?(ТипЭлемента = "ДопРеквизит", "реквизитов", "сведений");
		ТипОбъекта = ?(ТипВладельцаНабораЭлементов = "Номенклатура", "номенклатуры", ?(ТипВладельцаНабораЭлементов = "Характеристики", "характеристик", "серий"));
		
		ВыражениеИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ВыражениеИсключения, 
			ТипСведений, 
			ТипОбъекта, 
			ТипСостава);
		
		ВызватьИсключение(ВыражениеИсключения);
		
	КонецПопытки;
	
КонецПроцедуры


// Процедура управляет доступностью команд редактирования таблиц доп. реквизитов (сведений).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента который удаляется.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов из которого удаляется элемент.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
&НаКлиенте
Процедура УстановитьДоступностьКомандРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	ТаблицаДопРеквизитовСведений = ТаблицаФормыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	ТекущиеДанные = ТаблицаДопРеквизитовСведений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДопРеквизитов = ТаблицаДопРеквизитов(ЭтаФорма, ТипЭлемента, ТипВладельцаНабораЭлементов);
	КомандыРедактирования = КомандыРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	// Если активная строка - строка общего доп. реквизита (сведения), то сделать недоступными кнопки добавления, удаления, перемещения.
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.Удалить, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство И ПравоРедактирование);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.ПереместитьВверх, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство И ПравоРедактирование);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.ПереместитьВниз, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство И ПравоРедактирование);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюУдалить, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство И ПравоРедактирование);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
		"Доступность", 
		Не ТекущиеДанные.ОбщееСвойство И ПравоРедактирование);
	
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		КомандыРедактирования.КонтекстноеМенюПереместитьВниз,
		"Доступность",
		Не ТекущиеДанные.ОбщееСвойство И ПравоРедактирование);
	
	// Если активная строка - первая или последняя в списке, то сделать недоступными кнопки сдвига вверх или вниз.
	Если Не ТекущиеДанные.ОбщееСвойство Тогда
		
		ИндексСтроки = ТаблицаДопРеквизитов.Индекс(ТекущиеДанные);
		
		Если ИндексСтроки = 0 Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.ПереместитьВверх, 
				"Доступность", 
				Ложь);
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
				"Доступность", 
				Ложь);
			
		КонецЕсли;
		
		Если ИндексСтроки = ТаблицаДопРеквизитов.Количество() - 1 Тогда
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.ПереместитьВниз, 
				"Доступность", 
				Ложь);
			
			ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы, 
				КомандыРедактирования.КонтекстноеМенюПереместитьВниз, 
				"Доступность", 
				Ложь);
			
		КонецЕсли;
		
		Если ИндексСтроки > 0 Тогда
			
			ПредыдущаяСтрока = ТаблицаДопРеквизитов[ИндексСтроки - 1];
			
			Если ПредыдущаяСтрока.ОбщееСвойство Тогда
				
				// Если предыдущая строка является строкой общего реквизита, то сделать недоступной кнопку сдвига вверх.
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.ПереместитьВверх, 
					"Доступность", 
					Ложь);
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.КонтекстноеМенюПереместитьВверх, 
					"Доступность", 
					Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИндексСтроки < ТаблицаДопРеквизитов.Количество()-1 Тогда
			
			СледующаяСтрока = ТаблицаДопРеквизитов[ИндексСтроки + 1];
			
			Если СледующаяСтрока.ОбщееСвойство Тогда
				
				// Если предыдущая строка является строкой общего реквизита, то сделать недоступной кнопку сдвига вверх.
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.ПереместитьВниз, 
					"Доступность", 
					Ложь);
				
				ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
					Элементы, 
					КомандыРедактирования.КонтекстноеМенюПереместитьВниз, 
					"Доступность", 
					Ложь);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает структуру команд редактирования таблицы доп. реквизитов (сведений).
//
// Параметры:
//	ТипЭлемента (Строка) - Тип элемента, команды редактирования коллекции которых надо получить.
//	Принимает значения: "ДопСведение", "ДопРеквизит".
//
//	ТипВладельцаНабораЭлементов (Строка) - Имя владельца набора элементов, команды редактирования коллекции которых надо получить.
//	Принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	Структура.
//	Структура команд редактирования таблицы доп. реквизитов (сведений). Ключ структуры - строка - имя команды,
//	а значение - строка - имя элемента-команды редактирования.
//
&НаКлиенте
Функция КомандыРедактированияДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	СтруктураКоманд = Новый Структура;
	СтруктураКоманд.Вставить("Удалить");
	СтруктураКоманд.Вставить("ПереместитьВверх");
	СтруктураКоманд.Вставить("ПереместитьВниз");
	
	СтруктураКоманд.Вставить("КонтекстноеМенюУдалить");
	СтруктураКоманд.Вставить("КонтекстноеМенюПереместитьВверх");
	СтруктураКоманд.Вставить("КонтекстноеМенюПереместитьВниз");
	
	ИмяТаблицыДопРеквизитовСведений = ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов);
	
	СтруктураКоманд.Удалить                         = ИмяТаблицыДопРеквизитовСведений + "Удалить";
	СтруктураКоманд.ПереместитьВверх                = ИмяТаблицыДопРеквизитовСведений + "ПереместитьВверх";
	СтруктураКоманд.ПереместитьВниз                 = ИмяТаблицыДопРеквизитовСведений + "ПереместитьВниз";
	
	СтруктураКоманд.КонтекстноеМенюУдалить          = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюУдалить";
	СтруктураКоманд.КонтекстноеМенюПереместитьВверх = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюПереместитьВверх";
	СтруктураКоманд.КонтекстноеМенюПереместитьВниз  = ИмяТаблицыДопРеквизитовСведений + "КонтекстноеМенюПереместитьВниз";
	
	Возврат СтруктураКоманд;
	
КонецФункции
// Возвращает имя элемента - таблицы доп. ревизитов (сведений),
// относящуюся к нужному набору (набору номенклатуры, характеристик или серий).
//
// Параметры:
//	ТипЭлемента - Строка - Тип элемента, имя элемента формы коллекции которых надо получить, принимает значения: "ДопСведение", "ДопРеквизит".
//	ТипВладельцаНабораЭлементов - Строка - Имя владельца набора элементов, принимает значения: "Номенклатура", "Характеристики", "Серии".
//
// Возвращаемое значение:
//	Строка - Имя элемента коллекции доп.реквизитов (сведений) нужного набора.
//
&НаКлиентеНаСервереБезКонтекста
Функция ИмяТаблицыДопРеквизитовСведений(ТипЭлемента, ТипВладельцаНабораЭлементов)
	
	Если ТипЭлемента = "ДопРеквизит" Тогда
		
		Если ТипВладельцаНабораЭлементов = "ОбъектыРемонта" Тогда
			Возврат "ДополнительныеРеквизиты";
		КонецЕсли;
				
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

#КонецОбласти