#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ГруппаЛегенда.Видимость = Элементы.ОтображениеЛегенды.Пометка;
	
	ФОИспользоватьВыгрузкуЗагрузкуProject = Константы.торо_ИспользоватьВыгрузкуЗагрузкуMSProject.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВыводитьПо = "Видам работ";	
	УстановитьВидимостьЭлементов();
	Если ЗначениеЗаполнено(ПериодВыполнения) Тогда
		ПостроитьДиаграммуГанта(ЭтаФорма.Команды.ПостроитьДиаграммуГанта);	
	КонецЕсли;
	
	Элементы.ФормаВыгрузитьВProject.Видимость 	= ФОИспользоватьВыгрузкуЗагрузкуProject;
	Элементы.ФормаЗагрузитьИзProject.Видимость 	= ФОИспользоватьВыгрузкуЗагрузкуProject;
	
	СформироватьЗаголовокСвернутойГруппы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПАРАМЕТРЫ_ПЕЧАТИ_ПланРабот" Тогда
		
		ПараметрКоманды = Новый Массив; 		

		ПараметрКоманды.Добавить(ПодразделениеПустое);		
		
		СтруктураПараметровКоманды = Новый Структура("ДокППР, Параметры", Объект, Параметр);
		
		торо_Печать.НапечататьДокумент("Обработка.торо_ПланРаботПодразделения",
		"МакетПланаРемонтовНаПериод",
		ПараметрКоманды, СтруктураПараметровКоманды);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		ДиаграммаГантаПодразделения.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе		
		ДиаграммаГантаПодразделения.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГантаПодразделения.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаГантаПодразделения.КратностьПериодическогоВарианта 	= ПолосаРегулированияДиаграммыГанта;		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаПодразделенияОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Расшифровки) = Тип("Массив") И Расшифровки.ВГраница()>0 Тогда 		
		СписокПараметров = Новый СписокЗначений();
		МассивРасшифровки0 = Расшифровки[0];
		МассивРасшифровки1 = Расшифровки[1];
		Расшифровки.Очистить();
		Для каждого РасшифровкаЭлемент ИЗ МассивРасшифровки0 Цикл
			СписокПараметров.Добавить(РасшифровкаЭлемент.Значение);	
		КонецЦикла; 
		Для каждого РасшифровкаЭлемент ИЗ МассивРасшифровки1 Цикл
			Если РасшифровкаЭлемент.Ключ <>"ID" Тогда
				СписокПараметров.Добавить(РасшифровкаЭлемент.Значение);	
			КонецЕсли;
		КонецЦикла;
	
		ВыбранноеЗначение = Неопределено;

	
		СписокПараметров.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("ДиаграммаГантаПодразделенияОбработкаРасшифровкиЗавершение", ЭтотОбъект, Новый Структура("МассивРасшифровки1", МассивРасшифровки1)), "Расшифровка "+ МассивРасшифровки0.ВидРемонта+ ", "+МассивРасшифровки1.Объект,);
	ИначеЕсли ТипЗнч(Расшифровки) = Тип("Структура") Тогда
		ПоказатьЗначение(Неопределено, Расшифровки.ВидРемонта);	
	Иначе
		ПоказатьЗначение(Неопределено, Расшифровки); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаГантаПодразделенияОбработкаРасшифровкиЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    МассивРасшифровки1 = ДополнительныеПараметры.МассивРасшифровки1;
    
    
    ВыбранноеЗначение = ВыбранныйЭлемент;
    Если ВыбранноеЗначение<>Неопределено Тогда
        Если ТипЗнч(ВыбранноеЗначение.Значение) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("Ключ",ВыбранноеЗначение.Значение);
            ПараметрыФормы.Вставить("АктивироватьСтроку",Истина);
            ПараметрыФормы.Вставить("ТекСтрокаИзОбработкиID",МассивРасшифровки1.ID);
            
            ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.Форма.ФормаДокумента",ПараметрыФормы);
            
            
        ИначеЕсли ТипЗнч(ВыбранноеЗначение.Значение) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("Ключ",ВыбранноеЗначение.Значение);
            ПараметрыФормы.Вставить("АктивироватьСтроку",Истина);
            ПараметрыФормы.Вставить("ТекСтрокаИзОбработкиID",МассивРасшифровки1.ID);
            
            ОткрытьФорму("Документ.торо_ПланГрафикРемонта.Форма.ФормаДокумента",ПараметрыФормы);  	   
            
        ИначеЕсли ТипЗнч(ВыбранноеЗначение.Значение) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
            ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("Ключ",ВыбранноеЗначение.Значение);
            ПараметрыФормы.Вставить("АктивироватьСтроку",Истина);
            ПараметрыФормы.Вставить("ТекСтрокаИзОбработкиID",МассивРасшифровки1.ID);
            
            ОткрытьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.Форма.ФормаДокумента",ПараметрыФормы);				
            
        Иначе
            ПоказатьЗначение(Неопределено, ВыбранноеЗначение.Значение);
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодразделенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормыСписка = Новый Структура("Представление, ОграничиватьВыборУказаннымиЗначениями, ОписаниеТипов, ЗначенияДляВыбора", "Подразделения", Ложь, Новый ОписаниеТипов("СправочникСсылка.СтруктураПредприятия"), Подразделения);
	ФормаСпискаЗначений = ПолучитьФорму("ОбщаяФорма.ВводЗначенийСпискомСФлажками", ПараметрыФормыСписка, Элемент, УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
	ФормаСпискаЗначений.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	ФормаСпискаЗначений.Элементы.СписокВставитьИзБуфераОбмена.Видимость				= Ложь;
	ФормаСпискаЗначений.Элементы.СписокУстановитьФлажки.Видимость					= Ложь;
	ФормаСпискаЗначений.Элементы.СписокСнятьФлажки.Видимость						= Ложь;
	ФормаСпискаЗначений.Элементы.СписокВставитьИзБуфераОбменаМеню.Видимость			= Ложь;
	ФормаСпискаЗначений.Элементы.СписокУстановитьФлажкиМеню.Видимость				= Ложь;
	ФормаСпискаЗначений.Элементы.СписокСнятьФлажкиМеню.Видимость					= Ложь;
	ФормаСпискаЗначений.Элементы.СписокПометка.Видимость							= Ложь;
	
	ФормаСпискаЗначений.Открыть();
	Если Подразделения.Количество() = 0 Тогда
		ФормаПодбораПодразделений = ПолучитьФорму("Справочник.СтруктураПредприятия.Форма.ФормаВыбора", Новый Структура("ЗакрыватьПриВыборе", Ложь) ,ФормаСпискаЗначений.Элементы.Список, ФормаСпискаЗначений.УникальныйИдентификатор, ВариантОткрытияОкна.ОтдельноеОкно);
		ФормаПодбораПодразделений.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаПодбораПодразделений.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоСметамПоДефектамПриИзменении(Элемент)
	СформироватьЗаголовокСвернутойГруппы();
КонецПроцедуры

&НаКлиенте
Процедура ПоСметамПоВнешнимОснованиямПриИзменении(Элемент)
	СформироватьЗаголовокСвернутойГруппы();
КонецПроцедуры

&НаКлиенте
Процедура ПоПланГрафикамППРПриИзменении(Элемент)
	СформироватьЗаголовокСвернутойГруппы();
КонецПроцедуры

&НаКлиенте
Процедура ПоГрафикамРегламентныхМероприятийПриИзменении(Элемент)
	СформироватьЗаголовокСвернутойГруппы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтов
&НаКлиенте
Процедура ДеревоРемонтовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДокументРегистратор) Тогда 	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",Элемент.ТекущиеДанные.ДокументРегистратор);
		ПараметрыФормы.Вставить("АктивироватьСтроку",Истина);
		ПараметрыФормы.Вставить("ТекСтрокаИзОбработкиID",Элемент.ТекущиеДанные.ID);	
		Если ТипЗнч(Элемент.ТекущиеДанные.ДокументРегистратор) = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			ОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.Форма.ФормаДокумента",ПараметрыФормы);
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.ДокументРегистратор) = Тип("ДокументСсылка.торо_ПланГрафикРемонта") Тогда
			ОткрытьФорму("Документ.торо_ПланГрафикРемонта.Форма.ФормаДокумента",ПараметрыФормы);	
		ИначеЕсли ТипЗнч(Элемент.ТекущиеДанные.ДокументРегистратор) = Тип("ДокументСсылка.торо_ГрафикРегламентныхМероприятийТОиР") Тогда
			ОткрытьФорму("Документ.торо_ГрафикРегламентныхМероприятийТОиР.Форма.ФормаДокумента",ПараметрыФормы);	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ПечатьПланаРабот(Команда)
	
	ФормаВыбораРемонтаОборудования = ПолучитьФорму("Обработка.торо_ПланРаботПодразделения.Форма.ФормаВводаПериода", 
	Новый Структура("ДокППР, КлючНазначенияИспользования, ДатаНачала, ДатаОкончания,Подразделение, ВыводитьПо",, "ПАРАМЕТРЫ_ПЕЧАТИ_ПланРабот",ПериодВыполнения.ДатаНачала,ПериодВыполнения.ДатаОкончания,Подразделения,ВыводитьПо)
	, ,);
	ФормаВыбораРемонтаОборудования.Открыть();

	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГанта(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПериодВыполнения) Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно построить диаграмму - не заполнен период отображения.'"));
	ИначеЕсли НЕ ЗначениеЗаполнено(ПериодВыполнения.ДатаНачала) Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно построить диаграмму - не заполнена дата начала периода.'"));
	ИначеЕсли НЕ ЗначениеЗаполнено(ПериодВыполнения.ДатаОкончания) Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Невозможно построить диаграмму - не заполнена дата конца периода.'"));
	Иначе
		Состояние("Построение диаграммы ремонтов по подразделениям...");
		ПостроитьДиаграммуГантаНаСервере();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВProject(Команда)
	
	СписокРемонтов = Новый Массив;
	Для каждого СтрокаПодразделения из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		Для каждого СтрокаРемонта из СтрокаПодразделения.ПолучитьЭлементы() Цикл
			СписокРемонтов.Добавить(Новый Структура("ДокументРегистратор, ID", СтрокаРемонта.ДокументРегистратор, СтрокаРемонта.ID));
		КонецЦикла;
	КонецЦикла;
	
	Торо_ИнтеграцияСmsProject.ОтправитьВProject(СписокРемонтов,Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзProject(Команда)
	
	Оп = Новый ОписаниеОповещения("ВыполнитьПослеЗакрытияФормы", ЭтотОбъект);
	Форма = ОткрытьФорму("ОбщаяФорма.торо_ФормаВыбораФайлаProjectКЗагрузке",,,,,, Оп, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПослеЗакрытияФормы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновленныеДокументы = Новый Массив;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Строка") И РезультатЗакрытия <> "" Тогда
		Если НРег(Прав(РезультатЗакрытия, 3)) = "mpp" Тогда
			ОбновленныеДокументы = Торо_ИнтеграцияСmsProject.ЗагрузитьЗаявки(РезультатЗакрытия, "ПланРабот");
			
		ИначеЕсли НРег(Прав(РезультатЗакрытия, 3)) = "xml" Тогда
			ОбновленныеДокументы = Торо_ИнтеграцияСmsProject.ЗагрузитьЗаявкиИзXML(РезультатЗакрытия, "ПланРабот");
			
		КонецЕсли;
	КонецЕсли;
	
	Для каждого ОбновленныйДокумент из ОбновленныеДокументы Цикл
		Оповестить("ЗагрузкаИзПроджект", ОбновленныйДокумент);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ПостроитьДиаграммуГантаНаСервере()
	    
    мДатаОкончанияПланирования = ПериодВыполнения.ДатаОкончания;
	
	ОтображатьЗамещенные = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =              
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	торо_ПлановыеРемонтныеРаботы.ID,
	|	торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот,
	|	торо_ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот КАК ДатаНач,
	|	торо_ПлановыеРемонтныеРаботы.ДатаОкончанияРемонтныхРабот КАК ДатаКон,
	|	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот КАК ОР,
	|	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот.Подразделение КАК ОбъектРемонтныхРабот,	                  
	|	торо_ПлановыеРемонтныеРаботы.Регистратор КАК ДокументППР,
	|	ЛОЖЬ КАК ЕстьДвиженияПоВЗ,
	|	ИСТИНА КАК ДоступенДляРедактирования,
	|	""ППР"" КАК ИсточникДанных
	|ИЗ
	|	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних КАК торо_ПлановыеРемонтныеРаботы
	|ГДЕ
	|	НЕ торо_ПлановыеРемонтныеРаботы.Отменен 
	|	И НЕ торо_ПлановыеРемонтныеРаботы.Замещен
	|   И (&НетПодразделения ИЛИ торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот.Подразделение В(&СписокПодразделения)) 
	|	И &ПоПланГрафикамППР
	|	//И торо_ПлановыеРемонтныеРаботы.Регистратор ССЫЛКА Документ.торо_ПланГрафикРемонта
	|	И НЕ торо_ПлановыеРемонтныеРаботы.Отменен И НЕ торо_ПлановыеРемонтныеРаботы.Замещен 
	|	И торо_ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	торо_ПлановыеРемонтныеРаботы.ID,
	|	торо_ПлановыеРемонтныеРаботы.ВидМероприятия,
	|	торо_ПлановыеРемонтныеРаботы.ДатаНачала КАК ДатаНач,
	|	торо_ПлановыеРемонтныеРаботы.ДатаОкончания КАК ДатаКон,
	|	торо_ПлановыеРемонтныеРаботы.СписокОбъектов,
	|	торо_ПлановыеРемонтныеРаботы.СписокОбъектов.ПодразделениеИсполнитель КАК ОбъектРемонтныхРабот,                          
	|	торо_ПлановыеРемонтныеРаботы.Регистратор,
	|	ЛОЖЬ КАК ЕстьДвиженияПоВЗ,
	|	ИСТИНА КАК ДоступенДляРедактирования,
	|	""РМ"" КАК ИсточникДанных
	|ИЗ
	|	РегистрСведений.торо_ПлановыеМероприятия.СрезПоследних КАК торо_ПлановыеРемонтныеРаботы
	|ГДЕ
	|	НЕ торо_ПлановыеРемонтныеРаботы.Отменен 
	|	И &ПоГрафикамРегламентныхМероприятий
	|	И НЕ торо_ПлановыеРемонтныеРаботы.Отменен
	|	И торо_ПлановыеРемонтныеРаботы.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И (&НетПодразделения ИЛИ торо_ПлановыеРемонтныеРаботы.СписокОбъектов.ПодразделениеИсполнитель В(&СписокПодразделения)) 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РемонтыВД.ID,
	|	РемонтЗаявка.ВидРемонта,
	|	РемонтЗаявка.ДатаНачалаПлан,
	|	РемонтЗаявка.ДатаОкончанияПлан,
	|	РемонтЗаявка.ОбъектРемонта,
	|	РемонтЗаявка.ОбъектРемонта.Подразделение,	
	|	РемонтЗаявка.Регистратор,
	|	ЛОЖЬ КАК ЕстьДвиженияПоВЗ,
	|	ИСТИНА КАК ДоступенДляРедактирования,
	|	""СПД"" КАК ИсточникДанных
	|ИЗ
	|	РегистрСведений.торо_Ремонты КАК РемонтыВД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК РемонтЗаявка
	|		ПО РемонтыВД.ID = РемонтЗаявка.ID
	|		И РемонтЗаявка.Регистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт
	|		И РемонтыВД.Регистратор ССЫЛКА Документ.торо_ВыявленныеДефекты
	|ГДЕ
	|	(&НетПодразделения ИЛИ РемонтЗаявка.ОбъектРемонта.Подразделение В(&СписокПодразделения))
	|	И &ПоСметамПоДефектам  
	|	И НЕ РемонтЗаявка.ДатаНачалаПлан ЕСТЬ NULL 
	|	И (РемонтЗаявка.ДатаНачалаПлан МЕЖДУ &ДатаНачала И &ДатаОкончания)

	|ОБЪЕДИНИТЬ ВСЕ

	|ВЫБРАТЬ
	|	РемонтыВД.ID,
	|	РемонтЗаявка.ВидРемонта,
	|	РемонтЗаявка.ДатаНачалаПлан,
	|	РемонтЗаявка.ДатаОкончанияПлан,
	|	РемонтЗаявка.ОбъектРемонта,
	|	РемонтЗаявка.ОбъектРемонта.Подразделение,	
	|	РемонтЗаявка.Регистратор,
	|	ЛОЖЬ КАК ЕстьДвиженияПоВЗ,
	|	ИСТИНА КАК ДоступенДляРедактирования,
	|	""СПВН"" КАК ИсточникДанных
	|ИЗ
	|	РегистрСведений.торо_Ремонты КАК РемонтыВД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК РемонтЗаявка
	|		ПО РемонтыВД.ID = РемонтЗаявка.ID
	|		И РемонтЗаявка.Регистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт
	|		И РемонтыВД.Регистратор ССЫЛКА Документ.торо_ВнешнееОснованиеДляРабот
	|ГДЕ
	|	(&НетПодразделения ИЛИ РемонтЗаявка.ОбъектРемонта.Подразделение В(&СписокПодразделения))	
	|	И  &ПоСметамПоВнешнимОснованиям
	|	И НЕ РемонтЗаявка.ДатаНачалаПлан ЕСТЬ NULL 
	|	И (РемонтЗаявка.ДатаНачалаПлан МЕЖДУ &ДатаНачала И &ДатаОкончания)";
	
	МассивПодразделений = Подразделения.ВыгрузитьЗначения();
	Запрос.УстановитьПараметр("НетПодразделения",МассивПодразделений.Количество() = 0);
	Запрос.УстановитьПараметр("СписокПодразделения",МассивПодразделений);

	Запрос.УстановитьПараметр("ДатаНачала",ПериодВыполнения.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ПериодВыполнения.ДатаОкончания);
	
	Запрос.УстановитьПараметр("ПоПланГрафикамППР",ПоПланГрафикамППР);
	Запрос.УстановитьПараметр("ПоСметамПоДефектам",ПоСметамПоДефектам);
	Запрос.УстановитьПараметр("ПоСметамПоВнешнимОснованиям",ПоСметамПоВнешнимОснованиям);
	Запрос.УстановитьПараметр("ПоГрафикамРегламентныхМероприятий",ПоГрафикамРегламентныхМероприятий);

		
	ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();	
	СформироватьДеревоНаФорме(ТаблицаРемонтов);
	
	ТаблицаРемонтов.Сортировать("ДатаНач");
	
	
	ПостроитьДиаграммуГантаДляППР(ДиаграммаГантаПодразделения, ТаблицаРемонтов, , ,,, , , ,Истина);
	
	Если НЕ ЗначениеЗаполнено(мДатаОкончанияПланирования) Тогда
		мДатаОкончанияПланирования = '29991231235959';
		ПериодВыполнения.ДатаОкончания = мДатаОкончанияПланирования;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодВыполнения.ДатаНачала) Тогда
		ПериодВыполнения.ДатаНачала = '10000101000000';
	КонецЕсли;	
	
	ДиаграммаГантаПодразделения.УстановитьПолныйИнтервал(ПериодВыполнения.ДатаНачала, мДатаОкончанияПланирования);
	ДиаграммаГантаПодразделения.ОтображатьЛегенду = Ложь; 
	
КонецПроцедуры

&НаСервере
Процедура СформироватьДеревоНаФорме(ТаблицаРемонтов)
	
	ДеревоСФормы = РеквизитФормыВЗначение("ДеревоРемонтов");	
	ДеревоСФормы.Строки.Очистить();	
	
	ТаблицаРемонтов.Сортировать("ОбъектРемонтныхРабот Возр, ВидРемонтныхРабот Возр,  ДатаНач Возр, ОР Возр,  ДокументППР Возр");	
	
	ТекущееПодразделение = "";
	Для Каждого СтрокаРемонта Из ТаблицаРемонтов Цикл
		
		Если СтрокаРемонта.ОбъектРемонтныхРабот <> ТекущееПодразделение Тогда
			КорневаяСтрока = ДеревоСФормы.Строки.Добавить();
			КорневаяСтрока.Подразделение = СтрокаРемонта.ОбъектРемонтныхРабот;
			ТекущееПодразделение = СтрокаРемонта.ОбъектРемонтныхРабот
		КонецЕсли;
		НоваяСтрока = КорневаяСтрока.Строки.Добавить();
		НоваяСтрока.ID = СтрокаРемонта.ID; 
		НоваяСтрока.Подразделение = СтрокаРемонта.ВидРемонтныхРабот;
		НоваяСтрока.ДатаНачала  =  СтрокаРемонта.ДатаНач;
		НоваяСтрока.ДатаОкончания = СтрокаРемонта.ДатаКон;
		НоваяСтрока.ОбъектРемонта = СтрокаРемонта.ОР;
		НоваяСтрока.ДокументРегистратор = СтрокаРемонта.ДокументППР ;
		
	КонецЦикла;
		
	ЗначениеВРеквизитФормы(ДеревоСФормы, "ДеревоРемонтов");	
	
	
КонецПроцедуры

// Процедура выполняет построение диагрммы Ганта для графика ППР
//
// Параметры:
//  Диаграмма - диаграмма Ганта.
//  ИсхДанные - таблица значений исходных данных.
//
Процедура ПостроитьДиаграммуГантаДляППР(Диаграмма, ТаблицаДанныхППР, СтруктураИерархии = Неопределено, ОтображатьИерархию = Ложь, ИспользоватьИерархию = Ложь, РезультатЗапроса = Неопределено, ЭтоКорректировка = Ложь, Редактировать = Ложь, ИспользоватьРасшифровку = Истина, ДиаграммаДляОтчета = Ложь, СортироватьПоНаименованию = Истина) 
	
	//////////////////////////////////////////////////////
	ТекДата = ТекущаяДата();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	
	ОписаниеТ = новый ОписаниеТипов(МассивТипов);
	
	ЕстьЦепочки = ТаблицаДанныхППР.Колонки.Найти("Цепочка") <> Неопределено;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьВЗ",ОписаниеТ);
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьВЗ");
	КонецЕсли;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьДвиженияПоВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьДвиженияПоВЗ",ОписаниеТ);
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьДвиженияПоВЗ");
	КонецЕсли;
	
	Диаграмма.Очистить();
	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
		
	СерияРемонт = Диаграмма.Серии.Добавить();
	СерияРемонт.Текст = "График ремонта";
	
	ЦветВыполненогоППР 						= WebЦвета.Синий;
	ЦветЗапланированногоППР 				= WebЦвета.Васильковый;	
	
	ЦветВыполненогоМероприятия 				= WebЦвета.ТемноЗеленый;
	ЦветЗапланированногоМероприятия			= WebЦвета.ЖелтоЗеленый;	
	
	ЦветВыполненогоСметыПоДефектам 			= WebЦвета.Красный;
	ЦветЗапланированногоСметыПоДефектам 	= WebЦвета.Кирпичный;
	
	ЦветВыполненогоСметыПоПредписаниям		= WebЦвета.Желтый;
	ЦветЗапланированногоСметыПоПредписаниям	= WebЦвета.Оранжевый; 	
	
	ЦветВыполненого				= WebЦвета.Синий;	
	ЦветИзмененного 			= WebЦвета.Томатный;
	ЦветОтмененного 			= WebЦвета.Красный;
	ЦветЗапланированного 		= WebЦвета.Васильковый;
	ЦветЗамещенногоИсходного 	= WebЦвета.СеребристоСерый;
	ЦветИсходного 				= WebЦвета.ГолубойСоСтальнымОттенком;
	ЦветЗамещенного 			= WebЦвета.СветлоСерый;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ТаблицаДанныхППР.ID,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР,
		|	ТаблицаДанныхППР.ОР,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования,
		|	ТаблицаДанныхППР.ИсточникДанных";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|   ТаблицаДанныхППР.ID,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДокументППР,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ОР,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования,
		|	ТаблицаДанныхППР.ИсточникДанных";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Если ЕстьЦепочки Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.Цепочка, ТаблицаДанныхППР.НомерСтрокиВРЦепочки";
		КонецЕсли;

		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Если ЕстьЦепочки Тогда
                Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	Цепочка,
			    |	НомерСтрокиВРЦепочки,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	ОбъектРемонтныхРабот.Наименование,
				|	ВидРемонтныхРабот,
				|	ДатаНач,
				|	ДатаКон ";
			КонецЕсли;
		Иначе
			Если ЕстьЦепочки Тогда
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР,
				|	Цепочка,
			    |	НомерСтрокиВРЦепочки";
			Иначе
				Запрос.Текст = Запрос.Текст + "
				|УПОРЯДОЧИТЬ ПО
				|	НомерОР ";
			КонецЕсли;
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	ОбъектРемонтныхРабот";
		
		Если ВыводитьПо = "Объектам ремонта" Тогда
			Запрос.Текст = Запрос.Текст + ", ОР";
		Иначе
			Запрос.Текст = Запрос.Текст + ", ВидРемонтныхРабот";
		КонецЕсли;
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоОР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОР.Следующий() Цикл
			
			ТочкаОРР = Диаграмма.Точки.Добавить();
			ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
			Если ИспользоватьРасшифровку Тогда
				ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
			КонецЕсли;
			
			ВыборкаПоВРИлиЦепочкам = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВРИлиЦепочкам.Следующий() Цикл
				
				Если ЕстьЦепочки Тогда
					ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					ВыборкаПоВР.Следующий();
				Иначе
					ВыборкаПоВР = ВыборкаПоВРИлиЦепочкам;
				КонецЕсли;
				ТочкаВРР = ТочкаОРР.Точки.Добавить();
				
				Если ВыводитьПо = "Объектам ремонта" Тогда
					ТочкаВРР.Текст = ВыборкаПоВР.ОР;					
					Если ИспользоватьРасшифровку Тогда
						ТочкаВРР.Расшифровка = ВыборкаПоВР.ОР;
					КонецЕсли; 
				Иначе
					ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;					
					Если ИспользоватьРасшифровку Тогда
						ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
					КонецЕсли; 
				КонецЕсли;
				
				
				Выборка = ВыборкаПоВР.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
					Интервал = Значение.Добавить();
					Интервал.Начало = Выборка.ДатаНач;
					Интервал.Конец = ?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600);
					Если Выборка.ИсточникДанных <> "СПВН" И Выборка.ИсточникДанных <> "СПД" Тогда
						Интервал.Конец = КонецДня(Интервал.Конец);
					КонецЕсли;
					
					Если Выборка.ИсточникДанных = "ППР" Тогда
						Интервал.Цвет   = ?(КонецДня(Выборка.ДатаКон) < ТекДата, ЦветВыполненогоППР,  ЦветЗапланированногоППР);	
					ИначеЕсли Выборка.ИсточникДанных = "РМ" Тогда
						Интервал.Цвет   = ?(КонецДня(Выборка.ДатаКон) < ТекДата, ЦветВыполненогоМероприятия,  ЦветЗапланированногоМероприятия);	
					ИначеЕсли Выборка.ИсточникДанных = "СПД" Тогда
						Интервал.Цвет   = ?(Выборка.ДатаКон < ТекДата, ЦветВыполненогоСметыПоДефектам,  ЦветЗапланированногоСметыПоДефектам);
					ИначеЕсли Выборка.ИсточникДанных = "СПВН" Тогда
						Интервал.Цвет   = ?(Выборка.ДатаКон < ТекДата, ЦветВыполненогоСметыПоПредписаниям,  ЦветЗапланированногоСметыПоПредписаниям);
					КонецЕсли;
					Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец); 					
					
					Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
					Значение.Редактирование = Редактировать;
					Если ИспользоватьРасшифровку Тогда
						Значение.Расшифровка = Новый Структура;
						Значение.Расшифровка.Вставить("ВидРемонта",Выборка.ВидРемонтныхРабот);											
					КонецЕсли;
					
					Интервал = Значение.Добавить();
					Интервал.Начало = Выборка.ДатаНач;
					Интервал.Конец  = ?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600);
					Если Выборка.ИсточникДанных <> "СПВН" И Выборка.ИсточникДанных <> "СПД" Тогда
						Интервал.Конец = КонецДня(Интервал.Конец);
					КонецЕсли;
					
					Если Выборка.ИсточникДанных = "ППР" Тогда
						Интервал.Цвет   = ?(КонецДня(Выборка.ДатаКон) < ТекДата, ЦветВыполненогоППР,  ЦветЗапланированногоППР);	
					ИначеЕсли Выборка.ИсточникДанных = "РМ" Тогда
						Интервал.Цвет   = ?(КонецДня(Выборка.ДатаКон) < ТекДата, ЦветВыполненогоМероприятия,  ЦветЗапланированногоМероприятия);	
					ИначеЕсли Выборка.ИсточникДанных = "СПД" Тогда
						Интервал.Цвет   = ?(Выборка.ДатаКон < ТекДата, ЦветВыполненогоСметыПоДефектам,  ЦветЗапланированногоСметыПоДефектам);
					ИначеЕсли Выборка.ИсточникДанных = "СПВН" Тогда
						Интервал.Цвет   = ?(Выборка.ДатаКон < ТекДата, ЦветВыполненогоСметыПоПредписаниям,  ЦветЗапланированногоСметыПоПредписаниям);
					КонецЕсли;			
					
					Интервал.Текст  = "Объект работ: " + Выборка.ОР + "
										|Вид работ: "+Выборка.ВидРемонтныхРабот +"
										|Дата работ: "+Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец); 			
					
					Если ИспользоватьРасшифровку Тогда
						Интервал.Расшифровка = Новый Структура;
						Если НЕ ВыборкаПоОР.ОбъектРемонтныхРабот = Справочники.СтруктураПредприятия.ПустаяССылка() Тогда
							Интервал.Расшифровка.Вставить("Подразделение",ВыборкаПоОР.ОбъектРемонтныхРабот);
						КонецЕсли;	
						Интервал.Расшифровка.Вставить("Регистратор",Выборка.ДокументППР);
						Интервал.Расшифровка.Вставить("Объект",Выборка.ОР);
						Интервал.Расшифровка.Вставить("ID",Выборка.ID);
					КонецЕсли;
										
					Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
						Интервал.Текст = Интервал.Текст + Символы.ПС + "Начата работа по внутренним заказам.";
					ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
						Интервал.Текст = Интервал.Текст + Символы.ПС + "Введены внутренние заказы.";
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	 
	
КонецПроцедуры // ПостроитьДиаграммуГантаДляППР()

&НаСервере
Процедура УстановитьВидимостьЭлементов()
	
	Если НЕ ПолучитьЗначениеФО("торо_ИспользоватьРегламентныеМероприятия") Тогда
		ПоГрафикамРегламентныхМероприятий = Ложь;
		Элементы.ПоГрафикамРегламентныхМероприятий.Видимость = Ложь;		
	КонецЕсли;
	Если НЕ ПолучитьЗначениеФО("торо_ИспользоватьППР") Тогда
		ПоПланГрафикамППР = Ложь;
		Элементы.ПоПланГрафикамППР.Видимость = Ложь;		
	КонецЕсли;			
	Если НЕ ПолучитьЗначениеФО("торо_ИспользоватьСметыРемонта") Тогда
		ПоСметамПоВнешнимОснованиям = Ложь;
		Элементы.ПоСметамПоВнешнимОснованиям.Видимость = Ложь;
		ПоСметамПоДефектам = Ложь;
		Элементы.ПоСметамПоДефектам.Видимость = Ложь;	
	КонецЕсли;				
	Если НЕ ПолучитьЗначениеФО("торо_ИспользоватьВнешниеОснованияДляРабот") Тогда
		ПоСметамПоВнешнимОснованиям = Ложь;
		Элементы.ПоСметамПоВнешнимОснованиям.Видимость = Ложь;		
	КонецЕсли;					
	Если НЕ ПолучитьЗначениеФО("торо_УчетВыявленныхДефектовОборудования") Тогда
		ПоСметамПоДефектам = Ложь;
		Элементы.ПоСметамПоДефектам.Видимость = Ложь;		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеФО(ТекущаяОпция)
	
	Возврат ПолучитьФункциональнуюОпцию(ТекущаяОпция);
	
КонецФункции

&НаКлиенте
Процедура ОтображениеЛегенды(Команда)
	
	Элементы.ОтображениеЛегенды.Пометка = НЕ Элементы.ОтображениеЛегенды.Пометка;
	Элементы.ГруппаЛегенда.Видимость = Элементы.ОтображениеЛегенды.Пометка;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаголовокСвернутойГруппы()
	
	ЗаголовокСвернутойГруппы = "Выводить информацию по ";
	
	ПерваяЗапись = Истина;
	Если ПоСметамПоДефектам Тогда
		ЗаголовокСвернутойГруппы = ЗаголовокСвернутойГруппы + "заявкам по дефектам";
		ПерваяЗапись = Ложь;
	КонецЕсли;
	
	Если ПоСметамПоВнешнимОснованиям Тогда
		Если не ПерваяЗапись тогда
			ЗаголовокСвернутойГруппы = ЗаголовокСвернутойГруппы + ", ";
		КонецЕсли;
		
		ЗаголовокСвернутойГруппы = ЗаголовокСвернутойГруппы + "заявкам по внешним основаниям";
		ПерваяЗапись = Ложь;
	КонецЕсли;
	
	Если ПоПланГрафикамППР Тогда
		Если не ПерваяЗапись тогда
			ЗаголовокСвернутойГруппы = ЗаголовокСвернутойГруппы + ", ";
		КонецЕсли;
		ЗаголовокСвернутойГруппы = ЗаголовокСвернутойГруппы + "план-графикам ППР";
		ПерваяЗапись = Ложь;
	КонецЕсли;
	
	Если ПоГрафикамРегламентныхМероприятий Тогда
		Если не ПерваяЗапись тогда
			ЗаголовокСвернутойГруппы = ЗаголовокСвернутойГруппы + ", ";
		КонецЕсли;
		ЗаголовокСвернутойГруппы = ЗаголовокСвернутойГруппы + "графикам регламентных мероприятий";
	КонецЕсли;
	
	//ЗаголовокСвернутойГруппы = ЛЕВ(ЗаголовокСвернутойГруппы, СтрДлина(ЗаголовокСвернутойГруппы) - 2);
	Элементы.ВыводитьИнформациюПо.ЗаголовокСвернутогоОтображения = ЗаголовокСвернутойГруппы;
	
КонецПроцедуры

#КонецОбласти