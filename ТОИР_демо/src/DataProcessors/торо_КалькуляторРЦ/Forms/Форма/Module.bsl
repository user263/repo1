////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаСервере
Перем СоответсвиеЦветов;
Перем ТаблицаРемонтовВизуализация;
Перем ТаблицаРемонтов;
Перем Нормировать;
&НаСервере
Перем МинШаг;
&НаСервере
Перем ОбработкаЗащита_Мнемосхемы;
&НаСервере
Перем ДатаПланированияОкончание;
&НаСервере
Перем МассивИменПолейДляПроверки;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Элементы.ДеревоРемонтовПланГрафикППР.КоманднаяПанель.Видимость = Ложь;
	
	// Добавляем колонки Реквизиты из ТЧ ППР
		
	// †5 Тут некоторые переменные, которые, возможно, нужно инициализировать где-то ещё.
	ОтображатьЗамещенные = Истина;
	СортироватьПоНаименованию = Истина;
	ОтображатьПоложение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
			"НастройкиТОиР",
			"ПоказыватьПоложениеОР",
			Истина);
	РассчитыватьСтоимости = Истина;
	Элементы.ОтображатьЗамещенные.Пометка          = ОтображатьЗамещенные;
	Элементы.ОтображатьПоложение.Пометка           = ОтображатьПоложение;
	Элементы.ОтображатьПоложение1.Пометка          = ОтображатьПоложение;
	Элементы.СортироватьПоНаименованию.Пометка     = СортироватьПоНаименованию;
	ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот;
	Элементы.КорректируемыйДокумент.Доступность    = Ложь;
	
	//
	ДатаПланирования = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(),1));
	КоличествоПериодов = 1;
	ПериодичностьДетализации = Перечисления.Периодичность.Месяц;
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
// Регулирование масштаба диаграммы
//
&НаКлиенте
Процедура ПолосаРегулированияМасштабаДиаграммы1ПриИзменении(Элемент)
	
	Если ПолосаРегулированияМасштабаДиаграммы < 1 Тогда
		ДиаграммаГанта.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		ДиаграммаГанта.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		ДиаграммаГанта.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		ДиаграммаГанта.КратностьПериодическогоВарианта 	= ПолосаРегулированияМасштабаДиаграммы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьДетализацииПриИзменении(Элемент)
	
	ДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования();
	
	ОбновитьДоступностьДляРедактирования();
		
КонецПроцедуры

&НаКлиенте
Процедура РемонтныйЦиклВыбор(Элемент)
	
	Если НЕ Элемент.ТекущийЭлемент = Неопределено Тогда
		
		СтрокаСоответствия = Неопределено;
		Для Каждого Строка Из Объект.СдвигСтрокМнемосхема Цикл
			Если Строка.Имя = Элемент.ТекущийЭлемент.Имя Тогда
				СтрокаСоответствия = Строка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаСоответствия = Неопределено Тогда
			Для Каждого Строка Из Объект.СдвигСтрокМнемосхема Цикл
				Если Строка.Имя = Элемент.ТекущийЭлемент.КонецЭлемент.Имя Тогда
					СтрокаСоответствия = Строка;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НомерКолонки = СтрокаСоответствия.НомерКолонки;
		СдвигСтрок = СтрокаСоответствия.СдвигСтрок;
		ИндексСтроки = 9 + Объект.КолонкиНаработки.Количество();
		Элементы.ТабДокРасшифровкаРемонтногоЦикла.ТекущаяОбласть = ТабДокРасшифровкаРемонтногоЦикла.Область(3+СдвигСтрок,НомерКолонки,8 + ИндексСтроки - 7+СдвигСтрок);
		ЭтаФорма.ТекущийЭлемент = Элементы.ТабДокРасшифровкаРемонтногоЦикла;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВРНачалоЦиклаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ОРМнемосхема) Тогда
		Список = Элементы.ВРНачалоЦикла.СписокВыбора;
		Список.Очистить();
		ЗаписатьДеревоППРСУчетомПозиции();
		
		Для Каждого Строка Из ОбъектыРемонта Цикл
			Если Строка.ОбъектРемонтныхРабот = ОРМнемосхема И ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
				Список.Добавить(Строка.ВидРемонтныхРабот,Строка.ВидРемонтныхРабот);
			КонецЕсли;
		КонецЦикла;
		
		СписокВыбораВР = Список;
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОРМнемосхемаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Список = Элементы.ОРМнемосхема.СписокВыбора;
	Список.Очистить();
	Для Каждого Строка1Уровень Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		
			Если ПолучитьЗначениеСвойства(Строка1Уровень.Ремонты,"ЭтоГруппа") Тогда
				Для Каждого Строка2Уровень Из Строка1Уровень.ПолучитьЭлементы() Цикл
					Список.Добавить(Строка2Уровень.Ремонты, Строка(Строка2Уровень.Ремонты));
				КонецЦикла;
			Иначе
				Список.Добавить(Строка1Уровень.Ремонты, Строка(Строка1Уровень.Ремонты));
			КонецЕсли;
		КонецЦикла;
	Список.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ЗакладкаРемонтныйЦикл И ЗначениеЗаполнено(ОРМнемосхема) Тогда
		Если ЗначениеЗаполнено(ОРМнемосхема) Тогда
			Список = Элементы.ВРНачалоЦикла.СписокВыбора;
			Список.Очистить();
			ЗаписатьДеревоППРСУчетомПозиции();
			
			Для Каждого Строка Из ОбъектыРемонта Цикл
				Если Строка.ОбъектРемонтныхРабот = ОРМнемосхема Тогда
					Список.Добавить(Строка.ВидРемонтныхРабот,Строка.ВидРемонтныхРабот.Наименование);
				КонецЕсли;
			КонецЦикла;
			
			СписокВыбораВР = Список;	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНГрафикВыполненияПриИзменении(Элемент)
	
	ТекущиеДанныеСтроки = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные.ПолучитьЭлементы();
	НовоеЗначениеГрафика = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные.ГрафикРемонтныхРабот;
	Для Каждого СтрокаВР Из ТекущиеДанныеСтроки Цикл
		СтрокаВР.ГрафикРемонтныхРабот = НовоеЗначениеГрафика;
	КонецЦикла;
	
	ПриИзмененииСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНТехнологическаяКартаПриИзменении(Элемент)
	
	ПриИзмененииСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНСпособыУчетаДатыОтсчетаПриИзменении(Элемент)
	
	ПриИзмененииСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНСпособВыполненияПриИзменении(Элемент)
	
	ПриИзмененииСтрокиДерева();	
	
КонецПроцедуры

&НаКлиенте
Процедура ТЗНСпособПланированияПриИзменении(Элемент)

	ПриИзмененииСтрокиДерева();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтов
&НаКлиенте
Процедура ДеревоРемонтовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		ТекущиеДанные = Элементы.ДеревоРемонтовПланГрафикППР.ТекущиеДанные;
		Элементы.ПланРемонтов.ОтборСтрок = Неопределено;
		Если ТекущиеДанные <> Неопределено Тогда
			Элементы.ПланРемонтовВидРемонтныхРабот.Видимость = НЕ (ТипЗнч(ТекущиеДанные.Ремонты)=Тип("СправочникСсылка.торо_ВидыРемонтов"));
			Элементы.ПланРемонтовОбъектРемонтныхРабот.Видимость = НЕ ((ТипЗнч(ТекущиеДанные.Ремонты)=Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ПолучитьЗначениеСвойства(ТекущиеДанные.Ремонты,"ЭтоГруппа") ИЛИ (ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов"))));
			Элементы.ПланРемонтов.Обновить();
			Если ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
				ОР = ДеревоРемонтов.НайтиПоИдентификатору(Элементы.ДеревоРемонтовПланГрафикППР.ТекущаяСтрока).ПолучитьРодителя();
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидРемонтныхРабот, ОбъектРемонтныхРабот", ТекущиеДанные.Ремонты, ОР.Ремонты);
			ИначеЕсли (ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта")) И Не ПолучитьЗначениеСвойства(ТекущиеДанные.Ремонты,"ЭтоГруппа") Тогда
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот", ТекущиеДанные.Ремонты);
			Иначе 
				Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Родитель", ТекущиеДанные.Ремонты);
			КонецЕсли;
						
		КонецЕсли;
		
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
		
		ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
		Элементы.ПлановыеРемонтныеРаботы.ОтборСтрок = Неопределено;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ЭтоГруппа = ПолучитьЗначениеСвойства(ТекущиеДанные.Ремонты,"ЭтоГруппа");
			Элементы.ПлановыеРемонтныеРаботыВидРемонтныхРабот.Видимость      = НЕ (ТипЗнч(ТекущиеДанные.Ремонты)  = Тип("СправочникСсылка.торо_ВидыРемонтов"));
			Элементы.ПлановыеРемонтныеРаботыОбъектРемонтныхРабот.Видимость   = НЕ ((ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ЭтоГруппа 
																			   ИЛИ (ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов"))));
																			
			Элементы.ПлановаяНаработкаОбъектРемонта.Видимость                = НЕ ((ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ЭтоГруппа
																			   ИЛИ (ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов"))));
			Элементы.ЗавершенныеРемонтныеРаботыОбъектРемонтныхРабот.Видимость = НЕ ((ТипЗнч(ТекущиеДанные.Ремонты)=Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ЭтоГруппа ИЛИ (ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов"))));
			Элементы.ФактическаяНаработкаОбъектРемонта.Видимость = НЕ ((ТипЗнч(ТекущиеДанные.Ремонты)=Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ЭтоГруппа ИЛИ (ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов"))));
			Элементы.ПлановыеРемонтныеРаботы.Обновить();
			
			Если ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
				
				СтруктураОтбора = Новый ФиксированнаяСтруктура("ВидРемонта,ОбъектРемонта", ТекущиеДанные.Ремонты, ТекущиеДанные.ПолучитьРодителя().Ремонты);
				Элементы.ВидыРемонтныхРаботДляОтсчета.ОтборСтрок = СтруктураОтбора;
				Элементы.ВидыРемонтныхРаботДляЗамещения.ОтборСтрок = СтруктураОтбора;
				СтруктураОтбора = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекущиеДанные.ПолучитьРодителя().Ремонты);
				Элементы.ЗавершенныеРемонтныеРаботы.ОтборСтрок = СтруктураОтбора;
				Элементы.ПлановаяНаработка.ОтборСтрок = СтруктураОтбора;
				Элементы.ФактическаяНаработка.ОтборСтрок = СтруктураОтбора;
				
				Элементы.ЗакладкиНормативыВР.Видимость			= Истина;
				Элементы.ЗакладкиНормативыОР.Видимость			= Ложь;
				
				Элементы.ДеревоРемонтовНормативыКонтекстноеМенюПроверитьРезультатДляРЦ.Доступность = Истина;
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И ЭтоГруппа = Ложь Тогда		
				
				СтруктураОтбора = Новый ФиксированнаяСтруктура("ОбъектРемонта", ТекущиеДанные.Ремонты);
				Элементы.ПлановаяНаработка.ОтборСтрок = СтруктураОтбора;
				Элементы.ФактическаяНаработка.ОтборСтрок = СтруктураОтбора;
				Элементы.ЗавершенныеРемонтныеРаботы.ОтборСтрок = СтруктураОтбора;
				Элементы.ПлановыеРемонтныеРаботы.ОтборСтрок = Новый ФиксированнаяСтруктура("ОбъектРемонтныхРабот", ТекущиеДанные.Ремонты);
				
				Элементы.ЗакладкиНормативыВР.Видимость			= Ложь;
				Элементы.ЗакладкиНормативыОР.Видимость			= Истина;
				
				Элементы.ТЗНГрафикВыполнения.Видимость						 = Истина;
				
				Элементы.ДеревоРемонтовНормативыКонтекстноеМенюПроверитьРезультатДляРЦ.Доступность = Истина;
 								
			Иначе	
				
				СтруктураОтбора = Новый ФиксированнаяСтруктура("Родитель", ТекущиеДанные.Ремонты);
				Элементы.ФактическаяНаработка.ОтборСтрок		 = СтруктураОтбора;
				Элементы.ПлановаяНаработка.ОтборСтрок			 = СтруктураОтбора;
				Элементы.ЗавершенныеРемонтныеРаботы.ОтборСтрок	 = СтруктураОтбора;
				Элементы.ПлановыеРемонтныеРаботы.ОтборСтрок 	 = СтруктураОтбора;
				
				Элементы.ПлановаяНаработкаКоманднаяПанель.Доступность 		   = Ложь;
				Элементы.ФактическаяНаработкаКоманднаяПанель.Доступность 	   = Ложь;
				Элементы.ЗавершенныеРемонтныеРаботыКоманднаяПанель.Доступность = Ложь;
				Элементы.ПлановыеРемонтныеРаботыКоманднаяПанель.Доступность    = Ложь;
				
				Элементы.ТЗНГрафикВыполнения.Видимость						 = Ложь;
				Элементы.Группа1.Видимость 									 = Ложь;
				Элементы.Группа2.Видимость 									 = Ложь;
				Элементы.ЗакладкаНормативыВРДляОтсчета.Видимость 			 = Ложь;
				Элементы.ЗакладкаНормативыВРЗамещаемые.Видимость			 = Ложь;
				Элементы.ЗакладкаНормативыВРЗавершенные.Видимость			 = Истина;
				Элементы.ЗакладкаНормативыВРПлановаяНаработка.Видимость		 = Истина;
				Элементы.ЗакладкаНормативыВРПлановыеРемонты.Видимость		 = Истина;
				Элементы.ЗакладкаНормативыВРФактическаяНаработка.Видимость	 = Истина;
				
				Элементы.ДеревоРемонтовНормативыКонтекстноеМенюПроверитьРезультатДляРЦ.Доступность = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
	 	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		
		Если ПолучитьЗначениеСвойства(ВыбранноеЗначение,"ЭтоГруппа") Тогда
			
			СтандартнаяОбработка = Ложь;
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'В документ нельзя вносить группы объектов ремонтных работ!'"), 60);
			Возврат;
			
		КонецЕсли;
		Если ПолучитьЗначениеСвойства(ВыбранноеЗначение,"НеУчаствуетВПланировании") Тогда
			
			Ответ = Неопределено;

			ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для объекта ремонта %1 установлен признак ""Не участвует в планировании"". Добавить объект ремонта?'"),Строка(ВыбранноеЗначение));
			ПоказатьВопрос(Новый ОписаниеОповещения("ДеревоРемонтовОбработкаВыбораЗавершение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение)),ТекстВопроса,РежимДиалогаВопрос.ДаНет);
            Возврат;
            
		КонецЕсли;
		
		ДеревоРемонтовОбработкаВыбораФрагмент(ВыбранноеЗначение);

	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
			ЭлементДерево = Элементы.ДеревоРемонтовПланГрафикППР;
		ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
			ЭлементДерево = Элементы.ДеревоРемонтовНормативы;
		КонецЕсли;
		
		ТекСтрокаДерева = ЭлементДерево.ТекущиеДанные;
		СтрокаРодитель = ТекСтрокаДерева;
		
		Если ТекСтрокаДерева = Неопределено Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта для ввода ремонтной работы!'"), 60);
			Возврат;
			
		ИначеЕсли ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И ПолучитьЗначениеСвойства(ТекСтрокаДерева.Ремонты,"ЭтоГруппа") Тогда
			
			ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Укажите объект ремонта для ввода ремонтной работы!'"), 60);
			Возврат;
			
		ИначеЕсли ТипЗнч(ТекСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			СтрокаРодитель = ДеревоРемонтов.НайтиПоИдентификатору(ЭлементДерево.ТекущаяСтрока).ПолучитьРодителя();
			
		КонецЕсли; 
		
		ДеревоРемонтовОбработкаВыбораВРНаСервере(ВыбранноеЗначение, СтрокаРодитель.Ремонты);
		РазвернутьВсеВетвиДеревьев();
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДанныеФормыДерево") Тогда
		
		МассивОР = Новый Массив;
		
		Для Каждого СтрокаОР Из ВыбранноеЗначение.ПолучитьЭлементы() Цикл
			
			МассивВидовРемонта = Новый Массив;
			Для Каждого СтрокаВР Из СтрокаОР.ПолучитьЭлементы() Цикл
				МассивОР.Добавить(Новый Структура("ВидРемонтныхРабот,ОбъектРемонтныхРабот",СтрокаВР.Объект,СтрокаОР.Объект));
				МассивВидовРемонта.Добавить(СтрокаВР.Объект);
			КонецЦикла;
			ДополнитьДеревоРемонтовНаСервере(СтрокаОР.Объект, МассивВидовРемонта);
									
		КонецЦикла;
		
	
	ЗаполнитьНормативыИзСистемы(,,МассивОР,Ложь);	
	РазвернутьВсеВетвиДеревьев();
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтовОбработкаВыбораЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    
    ДеревоРемонтовОбработкаВыбораФрагмент(ВыбранноеЗначение);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтовОбработкаВыбораФрагмент(ВыбранноеЗначение)
    
    ДополнитьДеревоРемонтовНаСервере(ВыбранноеЗначение);
    РазвернутьВсеВетвиДеревьев();

КонецПроцедуры

&НаКлиенте
Процедура ДеревоРемонтовПослеУдаления(Элемент)
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого ЭлементПервогоУровня Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		Если ЭлементПервогоУровня.ПолучитьЭлементы().Количество() = 0 Тогда
			МассивУдаляемыхСтрок.Добавить(ЭлементПервогоУровня);
		КонецЕсли;
	КонецЦикла;	
	Для Каждого УдаляемыйЭлемент Из МассивУдаляемыхСтрок Цикл
		Индекс = ДеревоРемонтов.ПолучитьЭлементы().Индекс(УдаляемыйЭлемент);
		ДеревоРемонтов.ПолучитьЭлементы().Удалить(Индекс);
	КонецЦикла;
	
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоРемонтовНормативы
&НаКлиенте
Процедура ДеревоРемонтовНормативыПередУдалением(Элемент, Отказ)
	
	МассивВыделенныхСтрок = Элементы.ДеревоРемонтовНормативы.ВыделенныеСтроки;
	ДеревоРемонтовНормативыПередУдалениемНаСервере(МассивВыделенныхСтрок);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыВидыРемонтныхРаботДляОтсчета
&НаКлиенте
Процедура ВидыРемонтныхРаботДляОтсчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран вид ремонта!'");
	    Сообщение.Поле = "Элементы.ДеревоРемонтов";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ФормаВыбораРемонта = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора",,Элемент);
	Если ФормаВыбораРемонта.Открыта() Тогда
		ФормаВыбораРемонта.Активизировать();
	Иначе
		ФормаВыбораРемонта.Открыть();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтныхРаботДляОтсчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИдентификаторТекущейСтроки = Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока;
	ВидыРемонтныхРаботДляОтсчетаОбработкаВыбораНаСервере(ВыбранноеЗначение,ИдентификаторТекущейСтроки);
	ПриИзмененииСтрокиДерева();
		
КонецПроцедуры

&НаСервере
Процедура ВидыРемонтныхРаботДляОтсчетаОбработкаВыбораНаСервере(ВыбранноеЗначение,ИдентификаторТекущейСтроки)
	
	ТабПредшествующиеРемонты = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета");
	ТекущаяСтрока = ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	СтруктураОтбора = Новый Структура("ВидРемонта,ОбъектРемонта,ПредшествующийВидРемонта",ТекущаяСтрока.Ремонты,ТекущийРодитель.Ремонты,ВыбранноеЗначение);
	Если ЗначениеЗаполнено(ТабПредшествующиеРемонты.НайтиСтроки(СтруктураОтбора)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Данный вид ремонта уже добавлен.'");
		Сообщение.Поле = "Элементы.ВидыРемонтныхРаботДляОтсчета";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	НоваяСтрока = ТабПредшествующиеРемонты.Добавить();
    НоваяСтрока.ВидРемонта = ТекущаяСтрока.Ремонты;
	НоваяСтрока.ГруппаОбъектовРемонтов = ТекущийРодитель.Ремонты.ТиповойОР;
	НоваяСтрока.ПредшествующийВидРемонта = ВыбранноеЗначение;
	НоваяСтрока.ОбъектРемонта = ТекущийРодитель.Ремонты;
	ЗначениеВРеквизитФормы(ТабПредшествующиеРемонты,"ВидыРемонтныхРаботДляОтсчета");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтныхРаботДляЗамещенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено ИЛИ ТипЗнч(ТекущиеДанные.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Не выбран вид ремонта!'");
	    Сообщение.Поле = "Элементы.ДеревоРемонтов";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	ФормаВыбораРемонта = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора",,Элемент);
	Если ФормаВыбораРемонта.Открыта() Тогда
		ФормаВыбораРемонта.Активизировать();
	Иначе
		ФормаВыбораРемонта.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтныхРаботДляЗамещенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ИдентификаторТекущейСтроки = Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока;
	ВидыРемонтныхРаботДляЗамещенияОбработкаВыбораНаСервере(ВыбранноеЗначение,ИдентификаторТекущейСтроки);
	
КонецПроцедуры

&НаСервере
Процедура ВидыРемонтныхРаботДляЗамещенияОбработкаВыбораНаСервере(ВыбранноеЗначение,ИдентификаторТекущейСтроки)
	
	ТабЗамещаемыеРемонты = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения");
	ТекущаяСтрока = ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	ТекущийРодитель = ТекущаяСтрока.ПолучитьРодителя();
	СтруктураОтбора = Новый Структура("ВидРемонта, ОбъектРемонта, ЗамещаемыйВидРемонта",ТекущаяСтрока.Ремонты,ТекущийРодитель.Ремонты,ВыбранноеЗначение);
	Если ЗначениеЗаполнено(ТабЗамещаемыеРемонты.НайтиСтроки(СтруктураОтбора)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Данный вид ремонта уже добавлен.'");
		Сообщение.Поле = "Элементы.ВидыРемонтныхРаботДляЗамещения";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	НоваяСтрока = ТабЗамещаемыеРемонты.Добавить();
	НоваяСтрока.ВидРемонта             = ТекущаяСтрока.Ремонты;
	НоваяСтрока.ГруппаОбъектовРемонтов = ТекущийРодитель.Ремонты;
	НоваяСтрока.ЗамещаемыйВидРемонта   = ВыбранноеЗначение;
	НоваяСтрока.ОбъектРемонта          = ТекущийРодитель.Ремонты;
	ЗначениеВРеквизитФормы(ТабЗамещаемыеРемонты,"ВидыРемонтныхРаботДляЗамещения");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыРемонтныхРаботДляОтсчетаПриИзменении(Элемент)
	ПриИзмененииСтрокиДерева();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗавершенныеРемонтныеРаботы
&НаКлиенте
Процедура ЗавершенныеРемонтныеРаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанныеТаблицы = Элемент.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.ВидРемонтныхРабот) 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.ДатаНачала)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.ДатаОкончания) Тогда	
		    	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не все поля заполнены!'"));
				Отказ = Истина;
				Возврат;
		Иначе
			ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
			ТекущиеДанныеТаблицы.Активность = Истина;
			ТекущиеДанныеТаблицы.ОбъектРемонта = ТекущиеДанныеДерева.Ремонты;
			ТекущиеДанныеТаблицы.Период = ТекущиеДанныеТаблицы.ДатаНачала;
			ТекущиеДанныеТаблицы.Регистратор = "";
			ТекущиеДанныеТаблицы.Родитель = ТекущиеДанныеДерева.Ремонты.Родитель;
			
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлановыеРемонтныеРаботы
&НаКлиенте
Процедура ПлановыеРемонтныеРаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанныеТаблицы = Элемент.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.ВидРемонтныхРабот) 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.ДатаНачалаРемонтныхРабот)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.ДатаОкончанияРемонтныхРабот)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.СпособВыполнения)	Тогда
		    	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не все поля заполнены!'"));
				Отказ = Истина;
				Возврат;
		Иначе
			ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные; 
			ТекущиеДанныеТаблицы.ОбъектРемонтныхРабот = ТекущиеДанныеДерева.Ремонты;
			ТекущиеДанныеТаблицы.Регистратор = "";
			ТекущиеДанныеТаблицы.Родитель = ТекущиеДанныеДерева.Ремонты.Родитель;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПлановаяНаработка
&НаКлиенте
Процедура ПлановаяНаработкаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанныеТаблицы = Элемент.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.ПродолжительностьПериодаПлановойНаработки) 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.ПлановаяНаработка)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.Показатель)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.ПериодПлановойНаработки)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.КоэффициентИспользованияОборудования)	Тогда	
		    	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не все поля заполнены!'"));
				Отказ = Истина;
				Возврат;
		Иначе
			ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
			ТекущиеДанныеТаблицы.ОбъектРемонта = ТекущиеДанныеДерева.Ремонты;
			ТекущиеДанныеТаблицы.Период = ТекущаяДата();
			ТекущиеДанныеТаблицы.Родитель = ТекущиеДанныеДерева.Ремонты.Родитель;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыФактическаяНаработка
&НаКлиенте
Процедура ФактическаяНаработкаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Не ОтменаРедактирования Тогда
		ТекущиеДанныеТаблицы = Элемент.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.Показатель) 
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.НаработкаПриход)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанныеТаблицы.Период) Тогда	
		    	торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не все поля заполнены!'"));
				Отказ = Истина;
				Возврат;
		Иначе
			ТекущиеДанныеДерева = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
			ТекущиеДанныеТаблицы.ОбъектРемонта = ТекущиеДанныеДерева.Ремонты;
			// ТекущиеДанныеТаблицы.Родитель = ТекущиеДанныеДерева.Ремонты.Родитель;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНормативныеДанные
&НаКлиенте
Процедура НормативныеДанныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Элементы.ДеревоРемонтовНормативы.ТекущиеДанные = Неопределено Тогда
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для добавления новой строки необходимо выбрать объект ремонта!'");
		Сообщение.Поле = "ДеревоРемонтов";
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура РассчитатьКнопка(Команда)
		
	РассчитатьПроцедура(Неопределено);
		
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГанта(Команда)
	
	Режим = РежимДиалогаВопрос.ДаНет;
	Ответ = Неопределено;

	ПоказатьВопрос(Новый ОписаниеОповещения("ПостроитьДиаграммуГантаЗавершение", ЭтотОбъект), НСтр("ru = 'Данное действие требует длительного времени. Продолжить?'"), Режим, 0, КодВозвратаДиалога.Нет);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОР(Команда)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовПланГрафикППР;
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовНормативы;
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",, ЭлементДерево);
    ФормаВыбора.Открыть();
	Модифицированность = Истина;
	
КонецПроцедуры

// Открыть форму выбора справочника виды ремонта
//
&НаКлиенте
Процедура ДобавитьРемонт(Команда)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовПланГрафикППР;
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовНормативы;
	КонецЕсли;
	ФормаВыбора = ПолучитьФорму("Справочник.торо_ВидыРемонтов.ФормаВыбора",, ЭлементДерево);
	ФормаВыбора.Открыть();
	Модифицированность = Истина;
	
КонецПроцедуры

// Открыть форму подбора объектов и видов ремонта
//
&НаКлиенте
Процедура Подбор(Команда)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовПланГрафикППР;
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы Тогда
		ЭлементДерево = Элементы.ДеревоРемонтовНормативы;
	КонецЕсли;
	
	ФормаПодбора = ПолучитьФорму("Обработка.торо_ПодборОбъектовРемонтныхРабот.Форма.ФормаПодбораОбъектовДляПланаГрафикаППР",
								Новый Структура("КлючНазначенияИспользования,СтруктураИерархии", "торо_КалькуляторРЦ",СтруктураИерархии),ЭлементДерево,"КалькуляторРЦ");
								
	ФормаПодбора.ЗакрыватьПриВыборе = Ложь;
	
	Если ФормаПодбора.Открыта() Тогда
		
		ФормаПодбора.Активизировать();
		
	Иначе
		
		ФормаПодбора.Открыть();
		
	КонецЕсли;

КонецПроцедуры

// Включение/Отключение сортировки
//
&НаКлиенте
Процедура СортироватьПоНаименованию(Команда)
	
	Если ОтображатьПоложение Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сортировать объекты ремонта в порядке следования в дереве возможно только при отключенной опции ""Отображать положение"".'"));
		Возврат;
	КонецЕсли;
	Элементы.СортироватьПоНаименованию.Пометка = НЕ Элементы.СортироватьПоНаименованию.Пометка;
	СортироватьПоНаименованию = Элементы.СортироватьПоНаименованию.Пометка;
	
КонецПроцедуры

// Выбор вида иерархии
//
&НаКлиенте
Процедура НастройкаВидаИерархии(Команда)
	
	СписокСтруктур = торо_РаботаСДиалогами.ЗаполнитьСписокСтруктур(СтруктураИерархии);
	
	СтруктураИерархииПредыдущая = СтруктураИерархии;
	
	ТекущаяИерархия = СписокСтруктур.НайтиПоЗначению(СтруктураИерархии);
	
	СписокСтруктур.ПоказатьВыборЭлемента(Новый ОписаниеОповещения("НастройкаВидаИерархииЗавершение",ЭтотОбъект,	Новый Структура("СтруктураИерархииПредыдущая", СтруктураИерархииПредыдущая)),НСтр("ru = 'Выберите вид иерархии'"), ТекущаяИерархия);
	
КонецПроцедуры

// Включение/Отключение отображения положения
//
&НаКлиенте
Процедура ОтображатьПоложение(Команда)
	
	Элементы.ОтображатьПоложение.Пометка = НЕ Элементы.ОтображатьПоложение.Пометка;
	Элементы.ОтображатьПоложение1.Пометка = НЕ Элементы.ОтображатьПоложение1.Пометка;
	
	ОтображатьПоложение = Элементы.ОтображатьПоложение.Пометка;
	
	// †6
 	ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции(СтруктураИерархии);
	РазвернутьВсеВетвиДеревьев();
	Элементы.ДиаграммаГантаМодифицированность.Видимость = Истина;
	
КонецПроцедуры

// Включение/Отключение отображения замещенных ремонтов
//
&НаКлиенте
Процедура ОтображатьЗамещенные(Команда)
	 	
	Элементы.ОтображатьЗамещенные.Пометка = НЕ Элементы.ОтображатьЗамещенные.Пометка;
	ОтображатьЗамещенные = Элементы.ОтображатьЗамещенные.Пометка;
	
	Если ОтображатьЗамещенные Тогда
		Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Неопределено);
	Иначе
		Элементы.ПланРемонтов.ОтборСтрок = Новый ФиксированнаяСтруктура("Замещен", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьМнемосхемуКнопка(Команда)
	
	ПостроитьМнемосхемуПроцедура();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемы(Команда)
	
	НормативыЗаполнены = Ложь;
	
	ПроверитьЗаполненностьПередПолучениемНормативовИзСистемыЦикл(НормативыЗаполнены);
	
	Если НормативыЗаполнены ИЛИ ВидыРемонтныхРаботДляЗамещения.Количество() > 0 ИЛИ ВидыРемонтныхРаботДляОтсчета.Количество() > 0 Тогда
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьДанныеИзСистемыЗавершение", ЭтотОбъект), НСтр("ru = 'Данное действие приведет к заполнению всех нормативов данными из информационной базы. Все несохраненные изменения будут потеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	ЗагрузитьДанныеИзСистемыФрагмент(Ответ);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВСистемуДляВыбранных(Команда)
	
    Если ПроверкаПередСохранением() Тогда
		ПараметрыСохранения = Новый Структура("Дерево, МассивСтрок",ДеревоРемонтов,Элементы.ДеревоРемонтовНормативы.ВыделенныеСтроки);
		
		ФормаСохранения = ПолучитьФорму("Обработка.торо_КалькуляторРЦ.Форма.ФормаСохранения",ПараметрыСохранения,ЭтаФорма,ЭтаФорма);
		ФормаСохранения.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗагрузитьДанныеВСистемуДляВыбранныхЗавершение",ЭтотОбъект);
		ФормаСохранения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ФормаСохранения.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВСистемуДляВсех(Команда)
	
    Если ПроверкаПередСохранением() Тогда
		ПараметрыСохранения = Новый Структура("Дерево",ДеревоРемонтов);
		
		ФормаСохранения = ПолучитьФорму("Обработка.торо_КалькуляторРЦ.Форма.ФормаСохранения",ПараметрыСохранения,ЭтаФорма,ЭтаФорма);
		ФормаСохранения.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗагрузитьДанныеВСистемуДляВсехЗавершение",ЭтотОбъект);
		ФормаСохранения.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		ФормаСохранения.Открыть();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыДляВыбранных(Команда)
	
	МассивИндексов = Элементы.ДеревоРемонтовНормативы.ВыделенныеСтроки;
	Если ЗначениеЗаполнено(МассивИндексов) Тогда
		
		НормативыЗаполнены = Ложь;
		МассивСтрок = Новый Массив;
		Для Каждого ИдентификаторСтроки Из МассивИндексов Цикл
			СтрокаДерева = ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторСтроки);
			МассивСтрок.Добавить(СтрокаДерева);
		КонецЦикла;
		Для Каждого ВР ИЗ МассивСтрок Цикл
			ПродолжитьЗаполнение = НЕ (ЗначениеЗаполнено(ВР.СпособВыполнения) ИЛИ ЗначениеЗаполнено(ВР.НормативныйРемонт) ИЛИ
			ЗначениеЗаполнено(ВР.СпособПланирования) ИЛИ ЗначениеЗаполнено(ВР.СпособУчетаДатыОтсчета));
		КонецЦикла;
		
		Если НЕ ПродолжитьЗаполнение Тогда
			Ответ = Неопределено;

			ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьДанныеИзСистемыДляВыбранныхЗавершение", ЭтотОбъект, Новый Структура("МассивИндексов", МассивИндексов)), НСтр("ru = 'Данное действие приведет к заполнению всех нормативов выбранных видов ремонта данными из информационной базы.'")+Символы.ПС+ НСтр("ru = 'Все несохраненные изменения будут потеряны. Продолжить?'"), РежимДиалогаВопрос.ДаНетОтмена);
            Возврат;
		КонецЕсли;
		
		ЗагрузитьДанныеИзСистемыДляВыбранныхФрагмент(МассивИндексов, Ответ);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатДляРЦ(Команда)
	
	ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.Ремонты)=Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		Список = Элементы.ОРМнемосхема.СписокВыбора;
		Список.Очистить();
		Список.Добавить(ТекущиеДанные.Ремонты, Строка(ТекущиеДанные.Ремонты));
		ОРМнемосхема = ТекущиеДанные.Ремонты;
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаРемонтныйЦикл;
		ПостроитьМнемосхемуПроцедура();
	Иначе
		Список = Элементы.ОРМнемосхема.СписокВыбора;
		Список.Очистить();
		Список.Добавить(ТекущиеДанные.ПолучитьРодителя().Ремонты, Строка(ТекущиеДанные.ПолучитьРодителя().Ремонты));
		
 		ОРМнемосхема = ТекущиеДанные.ПолучитьРодителя().Ремонты;
		
		Список = Элементы.ВРНачалоЦикла.СписокВыбора;
		Список.Очистить();
		
		ЗаписатьДеревоППРСУчетомПозиции();
		
		Для Каждого Строка Из ОбъектыРемонта Цикл
			Если Строка.ОбъектРемонтныхРабот = ОРМнемосхема Тогда
				Список.Добавить(Строка.ВидРемонтныхРабот,Строка.ВидРемонтныхРабот.Наименование);
			КонецЕсли;
		КонецЦикла;
		
		СписокВыбораВР = Список;
		
		ВРНачалоЦикла = ТекущиеДанные.Ремонты;
		
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаРемонтныйЦикл;
		ПостроитьМнемосхемуПроцедура();
   	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатДляППР(Команда)
	
	ТекущаяСтрока = Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока;
	РассчитатьПроцедура(Новый ОписаниеОповещения("ПроверитьРезультатДляППРЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока", ТекущаяСтрока)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНормативам(Команда)
	
	Если Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов Тогда
		
		ТекущаяСтрока = Элементы.ДеревоРемонтовПланГрафикППР.ТекущаяСтрока;
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы;
		Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока = ТекущаяСтрока;
		
	ИначеЕсли Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаРемонтныйЦикл Тогда
		
		Если Элементы.РемонтныйЦикл.ТекущийЭлемент <> Неопределено Тогда
			Для Каждого Строка Из Объект.СдвигСтрокМнемосхема Цикл
				Если Строка.Имя = Элементы.РемонтныйЦикл.ТекущийЭлемент.Имя Тогда
					ВидРемонта = Строка.ВидРемонта;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ВидРемонта = Неопределено Тогда
				Для Каждого Строка Из Объект.СдвигСтрокМнемосхема Цикл
					Если Строка.Имя = Элементы.РемонтныйЦикл.ТекущийЭлемент.КонецЭлемент.Имя Тогда
						ВидРемонта = Строка.ВидРемонта;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаДерева1 Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
			Если ОтображатьПоложение Тогда
				Для Каждого СтрокаДерева2 Из  СтрокаДерева1.ПолучитьЭлементы() Цикл
					Если СтрокаДерева2.Ремонты = ОРМнемосхема Тогда
						Если ВидРемонта <> Неопределено Тогда
							Для Каждого СтрокаДерева3 Из СтрокаДерева2.ПолучитьЭлементы() Цикл
								Если СтрокаДерева3.Ремонты = ВидРемонта Тогда
									Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока =  СтрокаДерева3.ПолучитьИдентификатор();
									Прервать;
								КонецЕсли;
							КонецЦикла;
						Иначе
							Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока =  СтрокаДерева2.ПолучитьИдентификатор();
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла	
			Иначе
				Если СтрокаДерева1.Ремонты = ОРМнемосхема Тогда
					Если ВидРемонта <> Неопределено Тогда
						Для Каждого СтрокаДерева2 Из СтрокаДерева1.ПолучитьЭлементы() Цикл
							Если СтрокаДерева2.Ремонты = ВидРемонта Тогда
								Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока =  СтрокаДерева2.ПолучитьИдентификатор();
								Прервать;
							КонецЕсли;
						КонецЦикла;
					Иначе
						Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока =  СтрокаДерева1.ПолучитьИдентификатор();
						Прервать;
					КонецЕсли;
 				КонецЕсли;
			КонецЕсли;

		КонецЦикла;
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы;
		ДеревоРемонтовПриАктивизацииСтроки(Элементы.ДеревоРемонтовНормативы);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// Процедура выполняет заполнение дерева плана-графика ППР с учетом позиции.
//
&НаСервере
Процедура ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции(СтруктураИерархии)
	
	
	ТаблицаОбъектовРемонта=РеквизитФормыВЗначение("ОбъектыРемонта").СкопироватьКолонки();
	ЗаписатьДеревоППРСУчетомПозиции(ТаблицаОбъектовРемонта);
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов");	
	Запрос = Новый Запрос;
	Если Не ОтображатьПоложение Тогда
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НЕОПРЕДЕЛЕНО КАК Положение,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
		
	ИначеЕсли СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии КАК РодительИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			&Дата,
		|			СтруктураИерархии = &СтруктураИерархии
		|				И ОбъектИерархии В
		|					(ВЫБРАТЬ
		|						ТаблицаОбъектов.ОбъектРемонтныхРабот
		|					ИЗ
		|						ТаблицаОбъектов КАК ТаблицаОбъектов)) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ТаблицаИерархии.РодительИерархии, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ТаблицаОбъектов.ВидРемонтныхРабот,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИерархии КАК ТаблицаИерархии
		|		ПО ТаблицаОбъектов.ОбъектРемонтныхРабот = ТаблицаИерархии.ОбъектИерархии
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
		Запрос.УстановитьПараметр("Дата", ТекущаяДата());				
		
	ИначеЕсли ЗначениеЗаполнено(СтруктураИерархии) Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Положение,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаСтруктуры
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ТаблицаСтруктуры.Положение, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ТаблицаОбъектов.ВидРемонтныхРабот КАК ВидРемонтныхРабот
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтруктуры КАК ТаблицаСтруктуры
		|		ПО ТаблицаОбъектов.ОбъектРемонтныхРабот = ТаблицаСтруктуры.ОбъектИерархии
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ПОМЕСТИТЬ ТаблицаОбъектов
		|ИЗ
		|	&ТаблицаОбъектов КАК ТаблицаОбъектов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот.Родитель КАК Положение,
		|	ТаблицаОбъектов.ОбъектРемонтныхРабот,
		|	ИСТИНА КАК ЭтоНеГруппа,
		|	ТаблицаОбъектов.ВидРемонтныхРабот
		|ИЗ
		|	ТаблицаОбъектов КАК ТаблицаОбъектов
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);				
	Запрос.УстановитьПараметр("ТаблицаОбъектов", ТаблицаОбъектовРемонта);				
	
	Результат = Запрос.Выполнить();
	
	ДеревоРемонтовПромежуточное = Результат.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если Объект.БазаДляРасчетаПГППР.Количество() > 0 Тогда
		Объект.БазаДляРасчетаПГППР.Очистить();
	КонецЕсли;	
	
	Для Каждого Строка1 Из ДеревоРемонтовОбъект.Строки Цикл
		Для Каждого Строка2 Из Строка1.Строки Цикл
			Если ТипЗнч(Строка2.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
				НоваяСтрокаТЗ = Объект.БазаДляРасчетаПГППР.Добавить();
				НоваяСтрокаТЗ.ВидРемонта = Строка2.Ремонты;
				НоваяСтрокаТЗ.ОбъектРемонта = Строка2.Родитель.Ремонты;
				НоваяСтрокаТЗ.НомерКартинкиСостояний = Строка2.НомерКартинкиСостояний;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ,Строка2);
			Иначе Для Каждого Строка3 Из Строка2.Строки Цикл
				НоваяСтрокаТЗ = Объект.БазаДляРасчетаПГППР.Добавить();
				НоваяСтрокаТЗ.ВидРемонта = Строка3.Ремонты;
				НоваяСтрокаТЗ.ОбъектРемонта = Строка3.Родитель.Ремонты;
				НоваяСтрокаТЗ.НомерКартинкиСостояний = Строка3.НомерКартинкиСостояний;
				ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ,Строка3);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	
	ДеревоРемонтовОбъект.Строки.Очистить();
	ДеревоИзЗапросаВДеревоРемонтов(ДеревоРемонтовПромежуточное.Строки, ДеревоРемонтовОбъект.Строки);
	ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "ДеревоРемонтов");

КонецПроцедуры

// Заполнить реквизит план ремонтов
//
&НаСервере
Процедура ЗаполнитьПланРемонтовНаСервере()
	
	ЗаполнитьТаблицуНормативовПередРасчетомНаСервере();
	
	ТаблицаРемонтов = РасчитатьППР();
	
	Если ТаблицаРемонтов = Неопределено Тогда
		
		Возврат
		
	КонецЕсли;
	
	ПланРемонтовОбъект = РеквизитФормыВЗначение("ПланРемонтов");
	
	ПланРемонтовОбъект.Очистить();

	Для Каждого СтрокаРемонта Из ТаблицаРемонтов Цикл
		
		КорректируемаяСтрока = ПланРемонтовОбъект.Найти(СтрокаРемонта.ID,"ID");
		Если КорректируемаяСтрока = Неопределено Тогда
			НоваяСтрокаПлана = ПланРемонтовОбъект.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаПлана,СтрокаРемонта);
			НоваяСтрокаПлана.Родитель = СтрокаРемонта.ОбъектРемонтныхРабот.Родитель;
		Иначе
			ЗаполнитьЗначенияСвойств(КорректируемаяСтрока,СтрокаРемонта);
			КорректируемаяСтрока.Родитель = СтрокаРемонта.ОбъектРемонтныхРабот.Родитель;
		КонецЕсли;
		
		
	КонецЦикла;
	
		МассивДоступныхДляКорректировкиСтрокОбъект = РеквизитФормыВЗначение("МассивДоступныхДляКорректировкиСтрок", Тип("ТаблицаЗначений"));
	
	Для Каждого СтрокаПланаРемонтов Из ПланРемонтовОбъект Цикл
		Если (МассивДоступныхДляКорректировкиСтрокОбъект.Найти(СтрокаПланаРемонтов.ID) = Неопределено ИЛИ МассивДоступныхДляКорректировкиСтрокОбъект.Найти(СтрокаПланаРемонтов.ID).ДоступенДляРедактирования) Тогда
			Если Не ЗначениеЗаполнено(СтрокаПланаРемонтов.ДатаНач) И Не ЗначениеЗаполнено(СтрокаПланаРемонтов.ДатаКон) Тогда
				СтрокаПланаРемонтов.Отменен = Истина;
				СтрокаПланаРемонтов.ДатаНач = СтрокаПланаРемонтов.ДатаНачСт;
				СтрокаПланаРемонтов.ДатаКон = СтрокаПланаРемонтов.ДатаКонСт;
			КонецЕсли;
		Иначе
			СтрокаПланаРемонтов.ДатаНач = СтрокаПланаРемонтов.ДатаНачСт;
			СтрокаПланаРемонтов.ДатаКон = СтрокаПланаРемонтов.ДатаКонСт;
		КонецЕсли;
	
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ПланРемонтовОбъект,"ПланРемонтов");
		
	
КонецПроцедуры

&НаСервере
Функция РассчитатьДатуОкончанияПланирования()
	
	Если ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(ПериодичностьДетализации) + ", " + ?(КоличествоПериодов=0, 1, КоличествоПериодов) + ") КАК ДатаОкончания";
		
		Запрос.УстановитьПараметр("ДатаНачала", ДатаПланирования);
		
		Попытка
			Выборка = Запрос.Выполнить().Выбрать();
		Исключение
			Возврат Дата(3999,12,31,23,59,59);
		КонецПопытки;
		
		Если Выборка.Следующий() Тогда
			
			Возврат ?(ПериодичностьДетализации = Перечисления.Периодичность.День, Выборка.ДатаОкончания-1, НачалоДня(Выборка.ДатаОкончания)-1);
			
		КонецЕсли;
		
	Иначе 	
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбран период планирования!'"), СтатусСообщения.Важное);
		
	КонецЕсли;
	
КонецФункции

// Функция обращается к защищенной обработке, возвращает таблицу ремонтов
&НаСервере
Функция РасчитатьППР(ЭтоМнемосхема = Ложь, ТаблицаОР = Неопределено)
	
	СисИнфо      = Новый СистемнаяИнформация;
	СтрокаВерсии = СисИнфо.ВерсияПриложения;
	
	СтруктураДанных = Новый Структура;
	
	Если Не ЭтоМнемосхема Тогда
		
		СтруктураДанных.Вставить("ТаблицаПланРемонтов",      ?(ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка, ЗаполнитьДоступностьДляРедактированияПолная(РеквизитФормыВЗначение("ПланРемонтов", Тип("ТаблицаЗначений")),МассивДоступныхДляКорректировкиСтрок), РеквизитФормыВЗначение("ПланРемонтов", Тип("ТаблицаЗначений"))));
		СтруктураДанных.Вставить("ТаблицаОбъектыРемонта",    РеквизитФормыВЗначение("ОбъектыРемонта", Тип ("ТаблицаЗначений")));
		
				
		СтруктураДанных.Вставить("ДатаПланирования",         ДатаПланирования);
		СтруктураДанных.Вставить("ПериодичностьДетализации", ПериодичностьДетализации);
		СтруктураДанных.Вставить("КоличествоПериодов",       КоличествоПериодов);
		
	Иначе
		
		
		СтруктураДанных.Вставить("ТаблицаПланРемонтов",          Документы.торо_ПланГрафикРемонта.ПустаяСсылка().ПланРемонтов.ВыгрузитьКолонки());
		СтруктураДанных.Вставить("ТаблицаОбъектыРемонта",        ТаблицаОР.Скопировать(,"ОбъектРемонтныхРабот,ВидРемонтныхРабот,ПлановыйГрафикРаботы,ТиповойОР"));
		
		
		СтруктураДанных.Вставить("ДатаПланирования",             ТекущаяДата());
		СтруктураДанных.Вставить("ПериодичностьДетализации",     Перечисления.Периодичность.Год);
		СтруктураДанных.Вставить("КоличествоПериодов",           1);
		
		
	КонецЕсли;
	
	СтруктураДанных.Вставить("ТаблицаЦепочки",           Новый ТаблицаЗначений); // Временно

	СтруктураДанных.Вставить("ТаблицаНормативов",        РеквизитФормыВЗначение("ТаблицаНормативов"));
	СтруктураДанных.Вставить("БазаДляРасчетаПГППР",      РеквизитФормыВЗначение("БазаДляРасчетаПГППР"));
	СтруктураДанных.Вставить("ПредшествующиеРемонты",    РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета"));
	СтруктураДанных.Вставить("ЗавершенныеРемонты",       РеквизитФормыВЗначение("ЗавершенныеРемонтныеРаботы"));
	СтруктураДанных.Вставить("ПлановыеРемонты",          РеквизитФормыВЗначение("ПлановыеРемонтныеРаботы"));
	СтруктураДанных.Вставить("ПараметрыНаработкиОР",     РеквизитФормыВЗначение("ПлановаяНаработка"));
	СтруктураДанных.Вставить("ПараметрыЗамещения",       РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения"));
	СтруктураДанных.Вставить("НаработкаОР",              РеквизитФормыВЗначение("ФактическаяНаработка"));	
	
	ТаблицаРемонтов = торо_СЛКСервер.ЗаполнитьПланГрафикППР_Session("торо_ЗащитаУправлениеРемонтами83", СтруктураДанных,, Документы.торо_ПланГрафикРемонта.ПустаяСсылка());	
	Возврат ТаблицаРемонтов;
		
КонецФункции

&НаСервере
Функция ЗаполнитьДоступностьДляРедактированияПолная(парамПланРемонтов,парамМассивДоступныхДляКорректировкиСтрок)
	Возврат Документы.торо_ПланГрафикРемонта.ЗаполнитьДоступностьДляРедактированияПолная(парамПланРемонтов,парамМассивДоступныхДляКорректировкиСтрок);
КонецФункции

&НаСервере
Процедура ПостроитьДиаграммуГантаНаСервере()
	
	    мДатаОкончанияПланирования = РассчитатьДатуОкончанияПланирования();
		ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов");
		ОбновитьДоступностьДляРедактирования();
		
		Если НЕ СортироватьПоНаименованию Тогда
			ТаблицаОР = Новый ТаблицаЗначений;
			ТаблицаОР.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
			ТаблицаОР.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
			Сч = 1;
			Для каждого Элемент Из ДеревоРемонтовОбъект.Строки Цикл
				
				НС = ТаблицаОР.Добавить();
				НС.ОбъектРемонтныхРабот = Элемент.Ремонты;
				НС.НомерСтроки = Сч;
				Сч = Сч + 1;
				
			КонецЦикла; 
			
		КонецЕсли;
		
		ОтображатьЗамещенные = Истина;
		ТаблицаПланРемонтовИсходная = ?(ОтображатьЗамещенные,ПланРемонтов.Выгрузить(),ПланРемонтов.Выгрузить(Новый Структура("Замещен",Ложь)));
				
		Если Не ОтображатьЗамещенные Тогда
			Для Каждого СтрокаПланаРемонтов Из ТаблицаПланРемонтовИсходная Цикл
				Если ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка И СтрокаПланаРемонтов.ЗамещенСт Тогда
					СтрокаПланаРемонтов.ДатаНачСт = Дата(1,1,1);
					СтрокаПланаРемонтов.ДатаКонСт = Дата(1,1,1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ТаблицаРемонтов = ЗаполнитьДоступностьДляРедактирования(ТаблицаПланРемонтовИсходная, РеквизитФормыВзначение("МассивДоступныхДляКорректировкиСтрок"));	
		
		Если НЕ СортироватьПоНаименованию Тогда
		Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	Таб.ОбъектРемонтныхРабот,
			|	Таб.НомерСтроки
			|ПОМЕСТИТЬ ПорядокОР
			|ИЗ
			|	&Таб КАК Таб
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ПланГрафикРемонтаПланРемонтов.ID,
			|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
			|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
			|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
			|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
			|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
			|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
			|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования
			|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
			|ИЗ
			|	&ТаблицаРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	торо_ПланГрафикРемонтаПланРемонтов.ID,
			|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
			|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
			|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
			|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
			|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
			|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьДвиженияПоВЗ,
			|	торо_ПланГрафикРемонтаПланРемонтов.ЕстьВЗ,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДокументППР,
			|	торо_ПланГрафикРемонтаПланРемонтов.ДоступенДляРедактирования,
			|	ПорядокОР.НомерСтроки КАК НомерОР
			|ИЗ
			|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ПорядокОР КАК ПорядокОР
			|		ПО торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот = ПорядокОР.ОбъектРемонтныхРабот";
			
		Если НЕ ОтображатьЗамещенные Тогда
			Запрос.Текст = Запрос.Текст + " И торо_ПланГрафикРемонтаПланРемонтов.Замещен = ЛОЖЬ ";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТаблицаРемонтов", ТаблицаРемонтов);
		Запрос.УстановитьПараметр("Таб", ТаблицаОР);
		ТаблицаРемонтов = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	ПостроитьДиаграммуГантаДляППР(ДиаграммаГанта, ТаблицаРемонтов, СтруктураИерархии, ОтображатьПоложение,,,ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка, , , ,СортироватьПоНаименованию);
	ДиаграммаГанта.УстановитьПолныйИнтервал(НачалоДня(ДатаПланирования), КонецДня(мДатаОкончанияПланирования));
	Элементы.ДиаграммаГантаМодифицированность.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДиаграммуГантаДляППР(Диаграмма, ТаблицаДанныхППР, СтруктураИерархии = Неопределено, ОтображатьИерархию = Ложь, ИспользоватьИерархию = Ложь, РезультатЗапроса = Неопределено, ЭтоКорректировка = Ложь, Редактировать = Истина, ИспользоватьРасшифровку = Истина, ДиаграммаДляОтчета = Ложь, СортироватьПоНаименованию = Истина)
	
	ТекДата = ТекущаяДата();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));
	
	ОписаниеТ = новый ОписаниеТипов(МассивТипов);
	
	// †ВнутреннийЗаказ, это что?
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьВЗ",ОписаниеТ);
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьВЗ");
	КонецЕсли;
	
	Если ТаблицаДанныхППР.Колонки.Найти("ЕстьДвиженияПоВЗ") = Неопределено Тогда
		ТаблицаДанныхППР.Колонки.Добавить("ЕстьДвиженияПоВЗ",ОписаниеТ);
		ТаблицаДанныхППР.ЗаполнитьЗначения(Ложь,"ЕстьДвиженияПоВЗ");
	КонецЕсли;
	
	Диаграмма.Очистить();
	Диаграмма.АвтоОпределениеПолногоИнтервала = Ложь;
	Диаграмма.ОтображатьЛегенду = Ложь;
	Диаграмма.АвтоУстановкаТекстаСерий = Ложь;
	Диаграмма.АвтоУстановкаТекстаТочек = Ложь;
	СерияРемонт = Диаграмма.Серии.Добавить();
	СерияРемонт.Текст = "График ремонта";
	
	ЦветВыполненого 			= WebЦвета.Черный;
	ЦветИзмененного 			= WebЦвета.Томатный;
	ЦветОтмененного 			= WebЦвета.Красный;
	ЦветЗапланированного 		= WebЦвета.Васильковый;
	ЦветЗамещенногоИсходного 	= WebЦвета.СеребристоСерый;
	ЦветИсходного 				= WebЦвета.ГолубойСоСтальнымОттенком;
	ЦветЗамещенного 			= WebЦвета.СветлоСерый;
	
	Запрос = Новый Запрос;
	Если Не ОтображатьИерархию И НЕ ИспользоватьИерархию Тогда
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|	ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|   ТаблицаДанныхППР.Замещен,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	ОбъектРемонтныхРабот.Наименование,
			|	ВидРемонтныхРабот,
			|	ДатаНач,
			|	ДатаКон ";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	НомерОР ";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	ОбъектРемонтныхРабот,
		|	ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоОР = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоОР.Следующий() Цикл
			
			ТочкаОРР = Диаграмма.Точки.Добавить();
			ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
			Если ИспользоватьРасшифровку Тогда
				ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
			КонецЕсли;
			
			ВыборкаПоВР = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоВР.Следующий() Цикл
				
				ТочкаВРР = ТочкаОРР.Точки.Добавить();
				ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
				
				Если ИспользоватьРасшифровку Тогда
					ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
				КонецЕсли;
				
				Если ЭтоКорректировка Тогда
					// корректировка
					ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
					ТочкаВРРСт.Текст = "План до корректировки";
					
					Если ИспользоватьРасшифровку Тогда
						ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
					КонецЕсли;
					//
				КонецЕсли;
				
				Выборка = ВыборкаПоВР.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					Если Не Выборка.Отменен И Не Выборка.Замещен Тогда
						Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
						Интервал = Значение.Добавить();
						Интервал.Начало = Выборка.ДатаНач;
						Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
						Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
						Интервал.Цвет = ?(Выборка.Отменен,ЦветОтмененного,?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ЦветЗапланированного));
					КонецЕсли;
					
					Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
					Значение.Редактирование = Редактировать;
					Если ИспользоватьРасшифровку Тогда
						Значение.Расшифровка = Выборка.ВидРемонтныхРабот;
					КонецЕсли;
					
					Интервал = Значение.Добавить();
					Интервал.Начало = Выборка.ДатаНач;
					Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
					Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
					Интервал.Цвет   = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ?(Выборка.Отменен, ЦветОтмененного, ?(Выборка.Замещен,ЦветЗамещенного,ЦветЗапланированного)));
					
					Если ИспользоватьРасшифровку Тогда
						МассивРасшифровка = Новый Массив;
						МассивРасшифровка.Добавить(ВыборкаПоОР.ОбъектРемонтныхРабот);
						МассивРасшифровка.Добавить(ВыборкаПоВР.ВидРемонтныхРабот);
						МассивРасшифровка.Добавить(Выборка.ДатаНач);
						МассивРасшифровка.Добавить(Выборка.ДоступенДляРедактирования);
						Интервал.Расшифровка = МассивРасшифровка; 
					КонецЕсли;
					
					Если ЭтоКорректировка И Не Выборка.Отменен Тогда
						Если ЗначениеЗаполнено(Выборка.ДатаНачСт) И ЗначениеЗаполнено(Выборка.ДатаКонСт) Тогда
							// корректировка
							Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
							ИнтервалСтарый = Значение.Добавить();
							ИнтервалСтарый.Начало = Выборка.ДатаНачСт;
							ИнтервалСтарый.Конец  = КонецДня(?(Выборка.ДатаКонСт > Выборка.ДатаНачСт, Выборка.ДатаКонСт, Выборка.ДатаНачСт + 3600));
							ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        // БледноМиндальный
							ИнтервалСтарый.Цвет   = ?(Выборка.ЗамещенСт,ЦветЗамещенногоИсходного, ЦветИсходного);
							
							Если Не Выборка.Отменен Тогда
								Связь = ИнтервалСтарый.Добавить(Интервал);
								Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
							КонецЕсли;
						КонецЕсли;
						//
					КонецЕсли;
					
					Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
						Интервал.Текст = Интервал.Текст + Символы.ПС + "Начата работа по внутренним заказам.";
					ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
						Интервал.Текст = Интервал.Текст + Символы.ПС + "Введены внутренние заказы.";
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли Не ЗначениеЗаполнено(СтруктураИерархии) И НЕ ИспользоватьИерархию Тогда
		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель КАК Положение,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	ОбъектРемонтныхРабот.Наименование,
			|	ВидРемонтныхРабот,
			|	ДатаНач,
			|	ДатаКон ";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	НомерОР ";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот,
		|	ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоПоложению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоложению.Следующий() Цикл
			
			ТочкаПоложение = Диаграмма.Точки.Добавить();
			ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.Положение);
			Если ИспользоватьРасшифровку Тогда
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.Положение;
			КонецЕсли;
			
			ВыборкаПоОР = ВыборкаПоПоложению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОР.Следующий() Цикл
				
				ТочкаОРР = ТочкаПоложение.Точки.Добавить();
				ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
				Если ИспользоватьРасшифровку Тогда
					ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
				КонецЕсли;
				
				ВыборкаПоВР = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВР.Следующий() Цикл
					
					ТочкаВРР = ТочкаОРР.Точки.Добавить();
					ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
					Если ИспользоватьРасшифровку Тогда
						ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
					КонецЕсли;
					
					Если ЭтоКорректировка Тогда
						// корректировка
						ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
						ТочкаВРРСт.Текст = "План до корректировки";
						Если ИспользоватьРасшифровку Тогда
							ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
						КонецЕсли;
						//
					КонецЕсли;
					
					Выборка = ВыборкаПоВР.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						Если Не Выборка.Отменен И Не Выборка.Замещен Тогда
							
							Значение = Диаграмма.ПолучитьЗначение(ТочкаПоложение, СерияРемонт);
							Интервал = Значение.Добавить();
							Интервал.Начало = Выборка.ДатаНач;
							Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
							Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
							Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ЦветЗапланированного);
							
							Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
							Интервал = Значение.Добавить();
							Интервал.Начало = Выборка.ДатаНач;
							Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
							Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
							Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ЦветЗапланированного);
							
						КонецЕсли;
						
						Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
						Значение.Редактирование = Редактировать;
						Если ИспользоватьРасшифровку Тогда
							Значение.Расшифровка = Выборка.ВидРемонтныхРабот;
						КонецЕсли;
						
						Интервал = Значение.Добавить();
						Интервал.Начало = Выборка.ДатаНач;
						Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
						Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
						Интервал.Цвет   = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ?(Выборка.Отменен, ЦветОтмененного, ?(Выборка.Замещен,ЦветЗамещенного,ЦветЗапланированного)));
						
						Если ИспользоватьРасшифровку Тогда
							МассивРасшифровка = Новый Массив;
							МассивРасшифровка.Добавить(ВыборкаПоОР.ОбъектРемонтныхРабот);
							МассивРасшифровка.Добавить(ВыборкаПоВР.ВидРемонтныхРабот);
							МассивРасшифровка.Добавить(Выборка.ДатаНач);
							МассивРасшифровка.Добавить(Выборка.ДоступенДляРедактирования);
							
							Интервал.Расшифровка = МассивРасшифровка; 
						КонецЕсли;
						
						
						Если ЭтоКорректировка И Не Выборка.Отменен Тогда
							Если ЗначениеЗаполнено(Выборка.ДатаНачСт) И ЗначениеЗаполнено(Выборка.ДатаКонСт) Тогда
								// корректировка
								Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
								ИнтервалСтарый = Значение.Добавить();
								ИнтервалСтарый.Начало = Выборка.ДатаНачСт;
								ИнтервалСтарый.Конец  = КонецДня(?(Выборка.ДатаКонСт > Выборка.ДатаНачСт, Выборка.ДатаКонСт, Выборка.ДатаНачСт + 3600));
								ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        
								ИнтервалСтарый.Цвет   = ?(Выборка.ЗамещенСт, ЦветЗамещенногоИсходного, ЦветИсходного);
								
								Если Не Выборка.Отменен Тогда
									Связь = ИнтервалСтарый.Добавить(Интервал);
									Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
								КонецЕсли;
							КонецЕсли;
							//
						КонецЕсли;
						
						
						Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
							Интервал.Текст = Интервал.Текст + Символы.ПС + "Начата работа по внутренним заказам.";
						ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
							Интервал.Текст = Интервал.Текст + Символы.ПС + "Введены внутренние заказы.";
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли НЕ ИспользоватьИерархию И СтруктураИерархии.ИзменяетсяДокументами Тогда
		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Положение,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаСтруктуры
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ЕСТЬNULL(ТаблицаСтруктуры.Положение, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаСтруктуры.Положение) КАК ПоложениеПредставление,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтруктуры КАК ТаблицаСтруктуры
		|		ПО ТаблицаДанныхППР.ОбъектРемонтныхРабот = ТаблицаСтруктуры.ОбъектИерархии
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	ОбъектРемонтныхРабот.Наименование,
			|	ВидРемонтныхРабот,
			|	ДатаНач,
			|	ДатаКон ";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	НомерОР ";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот,
		|	ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоПоложению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоложению.Следующий() Цикл
			
			ТочкаПоложение = Диаграмма.Точки.Добавить();
			ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.Положение);
			Если ИспользоватьРасшифровку Тогда
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.Положение;
			КонецЕсли;
			
			ВыборкаПоОР = ВыборкаПоПоложению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОР.Следующий() Цикл
				
				ТочкаОРР = ТочкаПоложение.Точки.Добавить();
				ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
				Если ИспользоватьРасшифровку Тогда
					ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
				КонецЕсли;
				
				ВыборкаПоВР = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВР.Следующий() Цикл
					
					ТочкаВРР = ТочкаОРР.Точки.Добавить();
					ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
					Если ИспользоватьРасшифровку Тогда
						ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
					КонецЕсли;
					
					Если ЭтоКорректировка Тогда
						// корректировка
						ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
						ТочкаВРРСт.Текст = "План до корректировки";
						Если ИспользоватьРасшифровку Тогда
							ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
						КонецЕсли;
						//
					КонецЕсли;
					
					Выборка = ВыборкаПоВР.Выбрать();
					Пока Выборка.Следующий() Цикл
						
						Если Не Выборка.Отменен И Не Выборка.Замещен Тогда
							
							Значение = Диаграмма.ПолучитьЗначение(ТочкаПоложение, СерияРемонт);
							Интервал = Значение.Добавить();
							Интервал.Начало = Выборка.ДатаНач;
							Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
							Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
							Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ЦветЗапланированного);
							
							Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
							Интервал = Значение.Добавить();
							Интервал.Начало = Выборка.ДатаНач;
							Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
							Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
							Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ЦветЗапланированного);
						КонецЕсли;
						
						Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
						Значение.Редактирование = Редактировать;
						Если ИспользоватьРасшифровку Тогда
							Значение.Расшифровка = Выборка.ВидРемонтныхРабот;
						КонецЕсли;
						
						Интервал = Значение.Добавить();
						Интервал.Начало = Выборка.ДатаНач;
						Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
						Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
						Интервал.Цвет   = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ?(Выборка.Отменен, ЦветОтмененного, ?(Выборка.Замещен,ЦветЗамещенного,ЦветЗапланированного)));
						
						Если ИспользоватьРасшифровку Тогда
							МассивРасшифровка = Новый Массив;
							МассивРасшифровка.Добавить(ВыборкаПоОР.ОбъектРемонтныхРабот);
							МассивРасшифровка.Добавить(ВыборкаПоВР.ВидРемонтныхРабот);
							МассивРасшифровка.Добавить(Выборка.ДатаНач);
							МассивРасшифровка.Добавить(Выборка.ДоступенДляРедактирования);
							
							Интервал.Расшифровка = МассивРасшифровка; 
						КонецЕсли;
						
						Если ЭтоКорректировка И Не Выборка.Отменен Тогда
							Если ЗначениеЗаполнено(Выборка.ДатаНачСт) И ЗначениеЗаполнено(Выборка.ДатаКонСт) Тогда
								// корректировка
								Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
								ИнтервалСтарый = Значение.Добавить();
								ИнтервалСтарый.Начало = Выборка.ДатаНачСт;
								ИнтервалСтарый.Конец  = КонецДня(?(Выборка.ДатаКонСт > Выборка.ДатаНачСт, Выборка.ДатаКонСт, Выборка.ДатаНачСт + 3600));
								ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        // БледноМиндальный
								ИнтервалСтарый.Цвет   = ?(Выборка.ЗамещенСт,ЦветЗамещенногоИсходного, ЦветИсходного);
								
								Если Не Выборка.Отменен Тогда
									Связь = ИнтервалСтарый.Добавить(Интервал);
									Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
								КонецЕсли;
							КонецЕсли;
							//
						КонецЕсли;
						
						
						Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
							Интервал.Текст = Интервал.Текст + Символы.ПС + "Начата работа по внутренним заказам.";
						ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
							Интервал.Текст = Интервал.Текст + Символы.ПС + "Введены внутренние заказы.";
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ИспользоватьИерархию Тогда
		
		
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот.Родитель КАК Родитель,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	ОбъектРемонтныхРабот.Наименование,
			|	ВидРемонтныхРабот,
			|	ДатаНач,
			|	ДатаКон ";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	НомерОР ";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	ОбъектРемонтныхРабот Иерархия,
		|	ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоПоложению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		ТаблицаОбъектовРемонта = Новый ТаблицаЗначений();
		ТаблицаОбъектовРемонта.Колонки.Добавить("РодительОбъекта");
		ТаблицаОбъектовРемонта.Колонки.Добавить("СамОбъект");  		
		
		Пока ВыборкаПоПоложению.Следующий() Цикл 			
			
			Если ТаблицаОбъектовРемонта.Найти(ВыборкаПоПоложению.Родитель, "СамОбъект") = Неопределено Тогда
				ТочкаПоложение = Диаграмма.Точки.Добавить();
				ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.ОбъектРемонтныхРабот);
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.ОбъектРемонтныхРабот;
				
				СтрокаТаблицы = ТаблицаОбъектовРемонта.Добавить();
				СтрокаТаблицы.РодительОбъекта = ТочкаПоложение;
				СтрокаТаблицы.СамОбъект = ВыборкаПоПоложению.ОбъектРемонтныхРабот;
			Иначе
				ТочкаПоложение = ТаблицаОбъектовРемонта.Найти(ВыборкаПоПоложению.Родитель, "СамОбъект").РодительОбъекта.Точки.Добавить();
				ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.ОбъектРемонтныхРабот);
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.ОбъектРемонтныхРабот;
				
				СтрокаТаблицы = ТаблицаОбъектовРемонта.Добавить();
				СтрокаТаблицы.РодительОбъекта = ТочкаПоложение;
				СтрокаТаблицы.СамОбъект = ВыборкаПоПоложению.ОбъектРемонтныхРабот;
			КонецЕсли;
			
			ВыборкаПоОР = ВыборкаПоПоложению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОР.Следующий() Цикл 						
				ТочкаОРР = ТочкаПоложение.Точки.Добавить();
				ТочкаОРР.Текст = ВыборкаПоОР.ВидРемонтныхРабот;
				ТочкаОРР.Расшифровка = ВыборкаПоОР.ВидРемонтныхРабот;
				
				Если ЭтоКорректировка Тогда
					// корректировка
					ТочкаВРРСт = ТочкаОРР.Точки.Добавить();
					ТочкаВРРСт.Текст = "План до корректировки";
					ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
					//
				КонецЕсли;
				
				ВыборкаПоВР = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
				
				
				Пока ВыборкаПоВР.Следующий() Цикл
					
					Если Не ВыборкаПоВР.Отменен И Не ВыборкаПоВР.Замещен Тогда
						
						Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
						Значение.Редактирование = Редактировать;
						Интервал = Значение.Добавить();
						Интервал.Начало = ВыборкаПоВР.ДатаНач;
						Интервал.Конец  = КонецДня(?(ВыборкаПоВР.ДатаКон > ВыборкаПоВР.ДатаНач, ВыборкаПоВР.ДатаКон, ВыборкаПоВР.ДатаНач + 3600));
						Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
						Интервал.Цвет = ?(ВыборкаПоВР.ДатаНач < ТекДата, ЦветВыполненого, ЦветЗапланированного);
						МассивРасшифровка = Новый Массив;
						МассивРасшифровка.Добавить(ВыборкаПоВР.ДоступенДляРедактирования);
						Интервал.Расшифровка = МассивРасшифровка;
					КонецЕсли;
					
					Значение = Диаграмма.ПолучитьЗначение(ТочкаПоложение, СерияРемонт);
					Интервал = Значение.Добавить();
					Значение.Редактирование = Редактировать;
					Интервал.Начало = ВыборкаПоВР.ДатаНач;
					Интервал.Конец  = КонецДня(?(ВыборкаПоВР.ДатаКон > ВыборкаПоВР.ДатаНач, ВыборкаПоВР.ДатаКон, ВыборкаПоВР.ДатаНач + 3600));
					Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
					Интервал.Цвет = ?(ВыборкаПоВР.ДатаНач < ТекДата, ЦветВыполненого, ?(ВыборкаПоВР.Отменен, ЦветОтмененного, ?(ВыборкаПоВР.Замещен,ЦветЗамещенного,ЦветЗапланированного)));
									
					Если ЭтоКорректировка И Не ВыборкаПоВР.Отменен Тогда
						Если ЗначениеЗаполнено(ВыборкаПоВР.ДатаНачСт) И ЗначениеЗаполнено(ВыборкаПоВР.ДатаКонСт) Тогда
							// корректировка
							Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
							ИнтервалСтарый = Значение.Добавить();
							ИнтервалСтарый.Начало = ВыборкаПоВР.ДатаНачСт;
							ИнтервалСтарый.Конец  = КонецДня(?(ВыборкаПоВР.ДатаКонСт > ВыборкаПоВР.ДатаНачСт, ВыборкаПоВР.ДатаКонСт, ВыборкаПоВР.ДатаНачСт + 3600));
							ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        // БледноМиндальный
							ИнтервалСтарый.Цвет   = ?(ВыборкаПоВР.ЗамещенСт,ЦветЗамещенногоИсходного, ЦветИсходного);
							
							Если Не ВыборкаПоВР.Отменен Тогда
								Связь = ИнтервалСтарый.Добавить(Интервал);
								Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
							КонецЕсли;
						КонецЕсли;
						//
					КонецЕсли;
					
					
				КонецЦикла; 
			КонецЦикла; 
			
		КонецЦикла;
		
	Иначе
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ ТаблицаДанныхППР
		|ИЗ
		|	&ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ИерархическиеСтруктурыОР.РодительИерархии КАК Положение,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТаблицаСтруктуры
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ТаблицаСтруктуры.Положение, НЕОПРЕДЕЛЕНО) КАК Положение,
		|	ТаблицаДанныхППР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		|	ТаблицаДанныхППР.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		|	ТаблицаДанныхППР.ДатаНач КАК ДатаНач,
		|	ТаблицаДанныхППР.ДатаКон КАК ДатаКон,
		|	ТаблицаДанныхППР.ДатаНачСт,
		|	ТаблицаДанныхППР.ДатаКонСт,
		|	ТаблицаСтруктуры.Положение.Представление КАК ПоложениеПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ОбъектРемонтныхРабот),
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаДанныхППР.ВидРемонтныхРабот),
		|	ТаблицаДанныхППР.ЕстьВЗ,
		|	ТаблицаДанныхППР.ЕстьДвиженияПоВЗ,
		|   ТаблицаДанныхППР.Отменен,
		|   ТаблицаДанныхППР.Замещен,
		|   ТаблицаДанныхППР.ЗамещенСт,
		|	ТаблицаДанныхППР.ДоступенДляРедактирования ";
		Если НЕ СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + ", ТаблицаДанныхППР.НомерОР";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	ТаблицаДанныхППР КАК ТаблицаДанныхППР
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСтруктуры КАК ТаблицаСтруктуры
		|		ПО ТаблицаДанныхППР.ОбъектРемонтныхРабот = ТаблицаСтруктуры.ОбъектИерархии
		|ГДЕ ДатаНач > ДАТАВРЕМЯ(1,1,1,0,0,0) ";
		Если СортироватьПоНаименованию Тогда
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	ОбъектРемонтныхРабот.Наименование,
			|	ВидРемонтныхРабот,
			|	ДатаНач,
			|	ДатаКон ";
		Иначе
			Запрос.Текст = Запрос.Текст + "
			|УПОРЯДОЧИТЬ ПО
			|	НомерОР ";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|ИТОГИ ПО
		|	Положение,
		|	ОбъектРемонтныхРабот,
		|	ВидРемонтныхРабот";
		
		Запрос.УстановитьПараметр("ТаблицаДанныхППР", ТаблицаДанныхППР);
		Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
		
		Результат = Запрос.Выполнить();
		
		ВыборкаПоПоложению = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоПоложению.Следующий() Цикл
			
			ТочкаПоложение = Диаграмма.Точки.Добавить();
			ТочкаПоложение.Текст = СокрЛП(ВыборкаПоПоложению.Положение);
			Если ИспользоватьРасшифровку Тогда
				ТочкаПоложение.Расшифровка = ВыборкаПоПоложению.Положение;
			КонецЕсли;
			
			ВыборкаПоОР = ВыборкаПоПоложению.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОР.Следующий() Цикл
				
				ТочкаОРР = ТочкаПоложение.Точки.Добавить();
				ТочкаОРР.Текст = ВыборкаПоОР.ОбъектРемонтныхРаботПредставление;
				Если ИспользоватьРасшифровку Тогда
					ТочкаОРР.Расшифровка = ВыборкаПоОР.ОбъектРемонтныхРабот;
				КонецЕсли;
				
				ВыборкаПоВР = ВыборкаПоОР.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоВР.Следующий() Цикл
					
					ТочкаВРР = ТочкаОРР.Точки.Добавить();
					ТочкаВРР.Текст = ВыборкаПоВР.ВидРемонтныхРаботПредставление;
					Если ИспользоватьРасшифровку Тогда
						ТочкаВРР.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
					КонецЕсли;
					
					Если ЭтоКорректировка Тогда
						// корректировка
						ТочкаВРРСт = ТочкаВРР.Точки.Добавить();
						ТочкаВРРСт.Текст = "План до корректировки";
						Если ИспользоватьРасшифровку Тогда
							ТочкаВРРСт.Расшифровка = ВыборкаПоВР.ВидРемонтныхРабот;
						КонецЕсли;
						//
					КонецЕсли;
					
					
					Выборка = ВыборкаПоВР.Выбрать();
					Пока Выборка.Следующий() Цикл
						Если Не Выборка.Отменен И Не Выборка.Замещен Тогда
							
							Значение = Диаграмма.ПолучитьЗначение(ТочкаПоложение, СерияРемонт);
							Интервал = Значение.Добавить();
							Интервал.Начало = Выборка.ДатаНач;
							Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
							Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
							Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ЦветЗапланированного);
							
							Значение = Диаграмма.ПолучитьЗначение(ТочкаОРР, СерияРемонт);
							Интервал = Значение.Добавить();
							Интервал.Начало = Выборка.ДатаНач;
							Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
							Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
							Интервал.Цвет = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ЦветЗапланированного);
						КонецЕсли;	
						
						Значение = Диаграмма.ПолучитьЗначение(ТочкаВРР, СерияРемонт);
						Значение.Редактирование = Редактировать;
						Если ИспользоватьРасшифровку Тогда
							Значение.Расшифровка = Выборка.ВидРемонтныхРабот;
						КонецЕсли;
						
						Интервал = Значение.Добавить();
						Интервал.Начало = Выборка.ДатаНач;
						Интервал.Конец  = КонецДня(?(Выборка.ДатаКон > Выборка.ДатаНач, Выборка.ДатаКон, Выборка.ДатаНач + 3600));
						Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
						Интервал.Цвет   = ?(Выборка.ДатаНач < ТекДата, ЦветВыполненого, ?(Выборка.Отменен, ЦветОтмененного, ?(Выборка.Замещен,ЦветЗамещенного,ЦветЗапланированного)));
						
						Если ИспользоватьРасшифровку Тогда
							МассивРасшифровка = Новый Массив;
							МассивРасшифровка.Добавить(ВыборкаПоОР.ОбъектРемонтныхРабот);
							МассивРасшифровка.Добавить(ВыборкаПоВР.ВидРемонтныхРабот);
							МассивРасшифровка.Добавить(Выборка.ДатаНач);
							МассивРасшифровка.Добавить(Выборка.ДоступенДляРедактирования);
							
							Интервал.Расшифровка = МассивРасшифровка; 
						КонецЕсли;
						
						Если ЭтоКорректировка И Не Выборка.Отменен Тогда
							Если ЗначениеЗаполнено(Выборка.ДатаНачСт) И ЗначениеЗаполнено(Выборка.ДатаКонСт) Тогда
								// корректировка
								Значение = Диаграмма.ПолучитьЗначение(ТочкаВРРСт, СерияРемонт);
								ИнтервалСтарый = Значение.Добавить();
								ИнтервалСтарый.Начало = Выборка.ДатаНачСт;
								ИнтервалСтарый.Конец  = КонецДня(?(Выборка.ДатаКонСт > Выборка.ДатаНачСт, Выборка.ДатаКонСт, Выборка.ДатаНачСт + 3600));
								ИнтервалСтарый.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);        // БледноМиндальный
								ИнтервалСтарый.Цвет   = ?(Выборка.ЗамещенСт,ЦветЗамещенногоИсходного, ЦветИсходного);
								
								Если Не Выборка.Отменен Тогда
									Связь = ИнтервалСтарый.Добавить(Интервал);
									Связь.ТипСвязи = ТипСвязиДиаграммыГанта.НачалоНачало;
								КонецЕсли;
							КонецЕсли;
							//
						КонецЕсли;
						
						
						Если Выборка.ЕстьВЗ И Выборка.ЕстьДвиженияПоВЗ Тогда
							Интервал.Текст = Интервал.Текст + Символы.ПС + "Начата работа по внутренним заказам.";
						ИначеЕсли Выборка.ЕстьВЗ И Не Выборка.ЕстьДвиженияПоВЗ Тогда
							Интервал.Текст = Интервал.Текст + Символы.ПС + "Введены внутренние заказы.";
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДеревоППРСУчетомПозиции(ТаблицаОбъектыРемонта = Неопределено, ОбъектРемонтаДляОтбора = Неопределено)
	
	Если ТаблицаОбъектыРемонта <> Неопределено Тогда
		ОбъектыРемонтаОбъект = ТаблицаОбъектыРемонта;
	Иначе
		ОбъектыРемонта.Очистить();
		ОбъектыРемонтаОбъект = РеквизитФормыВЗначение("ОбъектыРемонта", Тип ("ТаблицаЗначений"));
	КонецЕсли;
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов", Тип ("ДеревоЗначений"));
	
	Если ОбъектРемонтаДляОтбора = Неопределено Тогда
		Для Каждого СтрокаДерева Из ДеревоРемонтовОбъект.Строки Цикл
			
			ЗаписатьСтрокуДереваВТаблицуЗначений(СтрокаДерева, ОбъектыРемонтаОбъект);
			
		КонецЦикла;
	Иначе
		СтрокаОР = ДеревоРемонтовОбъект.Строки.Найти(ОбъектРемонтаДляОтбора,"Ремонты",Истина);
		ЗаписатьСтрокуДереваВТаблицуЗначений(СтрокаОР, ОбъектыРемонтаОбъект);
	КонецЕсли;
	
	Если ТаблицаОбъектыРемонта = Неопределено Тогда
		ЗначениеВРеквизитФормы(ОбъектыРемонтаОбъект, "ОбъектыРемонта");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуДереваВТаблицуЗначений(СтрокаДерева, ОбъектыРемонтаОбъект)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		НоваяСтрокаТЗ = ОбъектыРемонтаОбъект.Добавить();
		НоваяСтрокаТЗ.ВидРемонтныхРабот    = СтрокаДерева.Ремонты;
		НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.Родитель.Ремонты;
		
	ИначеЕсли ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И СтрокаДерева.Строки.Количество() = 0 Тогда
		
		НоваяСтрокаТЗ = ОбъектыРемонтаОбъект.Добавить();
		НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.Ремонты;
		
 	КонецЕсли;
	
	Для Каждого СтрокаДЗ Из СтрокаДерева.Строки Цикл
		
		ЗаписатьСтрокуДереваВТаблицуЗначений(СтрокаДЗ, ОбъектыРемонтаОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДополнитьДеревоРемонтовНаСервере(ОР, МассивВидовРемонта = Неопределено, ЗаполнитьНормативы = Ложь)
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов", Тип("ДеревоЗначений"));
	
	НайденнаяСтрока = ДеревоРемонтовОбъект.Строки.Найти(ОР, "Ремонты", Истина);
	
	СтрокаДерева = НайденнаяСтрока;	
	
	Если НайденнаяСтрока = Неопределено Тогда
		
		РодительПоИерархии = ОпределитьРодителяОбъектаРемонта(ОР, СтруктураИерархии, ТекущаяДата());//†1 Дата -> ТекущаяДата()
		
		НайденнаяСтрокаРодитель = ДеревоРемонтовОбъект.Строки.Найти(РодительПоИерархии, "Ремонты", Истина);
		Если НЕ ОтображатьПоложение Тогда
			
			НовСтрокаОбъект = ДеревоРемонтовОбъект.Строки.Добавить();
			
		ИначеЕсли НайденнаяСтрокаРодитель = Неопределено Тогда
			Если ЗначениеЗаполнено(РодительПоИерархии) И Не ТипЗнч(РодительПоИерархии) = Тип("Строка") Тогда
				НайденнаяСтрокаРодитель = ДеревоРемонтовОбъект.Строки.Добавить();
				НайденнаяСтрокаРодитель.Ремонты       = РодительПоИерархии;
				НайденнаяСтрокаРодитель.НомерКартинки = 2;
				НовСтрокаОбъект = НайденнаяСтрокаРодитель.Строки.Добавить();
			Иначе
				НовСтрокаОбъект = ДеревоРемонтовОбъект.Строки.Добавить();
			КонецЕсли;
		Иначе
			НовСтрокаОбъект = НайденнаяСтрокаРодитель.Строки.Добавить();
		КонецЕсли;
		
		НовСтрокаОбъект.Ремонты          = ОР;
		НовСтрокаОбъект.ИнвентарныйНомер = ОР.ИнвентарныйНомер;
		НовСтрокаОбъект.НомерКартинки    = 0;
		НовСтрокаОбъект.ТиповойОР        = ОР.ТиповойОР;
		СтрокаДерева = НовСтрокаОбъект;
		
	Иначе
		Если Не ЗаполнитьНормативы Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Объект ""%1"" уже внесен в список объектов ремонтных работ плана-графика ППР!'"),ОР));
		КонецЕсли;
	КонецЕсли;
	
	Если МассивВидовРемонта <> Неопределено Тогда
		
		Для Каждого СтрокаВР Из МассивВидовРемонта Цикл
				
			НайденнаяСтрока = СтрокаДерева.Строки.Найти(СтрокаВР, "Ремонты");
			
			Если НайденнаяСтрока = Неопределено Тогда
				НовСтрокаВидРемРабот = СтрокаДерева.Строки.Добавить();
				НовСтрокаВидРемРабот.Ремонты                = СтрокаВР;
				НовСтрокаВидРемРабот.НомерКартинки          = 7;
				НовСтрокаВидРемРабот.НомерКартинкиСостояний = 2;
			ИначеЕсли ЗаполнитьНормативы Тогда
				СтруктураОтбора = Новый Структура("ОбъектРемонта,ВидРемонта",ОР,СтрокаВР);
				Если БазаДляРасчетаПГППР.Количество() > 0 Тогда
					МассивСтрок = БазаДляРасчетаПГППР.НайтиСтроки(СтруктураОтбора);
					Если ЗначениеЗаполнено(МассивСтрок) Тогда
						ЗаполнитьЗначенияСвойств(НайденнаяСтрока,МассивСтрок[0]);
						НайденнаяСтрока.Родитель.ГрафикРемонтныхРабот                      = МассивСтрок[0].ГрафикРемонтныхРабот;
						НайденнаяСтрока.НомерКартинкиСостояний = ?(МассивСтрок[0].Источник = "ОбъектРемонта",7,8);
					КонецЕсли;
				КонецЕсли;
 	
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "ДеревоРемонтов");
	
КонецФункции

&НаСервере
Функция ОпределитьРодителяОбъектаРемонта(ОбъектРемонтныхРабот, СтруктураИерархии = Неопределено, Дата = '00010101')

	Если Не ЗначениеЗаполнено(СтруктураИерархии) Тогда
		
		Возврат ОбъектРемонтныхРабот.Родитель;
		
	Иначе
		
		Возврат торо_РаботаСИерархией.ПолучитьТекущихРодителейВИерархии(ОбъектРемонтныхРабот,СтруктураИерархии,Дата)[ОбъектРемонтныхРабот];
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ДеревоРемонтовОбработкаВыбораВРНаСервере(ВыбранноеЗначение, ОбъектРемонтаРодитель, ЗаполнитьНормативы = Ложь)
	
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов", Тип("ДеревоЗначений"));
	СтрокаРодитель = ДеревоРемонтовОбъект.Строки.Найти(ОбъектРемонтаРодитель, "Ремонты", Истина);
	
	НайденнаяСтрока = СтрокаРодитель.Строки.Найти(ВыбранноеЗначение, "Ремонты");
	
	Если НайденнаяСтрока = Неопределено Тогда
		
		НовСтрокаВидРемРабот = СтрокаРодитель.Строки.Добавить();
		НовСтрокаВидРемРабот.Ремонты = ВыбранноеЗначение;
		НовСтрокаВидРемРабот.НомерКартинкиСостояний = 2;
		НовСтрокаВидРемРабот.НомерКартинки = 7;
		НовСтрокаВидРемРабот.ТиповойОР = ?(ЗначениеЗаполнено(СтрокаРодитель.ТиповойОР),СтрокаРодитель.ТиповойОР,СтрокаРодитель.Ремонты);
		НовСтрокаВидРемРабот.ГрафикРемонтныхРабот = СтрокаРодитель.ГрафикРемонтныхРабот;
		
		ВидыРемонтныхРаботДляОтсчетаОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета");
		НоваяСтрока = ВидыРемонтныхРаботДляОтсчетаОбъект.Добавить();
		НоваяСтрока.ВидРемонта               = ВыбранноеЗначение;
		НоваяСтрока.ПредшествующийВидРемонта = ВыбранноеЗначение;
		НоваяСтрока.ОбъектРемонта            = СтрокаРодитель.Ремонты;
		НоваяСтрока.ГруппаОбъектовРемонтов   = СтрокаРодитель.Ремонты.ТиповойОР;
		ЗначениеВРеквизитФормы(ВидыРемонтныхРаботДляОтсчетаОбъект,"ВидыРемонтныхРаботДляОтсчета");
		
		
		Если ЗаполнитьНормативы Тогда
			СтруктураОтбора = Новый Структура("ОбъектРемонта,ВидРемонтныхРабот",ОбъектРемонтаРодитель,ВыбранноеЗначение);
			СтрокаТаблицыНормативов = Объект.БазаДляРасчетаПГППР.НайтиСтроки(СтруктураОтбора)[0];
			ЗаполнитьЗначенияСвойств(НовСтрокаВидРемРабот,СтрокаТаблицыНормативов);
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект, "ДеревоРемонтов");
	
	Иначе
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ремонт ""%1"" уже внесен в список ремонтов объекта ""%2"" плана-графика ППР!'"),
			ВыбранноеЗначение,СтрокаРодитель.Ремонты));
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура РазвернутьВсеВетвиДеревьев()
	
	Для Каждого Элемент Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		Элементы.ДеревоРемонтовПланГрафикППР.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
		Элементы.ДеревоРемонтовНормативы.Развернуть(Элемент.ПолучитьИдентификатор(),Истина);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненностьПередПолучениемНормативовИзСистемы(СтрокаДерева,НормативыЗаполнены)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов")Тогда
		Если ЗначениеЗаполнено(СтрокаДерева.НормативныйРемонт)
		ИЛИ ЗначениеЗаполнено(СтрокаДерева.СпособПланирования)
		ИЛИ ЗначениеЗаполнено(СтрокаДерева.ГрафикРемонтныхРабот)
		ИЛИ ЗначениеЗаполнено(СтрокаДерева.СпособВыполнения)
		ИЛИ ЗначениеЗаполнено(СтрокаДерева.СпособУчетаДатыОтсчета) Тогда 
			НормативыЗаполнены = Истина;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаДерева2 Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПроверитьЗаполненностьПередПолучениемНормативовИзСистемы(СтрокаДерева2,НормативыЗаполнены);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНормативыИзСистемы(ОбъектРемонта = Неопределено, МассивСтрокРемонтов = Неопределено, МассивОР = Неопределено, ЗамещатьНормативы)
	
	ОбъектыРемонтаОбъект = РеквизитФормыВЗначение("ОбъектыРемонта");
	
	Если МассивСтрокРемонтов <> Неопределено Тогда
		
		ТаблицаОР = ОбъектыРемонтаОбъект.СкопироватьКолонки();
		
		Для Каждого ИдентификаторСтроки Из МассивСтрокРемонтов Цикл
			
			ЗаписатьЭлементСтрокуДереваВТаблицуЗначений(ТаблицаОР,ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторСтроки));
			
		КонецЦикла;
		
	ИначеЕсли МассивОР = Неопределено Тогда
		
		ТаблицаОР=ОбъектыРемонтаОбъект.СкопироватьКолонки();
 		ЗаписатьДеревоППРСУчетомПозиции(ТаблицаОР);
		ЗначениеВРеквизитФормы(ТаблицаОР,"ОбъектыРемонта");
		
	Иначе
		
		ТаблицаОР = Новый ТаблицаЗначений;
		ТаблицаОР.Колонки.Добавить("ВидРемонтныхРабот",    Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
		ТаблицаОР.Колонки.Добавить("ОбъектРемонтныхРабот", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
		
		Для Каждого Элем Из МассивОР Цикл
			НС = ТаблицаОР.Добавить();
			ЗаполнитьЗначенияСвойств(НС,Элем);
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОР.Свернуть("ВидРемонтныхРабот, ОбъектРемонтныхРабот");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ТиповыеОР"));
	ОписаниеТиповРГ = Новый ОписаниеТипов(МассивТипов);
	
	Если ТаблицаОР.Колонки.Найти("ТиповойОР") = Неопределено Тогда
		ТаблицаОР.Колонки.Добавить("ТиповойОР", ОписаниеТиповРГ);
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	ОписаниеТиповОР = Новый ОписаниеТипов(МассивТипов);
	
	Если ТаблицаОР.Колонки.Найти("ОбъектРемонта") = Неопределено Тогда
		ТаблицаОР.Колонки.Добавить("ОбъектРемонта", ОписаниеТиповОР);
	КонецЕсли;
	
	Для Каждого СтрокаТЗ Из ТаблицаОР Цикл
		Если ТипЗнч(СтрокаТЗ.ОбъектРемонтныхРабот) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			СтрокаТЗ.ТиповойОР	= СтрокаТЗ.ОбъектРемонтныхРабот.ТиповойОР;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ВидРемонтныхРабот,
	               |	ТаблицаОР.ОбъектРемонтныхРабот,
	               |	ТаблицаОР.ТиповойОР
	               |ПОМЕСТИТЬ ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
	               |	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР КАК ТиповойОР,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ ТаблицаСПриоритетами
	               |ИЗ
	               |	РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	               |		ПО торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта = ТаблицаОР.ВидРемонтныхРабот
	               |			И торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР = ТаблицаОР.ТиповойОР
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
	               |	ТаблицаОР.ОбъектРемонтныхРабот,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР,
	               |	0
	               |ИЗ
	               |	ТаблицаОР КАК ТаблицаОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
	               |		ПО ТаблицаОР.ВидРемонтныхРабот = торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта
	               |			И ТаблицаОР.ОбъектРемонтныхРабот = торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ТиповойОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСПриоритетами.ВидРемонта,
	               |	ТаблицаСПриоритетами.ОбъектРемонта,
	               |	МИНИМУМ(ТаблицаСПриоритетами.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ТаблицаМинимальныхПриоритетов
	               |ИЗ
	               |	ТаблицаСПриоритетами КАК ТаблицаСПриоритетами
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ТаблицаСПриоритетами.ОбъектРемонта,
	               |	ТаблицаСПриоритетами.ВидРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСПриоритетами.ЗамещаемыйВидРемонта,
	               |	ТаблицаСПриоритетами.СпособЗамещения,
	               |	ТаблицаСПриоритетами.НачальнаяГраница,
	               |	ТаблицаСПриоритетами.КонечнаяГраница,
	               |	ТаблицаСПриоритетами.ВидРемонта,
	               |	ТаблицаСПриоритетами.ОбъектРемонта,
	               |	ТаблицаСПриоритетами.ТиповойОР
	               |ИЗ
	               |	ТаблицаСПриоритетами КАК ТаблицаСПриоритетами
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМинимальныхПриоритетов КАК ТаблицаМинимальныхПриоритетов
	               |		ПО ТаблицаСПриоритетами.ВидРемонта = ТаблицаМинимальныхПриоритетов.ВидРемонта
	               |			И ТаблицаСПриоритетами.ОбъектРемонта = ТаблицаМинимальныхПриоритетов.ОбъектРемонта
	               |			И ТаблицаСПриоритетами.Приоритет = ТаблицаМинимальныхПриоритетов.Приоритет";
	
    Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);
	ВидыРемонтныхРаботДляЗамещенияОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения");
	ТаблицаЗамещаемых = Запрос.Выполнить().Выгрузить();

	ИмяОР = "ОбъектРемонта";
	ИмяВР = "ВидРемонта";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаЗамещаемых,ВидыРемонтныхРаботДляЗамещенияОбъект,ЗамещатьНормативы,ИмяОР,ИмяВР);
	Для Каждого Строка Из ТаблицаЗамещаемых Цикл
		НоваяСтрока = ВидыРемонтныхРаботДляЗамещенияОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ВидыРемонтныхРаботДляЗамещенияОбъект, "ВидыРемонтныхРаботДляЗамещения"); 
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	ТаблицаОР.ОбъектРемонтныхРабот,
	              |	ТаблицаОР.ВидРемонтныхРабот,
	              |	ТаблицаОР.ТиповойОР
	              |ПОМЕСТИТЬ ТаблицаОР
	              |ИЗ
	              |	&ТаблицаОР КАК ТаблицаОР
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
	              |	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта,
	              |	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	              |	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР КАК ТиповойОР,
	              |	0 КАК Приоритет
	              |ПОМЕСТИТЬ ТаблицаСПриоритетами
	              |ИЗ
	              |	РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	              |		ПО торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта = ТаблицаОР.ВидРемонтныхРабот
	              |			И торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР = ТаблицаОР.ОбъектРемонтныхРабот
	              |
	              |ОБЪЕДИНИТЬ ВСЕ
	              |
	              |ВЫБРАТЬ
	              |	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
	              |	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта,
	              |	ТаблицаОР.ОбъектРемонтныхРабот,
	              |	торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР,
	              |	1
	              |ИЗ
	              |	РегистрСведений.торо_ПредшествующиеНормативныеРемонтыОборудования КАК торо_ПредшествующиеНормативныеРемонтыОборудования
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	              |		ПО торо_ПредшествующиеНормативныеРемонтыОборудования.ТиповойОР = ТаблицаОР.ТиповойОР
	              |			И торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта = ТаблицаОР.ВидРемонтныхРабот
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ТаблицаСПриоритетами.ВидРемонта,
	              |	ТаблицаСПриоритетами.ОбъектРемонта,
	              |	МИНИМУМ(ТаблицаСПриоритетами.Приоритет) КАК Приоритет
	              |ПОМЕСТИТЬ ТаблицаМинимальныхПриоритетов
	              |ИЗ
	              |	ТаблицаСПриоритетами КАК ТаблицаСПриоритетами
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	ТаблицаСПриоритетами.ВидРемонта,
	              |	ТаблицаСПриоритетами.ОбъектРемонта
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ТаблицаСПриоритетами.ВидРемонта,
	              |	ТаблицаСПриоритетами.ПредшествующийВидРемонта,
	              |	ТаблицаСПриоритетами.ОбъектРемонта,
	              |	ТаблицаСПриоритетами.ТиповойОР
	              |ИЗ
	              |	ТаблицаСПриоритетами КАК ТаблицаСПриоритетами
	              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМинимальныхПриоритетов КАК ТаблицаМинимальныхПриоритетов
	              |		ПО ТаблицаСПриоритетами.ВидРемонта = ТаблицаМинимальныхПриоритетов.ВидРемонта
	              |			И ТаблицаСПриоритетами.ОбъектРемонта = ТаблицаМинимальныхПриоритетов.ОбъектРемонта
	              |			И ТаблицаСПриоритетами.Приоритет = ТаблицаМинимальныхПриоритетов.Приоритет";
				  
	Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);			  
    ВидыРемонтныхРаботДляОтсчетаОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета");
	ТаблицаПредшествующих = Запрос.Выполнить().Выгрузить();
	
	ИмяОР = "ОбъектРемонта";
	ИмяВР = "ВидРемонта";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаПредшествующих,ВидыРемонтныхРаботДляОтсчетаОбъект,ЗамещатьНормативы,ИмяОР,ИмяВР);
	Для Каждого Строка Из ТаблицаПредшествующих Цикл
		НоваяСтрока = ВидыРемонтныхРаботДляОтсчетаОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ВидыРемонтныхРаботДляОтсчетаОбъект,"ВидыРемонтныхРаботДляОтсчета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ОбъектРемонтныхРабот,
	               |	ТаблицаОР.ВидРемонтныхРабот
	               |ПОМЕСТИТЬ ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ЗавершенныеРемонтныеРаботы.ОбъектРемонта,
	               |	торо_ЗавершенныеРемонтныеРаботы.ВидРемонтныхРабот,
	               |	торо_ЗавершенныеРемонтныеРаботы.ID,
	               |	ВЫБОР
	               |		КОГДА торо_ЗавершенныеРемонтныеРаботы.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1)
	               |			ТОГДА торо_ЗавершенныеРемонтныеРаботы.ДатаОкончания
	               |		ИНАЧЕ торо_ЗавершенныеРемонтныеРаботы.ДатаНачала
	               |	КОНЕЦ КАК ДатаНачала,
	               |	торо_ЗавершенныеРемонтныеРаботы.ДатаОкончания,
	               |	торо_ЗавершенныеРемонтныеРаботы.Регистратор,
	               |	торо_ЗавершенныеРемонтныеРаботы.Период,
	               |	торо_ЗавершенныеРемонтныеРаботы.НомерСтроки,
	               |	торо_ЗавершенныеРемонтныеРаботы.Активность,
	               |	торо_ЗавершенныеРемонтныеРаботы.ОбъектРемонта.Родитель КАК Родитель
	               |ИЗ
	               |	ТаблицаОР КАК ТаблицаОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеРемонтныеРаботы КАК торо_ЗавершенныеРемонтныеРаботы
	               |		ПО ТаблицаОР.ОбъектРемонтныхРабот = торо_ЗавершенныеРемонтныеРаботы.ОбъектРемонта
	               |			И ТаблицаОР.ВидРемонтныхРабот = торо_ЗавершенныеРемонтныеРаботы.ВидРемонтныхРабот";
				   
	Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);			  
	ЗавершенныеРемонтныеРаботыОбъект = РеквизитФормыВЗначение("ЗавершенныеРемонтныеРаботы");			   
	ТаблицаЗавершенных = Запрос.Выполнить().Выгрузить();
	
	ИмяОР = "ОбъектРемонта";
	ИмяВР = "ВидРемонтныхРабот";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаЗавершенных,ЗавершенныеРемонтныеРаботыОбъект,ЗамещатьНормативы,ИмяОР,ИмяВР);
	Для Каждого Строка Из ТаблицаЗавершенных Цикл
		НоваяСтрока = ЗавершенныеРемонтныеРаботыОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	ЗначениеВРеквизитФормы(ЗавершенныеРемонтныеРаботыОбъект, "ЗавершенныеРемонтныеРаботы");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаОР.ОбъектРемонтныхРабот,
	               |	ТаблицаОР.ВидРемонтныхРабот
	               |ПОМЕСТИТЬ ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПлановыеРемонтныеРаботы.Регистратор,
	               |	торо_ПлановыеРемонтныеРаботы.Организация,
	               |	торо_ПлановыеРемонтныеРаботы.ID,
	               |	торо_ПлановыеРемонтныеРаботы.ПериодичностьДетализации,
	               |	торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботы.Подразделение,
	               |	торо_ПлановыеРемонтныеРаботы.ID_Корректировок,
	               |	торо_ПлановыеРемонтныеРаботы.ДатаНачалаРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботы.ДатаОкончанияРемонтныхРабот,
	               |	торо_ПлановыеРемонтныеРаботы.Исполнитель,
	               |	торо_ПлановыеРемонтныеРаботы.СпособВыполнения,
	               |	торо_ПлановыеРемонтныеРаботы.Отменен,
	               |	торо_ПлановыеРемонтныеРаботы.ID_базы_расчета,
	               |	торо_ПлановыеРемонтныеРаботы.Замещен,
	               |	торо_ПлановыеРемонтныеРаботы.ID_замещающего,
	               |	торо_ПлановыеРемонтныеРаботы.ДатаНачалаРасчетная,
	               |	торо_ПлановыеРемонтныеРаботы.СтоимостьРемонта,
	               |	торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот.Родитель КАК Родитель
	               |ИЗ
	               |	ТаблицаОР КАК ТаблицаОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы КАК торо_ПлановыеРемонтныеРаботы
	               |		ПО (торо_ПлановыеРемонтныеРаботы.ВидРемонтныхРабот = ТаблицаОР.ВидРемонтныхРабот)
	               |			И (торо_ПлановыеРемонтныеРаботы.ОбъектРемонтныхРабот = ТаблицаОР.ОбъектРемонтныхРабот)";
				   
	Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);			  
  	ПлановыеРемонтныеРаботыОбъект = РеквизитФормыВЗначение("ПлановыеРемонтныеРаботы");			   
	ТаблицаПлановых = Запрос.Выполнить().Выгрузить();
	
	ИмяОР = "ОбъектРемонтныхРабот";
	ИмяВР = "ВидРемонтныхРабот";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаПлановых,ПлановыеРемонтныеРаботыОбъект,ЗамещатьНормативы,ИмяОР,ИмяВР);
	Для Каждого Строка Из ТаблицаПлановых Цикл
		НоваяСтрока = ПлановыеРемонтныеРаботыОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ПлановыеРемонтныеРаботыОбъект, "ПлановыеРемонтныеРаботы");
				   
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ТаблицаОР.ОбъектРемонтныхРабот
	               |ПОМЕСТИТЬ ТаблицаОР
	               |ИЗ
	               |	&ТаблицаОР КАК ТаблицаОР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.Период,
	               |	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта.Родитель КАК Родитель
	               |ИЗ
	               |	РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОР КАК ТаблицаОР
	               |		ПО торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = ТаблицаОР.ОбъектРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ТаблицаОР",ТаблицаОР);
	ПлановаяНаработкаОбъект = РеквизитФормыВЗначение("ПлановаяНаработка");
	ТаблицаПлановаяНаработка = Запрос.Выполнить().Выгрузить();
	ИмяОР = "ОбъектРемонта";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаПлановаяНаработка,ПлановаяНаработкаОбъект,ЗамещатьНормативы,ИмяОР);
	Для Каждого Строка Из ТаблицаПлановаяНаработка Цикл
		НоваяСтрока = ПлановаяНаработкаОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;	
	
	ЗначениеВРеквизитФормы(ПлановаяНаработкаОбъект, "ПлановаяНаработка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	|ПОМЕСТИТЬ ТаблицаОР
	|ИЗ
	|	&ТаблицаОР КАК ТаблицаОР
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_НаработкаОбъектовРемонтаОстатки.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_НаработкаОбъектовРемонтаОстатки.Показатель КАК Показатель,
	|	торо_НаработкаОбъектовРемонтаОстатки.НаработкаОстаток КАК Наработка
	|ПОМЕСТИТЬ ВТ_ОстаткиНаработки
	|ИЗ
	|	РегистрНакопления.торо_НаработкаОбъектовРемонта.Остатки(
	|			,
	|			ОбъектРемонта В
	|				(ВЫБРАТЬ
	|					ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	|				ИЗ
	|					ТаблицаОР КАК ТаблицаОР)) КАК торо_НаработкаОбъектовРемонтаОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПериодыНаработкиОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПериодыНаработкиОРСрезПоследних.Показатель КАК Показатель,
	|	торо_ПериодыНаработкиОРСрезПоследних.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ПериодыНаработки
	|ИЗ
	|	РегистрСведений.торо_ПериодыНаработкиОР.СрезПоследних(
	|			,
	|			ОбъектРемонта В
	|				(ВЫБРАТЬ
	|					ТаблицаОР.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	|				ИЗ
	|					ТаблицаОР КАК ТаблицаОР)) КАК торо_ПериодыНаработкиОРСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПериодыНаработки.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_ПериодыНаработки.Показатель КАК Показатель,
	|	ВТ_ПериодыНаработки.Период КАК Период,
	|	ЕСТЬNULL(ВТ_ОстаткиНаработки.Наработка, 0) КАК НаработкаПриход,
	|	ВТ_ПериодыНаработки.ОбъектРемонта.Родитель КАК Родитель
	|ИЗ
	|	ВТ_ПериодыНаработки КАК ВТ_ПериодыНаработки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОстаткиНаработки КАК ВТ_ОстаткиНаработки
	|		ПО (ВТ_ОстаткиНаработки.ОбъектРемонта = ВТ_ПериодыНаработки.ОбъектРемонта)
	|			И (ВТ_ОстаткиНаработки.Показатель = ВТ_ПериодыНаработки.Показатель)";

	
	Запрос.УстановитьПараметр("ТаблицаОР",ТаблицаОР);
	ФактическаяНаработкаОбъект = РеквизитФормыВЗначение("ФактическаяНаработка");
	ТаблицаФактическаяНаработка = Запрос.Выполнить().Выгрузить();
	ИмяОР = "ОбъектРемонта";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаФактическаяНаработка,ФактическаяНаработкаОбъект,ЗамещатьНормативы,ИмяОР);
	Для Каждого Строка Из ТаблицаФактическаяНаработка Цикл
		НоваяСтрока = ФактическаяНаработкаОбъект.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаДанныхПГППР.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	               |	ТаблицаДанныхПГППР.ВидРемонтныхРабот,
	               |	ТаблицаДанныхПГППР.ТиповойОР
	               |ПОМЕСТИТЬ ТаблицаДанныхПГППР
	               |ИЗ
	               |	&ТаблицаОР КАК ТаблицаДанныхПГППР
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
	               |	торо_НормативныеРемонтыОборудования.ТиповойОР,
	               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	               |	торо_НормативныеРемонтыОборудования.СпособПланирования,
	               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	               |	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
	               |	торо_НормативныеРемонтыОборудования.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПродолжительность,
	               |	торо_НормативныеРемонтыОборудования.ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	торо_НормативныеРемонтыОборудования.УчитыватьПростоиОборудования,
	               |	ТаблицаДанныхПГППР.ОбъектРемонта,
	               |	""ТиповойОР"" КАК Источник,
	               |	ТаблицаДанныхПГППР.ТиповойОР КАК ТиповойОР1,
	               |	1 КАК Приоритет
	               |ПОМЕСТИТЬ НормативныеРемонтыСПриоритетами
	               |ИЗ
	               |	ТаблицаДанныхПГППР КАК ТаблицаДанныхПГППР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |		ПО ТаблицаДанныхПГППР.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	               |			И ТаблицаДанныхПГППР.ТиповойОР = торо_НормативныеРемонтыОборудования.ТиповойОР
	               |ГДЕ
	               |	торо_НормативныеРемонтыОборудования.Приоритет
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
	               |	торо_НормативныеРемонтыОборудования.ТиповойОР,
	               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	               |	торо_НормативныеРемонтыОборудования.СпособПланирования,
	               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	               |	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
	               |	торо_НормативныеРемонтыОборудования.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПродолжительность,
	               |	торо_НормативныеРемонтыОборудования.ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	торо_НормативныеРемонтыОборудования.УчитыватьПростоиОборудования,
	               |	ТаблицаДанныхПГППР.ОбъектРемонта,
	               |	""ОбъектРемонта"",
	               |	ТаблицаДанныхПГППР.ТиповойОР,
	               |	0
	               |ИЗ
	               |	ТаблицаДанныхПГППР КАК ТаблицаДанныхПГППР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |		ПО ТаблицаДанныхПГППР.ОбъектРемонта = торо_НормативныеРемонтыОборудования.ОбъектРемонта
	               |			И ТаблицаДанныхПГППР.ВидРемонтныхРабот = торо_НормативныеРемонтыОборудования.ВидРемонта
	               |ГДЕ
	               |	торо_НормативныеРемонтыОборудования.Приоритет
	               |	И торо_НормативныеРемонтыОборудования.ТиповойОР = НЕОПРЕДЕЛЕНО
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НормативныеРемонтыСПриоритетами.ВидРемонта,
	               |	НормативныеРемонтыСПриоритетами.ОбъектРемонта,
	               |	МИНИМУМ(НормативныеРемонтыСПриоритетами.Приоритет) КАК Приоритет
	               |ПОМЕСТИТЬ ТаблицаМинимальныхприоритетов
	               |ИЗ
	               |	НормативныеРемонтыСПриоритетами КАК НормативныеРемонтыСПриоритетами
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НормативныеРемонтыСПриоритетами.ВидРемонта,
	               |	НормативныеРемонтыСПриоритетами.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НормативныеРемонтыСПриоритетами.ВидРемонта,
	               |	НормативныеРемонтыСПриоритетами.ТиповойОР,
	               |	НормативныеРемонтыСПриоритетами.НормативныйРемонт,
	               |	НормативныеРемонтыСПриоритетами.СпособПланирования,
	               |	НормативныеРемонтыСПриоритетами.ГрафикРемонтныхРабот,
	               |	НормативныеРемонтыСПриоритетами.СпособВыполнения,
	               |	НормативныеРемонтыСПриоритетами.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	НормативныеРемонтыСПриоритетами.СпособУчетаДатыОтсчета,
	               |	НормативныеРемонтыСПриоритетами.НеУчаствуетВПланировании,
	               |	НормативныеРемонтыСПриоритетами.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	НормативныеРемонтыСПриоритетами.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	НормативныеРемонтыСПриоритетами.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	НормативныеРемонтыСПриоритетами.НеУчитыватьПродолжительность,
	               |	НормативныеРемонтыСПриоритетами.ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	НормативныеРемонтыСПриоритетами.УчитыватьПростоиОборудования,
	               |	НормативныеРемонтыСПриоритетами.ОбъектРемонта,
	               |	НормативныеРемонтыСПриоритетами.Источник,
	               |	НормативныеРемонтыСПриоритетами.ТиповойОР КАК ТиповойОР1,
	               |	торо_ВерсииТехКартСрезПоследних.ТехКарта.НормаВремени КАК Продолжительность
	               |ИЗ
	               |	ТаблицаМинимальныхприоритетов КАК ТаблицаМинимальныхприоритетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НормативныеРемонтыСПриоритетами КАК НормативныеРемонтыСПриоритетами
	               |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВерсииТехКарт.СрезПоследних КАК торо_ВерсииТехКартСрезПоследних
	               |			ПО НормативныеРемонтыСПриоритетами.НормативныйРемонт = торо_ВерсииТехКартСрезПоследних.ИдентификаторТехКарты
	               |		ПО ТаблицаМинимальныхприоритетов.ВидРемонта = НормативныеРемонтыСПриоритетами.ВидРемонта
	               |			И ТаблицаМинимальныхприоритетов.ОбъектРемонта = НормативныеРемонтыСПриоритетами.ОбъектРемонта
	               |			И ТаблицаМинимальныхприоритетов.Приоритет = НормативныеРемонтыСПриоритетами.Приоритет";			   
	
				   
	ТаблицаСтрокКУдалению = ПолучитьЗаполненныеСтрокиДерева();
	ИмяОР = "ОбъектРемонтныхРабот";
	ИмяВР = "ВидРемонтныхРабот";
	УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаОР,ТаблицаСтрокКУдалению,ЗамещатьНормативы,ИмяОР,ИмяВР);
	
	Запрос.УстановитьПараметр("ТаблицаОР", ТаблицаОР);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		
		ЗначениеВРеквизитФормы(Результат.Выгрузить(),"БазаДляРасчетаПГППР");
		
	КонецЕсли;	
	
	ЗаполнитьДеревоРемонтовНаСервере(ТаблицаОР);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДублирующиесяСтрокиПоОРИВР(ТаблицаЗапроса,ТаблицаОбработки,ЗамещатьНормативы,ИмяОР,ИмяВР = Неопределено)
	
	Если ЗамещатьНормативы Тогда
		ТаблицаДляУдаления = ТаблицаОбработки;
		ТаблицаДляПроверки = ТаблицаЗапроса;
	Иначе
		ТаблицаДляУдаления = ТаблицаЗапроса;
		ТаблицаДляПроверки = ТаблицаОбработки;
	КонецЕсли;
	
	МассивСтрокКУдалению = Новый Массив;
	
	Для Каждого Строка Из ТаблицаДляУдаления Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить(ИмяОР,Строка[ИмяОР]);
		Если ИмяВР <> Неопределено Тогда
			СтруктураОтбора.Вставить(ИмяВР,Строка[ИмяВР]);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаДляПроверки.НайтиСтроки(СтруктураОтбора)) Тогда
			МассивСтрокКУдалению.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
		ТаблицаДляУдаления.Удалить(СтрокаКУдалению);
	КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПроцедура(Знач Оповещение)
	
	ВыполнятьРасчет = ПроверкаПередРассчетомПланГрафика();
	Если ВыполнятьРасчет Тогда
		
		Если Не ЗначениеЗаполнено(ДатаПланирования) Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не заполнена начальная дата планирования!'"), СтатусСообщения.Внимание);
			Отказ = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено,НСтр("ru = 'Для расчёта плана-графика ремонтов необходимо задать период планирования!'"));
			
		КонецЕсли;
		
		Если Отказ = Истина Тогда
			ВыполнитьОбработкуОповещения(Оповещение);
			Возврат;
		КонецЕсли;
		
		Если ПланРемонтов.Количество() > 0 Тогда
			
			ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПроцедураЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), НСтр("ru = 'Данные запланированных ремонтов будут перезаполнены! Продолжить?'"),
				РежимДиалогаВопрос.ДаНет, 60);
            Возврат;
			
		Иначе
			ЗаписатьДеревоППРСУчетомПозиции();
			
			Если ДеревоРемонтов.ПолучитьЭлементы().Количество() = 0 Тогда
				
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Не заданы объекты ремонтных работ!'");
				Сообщение.Поле = "Элементы.ДеревоРемонтовПланГрафикППР";
				Сообщение.Сообщить();
				ВыполнитьОбработкуОповещения(Оповещение);
				Возврат;
				
			КонецЕсли;
			
			
			ЗаполнитьПланРемонтовНаСервере();
		КонецЕсли; 
		
	Иначе
		Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаНормативы;
	КонецЕсли;
	
	РассчитатьПроцедураФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПроцедураЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        
        ЗаписатьДеревоППРСУчетомПозиции();
        
        Если ДеревоРемонтов.ПолучитьЭлементы().Количество() = 0 Тогда
            
            Сообщение = Новый СообщениеПользователю;
            Сообщение.Текст = НСтр("ru = 'Не заданы объекты ремонтных работ!'");
            Сообщение.Поле = "Элементы.ДеревоРемонтовПланГрафикППР";
            Сообщение.Сообщить();
            ВыполнитьОбработкуОповещения(Оповещение);
            Возврат;
            
        КонецЕсли;
        
        
        ЗаполнитьПланРемонтовНаСервере();
        
    КонецЕсли;
    
    
    РассчитатьПроцедураФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПроцедураФрагмент(Знач Оповещение)
    
    ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры

&НаСервере
Функция ПроверкаПередРассчетомПланГрафика()
	
	РезультатПроверкиРеквизитовДляППР    = ПроверитьЗаполненностьРеквизитовДляППР();
	РезультатПроверкиДерева              = ВсеПоляДереваЗаполнены();
	РезультатПроверкиТаблицДляМнемосхемы = ПроверитьЗаполненностьТаблицДляМнемосхемы();
	РезультатПроверкиТаблицДляППР        = ПроверитьЗаполненностьТаблицДляППР();
	
	Возврат (РезультатПроверкиРеквизитовДляППР И РезультатПроверкиДерева И РезультатПроверкиТаблицДляМнемосхемы И РезультатПроверкиТаблицДляППР);
	
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьРеквизитовДляППР()
	
	МассивРеквизитов = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ВидОперации) Тогда
		МассивРеквизитов.Добавить("ВидОперации");
	ИначеЕсли ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.Корректировка И Не ЗначениеЗаполнено(КорректируемыйДокумент) Тогда
		МассивРеквизитов.Добавить("КорректируемыйДокумент");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаПланирования) Тогда
		МассивРеквизитов.Добавить("ДатаПланирования");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ПериодичностьДетализации) Тогда
		МассивРеквизитов.Добавить("ПериодичностьДетализации");
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КоличествоПериодов) Тогда
		МассивРеквизитов.Добавить("КоличествоПериодов");
	КонецЕсли;
	
	Если МассивРеквизитов.Количество() > 0 Тогда
		Для Каждого НезаполненныйРеквизит Из МассивРеквизитов Цикл
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено поле: %1.'"),Строка(НезаполненныйРеквизит)));
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
    	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ВсеПоляДереваЗаполнены()
	
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("Строка");
	ТаблицаСтрок.Колонки.Добавить("Колонка");
	МассивИменПолейДляПроверки = Новый Массив;
	МассивИменПолейДляПроверки.Добавить("СпособУчетаДатыОтсчета");
	МассивИменПолейДляПроверки.Добавить("СпособВыполнения");
	МассивИменПолейДляПроверки.Добавить("СпособПланирования");
	МассивИменПолейДляПроверки.Добавить("ГрафикРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("НормативныйРемонт");
	ДеревоРемонтовОбъект = РеквизитФормывЗначение("ДеревоРемонтов");
	
	Для Каждого СтрокаДерева Из ДеревоРемонтовОбъект.Строки Цикл
		ПроверитьЗаполненностьСтрокиДерева(СтрокаДерева,ТаблицаСтрок);
	КонецЦикла;
	
	Если ТаблицаСтрок.Количество() > 0 Тогда
		Для Каждого НезаполненнаяЯчейкаДерева Из ТаблицаСтрок Цикл
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено поле: %1 -> %2 -> %3.'"),
				Строка(НезаполненнаяЯчейкаДерева.Строка.Родитель.Ремонты),НезаполненнаяЯчейкаДерева.Строка.Ремонты,НезаполненнаяЯчейкаДерева.Колонка));
		КонецЦикла;
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполненностьСтрокиДерева(СтрокаДерева,ТаблицаСтрок)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		Для Каждого СтрокаДереваПоглубже Из СтрокаДерева.Строки Цикл
			ПроверитьЗаполненностьСтрокиДерева(СтрокаДереваПоглубже,ТаблицаСтрок);
		КонецЦикла;
	Иначе
		Для Каждого ПроверяемыйРеквизит Из МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаДерева[ПроверяемыйРеквизит]) Тогда
				НоваяСтрокаТЗ = ТаблицаСтрок.Добавить();
				НоваяСтрокаТЗ.Строка = СтрокаДерева;
				НоваяСтрокаТЗ.Колонка = ПроверяемыйРеквизит;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполненностьТаблицДляМнемосхемы()
	
	РезультатПроверки = Истина;
	
	МассивИменПолейДляПроверки.Очистить();
	МассивИменПолейДляПроверки.Добавить("ЗамещаемыйВидРемонта");
	МассивИменПолейДляПроверки.Добавить("СпособЗамещения");
	МассивИменПолейДляПроверки.Добавить("НачальнаяГраница");
	МассивИменПолейДляПроверки.Добавить("КонечнаяГраница");
	
	НомерСтроки = 0;
	
	ТаблицаЗамещенияОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения");
	Для Каждого СтрокаПроверяемойТаблицы ИЗ ТаблицаЗамещенияОбъект Цикл
		НомерСтроки = НомерСтроки + 1;
		Для Каждого ПроверяемыйРеквизит ИЗ МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаПроверяемойТаблицы[ПроверяемыйРеквизит]) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле: %1 -> %2 -> Замещаемые -> Строка %3 -> %4.'"),
					Строка(СтрокаПроверяемойТаблицы.ОбъектРемонта),Строка(СтрокаПроверяемойТаблицы.ВидРемонта),НомерСтроки,ПроверяемыйРеквизит));
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивИменПолейДляПроверки.Очистить();
	МассивИменПолейДляПроверки.Добавить("ОбъектРемонта");
	МассивИменПолейДляПроверки.Добавить("ПлановаяНаработка");
	МассивИменПолейДляПроверки.Добавить("Показатель");
	МассивИменПолейДляПроверки.Добавить("ПродолжительностьПериодаПлановойНаработки");
	МассивИменПолейДляПроверки.Добавить("ПериодПлановойНаработки");
	МассивИменПолейДляПроверки.Добавить("КоэффициентИспользованияОборудования");
	
	ТаблицаПлановойНаработкиОбъект = РеквизитФормыВЗначение("ПлановаяНаработка");
	
	НомерСтроки = 0;
	
	Для Каждого СтрокаПроверяемойТаблицы ИЗ ТаблицаПлановойНаработкиОбъект Цикл
		НомерСтроки = НомерСтроки + 1;
		Для Каждого ПроверяемыйРеквизит ИЗ МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаПроверяемойТаблицы[ПроверяемыйРеквизит]) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле: %1 -> Плановая наработка -> Строка %2 -> %3.'"),
					Строка(СтрокаПроверяемойТаблицы.ОбъектРемонта),НомерСтроки,ПроверяемыйРеквизит));
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатПроверки;
 
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьТаблицДляППР()
	
	РезультатПроверки = Истина;
	
	МассивИменПолейДляПроверки.Очистить();
	МассивИменПолейДляПроверки.Добавить("ВидРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("ДатаНачала");
	МассивИменПолейДляПроверки.Добавить("ДатаОкончания");
	
	НомерСтроки = 0;
	
	ТаблицаЗавершенныеРемонтыОбъект = РеквизитФормыВЗначение("ЗавершенныеРемонтныеРаботы");
	Для Каждого СтрокаПроверяемойТаблицы ИЗ ТаблицаЗавершенныеРемонтыОбъект Цикл
		НомерСтроки = НомерСтроки + 1;
		Для Каждого ПроверяемыйРеквизит ИЗ МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаПроверяемойТаблицы[ПроверяемыйРеквизит]) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле: %1 -> Завершенные -> Строка %2 -> %3.'"),
					Строка(СтрокаПроверяемойТаблицы.ОбъектРемонта),НомерСтроки,ПроверяемыйРеквизит));
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивИменПолейДляПроверки.Очистить();
	МассивИменПолейДляПроверки.Добавить("ОбъектРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("ВидРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("ДатаНачалаРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("ДатаОкончанияРемонтныхРабот");
	МассивИменПолейДляПроверки.Добавить("СпособВыполнения");
	
	НомерСтроки = 0;
	
	ТаблицаПлановыеРемонтыОбъект = РеквизитФормыВЗначение("ПлановыеРемонтныеРаботы");
	Для Каждого СтрокаПроверяемойТаблицы ИЗ ТаблицаПлановыеРемонтыОбъект Цикл
		НомерСтроки = НомерСтроки + 1;
		Для Каждого ПроверяемыйРеквизит ИЗ МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаПроверяемойТаблицы[ПроверяемыйРеквизит]) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле: %1 -> Плановые ремонты -> Строка %2 -> %3.'"),
					Строка(СтрокаПроверяемойТаблицы.ОбъектРемонтныхРабот),НомерСтроки,ПроверяемыйРеквизит));
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивИменПолейДляПроверки.Очистить();
	МассивИменПолейДляПроверки.Добавить("ОбъектРемонта");
	МассивИменПолейДляПроверки.Добавить("Показатель");
	МассивИменПолейДляПроверки.Добавить("НаработкаПриход");
	МассивИменПолейДляПроверки.Добавить("Период");

	НомерСтроки = 0;
	
	ТаблицаФактическаяНаработкаОбъект = РеквизитФормыВЗначение("ФактическаяНаработка");
	Для Каждого СтрокаПроверяемойТаблицы ИЗ ТаблицаФактическаяНаработкаОбъект Цикл
		НомерСтроки = НомерСтроки + 1;
		Для Каждого ПроверяемыйРеквизит ИЗ МассивИменПолейДляПроверки Цикл
			Если Не ЗначениеЗаполнено(СтрокаПроверяемойТаблицы[ПроверяемыйРеквизит]) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не заполнено поле: %1 -> " + "Фактическая наработка -> Строка %2 -> %3.'"),
					Строка(СтрокаПроверяемойТаблицы.ОбъектРемонта),НомерСтроки,ПроверяемыйРеквизит));
				РезультатПроверки = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаСервере
Функция ПолучитьЗаполненныеСтрокиДерева()
	
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("ВидРемонтныхРабот");
	ТаблицаСтрок.Колонки.Добавить("ОбъектРемонтныхРабот");
	МассивИменПолейДляПроверки = Новый Массив;
	МассивИменПолейДляПроверки.Добавить("СпособУчетаДатыОтсчета");
	МассивИменПолейДляПроверки.Добавить("СпособВыполнения");
	МассивИменПолейДляПроверки.Добавить("СпособПланирования");
	МассивИменПолейДляПроверки.Добавить("НормативныйРемонт");
	ДеревоРемонтовОбъект = РеквизитФормывЗначение("ДеревоРемонтов");
	
	Для Каждого СтрокаДерева Из ДеревоРемонтовОбъект.Строки Цикл
		ПроверитьНаличиеЗаписейВСтрокеДерева(СтрокаДерева,ТаблицаСтрок);
	КонецЦикла;
	
	Возврат ТаблицаСтрок;
КонецФункции

Процедура ПроверитьНаличиеЗаписейВСтрокеДерева(СтрокаДерева,ТаблицаСтрок)
	
	Если ТипЗнч(СтрокаДерева.Ремонты) <> Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		Для Каждого СтрокаДереваПоглубже Из СтрокаДерева.Строки Цикл
			ПроверитьНаличиеЗаписейВСтрокеДерева(СтрокаДереваПоглубже,ТаблицаСтрок);
		КонецЦикла;
	Иначе
		Для Каждого ПроверяемыйРеквизит Из МассивИменПолейДляПроверки Цикл
			Если ЗначениеЗаполнено(СтрокаДерева[ПроверяемыйРеквизит]) Тогда
				НоваяСтрокаТЗ = ТаблицаСтрок.Добавить();
				НоваяСтрокаТЗ.ВидРемонтныхРабот = СтрокаДерева.Ремонты;
				НоваяСтрокаТЗ.ОбъектРемонтныхРабот = СтрокаДерева.Родитель.Ремонты;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьДиаграммуГантаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        
        ПостроитьДиаграммуГантаНаСервере();
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаВидаИерархииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	СтруктураИерархииПредыдущая = ДополнительныеПараметры.СтруктураИерархииПредыдущая;
	ВыбранноеЗначение = ВыбранныйЭлемент;
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		СтруктураИерархии = ВыбранноеЗначение.Значение;
		ЗаполнитьДеревоПланаГрафикаППРСУчетомПозиции(СтруктураИерархии);
		РазвернутьВсеВетвиДеревьев();

	КонецЕсли; 
	
	Если Не СтруктураИерархии = СтруктураИерархииПредыдущая Тогда
		Элементы.ДиаграммаГантаМодифицированность.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеСвойства(Ссылка,ИмяРеквизита)
	
	Возврат Ссылка[ИмяРеквизита];
	
КонецФункции

&НаСервере
Процедура КоличествоВложенныхТехКарт(Результат, КолУровнейВложенности)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.Операция
	|ПОМЕСТИТЬ ТабОпераций
	|ИЗ
	|	&Таб КАК Таб
	|ГДЕ
	|	ВЫРАЗИТЬ(Таб.Операция КАК Справочник.торо_Ремонты) ССЫЛКА Справочник.торо_Ремонты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_РемонтыСписокОпераций.Операция
	|ИЗ
	|	ТабОпераций КАК ТабОпераций
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.торо_Ремонты.СписокОпераций КАК торо_РемонтыСписокОпераций
	|		ПО ТабОпераций.Операция = торо_РемонтыСписокОпераций.Ссылка
	|ГДЕ
	|	ВЫРАЗИТЬ(торо_РемонтыСписокОпераций.Операция КАК Справочник.торо_Ремонты) ССЫЛКА Справочник.торо_Ремонты";
	
	Запрос.УстановитьПараметр("Таб", Результат);
	
	Результат = Запрос.Выполнить().Выгрузить();	
	
	Если Результат.Количество() > 0 Тогда
		КолУровнейВложенности = КолУровнейВложенности + 1;
		КоличествоВложенныхТехКарт(Результат, КолУровнейВложенности);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоИзЗапросаВДеревоРемонтов(СтрокиДереваИзЗапроса,СтрокиДереваРемонтов)
	
	Для Каждого Строка Из СтрокиДереваИзЗапроса Цикл
		
		Если ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
		    НоваяСтрока.Ремонты = Строка.ВидРемонтныхРабот;
			НоваяСтрока.НомерКартинки = 7;
			Если Объект.БазаДляРасчетаПГППР.Количество() > 0 Тогда
				СтруктураОтбора = Новый Структура("ОбъектРемонта,ВидРемонта",НоваяСтрока.Родитель.Ремонты,Строка.ВидРемонтныхРабот);
				МассивСтрок = Объект.БазаДляРасчетаПГППР.НайтиСтроки(СтруктураОтбора);
				Если ЗначениеЗаполнено(МассивСтрок) Тогда
					ЗаполнитьЗначенияСвойств(НоваяСтрока,МассивСтрок[0]);
					НоваяСтрока.Родитель.НормативныйРемонт = МассивСтрок[0].НормативныйРемонт;
				КонецЕсли;
			КонецЕсли;
			СледующийУровень = НоваяСтрока.Строки;
		ИначеЕсли ЗначениеЗаполнено(Строка.ОбъектРемонтныхРабот) И Строка.ЭтоНеГруппа = null Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
		    НоваяСтрока.Ремонты = Строка.ОбъектРемонтныхРабот;
			НоваяСтрока.ИнвентарныйНомер = Строка.ОбъектРемонтныхРабот.ИнвентарныйНомер;
			НоваяСтрока.НомерКартинки = 0;
			СледующийУровень = НоваяСтрока.Строки;
		ИначеЕсли ЗначениеЗаполнено(Строка.Положение) И Строка.ОбъектРемонтныхРабот = null Тогда
			НоваяСтрока = СтрокиДереваРемонтов.Добавить();
		    НоваяСтрока.Ремонты = Строка.Положение;
			НоваяСтрока.НомерКартинки = 2;
			СледующийУровень = НоваяСтрока.Строки;
		Иначе
			СледующийУровень = СтрокиДереваРемонтов;
		КонецЕсли;
		
		ДеревоИзЗапросаВДеревоРемонтов(Строка.Строки,СледующийУровень);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьДоступностьДляРедактирования(парамПланРемонтов,парамМассивДоступныхДляКорректировкиСтрок)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт
	|ПОМЕСТИТЬ торо_ПланГрафикРемонтаПланРемонтов
	|ИЗ
	|	&ПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДоступенДляРедакторования.ID,
	|	ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования
	|ПОМЕСТИТЬ ТаблицаДоступенДляРедакторования
	|ИЗ
	|	&ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПланГрафикРемонтаПланРемонтов.ID,
	|	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКон,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНач,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаКонСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ДатаНачСт,
	|	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот,
	|	торо_ПланГрафикРемонтаПланРемонтов.Отменен,
	|	торо_ПланГрафикРемонтаПланРемонтов.Замещен,
	|	торо_ПланГрафикРемонтаПланРемонтов.ЗамещенСт,
	|	ЕстьNULL(ТаблицаДоступенДляРедакторования.ДоступенДляРедактирования,Истина) КАК ДоступенДляРедактирования
	|ИЗ
	|	торо_ПланГрафикРемонтаПланРемонтов КАК торо_ПланГрафикРемонтаПланРемонтов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДоступенДляРедакторования КАК ТаблицаДоступенДляРедакторования
	|		ПО торо_ПланГрафикРемонтаПланРемонтов.ID = ТаблицаДоступенДляРедакторования.ID";
	
	Запрос.УстановитьПараметр("ПланРемонтов",парамПланРемонтов);
	Запрос.УстановитьПараметр("ТаблицаДоступенДляРедакторования",парамМассивДоступныхДляКорректировкиСтрок);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

&НаСервере
Процедура ОбновитьДоступностьДляРедактирования()
	Ссылка = ?(ВидОперации = Перечисления.торо_ВидыОперацийПланаГрафикаППР.ПланРабот,Документы.торо_ПланГрафикРемонта.ПустаяСсылка(),КорректируемыйДокумент);
	ЗначениеВРеквизитФормы(Документы.торо_ПланГрафикРемонта.ОбновитьДоступностьДляРедактирования(Ссылка,ВидОперации,ПланРемонтов.Выгрузить()),"МассивДоступныхДляКорректировкиСтрок");
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРемонтовНаСервере(ТаблицаОР = Неопределено)
	
	Если ТаблицаОР = Неопределено Тогда
		ТаблицаОР = РеквизитФормыВЗначение("ОбъектыРемонта");
	КонецЕсли;	

	МассивСтрок = Новый Массив;
	Для Каждого Строка Из ТаблицаОР Цикл
		Если Не ЗначениеЗаполнено(Строка.ВидРемонтныхРабот) Тогда
			МассивСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаКУдалению Из МассивСтрок Цикл
		ТаблицаОР.Удалить(СтрокаКУдалению);
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОбъектыРемонта.ВидРемонтныхРабот,
	               |	ОбъектыРемонта.ОбъектРемонтныхРабот
				   |ПОМЕСТИТЬ ОбъектыРемонта
	               |ИЗ
	               |	&ТаблицаОбъектыРемонта КАК ОбъектыРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыРемонта.ВидРемонтныхРабот,
	               |	ОбъектыРемонта.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот
	               |ИЗ
	               |	ОбъектыРемонта КАК ОбъектыРемонта
	               |ИТОГИ ПО
	               |	ОбъектРемонтныхРабот";
	
	Запрос.УстановитьПараметр("ТаблицаОбъектыРемонта", ТаблицаОР);
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого ОР Из Дерево.Строки Цикл
		МассивВР = Новый Массив;
		Для Каждого ВР Из ОР.Строки Цикл
			МассивВР.Добавить(ВР.ВидРемонтныхРабот);
		КонецЦикла;
		ДополнитьДеревоРемонтовНаСервере(ОР.ОбъектРемонтныхРабот,МассивВР,Истина);
	КонецЦикла;
	
	Если ДеревоРемонтов.ПолучитьЭлементы().Количество() > 0 И Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока = Неопределено Тогда
		Элементы.ДеревоРемонтовНормативы.ТекущаяСтрока = ДеревоРемонтов.ПолучитьЭлементы()[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    КонецЕсли;
    
    ЗагрузитьДанныеИзСистемыФрагмент(Ответ);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыФрагмент(Знач Ответ)
    
    Перем ЗамещатьНормативы;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗамещатьНормативы = Истина;
    Иначе
        ЗамещатьНормативы = Ложь;
    КонецЕсли;
    
    ЗаполнитьНормативыИзСистемы(,,,ЗамещатьНормативы);
    РазвернутьВсеВетвиДеревьев();
    
    ДеревоРемонтовПриАктивизацииСтроки(Элементы.ДеревоРемонтовНормативы);

КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполненностьПередПолучениемНормативовИзСистемыЦикл(НормативыЗаполнены)
	
	Для Каждого СтрокаДерева Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		Если НЕ НормативыЗаполнены Тогда
			ПроверитьЗаполненностьПередПолучениемНормативовИзСистемы(СтрокаДерева,НормативыЗаполнены);
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
Конецпроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуНормативовПередРасчетомНаСервере()
	
	ТаблицаНормативовОбъект = РеквизитФормыВЗначение("ТаблицаНормативов").СкопироватьКолонки();
	
	Для Каждого СтрокаДерева Из ДеревоРемонтов.ПолучитьЭлементы() Цикл
		ЗаписатьСтрокуДереваВТаблицуНормативов(СтрокаДерева, ТаблицаНормативовОбъект)
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаНормативовОбъект, "ТаблицаНормативов");
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуДереваВТаблицуНормативов(ЭлементСтрокаДерева, ТаблицаНормативовОбъект)
	
	Если ТипЗнч(ЭлементСтрокаДерева.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		
		НоваяСтрокаТЗ = ТаблицаНормативовОбъект.Добавить();
		НоваяСтрокаТЗ.ВидРемонта    = ЭлементСтрокаДерева.Ремонты;
		НоваяСтрокаТЗ.ОбъектРемонта = ЭлементСтрокаДерева.ПолучитьРодителя().Ремонты;
		НоваяСтрокаТЗ.Приоритет     = Истина;
		
		Если ЭлементСтрокаДерева.Источник = "ТиповойОР" Тогда
			НоваяСтрокаТЗ.ГруппаОбъектовРемонтов = ЭлементСтрокаДерева.ТиповойОР;
		ИначеЕсли ЭлементСтрокаДерева.Источник = "ОбъектРемонта" Тогда
			НоваяСтрокаТЗ.ГруппаОбъектовРемонтов = ЭлементСтрокаДерева.ПолучитьРодителя().Ремонты;
		Иначе
			НоваяСтрокаТЗ.ГруппаОбъектовРемонтов = ЭлементСтрокаДерева.ПолучитьРодителя().Ремонты;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТЗ, ЭлементСтрокаДерева);
	
	Иначе
	
		Для Каждого ЭлементСтрокаДЗ Из ЭлементСтрокаДерева.ПолучитьЭлементы() Цикл
			
			ЗаписатьСтрокуДереваВТаблицуНормативов(ЭлементСтрокаДЗ, ТаблицаНормативовОбъект);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьМнемосхемуПроцедура()
	
 	Если Не ПроверкаПередПостроениемМнемосхемы() Тогда
		Возврат;
	КонецЕсли;
	ТабДокРасшифровкаРемонтногоЦикла.АвтоМасштаб = Истина;
	
	СписокВидовРемонтов = СписокВыбораВР;
	
	СписокВидовРемонтов.ЗаполнитьПометки(Истина);
	
	СписокВидовРемонтов.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ПостроитьМнемосхемуПроцедураЗавершение",ЭтотОбъект),НСтр("ru = 'Выберите виды ремонтных работ'"));

КонецПроцедуры	

&НаКлиенте
Процедура ПостроитьМнемосхемуПроцедураЗавершение(Список, ДополнительныеПараметры) Экспорт
	
	Если НЕ Список = Неопределено Тогда
		СписокВидовРемонтов = Список;
		ЕстьОтмеченные = Ложь;
		
		Для Каждого ЭлементСписка Из СписокВидовРемонтов Цикл
			Если ЭлементСписка.Пометка Тогда
				ЕстьОтмеченные = Истина;
				Прервать;
			КонецЕсли; 
		КонецЦикла;
		
		Если ЕстьОтмеченные Тогда
			РемонтныйЦикл = Новый ГрафическаяСхема;
			
			ПостроитьМнемосхемуНаСервере(СписокВидовРемонтов, ОРМнемосхема);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверкаПередПостроениемМнемосхемы()
	
	МассивИменПолейДляПроверки = Новый Массив;
	РезультатПроверкиДерева = ВсеПоляДереваЗаполнены();
	РезультатПроверкиТаблицДляМнемосхемы = ПроверитьЗаполненностьТаблицДляМнемосхемы();
	
	Возврат (РезультатПроверкиДерева И РезультатПроверкиТаблицДляМнемосхемы);
	
КонецФункции

&НаСервере
Процедура ПостроитьМнемосхемуНаСервере(СписокВидовРемонтов, ОРМнемосхема)
	
	ТабДокРасшифровкаРемонтногоЦикла.Очистить();
	
	ТаблицаОР = Новый ТаблицаЗначений;
	ТаблицаОР.Колонки.Добавить("ВидРемонтныхРабот",   Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаОР.Колонки.Добавить("ОбъектРемонтныхРабот",Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаОР.Колонки.Добавить("Ремонт");
	ТаблицаОР.Колонки.Добавить("ПлановыйГрафикРаботы",Новый ОписаниеТипов("СправочникСсылка.Календари"));
	ТаблицаОР.Колонки.Добавить("ТиповойОР",           Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	ЗаписатьДеревоППРСУчетомПозиции(ТаблицаОР, ОРМнемосхема);
	ТаблицаОР.ЗаполнитьЗначения(ОРМнемосхема.ПлановыйГрафикРаботы,"ПлановыйГрафикРаботы");
	ТаблицаОР.ЗаполнитьЗначения(ОРМнемосхема.ТиповойОР,"ТиповойОР");
		
	
	СписокВидовРемонтов.НайтиПоЗначению(ВРНачалоЦикла).Пометка = Истина;
	
	Для Каждого ЭлементСписка Из СписокВидовРемонтов Цикл
		
		Если НЕ ЭлементСписка.Пометка Тогда
			
			НайденнаяСтрока = ТаблицаОР.Найти(ЭлементСписка.Значение, "ВидРемонтныхРабот");
			
			ТаблицаОР.Удалить(НайденнаяСтрока);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ЗаполнитьТаблицуНормативовПередРасчетомНаСервере();
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ДатаПланирования",        ТекущаяДата());	
	
	ВыполнятьРасчет = ПроверкаПередРасчетомМнемосхемы(СтруктураДанных["ДатаПланирования"], ТаблицаОР.Скопировать(, "ОбъектРемонтныхРабот, ВидРемонтныхРабот"));
	
	Если ВыполнятьРасчет Тогда
		
		ТаблицаНормативовМнемосхема = РеквизитФормыВЗначение("ТаблицаНормативов").Скопировать(Новый Структура("ОбъектРемонта", ОРМнемосхема));
		
		ТаблицаРемонтов = РасчитатьППР(Истина, ТаблицаОР);
		Если ТаблицаРемонтов <> Неопределено и ТаблицаРемонтов.Количество() > 0 Тогда
			
			СтрНачало = ТаблицаРемонтов.Найти(ВРНачалоЦикла,"ВидРемонтныхРабот");
			Если Не СтрНачало = Неопределено Тогда
				ИндексНачало = ТаблицаРемонтов.Индекс(СтрНачало);
				Пока ИндексНачало > 0 Цикл
					ТаблицаРемонтов.Удалить(0);
					ИндексНачало = ИндексНачало - 1;
				КонецЦикла;
			КонецЕсли;
			
			КоличествоРемонтов = ТаблицаРемонтов.Количество();
			Пока КоличествоРемонтов > 0 Цикл
				Если ТаблицаРемонтов[КоличествоРемонтов - 1].ВидРемонтныхРабот = ВРНачалоЦикла Тогда
					Прервать;
				Иначе
					ТаблицаРемонтов.Удалить(КоличествоРемонтов - 1);
					КоличествоРемонтов = КоличествоРемонтов - 1;
				КонецЕсли;
			КонецЦикла;
			
			ЗапланированныеРемонты = ТаблицаОР.Скопировать(,"ВидРемонтныхРабот");
			
			Массив = Новый Массив;
			Массив.Добавить(Тип("Булево"));
			ОписаниеТиповБул = Новый ОписаниеТипов(Массив);
			ЗапланированныеРемонты.Колонки.Добавить("Выбран",ОписаниеТиповБул);
			Массив = Новый Массив;
			Массив.Добавить(Тип("Цвет"));
			ОписаниеТиповЦвет = Новый ОписаниеТипов(Массив);
			ЗапланированныеРемонты.Колонки.Добавить("Цвет",ОписаниеТиповЦвет);
			ЗапланированныеРемонты.ЗаполнитьЗначения(Истина,"Выбран");
			ЗапланированныеРемонты.ЗаполнитьЗначения(Новый Цвет(255, 255, 255) ,"Цвет");
			
			СоответсвиеЦветов = Новый Соответствие;
			Для Каждого СтрокаРемонт Из ЗапланированныеРемонты Цикл
				СоответсвиеЦветов.Вставить(СтрокаРемонт.ВидРемонтныхРабот,СтрокаРемонт.Цвет);
			КонецЦикла;
			Нормировать = Ложь;
			
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось рассчитать ремонтный цикл, проверьте настройки планирования!'"));
			Возврат;
			
		КонецЕсли;
		

		
		ТаблицаРемонтовВизуализация = ТаблицаРемонтов.Скопировать();
		РассчитатьПараметрыОтПредыдущего(ТаблицаНормативовМнемосхема,ТаблицаРемонтовВизуализация,ОРМнемосхема,Объект.КолонкиНаработки);
		
		Если ТаблицаРемонтов.Количество() > 0 Тогда
			ПоследнийРемонт = ТаблицаРемонтов[ТаблицаРемонтов.Количество() - 1];
			ДатаПоследнего         = ТаблицаРемонтов[0].ДатаНач;
			ОбщаяПродолжительность = ПоследнийРемонт.ДатаНач - ДатаПоследнего;
			
			
			Если ОбщаяПродолжительность = 0 Тогда
				ОбщаяПродолжительность = 1;
			КонецЕсли;
		КонецЕсли;
		
		Объект.КолонкиНаработки.Очистить();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция РассчитатьПараметрыОтПредыдущего(ТаблицаНормативовМнемосхема,ТаблицаРемонтовВизуализация, ОРМнемосхема,КолонкиНаработки)
	
	// С этим пока не разобрался
	// не переписана обработка торо_ЗащитаРаботаСМнемосхемами.
	
	Номер = 1;
		Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
			ДатаНачПервого = ТаблицаРемонтовВизуализация[0].ДатаНач;
			ДатаПредшествующего = ДатаНачПервого;
		КонецЕсли;
		
		Если ТаблицаРемонтовВизуализация.Колонки.Найти("ДатаПредшествующего") = Неопределено Тогда
			ТаблицаРемонтовВизуализация.Колонки.Добавить("ДатаПредшествующего",ТаблицаРемонтовВизуализация.Колонки.ДатаНач.ТипЗначения);
		КонецЕсли;
		
		Для Каждого СтрРемонт Из ТаблицаРемонтовВизуализация Цикл
			СтрРемонт.ДатаПредшествующего = Мин(НачалоДня(ДатаПредшествующего+86400),СтрРемонт.ДатаНач);
			ДатаПредшествующего = СтрРемонт.ДатаКон;
		КонецЦикла;
		
		Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
			ПоследняяСтрокаРемонта = ТаблицаРемонтовВизуализация[ТаблицаРемонтовВизуализация.Количество() - 1];
			СтрокаДляПодвала = ТаблицаРемонтовВизуализация.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаДляПодвала,ПоследняяСтрокаРемонта);
			СтрокаДляПодвала.ДатаПредшествующего = Мин(НачалоДня(ТаблицаРемонтовВизуализация[0].ДатаКон+86400),СтрРемонт.ДатаНач);
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	ТаблицаРемонтов.ДатаНач,
		               |	ТаблицаРемонтов.ДатаКон,
		               |	ТаблицаРемонтов.ВидРемонтныхРабот,
		               |	ТаблицаРемонтов.Замещен,
		               |	ТаблицаРемонтов.ДатаПредшествующего,
		               |	ТаблицаРемонтов.РассчитанПоПериодичности
		               |ПОМЕСТИТЬ ТаблицаРемонтов
		               |ИЗ
		               |	&ТаблицаРемонтов КАК ТаблицаРемонтов
		               |ГДЕ
		               |	НЕ ТаблицаРемонтов.Замещен
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаНормативов.ВидРемонта,
		               |	ТаблицаНормативов.ГрафикРемонтныхРабот,
		               |	ТаблицаНормативов.НормативныйРемонт,
		               |	ТаблицаНормативов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
		               |	ТаблицаНормативов.НеУчитыватьПродолжительность,
		               |	ТаблицаНормативов.Продолжительность
		               |ПОМЕСТИТЬ ТаблицаНормативов
		               |ИЗ
		               |	&ТаблицаНормативов КАК ТаблицаНормативов
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаРемонтов.ДатаНач,
		               |	ТаблицаРемонтов.ДатаКон,
		               |	ТаблицаРемонтов.ВидРемонтныхРабот,
		               |	ТаблицаРемонтов.Замещен,
		               |	ТаблицаРемонтов.ДатаПредшествующего,
		               |	ТаблицаРемонтов.РассчитанПоПериодичности,
		               |	ТаблицаНормативов.ГрафикРемонтныхРабот,
		               |	ТаблицаНормативов.НормативныйРемонт,
		               |	ТаблицаНормативов.НеУчитыватьПриПланированииГрафикРаботыОборудования,
		               |	ТаблицаНормативов.НеУчитыватьПродолжительность,
		               |	ТаблицаНормативов.Продолжительность
		               |ПОМЕСТИТЬ ТаблицаСНормативами
		               |ИЗ
		               |	ТаблицаРемонтов КАК ТаблицаРемонтов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНормативов КАК ТаблицаНормативов
		               |		ПО ТаблицаРемонтов.ВидРемонтныхРабот = ТаблицаНормативов.ВидРемонта
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ТаблицаСНормативами.ДатаНач,
		               |	ТаблицаСНормативами.ДатаКон,
		               |	ТаблицаСНормативами.ВидРемонтныхРабот,
		               |	ТаблицаСНормативами.Замещен,
		               |	ТаблицаСНормативами.ДатаПредшествующего,
		               |	ТаблицаСНормативами.РассчитанПоПериодичности,
		               |	ТаблицаСНормативами.ГрафикРемонтныхРабот,
		               |	ТаблицаСНормативами.НормативныйРемонт,
		               |	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРаботыОборудования,
		               |	ТаблицаСНормативами.НеУчитыватьПродолжительность,
		               |	ТаблицаСНормативами.Продолжительность
		               |ИЗ
		               |	ТаблицаСНормативами КАК ТаблицаСНормативами";
					   
		   Запрос.УстановитьПараметр("ТаблицаРемонтов",  ТаблицаРемонтовВизуализация);
		   Запрос.УстановитьПараметр("ТаблицаНормативов",ТаблицаНормативовМнемосхема);
		   
		   Результат = Запрос.Выполнить();
		   
		   ТЗРезультатаЗапроса =  Результат.Выгрузить();
		   
		   		   
		   // Выбрать самую минимальную дату дату начала
		   ТЗРезультатаЗапроса.Сортировать("ДатаНач Возр",);
		   ДатаПланированияНачало    = ТЗРезультатаЗапроса[0].ДатаНач;
		   
		   // Выбрать самую максимальную дату окончания
		   ТЗРезультатаЗапроса.Сортировать("ДатаКон Убыв",);
		   ДатаПланированияОкончание = ТЗРезультатаЗапроса[0].ДатаКон;

		   
		   ТЗРезультатаЗапроса.Свернуть("ГрафикРемонтныхРабот");
		   
		
		ИндексСтроки = 7;
				
		Если ТаблицаРемонтовВизуализация.Количество() > 0 Тогда
			ПоследнийРемонт = ТаблицаРемонтовВизуализация[ТаблицаРемонтовВизуализация.Количество() - 1];
			ДатаПоследнего = ТаблицаРемонтовВизуализация[0].ДатаНач;
			ОбщаяПродолжительность = ПоследнийРемонт.ДатаНач - ДатаПоследнего;
			
			
			Если ОбщаяПродолжительность = 0 Тогда
				ОбщаяПродолжительность = 1;
			КонецЕсли;
		КонецЕсли;
		
		
		ТаблицаШагов = Новый ТаблицаЗначений;
		Если ТаблицаШагов.Колонки.Найти("Шаг") = Неопределено Тогда
			ТаблицаШагов.Колонки.Добавить("Шаг");
		КонецЕсли;
		
		Для Каждого СтрокаРемонта Из ТаблицаРемонтовВизуализация Цикл
			СтрокаШаг = ТаблицаШагов.Добавить();
			СтрокаШаг.Шаг = (СтрокаРемонта.ДатаНач - СтрокаРемонта.ДатаПредшествующего) / ОбщаяПродолжительность;
			Если СтрокаШаг.Шаг = 0 Тогда 
				ТаблицаШагов.Удалить(СтрокаШаг);
			КонецЕсли;
		КонецЦикла;
		ТаблицаШагов.Сортировать("Шаг Возр");
		Если ТаблицаШагов.Количество() > 0 Тогда
			МинШаг = ТаблицаШагов[0].Шаг;
		КонецЕсли;
		
КонецФункции

&НаСервере
Функция ПроверкаПередСохранением()
	
	МассивИменПолейДляПроверки = Новый Массив;
	
	РезультатПроверкиДерева = ВсеПоляДереваЗаполнены();
	РезультатПроверкиТаблицДляМнемосхемы = ПроверитьЗаполненностьТаблицДляМнемосхемы();

	Возврат (РезультатПроверкиДерева И РезультатПроверкиТаблицДляМнемосхемы);
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьДанныеВСистемуДляВыбранныхЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДеревоСПометками = РезультатЗакрытия;
		
	Если ДеревоСПометками <> Неопределено Тогда
		ЗагрузитьДанныеВСистемуНаСервере(ДеревоСПометками);
		ИзменитьНомераКартинойСостоянийПослеСохранения(ДеревоСПометками);
	КонецЕсли;
	
	
	РазвернутьВсеВетвиДеревьев();

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеВСистемуНаСервере(ДеревоСПометками = Неопределено)
	
	
	ЗаполнитьТаблицуНормативовПередРасчетомНаСервере();
	
	ТаблицаНормативовОбъект = РеквизитФормыВЗначение("ТаблицаНормативов");
	
	ТаблицаСПометками = Новый ТаблицаЗначений;
	
	ТаблицаСПометками.Колонки.Добавить("ОбъектРемонта", Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта"));
	ТаблицаСПометками.Колонки.Добавить("ВидРемонта",    Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов"));
	ТаблицаСПометками.Колонки.Добавить("ТиповойОР",     Новый ОписаниеТипов("СправочникСсылка.торо_ТиповыеОР"));
	ТаблицаСПометками.Колонки.Добавить("РГ",            Новый ОписаниеТипов("Число"));
	ТаблицаСПометками.Колонки.Добавить("ОР",            Новый ОписаниеТипов("Число"));
	ТаблицаСПометками.Колонки.Добавить("Источник",      Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрокаДереваОР Из ДеревоСПометками.ПолучитьЭлементы() Цикл
		Для Каждого СтрокаДереваВР Из СтрокаДереваОР.ПолучитьЭлементы() Цикл
			НоваяСтрока = ТаблицаСПометками.Добавить();
			НоваяСтрока.ОбъектРемонта = СтрокаДереваВР.ПолучитьРодителя().Ремонты;
			НоваяСтрока.ВидРемонта = СтрокаДереваВР.Ремонты;
			НоваяСтрока.ТиповойОР = СтрокаДереваВР.ТиповойОР;
			НоваяСтрока.РГ = СтрокаДереваВР.РГ;
			НоваяСтрока.ОР = СтрокаДереваВР.ОР;
			НоваяСтрока.Источник = СтрокаДереваВР.Источник;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСПометками.ОбъектРемонта,
	               |	ТаблицаСПометками.ТиповойОР,
	               |	ТаблицаСПометками.ВидРемонта,
	               |	ТаблицаСПометками.РГ,
	               |	ТаблицаСПометками.ОР,
	               |	ТаблицаСПометками.Источник
	               |ПОМЕСТИТЬ ТаблицаСПометками
	               |ИЗ
	               |	&ТаблицаСПометками КАК ТаблицаСПометками
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
	               |	торо_НормативныеРемонтыОборудования.ГруппаОбъектовРемонтов,
	               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
	               |	торо_НормативныеРемонтыОборудования.СпособПланирования,
	               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.СпособВыполнения,
	               |	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
	               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
	               |	торо_НормативныеРемонтыОборудования.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПродолжительность,
	               |	торо_НормативныеРемонтыОборудования.ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	торо_НормативныеРемонтыОборудования.УчитыватьПростоиОборудования,
	               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
				   |	торо_НормативныеРемонтыОборудования.Приоритет
	               |ПОМЕСТИТЬ ТаблицаСНормативами
	               |ИЗ
	               |	&ТаблицаСНормативами КАК торо_НормативныеРемонтыОборудования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаСНормативами.ВидРемонта,
	               |	ТаблицаСНормативами.ГруппаОбъектовРемонтов,
	               |	ТаблицаСНормативами.НормативныйРемонт,
	               |	ТаблицаСНормативами.СпособПланирования,
	               |	ТаблицаСНормативами.ГрафикРемонтныхРабот,
	               |	ТаблицаСНормативами.СпособВыполнения,
	               |	ТаблицаСНормативами.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
	               |	ТаблицаСНормативами.СпособУчетаДатыОтсчета,
	               |	ТаблицаСНормативами.НеУчаствуетВПланировании,
	               |	ТаблицаСНормативами.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
	               |	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРаботыОборудования,
	               |	ТаблицаСНормативами.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
	               |	ТаблицаСНормативами.НеУчитыватьПродолжительность,
	               |	ТаблицаСНормативами.ИспользоватьКоэффициентыРемонтныхОсобенностей,
	               |	ТаблицаСНормативами.УчитыватьПростоиОборудования,
				   |	ТаблицаСНормативами.Приоритет,
	               |	ТаблицаСПометками.ТиповойОР,
	               |	ТаблицаСПометками.ОбъектРемонта,
	               |	ТаблицаСПометками.РГ,
	               |	ТаблицаСПометками.ОР,
	               |	ТаблицаСПометками.Источник,
	               |	ТаблицаСПометками.ВидРемонта КАК ВидРемонта1
	               |ИЗ
	               |	ТаблицаСПометками КАК ТаблицаСПометками
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСНормативами КАК ТаблицаСНормативами
	               |		ПО ТаблицаСПометками.ВидРемонта = ТаблицаСНормативами.ВидРемонта
	               |			И ТаблицаСПометками.ОбъектРемонта = ТаблицаСНормативами.ОбъектРемонта";

				   
	Запрос.УстановитьПараметр("ТаблицаСПометками",ТаблицаСПометками);
	Запрос.УстановитьПараметр("ТаблицаСНормативами",ТаблицаНормативовОбъект);
	Результат = Запрос.Выполнить();
	ТаблицаНормативовОбъект.Очистить();
	Если НЕ Результат.Пустой() Тогда
		
		ТаблицаНормативовОбъект = Результат.Выгрузить();
		
	КонецЕсли;
	
	ВидыРемонтныхРаботДляЗамещенияОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСПометками.ОбъектРемонта,
	               |	ТаблицаСПометками.ТиповойОР,
	               |	ТаблицаСПометками.ВидРемонта,
	               |	ТаблицаСПометками.РГ,
	               |	ТаблицаСПометками.ОР,
	               |	ТаблицаСПометками.Источник
	               |ПОМЕСТИТЬ ТаблицаСПометками
	               |ИЗ
	               |	&ТаблицаСПометками КАК ТаблицаСПометками
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ВидРемонта,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ГруппаОбъектовРемонтов,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ЗамещаемыйВидРемонта,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СпособЗамещения,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.НачальнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.КонечнаяГраница,
	               |	торо_ПараметрыЗамещенияПланированияРемонтныхРабот.ОбъектРемонта,
				   |	ИСТИНА КАК Приоритет
	               |ПОМЕСТИТЬ ПараметрыЗамещения
	               |ИЗ
	               |	&ВидыРемонтныхРаботДляЗамещенияОбъект КАК торо_ПараметрыЗамещенияПланированияРемонтныхРабот
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПараметрыЗамещения.ВидРемонта,
	               |	ПараметрыЗамещения.ГруппаОбъектовРемонтов,
	               |	ПараметрыЗамещения.ЗамещаемыйВидРемонта,
	               |	ПараметрыЗамещения.СпособЗамещения,
	               |	ПараметрыЗамещения.НачальнаяГраница,
	               |	ПараметрыЗамещения.КонечнаяГраница,
	               |	ПараметрыЗамещения.ОбъектРемонта,
				   |	ПараметрыЗамещения.Приоритет,
	               |	ТаблицаСПометками.РГ,
	               |	ТаблицаСПометками.ОР,
	               |	ТаблицаСПометками.Источник,
	               |	ТаблицаСПометками.ТиповойОР
	               |ИЗ
	               |	ТаблицаСПометками КАК ТаблицаСПометками
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыЗамещения КАК ПараметрыЗамещения
	               |		ПО ТаблицаСПометками.ВидРемонта = ПараметрыЗамещения.ВидРемонта
	               |			И ТаблицаСПометками.ОбъектРемонта = ПараметрыЗамещения.ОбъектРемонта";
				   
	Запрос.УстановитьПараметр("ТаблицаСПометками",ТаблицаСПометками);
	Запрос.УстановитьПараметр("ВидыРемонтныхРаботДляЗамещенияОбъект",ВидыРемонтныхРаботДляЗамещенияОбъект);
	Результат = Запрос.Выполнить();
	ВидыРемонтныхРаботДляЗамещенияОбъект.Очистить();
	Если НЕ Результат.Пустой() Тогда
		
		ВидыРемонтныхРаботДляЗамещенияОбъект = Результат.Выгрузить();
		
	КонецЕсли;
	
	ВидыРемонтныхРаботДляОтсчетаОбъект = РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаСПометками.ОбъектРемонта,
	               |	ТаблицаСПометками.ТиповойОР,
	               |	ТаблицаСПометками.ВидРемонта,
	               |	ТаблицаСПометками.РГ,
	               |	ТаблицаСПометками.ОР,
	               |	ТаблицаСПометками.Источник
	               |ПОМЕСТИТЬ ТаблицаСПометками
	               |ИЗ
	               |	&ТаблицаСПометками КАК ТаблицаСПометками
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ВидРемонта,
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ГруппаОбъектовРемонтов,
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ПредшествующийВидРемонта,
	               |	торо_ПредшествующиеНормативныеРемонтыОборудования.ОбъектРемонта,
				   |	ИСТИНА КАК Приоритет
	               |ПОМЕСТИТЬ ПредшествующиеРемонты
	               |ИЗ
	               |	&ВидыРемонтныхРаботДляОтсчетаОбъект КАК торо_ПредшествующиеНормативныеРемонтыОборудования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПредшествующиеРемонты.ВидРемонта,
	               |	ПредшествующиеРемонты.ГруппаОбъектовРемонтов,
	               |	ПредшествующиеРемонты.ПредшествующийВидРемонта,
	               |	ПредшествующиеРемонты.ОбъектРемонта,
	               |	ТаблицаСПометками.РГ,
	               |	ТаблицаСПометками.ОР,
	               |	ТаблицаСПометками.Источник,
	               |	ТаблицаСПометками.ТиповойОР
	               |ИЗ
	               |	ТаблицаСПометками КАК ТаблицаСПометками
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредшествующиеРемонты КАК ПредшествующиеРемонты
	               |		ПО ТаблицаСПометками.ОбъектРемонта = ПредшествующиеРемонты.ОбъектРемонта
	               |			И ТаблицаСПометками.ВидРемонта = ПредшествующиеРемонты.ВидРемонта";
				   
	Запрос.УстановитьПараметр("ТаблицаСПометками",ТаблицаСПометками);
	Запрос.УстановитьПараметр("ВидыРемонтныхРаботДляОтсчетаОбъект",ВидыРемонтныхРаботДляОтсчетаОбъект);
	Результат = Запрос.Выполнить();
	ВидыРемонтныхРаботДляОтсчетаОбъект.Очистить();
	Если НЕ Результат.Пустой() Тогда
		
		ВидыРемонтныхРаботДляОтсчетаОбъект = Результат.Выгрузить();
		
	КонецЕсли;

 	НачатьТранзакцию();
	ОшибкаТранзакции = Ложь;
	ТекстОшибки      = "";
	Попытка
		// Запись нормативов
		Для Каждого СтрокаТаблицыНормативов Из ТаблицаНормативовОбъект Цикл
			
			МенеджерЗаписи  = РегистрыСведений.торо_НормативныеРемонтыОборудования.СоздатьМенеджерЗаписи();
			
			Если СтрокаТаблицыНормативов.Источник = "ТиповойОР" Тогда
				
				Если СтрокаТаблицыНормативов.РГ = 1 Тогда
					МенеджерЗаписи.ВидРемонта = СтрокаТаблицыНормативов.ВидРемонта;
					МенеджерЗаписи.ТиповойОР  = СтрокаТаблицыНормативов.ТиповойОР;
					МенеджерЗаписи.Прочитать();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаТаблицыНормативов);
					
				Иначе
					
					МенеджерЗаписи.ВидРемонта = СтрокаТаблицыНормативов.ВидРемонта;
					МенеджерЗаписи.ТиповойОР  = СтрокаТаблицыНормативов.ТиповойОР;
					МенеджерЗаписи.Прочитать();
					МенеджерЗаписи.Приоритет = Ложь;
					МенеджерЗаписи.Записать();
					
					МенеджерЗаписи  = РегистрыСведений.торо_НормативныеРемонтыОборудования.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаТаблицыНормативов);
					МенеджерЗаписи.ТиповойОР = Справочники.торо_ТиповыеОР.ПустаяСсылка();
				КонецЕсли;
				
			ИначеЕсли СтрокаТаблицыНормативов.Источник = "ОбъектРемонта" Тогда
				Если СтрокаТаблицыНормативов.ОР = 1 И СтрокаТаблицыНормативов.РГ = 1 Тогда
					
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаТаблицыНормативов);
					МенеджерЗаписи.ТиповойОР = СтрокаТаблицыНормативов.ТиповойОР;
					
				ИначеЕсли СтрокаТаблицыНормативов.ОР = 0 Тогда
					
					МенеджерЗаписи.ВидРемонта    = СтрокаТаблицыНормативов.ВидРемонта;
					МенеджерЗаписи.ОбъектРемонта = СтрокаТаблицыНормативов.ГруппаОбъектовРемонтов;
					МенеджерЗаписи.Прочитать();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаТаблицыНормативов);
					МенеджерЗаписи.ТиповойОР = СтрокаТаблицыНормативов.ТиповойОР;
					
				Иначе
					МенеджерЗаписи.ВидРемонта    = СтрокаТаблицыНормативов.ВидРемонта;
					МенеджерЗаписи.ОбъектРемонта = СтрокаТаблицыНормативов.ОбъектРемонта;
					МенеджерЗаписи.Прочитать();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаТаблицыНормативов);
				КонецЕсли;
			ИначеЕсли СтрокаТаблицыНормативов.Источник = "Обработка" Тогда
				
				Если СтрокаТаблицыНормативов.РГ = 1 Тогда
					
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаТаблицыНормативов);
					МенеджерЗаписи.ТиповойОР = СтрокаТаблицыНормативов.ТиповойОР;
					
				ИначеЕсли СтрокаТаблицыНормативов.ОР = 1 Тогда
					
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаТаблицыНормативов);
					МенеджерЗаписи.ОбъектРемонта = СтрокаТаблицыНормативов.ОбъектРемонта;
					
				Иначе
					
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
		// Запись параметров замещения
		Для Каждого СтрокаПараметраЗамещения Из ВидыРемонтныхРаботДляЗамещенияОбъект Цикл
			МенеджерЗаписи = РегистрыСведений.торо_ПараметрыЗамещенияПланированияРемонтныхРабот.СоздатьМенеджерЗаписи();
			
			Если СтрокаПараметраЗамещения.Источник = "ТиповойОР" Тогда
				Если СтрокаПараметраЗамещения.РГ = 1 Тогда
					МенеджерЗаписи.ВидРемонта = СтрокаПараметраЗамещения.ВидРемонта;
					МенеджерЗаписи.ТиповойОР  = СтрокаПараметраЗамещения.ТиповойОР;
					МенеджерЗаписи.Прочитать();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПараметраЗамещения);
				Иначе
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПараметраЗамещения);
					МенеджерЗаписи.ОбъектРемонта = СтрокаПараметраЗамещения.ОбъектРемонта;
				КонецЕсли;
			ИначеЕсли СтрокаПараметраЗамещения.Источник = "ОбъектРемонта" Тогда
				Если СтрокаПараметраЗамещения.ОР = 1 И СтрокаПараметраЗамещения.РГ = 1 Тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПараметраЗамещения);
					МенеджерЗаписи.ТиповойОР = СтрокаПараметраЗамещения.ТиповойОР;
				ИначеЕсли СтрокаПараметраЗамещения.ОР = 0 Тогда
					МенеджерЗаписи.ВидРемонта = СтрокаПараметраЗамещения.ВидРемонта;
					МенеджерЗаписи.ОбъектРемонта = СтрокаПараметраЗамещения.ОбъектРемонта;
					МенеджерЗаписи.Прочитать();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПараметраЗамещения);
					МенеджерЗаписи.ТиповойОР = СтрокаПараметраЗамещения.ТиповойОР;
				Иначе
					МенеджерЗаписи.ВидРемонта = СтрокаПараметраЗамещения.ВидРемонта;
					МенеджерЗаписи.ОбъектРемонта = СтрокаПараметраЗамещения.ОбъектРемонта;
					МенеджерЗаписи.Прочитать();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПараметраЗамещения);
				КонецЕсли;
			ИначеЕсли СтрокаПараметраЗамещения.Источник = "Обработка" Тогда
				Если СтрокаПараметраЗамещения.РГ = 1 Тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПараметраЗамещения);
					МенеджерЗаписи.ТиповойОР = СтрокаПараметраЗамещения.ТиповойОР;
				ИначеЕсли СтрокаПараметраЗамещения.ОР = 1 Тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПараметраЗамещения);
					МенеджерЗаписи.ОбъектРемонта = СтрокаПараметраЗамещения.ОбъектРемонта;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
		// Запись предшествующих ремонтов
		Для Каждого СтрокаПредшествующегоРемонта Из ВидыРемонтныхРаботДляОтсчетаОбъект Цикл
			МенеджерЗаписи = РегистрыСведений.торо_ПредшествующиеНормативныеРемонтыОборудования.СоздатьМенеджерЗаписи();
		
			Если СтрокаПредшествующегоРемонта.Источник = "ТиповойОР" Тогда
				Если СтрокаПредшествующегоРемонта.РГ = 1 Тогда
					МенеджерЗаписи.ВидРемонта = СтрокаПредшествующегоРемонта.ВидРемонта;
					МенеджерЗаписи.ТиповойОР = СтрокаПредшествующегоРемонта.ТиповойОР;
					МенеджерЗаписи.Прочитать();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПредшествующегоРемонта);
				Иначе
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПредшествующегоРемонта);
					МенеджерЗаписи.ОбъектРемонта = СтрокаПредшествующегоРемонта.ОбъектРемонта;
				КонецЕсли;
			ИначеЕсли СтрокаПредшествующегоРемонта.Источник = "ОбъектРемонта" Тогда
				Если СтрокаПредшествующегоРемонта.ОР = 1 И СтрокаПредшествующегоРемонта.РГ = 1 Тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПредшествующегоРемонта);
					МенеджерЗаписи.ТиповойОР = СтрокаПредшествующегоРемонта.ТиповойОР;
				ИначеЕсли СтрокаПредшествующегоРемонта.ОР = 0 Тогда
					МенеджерЗаписи.ВидРемонта = СтрокаПредшествующегоРемонта.ВидРемонта;
					МенеджерЗаписи.ОбъектРемонта = СтрокаПредшествующегоРемонта.ОбъектРемонта;
					МенеджерЗаписи.Прочитать();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПредшествующегоРемонта);
					МенеджерЗаписи.ТиповойОР = СтрокаПредшествующегоРемонта.ТиповойОР;
				Иначе
					МенеджерЗаписи.ВидРемонта = СтрокаПредшествующегоРемонта.ВидРемонта;
					МенеджерЗаписи.ОбъектРемонта = СтрокаПредшествующегоРемонта.ОбъектРемонта;
					МенеджерЗаписи.Прочитать();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПредшествующегоРемонта);
				КонецЕсли;
			ИначеЕсли СтрокаПредшествующегоРемонта.Источник = "Обработка" Тогда
				Если СтрокаПредшествующегоРемонта.РГ = 1 Тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПредшествующегоРемонта);
					МенеджерЗаписи.ТиповойОР = СтрокаПредшествующегоРемонта.ТиповойОР;
				ИначеЕсли СтрокаПредшествующегоРемонта.ОР = 1 Тогда
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи,СтрокаПредшествующегоРемонта);
					МенеджерЗаписи.ОбъектРемонта = СтрокаПредшествующегоРемонта.ОбъектРемонта;
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			МенеджерЗаписи.Записать(Истина);
		КонецЦикла;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ОшибкаТранзакции = Истина;
	КонецПопытки;
	
	Если ОшибкаТранзакции Тогда
		ОтменитьТранзакцию();
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сохранение не выполнено.'") + ТекстОшибки);
	Иначе
		ЗафиксироватьТранзакцию();
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сохранение выполнено.'"));
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеВСистемуДляВсехЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДеревоСПометками = РезультатЗакрытия;
	
	Если ДеревоСПометками <> Неопределено Тогда
		ЗагрузитьДанныеВСистемуНаСервере(ДеревоСПометками);
		ИзменитьНомераКартинойСостоянийПослеСохранения(ДеревоСПометками);
	КонецЕсли;
	
	РазвернутьВсеВетвиДеревьев();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыДляВыбранныхЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    МассивИндексов = ДополнительныеПараметры.МассивИндексов;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат
    КонецЕсли;
    
    ЗагрузитьДанныеИзСистемыДляВыбранныхФрагмент(МассивИндексов, Ответ);

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеИзСистемыДляВыбранныхФрагмент(Знач МассивИндексов, Знач Ответ)
    
    Перем ЗамещатьНормативы;
    
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗамещатьНормативы = Истина;
    Иначе
        ЗамещатьНормативы = Ложь;
    КонецЕсли;
    
    ЗаполнитьНормативыИзСистемы(,МассивИндексов,,ЗамещатьНормативы);	
    РазвернутьВсеВетвиДеревьев();

КонецПроцедуры

&НаСервере
Процедура ЗаписатьЭлементСтрокуДереваВТаблицуЗначений(ТаблицаОР, Строка)
	
	Если ТипЗнч(Строка.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
		СтруктураОтбора = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот",Строка.ПолучитьРодителя().Ремонты,Строка.Ремонты);
		МассивНайденныхСтрок = ТаблицаОР.НайтиСтроки(СтруктураОтбора);
		Если НЕ ЗначениеЗаполнено(МассивНайденныхСтрок) Тогда
			НоваяСтрокаТЗ = ТаблицаОР.Добавить();
			НоваяСтрокаТЗ.ВидРемонтныхРабот    = Строка.Ремонты;
			НоваяСтрокаТЗ.ОбъектРемонтныхРабот = Строка.ПолучитьРодителя().Ремонты;
		КонецЕсли;
	Иначе
		Для Каждого СтрокаДЗ Из Строка.ПолучитьЭлементы() Цикл
			ЗаписатьЭлементСтрокуДереваВТаблицуЗначений(ТаблицаОР, СтрокаДЗ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДеревоРемонтовНормативыПередУдалениемНаСервере(МассивВыделенныхСтрок)
	
	ФактическаяНаработкаОбъект 				= РеквизитФормыВЗначение("ФактическаяНаработка");
	ПлановаяНаработкаОбъект 				= РеквизитФормыВЗначение("ПлановаяНаработка");

	ВидыРемонтныхРаботДляЗамещенияОбъект 	= РеквизитФормыВЗначение("ВидыРемонтныхРаботДляЗамещения");
	ВидыРемонтныхРаботДляОтсчетаОбъект		= РеквизитФормыВЗначение("ВидыРемонтныхРаботДляОтсчета");
	ПлановыеРемонтныеРаботыОбъект 		 	= РеквизитФормыВЗначение("ПлановыеРемонтныеРаботы");
	ЗавершенныеРемонтныеРаботыОбъект 		= РеквизитФормыВЗначение("ЗавершенныеРемонтныеРаботы");
	ТаблицаНормативовОбъект 				= РеквизитФормыВЗначение("ТаблицаНормативов");

	МассивСтрокДереваКУдалению = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из МассивВыделенныхСтрок Цикл
		СтрокаДерева = ДеревоРемонтов.НайтиПоИдентификатору(ИдентификаторСтроки);
		ДобавитьПодчиненныеСтрокиВМассив(СтрокаДерева, МассивСтрокДереваКУдалению);
	КонецЦикла;
	
 	Для Каждого СтрокаДереваУдаляемая Из МассивСтрокДереваКУдалению Цикл
		
		Если ТипЗнч(СтрокаДереваУдаляемая.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
			СтруктураОтбора = Новый Структура("ОбъектРемонта",СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ПлановаяНаработкаОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ПлановаяНаработкаОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			МассивСтрокКУдалению = ФактическаяНаработкаОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ФактическаяНаработкаОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(СтрокаДереваУдаляемая.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			
			СтруктураОтбора = Новый Структура("ОбъектРемонта, ВидРемонта",СтрокаДереваУдаляемая.ПолучитьРодителя().Ремонты,СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ВидыРемонтныхРаботДляЗамещенияОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ВидыРемонтныхРаботДляЗамещенияОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			МассивСтрокКУдалению = ВидыРемонтныхРаботДляОтсчетаОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ВидыРемонтныхРаботДляОтсчетаОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ОбъектРемонтныхРабот, ВидРемонтныхРабот",СтрокаДереваУдаляемая.ПолучитьРодителя().Ремонты,СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ПлановыеРемонтныеРаботыОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ПлановыеРемонтныеРаботыОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ОбъектРемонта, ВидРемонтныхРабот",СтрокаДереваУдаляемая.ПолучитьРодителя().Ремонты,СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ЗавершенныеРемонтныеРаботыОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ЗавершенныеРемонтныеРаботыОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ОбъектРемонта, ВидРемонта",СтрокаДереваУдаляемая.ПолучитьРодителя().Ремонты,СтрокаДереваУдаляемая.Ремонты);
			
			МассивСтрокКУдалению = ТаблицаНормативовОбъект.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из МассивСтрокКУдалению Цикл
				ТаблицаНормативовОбъект.Удалить(СтрокаКУдалению);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗначениеВРеквизитФормы(ФактическаяНаработкаОбъект, "ФактическаяНаработка");
	ЗначениеВРеквизитФормы(ПлановаяНаработкаОбъект, "ПлановаяНаработка");
	ЗначениеВРеквизитФормы(ВидыРемонтныхРаботДляЗамещенияОбъект, "ВидыРемонтныхРаботДляЗамещения");
	ЗначениеВРеквизитФормы(ВидыРемонтныхРаботДляОтсчетаОбъект, "ВидыРемонтныхРаботДляОтсчета");
	ЗначениеВРеквизитФормы(ПлановыеРемонтныеРаботыОбъект, "ПлановыеРемонтныеРаботы");
	ЗначениеВРеквизитФормы(ЗавершенныеРемонтныеРаботыОбъект,"ЗавершенныеРемонтныеРаботы");
	ЗначениеВРеквизитФормы(ТаблицаНормативовОбъект,"ТаблицаНормативов");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеСтрокиВМассив(СтрокаДерева, МассивСтрокДереваКУдалению)
	
	Если МассивСтрокДереваКУдалению.Найти(СтрокаДерева) = Неопределено Тогда
		МассивСтрокДереваКУдалению.Добавить(СтрокаДерева);
	КонецЕсли;
	Для Каждого Строка из СтрокаДерева.ПолучитьЭлементы() Цикл
		ДобавитьПодчиненныеСтрокиВМассив(Строка, МассивСтрокДереваКУдалению);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтрокиДерева()
	
	
	Если ТипЗнч(Элементы.ДеревоРемонтовНормативы.ТекущиеДанные.Ремонты) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
		Для Каждого СтрокаДерева Из Элементы.ДеревоРемонтовНормативы.ТекущиеДанные.ПолучитьЭлементы() Цикл
			ТекущиеДанные = СтрокаДерева;
			СтруктураОтбора = Новый Структура("ВидРемонта,ОбъектРемонта", ТекущиеДанные.Ремонты, ТекущиеДанные.ПолучитьРодителя().Ремонты);
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НормативныйРемонт)
				ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособПланирования)
				ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ГрафикРемонтныхРабот)
				ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособВыполнения)
				ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособУчетаДатыОтсчета) 
				ИЛИ НЕ ЗначениеЗаполнено(ВидыРемонтныхРаботДляОтсчета.НайтиСтроки(СтруктураОтбора)) Тогда
				СтрокаЗаполнена = Ложь;
			Иначе
				СтрокаЗаполнена = Истина;
			КонецЕсли;

			Если СтрокаЗаполнена Тогда
				Если ТекущиеДанные.Источник = "ОбъектРемонта" Тогда
					ТекущиеДанные.НомерКартинкиСостояний = 3;
				ИначеЕсли ТекущиеДанные.Источник = "ТиповойОР" Тогда
					ТекущиеДанные.НомерКартинкиСостояний = 5;
				Иначе
					ТекущиеДанные.НомерКартинкиСостояний = 1;
				КонецЕсли;
			Иначе
				Если ТекущиеДанные.Источник = "ОбъектРемонта" Тогда
					ТекущиеДанные.НомерКартинкиСостояний = 4;
				ИначеЕсли ТекущиеДанные.Источник = "ТиповойОР" Тогда
					ТекущиеДанные.НомерКартинкиСостояний = 6;
				Иначе
					ТекущиеДанные.НомерКартинкиСостояний = 2;
				КонецЕсли;
		 	КонецЕсли;
		КонецЦикла;	
	Иначе
		
		ТекущиеДанные = Элементы.ДеревоРемонтовНормативы.ТекущиеДанные;
		СтруктураОтбора = Новый Структура("ВидРемонта,ОбъектРемонта", ТекущиеДанные.Ремонты, ТекущиеДанные.ПолучитьРодителя().Ремонты);
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.НормативныйРемонт)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособПланирования)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ГрафикРемонтныхРабот)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособВыполнения)
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.СпособУчетаДатыОтсчета) 
			ИЛИ НЕ ЗначениеЗаполнено(ВидыРемонтныхРаботДляОтсчета.НайтиСтроки(СтруктураОтбора)) Тогда
			СтрокаЗаполнена = Ложь;
		Иначе
			СтрокаЗаполнена = Истина;
		КонецЕсли;

		Если СтрокаЗаполнена Тогда
			Если ТекущиеДанные.Источник = "ОбъектРемонта" Тогда
				ТекущиеДанные.НомерКартинкиСостояний = 3;
			ИначеЕсли ТекущиеДанные.Источник = "ТиповойОР" Тогда
				ТекущиеДанные.НомерКартинкиСостояний = 5;
			Иначе
				ТекущиеДанные.НомерКартинкиСостояний = 1;
			КонецЕсли;
		Иначе
			Если ТекущиеДанные.Источник = "ОбъектРемонта" Тогда
				ТекущиеДанные.НомерКартинкиСостояний = 4;
			ИначеЕсли ТекущиеДанные.Источник = "ТиповойОР" Тогда
				ТекущиеДанные.НомерКартинкиСостояний = 6;
			Иначе
				ТекущиеДанные.НомерКартинкиСостояний = 2;
			КонецЕсли;
	 	КонецЕсли;
			
	КонецЕсли;

 
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРезультатДляППРЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
    
    
    Элементы.Закладки.ТекущаяСтраница = Элементы.ЗакладкаДеревоРемонтов;
    Элементы.ДеревоРемонтовПланГрафикППР.ТекущаяСтрока = ТекущаяСтрока;

КонецПроцедуры

&НаСервере
Функция ПроверкаПередРасчетомМнемосхемы(ДатаПланирования, НужныеРемонты)
	ДатаПланированияОкончание = РассчитатьДатуОкончанияПланированияДляМнемосхемы(ТекущаяДата());
	
	Если ДатаПланированияОкончание = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Переменная = ДатаПланирования;
	НужныеГода = Новый ТаблицаЗначений;
	ТипГодГрафика = Новый Массив;
	ТипГодГрафика.Добавить(Тип("Число"));
	НужныеГода.Колонки.Добавить("ГодГрафика",Новый ОписаниеТипов(ТипГодГрафика), "ГодГрафика");
	Пока Переменная < ДатаПланированияОкончание Цикл
		НоваяСтрока = НужныеГода.Добавить();
		НоваяСтрока.ГодГрафика = ГОД(Переменная);
		Переменная = ДобавитьМесяц(Переменная,12);
	КонецЦикла;
	Если НужныеГода.Найти(ГОД(ДатаПланированияОкончание)) = Неопределено Тогда 
		НоваяСтрока = НужныеГода.Добавить();
		НоваяСтрока.ГодГрафика = ГОД(ДатаПланированияОкончание);
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполненностьГрафика(ДатаПланирования,ДатаПланированияОкончание,НужныеГода, НужныеРемонты) Тогда
		Возврат Ложь;
	Иначе Возврат Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПроверитьЗаполненностьГрафика(ДатаПланированияНачало, ДатаПланированияОкончание, НужныеГода, НужныеРемонты)
	
	ГрафикЗаполнен = Истина;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот
	               |ПОМЕСТИТЬ ТабГрафиков
	               |ИЗ
	               |	&ТаблицаНормативов КАК торо_НормативныеРемонтыОборудования
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабГрафиков.ГрафикРемонтныхРабот
	               |ИЗ
	               |	ТабГрафиков КАК ТабГрафиков";
				   
	Запрос.УстановитьПараметр("ТаблицаНормативов", РеквизитФормыВЗначение("ТаблицаНормативов"));
	
	Результат = Запрос.Выполнить();
	МассивГрафиков = Результат.Выгрузить().ВыгрузитьКолонку("ГрафикРемонтныхРабот");
	
	КалендарныеГрафики.СоздатьВТРасписанияРаботыНаПериод(МенеджерВТ, МассивГрафиков, НачалоДня(ДатаПланированияНачало), ДатаПланированияОкончание);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НужныеГода.ГодГрафика
	               |ПОМЕСТИТЬ НужныеГода
	               |ИЗ
	               |	&НужныеГода КАК НужныеГода
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТабГрафиков.ГрафикРемонтныхРабот,
	               |	НужныеГода.ГодГрафика
	               |ПОМЕСТИТЬ ВремТабл
	               |ИЗ
	               |	ТабГрафиков КАК ТабГрафиков,
	               |	НужныеГода КАК НужныеГода
	               |;

				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВТРасписанияРаботы.ГрафикРаботы,
				   |	ГОД(ВТРасписанияРаботы.ДатаГрафика) КАК ГодГрафика,
				   |	СУММА(РАЗНОСТЬДАТ(ВТРасписанияРаботы.ВремяНачала, ВТРасписанияРаботы.ВремяОкончания, СЕКУНДА)) КАК ОсновноеЗначение
				   |ПОМЕСТИТЬ ВТРасписанияРаботыИзм
				   |ИЗ
				   |	ВТРасписанияРаботы КАК ВТРасписанияРаботы
				   |
				   |СГРУППИРОВАТЬ ПО
				   |	ВТРасписанияРаботы.ГрафикРаботы,
				   |	ГОД(ВТРасписанияРаботы.ДатаГрафика)
				   |;
				   |
				   |////////////////////////////////////////////////////////////////////////////////
				   |ВЫБРАТЬ
				   |	ВремТабл.ГрафикРемонтныхРабот КАК ГрафикРаботы,
				   |	ВремТабл.ГодГрафика,
				   |	ЕСТЬNULL(ВТРасписанияРаботыИзм.ОсновноеЗначение, 0) КАК ОсновноеЗначение
				   |ИЗ
				   |	ВремТабл КАК ВремТабл
				   |		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписанияРаботыИзм КАК ВТРасписанияРаботыИзм
				   |		ПО ВремТабл.ГодГрафика = ВТРасписанияРаботыИзм.ГодГрафика
				   |			И ВремТабл.ГрафикРемонтныхРабот = ВТРасписанияРаботыИзм.ГрафикРаботы";
	
	Запрос.УстановитьПараметр("НужныеГода", НужныеГода);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ОсновноеЗначение = 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнен график %1 за %2 год"),Выборка.ГрафикРемонтныхРабот,Выборка.ГодГрафика));
			ГрафикЗаполнен = Ложь;
     	КонецЕсли;
	КонецЦикла;
	
	Возврат ГрафикЗаполнен;

КонецФункции

&НаСервере
Функция РассчитатьДатуОкончанияПланированияДляМнемосхемы(ДатаПланирования)
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
				   |	ТаблицаСНормативами.ВидРемонта,
	               |	ТаблицаСНормативами.СпособПланирования,
				   |	ТаблицаСНормативами.ОбъектРемонта
	               |ПОМЕСТИТЬ торо_НормативныеРемонтыОборудования
	               |ИЗ
	               |	&ТаблицаСНормативами КАК ТаблицаСНормативами
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ ПЕРВЫЕ 1
	               |	торо_НормативныеРемонтыОборудования.СпособПланирования.ПериодичностьРемонтныхРабот КАК ПериодичностьРемонтныхРабот,
	               |	торо_НормативныеРемонтыОборудования.СпособПланирования.КоличествоПериодов          КАК КоличествоПериодов
	               |ИЗ
	               |	торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
	               |ГДЕ
	               |	торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
	               |	И торо_НормативныеРемонтыОборудования.ОбъектРемонта = &Ссылка"; 
				   
	Запрос.УстановитьПараметр("Ссылка", ОРМнемосхема.Ссылка);
	Запрос.УстановитьПараметр("ВидРемонта", ВРНачалоЦикла);
	Запрос.УстановитьПараметр("ТаблицаСНормативами",РеквизитФормыВЗначение("ТаблицаНормативов"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Периодичность = Выборка.ПериодичностьРемонтныхРабот;
		КолПериодов = Выборка.КоличествоПериодов;
	КонецЕсли;
	
	
	
	
	Если Не ЗначениеЗаполнено(Периодичность) Или Не ЗначениеЗаполнено(КолПериодов) Тогда
		
		Если Истина Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	торо_ПараметрыНаработкиОбъектовРемонта.Период,
			               |	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта,
			               |	торо_ПараметрыНаработкиОбъектовРемонта.Показатель,
			               |	торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка,
			               |	торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки,
			               |	торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки,
			               |	торо_ПараметрыНаработкиОбъектовРемонта.КоэффициентИспользованияОборудования
			               |ПОМЕСТИТЬ торо_ПараметрыНаработкиОбъектовРемонта
			               |ИЗ
			               |	&ПлановаяНаработка КАК торо_ПараметрыНаработкиОбъектовРемонта
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
			               |	торо_НормативныеРемонтыОборудования.ГруппаОбъектовРемонтов,
			               |	торо_НормативныеРемонтыОборудования.НормативныйРемонт,
			               |	торо_НормативныеРемонтыОборудования.СпособПланирования,
			               |	торо_НормативныеРемонтыОборудования.ГрафикРемонтныхРабот,
			               |	торо_НормативныеРемонтыОборудования.СпособВыполнения,
			               |	торо_НормативныеРемонтыОборудования.НеИспользоватьВПланированииДатуВводаВЭксплуатацию,
			               |	торо_НормативныеРемонтыОборудования.СпособУчетаДатыОтсчета,
			               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
			               |	торо_НормативныеРемонтыОборудования.РазрешитьСокращатьМежремонтныйПериодПриПланировании,
			               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРаботыОборудования,
			               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПриПланированииГрафикРемонтныхРабот,
			               |	торо_НормативныеРемонтыОборудования.НеУчитыватьПродолжительность,
			               |	торо_НормативныеРемонтыОборудования.ИспользоватьКоэффициентыРемонтныхОсобенностей,
			               |	торо_НормативныеРемонтыОборудования.УчитыватьПростоиОборудования
			               |ПОМЕСТИТЬ торо_НормативныеРемонтыОборудования
			               |ИЗ
			               |	&ТаблицаСНормативами КАК торо_НормативныеРемонтыОборудования
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	МАКСИМУМ(ВЫБОР
			               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.День)
			               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки
			               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
			               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 7
			               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
			               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 10
			               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
			               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 30
			               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
			               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 90
			               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
			               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 183
			               |			КОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПериодПлановойНаработки = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
			               |				ТОГДА торо_ПараметрыНаработкиОбъектовРемонта.ПлановаяНаработка / торо_ПараметрыНаработкиОбъектовРемонта.ПродолжительностьПериодаПлановойНаработки / 365
			               |		КОНЕЦ) КАК МаксНаработкаВДень
			               |ПОМЕСТИТЬ НаработкаВДень
			               |ИЗ
			               |	торо_ПараметрыНаработкиОбъектовРемонта КАК торо_ПараметрыНаработкиОбъектовРемонта
			               |ГДЕ
			               |	торо_ПараметрыНаработкиОбъектовРемонта.ОбъектРемонта = &Ссылка
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ГрафикиРаботыПоСменам.Дата) КАК Дата
			               |ПОМЕСТИТЬ КоличествоДнейВМесяце
			               |ИЗ
			               |	РегистрСведений.ГрафикиРаботыПоСменам КАК ГрафикиРаботыПоСменам
			               |ГДЕ
			               |	ГрафикиРаботыПоСменам.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ТекущаяДата, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ТекущаяДата, МЕСЯЦ)
			               |	И ГрафикиРаботыПоСменам.ГрафикРаботы = &График
			               |	И ГрафикиРаботыПоСменам.Часы > 0
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.ЗначениеПараметраНаработки,
			               |	ВЫБОР
			               |		КОГДА ТИПЗНАЧЕНИЯ(торо_НормативныеРемонтыОборудования.ГруппаОбъектовРемонтов) = ТИП(Справочник.торо_ТиповойОР)
			               |			ТОГДА 1
			               |		ИНАЧЕ 0
			               |	КОНЕЦ КАК Приоретет
			               |ПОМЕСТИТЬ ПараметрыНаработки
			               |ИЗ
			               |	Справочник.торо_СпособыПланированияРемонтныхРабот.ПараметрыНаработки КАК торо_СпособыПланированияРемонтныхРаботПараметрыНаработки
			               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			               |		ПО торо_СпособыПланированияРемонтныхРаботПараметрыНаработки.Ссылка = торо_НормативныеРемонтыОборудования.СпособПланирования
			               |ГДЕ
			               |	торо_НормативныеРемонтыОборудования.ВидРемонта = &ВидРемонта
			               |	И (торо_НормативныеРемонтыОборудования.ГруппаОбъектовРемонтов = &Ссылка
			               |			ИЛИ торо_НормативныеРемонтыОборудования.ГруппаОбъектовРемонтов = &РемГруппа)
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ПараметрыНаработки.ЗначениеПараметраНаработки,
			               |	МИНИМУМ(ПараметрыНаработки.Приоретет) КАК Приоретет
			               |ПОМЕСТИТЬ ПараметрНаработки
			               |ИЗ
			               |	ПараметрыНаработки КАК ПараметрыНаработки
			               |
			               |СГРУППИРОВАТЬ ПО
			               |	ПараметрыНаработки.ЗначениеПараметраНаработки
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ПараметрНаработки.ЗначениеПараметраНаработки / НаработкаВДень.МаксНаработкаВДень / КоличествоДнейВМесяце.Дата КАК МесяцевНаработки
			               |ИЗ
			               |	ПараметрНаработки КАК ПараметрНаработки,
			               |	КоличествоДнейВМесяце КАК КоличествоДнейВМесяце,
			               |	НаработкаВДень КАК НаработкаВДень";
			
			Запрос.УстановитьПараметр("Ссылка", ОРМнемосхема);
			Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
			Запрос.УстановитьПараметр("График", ОРМнемосхема.ПлановыйГрафикРаботы);
			Запрос.УстановитьПараметр("ВидРемонта", ВРНачалоЦикла);
			Запрос.УстановитьПараметр("РемГруппа",          ОРМнемосхема.ТиповойОР);
			Запрос.УстановитьПараметр("ПлановаяНаработка",  РеквизитФормыВЗначение("ПлановаяНаработка"));
			Запрос.УстановитьПараметр("ТаблицаСНормативами",РеквизитФормыВЗначение("ТаблицаНормативов"));
			
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				КолПериодов   = Цел(Выборка.МесяцевНаработки) + 1;
				Периодичность = Перечисления.Периодичность.Месяц;
			КонецЕсли;
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(&ДатаНачала, " + Строка(Периодичность) + ", " + ?(КолПериодов = 0, 1, КолПериодов)*2 + ") КАК ДатаОкончания";
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаПланирования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат НачалоДня(Выборка.ДатаОкончания)-1;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ИзменитьНомераКартинойСостоянийПослеСохранения(ДеревоСПометками)
	
	ДеревоСПометкамиОбъект = ДанныеФормыВЗначение(ДеревоСПометками, Тип("ДеревоЗначений"));
	ДеревоРемонтовОбъект = РеквизитФормыВЗначение("ДеревоРемонтов");
	СтруктураОтбора = Новый Структура("ОР", 1);
	МассивДляСохраненияВОР = ДеревоСПометкамиОбъект.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	СтруктураОтбора = Новый Структура("РГ", 1);
	МассивДляСохраненияВРГ = ДеревоСПометкамиОбъект.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
	Для Каждого СтрокаСохраняемаяВОР Из МассивДляСохраненияВОР Цикл
		Если ТипЗнч(СтрокаСохраняемаяВОР.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			СтрокаОРДереваРемонтов = ДеревоРемонтовОбъект.Строки.Найти(СтрокаСохраняемаяВОР.Родитель.Ремонты,,Истина);
			СтрокаВРДереваРемонтов = СтрокаОРДереваРемонтов.Строки.Найти(СтрокаСохраняемаяВОР.Ремонты);
			СтрокаВРДереваРемонтов.НомерКартинкиСостояний = 7;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаСохраняемаяВРГ Из МассивДляСохраненияВРГ Цикл
		Если ТипЗнч(СтрокаСохраняемаяВРГ.Ремонты) = Тип("СправочникСсылка.торо_ВидыРемонтов") Тогда
			СтрокаОРДереваРемонтов = ДеревоРемонтовОбъект.Строки.Найти(СтрокаСохраняемаяВРГ.Родитель.Ремонты,,Истина);
			СтрокаВРДереваРемонтов = СтрокаОРДереваРемонтов.Строки.Найти(СтрокаСохраняемаяВРГ.Ремонты);
			СтрокаВРДереваРемонтов.НомерКартинкиСостояний = 8;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоРемонтовОбъект,"ДеревоРемонтов");
	
КонецПроцедуры

#КонецОбласти
