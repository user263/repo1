////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем СоответствиеРеквизитов;

&НаКлиенте
Перем ИзмененыЗначенияФО;

&НаКлиенте
Перем ПроверятьАктивныхПользователей;

&НаСервере
Перем СоответствиеРеквизитов;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИерархияДляНовыхОР = НаборКонстант.торо_ИерархияДляВводаНовыхОР;
	
	УстановитьДоступностьЭлементов();
	
	ЗаполнитьСписокВидовДокументов();
	
	ЗаполнитьТЗДокументовДляСогласования("СогласованиеДокументовРемонтов"   , Ложь);
	ЗаполнитьТЗДокументовДляСогласования("СогласованиеДокументовМероприятий", Истина);// регламентный
	ЗаполнитьТЗСпособовСогласования();
	ЗаполнитьТЗНастройкиУведомлений();
	
	мМодифицированностьДокументыСогласованияРемонтов    = Ложь;
	мМодифицированностьДокументыСогласованияМероприятий = Ложь;
	мМодифицированностьСпособовСогласованияПоУмолчанию  = Ложь;
	
	// ЖЦ++
	Выборка = РегистрыСведений.торо_НастройкиДоступностиОбъектовРемонта.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НС = ТаблицаНастроекЖЦ.Добавить();
		ЗаполнитьЗначенияСвойств(НС,Выборка);
	КонецЦикла;
	
	ТаблицаНастроекЖЦ.Сортировать("НомерСтрокиТаб");	
	
	Если Не ТаблицаНастроекЖЦ.Количество() > 0 Тогда
		ЗаполнитьПоУмолчанию();
	КонецЕсли; 
	// ЖЦ--
	
	ФОИспользоватьРегламентныеМероприятия = НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
	ФОИспользоватьСогласование            = НаборКонстант.торо_ИспользоватьСогласование;
	ФОИспользоватьДокументыПринятияИСписанияОборудования = НаборКонстант.торо_ИспользоватьДокументыПринятияИСписанияОборудования;
	
	Элементы.СтраницаСогласование.Видимость = ФОИспользоватьСогласование;
	Элементы.СтраницаМероприятия.Видимость  = ФОИспользоватьРегламентныеМероприятия;
	Элементы.СтраницаЖизненныйЦикл.Видимость = ФОИспользоватьДокументыПринятияИСписанияОборудования;
	
	ЗаполнитьФлажкиИзРегистра();
	
	ВыбранПреодопределенныйСценарий = НаборКонстант.торо_ВыбранныйСценарийРаботы.Предопределенный;
	
	ЗаполнитьСоответствие(СоответствиеРеквизитов);
	
	// регламентные задания
	
	торо_РасчетППРРасписание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.торо_РасчетППР).Расписание;
	торо_ФормированиеПочтовыхУведомленийРасписание = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.торо_ФормированиеПочтовыхУведомлений).Расписание;
	
	ЗаполнитьПараметрыПредставленияДанных();
	
	СпособНастройкиБизнесПроцессов = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.торо_ПанельАдминистрированияТОиР", "СпособНастройкиБизнесПроцессов", "НастройкаЧерезГрафСхемы");
	
	// Если форма вызывается из Обработки "Помощник настройки программы" тогда должна быть видна только нужная страница.
	Ключ = Параметры.КлючНазначенияИспользования;
	Если ЛЕВ(Ключ, 8) = "Помощник" Тогда
		
		Для каждого Стр Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
			Если Стр <> Элементы.СтраницыНастроек.ПодчиненныеЭлементы[СРЕД(Ключ, 9, СтрДлина(Ключ))] Тогда
				Стр.Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Элементы.торо_ИспользоватьСинхронизациюСERP.Видимость = НаборКонстант.ИспользоватьСинхронизациюДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СпособНастройкиБизнесПроцессовПриИзменении(Элементы.СпособНастройкиБизнесПроцессов);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОБРАБОТКА_ВЫБОРА_СЦЕНАРИЯ" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Если Параметр.Свойство("Ссылка") Тогда
				НаборКонстант.торо_ВыбранныйСценарийРаботы = Параметр.Ссылка;
				НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Ложь;
			Иначе
				НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
			КонецЕсли;
			
			// заполнение функциональных опций
			Если Параметр.Свойство("МассивСтруктурЗначенийКонстант") Тогда
				МассивСтруктурЗначенийКонстант = Параметр.МассивСтруктурЗначенийКонстант;	
				
				Для Каждого ЭлементМассива ИЗ МассивСтруктурЗначенийКонстант Цикл
					Если НаборКонстант.Свойство(ЭлементМассива.Ключ) Тогда
						НаборКонстант[ЭлементМассива.Ключ] = ЭлементМассива.Значение;
					КонецЕсли;	
				КонецЦикла;
				
			КонецЕсли;
			
			// заполнение вводов на основании
			Если Параметр.Свойство("СоответствиеВводНаОсновании") Тогда
				СоответствиеВводНаОсновании    = Параметр.СоответствиеВводНаОсновании;
				Для каждого ЭлементСоответствия Из СоответствиеВводНаОсновании Цикл
					ИмяРеквизита = СоответствиеРеквизитов.Получить(ЭлементСоответствия.Ключ);
					Если Не ИмяРеквизита = Неопределено Тогда
						ЭтаФорма[ИмяРеквизита] = ЭлементСоответствия.Значение;
					КонецЕсли; 
					
				КонецЦикла; 		
			КонецЕсли;
		КонецЕсли;
		ЭтаФорма.Модифицированность = Истина;
		Если СпособНастройкиБизнесПроцессов = "НастройкаЧерезГрафСхемы" Тогда
			УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаДополнительно);
			УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
			УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаМероприятия);
			УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
			
			УстановитьВидимостьГрафическихСхемВводаНаОсновании();
		ИначеЕсли СпособНастройкиБизнесПроцессов = "НастройкаФлагами" Тогда
			УстановитьВидимостьФлаговВводаНаОсновании();
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НеобходимПерезапуск Тогда
		
		Если ПроверятьАктивныхПользователей И ИзмененыЗначенияФО И ПроверитьНаличиеАктивныхПользователей() Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Для сохранения настроек необходимо завершение сеансов всех пользователей!
				|Дождитесь пока все пользователи завершат работу с программой или завершите их сеансы с помощью специальной обработки.'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("АктивныеПользователи", НСтр("ru = 'Активные пользователи'"));
			Кнопки.Добавить("Отмена",НСтр("ru = 'Отмена'"));
			ПоказатьВопрос(Новый  ОписаниеОповещения("ЗавершениеПроверкиПередЗаписью",ЭтаФорма), ТекстСообщения, Кнопки);
		ИначеЕсли НЕ Перезапуск Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Для сохранения настроек необходим перезапуск программы!'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("Продолжить",НСтр("ru = 'Продолжить'"));
			Кнопки.Добавить("Отмена",НСтр("ru = 'Отмена'"));
			ПоказатьВопрос(Новый  ОписаниеОповещения("ЗавершениеПроверкиПередЗаписью",ЭтаФорма), ТекстСообщения, Кнопки);
		КонецЕсли;
		
	ИначеЕсли ПроверятьАктивныхПользователей И ИзмененыЗначенияФО И ПроверитьНаличиеАктивныхПользователей() Тогда
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'При изменении настроек функциональных опций могут возникать ошибки в работе других пользователей.
			|Рекомендуется завершить их работу перед сохранением.'");	
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить("АктивныеПользователи", НСтр("ru = 'Активные пользователи'"));
			Кнопки.Добавить("Продолжить",НСтр("ru = 'Продолжить'"));
			Кнопки.Добавить("Отмена",НСтр("ru = 'Отмена'"));
			ПоказатьВопрос(Новый  ОписаниеОповещения("ЗавершениеПроверкиПередЗаписью",ЭтаФорма), ТекстСообщения, Кнопки);
	КонецЕсли;
	
	Индекс = 0;
	СтруктураПоиска = Новый Структура("ВидДокумента, СобытиеПоДокументу, Событие");
	ШаблонСообщения = НСтр("ru='Дублирующаяся настройка напоминаний и уведомлений: ""%1"", ""%2"",""%3"".'");
	Для каждого СтрокаНастройкиУведомлений из НастройкаУведомлений Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаНастройкиУведомлений);
		НайденныеСтроки = НастройкаУведомлений.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 1 Тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаНастройкиУведомлений.ВидДокументаПредставление, СтрокаНастройкиУведомлений.Событие, СтрокаНастройкиУведомлений.СобытиеПоДокументу);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НастройкаУведомлений["+Индекс+"].ВидДокументаПредставление",,Отказ);
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если мМодифицированностьДокументыСогласованияРемонтов Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ВидыДокументовСогласования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регламентный.Использование = Истина;
		НаборЗаписей.Отбор.Регламентный.ВидСравнения  = ВидСравнения.Равно;
		НаборЗаписей.Отбор.Регламентный.Значение      = Ложь;

		Для каждого Строка Из СогласованиеДокументовРемонтов Цикл
			
			Если Строка.ИспользоватьСогласование Тогда
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ВидДокумента = Строка.ВидДокументаСогласования;
				ЗаписьНабора.Регламентный = Ложь;
			КонецЕсли; 
			
		КонецЦикла; 
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	Если мМодифицированностьДокументыСогласованияМероприятий Тогда

		НаборЗаписей = РегистрыСведений.торо_ВидыДокументовСогласования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регламентный.Использование = Истина;
		НаборЗаписей.Отбор.Регламентный.ВидСравнения  = ВидСравнения.Равно;
		НаборЗаписей.Отбор.Регламентный.Значение      = Истина;
		
		Для каждого Строка Из СогласованиеДокументовМероприятий Цикл
			
			Если Строка.ИспользоватьСогласование Тогда
				
				ЗаписьНабора = НаборЗаписей.Добавить();
				ЗаписьНабора.ВидДокумента = Строка.ВидДокументаСогласования;
				ЗаписьНабора.Регламентный = Истина;
			КонецЕсли; 
			
		КонецЦикла; 
		
		НаборЗаписей.Записать();
		
	КонецЕсли; 
	
	Если мМодифицированностьСпособовСогласованияПоУмолчанию Тогда
		
		НаборЗаписей = РегистрыСведений.торо_НастройкиСогласованияДокументовТОиР.СоздатьНаборЗаписей();
		ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей, СпособыСогласованияПоУмолчанию);
		
	КонецЕсли;
	
	Если мМодифицированностьНастройкиУведомлений Тогда
		
		НаборЗаписей = РегистрыСведений.торо_НастройкиУведомлений.СоздатьНаборЗаписей();
		ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей, НастройкаУведомлений);
		
	КонецЕсли;
	
	Если мМодифицированностьВводаНаОсновании Тогда
		
		ТаблицаДляВводаНаОсновании = Новый ТаблицаЗначений;
		
		ТаблицаДляВводаНаОсновании.Колонки.Добавить("ДокументОснование");
		ТаблицаДляВводаНаОсновании.Колонки.Добавить("ДокументВводимый");
		ТаблицаДляВводаНаОсновании.Колонки.Добавить("Значение");
		
		Для каждого Элемент Из СоответствиеРеквизитов Цикл
			
			НомерСимволаРазделения = Найти(Элемент.Ключ,"_торо");
			
			НС = ТаблицаДляВводаНаОсновании.Добавить();
			
			НС.ДокументОснование = Лев(Элемент.Ключ, НомерСимволаРазделения - 1);
			НС.ДокументВводимый  = Сред(Элемент.Ключ, НомерСимволаРазделения + 1);
			НС.Значение          = ЭтаФорма[Элемент.Значение];
			 
		КонецЦикла; 
		
		НаборЗаписей = РегистрыСведений.торо_ВводНаОсновании.СоздатьНаборЗаписей();
		ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей,ТаблицаДляВводаНаОсновании);
		мМодифицированностьВводаНаОснованииДляЗаписиИзменений = Ложь;
		мМодифицированностьВводаНаОсновании                   = Ложь;
	КонецЕсли;
	
	Если мМодифицированностьПараметровПредставленияДанных Тогда
		
		НаборЗаписей = РегистрыСведений.торо_ПараметрыПользовательскогоПредставленияОбъектов.СоздатьНаборЗаписей();
		ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей,ТаблицаПредставлений);
		мМодифицированностьПараметровПредставленияДанных = Ложь;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.торо_НастройкиДоступностиОбъектовРемонта.СоздатьНаборЗаписей();
	
	КлючевыеПоля = Новый Структура("СтатусОРВУчете", "Статус ОР в учете");
	ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей, ТаблицаНастроекЖЦ.Выгрузить(), КлючевыеПоля, Отказ);
	
	Если мМодифицированностьПараметровПодключенияКСЛК 
		ИЛИ мМодифицированностьФО_УправлениеПерсоналом Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		ПараметрыПодключения = Новый Структура;
		ПараметрыПодключения.Вставить("Host", Константы.торо_АдресСервераСЛК.Получить());
		ПараметрыПодключения.Вставить("Port", СтрЗаменить(Константы.торо_ПортСервераСЛК.Получить(), " ", ""));
		ПараметрыПодключения.Вставить("ФайлыДанных", Новый Соответствие);
		слкМенеджерЗащитыСервер.СохранитьНастройкиМенеджераСерииЗащиты("28DD", ПараметрыПодключения);		
	КонецЕсли;
	
	ВключитьВыключитьВыполнениеРегламентныхЗаданий();
	
	мМодифицированностьФО = Ложь;
	мМодифицированностьФО_УправлениеПерсоналом = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИерархияДляНовыхОР <> НаборКонстант.торо_ИерархияДляВводаНовыхОР Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_СтруктурыОР.Ссылка
		|ИЗ
		|	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
		|ГДЕ
		|	торо_СтруктурыОР.РазрешенВводНовыхОР = ИСТИНА";
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ОбъектИерархия = Выборка.Ссылка.ПолучитьОбъект();
			ОбъектИерархия.РазрешенВводНовыхОР = ЛОЖЬ;
			ОбъектИерархия.Записать();
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НаборКонстант.торо_ИерархияДляВводаНовыхОР) Тогда
			Иерархия = НаборКонстант.торо_ИерархияДляВводаНовыхОР.ПолучитьОбъект();
			Иерархия.РазрешенВводНовыхОР = Истина;
			Иерархия.Записать();
		КонецЕсли;
		
		ИерархияДляНовыхОР = НаборКонстант.торо_ИерархияДляВводаНовыхОР;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Если НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария Тогда
		
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";

	Иначе
		
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы);

	КонецЕсли;
	
	// Не должны быть доступными до записи настроек во избежание ошибок
	Элементы.СтраницаСогласование.Видимость = НаборКонстант.торо_ИспользоватьСогласование;
	Элементы.НастроитьРасписаниеПочтовыхУведомлений.Доступность = НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы;
	Элементы.НастроитьРасписаниеФоновыйРасчет.Доступность = НаборКонстант.торо_ИспользоватьФоновыйРасчетППР;
	
	ОбновитьИнтерфейс();
	
	Если НеобходимПерезапуск Тогда
		ЗавершитьРаботуСистемы(,Истина);
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда
		ЗаписатьВариантСпособаНастройкиБизнесПроцессовНаСервере();
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура торо_ИспользоватьКонтрольОтрицательныхОстатковПриИзменении(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательноПриИзменении(Элемент)
	ИзмененыЗначенияФО = Истина;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьОпасноеПроизводствоПриИзменении(Элемент)
	ИзмененыЗначенияФО = Истина;
КонецПроцедуры

&НаКлиенте
Процедура торо_ЗапретитьПроведениеАктовСИсполнителямиБезУказанияКвалПриИзменении(Элемент)
	ИзмененыЗначенияФО = Истина;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьУведомленияОСобытияхСистемыПриИзменении(Элемент)
		
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
	Если НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для настройки расписания сохраните настройки!'");
		Сообщение.Поле = Элемент.Имя;
		Сообщение.Сообщить();
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСогласованиеПриИзменении(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
	Если НаборКонстант.торо_ИспользоватьСогласование Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для изменения настроек согласований сохраните настройки!'");
		Сообщение.Поле = Элемент.Имя;
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВыбранныйСценарийРаботыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария Тогда
		
		ОписаниеОповещения = Новый  ОписаниеОповещения("ВыбранныйСценарийРаботыНачалоВыбораЗавершение",ЭтаФорма);
	    ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Текущие настройки будут заменены настройками из справочника. Продолжить?'"),РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ВыбранныйСценарийРаботыНачалоВыбораЗавершение(КодВозвратаДиалога.Да, Неопределено)
	КонецЕсли; 

КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьДокументыПринятияИСписанияОборудованияПриИзменении(Элемент)
	
	Если ВРегистреНетЗаписейПоСтатусам() И НаборКонстант.торо_ИспользоватьДокументыПринятияИСписанияОборудования Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИзменениеФлажкаИспользоватьДокументыПринятияИСписанияОборудованияЗавершение", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Для объектов ремонта, по которым не введены документы ""Принятие объекта ремонта к учету"" 
											|реквизит <Дата ввода в эксплуатацию> будет очищен.
											|Создать документы ""Принятие объекта ремонта к учету""?'"), РежимДиалогаВопрос.ДаНет);
	КонецЕсли; 
	
	Элементы.СтраницаЖизненныйЦикл.Видимость = НаборКонстант.торо_ИспользоватьДокументыПринятияИСписанияОборудования;
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_УчетСостоянияОборудованияПриИзменении(Элемент)
	
	Элементы.торо_УчетПусковОборудования.Доступность = НаборКонстант.торо_УчетСостоянияОборудования;
	
	Если НЕ НаборКонстант.торо_УчетСостоянияОборудования Тогда
		НаборКонстант.торо_УчетПусковОборудования 	= Ложь;
		АктСостояние 								= Ложь;
		АктМероприятийСостояние 					= Ложь;
		ДефектСостояние 							= Ложь;
		СостояниеДефект 							= Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_УчетВыявленныхДефектовОборудованияПриИзменении(Элемент)
	
	УстановитьДоступностьКонстВозможностьОтменыРемонтов();
	Элементы.торо_ИспользоватьУпрощеннуюФормуДефекта.Доступность = НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	
	Если Не НаборКонстант.торо_УчетВыявленныхДефектовОборудования Тогда
		НаборКонстант.торо_ИспользоватьУпрощеннуюФормуДефекта = Ложь;
		ВнешнееОснованиеДефект 			= Ложь;
		ДефектАкт 						= Ложь;
		ДефектЗаявка 					= Ложь;
		ДефектКонтролируемыеПоказатели 	= Ложь;
		ДефектНаработка 				= Ложь;
		ДефектНаряд						= Ложь;
		ДефектСостояние					= Ложь;
		КонтролируемыеПоказателиДефект	= Ложь;
		СостояниеДефект					= Ложь;
	КонецЕсли;
		
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьППРПриИзменении(Элемент)
	УстановитьДоступностьКонстВозможностьОтменыРемонтов();
	
	Элементы.торо_ИспользоватьФоновыйРасчетППР.Доступность = НаборКонстант.торо_ИспользоватьППР;
	
	Если НЕ НаборКонстант.торо_ИспользоватьППР Тогда
		НаборКонстант.торо_ИспользоватьФоновыйРасчетППР	= Ложь;
		ППРАкт											= Ложь;
		ППРЗаявка										= Ложь;
		ППРНаряд										= Ложь;
	КонецЕсли;	
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьРегламентныеМероприятияПриИзменении(Элемент)
	
	Элементы.торо_ИспользоватьНарядыНаРегламентноеМероприятие.Доступность = НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
	Если НаборКонстант.торо_ИспользоватьРегламентныеМероприятия = Ложь Тогда
		НаборКонстант.торо_ИспользоватьНарядыНаРегламентноеМероприятие = ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользованиеЛимитовРемонтовПриИзменении(Элемент)
	
	Элементы.торо_ИспользоватьОценкиРМ.Доступность = НаборКонстант.торо_ИспользованиеЛимитовРемонтов;
	
	Если НЕ НаборКонстант.торо_ИспользованиеЛимитовРемонтов Тогда
		НаборКонстант.торо_ИспользоватьОценкиРМ = Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСогласованиеДокументовРемонтовПриИзменении(Элемент)
	
	Элементы.СогласованиеДокументовРемонтов.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовРемонтов;
	ЭтаФорма.Модифицированность = Истина;
	УстановитьДоступностьВСпособахСогласования(Элементы.СогласованиеДокументовРемонтов.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСогласованиеДокументовМероприятийПриИзменении(Элемент)
	
	Элементы.СогласованиеДокументовМероприятий.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовМероприятий;
	ЭтаФорма.Модифицированность = Истина;
	УстановитьДоступностьВСпособахСогласования(Элементы.СогласованиеДокументовМероприятий.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияФлажкаВводаНаОсновании(Элемент)
	мМодифицированностьВводаНаОсновании = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
	ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
	
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьНарядыНаВыполнениеРаботПриИзменении(Элемент)
	
	Элементы.торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно.Доступность = НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот;
	
	Если НЕ НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот Тогда
		НаборКонстант.торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно = Ложь;
		
		ВнешнееОснованиеНаряд	= Ложь;
		ДефектНаряд				= Ложь;
		ЗаявкаНаряд				= Ложь;
		НарядАкт				= Ложь;
		ППРНаряд				= Ложь;
		
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьАктПриемкиОборудованияПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.торо_ИспользоватьАктПриемкиОборудования Тогда
		
		АктАктПриемки				= Ложь;
		ВнешнееОснованиеАктПриемки	= Ложь;
		ДефектАктПриемки			= Ложь;
		ЗаявкаАктПриемки			= Ложь;
		ППРАктПриемки				= Ложь;
		
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьНарядыНаРегламентноеМероприятиеПриИзменении(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);	
	
КонецПроцедуры

&НаКлиенте
Процедура торо_УчетКонтролируемыхПоказателейПриИзменении(Элемент)
	
	Элементы.торо_ИспользоватьРемонтыПоСостоянию.Доступность = НаборКонстант.торо_УчетКонтролируемыхПоказателей;
	Элементы.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей.Доступность = НаборКонстант.торо_УчетКонтролируемыхПоказателей;
		
	Если Не НаборКонстант.торо_УчетКонтролируемыхПоказателей Тогда
		НаборКонстант.торо_ИспользоватьРемонтыПоСостоянию 	= Ложь;
		НаборКонстант.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей = Ложь;
		АктКонтролируемыеПоказатели 						= Ложь;
		АктМероприятийПоказатели 							= Ложь;
		ДефектКонтролируемыеПоказатели 						= Ложь;
		КонтролируемыеПоказателиДефект 						= Ложь;
	КонецЕсли;
		
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_УчетНаработкиОборудованияПриИзменении(Элемент)
	
	Если Не НаборКонстант.торо_УчетНаработкиОборудования Тогда
		АктНаработка 			= Ложь;
		АктМероприятийНаработка = Ложь;
		ДефектНаработка 		= Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьСметыРемонтаПриИзменении(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
	Если Не НаборКонстант.торо_ИспользоватьСметыРемонта Тогда
		ВнешнееОснованиеЗаявка	= Ложь;
		ДефектЗаявка			= Ложь;
		ЗаявкаАкт				= Ложь;
		ЗаявкаНаряд				= Ложь;
		ППРЗаявка				= Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьВнешниеОснованияДляРаботПриИзменении(Элемент)
	
	Если Не НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот Тогда
		ВнешнееОснованиеАкт		= Ложь;
		ВнешнееОснованиеДефект	= Ложь;
		ВнешнееОснованиеЗаявка	= Ложь;
		ВнешнееОснованиеНаряд	= Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьФоновыйРасчетППРПриИзменении(Элемент)
	
	Если НаборКонстант.торо_ИспользоватьФоновыйРасчетППР Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Для настройки расписания сохраните настройки!'");
		Сообщение.Поле = Элемент.Имя;
		Сообщение.Сообщить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СтраницыРемонтыИМероприятияПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаРемонты Тогда
		
		Элементы.СпособыСогласованияПоУмолчанию.Видимость = Истина;
		СогласованиеДокументовПриАктивизацииСтроки(Элементы.СогласованиеДокументовРемонтов);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаМероприятия Тогда
		
		Элементы.СпособыСогласованияПоУмолчанию.Видимость = Истина;
		СогласованиеДокументовПриАктивизацииСтроки(Элементы.СогласованиеДокументовМероприятий);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДополнительно Тогда  
		
		Элементы.СпособыСогласованияПоУмолчанию.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееОснованиеДляРаботВыбор(Элемент)
	
	ВводНаОснованииВыбор(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланГрафикППРВыбор(Элемент)
	
	ВводНаОснованииВыбор(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрафСхемаМероприятияВыбор(Элемент)
	
	ВводНаОснованииВыбор(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АктОВыполненииЭтапаРаботВыбор(Элемент)
		
	ВводНаОснованииВыбор(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Группа2ПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если СпособНастройкиБизнесПроцессов = "НастройкаЧерезГрафСхемы" Тогда
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаДополнительно);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаМероприятия);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыРемонтыВводНаОснованииПриСменеСтраницы(Элемент, ТекущаяСтраница)

	УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
	УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
	
КонецПроцедуры

&НаКлиенте
Процедура СпособНастройкиБизнесПроцессовПриИзменении(Элемент)
	
	#Если ВебКлиент Тогда
		СпособНастройкиБизнесПроцессов = "НастройкаФлагами";
	#КонецЕсли
	
	Если СпособНастройкиБизнесПроцессов = "НастройкаЧерезГрафСхемы" Тогда
		
		// Флажками могли быть включены настройки ввода на основании связанные с отключенными документами,
		// (например кнопкой Отметить все или сначала включены флажки - потом отключен документ)
		// в таком случае эти настройки отключаем.
		ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаДополнительно");
		ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаВнешниеОснованияИДефекты");
		ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаМероприятия");
		ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаПланГрафикППР");
		
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаДополнительно);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаМероприятия);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
		
		Элементы.ГруппаУправлениеФлагами.Видимость 	= Ложь;
		Элементы.Группа3.Видимость 					= Ложь;
		Элементы.Группа6.Видимость 					= Ложь;
		Элементы.Группа7.Видимость 					= Ложь;
		
		Элементы.РемонтыВводНаОсновании.Видимость		= Истина;
		Элементы.МероприятияВводНаОсновании.Видимость	= Истина;
		Элементы.ДополнительноВводНаОсновании.Видимость	= Истина;
		
		УстановитьВидимостьГрафическихСхемВводаНаОсновании();
		
	ИначеЕсли СпособНастройкиБизнесПроцессов = "НастройкаФлагами" Тогда
		
		Элементы.ГруппаУправлениеФлагами.Видимость 	= Истина;
		Элементы.Группа3.Видимость 					= Истина;
		Элементы.Группа6.Видимость 					= Истина;
		Элементы.Группа7.Видимость 					= Истина;
		
		Элементы.РемонтыВводНаОсновании.Видимость		= Ложь;
		Элементы.МероприятияВводНаОсновании.Видимость	= Ложь;
		Элементы.ДополнительноВводНаОсновании.Видимость	= Ложь;
		
		УстановитьВидимостьФлаговВводаНаОсновании();
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПартнеровИКонтрагентовПриИзменении(Элемент)
	НаборКонстант.ИспользоватьПартнеровКакКонтрагентов = НЕ НаборКонстант.ИспользоватьПартнеровИКонтрагентов;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыНастроекПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницыНастроек.ПодчиненныеЭлементы.СтраницаНапоминанияИУведомления Тогда
		
		ПолучитьТаблицуСоответствияДокументовИСобытий();
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницыНастроек.ПодчиненныеЭлементы.СтраницаСогласование Тогда
		
		СтраницыРемонтыИМероприятияПриСменеСтраницы(Элементы.СтраницыРемонтыИМероприятия, Элементы.СтраницыРемонтыИМероприятия.ПодчиненныеЭлементы.СтраницаРемонты);
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласованиеДокументов
&НаКлиенте
Процедура СогласованиеДокументовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;	
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущийВидДокумента = ТекущиеДанные.ВидДокументаСогласования;
		
	Иначе
		
		ТекущийВидДокумента = ?(Элемент.Имя = "СогласованиеДокументовРемонтов", 
								ПредопределенноеЗначение("Перечисление.торо_ВидыДокументовСогласованияРемонтов.ПустаяСсылка"), 
								ПредопределенноеЗначение("Перечисление.торо_ВидыДокументовСогласованияМероприятий.ПустаяСсылка"));
		
	КонецЕсли;
	
	УстановитьОтборВСпособахСогласования();
	
	УстановитьДоступностьВСпособахСогласования(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласованиеДокументовМероприятий
&НаКлиенте
Процедура СогласованиеДокументовМероприятийПриИзменении(Элемент)
	мМодифицированностьДокументыСогласованияМероприятий = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеДокументовМероприятийПриАктивизацииСтроки(Элемент)
	
	СогласованиеДокументовПриАктивизацииСтроки(Элемент);
		
КонецПроцедуры

&НаКлиенте
Процедура торо_ХранитьИсториюСогласованияВДокументахПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласованиеДокументовРемонтов
&НаКлиенте
Процедура СогласованиеДокументовРемонтовПриИзменении(Элемент)
	мМодифицированностьДокументыСогласованияРемонтов = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СогласованиеДокументовРемонтовПриАктивизацииСтроки(Элемент)
	
	СогласованиеДокументовПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыСогласованияИспользоватьСогласованиеПриИзменении(Элемент)
	УстановитьДоступностьВСпособахСогласования(Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСогласованиеДокументовРемонтов1
&НаКлиенте
Процедура СогласованиеДокументовРемонтов1ИспользоватьСогласованиеПриИзменении(Элемент)
	УстановитьДоступностьВСпособахСогласования(Элемент.Родитель.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпособыСогласованияПоУмолчанию
&НаКлиенте
Процедура СпособыСогласованияПоУмолчаниюПриИзменении(Элемент)
	мМодифицированностьСпособовСогласованияПоУмолчанию = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпособыСогласованияПоУмолчаниюПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НоваяСтрока И Не ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.ВидДокумента = ТекущийВидДокумента;
	КонецЕсли;
	
	текСтрока = Элемент.ТекущиеДанные;
	Если текСтрока <> Неопределено И Не ОтменаРедактирования Тогда
		отказ = ПроверитьДублиСтрок(текСтрока.ВидДокумента, текСтрока.Организация, текСтрока.Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьДублиСтрок(ВидДокумент, Организация, Подразделение)
	
	тз = СпособыСогласованияПоУмолчанию.Выгрузить();
	найс = тз.НайтиСтроки(Новый Структура("ВидДокумента, Организация, Подразделение", ВидДокумент, Организация, Подразделение));
	
	Если найс.Количество() > 1 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для организации %1 и подразделения %2 уже указан способ согласования. Выберите другую организацию или подразделение.'"),Организация,Подразделение));
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНастройкаУведомлений
&НаКлиенте
Процедура НастройкаУведомленийПриИзменении(Элемент)
	мМодифицированностьНастройкиУведомлений = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомленийВидДокументаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.НастройкаУведомлений.ТекущиеДанные;
	ТекДанные.ВидДокумента = СоответствиеИменДокументов.НайтиСтроки(Новый Структура("Представление",ВыбранноеЗначение))[0].ИмяМетаданных;
	
	Если ЗначениеЗаполнено(ТекДанные.Событие) Тогда
		НетТакогоСобытияДляДокумента = (ТаблицаСоответствияДокументовИСобытий.НайтиСтроки(Новый Структура("Документ, Событие", ТекДанные.ВидДокумента, ТекДанные.Событие)).Количество() = 0);
		Если НетТакогоСобытияДляДокумента Тогда
			ТекДанные.Событие = ПредопределенноеЗначение("Перечисление.торо_СобытияУведомленийПользователей.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаУведомленийСобытиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.НастройкаУведомлений.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		МассивСтрок = ТаблицаСоответствияДокументовИСобытий.НайтиСтроки(Новый Структура("Документ", ТекДанные.ВидДокумента));
		Элементы.НастройкаУведомленийСобытие.СписокВыбора.Очистить();
		Для каждого Элем Из МассивСтрок Цикл
			Элементы.НастройкаУведомленийСобытие.СписокВыбора.Добавить(Элем.Событие);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыПредставлений
&НаКлиенте
Процедура ТаблицаПредставленийФорматнаяСтрокаПриИзменении(Элемент)
	мМодифицированностьПараметровПредставленияДанных = Истина;
	Элементы.Группа15.Видимость = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредставленийФорматнаяСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТаблицаПредставлений.ТекущиеДанные;
	ОткрытьФорму("ОбщаяФорма.торо_КонструкторФорматнойСтроки",Новый Структура("ОбъектКонфигурации,ОбъектКонфигурацииСиноним,ФорматнаяСтрока",ТекДанные.ОбъектКонфигурации,ТекДанные.ОбъектКонфигурацииСиноним,ТекДанные.ФорматнаяСтрокаПоУмолчанию),Элемент,,ВариантОткрытияОкна.ОтдельноеОкно,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура ВосстановитьНастройкиИзФайла(Команда)
	Если НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария Тогда
		
		ОписаниеОповещения = Новый  ОписаниеОповещения("ВосстановитьНастройкиИзФайлаЗавершение",ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещения,НСтр("ru = 'Текущие настройки будут заменены настройками из файла. Продолжить?'"),РежимДиалогаВопрос.ДаНет);	
	Иначе
		ВосстановитьНастройкиИзФайлаЗавершение(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовыйСценарий(Команда)
	
	СтруктураДляСозданияНовойНастройки = ПолучитьСтруктуруНастроек();
	
	ОткрытьФорму("Справочник.торо_ПредопределенныеСценарииРаботыСистемы.Форма.ФормаСозданияНового",Новый Структура("ПараметрыСоздания",СтруктураДляСозданияНовойНастройки),ЭтаФорма,,,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	ЗаполнитьПоУмолчанию();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	
	ВнешнееОснованиеАкт               = Истина;
	ВнешнееОснованиеДефект            = Истина;
	ВнешнееОснованиеЗаявка            = Истина;
	ВнешнееОснованиеНаряд             = Истина;
	ДефектАкт                         = Истина;    
	ДефектЗаявка                      = Истина;
	ДефектНаряд                       = Истина;    
	ЗаявкаАкт                         = Истина;
	ЗаявкаНаряд                       = Истина;
	НарядАкт                          = Истина;    
	ППРАкт                            = Истина;
	ППРЗаявка                         = Истина;
	ППРНаряд                          = Истина;
	АктКонтролируемыеПоказатели       = Истина;
	АктМероприятийНаработка           = Истина;
	АктМероприятийПоказатели          = Истина;
	АктМероприятийСостояние           = Истина;
	АктНаработка                      = Истина;
	АктСостояние                      = Истина;
	ГрафикМероприятийАктМероприятий   = Истина;
	ГрафикМероприятийНарядМероприятий = Истина;
	КонтролируемыеПоказателиДефект    = Истина;
	ДефектКонтролируемыеПоказатели    = Истина;
	ДефектНаработка                   = Истина;
	НарядМероприятийАктМероприятий    = Истина;
	СостояниеДефект                   = Истина;
	ДефектСостояние                   = Истина;
	
	мМодифицированностьВводаНаОсновании                   = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуСоВсех(Команда)
	
	ВнешнееОснованиеАкт               = Ложь;
	ВнешнееОснованиеДефект            = Ложь;
	ВнешнееОснованиеЗаявка            = Ложь;
	ВнешнееОснованиеНаряд             = Ложь;
	ДефектАкт                         = Ложь;    
	ДефектЗаявка                      = Ложь;
	ДефектНаряд                       = Ложь;    
	ЗаявкаАкт                         = Ложь;
	ЗаявкаНаряд                       = Ложь;
	НарядАкт                          = Ложь;    
	ППРАкт                            = Ложь;
	ППРЗаявка                         = Ложь;
	ППРНаряд                          = Ложь;
	АктКонтролируемыеПоказатели       = Ложь;
	АктМероприятийНаработка           = Ложь;
	АктМероприятийПоказатели          = Ложь;
	АктМероприятийСостояние           = Ложь;
	АктНаработка                      = Ложь;
	АктСостояние                      = Ложь;
	ГрафикМероприятийАктМероприятий   = Ложь;
	ГрафикМероприятийНарядМероприятий = Ложь;
	КонтролируемыеПоказателиДефект    = Ложь;
	ДефектКонтролируемыеПоказатели    = Ложь;
	ДефектНаработка                   = Ложь;
	НарядМероприятийАктМероприятий    = Ложь;
	СостояниеДефект                   = Ложь;
	ДефектСостояние                   = Ложь;
	
	мМодифицированностьВводаНаОсновании                   = Истина;
	ЭтаФорма.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайл(Команда)
	
	СохранитьФайл();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеФоновыйРасчет(Команда)
	
	НастроитьРасписание("торо_РасчетППР");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписаниеПочтовыхУведомлений(Команда)
	НастроитьРасписание("торо_ФормированиеПочтовыхУведомлений");
КонецПроцедуры


&НаКлиенте
Процедура ВерсияППР(Команда)
	
	
	ВерсияППР = торо_СЛКСервер.Версия_Session("торо_ЗащитаУправлениеРемонтами83");
		
	ПоказатьПредупреждение(Неопределено,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Используется обработка расчета ППР версии %1.'"), ВерсияППР));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьТаблицуСоответствияНажатие(Элемент)
	
	ОткрытьФорму("ОбщаяФорма.торо_ТаблицаСоответствияВерсийОбработокВерсиямРелиза",,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент)
		
	мМодифицированностьФО           = Истина;
    ЭтаФорма.Модифицированность     = Истина;
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
	Если СпособНастройкиБизнесПроцессов = "НастройкаЧерезГрафСхемы" Тогда
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаДополнительно);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаВнешниеОснованияИДефекты);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаМероприятия);
		УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхемаПланГрафикППР);
		
		УстановитьВидимостьГрафическихСхемВводаНаОсновании();
	ИначеЕсли СпособНастройкиБизнесПроцессов = "НастройкаФлагами" Тогда
		УстановитьВидимостьФлаговВводаНаОсновании();
	КонецЕсли;
	
	ИзмененыЗначенияФО = Истина;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
	мМодифицированностьФО         = Истина;
	ЭтаФорма.Модифицированность   = Истина;
	
	ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
	
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
	ИзмененыЗначенияФО = Истина;
	
	Если Элемент.Имя = "торо_ИспользоватьУправлениеПерсоналом" Тогда
		мМодифицированностьФО_УправлениеПерсоналом = Истина;
	КонецЕсли;
	
КонецПроцедуры
 

&НаКлиенте
Процедура ИзменениеФлажкаИспользоватьДокументыПринятияИСписанияОборудованияЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОткрытьФорму("Обработка.торо_ПанельАдминистрированияТОиР.Форма.ФормаПереходаКИспользованиюДокументовЖЦ",Новый Структура("ОткрытаИзНастроек",Истина),,,,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
	мМодифицированностьФО         = Истина;
	
	ЭтаФорма.Модифицированность   = Истина;
	
	ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
	
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
КонецПроцедуры

&НаСервере
// Процедура выполняет расстановку флагов в ТаблицаНастроекЖЦ "по заводским настройкам".
//
Процедура ЗаполнитьПоУмолчанию()
	
	ТаблицаНастроекЖЦ.Очистить();
	
	НС = ТаблицаНастроекЖЦ.Добавить();
	НС.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету;
	НС.ДоступностьПриПодборе = Ложь;
	НС.ДоступностьФлага      = Ложь;
	НС.ЗначениеПоУмолчанию   = Истина;
	НС.НомерСтрокиТаб        = 1;
	
	НС = ТаблицаНастроекЖЦ.Добавить();
	НС.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету;
	НС.ДоступностьПриПодборе = Истина;
	НС.ДоступностьФлага      = Истина;
	НС.ЗначениеПоУмолчанию   = Ложь;
	НС.НомерСтрокиТаб        = 2;
	
	НС = ТаблицаНастроекЖЦ.Добавить();
	НС.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.СнятоСУчета;
	НС.ДоступностьПриПодборе = Ложь;
	НС.ДоступностьФлага      = Ложь;
	НС.ЗначениеПоУмолчанию   = Истина;
	НС.НомерСтрокиТаб        = 3;

КонецПроцедуры

&НаСервере
// Процедура выполняет заполнение СогласованиеДокументовРемонтов и СогласованиеДокументовМероприятий
// вызывается из ПриСозданииНаСервере.
Процедура ЗаполнитьТЗДокументовДляСогласования(ТЗ, ЭтоРегламентныеМероприятия)
	
	ТаблицаДокументов = РеквизитФормыВЗначение(ТЗ);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВидыДокументовСогласованияПеречисление.Ссылка КАК ВидДокументаСогласования,
	               |	ВЫБОР
	               |		КОГДА НЕ торо_ВидыДокументовСогласования.ВидДокумента ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ИспользоватьСогласование
	               |ИЗ
	               |	Источник_ВидыДокументовСогласования КАК торо_ВидыДокументовСогласованияПеречисление
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВидыДокументовСогласования КАК торо_ВидыДокументовСогласования
	               |		ПО (торо_ВидыДокументовСогласования.ВидДокумента = торо_ВидыДокументовСогласованияПеречисление.Ссылка)";
				   
	Если Не ЭтоРегламентныеМероприятия Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Источник_ВидыДокументовСогласования", "Перечисление.торо_ВидыДокументовСогласованияРемонтов");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Источник_ВидыДокументовСогласования", "Перечисление.торо_ВидыДокументовСогласованияМероприятий");		
		
	КонецЕсли;
	
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(ТаблицаДокументов,ТЗ);
	
КонецПроцедуры

&НаСервере
// Процедура выполняет заполнение СпособыСогласованияПоУмолчанию
// вызывается из ПриСозданииНаСервере.
Процедура ЗаполнитьТЗСпособовСогласования()
	
	ТаблицаДокументов = РеквизитФормыВЗначение("СпособыСогласованияПоУмолчанию");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_НастройкиСогласованияДокументовТОиР.ВидДокумента,
	               |	торо_НастройкиСогласованияДокументовТОиР.Организация,
	               |	торо_НастройкиСогласованияДокументовТОиР.Подразделение,
	               |	торо_НастройкиСогласованияДокументовТОиР.СпособСогласования
	               |ИЗ
	               |	РегистрСведений.торо_НастройкиСогласованияДокументовТОиР КАК торо_НастройкиСогласованияДокументовТОиР
	               |ГДЕ
	               |	торо_НастройкиСогласованияДокументовТОиР.ВидДокумента <> НЕОПРЕДЕЛЕНО";
				   
		
	ТаблицаДокументов = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(ТаблицаДокументов,"СпособыСогласованияПоУмолчанию");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЗНастройкиУведомлений()

	ТаблицаНастроек =  РеквизитФормыВЗначение("НастройкаУведомлений");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ * ПОМЕСТИТЬ ТабИмен ИЗ &ТабИмен КАК ТабИмен;
		|ВЫБРАТЬ
		|	торо_НастройкиУведомлений.ВидДокумента       КАК ВидДокумента,
		|	торо_НастройкиУведомлений.СобытиеПоДокументу КАК СобытиеПоДокументу,
		|	торо_НастройкиУведомлений.Событие			 КАК Событие,
		|	ТабИмен.Представление 						 КАК ВидДокументаПредставление
		|ИЗ
		|	РегистрСведений.торо_НастройкиУведомлений КАК торо_НастройкиУведомлений
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабИмен
		|		ПО торо_НастройкиУведомлений.ВидДокумента = ТабИмен.ИмяМетаданных";
 	Запрос.УстановитьПараметр("ТабИмен",СоответствиеИменДокументов.Выгрузить());
	ТаблицаНастроек = Запрос.Выполнить().Выгрузить();

	ЗначениеВРеквизитФормы(ТаблицаНастроек,"НастройкаУведомлений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВидовДокументов()

	ДокументыКонфигурации = Метаданные.Документы;	
	Для каждого Элемент Из ДокументыКонфигурации Цикл
		Если Найти(Элемент.Имя,"торо_") Тогда
			Элементы.НастройкаУведомленийВидДокументаПредставление.СписокВыбора.Добавить(Строка(Элемент));
			НС = СоответствиеИменДокументов.Добавить();
			НС.Представление = Элемент.Синоним;
			НС.ИмяМетаданных = Элемент.Имя;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементов()
	
	Элементы.торо_РазрешитьПользовательскуюНастройкуПредставлений.Доступность = НаборКонстант.торо_ИспользоватьНастраиваемыеПредставления;
	
	Элементы.СогласованиеДокументовРемонтов.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовРемонтов;
	Элементы.СогласованиеДокументовМероприятий.Доступность = НаборКонстант.торо_ИспользоватьСогласованиеДокументовМероприятий;
	
	Элементы.торо_ИспользоватьРемонтыПоСостоянию.Доступность 							= НаборКонстант.торо_УчетКонтролируемыхПоказателей;
	Элементы.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей.Доступность 	= НаборКонстант.торо_УчетКонтролируемыхПоказателей;
	Элементы.торо_УчетПусковОборудования.Доступность 									= НаборКонстант.торо_УчетСостоянияОборудования;
	Элементы.торо_ИспользоватьФоновыйРасчетППР.Доступность								= НаборКонстант.торо_ИспользоватьППР;
	Элементы.торо_ИспользоватьОценкиРМ.Доступность										= НаборКонстант.торо_ИспользованиеЛимитовРемонтов;
	Элементы.торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно.Доступность = НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот;
	
	// регламентные задания
	Элементы.НастроитьРасписаниеФоновыйРасчет.Доступность = НаборКонстант.торо_ИспользоватьФоновыйРасчетППР;
	Элементы.НастроитьРасписаниеПочтовыхУведомлений.Доступность = НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы;
КонецПроцедуры

&НаСервере 
Процедура ЗаполнитьСохранитьНаборЗаписей(НаборЗаписей, ТЗ, КлючевыеПоля = Неопределено, Отказ = Ложь)
	
	Если КлючевыеПоля = неопределено тогда
		КлючевыеПоля = Новый Структура;
	КонецЕсли;
	
	Для каждого Строка Из ТЗ Цикл
		
		Для каждого текПоле из КлючевыеПоля Цикл
			Если НЕ ЗначениеЗаполнено(Строка[текПоле.Ключ]) Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Значение в колонке ""%1"" не заполнено! Настройки не были сохранены.'"),текПоле.Значение));
				отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаНабора = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНабора,Строка);
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры
 
&НаКлиенте
Процедура УстановитьОтборВСпособахСогласования()
	
	Элементы.СпособыСогласованияПоУмолчанию.ОтборСтрок = Новый ФиксированнаяСтруктура("ВидДокумента", ТекущийВидДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьВСпособахСогласования(ТекущиеДанные)
	
	ДоступностьСпособовСогласованияПоУмолчанию = (Элементы.СтраницыРемонтыИМероприятия.ТекущаяСтраница = Элементы.СтраницыРемонтыИМероприятия.ПодчиненныеЭлементы.СтраницаРемонты И НаборКонстант.торо_ИспользоватьСогласованиеДокументовРемонтов)
				ИЛИ (Элементы.СтраницыРемонтыИМероприятия.ТекущаяСтраница = Элементы.СтраницыРемонтыИМероприятия.ПодчиненныеЭлементы.СтраницаМероприятия И НаборКонстант.торо_ИспользоватьСогласованиеДокументовМероприятий);
				
	Если ТекущиеДанные <> Неопределено И ДоступностьСпособовСогласованияПоУмолчанию И ТекущиеДанные.ИспользоватьСогласование Тогда
		
		Элементы.СпособыСогласованияПоУмолчанию.Доступность = Истина;
		
	Иначе
		
		Элементы.СпособыСогласованияПоУмолчанию.Доступность = Ложь;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФлажкиИзРегистра()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВводНаОсновании.ДокументОснование,
	               |	торо_ВводНаОсновании.ДокументВводимый
	               |ИЗ
	               |	РегистрСведений.торо_ВводНаОсновании КАК торо_ВводНаОсновании
	               |ГДЕ
	               |	торо_ВводНаОсновании.Значение";
				   
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаПоиска = Строка(Выборка.ДокументОснование) + "_" + Выборка.ДокументВводимый;
			ИмяРеквизита = СоответствиеРеквизитов.Получить(СтрокаПоиска);
			Если Не ИмяРеквизита = Неопределено Тогда
				ЭтаФорма[ИмяРеквизита] = Истина;
			КонецЕсли; 
		КонецЦикла; 
		
	КонецЕсли; 
				  	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКонстВозможностьОтменыРемонтов()
	
	Значение = НаборКонстант.торо_ИспользоватьППР ИЛИ НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	Элементы.торо_ИспользоватьВозможностьОтменыРемонтов.Доступность = Значение;
	
	Если НЕ Значение Тогда
		НаборКонстант.торо_ИспользоватьВозможностьОтменыРемонтов = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура УстановитьВидимостьФлаговВводаНаОсновании()
	
	Элементы.СтраницаМероприятия.Видимость  = НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
			
	Элементы.ГруппаППР.Видимость = НаборКонстант.торо_ИспользоватьППР;	
	
	ИспользоватьСметы = НаборКонстант.торо_ИспользоватьСметыРемонта;
	
	Элементы.ГруппаВнешнееОснованиеДефектЗаявка.Видимость         = ИспользоватьСметы;
	Элементы.ГруппаВнешнееОснованиеЗаявка.Видимость               = ИспользоватьСметы;
	Элементы.ГруппаППРЗаявка.Видимость                            = ИспользоватьСметы;
	Элементы.ГруппаДефектЗаявка.Видимость                         = ИспользоватьСметы;
	
	ИспользоватьНаряды = НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот;
		
    Элементы.ГруппаВнешнееОснованиеДефектЗаявкаНаряд.Видимость = ИспользоватьНаряды;
    Элементы.ГруппаВнешнееОснованиеДефектНаряд.Видимость       = ИспользоватьНаряды;
    Элементы.ГруппаВнешнееОснованиеЗаявкаНаряд.Видимость       = ИспользоватьНаряды;
    Элементы.ГруппаВнешнееОснованиеНаряд.Видимость             = ИспользоватьНаряды;        
    Элементы.ГруппаППРЗаявкаНаряд.Видимость                    = ИспользоватьНаряды;
    Элементы.ГруппаППРНаряд.Видимость                          = ИспользоватьНаряды;
    Элементы.ГруппаДефектЗаявкаНаряд.Видимость                 = ИспользоватьНаряды;
    Элементы.ГруппаДефектНаряд.Видимость                       = ИспользоватьНаряды;
	
	ИспользоватьНарядыНаРегламентныеМероприятия = НаборКонстант.торо_ИспользоватьНарядыНаРегламентноеМероприятие;
    Элементы.ГруппаГрафикМероприятийНаряд.Видимость            = ИспользоватьНарядыНаРегламентныеМероприятия;
		
	ИспользоватьДефекты = НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	
	Элементы.ГруппаДефект.Видимость                 = ИспользоватьДефекты;
	Элементы.ГруппаВнешнееОснованиеДефект.Видимость = ИспользоватьДефекты;
	
	
	ИспользоватьМероприятия = НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
	
	Элементы.Группа6.Видимость = ИспользоватьМероприятия;
	
		
	ИспользоватьВнешниеОснования = НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот;
	
	Элементы.ГруппаВнешнееОснование.Видимость = ИспользоватьВнешниеОснования;
	
	
	ИспользоватьУчетСостоянийОборудования = НаборКонстант.торо_УчетСостоянияОборудования;
	
	Элементы.ГруппаСостояние.Видимость                 = ИспользоватьУчетСостоянийОборудования;
	Элементы.ВнешнееОснованиеДефектСостояние.Видимость = ИспользоватьУчетСостоянийОборудования;	
	Элементы.ДефектСостояние.Видимость                 = ИспользоватьУчетСостоянийОборудования;	
	Элементы.АктСостояние.Видимость                    = ИспользоватьУчетСостоянийОборудования;	
	Элементы.АктМероприятийСостояние.Видимость         = ИспользоватьУчетСостоянийОборудования;	
	Элементы.АктМероприятийСостояние1.Видимость        = ИспользоватьУчетСостоянийОборудования;	
	
	ИспользоватьУчетКонтролируемыхПоказателей = НаборКонстант.торо_УчетКонтролируемыхПоказателей;
	
	Элементы.ГруппаКонтролируемыеПоказатели.Видимость                 = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.ВнешнееОснованиеДефектКонтролируемыеПоказатели.Видимость = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.ДефектКонтролируемыеПоказатели.Видимость                 = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.АктКонтролируемыеПоказатели.Видимость                    = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.АктМероприятийПоказатели.Видимость                       = ИспользоватьУчетКонтролируемыхПоказателей;
	Элементы.АктМероприятийПоказатели1.Видимость                      = ИспользоватьУчетКонтролируемыхПоказателей;
	
	
	ИспользоватьУчетНаработки = НаборКонстант.торо_УчетНаработкиОборудования;
	
	Элементы.ВнешнееОснованиеДефектНаработка.Видимость                 = ИспользоватьУчетНаработки;
	Элементы.ДефектНаработка1.Видимость                                = ИспользоватьУчетНаработки;
	Элементы.АктМероприятийНаработка.Видимость                         = ИспользоватьУчетНаработки;
	Элементы.АктМероприятийНаработка1.Видимость                        = ИспользоватьУчетНаработки;
	Элементы.АктНаработка.Видимость                                    = ИспользоватьУчетНаработки;

	Если НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария Тогда
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
	Иначе
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы);
	КонецЕсли; 
	
	ВидимостьГруппыНастроек = Элементы.ГруппаВнешнееОснование.Видимость Или Элементы.ГруппаППР.Видимость 
								Или ИспользоватьДефекты Или ИспользоватьМероприятия
								Или ИспользоватьВнешниеОснования Или ИспользоватьУчетСостоянийОборудования
								Или ИспользоватьУчетКонтролируемыхПоказателей; 
								
	#Если ВебКлиент Тогда
		Элементы.СпособНастройкиБизнесПроцессов.Видимость = Ложь;
	#Иначе
		Элементы.СпособНастройкиБизнесПроцессов.Видимость = ВидимостьГруппыНастроек;
	#КонецЕсли

	Элементы.ГруппаУправлениеФлагами.Видимость = ВидимостьГруппыНастроек;
	Элементы.ДекорацияНеТребуетсяНастройкаБизнесПроцессов.Видимость = Не ВидимостьГруппыНастроек;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл()
	
	Оповещение = Новый ОписаниеОповещения("СохранитьФайлЗавершение", ЭтотОбъект);
	#Если Не ВебКлиент Тогда
		// В тонком и толстом клиентах расширение подключено всегда.
		СохранитьФайлЗавершение();
		Возврат;
	#КонецЕсли
	
	// Если расширение и так уже подключено, незачем про него спрашивать.
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда 
		СохранитьФайлЗавершение();
		Возврат;
	КонецЕсли;
	
	Если Не ЗаданВопросОбУстановкеРасширения Тогда
		
		ЗаданВопросОбУстановкеРасширения = Истина;
		ОписаниеОповещенияВопрос = Новый ОписаниеОповещения("ЗадатьВопросОбУстановкеРасширения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещенияВопрос, Нстр("ru = 'Установить расширение для работы с файлами?'"), РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		СохранитьФайлЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадатьВопросОбУстановкеРасширения(Ответ) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		НачатьУстановкуРасширенияРаботыСФайлами();
		
	Иначе
		
		СохранитьФайлЗавершение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлЗавершение() Экспорт
	ИмяФайла = "";	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		Если ПустаяСтрока(ИмяФайла) Тогда 
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			Диалог.Заголовок					= НСтр("ru = 'Выберите файл'");
			Диалог.ПредварительныйПросмотр  	= Ложь;
			Диалог.Фильтр   					= НСтр("ru = 'Файл XML (*.xml)|*.xml'");
			Диалог.Расширение   				= "xml";
			Диалог.ПроверятьСуществованиеФайла  = Истина;
			Диалог.МножественныйВыбор			= Ложь;
			
			Если Диалог.Выбрать() Тогда
				ИмяФайла = Диалог.ПолноеИмяФайла;
			КонецЕсли;
		КонецЕсли;
		
		// Записываются текст и параметры запроса в файл.
		Если Не ПустаяСтрока(ИмяФайла) Тогда 
			ДвоичныеДанные = ПолучитьФайлXMLСНастройками();
			ДвоичныеДанные.Записать(ИмяФайла);
			// ВыполнитьОбработкуОповещения(Оповещение, ИмяФайла);
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'В данном браузере невозможно работать с файлами.'");
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить(); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлXMLСНастройками()
	
	СтруктураТекущихНастроек = ПолучитьСтруктуруНастроек();
	#Если ВебКлиент Тогда
		Возврат ПолучитьФайлXMLСНастройкамиНаСервере(СтруктураТекущихНастроек);
	#Иначе
		ФайлXML = Новый ЗаписьXML;
		ИмяФайла = ПолучитьИмяВременногоФайла("xml");
		ФайлXML.ОткрытьФайл(ИмяФайла);
		ФайлXML.ЗаписатьОбъявлениеXML();
		
		
		ФайлXML.ЗаписатьНачалоЭлемента("НастройкиТОИР");
		
			
			Для каждого Константа Из СтруктураТекущихНастроек.Константы Цикл
				ФайлXML.ЗаписатьНачалоЭлемента("ФункциональныеОпции");
					ФайлXML.ЗаписатьАтрибут("name", Константа.Ключ);
					ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Константа.Значение));
				ФайлXML.ЗаписатьКонецЭлемента();
			КонецЦикла;
					
			
			Для каждого Элемент Из СтруктураТекущихНастроек.ВводНаОсновании Цикл
				ФайлXML.ЗаписатьНачалоЭлемента("ВводНаОсновании");
					ФайлXML.ЗаписатьАтрибут("name", Элемент.Ключ);
					ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Элемент.Значение));
				ФайлXML.ЗаписатьКонецЭлемента();
			КонецЦикла; 

			
		ФайлXML.ЗаписатьКонецЭлемента();	
		ФайлXML.Закрыть();
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
		
		УдалитьФайлы(ИмяФайла);	
		
		Возврат ДвоичныеДанные;
	#КонецЕсли
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьФайлXMLСНастройкамиНаСервере(СтруктураТекущихНастроек)
	
	ФайлXML = Новый ЗаписьXML;
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ФайлXML.ОткрытьФайл(ИмяФайла);
	ФайлXML.ЗаписатьОбъявлениеXML();
	
	ФайлXML.ЗаписатьНачалоЭлемента("НастройкиТОИР");
	
		
		Для каждого Константа Из СтруктураТекущихНастроек.Константы Цикл
			ФайлXML.ЗаписатьНачалоЭлемента("ФункциональныеОпции");
				ФайлXML.ЗаписатьАтрибут("name", Константа.Ключ);
				ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Константа.Значение));
			ФайлXML.ЗаписатьКонецЭлемента();
		КонецЦикла;
				
		
		Для каждого Элемент Из СтруктураТекущихНастроек.ВводНаОсновании Цикл
			ФайлXML.ЗаписатьНачалоЭлемента("ВводНаОсновании");
				ФайлXML.ЗаписатьАтрибут("name", Элемент.Ключ);
				ФайлXML.ЗаписатьАтрибут("value", XMLСтрока(Элемент.Значение));
			ФайлXML.ЗаписатьКонецЭлемента();
		КонецЦикла; 

		
	ФайлXML.ЗаписатьКонецЭлемента();	
	ФайлXML.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	
	УдалитьФайлы(ИмяФайла);	
	
	Возврат ДвоичныеДанные;	
	
КонецФункции

&НаКлиенте
Процедура ВыбранныйСценарийРаботыНачалоВыбораЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		мМодифицированностьВводаНаОсновании                   = Истина;
		мМодифицированностьФО                                 = Истина;
		ОткрытьФорму("Справочник.торо_ПредопределенныеСценарииРаботыСистемы.Форма.ФормаВыбора",,ЭтаФорма,,,,Неопределено,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли; 	
	
	
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруНастроек()
	
	СтруктураДляСозданияНовойНастройки = Новый Структура;
	
	Структура = Новый Структура;
	Структура.Вставить("торо_ИспользованиеЛимитовРемонтов"                        	, НаборКонстант.торо_ИспользованиеЛимитовРемонтов);
	Структура.Вставить("торо_ИспользоватьАналогиНоменклатурыДляРемонтов"          	, НаборКонстант.торо_ИспользоватьАналогиНоменклатурыДляРемонтов);
	Структура.Вставить("торо_ИспользоватьВнешниеОснованияДляРабот"                	, НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот);
	Структура.Вставить("торо_ИспользоватьВозможностьОтменыРемонтов"               	, НаборКонстант.торо_ИспользоватьВозможностьОтменыРемонтов);
	Структура.Вставить("торо_ИспользоватьГарантии"                                	, НаборКонстант.торо_ИспользоватьГарантии);
	Структура.Вставить("торо_ИспользоватьДокументыПринятияИСписанияОборудования"  	, НаборКонстант.торо_ИспользоватьДокументыПринятияИСписанияОборудования);
	Структура.Вставить("торо_ИспользоватьКоэффициентыРемонтныхОсобенностей"       	, НаборКонстант.торо_ИспользоватьКоэффициентыРемонтныхОсобенностей);
	Структура.Вставить("торо_ИспользоватьЛоты"                                    	, НаборКонстант.торо_ИспользоватьЛоты);
	Структура.Вставить("торо_ИспользоватьНаправленияОР"                           	, НаборКонстант.торо_ИспользоватьНаправленияОР);
	Структура.Вставить("торо_ИспользоватьНарядыНаВыполнениеРабот"                 	, НаборКонстант.торо_ИспользоватьНарядыНаВыполнениеРабот);
	Структура.Вставить("торо_ИспользоватьОбщийПланРабот"                          	, НаборКонстант.торо_ИспользоватьОбщийПланРабот);
	Структура.Вставить("торо_ИспользоватьОценкиРМ"                                	, НаборКонстант.торо_ИспользоватьОценкиРМ);
	Структура.Вставить("торо_ИспользоватьППР"                                     	, НаборКонстант.торо_ИспользоватьППР);
	Структура.Вставить("торо_ИспользоватьПланированиеПоЖесткимРемЦиклам"          	, НаборКонстант.торо_ИспользоватьПланированиеПоЖесткимРемЦиклам);
	Структура.Вставить("торо_ИспользоватьРегламентныеМероприятия"                 	, НаборКонстант.торо_ИспользоватьРегламентныеМероприятия);
	Структура.Вставить("торо_ИспользоватьРемонтыПоСостоянию"                      	, НаборКонстант.торо_ИспользоватьРемонтыПоСостоянию);
	Структура.Вставить("торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей", НаборКонстант.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей);
	Структура.Вставить("торо_ИспользоватьСложныеТехКартыРемонтов"                 	, НаборКонстант.торо_ИспользоватьСложныеТехКартыРемонтов);
	Структура.Вставить("торо_ИспользоватьСогласование"                            	, НаборКонстант.торо_ИспользоватьСогласование);
	Структура.Вставить("торо_ИспользоватьСметыРемонта"                            	, НаборКонстант.торо_ИспользоватьСметыРемонта);
	Структура.Вставить("торо_ИспользоватьТиповыеОР"                               	, НаборКонстант.торо_ИспользоватьТиповыеОР);
	Структура.Вставить("торо_ИспользоватьУведомленияОСобытияхСистемы"             	, НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы);
	Структура.Вставить("торо_ИспользоватьУправлениеПерсоналом"            		  	, НаборКонстант.торо_ИспользоватьУправлениеПерсоналом);
	Структура.Вставить("торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов"         	, НаборКонстант.торо_ИспользоватьУсложненнуюСхемуЗакрытияНарядов);
	Структура.Вставить("торо_РассчитыватьПлановуюСтоимостьРемонтовПриПланировании"	, НаборКонстант.торо_РассчитыватьПлановуюСтоимостьРемонтовПриПланировании);
	Структура.Вставить("торо_УчетВыявленныхДефектовОборудования"                  	, НаборКонстант.торо_УчетВыявленныхДефектовОборудования);
	Структура.Вставить("торо_УчетЗамещающихРемонтов"                              	, НаборКонстант.торо_УчетЗамещающихРемонтов);
	Структура.Вставить("торо_УчетЗапчастей"                                       	, НаборКонстант.торо_УчетЗапчастей);
	Структура.Вставить("торо_УчетКонтролируемыхПоказателей"                       	, НаборКонстант.торо_УчетКонтролируемыхПоказателей);
	Структура.Вставить("торо_УчетНаработкиОборудования"                           	, НаборКонстант.торо_УчетНаработкиОборудования);
	Структура.Вставить("торо_УчетПусковОборудования"                              	, НаборКонстант.торо_УчетПусковОборудования);
	Структура.Вставить("торо_УчетСостоянияОборудования"                           	, НаборКонстант.торо_УчетСостоянияОборудования);
	
	СтруктураДляСозданияНовойНастройки.Вставить("Константы",Структура);
	
	Структура = Новый Структура;
	
	Для каждого Элемент Из СоответствиеРеквизитов Цикл
		
		Структура.Вставить(Элемент.Ключ,ЭтаФорма[Элемент.Значение]);
		
	КонецЦикла; 
	
	СтруктураДляСозданияНовойНастройки.Вставить("ВводНаОсновании",Структура);
	
	Возврат СтруктураДляСозданияНовойНастройки;
		
КонецФункции

&НаКлиенте
Процедура ВосстановитьНастройкиИзФайлаЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
				
		ИмяФайла = "";
		// Выбор файла для загрузки.
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Диалог.Заголовок					= НСтр("ru = 'Выберите файл'");
		Диалог.ПредварительныйПросмотр  	= Ложь;
		Диалог.Фильтр   					= НСтр("ru = 'Файл XML (*.xml)|*.xml'");
		Диалог.Расширение   				= "xml";
		Диалог.ПроверятьСуществованиеФайла  = Истина;
		Диалог.МножественныйВыбор			= Ложь;
		
		Если Диалог.Выбрать() Тогда
			ИмяФайла = Диалог.ПолноеИмяФайла;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ИмяФайла) Тогда 
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
			СтруктураНастроек = ЗагрузитьНастройкиИзФайла(ДвоичныеДанные);
			Если СтруктураНастроек <> Неопределено Тогда
				ОбработкаОповещения("ОБРАБОТКА_ВЫБОРА_СЦЕНАРИЯ",СтруктураНастроек,Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьНастройкиИзФайла(ДвоичныеДанные)
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("МассивСтруктурЗначенийКонстант");
	СтруктураНастроек.Вставить("СоответствиеВводНаОсновании");
	
	МассивСтруктурЗначенийКонстант = Новый Структура;
	Соответствие = Новый Соответствие;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("xml");
	ДвоичныеДанные.Записать(ИмяФайла);
	ФайлXML = Новый ЧтениеXML;
	ФайлXML.ОткрытьФайл(ИмяФайла);
	ФайлXML.Прочитать();

	ЭтоПодходящийФайл = Ложь;
	
	Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "НастройкиТОИР" Тогда
		
		ЭтоПодходящийФайл = Истина;
				
		Пока ФайлXML.Прочитать() Цикл 
			
			Если ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "ФункциональныеОпции" Тогда 
								
				ИмяАтрибута = "";
				ЗначениеАтрибута = Ложь;
				
				Пока ФайлXML.ПрочитатьАтрибут() Цикл 
					Если ФайлXML.Имя = "name" Тогда
						
						ИмяАтрибута =  ФайлXML.Значение;
						
					ИначеЕсли ФайлXML.Имя = "value" Тогда
						ЗначениеАтрибута = XMLЗначение(Тип("Булево"), ФайлXML.Значение);
					КонецЕсли;
				КонецЦикла; 
				
				// Добавление константы
				Если ИмяАтрибута = "" Тогда
					Продолжить;
				КонецЕсли;
				
				МассивСтруктурЗначенийКонстант.Вставить(ИмяАтрибута, ЗначениеАтрибута);//.Добавить(Структура);
			ИначеЕсли ФайлXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ФайлXML.Имя = "ВводНаОсновании" Тогда 
				ИмяАтрибута = "";
				ЗначениеАтрибута = Ложь;
				
				Пока ФайлXML.ПрочитатьАтрибут() Цикл 
					Если ФайлXML.Имя = "name" Тогда
						
						ИмяАтрибута =  ФайлXML.Значение;
						
					ИначеЕсли ФайлXML.Имя = "value" Тогда
						ЗначениеАтрибута = XMLЗначение(Тип("Булево"), ФайлXML.Значение);
					КонецЕсли;
				КонецЦикла;
				
				Если ИмяАтрибута = "" Тогда
					Продолжить;
				КонецЕсли;
				
				Соответствие.Вставить(ИмяАтрибута, ЗначениеАтрибута);

			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
	ФайлXML.Закрыть();
	
	УдалитьФайлы(ИмяФайла);
	
	Если Не ЭтоПодходящийФайл Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Выбранный файл не содержит сохраненных настроек для конфигурации.'");
		Сообщение.Сообщить();
		Возврат Неопределено;
	КонецЕсли; 
	
	СтруктураНастроек.МассивСтруктурЗначенийКонстант = МассивСтруктурЗначенийКонстант;
	СтруктураНастроек.СоответствиеВводНаОсновании    = Соответствие;
	
	мМодифицированностьФО               = Истина;
	мМодифицированностьВводаНаОсновании = Истина;

	Возврат СтруктураНастроек;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСоответствие(СоответствиеРеквизитов)
	
	СоответствиеРеквизитов = Новый Соответствие;
	
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_СостоянияОбъектовРемонта","АктМероприятийСостояние");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_УчетКонтролируемыхПоказателей","АктМероприятийПоказатели");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_УчетНаработкиОборудования","АктМероприятийНаработка");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииЭтапаРабот_торо_СостоянияОбъектовРемонта","АктСостояние");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииЭтапаРабот_торо_УчетКонтролируемыхПоказателей","АктКонтролируемыеПоказатели");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииЭтапаРабот_торо_УчетНаработкиОборудования","АктНаработка");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииЭтапаРабот_торо_АктПриемкиОборудования", "АктАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_АктОВыполненииЭтапаРабот","ВнешнееОснованиеАкт");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_ВыявленныеДефекты","ВнешнееОснованиеДефект");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_ЗаявкаНаРемонт","ВнешнееОснованиеЗаявка");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_НарядНаВыполнениеРемонтныхРабот","ВнешнееОснованиеНаряд");
	СоответствиеРеквизитов.Вставить("торо_ВнешнееОснованиеДляРабот_торо_АктПриемкиОборудования", "ВнешнееОснованиеАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_АктОВыполненииЭтапаРабот","ДефектАкт");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_ЗаявкаНаРемонт","ДефектЗаявка");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_НарядНаВыполнениеРемонтныхРабот","ДефектНаряд");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_СостоянияОбъектовРемонта","ДефектСостояние");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_УчетКонтролируемыхПоказателей","ДефектКонтролируемыеПоказатели");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_УчетНаработкиОборудования","ДефектНаработка");
	СоответствиеРеквизитов.Вставить("торо_ВыявленныеДефекты_торо_АктПриемкиОборудования", "ДефектАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_ГрафикРегламентныхМероприятийТОиР_торо_АктОВыполненииРегламентногоМероприятия","ГрафикМероприятийАктМероприятий");
	СоответствиеРеквизитов.Вставить("торо_ГрафикРегламентныхМероприятийТОиР_торо_НарядНаРегламентноеМероприятие","ГрафикМероприятийНарядМероприятий");
	СоответствиеРеквизитов.Вставить("торо_ЗаявкаНаРемонт_торо_АктОВыполненииЭтапаРабот","ЗаявкаАкт");
	СоответствиеРеквизитов.Вставить("торо_ЗаявкаНаРемонт_торо_НарядНаВыполнениеРемонтныхРабот","ЗаявкаНаряд");
	СоответствиеРеквизитов.Вставить("торо_ЗаявкаНаРемонт_торо_АктПриемкиОборудования", "ЗаявкаАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_НарядНаВыполнениеРемонтныхРабот_торо_АктОВыполненииЭтапаРабот","НарядАкт");
	СоответствиеРеквизитов.Вставить("торо_НарядНаРегламентноеМероприятие_торо_АктОВыполненииРегламентногоМероприятия","НарядМероприятийАктМероприятий");
	СоответствиеРеквизитов.Вставить("торо_НарядНаРегламентноеМероприятие_торо_АктОВыполненииРегламентногоМероприятия","НарядМероприятийАктМероприятий");
	СоответствиеРеквизитов.Вставить("торо_ПланГрафикРемонта_торо_АктОВыполненииЭтапаРабот","ППРАкт");
	СоответствиеРеквизитов.Вставить("торо_ПланГрафикРемонта_торо_ЗаявкаНаРемонт","ППРЗаявка");
	СоответствиеРеквизитов.Вставить("торо_ПланГрафикРемонта_торо_НарядНаВыполнениеРемонтныхРабот","ППРНаряд");
	СоответствиеРеквизитов.Вставить("торо_ПланГрафикРемонта_торо_АктПриемкиОборудования", "ППРАктПриемки");
	СоответствиеРеквизитов.Вставить("торо_СостоянияОбъектовРемонта_торо_ВыявленныеДефекты","СостояниеДефект");
	СоответствиеРеквизитов.Вставить("торо_УчетКонтролируемыхПоказателей_торо_ВыявленныеДефекты","КонтролируемыеПоказателиДефект");	
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_ВыявленныеДефекты","АктРегламентныхДефект");
	СоответствиеРеквизитов.Вставить("торо_АктОВыполненииРегламентногоМероприятия_торо_ВнешнееОснованиеДляРабот","АктРегламентныхВнешнееОснование");
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРасписание(РеглЗадание)
	
	Обработчик = Новый ОписаниеОповещения("РегламентныеЗаданияПослеИзмененияРасписания", ЭтотОбъект, РеглЗадание);
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ЭтотОбъект[РеглЗадание + "Расписание"]);
	Диалог.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура РегламентныеЗаданияПослеИзмененияРасписания(Расписание, РеглЗадание) Экспорт
	
	Если Расписание <> Неопределено Тогда
		ЭтотОбъект[РеглЗадание + "Расписание"] = Расписание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВключитьВыключитьВыполнениеРегламентныхЗаданий()
	
	РегламентноеЗаданиеФоновыйРасчет = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.торо_РасчетППР);
	
	Если РегламентноеЗаданиеФоновыйРасчет.Использование <> НаборКонстант.торо_ИспользоватьФоновыйРасчетППР 
		ИЛИ РегламентноеЗаданиеФоновыйРасчет.Расписание <> торо_РасчетППРРасписание Тогда
		РегламентноеЗаданиеФоновыйРасчет.Использование = НаборКонстант.торо_ИспользоватьФоновыйРасчетППР;
		РегламентноеЗаданиеФоновыйРасчет.Расписание = торо_РасчетППРРасписание;
		РегламентноеЗаданиеФоновыйРасчет.Записать();
	КонецЕсли;
	
	РегламентноеЗаданиеПочтовыеУведомления = РегламентныеЗадания.НайтиПредопределенное(Метаданные.РегламентныеЗадания.торо_ФормированиеПочтовыхУведомлений);
	
	Если РегламентноеЗаданиеПочтовыеУведомления.Использование <> НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы
		ИЛИ РегламентноеЗаданиеПочтовыеУведомления.Расписание <> торо_РасчетППРРасписание Тогда
		РегламентноеЗаданиеПочтовыеУведомления.Использование = НаборКонстант.торо_ИспользоватьУведомленияОСобытияхСистемы;
		РегламентноеЗаданиеПочтовыеУведомления.Расписание = торо_ФормированиеПочтовыхУведомленийРасписание;
		РегламентноеЗаданиеПочтовыеУведомления.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВРегистреНетЗаписейПоСтатусам()
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	торо_СтатусыОбъектовРемонтаВУчете.Период
	               |ИЗ
	               |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете КАК торо_СтатусыОбъектовРемонтаВУчете";
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Пустой();
	
КонецФункции 

&НаСервере
Функция ПроверитьНаличиеАктивныхПользователей()
	
	ЕстьАктивныеПользователи = Ложь;
	НомерСеанса = НомерСеансаИнформационнойБазы();
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для Каждого С Из Сеансы Цикл
		Если С.ИмяПриложения <> "Designer" И С.НомерСеанса <> НомерСеанса Тогда
			ЕстьАктивныеПользователи = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ЕстьАктивныеПользователи;
КонецФункции

&НаКлиенте
Процедура ЗавершениеПроверкиПередЗаписью(Результат, ДопПараметры) Экспорт
	
	Если Результат = "Продолжить" Тогда
		ПроверятьАктивныхПользователей = Ложь;
		Перезапуск = Истина;
		Записать();
		Если ЭтаФорма.Открыта() Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = "АктивныеПользователи" Тогда
		ОткрытьФорму("Обработка.АктивныеПользователи.Форма");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыПредставленияДанных()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПараметрыПользовательскогоПредставленияОбъектов.ОбъектКонфигурации,
	               |	торо_ПараметрыПользовательскогоПредставленияОбъектов.ФорматнаяСтрокаПоУмолчанию,
	               |	торо_ПараметрыПользовательскогоПредставленияОбъектов.ОбъектКонфигурацииСиноним
	               |ИЗ
	               |	РегистрСведений.торо_ПараметрыПользовательскогоПредставленияОбъектов КАК торо_ПараметрыПользовательскогоПредставленияОбъектов";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(ТаблицаПредставлений.Добавить(),Выборка);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьНастраиваемыеПредставленияПриИзменении(Элемент)
	
	Элементы.торо_РазрешитьПользовательскуюНастройкуПредставлений.Доступность = НаборКонстант.торо_ИспользоватьНастраиваемыеПредставления;
	Если НЕ НаборКонстант.торо_ИспользоватьНастраиваемыеПредставления Тогда
		НаборКонстант.торо_РазрешитьПользовательскуюНастройкуПредставлений = Ложь;
	КонецЕсли;
	
	НеобходимПерезапуск = НЕ НеобходимПерезапуск;
	
	ОбработкаИзмененияФлажкаФункциональнойОпцииСИзменениемВидимостиЭлементов(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПредставленийПриИзменении(Элемент)
	ЭтаФорма.Модифицированность   = Истина;
	ИзмененыЗначенияФО = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьВариантСпособаНастройкиБизнесПроцессовНаСервере()
	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить("Обработка.торо_ПанельАдминистрированияТОиР", "СпособНастройкиБизнесПроцессов", СпособНастройкиБизнесПроцессов);
КонецПроцедуры


#Область НастройкаВводаНаОсновании

&НаКлиенте
Процедура ВводНаОснованииВыбор(Элемент)
	
	Если Не Элемент.ТекущийЭлемент = Неопределено Тогда
		
		мМодифицированностьВводаНаОсновании = Истина;
		ЭтаФорма.Модифицированность = Истина;
		
		ВыбранныйСценарийРаботы = Строка(НаборКонстант.торо_ВыбранныйСценарийРаботы) + " (изменен)";
		
		НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
		
		Если ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			
			ДекоративнаяЛинияСхемыВыбор(Элемент);
						
		ИначеЕсли ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДекорация") Тогда
			
			ДекорацияСхемыВыбор(Элемент);
						
		КонецЕсли;
	КонецЕсли;
					
КонецПроцедуры

&НаКлиенте
Процедура ДекоративнаяЛинияСхемыВыбор(Элемент)
	
#Если НЕ ВебКлиент Тогда
	
	ИмяГрафическойСхемы = Элемент.Имя;
	ЭлементГрафСхемы = Вычислить(ИмяГрафическойСхемы + ".ЭлементыГрафическойСхемы.Найти(Элемент.ТекущийЭлемент.Имя)");
	
	ИмяНачЭлемента = ЭлементГрафСхемы.НачалоЭлемент.Имя;
	ИмяКонЭлемента = ЭлементГрафСхемы.КонецЭлемент.Имя;
	ИмяТекЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	// Включить ввод на основании возможно только в том случае если оба документа на концах стрелки включены.
	НачЭлементМеняется = НаборКонстант.Свойство(ИмяНачЭлемента);
	КонЭлементМеняется = НаборКонстант.Свойство(ИмяКонЭлемента);				
	
	Если НачЭлементМеняется Тогда
		НачЭлементЗнач = Вычислить("НаборКонстант." + ИмяНачЭлемента);
	Иначе
		НачЭлементЗнач = Истина;
	КонецЕсли;
	
	Если КонЭлементМеняется Тогда
		КонЭлементЗнач = Вычислить("НаборКонстант." + ИмяКонЭлемента);
	Иначе
		КонЭлементЗнач = Истина;
	КонецЕсли;
	
	ИзменениеВозможно = НачЭлементЗнач И КонЭлементЗнач;
	// 	
	
	Если ИзменениеВозможно Тогда
		ЭтаФорма[ИмяТекЭлемента] = Вычислить("НЕ " + ИмяТекЭлемента);
		
		ИзменитьОформлениеСоединительнойЛинииГрафСхемы(ЭлементГрафСхемы, ЭтаФорма[ИмяТекЭлемента]);
		
	КонецЕсли;	
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСхемыВыбор(Элемент)
	
	мМодифицированностьФО           = Истина;
	ЭтаФорма.Модифицированность     = Истина;
	НаборКонстант.торо_ИмеютсяОтличияНастроекОтВыбранногоСценария = Истина;
	
	ИзмененыЗначенияФО = Истина;
	
	ИмяГрафическойСхемы = Элемент.Имя;
	ИмяТекЭлемента = Элемент.ТекущийЭлемент.Имя;
	
	ЭлементыГрафическойСхемы = Вычислить(ИмяГрафическойСхемы + ".ЭлементыГрафическойСхемы");
	ЭлементГрафСхемы = ЭлементыГрафическойСхемы.Найти(ИмяТекЭлемента);			
	
	Если НаборКонстант.Свойство(ИмяТекЭлемента) Тогда
		
		Если ПроверитьВозможностьОтключенияДокументаИзГрафСхемы(ИмяГрафическойСхемы, ИмяТекЭлемента) Тогда
			
			НаборКонстант[ИмяТекЭлемента] = Не НаборКонстант[ИмяТекЭлемента];
			ТекущееЗначение = НаборКонстант[ИмяТекЭлемента];
			ИзменитьОформлениеДекорацииГрафСхемы(ЭлементГрафСхемы, ТекущееЗначение);
			
			Если Не ТекущееЗначение Тогда
				
				// При отключении документов имеющихся на разных схемов, требуется отключить
				// связи с этим документом и на других схемах.
				Если ИмяТекЭлемента = "торо_УчетКонтролируемыхПоказателей" 
						Или ИмяТекЭлемента = "торо_УчетСостоянияОборудования"
						Или ИмяТекЭлемента = "торо_УчетНаработкиОборудования" Тогда
					ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаВнешниеОснованияИДефекты", ИмяТекЭлемента);
					ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаДополнительно", ИмяТекЭлемента);
					ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаМероприятия", ИмяТекЭлемента);
				ИначеЕсли ИмяТекЭлемента = "торо_УчетВыявленныхДефектовОборудования" Тогда
					ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаВнешниеОснованияИДефекты", ИмяТекЭлемента);
					ОтключитьСвязанныеСДекорациейСтрелки("ГрафСхемаДополнительно", ИмяТекЭлемента);
				Иначе
					ОтключитьСвязанныеСДекорациейСтрелки(ИмяГрафическойСхемы, ИмяТекЭлемента);
				КонецЕсли;
								
				// Некоторые константы имеют связанны константы, значения которых должны зависеть от их значений. 
				Если ИмяТекЭлемента = "торо_УчетКонтролируемыхПоказателей" Тогда
					НаборКонстант.торо_ИспользоватьРемонтыПоСостоянию 	= Ложь;
					НаборКонстант.торо_ИспользоватьСтандартныеОповещенияОПревышенииПоказателей = Ложь;
				ИначеЕсли ИмяТекЭлемента = "торо_ИспользоватьНарядыНаВыполнениеРабот" Тогда
					НаборКонстант.торо_ИспользоватьНарядДопускНаРаботыПовышеннойОпасностиОбязательно = Ложь;
				ИначеЕсли ИмяТекЭлемента = "торо_УчетСостоянияОборудования" Тогда
					НаборКонстант.торо_УчетПусковОборудования 	= Ложь;
				КонецЕсли;				
				
			КонецЕсли;
			
			// При вкл/откл документа дефектов требуется проверить настройки видимости ГрафСхемаВнешниеОснованияИДефекты.
			Если ИмяТекЭлемента = "торо_УчетВыявленныхДефектовОборудования" Тогда
				УстановитьВидимостьГрафическихСхемВводаНаОсновании();
			КонецЕсли;
			
			УстановитьДоступностьЭлементов();
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСвязанныеСДекорациейСтрелки(ИмяГрафическойСхемы, ИмяТекЭелемента = "")
	
#Если НЕ ВебКлиент Тогда
	
	ЭлементыГрафическойСхемы = Вычислить(ИмяГрафическойСхемы + ".ЭлементыГрафическойСхемы");
	
	Если ИмяТекЭелемента = "" Тогда
		
		Для Каждого ДекоративнаяЛиния Из ЭлементыГрафическойСхемы Цикл
			Если ТипЗнч(ДекоративнаяЛиния) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") 
				И ((НаборКонстант.Свойство(ДекоративнаяЛиния.НачалоЭлемент.Имя) И Не НаборКонстант[ДекоративнаяЛиния.НачалоЭлемент.Имя]) 
					ИЛИ (НаборКонстант.Свойство(ДекоративнаяЛиния.КонецЭлемент.Имя) И Не НаборКонстант[ДекоративнаяЛиния.КонецЭлемент.Имя]))  Тогда
				ЭтаФорма[ДекоративнаяЛиния.Имя] = Ложь;							
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ЭлементГрафСхемы = ЭлементыГрафическойСхемы.Найти(ИмяТекЭелемента);
		
		Для Каждого ДекоративнаяЛиния Из ЭлементыГрафическойСхемы Цикл
			Если ТипЗнч(ДекоративнаяЛиния) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") 
				И (ДекоративнаяЛиния.НачалоЭлемент = ЭлементГрафСхемы ИЛИ ДекоративнаяЛиния.КонецЭлемент = ЭлементГрафСхемы)  Тогда
				ИзменитьОформлениеСоединительнойЛинииГрафСхемы(ДекоративнаяЛиния, Ложь);
				ЭтаФорма[ДекоративнаяЛиния.Имя] = Ложь;							
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
#КонецЕсли
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеСоединительнойЛинииГрафСхемы(ЭлементГрафСхемы, НовоеЗначение)
	
	Если НовоеЗначение Тогда
		ЭлементГрафСхемы.Линия = Новый Линия(ТипСоединительнойЛинии.Сплошная,2);
		ЭлементГрафСхемы.ЦветЛинии = WebЦвета.Зеленый;
	Иначе
		ЭлементГрафСхемы.Линия = Новый Линия(ТипСоединительнойЛинии.Пунктир,2);
		ЭлементГрафСхемы.ЦветЛинии = WebЦвета.Серый;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОформлениеДекорацииГрафСхемы(ЭлементГрафСхемы, НовоеЗначение)
	
	Если НовоеЗначение Тогда
		ЭлементГрафСхемы.ЦветФона = WebЦвета.СветлоЗеленый;
	Иначе
		ЭлементГрафСхемы.ЦветФона = WebЦвета.СветлоСерый;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНачальноеОформлениеДляГрафСхемы(ГрафСхема)

	Для Каждого ЭлементГрафСхемы Из ГрафСхема.ЭлементыГрафическойСхемы Цикл
		
		Если ТипЗнч(ЭлементГрафСхемы) = Тип("ЭлементГрафическойСхемыДекоративнаяЛиния") Тогда
			ИзменитьОформлениеСоединительнойЛинииГрафСхемы(ЭлементГрафСхемы, ЭтаФорма[ЭлементГрафСхемы.Имя]);
		ИначеЕсли ТипЗнч(ЭлементГрафСхемы) = Тип("ЭлементГрафическойСхемыДекорация") Тогда
			Если НаборКонстант.Свойство(ЭлементГрафСхемы.Имя) Тогда
				ИзменитьОформлениеДекорацииГрафСхемы(ЭлементГрафСхемы, НаборКонстант[ЭлементГрафСхемы.Имя]);
			КонецЕсли;
		КонецЕсли;
					
	КонецЦикла;

КонецПроцедуры

// Проверяем возможность отключения ФО документа из графической схемы. Функция нужна для случая когда происходит 
// настройка ввода на основании для цепочек начинающихся с выявленных дефектов или внешних оснований.
// Необходимо чтобы был включен хотя бы один документ или внешние основания или дефекты.
&НаКлиенте
Функция ПроверитьВозможностьОтключенияДокументаИзГрафСхемы(ИмяГрафСхемы, ИмяТекущегоЭлемента)
	
	Если ИмяГрафСхемы = "ГрафСхемаВнешниеОснованияИДефекты" И НаборКонстант[ИмяТекущегоЭлемента]
			И (ИмяТекущегоЭлемента = "торо_ИспользоватьВнешниеОснованияДляРабот" 
				Или ИмяТекущегоЭлемента = "торо_УчетВыявленныхДефектовОборудования") Тогда
				
		Возврат ?(ИмяТекущегоЭлемента = "торо_ИспользоватьВнешниеОснованияДляРабот", 
			НаборКонстант[ИмяТекущегоЭлемента] И НаборКонстант.торо_УчетВыявленныхДефектовОборудования,
			НаборКонстант[ИмяТекущегоЭлемента] И НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот);
	Иначе
		Возврат Истина;
	КонецЕсли;
		
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьГрафическихСхемВводаНаОсновании()
	
	МероприятияВводНаОснованииВидимость 		= НаборКонстант.торо_ИспользоватьРегламентныеМероприятия;
	ГруппаПланГрафикППРВидимость				= НаборКонстант.торо_ИспользоватьППР;
	ГруппаВнешниеОснованияИДефектыВидимость   = НаборКонстант.торо_ИспользоватьВнешниеОснованияДляРабот 
															Или НаборКонстант.торо_УчетВыявленныхДефектовОборудования;
	ДополнительноВводНаОснованииВидимость		= НаборКонстант.торо_УчетВыявленныхДефектовОборудования
															Или НаборКонстант.торо_УчетСостоянияОборудования
															Или НаборКонстант.торо_УчетКонтролируемыхПоказателей
															Или НаборКонстант.торо_УчетНаработкиОборудования;
															
	Элементы.МероприятияВводНаОсновании.Видимость 		= МероприятияВводНаОснованииВидимость;
	Элементы.ГруппаПланГрафикППР.Видимость				= ГруппаПланГрафикППРВидимость;
	Элементы.ГруппаВнешниеОснованияИДефекты.Видимость   = ГруппаВнешниеОснованияИДефектыВидимость;
	Элементы.ДополнительноВводНаОсновании.Видимость		= ДополнительноВводНаОснованииВидимость;
	
	ВидимостьГруппыНастроек = МероприятияВводНаОснованииВидимость Или ГруппаПланГрафикППРВидимость Или ГруппаВнешниеОснованияИДефектыВидимость Или ДополнительноВводНаОснованииВидимость; 
	
	#Если ВебКлиент Тогда
		Элементы.СпособНастройкиБизнесПроцессов.Видимость = Ложь;
	#Иначе
		Элементы.СпособНастройкиБизнесПроцессов.Видимость = ВидимостьГруппыНастроек;
	#КонецЕсли
	
	Элементы.ГруппаУправлениеФлагами.Видимость = Ложь;
	Элементы.ДекорацияНеТребуетсяНастройкаБизнесПроцессов.Видимость = Не ВидимостьГруппыНастроек;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьТаблицуСоответствияДокументовИСобытий()

	Макет = РеквизитФормыВЗначение("ОбработкаОбъект").ПолучитьМакет("СоответствиеДокументовИСобытий");
	
	ОбластьДанных = Макет.ПолучитьОбласть("СоответствиеДокументовИСобытий");
	ТаблицаСоответствияДокументовИСобытий.Очистить();
	Для Сч = 1 По ОбластьДанных.ВысотаТаблицы Цикл
		СтрокаТаблицы = ТаблицаСоответствияДокументовИСобытий.Добавить();
		СтрокаТаблицы.Документ         = ОбластьДанных.Область(Сч,1,Сч,1).Текст;
		СтрокаТаблицы.Событие      = Перечисления.торо_СобытияУведомленийПользователей[ОбластьДанных.Область(Сч,2,Сч,2).Текст];
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура торо_АдресСервераСЛКПриИзменении(Элемент)
	мМодифицированностьПараметровПодключенияКСЛК = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура торо_ПортСервераСЛКПриИзменении(Элемент)
	мМодифицированностьПараметровПодключенияКСЛК = Истина;
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекСтатусОРВучетеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (Элементы.ТаблицаНастроек.ТекущиеДанные <> Неопределено)
		И Элементы.ТаблицаНастроек.ТекущиеДанные.СтатусОРВучете = ВыбранноеЗначение 
		Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ТаблицаНастроекЖЦ.НайтиСтроки(Новый Структура("СтатусОРВУчете", ВыбранноеЗначение));
	Если МассивСтрок.количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьПредупреждение(Неопределено, 
			СтрЗаменить(Нстр("ru = 'Статус ОР ""%Статус%"" уже выбран в другой строке.'"),"%Статус%", ВыбранноеЗначение)
			,,НСтр("ru = 'Выбор статуса...'") );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ТаблицаНастроек.ТекущиеДанные.СтатусОРВучете = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьГарантииПриИзменении(Элемент)
	
	Элементы.торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом.Доступность = НаборКонстант.торо_ИспользоватьГарантии;
		
	Если Не НаборКонстант.торо_ИспользоватьГарантии Тогда
		НаборКонстант.торо_ЗапретитьРемонтГарантийногоОборудованияХозспособом 	= Ложь;
	КонецЕсли;
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура торо_ИспользоватьВыгрузкуЗагрузкуMSProjectПриИзменении(Элемент)
	
	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);	

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСинхронизациюДанныхПриИзменении(Элемент)
	
	Если НаборКонстант.ИспользоватьСинхронизациюДанных = Ложь
		И НаборКонстант.торо_ИспользоватьСинхронизациюСERP = Истина Тогда
	
		НаборКонстант.торо_ИспользоватьСинхронизациюСERP = Ложь;
	
	КонецЕсли; 
			
	Элементы.торо_ИспользоватьСинхронизациюСERP.Видимость = НаборКонстант.ИспользоватьСинхронизациюДанных;
	 
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьСерииНоменклатурыПриИзменении(Элемент)

	ОбработкаИзмененияФлажкаФункциональнойОпции(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекДоступностьФлагаПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаНастроекЗначениеПоУмолчаниюПриИзменении(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

ЗаполнитьСоответствие(СоответствиеРеквизитов);

#Если Клиент Тогда
	ИзмененыЗначенияФО = Ложь;
	ПроверятьАктивныхПользователей = Истина;
#КонецЕсли

#КонецОбласти

