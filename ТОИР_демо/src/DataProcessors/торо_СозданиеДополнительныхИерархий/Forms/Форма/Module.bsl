////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем СостояниеДереваОР1 Экспорт; // Переменная хранит состояние дерева объектов ремонта.

&НаКлиенте
Перем СостояниеДереваОР2 Экспорт; // Переменная хранит состояние нового дерева объектов ремонта.

#Область ОбработчикиСобытийФормы
&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПродолжитьОперацию" Тогда
		ВыполнитьЗаписьНаСервере(Параметр);
	КонецЕсли;
	
	Обновить(ЭтаФорма.Команды.Обновить);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ИерархияПриИзменении(Элемент)
	
	ПараметрыИерархии = ПолучитьПараметрыИерархии(Иерархия);
	
	Если ПараметрыИерархии = Неопределено Тогда
		ДеревоИерархии.ПолучитьЭлементы().Очистить();
		УстановитьВидимость();
		возврат;
	КонецЕсли;
	
	РазрешенВводНовыхОР1    = ПараметрыИерархии.РазрешенВводНовыхОР;
	ИзменяетсяДокументами1  = ПараметрыИерархии.ИзменяетсяДокументами;
	СтроитсяАвтоматически1  = ПараметрыИерархии.СтроитсяАвтоматически;
	ИерархияРеквизитОР1	    = ПараметрыИерархии.РеквизитОР;
	ИерархияТипРеквизитаОР1 = ПараметрыИерархии.ТипРеквизитаОР;
	Если ПараметрыИерархии.Свойство("ИерархическийСправочник") Тогда
		ИерархическийСправочник1= ПараметрыИерархии.ИерархическийСправочник;
	КонецЕсли;
	
	ПараметрыИерархии.Вставить("РодительИерархии");
	
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"ДеревоИерархии","ДеревоИерархии",ПараметрыИерархии);
	ДополнитьНаименованиями("ДеревоИерархии");
	
	Если Элементы.ПроверкаПолноты.Пометка Тогда
		ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
	КонецЕсли;
	
	Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());

	УстановитьВидимость();
		
КонецПроцедуры

&НаКлиенте
Процедура НоваяИерархияПриИзменении(Элемент)
	
	ПараметрыИерархии = ПолучитьПараметрыИерархии(НоваяИерархия);
	Если ПараметрыИерархии = Неопределено Тогда
		ДеревоНовойИерархии.ПолучитьЭлементы().Очистить();
		возврат;
	КонецЕсли;
	
	РазрешенВводНовыхОР2    = ПараметрыИерархии.РазрешенВводНовыхОР;
	ИзменяетсяДокументами2  = ПараметрыИерархии.ИзменяетсяДокументами;
	СтроитсяАвтоматически2  = ПараметрыИерархии.СтроитсяАвтоматически;
	ИерархияРеквизитОР2	    = ПараметрыИерархии.РеквизитОР;
	ИерархияТипРеквизитаОР2 = ПараметрыИерархии.ТипРеквизитаОР;
	Если ПараметрыИерархии.Свойство("ИерархическийСправочник") Тогда
		ИерархическийСправочник2= ПараметрыИерархии.ИерархическийСправочник;
	КонецЕсли;
	
	ПараметрыИерархии.Вставить("РодительИерархии");
	
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"ДеревоНовойИерархии","ДеревоНовойИерархии",ПараметрыИерархии);
	ДополнитьНаименованиями("ДеревоНовойИерархии");
	
	Если Элементы.ПроверкаПолноты.Пометка Тогда
		ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
		Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	КонецЕсли;
	
	Элементы.ДеревоНовойИерархии.Развернуть(ДеревоНовойИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоИерархии
&НаКлиенте
Процедура ДеревоИерархииПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекДанные = ДеревоИерархии.НайтиПоИдентификатору(Строка);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Ссылка) И НЕ ТекДанные.СвязиОбновлялись Тогда
		
		Если НЕ СтроитсяАвтоматически1 ИЛИ (СтроитсяАвтоматически1 И ИерархическийСправочник1) Тогда
			
			СтрокиДерева = ТекДанные.ПолучитьЭлементы();
			Если СтрокиДерева.Количество() > 0 Тогда
				СтруктураПараметровИерархии = Новый Структура(
				"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник",
				Иерархия, ИзменяетсяДокументами1, СтроитсяАвтоматически1, ИерархияРеквизитОР1, ИерархияТипРеквизитаОР1,ИерархическийСправочник1);
				
				СтруктураПараметровФормы = Новый Структура(
				"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
				ЭтаФорма.ИмяФормы, СостояниеДереваОР1, Неопределено);
				
				МассивЭлементов = Новый Массив;
				Для Каждого СтрокаДерева Из СтрокиДерева Цикл
					МассивЭлементов.Добавить(СтрокаДерева.Ссылка);
				КонецЦикла;
				СтруктураДобавления = ПолучитьСтруктуруНовыхСтрок(ТекДанные.Ссылка, СтруктураПараметровИерархии,МассивЭлементов,СтруктураПараметровФормы);
			КонецЕсли;
			ТекДанные.СвязиОбновлялись = Истина;
			
			Если Элементы.ПроверкаПолноты.Пометка Тогда
				ПолучитьОРОтсутствующиеВНовойИерархии();
				сооЭлементы = Новый Соответствие;
				Для каждого текСтрока из СписокОтсутствующихВНовИерахииОР Цикл
					сооЭлементы.Вставить(текСтрока.Значение, 1);
				КонецЦикла;
			КонецЕсли;
			
			Для каждого СтрокаДерева Из СтрокиДерева Цикл
				Для каждого ТекЭлем Из СтруктураДобавления Цикл
					
					Если ТекЭлем.Родитель <> СтрокаДерева.Ссылка Тогда
						Продолжить;
					КонецЕсли;
					
					НС = СтрокаДерева.ПолучитьЭлементы().Добавить();
					
					Если СтроитсяАвтоматически1 И ТипЗнч(ТекЭлем.РеквизитДопУпорядочиванияОР) <> Тип("Число") Тогда
						НС.Ссылка = ТекЭлем.РеквизитДопУпорядочивания;
					Иначе
						НС.Ссылка = ТекЭлем.ОбъектИерархии;
						НС.РеквизитДопУпорядочивания = ТекЭлем.РеквизитДопУпорядочиванияОР;
						
					КонецЕсли;		
					
					НС.РодительИерархии = ТекЭлем.Родитель;
					НС.ПометкаУдаления  = ТекЭлем.ПометкаУдаления;
					НС.Картинка 		= ТекЭлем.ИндексКартинки;
					НС.Код 				= ТекЭлем.Код;
					НС.ИнвентарныйНомер = ТекЭлем.ИнвентарныйНомер;
					НС.ЗаводскойНомер 	= ТекЭлем.ЗаводскойНомер;
					НС.ТехНомер 		= ТекЭлем.ТехНомер;
					нс.Выбран 			= СтрокаДерева.выбран; 
					
					Если Элементы.ПроверкаПолноты.Пометка Тогда
						нс.Подсвечивать = сооЭлементы[НС.Ссылка] = Неопределено;
					КонецЕсли;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИерархииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элементы.ДеревоИерархии.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоИерархииВыбранПриИзменении(Элемент)
	
	РасставитьГалочкиВнизПоДереву(Элементы.ДеревоИерархии.ТекущиеДанные.ПолучитьИдентификатор(), Элементы.ДеревоИерархии.ТекущиеДанные.Выбран);
	
	Видимость = ОпределитьВидимостьКнопокНаСервере();
	Элементы.ПеренестиОРСПодчиненными.Доступность = Видимость;
	Элементы.ПеренестиОР.Доступность              = Видимость;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоИерархииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоНовойИерархии
&НаКлиенте
Процедура ДеревоНовойИерархииПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНовойИерархииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(Неопределено, Элементы.ДеревоНовойИерархии.ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНовойИерархииПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекДанные = ДеревоНовойИерархии.НайтиПоИдентификатору(Строка);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Ссылка) И НЕ ТекДанные.СвязиОбновлялись Тогда
		
		Если НЕ СтроитсяАвтоматически2 ИЛИ (СтроитсяАвтоматически2 И ИерархическийСправочник2) Тогда
			
			СтрокиДерева = ТекДанные.ПолучитьЭлементы();
			Если СтрокиДерева.Количество() > 0 Тогда
				СтруктураПараметровИерархии = Новый Структура(
				"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник",
				НоваяИерархия, ИзменяетсяДокументами2, СтроитсяАвтоматически2, ИерархияРеквизитОР2, ИерархияТипРеквизитаОР2,ИерархическийСправочник2);
				
				СтруктураПараметровФормы = Новый Структура(
				"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
				ЭтаФорма.ИмяФормы, СостояниеДереваОР2, Неопределено);
				
				МассивЭлементов = Новый Массив;
				Для Каждого СтрокаДерева Из СтрокиДерева Цикл
					МассивЭлементов.Добавить(СтрокаДерева.Ссылка);
				КонецЦикла;
				СтруктураДобавления = ПолучитьСтруктуруНовыхСтрок(ТекДанные.Ссылка, СтруктураПараметровИерархии,МассивЭлементов,СтруктураПараметровФормы);
			КонецЕсли;
			ТекДанные.СвязиОбновлялись = Истина;
			
			Для каждого СтрокаДерева Из СтрокиДерева Цикл
				Для каждого ТекЭлем Из СтруктураДобавления Цикл
					
					Если ТекЭлем.Родитель <> СтрокаДерева.Ссылка Тогда
						Продолжить;
					КонецЕсли;
					
					НС = СтрокаДерева.ПолучитьЭлементы().Добавить();
					
					Если СтроитсяАвтоматически2 И ТипЗнч(ТекЭлем.РеквизитДопУпорядочиванияОР) <> Тип("Число") Тогда
						НС.Ссылка = ТекЭлем.РеквизитДопУпорядочивания;
					Иначе
						НС.Ссылка = ТекЭлем.ОбъектИерархии;
						НС.РеквизитДопУпорядочивания = ТекЭлем.РеквизитДопУпорядочиванияОР;
						
					КонецЕсли;		
					
					НС.РодительИерархии = ТекЭлем.Родитель;
					НС.ПометкаУдаления  = ТекЭлем.ПометкаУдаления;
					НС.Картинка 		= ТекЭлем.ИндексКартинки;
					НС.Код 				= ТекЭлем.Код;
					НС.ИнвентарныйНомер = ТекЭлем.ИнвентарныйНомер;
					НС.ЗаводскойНомер 	= ТекЭлем.ЗаводскойНомер;
					НС.ТехНомер 		= ТекЭлем.ТехНомер;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура СоздатьГруппу(Команда)
	
	Если НоваяИерархия.Пустая() Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для выполнения действия необходимо выбрать новую иерархию!'"));
		Возврат;
	КонецЕсли;
	
	Если торо_ОбщегоНазначенияКлиентПовтИсп.ЕстьПраво("ИнтерактивноеДобавление", "Справочники", "торо_ОбъектыРемонта") Тогда
	
		ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаГруппы",
		Новый Структура("ЭтоГруппа, СтруктураИерархии, РодительИерархии", Истина, НоваяИерархия, ?(Элементы.ДеревоНовойИерархии.ТекущиеДанные = Неопределено, Неопределено, Элементы.ДеревоНовойИерархии.ТекущиеДанные.Ссылка)),
		ЭтаФорма);
		
	Иначе
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Нарушение прав доступа!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОР(Команда)
	
	Если НоваяИерархия.Пустая() Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать новую иерархию.'"));
		Возврат;
	КонецЕсли;
	
	ТекДанные = Элементы.ДеревоНовойИерархии.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрано место переноса в новой иерархии! Активизируйте нужную строку.'"));
		Возврат;
	КонецЕсли;
	
	МассивВыбрЗнач = ПолучитьМассивВыбранныхЗначенийНаСервере();
	
	НовИерарахияТекОр = торо_РаботаСИерархией.ПолучитьСоздатьОР(ТекДанные.Ссылка, Ложь);
	Если НовИерарахияТекОр <> Неопределено Тогда
		Для каждого ТекСтрока из МассивВыбрЗнач Цикл
			Если НовИерарахияТекОр = ТекСтрока Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Вы перемещаете объект ремонта ""%1"" в самого себя, это невозможно. Операция будет отменена!'"),
						НовИерарахияТекОр));
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ИзменяетсяДокументами2 = ПолучитьТипИерарахии(НоваяИерархия);
	
	Если ИзменяетсяДокументами2 Тогда
		СоздатьДокументИзменения(НоваяИерархия, МассивВыбрЗнач, ТекДанные.Ссылка);
	Иначе
		
		Для каждого ВыбранноеЗначение Из МассивВыбрЗнач Цикл
			
			РодительДобавляемогоЭлемента = ПроверитьЕстьЛиВыбранноеЗначениеВИерархии(ВыбранноеЗначение, НоваяИерархия, ?(СтроитсяАвтоматически1, ИерархияТипРеквизитаОР1, Неопределено));
			
			Если НЕ РодительДобавляемогоЭлемента = Неопределено Тогда
				
				Если Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Объект ремонта %1 уже находится в иерархии. Изменить его положение?'"),ВыбранноеЗначение),
					РежимДиалогаВопрос.ДаНет, 60) <> КодВозвратаДиалога.Да Тогда
					
					Возврат;
					
				КонецЕсли; 
				
				Если Не РодительДобавляемогоЭлемента = ТекДанные.Ссылка И НЕ ВыбранноеЗначение = ТекДанные.Ссылка Тогда
					
					УдалитьЗаписиВРегистреИерархическихСтруктур(ВыбранноеЗначение, ТекДанные.РодительИерархии, НоваяИерархия);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Отказ = Ложь;
			ОбъектРемонта = ВыбранноеЗначение;
			
			ОбъектРемонта = торо_РаботаСИерархией.ПолучитьСоздатьОР(ОбъектРемонта);

			ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектРемонта, ТекДанные.Ссылка, НоваяИерархия);
		КонецЦикла;
		
		Если МассивВыбрЗнач.Количество() > 0 Тогда
			торо_РаботаСИерархией.ОбновитьДеревоГрупп(НоваяИерархия);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элементы.ПроверкаПолноты.Пометка Тогда
		ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
		Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
		Элементы.ДеревоНовойИерархии.Развернуть(ДеревоНовойИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	КонецЕсли;
	
	Обновить(ЭтаФорма.Команды.Обновить);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиОРСПодчиненными(Команда)
	
	ТабСоответствия.Очистить();
	МассивЭлементовДерева.Очистить();
	
	Если НоваяИерархия.Пустая() Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо выбрать новую иерархию.'"));
		Возврат;
	КонецЕсли;
	
	Если ИерарахияАвтоматическая(НоваяИерархия) Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Иерархия ""%1"" строится автоматически. Добавлять элементы в такую иерархию невозможно. Операция отменена.'")
					,НоваяИерархия));
		Возврат;
	КонецЕсли;
	
	ТекДанныеИерархии = Элементы.ДеревоИерархии.ТекущиеДанные;
	
	ТекДанные = Элементы.ДеревоНовойИерархии.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выбрано место переноса в новой иерархии! Активизируйте нужную строку.'"));
		Возврат;
	КонецЕсли;
	
	МассивОР = ПолучитьВсеОРПрисутствующиеВНовойИерархи(ТекДанные.Ссылка);
	
	НовИерарахияТекОр = торо_РаботаСИерархией.ПолучитьСоздатьОР(ТекДанные.Ссылка, Ложь);
	Если НовИерарахияТекОр <> Неопределено Тогда
		Для каждого ТекСтрока из МассивОР Цикл
			Если НовИерарахияТекОр = ТекСтрока Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Вы перемещаете объект ремонта ""%1"" в самого себя, это невозможно. Операция будет отменена!'"),
						НовИерарахияТекОр));
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	МестоДобавления = ТекДанные.Ссылка;
	
	Если НЕ МассивОР = Неопределено И МассивОР.Количество() > 0 Тогда
		
		ФормаДерева = ПолучитьФорму("Обработка.торо_СозданиеДополнительныхИерархий.Форма.ФормаДерева", 
			Новый Структура("МассивОРВерхнегоУровня, МассивОР, ТекСтруктураИерархии", 
							МассивОР, МассивОР, НоваяИерархия)
			, ЭтаФорма, ЭтаФорма);
			
		ФормаДерева.Открыть();		
	Иначе
		ОбработкаОповещения("ПродолжитьОперацию", Новый СписокЗначений, ЭтаФорма);
	КонецЕсли;
	
	Если Элементы.ПроверкаПолноты.Пометка Тогда
		ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
		Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
		Элементы.ДеревоНовойИерархии.Развернуть(ДеревоНовойИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ИзменяетсяДокументами2 = ПолучитьТипИерарахии(НоваяИерархия);
	СтроитсяАвтоматически2 = ИерарахияАвтоматическая(НоваяИерархия);
	
	СтруктураПараметровИерархии = Новый Структура(
		"СтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, РеквизитОР, ТипРеквизитаОР, ИерархическийСправочник,РодительИерархии",
		НоваяИерархия, ИзменяетсяДокументами2, СтроитсяАвтоматически2, ИерархияРеквизитОР2, ИерархияТипРеквизитаОР2,ИерархическийСправочник2);
	
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"ДеревоНовойИерархии","ДеревоНовойИерархии",СтруктураПараметровИерархии);
	ДополнитьНаименованиями("ДеревоНовойИерархии");

	Элементы.ДеревоНовойИерархии.Развернуть(ДеревоНовойИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПолноты(Команда)
	
	Элементы.ПроверкаПолноты.Пометка = НЕ Элементы.ПроверкаПолноты.Пометка;
	
	СостояниеДереваОР1 = ПолучитьСостояниеДерева();
	
	ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
	
	ВосстановитьСостояниеДереваНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтарИерархию(Команда)
	
	СтруктураПараметровИерархии = Новый Структура(
		"СтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, РеквизитОР, ТипРеквизитаОР, ИерархическийСправочник,РодительИерархии",
		Иерархия, ИзменяетсяДокументами1, СтроитсяАвтоматически1, ИерархияРеквизитОР1, ИерархияТипРеквизитаОР1,ИерархическийСправочник1);
	
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"ДеревоИерархии","ДеревоИерархии",СтруктураПараметровИерархии);
	ДополнитьНаименованиями("ДеревоИерархии");
	
	Если Элементы.ПроверкаПолноты.Пометка Тогда
		ПроверкаПолнотыНаСервере(Элементы.ПроверкаПолноты.Пометка);
	КонецЕсли;	
	
	Элементы.ДеревоИерархии.Развернуть(ДеревоИерархии.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьВсе(Команда)
	ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() > 0 Тогда 
		РасставитьГалочкиВнизПоДереву(ЭлементыДерева[0].ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
	Видимость = ОпределитьВидимостьКнопокНаСервере();
	Элементы.ПеренестиОРСПодчиненными.Доступность = Видимость;
	Элементы.ПеренестиОР.Доступность              = Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаВыделения(Команда)
	ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
	Если ЭлементыДерева.Количество() > 0 Тогда 
		РасставитьГалочкиВнизПоДереву(ЭлементыДерева[0].ПолучитьИдентификатор(), Ложь);
	КонецЕсли;
	
	Элементы.ПеренестиОРСПодчиненными.Доступность = Ложь;
	Элементы.ПеренестиОР.Доступность              = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере 
Функция ПолучитьВыбранныеЭлементы()
	сооИсключений = Новый Соответствие();
	
	тзКорни = Новый ТаблицаЗначений();
	тзКорни.Колонки.Добавить("ОбъектИерархии", Справочники.ТипВсеСсылки());
	тзКорни.Колонки.Добавить("РодительИерархии", Справочники.ТипВсеСсылки());
	тзКорни.Колонки.Добавить("ИндексКорня", новый ОписаниеТипов("Число",,новый КвалификаторыЧисла(5,0)));
	тзКорни.Колонки.Добавить("УжеОбработан", новый ОписаниеТипов("Булево"));
	
	Если Иерархия.СтроитсяАвтоматически Тогда
		Родитель = Справочники[Иерархия.ТипРеквизитаОР].ПустаяСсылка();
	Иначе 
		Родитель = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	КонецЕсли;
	
	НайтиКорни(ДеревоИерархии, сооИсключений, тзКорни, Родитель, 0);
	ВыраститьДеревья(тзКорни);
	
	Возврат тзКорни;
	
КонецФункции

&НаКлиенте 
Процедура УстановитьВидимость()
	Видимость = ДеревоИерархии.ПолучитьЭлементы().Количество() > 0;
	Элементы.ВыделитьВсе.Доступность = Видимость;
	Элементы.ОтменаВыделения.Доступность = Видимость;
КонецПроцедуры

&НаСервере 
Процедура РасставитьГалочкиВнизПоДереву(Корень, ЗначениеГалочки)
	элемДерево = ДеревоИерархии.НайтиПоИдентификатору(Корень);
	ОбойтиДерево(элемДерево, ЗначениеГалочки);
КонецПроцедуры

&НаСервере 
Процедура ОбойтиДерево(Корень, ЗначениеГалочки)
	
	Строки = Корень.ПолучитьЭлементы();
	Для каждого текСтрока из Строки Цикл
		текСтрока.Выбран = ЗначениеГалочки;
		ОбойтиДерево(ТекСтрока, ЗначениеГалочки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура РасставитьВыделение(Корень, ЗначениеГалочки)
	
	Строки = Корень.Строки;
	Для каждого текСтрока из Строки Цикл
		текСтрока.Подсвечивать = ЗначениеГалочки;
		РасставитьВыделение(ТекСтрока, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ВыполнитьЗаписьНаСервере(Исключения)
	
	сооИсключений = Новый Соответствие();
	Для каждого текЗначение из Исключения цикл
		сооИсключений.Вставить(текЗначение.Значение, 1);
	КонецЦикла;
	
	тзКорни = Новый ТаблицаЗначений();
	тзКорни.Колонки.Добавить("ОбъектИерархии", Справочники.ТипВсеСсылки());
	тзКорни.Колонки.Добавить("РодительИерархии", Справочники.ТипВсеСсылки());
	тзКорни.Колонки.Добавить("ИндексКорня", новый ОписаниеТипов("Число",,новый КвалификаторыЧисла(5,0)));
	тзКорни.Колонки.Добавить("УжеОбработан", новый ОписаниеТипов("Булево"));
	
	Если Иерархия.СтроитсяАвтоматически Тогда
		Родитель = Справочники[Иерархия.ТипРеквизитаОР].ПустаяСсылка();
	Иначе 
		Родитель = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	КонецЕсли;
	
	НайтиКорни(ДеревоИерархии, сооИсключений, тзКорни, Родитель, 0);
	ВыраститьДеревья(тзКорни);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВТ_Дерево.ОбъектИерархии,
	               |	ВТ_Дерево.РодительИерархии,
	               |	ВТ_Дерево.ИндексКорня КАК ИндексКорня
	               |ПОМЕСТИТЬ Вт_Таб
	               |ИЗ
	               |	&таб КАК ВТ_Дерево
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Вт_Таб.ОбъектИерархии,
	               |	Вт_Таб.РодительИерархии,
	               |	Вт_Таб.ИндексКорня КАК ИндексКорня
	               |ИЗ
	               |	Вт_Таб КАК Вт_Таб
	               |ИТОГИ ПО
	               |	ИндексКорня";
	Запрос.УстановитьПараметр("Таб", тзКорни);
	
	Выборка = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗаписиМенялись = Ложь;
	Для каждого текСтрока из Выборка.Строки Цикл
		торо_РаботаСИерархией.ДобавитьВеткуВИерархию(текСтрока.Строки, МестоДобавления, НоваяИерархия, Ложь);
		ЗаписиМенялись = Истина;
	КонецЦикла;
	
	Если ЗаписиМенялись Тогда
		торо_РаботаСИерархией.ОбновитьДеревоГрупп(НоваяИерархия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура НайтиКорни(СтрокаРодитель, Исключения, Тз, Родитель, ИндексКорня)
	Строки = СтрокаРодитель.ПолучитьЭлементы();
	
	Для каждого текСтрока из Строки Цикл
		СтрокиСледующегоУровня = текСтрока.ПолучитьЭлементы();
		Если текСтрока.Выбран и Исключения[текСтрока.Ссылка]=неопределено Тогда
			ОИ = ?(текСтрока.Ссылка = "<>", торо_РаботаСИерархией.ПолучитьСоздатьОР(текСтрока.Ссылка), текСтрока.Ссылка);
			РИ = ?(родитель = "<>", торо_РаботаСИерархией.ПолучитьСоздатьОР(родитель), родитель);
			Если ОИ = РИ Тогда Продолжить; КонецЕсли;
			
			нс = тз.Добавить();
			нс.ОбъектИерархии = ОИ;
			нс.РодительИерархии = РИ;
			нс.УжеОбработан = СтрокиСледующегоУровня.Количество() > 0;
			Если НЕ ЗначениеЗаполнено(Родитель) или НЕ СтрокаРодитель.Выбран или Исключения[СтрокаРодитель.Ссылка] <> неопределено Тогда
				ИндексКорня = ИндексКорня + 1;
				нс.РодительИерархии = Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
			КонецЕсли;
			нс.ИндексКорня = ИндексКорня;
		КонецЕсли;
		НайтиКорни(текСтрока, Исключения, Тз, текСтрока.Ссылка, ИндексКорня);
	КонецЦикла;
КонецПроцедуры

&НаСервере 
Процедура ВыраститьДеревья(Корни)
	
	КоличествоЭлементов = 0;
	Пока истина Цикл
		ДобавитьУровень(Корни);
		Если КоличествоЭлементов = Корни.Количество() Тогда
			Прервать;
		КонецЕсли;
		КоличествоЭлементов = Корни.Количество();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Процедура ДобавитьУровень(Корни)
	
	Запрос = новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если Иерархия.СтроитсяАвтоматически Тогда
		
		ОбъектМетаданных = Метаданные.Справочники.Найти(Иерархия.ТипРеквизитаОР);
		Иерархический = ОбъектМетаданных.Иерархический;
		
		Если ОбъектМетаданных.Иерархический Тогда
			Запрос.Текст = "ВЫБРАТЬ
				|	спр.Ссылка КАК ОбъектИерархии,
				|	спр.Родитель КАК РодительИерархии
				|ПОМЕСТИТЬ Вт_регистр
				|ИЗ
				|	Справочник."+Иерархия.ТипРеквизитаОР+" КАК спр
				|ГДЕ
				|	спр.Родитель <> &ПустаяСсылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
				|	торо_ОбъектыРемонта."+ Иерархия.РеквизитОР +" 
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ
				|	НЕ торо_ОбъектыРемонта.ЭтоГруппа
            |ИНДЕКСИРОВАТЬ ПО
            |	ОбъектИерархии";
		Иначе 
			Запрос.Текст = "ВЫБРАТЬ
				|	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии,
				|	торо_ОбъектыРемонта."+ Иерархия.РеквизитОР +" РодительИерархии
				|ПОМЕСТИТЬ Вт_регистр
				|ИЗ
				|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
				|ГДЕ
				|	НЕ торо_ОбъектыРемонта.ЭтоГруппа
            |ИНДЕКСИРОВАТЬ ПО
            |	ОбъектИерархии";
		КонецЕсли;
		

		Запрос.УстановитьПараметр("ПустаяСсылка", Справочники[Иерархия.ТипРеквизитаОР].ПустаяСсылка());
		Запрос.Выполнить();
	ИначеЕсли Иерархия.ИзменяетсяДокументами Тогда
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархии,
		               |	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
		               |ПОМЕСТИТЬ Вт_Регистр
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(&Период, СтруктураИерархии = &СИ) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		               |ГДЕ
		               |	НЕ торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии";
		Запрос.УстановитьПараметр("Период", ТекущаяДата());
		Запрос.УстановитьПараметр("СИ", Иерархия);
		Запрос.Выполнить();
	Иначе 
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
		               |ПОМЕСТИТЬ ВТ_Регистр
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СИ
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	ОбъектИерархии";
		Запрос.УстановитьПараметр("СИ", Иерархия);
		Запрос.Выполнить();
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Корни.ОбъектИерархии КАК ОбъектИерархии,
	               |	Корни.ИндексКорня,
	               |	Корни.РодительИерархии,
	               |	Корни.УжеОбработан
	               |ПОМЕСТИТЬ Вт_Корни
	               |ИЗ
	               |	&Корни КАК Корни
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектИерархии
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_Регистр.ОбъектИерархии КАК ОбъектИерархии,
	               |	ВТ_Регистр.РодительИерархии,
	               |	Вт_Корни.ИндексКорня КАК ИндексКорня,
	               |	ЛОЖЬ КАК УжеОбработан
	               |ИЗ
	               |	ВТ_Регистр КАК ВТ_Регистр
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Вт_Корни КАК Вт_Корни
	               |		ПО ВТ_Регистр.РодительИерархии = Вт_Корни.ОбъектИерархии
	               |			И (НЕ Вт_Корни.УжеОбработан)
	               |ГДЕ
	               |	НЕ ВТ_Регистр.ОбъектИерархии ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	Вт_Корни.ОбъектИерархии,
	               |	Вт_Корни.РодительИерархии,
	               |	Вт_Корни.ИндексКорня,
	               |	ИСТИНА
	               |ИЗ
	               |	Вт_Корни КАК Вт_Корни";
				   
	Запрос.УстановитьПараметр("Корни", Корни);
	Корни = Запрос.Выполнить().Выгрузить();
КонецПроцедуры

&НаСервере
Процедура ДополнитьНаименованиями(Дерево)
	
	ДеревоЗначений = РеквизитФормыВЗначение(Дерево);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	
	Если СтроитсяАвтоматически1 Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка." + ИерархияТипРеквизитаОР1));
	КонецЕсли; 
	
	ТаблицаВыбранныхОбъектов = Новый ТаблицаЗначений;
	ТаблицаВыбранныхОбъектов.Колонки.Добавить("ОбъектИерархии", Новый ОписаниеТипов(МассивТипов));
		
	РаботаСДеревом("ЗаполнитьТаблицу", ДеревоЗначений.Строки, ТаблицаВыбранныхОбъектов);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабВыбранных.ОбъектИерархии
	               |ПОМЕСТИТЬ ТабВыбранных
	               |ИЗ
	               |	&ТабВыбранных КАК ТабВыбранных
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.Ссылка       КАК Ссылка,
	               |	торо_ОбъектыРемонта.Наименование КАК Наименование
	               |ИЗ
	               |	ТабВыбранных КАК ТабВыбранных
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |		ПО ТабВыбранных.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
	               |ГДЕ
	               |	НЕ торо_ОбъектыРемонта.Ссылка ЕСТЬ NULL";
				   
		   Если СтроитсяАвтоматически1 Тогда
			   Запрос.Текст = Запрос.Текст + "
			   |
			   |ОБЪЕДИНИТЬ ВСЕ
			   |
			   |ВЫБРАТЬ
			   |	Справочник.Ссылка,
			   |	Справочник.Наименование
			   |ИЗ
			   |	ТабВыбранных КАК ТабВыбранных
			   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ИерархияТипРеквизитаОР1 + " КАК Справочник
			   |		ПО ТабВыбранных.ОбъектИерархии = Справочник.Ссылка
			   |ГДЕ
			   |	НЕ Справочник.Ссылка ЕСТЬ NULL";
			   
		   КонецЕсли;
		   
		Запрос.УстановитьПараметр("ТабВыбранных", ТаблицаВыбранныхОбъектов);
		
		ТЗСНаименованиями = Запрос.Выполнить().Выгрузить();
		
		РаботаСДеревом("ЗополнитьНаименования", ДеревоЗначений.Строки, ТЗСНаименованиями);
		
		ЗначениеВРеквизитФормы(ДеревоЗначений, Дерево);
КонецПроцедуры

&НаСервере
Процедура РаботаСДеревом(Действие, СтрокиДерева, Таблица)
	
	Если Действие = "ЗаполнитьТаблицу" Тогда
		Для Каждого Строка ИЗ СтрокиДерева Цикл
			НС = Таблица.Добавить();
			НС.ОбъектИерархии = Строка.Ссылка;
			РаботаСДеревом(Действие, Строка.Строки, Таблица);
		КонецЦикла;
	ИначеЕсли Действие = "ЗополнитьНаименования" Тогда
		Для Каждого Строка ИЗ СтрокиДерева Цикл
			
			МассивСтрокТаблицы = Таблица.НайтиСтроки(Новый Структура("Ссылка", Строка.Ссылка));
			Если МассивСтрокТаблицы.Количество() > 0 Тогда
				Строка.Наименование = МассивСтрокТаблицы[0].Наименование;
			КонецЕсли;
			РаботаСДеревом(Действие, Строка.Строки, Таблица);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыИерархии(ИерархияСсылка)
	
	Если не ЗначениеЗаполнено(ИерархияСсылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СтруктурыОР.РазрешенВводНовыхОР,
	               |	торо_СтруктурыОР.ИзменяетсяДокументами,
	               |	торо_СтруктурыОР.СтроитсяАвтоматически,
				   |	торо_СтруктурыОР.РеквизитОР,
				   |	торо_СтруктурыОР.ТипРеквизитаОР
	               |ИЗ
	               |	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	               |ГДЕ
	               |	торо_СтруктурыОР.Ссылка = &СтруктураИерархии";
	Запрос.УстановитьПараметр("СтруктураИерархии",ИерархияСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("СтруктураИерархии"    ,ИерархияСсылка);
	СтруктураВозврата.Вставить("РазрешенВводНовыхОР"  ,Выборка.РазрешенВводНовыхОР);
	СтруктураВозврата.Вставить("ИзменяетсяДокументами",Выборка.ИзменяетсяДокументами);
	СтруктураВозврата.Вставить("СтроитсяАвтоматически",Выборка.СтроитсяАвтоматически);
	СтруктураВозврата.Вставить("РеквизитОР"           ,Выборка.РеквизитОР);
	СтруктураВозврата.Вставить("ТипРеквизитаОР"       ,Выборка.ТипРеквизитаОР);
	Если Выборка.СтроитсяАвтоматически И Выборка.ТипРеквизитаОР <> "" Тогда
		СтруктураВозврата.Вставить("ИерархическийСправочник",Метаданные.Справочники[Выборка.ТипРеквизитаОР].Иерархический);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруНовыхСтрок(Ссылка, ПараметрыСтруктурыИерархии, МассивЭлементов, СтруктураПараметровФормы)
	
	Возврат Справочники.торо_ОбъектыРемонта.ПолучитьСтруктуруНовыхСтрокДляДереваПриРазворачивании(Ссылка, ПараметрыСтруктурыИерархии,МассивЭлементов,СтруктураПараметровФормы);	
	
КонецФункции

&НаСервереБезКонтекста
Процедура ДобавитьЗаписиВРегистрИерархическихСтруктур(ОбъектИерархии, РодительИерархии, СтруктураИерархии)
		
	// Добавление записи в регистр
	МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИерархии     = ОбъектИерархии;
	МенеджерЗаписи.СтруктураИерархии  = СтруктураИерархии;
	МенеджерЗаписи.РодительИерархии   = ?(ТипЗнч(РодительИерархии) = Тип("СправочникСсылка.торо_СтруктурыОР"), Неопределено, РодительИерархии);
	
	Попытка
		МенеджерЗаписи.Записать(Истина);
	Исключение
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		ТекстСообщения = НСтр("ru = 'Не удалось переместить или добавить объект ремонта %ОбъектИерархии% в группу'");
		Сообщение.Текст = СтрЗаменить(ТекстСообщения, "%ОбъектИерархии%", ОбъектИерархии);
		Сообщение.Сообщить(); 
		ОтменитьТранзакцию();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивВыбранныхЗначенийНаСервере()
	
	ДеревоИерархииОбъект = РеквизитФормыВЗначение("ДеревоИерархии");
	
	Мас = ДеревоИерархииОбъект.Строки.НайтиСтроки(Новый Структура("Выбран", Истина), Истина);
	
	Массив = Новый Массив;
	Для каждого Элем Из Мас Цикл
		Массив.Добавить(Элем.Ссылка);
	КонецЦикла; 
	
	Возврат Массив;
	
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьЗаписиВРегистреИерархическихСтруктур(ВыбранноеЗначение, РодительИерархии, СтруктураИерархии)
	
	// Удаление записи регистра 
	МенеджерЗаписи = РегистрыСведений.торо_ИерархическиеСтруктурыОР.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектИерархии     = ВыбранноеЗначение;
	МенеджерЗаписи.СтруктураИерархии  = СтруктураИерархии;
	МенеджерЗаписи.РодительИерархии   = РодительИерархии;
	
	МенеджерЗаписи.Удалить();
	
КонецПроцедуры

&НаСервереБезКонтекста
// Процедура выполняет проверку на наличие добавляемых объектов ремонта
// в новой иерархии
// Параметры: 
//			МассивОР - Массив - содержит массив добавляемых объеков ремонта.
//
//			СтруктураИерархии - СправочникСсылка.торо_СтруктурыОР - иерархия, в которую планируется 
//								добавление ОР.
Функция ПроверитьЕстьЛиВыбранноеЗначениеВИерархии(МассивОР, СтруктураИерархии, ТипРеквизитаОР = Неопределено)
	
	НеоходимоВернутьТЗ = (ТипЗнч(МассивОР) = Тип("Массив"));
	
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.торо_ОбъектыРемонта"));
	
	Если Не ТипРеквизитаОР = Неопределено Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка." + ТипРеквизитаОР));
	КонецЕсли; 
	
	ТаблицаВыбранныхОбъектов = Новый ТаблицаЗначений;
	ТаблицаВыбранныхОбъектов.Колонки.Добавить("ОбъектИерархии", Новый ОписаниеТипов(МассивТипов));
	
	Если ТипЗнч(МассивОР) = Тип("Массив") Тогда
		Для каждого ОР Из МассивОР Цикл
			НС = ТаблицаВыбранныхОбъектов.Добавить();
			НС.ОбъектИерархии = ОР;
		КонецЦикла;
	Иначе
		НС = ТаблицаВыбранныхОбъектов.Добавить();
		НС.ОбъектИерархии = МассивОР;
	КонецЕсли; 

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаВыбранныхОбъектов.ОбъектИерархии
	               |ПОМЕСТИТЬ ТаблицаВыбранныхОбъектов
	               |ИЗ
	               |	&ТаблицаВыбранныхОбъектов КАК ТаблицаВыбранныхОбъектов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |";
				   
	Запрос.УстановитьПараметр("ТаблицаВыбранныхОбъектов", ТаблицаВыбранныхОбъектов);
    Запрос.УстановитьПараметр("СтроитсяАвтоматически"   , Не ТипРеквизитаОР = Неопределено);
	Запрос.УстановитьПараметр("СтруктураИерархии"       , СтруктураИерархии);
	
	Если СтруктураИерархии.ИзменяетсяДокументами Тогда 
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВыбранныхОбъектов КАК ТаблицаВыбранныхОбъектов
		|		ПО (торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии = ТаблицаВыбранныхОбъектов.ОбъектИерархии
		|				ИЛИ ВЫБОР
		|					КОГДА &СтроитсяАвтоматически
		|							И НЕ ТИПЗНАЧЕНИЯ(ТаблицаВыбранныхОбъектов.ОбъектИерархии) = ТИП(Справочник.торо_ОбъектыРемонта)
		|						ТОГДА ТаблицаВыбранныхОбъектов.ОбъектИерархии.Наименование = торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии.Наименование
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ)
		|ГДЕ
		|	НЕ торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален";
				
	Иначе
		
		Запрос.Текст = Запрос.Текст + 
		"ВЫБРАТЬ
	               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
	               |	торо_ИерархическиеСтруктурыОР.РодительИерархии
	               |ИЗ
	               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВыбранныхОбъектов КАК ТаблицаВыбранныхОбъектов
	               |		ПО (торо_ИерархическиеСтруктурыОР.ОбъектИерархии = ТаблицаВыбранныхОбъектов.ОбъектИерархии
				   |				ИЛИ ВЫБОР
	               |					КОГДА &СтроитсяАвтоматически
	               |							И НЕ ТИПЗНАЧЕНИЯ(ТаблицаВыбранныхОбъектов.ОбъектИерархии) = ТИП(Справочник.торо_ОбъектыРемонта)
	               |						ТОГДА ТаблицаВыбранныхОбъектов.ОбъектИерархии.Наименование = торо_ИерархическиеСтруктурыОР.ОбъектИерархии.Наименование
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ) 
				   |			И торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии";
		
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	
	Если НеоходимоВернутьТЗ Тогда
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат Новый ТаблицаЗначений;
			
		Иначе
			
			Возврат РезультатЗапроса.Выгрузить();
			
		КонецЕсли
	Иначе
		Если РезультатЗапроса.Пустой() Тогда
			
			Возврат Неопределено;
			
		Иначе
			
			Возврат РезультатЗапроса.Выгрузить()[0].РодительИерархии ;
			
		КонецЕсли
		
	КонецЕсли; 
	
	

КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьПредыдущееПоложениеВИерархии(СтруктураИерархии, ОбъектРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии,
	|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален
	|ИЗ
	|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
	|			&Дата,
	|			ОбъектИерархии = &ОбъектРемонта
	|				И СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних";
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРемонта);
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Не Выборка.Удален Тогда
			Если Выборка.РодительИерархии = Неопределено Тогда
				Возврат "Корневая группа";
			КонецЕсли;
			
			Возврат Выборка.РодительИерархии;
		КонецЕсли;
	КонецЕсли;
	Возврат "Внесен в структуру иерархии";
	
КонецФункции

&НаСервере
Функция ПолучитьВсеОРПрисутствующиеВНовойИерархи(РодительИерархииНов)
	
	тзВыбранныеЭлементы = ПолучитьВыбранныеЭлементы();
	
	масУдаления = Новый Массив;
	Для каждого текСтрока из тзВыбранныеЭлементы Цикл
		ИмяДляСравнения = торо_РаботаСИерархией.ПолучитьСоздатьОР(текСтрока.ОбъектИерархии, Ложь);
		Если ИмяДляСравнения = Неопределено Тогда 
			масУдаления.Добавить(текСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого текСтрока из масУдаления Цикл
		тзВыбранныеЭлементы.Удалить(ТекСтрока);
	КонецЦикла;
	
	тзВсеЭлементы = торо_РаботаСИерархией.ПолучитьТаблицуИерархии(НоваяИерархия, ТекущаяДата());
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВыбранныеЭлементы.ОбъектИерархии КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ВыбЭлементы
	               |ИЗ
	               |	&ВыбранныеЭлементы КАК ВыбранныеЭлементы
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВсяИерархия.ОбъектИерархии КАК ОбъектРемонта
	               |ПОМЕСТИТЬ ВТ_ВсяИерархия
	               |ИЗ
	               |	&ВсяИерархия КАК ВсяИерархия
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ВсяИерархия.ОбъектРемонта
	               |ИЗ
	               |	ВТ_ВыбЭлементы КАК ВТ_ВыбЭлементы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВсяИерархия КАК ВТ_ВсяИерархия
	               |		ПО ВТ_ВыбЭлементы.ОбъектРемонта = ВТ_ВсяИерархия.ОбъектРемонта";
				   
	Запрос.УстановитьПараметр("ВыбранныеЭлементы", тзВыбранныеЭлементы);
	Запрос.УстановитьПараметр("ВсяИерархия", тзВсеЭлементы);
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	Возврат Выборка.ВыгрузитьКолонку("ОбъектРемонта");
	
КонецФункции

&НаСервере
Процедура ДобавитьПодчиненныеОРВМассив(ТабИерархии, РодительИерархии, ОРВерхнегоУровня, ДеревоНовойИерархииОбъект, СтрокаДерева)
	
	МассивСтрок = ТабИерархии.НайтиСтроки(Новый Структура("РодительИерархии", РодительИерархии));
	
	Для каждого Стр Из МассивСтрок Цикл
		
		Если МассивЭлементовДерева.НайтиПоЗначению(Стр.ОбъектИерархии) = Неопределено Тогда
			
			МассивЭлементовДерева.Добавить(Стр.ОбъектИерархии);
			
			ЗначениеДляЗаполнения = РодительИерархии;
			
			Если Не ТипЗнч(РодительИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				
				НаименованиеДляПоиска = "";
				Если ТипЗнч(СтрокаДерева) = тип("СтрокаДереваЗначений") Тогда
					НаименованиеДляПоиска = СтрокаДерева.Наименование;
				Иначе
					НаименованиеДляПоиска = СтрокаДерева.ОбъектИерархии.Наименование;
				КонецЕсли;
				
				МассивИмеющихсяОбъектов = ДеревоНовойИерархииОбъект.Строки.НайтиСтроки(Новый Структура("Наименование", НаименованиеДляПоиска), Истина);
				
				Если МассивИмеющихсяОбъектов.Количество() > 0 Тогда
					ЗначениеДляЗаполнения = МассивИмеющихсяОбъектов[0].Ссылка;
				Иначе
					ЗначениеДляЗаполнения = НаименованиеДляПоиска;
				КонецЕсли;
				
			КонецЕсли;

			ОбъектИерархии = Стр.ОбъектИерархии;
			
			Если Не ТипЗнч(Стр.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") Тогда
				
				МассивИмеющихсяОбъектов = ДеревоНовойИерархииОбъект.Строки.НайтиСтроки(Новый Структура("Наименование", Стр.ОбъектИерархии.Наименование), Истина);
				
				Если МассивИмеющихсяОбъектов.Количество() > 0 Тогда
					ОбъектИерархии = МассивИмеющихсяОбъектов[0].Ссылка;
				Иначе
					ОбъектИерархии = Стр.ОбъектИерархии.Наименование;
				КонецЕсли;
				
			КонецЕсли;

			
			НС = ТабСоответствия.Добавить();
			НС.ОРВерхнегоУровня    = ОРВерхнегоУровня;
			НС.ОбъектРемонта       = ОбъектИерархии;
			НС.РодительИерархииНов = ЗначениеДляЗаполнения;
			
		КонецЕсли;
		ДобавитьПодчиненныеОРВМассив(ТабИерархии, Стр.ОбъектИерархии, ОРВерхнегоУровня, ДеревоНовойИерархииОбъект, Стр);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокуДереваВДокумент(СтрокиДерева, ФормаДокумента, ТекОР)
	
	Для каждого ТекСтрокаДерева Из СтрокиДерева Цикл
		
		НовСтрокаИзменения = ФормаДокумента.ПоложенияВСтруктуреИерархии.Добавить();
		НовСтрокаИзменения.РодительИерархии = ТекОР;
		НовСтрокаИзменения.ОбъектИерархии = ТекСтрокаДерева.Ссылка;
		НовСтрокаИзменения.ПредыдущееПоложение	 = ОпределитьПредыдущееПоложениеВИерархии(НоваяИерархия, ТекСтрокаДерева.Ссылка);
		
		ДобавитьСтрокуДереваВДокумент(ТекСтрокаДерева.ПолучитьЭлементы(),ФормаДокумента, ТекСтрокаДерева.Ссылка)
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаПолнотыНаСервере(Пометка)
	
	ПолучитьОРОтсутствующиеВНовойИерархии();
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоИерархии");
	
	РасставитьВыделение(ДеревоОбъект, Ложь);
	
	Для каждого Элем Из СписокОтсутствующихВНовИерахииОР Цикл
		СтрокаДерева = ДеревоОбъект.Строки.Найти(Элем.Значение, ,Истина);
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.Подсвечивать = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоОбъект, "ДеревоИерархии");
	
	УсловноеОформление.Элементы.Очистить();
	Если Пометка Тогда
		ЭлемУслОформ = УсловноеОформление.Элементы.Добавить();
		ЭлемУслОформ.Использование = Пометка;
		
		ОтборУслОформления = ЭлемУслОформ.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборУслОформления.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборУслОформления.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоИерархии.Подсвечивать");
		ОтборУслОформления.ПравоеЗначение = Истина;
		ОтборУслОформления.Использование = Истина;
		
		ОформлениеУслОформления = ЭлемУслОформ.Оформление.Элементы[0];
		ОформлениеУслОформления.Использование = Истина;
		ОформлениеУслОформления.Значение = Новый Цвет(153,204,255);
		
		ПолеУслОформления = ЭлемУслОформ.Поля.Элементы.Добавить();
		ПолеУслОформления.Использование = Истина;
		ПолеУслОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоИерархииСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСостояниеДерева()
	
	ТекущиеДанные = Элементы.ДеревоИерархии.ТекущиеДанные;
	
	СтруктураИерархии = Иерархия;
	
	СостояниеДереваОР = Новый Структура;
	СостояниеДереваОР.Вставить("СтруктураИерархии",СтруктураИерархии);
	СостояниеДереваОР.Вставить("ТекОР",?(ТекущиеДанные = Неопределено, ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"),ТекущиеДанные.Ссылка));
	МассивОткрытыхОР = Новый Массив;
	МассивОткрытыхОР.Добавить(ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"));
	
	ЭлементыДерева = ДеревоИерархии.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		ПолучитьМассивРазвернутыхОР(Элементы.ДеревоИерархии,МассивОткрытыхОР,СтрокаДерева);
	КонецЦикла;
	СостояниеДереваОР.Вставить("МассивОткрытыхОР",МассивОткрытыхОР);
	Возврат СостояниеДереваОР;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьМассивРазвернутыхОР(ДеревоЭлемент,МассивОткрытыхОР,Строка)
	
	Если ДеревоЭлемент.Развернут(Строка.ПолучитьИдентификатор()) Тогда
		МассивОткрытыхОР.Добавить(Строка.Ссылка);
		Для Каждого СтрокаПодчиненная Из Строка.ПолучитьЭлементы() Цикл
			ПолучитьМассивРазвернутыхОР(ДеревоЭлемент,МассивОткрытыхОР,СтрокаПодчиненная);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьСостояниеДереваНаКлиенте()
	
	МассивОткрытыхОР = СостояниеДереваОР1.МассивОткрытыхОР;
	Для Каждого Строка Из ДеревоИерархии.ПолучитьЭлементы() Цикл
		
		РазвернутьВетвиДерева(МассивОткрытыхОР,Строка,Элементы.ДеревоИерархии,СостояниеДереваОР1.ТекОР);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВетвиДерева(МассивОР,СтрокаДерева,ДеревоЭлемент,ТекОР)
	
	Если МассивОР.Найти(СтрокаДерева.Ссылка) <> Неопределено Тогда
		
		ДеревоЭлемент.Развернуть(СтрокаДерева.ПолучитьИдентификатор());
		
	КонецЕсли;
	
	Если СтрокаДерева.Ссылка = ТекОР Тогда 
		ДеревоЭлемент.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	КонецЕсли;
	
	Для Каждого СтрокаДереваПодчиненная Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		РазвернутьВетвиДерева(МассивОР,СтрокаДереваПодчиненная,ДеревоЭлемент,ТекОР);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОРОтсутствующиеВНовойИерархии()
	
	СписокОтсутствующихВНовИерахииОР.Очистить();
	
	Запрос = Новый Запрос;
	
	Если СтроитсяАвтоматически1 Тогда		
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_ОбъектыРемонта.Ссылка КАК ОбъектИерархии
		               |ПОМЕСТИТЬ ТабСтаройИерархии_ДляСоединения
		               |ИЗ
		               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |ГДЕ
		               |	НЕ торо_ОбъектыРемонта.ЭтоГруппа";
		
		Запрос1 = Новый Запрос;
		Запрос1.Текст = "ВЫБРАТЬ
			|	СправочникДляПостроения.Ссылка КАК ОбъектИерархии		
			|ИЗ
			|	Справочник." + ИерархияТипРеквизитаОР1 + " КАК СправочникДляПостроения
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	""<>""";
		
		резЗапроса = Запрос1.Выполнить();
		Выборка = резЗапроса.Выгрузить();
		Выборка.Колонки.Добавить("ОбъектИерархииДляСравнения", Новый ОписаниеТипов("СправочникСсылка.торо_объектыРемонта"));
		
		Для каждого текСтрока из Выборка Цикл 
			текОр = торо_РаботаСИерархией.ПолучитьСоздатьОР(текСтрока.ОбъектИерархии, Ложь);
			текСтрока.ОбъектИерархииДляСравнения = ТекОР;
		КонецЦикла;
		
		Запрос.текст = Запрос.текст + "
			|
			|;
			|//////////////////
			|
			|ВЫБРАТЬ
			|	Таб.ОбъектИерархии КАК ОбъектИерархии,
			|	Таб.ОбъектИерархииДляСравнения КАК ОбъектИерархииДляСравнения
			|ПОМЕСТИТЬ Вт_Таб2
			|ИЗ
			|	&Таб КАК Таб
			|;
			|/////////////////
			|ВЫБРАТЬ
			|	Таб1.ОбъектИерархии КАК ОбъектИерархии,
			|	Таб1.ОбъектИерархии КАК ОбъектИерархииДляСравнения
			|ПОМЕСТИТЬ ТабСтаройИерархии
			|ИЗ
			|	ТабСтаройИерархии_ДляСоединения КАК ТАб1
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Таб2.ОбъектИерархии КАК ОбъектИерархии,
			|	Таб2.ОбъектИерархииДляСравнения КАК ОбъектИерархииДляСравнения
			|ИЗ
			|	ВТ_Таб2 КАК Таб2";
			
		Запрос.УстановитьПараметр("Таб", Выборка);
		
	ИначеЕсли Иерархия.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = "ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии КАК ОбъектИерархииДляСравнения
		|ПОМЕСТИТЬ ТабСтаройИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	НЕ торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален ";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархииДляСравнения
		|ПОМЕСТИТЬ ТабСтаройИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии ";
	КонецЕсли;
	
	Если НоваяИерархия.ИзменяетсяДокументами Тогда
		
		Запрос.Текст = Запрос.Текст + " ;
		|	ВЫБРАТЬ
		|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии
		|ПОМЕСТИТЬ ТабНовойИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &НоваяСтруктураИерархии) КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
		|ГДЕ
		|	НЕ торо_РасположениеОРВСтруктуреИерархииСрезПоследних.Удален";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст + " ;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии
		|ПОМЕСТИТЬ ТабНовойИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		|ГДЕ
		|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &НоваяСтруктураИерархии";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + " ;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабСтаройИерархии.ОбъектИерархии КАК ОбъектСтаройИерархии
		|ИЗ
		|	ТабСтаройИерархии КАК ТабСтаройИерархии
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабНовойИерархии КАК ТабНовойИерархии
		|		ПО ТабСтаройИерархии.ОбъектИерархии = ТабНовойИерархии.ОбъектИерархии
		|ИЛИ ВЫБОР
		|			КОГДА &СтроитсяАвтоматически1  И НЕ (ТипЗначения(ТабСтаройИерархии.ОбъектИерархии) = Тип(Справочник.торо_ОбъектыРемонта))
		|				ТОГДА ТабСтаройИерархии.ОбъектИерархииДляСравнения = ТабНовойИерархии.ОбъектИерархии
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|ГДЕ
		|	НЕ ТабНовойИерархии.ОбъектИерархии ЕСТЬ NULL ";

	Запрос.УстановитьПараметр("НоваяСтруктураИерархии", НоваяИерархия);
	Запрос.УстановитьПараметр("СтруктураИерархии"     , Иерархия);
	Запрос.УстановитьПараметр("СтроитсяАвтоматически1", СтроитсяАвтоматически1);

	РезультатЗапроса = Запрос.Выполнить();

	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		
		СписокОтсутствующихВНовИерахииОР.Добавить(Выборка.ОбъектСтаройИерархии);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ОпределитьВидимостьКнопокНаСервере()
	
	Дерево = РеквизитФормыВЗначение("ДеревоИерархии");
	
	МассивСтрокДЗ = Дерево.Строки.НайтиСтроки(Новый Структура("Выбран",Истина), Истина);
	Если МассивСтрокДЗ.Количество() > 1 Тогда
		
		Возврат Истина;
		
	ИначеЕсли МассивСтрокДЗ.Количество() = 1 
		И МассивСтрокДЗ[0] <> Дерево.Строки[0] Тогда
		
		Возврат Истина;
		
	Иначе 
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаСервере 
функция ИерарахияАвтоматическая(пИерархия)
	Возврат пИерархия.СтроитсяАвтоматически;
КонецФункции

&НаСервере 
Процедура СоздатьДокументИзменения(СИ, МассивВыбрЗнач, Родитель)
	
	ДокОбъект = Документы.торо_ИзменениеПоложенияВСтруктуреИерархии.СоздатьДокумент();
	ДокОбъект.Дата = ТекущаяДата();
	ДокОбъект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновнаяОрганизация", Истина);
	ДокОбъект.Подразделение = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР", "ОсновноеПодразделение", Истина);		
	ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();
	ДокОбъект.СтруктураИерархии = СИ;
	
	Для каждого ВыбранноеЗначение Из МассивВыбрЗнач Цикл
		НовСтрокаИзменения = докОбъект.ПоложенияВСтруктуреИерархии.Добавить();
		Если ТипЗнч(Родитель) = Тип("СправочникСсылка.торо_СтруктурыОР") Тогда
			НовСтрокаИзменения.РодительИерархии = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
		Иначе 
			НовСтрокаИзменения.РодительИерархии = торо_РаботаСИерархией.ПолучитьСоздатьОР(Родитель);
		КонецЕсли;
		НовСтрокаИзменения.ОбъектИерархии = торо_РаботаСИерархией.ПолучитьСоздатьОР(ВыбранноеЗначение);
		НовСтрокаИзменения.ПредыдущееПоложение	 = ОпределитьПредыдущееПоложениеВИерархии(СИ, ВыбранноеЗначение);
	КонецЦикла;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru='При проведении документа произошла ошибка!'"));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере 
Функция ПолучитьТипИерарахии(Иерархия)
	Возврат Иерархия.ИзменяетсяДокументами;
КонецФункции

СостояниеДереваОР1 = Новый Структура("МассивОткрытыхОР",Новый Массив);
СостояниеДереваОР2 = Новый Структура("МассивОткрытыхОР",Новый Массив);
#КонецОбласти
