////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем СостояниеДереваОР;

&НаСервере
перем ДатаДокумента;

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("СтруктураИерархии") И ЗначениеЗаполнено(Параметры.СтруктураИерархии) Тогда
		ТекСтруктураИерархии = Параметры.СтруктураИерархии;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
																			"НастройкиТОиР",
																			"ОсновнаяСтруктураИерархии",
																			Истина);
	КонецЕсли;
	
	УчитыватьИерархиюЭлементов = "Не учитывать иерархию элементов";
	
	ЗапрашиватьВидРемонтныхРабот 		= Истина;
	ЗапрашиватьВидПараметровНаработки 	= Истина;
	
 
	
	Если Параметры.КлючНазначенияИспользования      = "торо_ПланГрафикРемонта" 
		ИЛИ Параметры.КлючНазначенияИспользования   = "торо_КалькуляторРЦ" Тогда 
		
		ВидПодбора = "ВидРемонтныхРабот";
		
	ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_УчетКонтролируемыхПоказателей" Тогда 
		
		ВидПодбора="КонтролируемыеПоказатели";
		
	ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_УчетНаработкиОборудования"
		ИЛИ Параметры.КлючНазначенияИспользования   = "торо_УстановкаПроизвольногоЗначенияНаработки" Тогда 
		
		ВидПодбора="ВидПараметровНаработки"; 	
		
		Если Параметры.Свойство("ДатаСнятияПоказателей") И ЗначениеЗаполнено(Параметры.ДатаСнятияПоказателей) Тогда
			ДатаСнятияПоказателей = Параметры.ДатаСнятияПоказателей;
		Иначе
			ДатаСнятияПоказателей = ТекущаяДата();
		КонецЕсли;
		
	ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_ВводНачальныхДанных" Тогда 
		
		ВидПодбора="ВводНачальныхДанных";
		
	ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_СостоянияОбъектовРемонта" Тогда 
		
		ВидПодбора="НастройкаПодбораВводНачальныхДанныхСоВременем";
		
		Если Параметры.Свойство("ВидОперации") И Параметры.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации Тогда
			Элементы.ДатаНачалаУмолчание.Заголовок = НСтр("ru = 'Дата изменения состояния:'");
			Элементы.ДатаОкончанияУмолчание.Видимость = Ложь;
		КонецЕсли;	
		
	ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_ВнешнееОснованиеДляРабот" 
		ИЛИ Параметры.КлючНазначенияИспользования = "торо_ТиповыеОР" Тогда
		
		ВидПодбора="Предписание";
		
	Иначе
		
		ВидПодбора="Настройка подбора";
		
	КонецЕсли;
	
	Если Параметры.Свойство("ИспользоватьДокументыЖЦОборудования") Тогда
		ФОИспользоватьДокументыЖЦОборудования = Параметры.ИспользоватьДокументыЖЦОборудования;
	Иначе
		ФОИспользоватьДокументыЖЦОборудования = ПолучитьФункциональнуюОпцию("торо_ИспользоватьДокументыПринятияИСписанияОборудования");
	КонецЕсли;
	
	Если Параметры.Свойство("ДатаДокумента") Тогда
		ДатаДокумента = Параметры.ДатаДокумента;
	Иначе 
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	
	Если Параметры.КлючНазначенияИспользования = "торо_ПланГрафикРемонта" Тогда
		Элементы.ТолькоВидыРемонтовППР.Видимость = Истина;
		ТолькоВидыРемонтовППР = Истина;
	КонецЕсли; 
	
	Если ФОИспользоватьДокументыЖЦОборудования Тогда
		ПолучитьСписокСтатусовНаСервере(СписокСтатусов,ВидПодбора);
	Иначе
		Элементы.СписокОбъектовСтатусВУчете.Видимость = Ложь;
	КонецЕсли;
	
	ЗаполнитьПараметрыИерархии();
	
	СтруктураПараметровИерархии = Новый Структура(
	"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник,РодительИерархии",
	ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
	
	ЭтаФорма.ОрганизацияДляОтбора = ?(Параметры.Свойство("Организация"), Параметры.Организация, Справочники.Организации.ПустаяСсылка());
	ЭтаФорма.ПодразделениеДляОтбора = ?(Параметры.Свойство("Подразделение"), Параметры.Подразделение, Справочники.СтруктураПредприятия.ПустаяСсылка());
	ЭтаФорма.НеУчаствуетВПланировании = ?(Параметры.Свойство("НеУчаствуетВПланировании"), Параметры.НеУчаствуетВПланировании, Ложь);
	
	СтруктураПараметровФормы = Новый Структура(
	"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта, СписокСтатусов, ВидПодбора, Организация, Подразделение, НеУчаствуетВПланировании",
	ЭтаФорма.ИмяФормы, Неопределено, Неопределено, СписокСтатусов, ВидПодбора, ЭтаФорма.ОрганизацияДляОтбора, ЭтаФорма.ПодразделениеДляОтбора, НеУчаствуетВПланировании);
	
	МассивСтруктурОР = Справочники.торо_ОбъектыРемонта.ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии,СтруктураПараметровФормы);
			
	ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР);
	
	Элементы.ОрганизацияДляОтбора.Видимость = ЗначениеЗаполнено(ЭтаФорма.ОрганизацияДляОтбора);
	Элементы.ПодразделениеДляОтбора.Видимость = ЗначениеЗаполнено(ЭтаФорма.ПодразделениеДляОтбора);
	
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ТекСтруктураИерархииПриИзменении(Элемент)
	
	ЗаполнитьДеревоНаСервере();
	
	Для каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		
		Элементы.Дерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНормативамПриИзменении(Элемент)
	ОбновитьДоступностьФлагов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево
&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
	
	ТекДанные = Дерево.НайтиПоИдентификатору(Строка);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Ссылка) И НЕ ТекДанные.СвязиОбновлялись Тогда
		СтрокиДерева = ТекДанные.ПолучитьЭлементы();
		Если СтрокиДерева.Количество() > 0 Тогда
			СтруктураПараметровИерархии = Новый Структура(
			"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник",
			ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
			
			СтруктураПараметровФормы = Новый Структура(
			"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта, СписокСтатусов, Организация, Подразделение, НеУчаствуетВПланировании",
			ЭтаФорма.ИмяФормы, СостояниеДереваОР, Неопределено, СписокСтатусов, ЭтаФорма.ОрганизацияДляОтбора, ЭтаФорма.ПодразделениеДляОтбора, ЭтаФорма.НеУчаствуетВПланировании);
			
			МассивЭлементов = Новый Массив;
			Для Каждого СтрокаДерева Из СтрокиДерева Цикл
				МассивЭлементов.Добавить(СтрокаДерева.Ссылка);
			КонецЦикла;
			
			СтруктураДобавления = ПолучитьСтруктуруНовыхСтрок(ТекДанные.Ссылка, СтруктураПараметровИерархии,МассивЭлементов,СтруктураПараметровФормы);
		КонецЕсли;
		ТекДанные.СвязиОбновлялись = Истина;
		
		Для каждого СтрокаДерева Из СтрокиДерева Цикл
			
			Если СтруктураДобавления = Неопределено Тогда Продолжить; КонецЕсли;
			
			Для каждого ТекЭлем Из СтруктураДобавления Цикл
				Если ТекЭлем.Родитель <> СтрокаДерева.Ссылка Тогда
					Продолжить;
				КонецЕсли;
				НС = СтрокаДерева.ПолучитьЭлементы().Добавить();
				НС.Ссылка                        = ТекЭлем.ОбъектИерархии;
				НС.РеквизитДопУпорядочивания     = ТекЭлем.РеквизитДопУпорядочиванияОР;
				
				НС.РодительИерархии              = ТекЭлем.Родитель;
				НС.ПометкаУдаления               = ТекЭлем.ПометкаУдаления;
				НС.Картинка                      = ТекЭлем.ИндексКартинки;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборЗначения();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов
&НаКлиенте
Процедура СписокОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Выбрать(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Выбрать(Команда)
		
	ВыделенныеСтроки = Элементы.СписокОбъектов.ВыделенныеСтроки;
	
	МассивВыбранныхОР = Новый Массив;
	ЗначениеВозврата = ОтобратьОбъекты(ВыделенныеСтроки, МассивВыбранныхОР);
	
	Если ТипЗнч(ЗначениеВозврата) = Тип("ДанныеФормыДерево") Тогда
		
		ОповеститьОВыборе(ЗначениеВозврата);
		
	ИначеЕсли ТипЗнч(ЗначениеВозврата) = Тип("СписокЗначений") Тогда
		
		Если ВидПодбора="ВидРемонтныхРабот" Тогда
			ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды ремонтных работ'");
		ИначеЕсли ВидПодбора="КонтролируемыеПоказатели" Тогда
			ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды контролируемых показателей'");
		ИначеЕсли ВидПодбора = "ВидПараметровНаработки" Тогда
			ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды параметров наработки'");
		КонецЕсли;
		
		ЗначениеВозврата.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьЗавершение1",ЭтотОбъект, Новый Структура("МассивВыбранныхОР", МассивВыбранныхОР)),ТекстЗаголовкаОкна);
		
	ИначеЕсли ТипЗнч(ЗначениеВозврата) = Тип("Структура") Тогда
		
		Если ВидПодбора = "ВводНачальныхДанных" Тогда
			
			ОповеститьОВыборе(ЗначениеВозврата);
			
		Иначе
		
			ВыбраныЭлементыРемонтов = Ложь;
		
			СтруктураДляПередачи = Новый Структура();
			Если ЗначениеВозврата.Свойство("СписокВидовРемонтов") Тогда
			
				ЗначениеВозврата.СписокВидовРемонтов.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьСписокВидовРемонтов",ЭтотОбъект, 
																					Новый Структура("СтруктураДляПередачи, ЗначениеВозврата", СтруктураДляПередачи, ЗначениеВозврата)),
																		  НСтр("ru = 'Выберите виды ремонтных работ'"));
				Возврат;
			
			КонецЕсли;
			
			ВыбратьФрагмент1(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ЗначениеВозврата);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР)
	
	НС = Дерево.ПолучитьЭлементы().Добавить();
	НС.Ссылка = ТекСтруктураИерархии;
	НС.Картинка = 4;
	НС.СвязиОбновлялись = Истина;
	
	Если СтроитсяАвтоматически Тогда
		РодительИерархии = Справочники[ИерархияТипРеквизитаОР].ПустаяСсылка();
	Иначе
		РодительИерархии = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
	КонецЕсли;
	
	Для Каждого ЭлементКорневой Из МассивСтруктурОР Цикл
		Если ЭлементКорневой.РодительИерархии = РодительИерархии Тогда
			
			НСКорневая = НС.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НСКорневая,ЭлементКорневой);
			НСКорневая.Ссылка = ЭлементКорневой.ОбъектИерархии;
			НСКорневая.Картинка = ЭлементКорневой.ИндексКартинки;
			НСКорневая.РеквизитДопУпорядочивания = ЭлементКорневой.РеквизитДопУпорядочиванияОР;
			Для Каждого ЭлементПодчиненный Из МассивСтруктурОР Цикл
				Если ЭлементПодчиненный.РодительИерархии = ЭлементКорневой.ОбъектИерархии Тогда
					НСПодчиненная = НСКорневая.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НСПодчиненная,ЭлементПодчиненный);
					НСПодчиненная.Ссылка = ЭлементПодчиненный.ОбъектИерархии;
					НСПодчиненная.Картинка = ЭлементПодчиненный.ИндексКартинки;
					НСПодчиненная.РеквизитДопУпорядочивания = ЭлементПодчиненный.РеквизитДопУпорядочиванияОР;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыИерархии()
	
	Если ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	торо_СтруктурыОР.РазрешенВводНовыхОР,
		               |	торо_СтруктурыОР.ИзменяетсяДокументами,
		               |	торо_СтруктурыОР.СтроитсяАвтоматически,
					   |	торо_СтруктурыОР.РеквизитОР,
					   |	торо_СтруктурыОР.ТипРеквизитаОР
		               |ИЗ
		               |	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
		               |ГДЕ
		               |	торо_СтруктурыОР.Ссылка = &СтруктураИерархии";
		Запрос.УстановитьПараметр("СтруктураИерархии",ТекСтруктураИерархии);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ИзменяетсяДокументами  = Выборка.ИзменяетсяДокументами;
		СтроитсяАвтоматически  = Выборка.СтроитсяАвтоматически;
		ИерархияРеквизитОР	   = Выборка.РеквизитОР;
		ИерархияТипРеквизитаОР = Выборка.ТипРеквизитаОР;
		Если СтроитсяАвтоматически И ИерархияТипРеквизитаОР <> "" Тогда
			ИерархическийСправочник= Метаданные.Справочники[ИерархияТипРеквизитаОР].Иерархический;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоНаСервере()
	
	Дерево.ПолучитьЭлементы().Очистить();
	
	ИзменяетсяДокументами = ТекСтруктураИерархии.ИзменяетсяДокументами; 
	СтроитсяАвтоматически = ТекСтруктураИерархии.СтроитсяАвтоматически;
	ИерархияРеквизитОР = ТекСтруктураИерархии.РеквизитОР;
	ИерархияТипРеквизитаОР = ТекСтруктураИерархии.ТипРеквизитаОР;
	
	Если СтроитсяАвтоматически И ИерархияТипРеквизитаОР <> "" Тогда
		ИерархическийСправочник = Метаданные.Справочники[ИерархияТипРеквизитаОР].Иерархический;
	КонецЕсли;
	
	СтруктураПараметровИерархии = Новый Структура(
	"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник,РодительИерархии",
		ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
		
	СтруктураПараметровФормы = Новый Структура(
	"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта, СписокСтатусов, ВидПодбора, Организация, Подразделение, НеУчаствуетВПланировании",
	ЭтаФорма.ИмяФормы, Неопределено, Неопределено, СписокСтатусов, ВидПодбора, ЭтаФорма.ОрганизацияДляОтбора, ЭтаФорма.ПодразделениеДляОтбора, НеУчаствуетВПланировании);
	
	МассивСтруктурОР = Справочники.торо_ОбъектыРемонта.ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии,СтруктураПараметровФормы);
	ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокСтатусовНаСервере(СписокСтатусов,ВидПодбора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	торо_НастройкиДоступностиОбъектовРемонта.СтатусОРВУчете
	|ИЗ
	|	РегистрСведений.торо_НастройкиДоступностиОбъектовРемонта КАК торо_НастройкиДоступностиОбъектовРемонта
	|ГДЕ
	|	торо_НастройкиДоступностиОбъектовРемонта.ДоступностьПриПодборе";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОтображатьНепринятые = (НЕ ВидПодбора = "ВидПараметровНаработки"
						  И НЕ ВидПодбора = "НастройкаПодбораВводНачальныхДанныхСоВременем"
						  И НЕ ВидПодбора = "ВводНачальныхДанных");
	
	Пока Выборка.Следующий() Цикл
		Если ОтображатьНепринятые Тогда
			СписокСтатусов.Добавить(Выборка.СтатусОРВУчете);
		ИначеЕсли Не Выборка.СтатусОРВУчете = Перечисления.торо_СтатусыОРВУчете.НеПринятоКУчету Тогда
			СписокСтатусов.Добавить(Выборка.СтатусОРВУчете);
		КонецЕсли; 
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруНовыхСтрок(Ссылка, ПараметрыСтруктурыИерархии, МассивЭлементов, СтруктураПараметровФормы)
	
	Возврат Справочники.торо_ОбъектыРемонта.ПолучитьСтруктуруНовыхСтрокДляДереваПриРазворачивании(Ссылка, ПараметрыСтруктурыИерархии,МассивЭлементов,СтруктураПараметровФормы);	
	
КонецФункции

&НаКлиенте
Процедура ДеревоПриАктивизацииСтрокиОбработчикОжидания()
	
	Если ТекущийЭлементДерева = Элементы.Дерево.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанныеСписок = Элементы.СписокОбъектов.ТекущиеДанные;
	ТекОРВСписке = ?(ТекДанныеСписок = Неопределено,ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"),ТекДанныеСписок.Ссылка);
	торо_РаботаСИерархиейКлиент.УстановитьОтборВСписке(ЭтаФорма,Элементы.Дерево.ТекущиеДанные.Ссылка);
	Массив = СписокОбъектов.НайтиСтроки(Новый Структура("Ссылка",ТекОРВСписке));
	Если Массив.Количество() > 0 Тогда
		Элементы.СписокОбъектов.ТекущаяСтрока = Массив[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоследнихРодителей(ИдентификаторТекСтроки, МассивРодителейОР)
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(ИдентификаторТекСтроки);
	
	КоллекцияСтрок = СтрокаДерева.ПолучитьЭлементы();
	Если НЕ СтрокаДерева.СвязиОбновлялись Тогда
		
		Для каждого Элем Из КоллекцияСтрок Цикл
			МассивРодителейОР.Добавить(Новый Структура("ОбъектИерархии, Идентификатор",Элем.Ссылка, Элем.ПолучитьИдентификатор()));
		КонецЦикла;
		
	Иначе
		
		Для каждого Элем Из КоллекцияСтрок Цикл
			
			НайтиПоследнихРодителей(Элем.ПолучитьИдентификатор() ,МассивРодителейОР);	
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗавершение1(Список, ДополнительныеПараметры) Экспорт
	
	ВыбраныЭлементы = (Список <> Неопределено);
	
	Если ВыбраныЭлементы Тогда
		
		Если ВидПодбора="ВидРемонтныхРабот" Тогда
			МассивВыбранныхОР = ДополнительныеПараметры.МассивВыбранныхОР;
			Для каждого Стр Из ДеревоВыбрСтрок.ПолучитьЭлементы() Цикл
				Индекс = МассивВыбранныхОР.Найти(Стр.Объект);
				Если Индекс <> Неопределено Тогда
					МассивВыбранныхОР.Удалить(Индекс);
				КонецЕсли;
			КонецЦикла;
			Для каждого Элем Из МассивВыбранныхОР Цикл
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для объекта ремонта %1 не задано нормативов планирования!"),Элем));
			КонецЦикла;
		КонецЕсли;
		
		ОповеститьОВыборе(УдалитьНенужныеСтрокиДереваНаСервере(Список));
		ДеревоВыбрСтрок.ПолучитьЭлементы().Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСписокВидовРемонтов(Список, ДополнительныеПараметры) Экспорт
	
	ЗначениеВозврата = ДополнительныеПараметры.ЗначениеВозврата;
	СтруктураДляПередачи = ДополнительныеПараметры.СтруктураДляПередачи;
	
	ВыбраныЭлементыРемонтов = (Список <> Неопределено);
	СтруктураДляПередачи.Вставить("СписокВидовРемонтов", Список);
	
	ВыбратьФрагмент1(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ЗначениеВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФрагмент1(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ЗначениеВозврата)
	
	ВыбраныЭлементыПоказателей = Ложь;
	
	Если ЗначениеВозврата.Свойство("СписокВидовПоказателей") Тогда
		
		ЗначениеВозврата.СписокВидовПоказателей.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьСписокВидовПоказателей",ЭтотОбъект,
																					Новый Структура("СтруктураДляПередачи, ЗначениеВозврата, ВыбраныЭлементыРемонтов", СтруктураДляПередачи, ЗначениеВозврата, ВыбраныЭлементыРемонтов)),
																		  НСтр("ru = 'Выберите виды контролируемых показателей'"));
		Возврат;
		
	КонецЕсли;
	ВыбратьФрагмент2(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ЗначениеВозврата);	

КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьСписокВидовПоказателей(Список, ДополнительныеПараметры) Экспорт
	
	ЗначениеВозврата = ДополнительныеПараметры.ЗначениеВозврата;
	СтруктураДляПередачи = ДополнительныеПараметры.СтруктураДляПередачи;
	ВыбраныЭлементыРемонтов = ДополнительныеПараметры.ВыбраныЭлементыРемонтов;
	
	ВыбраныЭлементыПоказателей = (Список <> Неопределено);
	
	СтруктураДляПередачи.Вставить("СписокВидовПоказателей", Список);
		
	ВыбратьФрагмент2(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ЗначениеВозврата);	

КонецПроцедуры // ВыбратьСписокВидовПоказателей()

&НаКлиенте
Процедура ВыбратьФрагмент2(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ЗначениеВозврата)

	ВыбраныЭлементыНаработки = Ложь;
	
	Если ЗначениеВозврата.Свойство("СписокВидовПараметров") Тогда
		
		ЗначениеВозврата.СписокВидовПараметров.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьСписокВидовПараметров",ЭтотОбъект,
																					Новый Структура("СтруктураДляПередачи, ЗначениеВозврата, ВыбраныЭлементыРемонтов, ВыбраныЭлементыПоказателей",
																									СтруктураДляПередачи, ЗначениеВозврата, ВыбраныЭлементыРемонтов, ВыбраныЭлементыПоказателей)),
																		  НСтр("ru = 'Выберите виды параметров наработки'"));
		Возврат;
		
	КонецЕсли;
	ВыбратьЗавершение(ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ВыбраныЭлементыНаработки,СтруктураДляПередачи);

КонецПроцедуры 

&НаКлиенте
Процедура ВыбратьСписокВидовПараметров(Список, ДополнительныеПараметры) Экспорт

	СтруктураДляПередачи = ДополнительныеПараметры.СтруктураДляПередачи;
	ЗначениеВозврата = ДополнительныеПараметры.ЗначениеВозврата;
	ВыбраныЭлементыРемонтов = ДополнительныеПараметры.ВыбраныЭлементыРемонтов;
	ВыбраныЭлементыПоказателей = ДополнительныеПараметры.ВыбраныЭлементыПоказателей;
	
	ВыбраныЭлементыНаработки = (Список <> Неопределено);
	
	СтруктураДляПередачи.Вставить("СписокВидовПараметров", Список);
	
	ВыбратьЗавершение(ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ВыбраныЭлементыНаработки,СтруктураДляПередачи);

КонецПроцедуры // ВыбратьСписокВидовПараметров()

&НаКлиенте
Процедура ВыбратьЗавершение(ВыбраныЭлементыРемонтов, ВыбраныЭлементыПоказателей, ВыбраныЭлементыНаработки, СтруктураДляПередачи)
	
	Если ВыбраныЭлементыРемонтов ИЛИ ВыбраныЭлементыПоказателей ИЛИ ВыбраныЭлементыНаработки Тогда
		
		ОповеститьОВыборе(УдалитьНенужныеСтрокиДереваНаСервере(СтруктураДляПередачи));
		
		ДеревоВыбрСтрок.ПолучитьЭлементы().Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьНенужныеСтрокиДереваНаСервере(СписокВыбранныхЗначений)
	
	ДеревоВыбранныхСтрок = РеквизитФормыВЗначение("ДеревоВыбрСтрок");
	
	Если ТипЗнч(СписокВыбранныхЗначений) = Тип("СписокЗначений") Тогда
		
		Если ВидПодбора="ВидРемонтныхРабот" Тогда 
			Если ЗапрашиватьВидРемонтныхРабот Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений Цикл
					
					МассивСтрокДерева = ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("Объект", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
				
				ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
				Возврат ДеревоВыбрСтрок;
				
			КонецЕсли;
		ИначеЕсли  ВидПодбора="ВидПараметровНаработки" Тогда 
			
			Если ЗапрашиватьВидПараметровНаработки Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("Показатель", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
								
				ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
				
				Возврат ДеревоВыбрСтрок;
				
			КонецЕсли;
		ИначеЕсли ВидПодбора="КонтролируемыеПоказатели" Тогда
			
			Если ЗапрашиватьКонтролируемыеПоказатели Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("ИзмеряемыйПоказатель", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
				ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
				Возврат ДеревоВыбрСтрок;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ВидПодбора = "ВводНачальныхДанных" Тогда 	 
			Если ВводДанныхЗапрашиватьВидРемонтныхРабот И ЗаполнитьПоНормативам 
				И СписокВыбранныхЗначений.Свойство("СписокВидовРемонтов") 
				И ТипЗнч(СписокВыбранныхЗначений.СписокВидовРемонтов) = Тип("СписокЗначений") Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений.СписокВидовРемонтов Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("Объект", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
						КонецЦикла; 
					КонецЕсли; 
					
				КонецЦикла;
				
				Если ДеревоВыбранныхСтрок.Строки[0].Строки.Количество() = 0 Тогда
					НовСтр = ДеревоВыбранныхСтрок.Строки[0].Строки.Добавить();
					НовСтр.Объект = Справочники.торо_ВидыРемонтов.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			Если ВводДанныхЗапрашиватьВидПараметровНаработки И ЗаполнитьПоНормативам 
				И СписокВыбранныхЗначений.Свойство("СписокВидовПараметров") 
				И ТипЗнч(СписокВыбранныхЗначений.СписокВидовПараметров) = Тип("СписокЗначений") Тогда 
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений.СписокВидовПараметров Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("Показатель", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
						КонецЦикла; 
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли;
			Если ВводДанныхЗапрашиватьВидИзмеряемыхПоказателей И ЗаполнитьПоНормативам 
				И СписокВыбранныхЗначений.Свойство("СписокВидовПоказателей") 
				И ТипЗнч(СписокВыбранныхЗначений.СписокВидовПоказателей) = Тип("СписокЗначений") Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений.СписокВидовПоказателей Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("ИзмеряемыйПоказатель", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
						КонецЦикла; 
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
		Возврат ДеревоВыбрСтрок;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыборЗначения()
	
	ТекДанные = Неопределено;
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент;
	
	Если ТекЭлементФормы.Имя = "Дерево" Тогда
		
		ТекДанные = Элементы.Дерево.ТекущиеДанные;
		
	ИначеЕсли ТекЭлементФормы.Имя = "СписокОбъектов" Тогда
		
		ТекДанные = Элементы.СписокОбъектов.ТекущиеДанные;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КлючНазначенияИспользования) Тогда 
		Если Параметры.КлючНазначенияИспользования = "ДобавлениеВИерархию" Тогда
			Если ТекДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ВыбрЗнач = ВыбратьЗначениеНаСервере(ТекДанные.Ссылка);
			
			Если ВыбрЗнач = Неопределено Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ВыборЗначенияЗавершение", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), НСтр("ru = 'Выбрать все подчиненные объекты ремонта вместе с текущим?'"), РежимДиалогаВопрос.ДаНет);		
			Иначе
				ОповеститьОВыборе(ВыбрЗнач);
			КонецЕсли;
			
		ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_НастройкаРегистрацииНаработкиЗависимыхОР" Тогда
			
			ВыбранноеЗначениеОР = СписокОР.НайтиПоЗначению(ТекДанные.Ссылка);
			Если ВыбранноеЗначениеОР = Неопределено Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У выбранного объекта ремонта не ведется учет наработки по параметру ""%1"".'"),ПараметрНаработки));
				ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
				Возврат;
			Иначе
				ЭтаФорма.ЗакрыватьПриВыборе = Истина;
				
				
				Если Не ТекДанные = Неопределено Тогда
					
					ОповеститьОВыборе(ТекДанные.Ссылка);
					
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		
		Если Не ТекДанные = Неопределено Тогда
			
			ЭтаФорма.ЗакрыватьПриВыборе = Истина;
			
			ОповеститьОВыборе(ТекДанные.Ссылка);
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ОповеститьОВыборе(ДеревоПодчиненных);
    Иначе
        ОповеститьОВыборе(ТекДанные.Ссылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыбратьЗначениеНаСервере(ОбъектРемонта)
	
	ДеревоПодчиненых = Справочники.торо_ОбъектыРемонта.ПолучитьДеревоЭлементов(ОбъектРемонта,ТекСтруктураИерархии);
	
	Если ДеревоПодчиненых.Строки[0].Строки.Количество() = 0 Тогда
		Возврат ОбъектРемонта;
	Иначе
		ЗначениеВРеквизитФормы(ДеревоПодчиненых, "ДеревоПодчиненных");
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура выполняет отбор и передачу объектов и видов ремонтных работ
//
// Параметры
//  <НаборСтрок>  - коллекция строк объектов ремонтов для отбора.
//
Функция ОтобратьОбъекты(НаборСтрок, МассивВыбранныхОР)
	
	ДеревоВыбранныхСтрок = РеквизитФормыВЗначение("ДеревоВыбрСтрок");
	ДеревоВыбранныхСтрок.Строки.Очистить();
	
	РазрешитьВыборОрНеУчаствующихВПланировании = ВидПодбора <> "ВидРемонтныхРабот";
	
	МассивОбъектов = Новый Массив;
	
	СписокВидовПараметров = Новый СписокЗначений; // Параметры наработки
	
	СписокВидовРемонтов = Новый СписокЗначений;
	СписокВидовПоказателей = Новый СписокЗначений;
	
	Для Каждого Стр Из НаборСтрок Цикл
		
		ВыдСтрока = СписокОбъектов.НайтиПоИдентификатору(Стр);
		
		Если НЕ ВыдСтрока = Неопределено Тогда
			
			ОбъектРР = ВыдСтрока.Ссылка;
			
			Если УчитыватьИерархиюЭлементов = "Не учитывать иерархию элементов" Тогда 
				
				Если ТипЗнч(ОбъектРР) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ВыдСтрока.ЭтоГруппа Тогда
										
					ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхСтрок, ОбъектРР, СписокВидовПараметров, СписокВидовРемонтов, СписокВидовПоказателей,ВыдСтрока.ЭтоГруппа);
					МассивОбъектов.Добавить(ОбъектРР);
						
				ИначеЕсли ТипЗнч(ОбъектРР) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ВыдСтрока.ЭтоГруппа Тогда
					
					ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхСтрок, ОбъектРР, СписокВидовПараметров, СписокВидовРемонтов, СписокВидовПоказателей,ВыдСтрока.ЭтоГруппа);
					
					МассивОбъектов.Добавить(ОбъектРР);
					
				КонецЕсли;
			ИначеЕсли УчитыватьИерархиюЭлементов="Учитывать иерархию элементов только 1-го уровня" ИЛИ УчитыватьИерархиюЭлементов="Учитывать иерархию элементов 1-го уровня" Тогда
				Если УчитыватьИерархиюЭлементов="Учитывать иерархию элементов 1-го уровня" И ТипЗнч(ОбъектРР) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ВыдСтрока.ЭтоГруппа Тогда
					ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхСтрок, ОбъектРР, СписокВидовПараметров, СписокВидовРемонтов, СписокВидовПоказателей,ВыдСтрока.ЭтоГруппа);
					МассивОбъектов.Добавить(ОбъектРР);
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Если ТекСтруктураИерархии.ИзменяетсяДокументами Тогда
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
					|	торо_ИерархическиеСтруктурыОР.РодительИерархии,
					|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
					|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа
					|ПОМЕСТИТЬ Данные
					|ИЗ
					|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_ИерархическиеСтруктурыОР
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
					|		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
					|ГДЕ
					|	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ
					|	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &Родитель
					|	И ВЫБОР
					|			КОГДА &РазрешитьВыборОрНеУчаствующихВПланировании
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ торо_ИерархическиеСтруктурыОР.ОбъектИерархии.НеУчаствуетВПланировании = ЛОЖЬ
					|		КОНЕЦ";
				Иначе
					Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
					|	торо_ИерархическиеСтруктурыОР.РодительИерархии,
					|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
					|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа
					|ПОМЕСТИТЬ Данные
					|ИЗ
					|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
					|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
					|		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
					|ГДЕ
					|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
					|	И торо_ИерархическиеСтруктурыОР.РодительИерархии = &Родитель
					|	И ВЫБОР
					|			КОГДА &РазрешитьВыборОрНеУчаствующихВПланировании
					|				ТОГДА ИСТИНА
					|			ИНАЧЕ торо_ИерархическиеСтруктурыОР.ОбъектИерархии.НеУчаствуетВПланировании = ЛОЖЬ
					|		КОНЕЦ";
				КонецЕсли;
				
				Запрос.УстановитьПараметр("Родитель",ОбъектРР);
				Запрос.УстановитьПараметр("СтруктураИерархии",ТекСтруктураИерархии);
				Запрос.УстановитьПараметр("РазрешитьВыборОрНеУчаствующихВПланировании", РазрешитьВыборОрНеУчаствующихВПланировании);
				
				Результат = Запрос.Выполнить();
				
				ИспользоватьДПиС = Константы.торо_ИспользоватьДокументыПринятияИСписанияОборудования.Получить();
				Если ИспользоватьДПиС Тогда
					Запрос.Текст = "ВЫБРАТЬ
				       |	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта
				       |ПОМЕСТИТЬ ПринятыеОРы
				       |ИЗ
				       |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(
				       |			&Дата,
				       |			ОбъектРемонта В
				       |				(ВЫБРАТЬ
				       |					таб.ОбъектИерархии
				       |				ИЗ
				       |					Данные КАК таб)) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
				       |ГДЕ
				       |	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР = &СтатусОР
				       |
				       |ИНДЕКСИРОВАТЬ ПО
				       |	ОбъектРемонта
				       |;
				       |
				       |////////////////////////////////////////////////////////////////////////////////
				       |ВЫБРАТЬ
				       |	Данные.СтруктураИерархии,
				       |	Данные.РодительИерархии,
				       |	Данные.ОбъектИерархии,
				       |	Данные.ЭтоГруппа
				       |ИЗ
				       |	Данные КАК Данные
				       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПринятыеОРы КАК ПринятыеОРы
				       |		ПО Данные.ОбъектИерархии = ПринятыеОРы.ОбъектРемонта";
					   
					Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(ДатаНачалаУмолчание), ДатаНачалаУмолчание, ДатаДокумента));
					
					Запрос.УстановитьПараметр("СтатусОР", Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету);
				Иначе
					Запрос.Текст = "ВЫБРАТЬ
				       |	Данные.СтруктураИерархии,
				       |	Данные.РодительИерархии,
				       |	Данные.ОбъектИерархии КАК ОбъектИерархии,
				       |	Данные.ЭтоГруппа
				       |ИЗ
				       |	Данные КАК Данные";

				КонецЕсли;
				
				резЗапроса = Запрос.Выполнить();
				ВыборкаОР = резЗапроса.Выбрать();
				
				Пока ВыборкаОР.Следующий() Цикл 
									
					Если ТипЗнч(ВыборкаОР.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ВыборкаОР.ЭтоГруппа Тогда
						ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхСтрок, ВыборкаОР.ОбъектИерархии, СписокВидовПараметров, СписокВидовРемонтов, СписокВидовПоказателей, ВыборкаОР.ЭтоГруппа);
						МассивОбъектов.Добавить(ВыборкаОР.ОбъектИерархии);
					КонецЕсли;
					
				КонецЦикла;
			ИначеЕсли УчитыватьИерархиюЭлементов="Учитывать иерархию элементов" Тогда
				Если ТипЗнч(ОбъектРР) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ВыдСтрока.ЭтоГруппа Тогда
					ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхСтрок, ОбъектРР, СписокВидовПараметров, СписокВидовРемонтов, СписокВидовПоказателей, ВыдСтрока.ЭтоГруппа);
					МассивОбъектов.Добавить(ОбъектРР);
				КонецЕсли;
				
				ТаблицаЗависимыхОР = ВыбратьЗависимыеОРПоИерархии(ОбъектРР,РазрешитьВыборОрНеУчаствующихВПланировании);
				
				Для Каждого ТекСтрока из ТаблицаЗависимыхОР Цикл
					
					Если ТипЗнч(ТекСтрока.ОбъектИерархии) = Тип("СправочникСсылка.торо_ОбъектыРемонта") И НЕ ТекСтрока.ЭтоГруппа Тогда
						ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхСтрок, ТекСтрока.ОбъектИерархии, СписокВидовПараметров, СписокВидовРемонтов, СписокВидовПоказателей, ТекСтрока.ЭтоГруппа);
						МассивОбъектов.Добавить(ТекСтрока.ОбъектИерархии);
					КонецЕсли;

				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	Если СписокВидовПараметров.Количество() = 0 И СписокВидовРемонтов.Количество() = 0 И СписокВидовПоказателей.Количество() = 0 Тогда
		
		ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
		Возврат ДеревоВыбрСтрок;
		
	КонецЕсли;
	Если ВидПодбора="ВидРемонтныхРабот" Тогда 
		Если ЗапрашиватьВидРемонтныхРабот Тогда
			
			ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
			Возврат СписокВидовРемонтов;
		Иначе
			ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
			Возврат ДеревоВыбрСтрок;
		КонецЕсли;
	ИначеЕсли ВидПодбора="ВидПараметровНаработки" Тогда 
		
		Если ЗапрашиватьВидПараметровНаработки Тогда
			
			ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
			Возврат СписокВидовПараметров;
			
		Иначе
			ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
			Возврат ДеревоВыбрСтрок;
			
		КонецЕсли;
	ИначеЕсли ВидПодбора="КонтролируемыеПоказатели" Тогда
		
		ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
		Если ЗапрашиватьКонтролируемыеПоказатели Тогда
			
			Возврат СписокВидовПоказателей;
			
		Иначе
			
			ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
			Возврат ДеревоВыбрСтрок;
			
		КонецЕсли;
	ИначеЕсли ВидПодбора = "ВводНачальныхДанных" Тогда 	 
		СтруктураВозврата = Новый Структура();
		
		Если ВводДанныхЗапрашиватьВидРемонтныхРабот И ЗаполнитьПоНормативам Тогда
			СтруктураВозврата.Вставить("СписокВидовРемонтов", СписокВидовРемонтов);
			СтруктураВозврата.Вставить("ЗапрашиватьВидРемонтныхРабот", ВводДанныхЗапрашиватьВидРемонтныхРабот);
		КонецЕсли;
		
		Если ВводДанныхЗапрашиватьВидПараметровНаработки И ЗаполнитьПоНормативам Тогда 
			СтруктураВозврата.Вставить("СписокВидовПараметров", СписокВидовПараметров);
			СтруктураВозврата.Вставить("ЗапрашиватьВидПараметровНаработки", ВводДанныхЗапрашиватьВидПараметровНаработки);
		КонецЕсли;
		
		Если ВводДанныхЗапрашиватьВидИзмеряемыхПоказателей И ЗаполнитьПоНормативам Тогда
			СтруктураВозврата.Вставить("СписокВидовПоказателей", СписокВидовПоказателей);
			СтруктураВозврата.Вставить("ЗапрашиватьВидИзмеряемыхПоказателей", ВводДанныхЗапрашиватьВидИзмеряемыхПоказателей);
		КонецЕсли; 
		
		ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
		
		СтруктураВозврата.Вставить("ДеревоВыбранныхСтрок", ДеревоВыбрСтрок);
		
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Возврат ДеревоВыбрСтрок;
	
КонецФункции // ОтобратьОбъекты()

&НаСервере
Функция ВыбратьЗависимыеОРПоИерархии(ОбъектРемонта,РазрешитьВыборОрНеУчаствующихВПланировании)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ТекСтруктураИерархии.ИзменяетсяДокументами Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
		               |	торо_ОбъектыРемонта.ЭтоГруппа
					   |ПОМЕСТИТЬ Данные
		               |ИЗ
		               |	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(, СтруктураИерархии = &СтруктураИерархии) КАК торо_ИерархическиеСтруктурыОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.Удален = ЛОЖЬ
		               |	И ВЫБОР
		               |			КОГДА &РазрешитьВыборОрНеУчаствующихВПланировании
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ торо_ИерархическиеСтруктурыОР.ОбъектИерархии.НеУчаствуетВПланировании = ЛОЖЬ
		               |					ИЛИ торо_ОбъектыРемонта.ЭтоГруппа
		               |		КОНЕЦ
		               |
					   |ИНДЕКСИРОВАТЬ ПО
					   |	ОбъектИерархии";
	Иначе
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
		               |	торо_ИерархическиеСтруктурыОР.РодительИерархии,
		               |	торо_ИерархическиеСтруктурыОР.ОбъектИерархии КАК ОбъектИерархии,
		               |	торо_ОбъектыРемонта.ЭтоГруппа
					   |ПОМЕСТИТЬ Данные
		               |ИЗ
		               |	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		               |		ПО торо_ИерархическиеСтруктурыОР.ОбъектИерархии = торо_ОбъектыРемонта.Ссылка
		               |ГДЕ
		               |	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
		               |	И ВЫБОР
		               |			КОГДА &РазрешитьВыборОрНеУчаствующихВПланировании
		               |				ТОГДА ИСТИНА
		               |			ИНАЧЕ торо_ИерархическиеСтруктурыОР.ОбъектИерархии.НеУчаствуетВПланировании = ЛОЖЬ
		               |					ИЛИ торо_ОбъектыРемонта.ЭтоГруппа
		               |		КОНЕЦ
		               |
					   |ИНДЕКСИРОВАТЬ ПО
					   |	ОбъектИерархии";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", ТекСтруктураИерархии);
	Запрос.УстановитьПараметр("РазрешитьВыборОрНеУчаствующихВПланировании", РазрешитьВыборОрНеУчаствующихВПланировании);
	Запрос.Выполнить();
	
	ИспользоватьДПиС = Константы.торо_ИспользоватьДокументыПринятияИСписанияОборудования.Получить();
	Если ИспользоватьДПиС Тогда
		Запрос.Текст = "ВЫБРАТЬ
	       |	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.ОбъектРемонта КАК ОбъектРемонта
	       |ПОМЕСТИТЬ ПринятыеОРы
	       |ИЗ
	       |	РегистрСведений.торо_СтатусыОбъектовРемонтаВУчете.СрезПоследних(
	       |			&Дата,
	       |			ОбъектРемонта В
	       |				(ВЫБРАТЬ
	       |					таб.ОбъектИерархии
	       |				ИЗ
	       |					Данные КАК таб)) КАК торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних
	       |ГДЕ
	       |	торо_СтатусыОбъектовРемонтаВУчетеСрезПоследних.СтатусОР = &СтатусОР
	       |
	       |ИНДЕКСИРОВАТЬ ПО
	       |	ОбъектРемонта
	       |;
	       |
	       |////////////////////////////////////////////////////////////////////////////////
	       |ВЫБРАТЬ
	       |	Данные.СтруктураИерархии,
	       |	Данные.РодительИерархии,
	       |	Данные.ОбъектИерархии,
	       |	Данные.ЭтоГруппа
	       |ИЗ
	       |	Данные КАК Данные
	       |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПринятыеОРы КАК ПринятыеОРы
	       |		ПО Данные.ОбъектИерархии = ПринятыеОРы.ОбъектРемонта";
		   
		Запрос.УстановитьПараметр("Дата", ?(ЗначениеЗаполнено(ДатаНачалаУмолчание), ДатаНачалаУмолчание, ДатаДокумента));
		
		Запрос.УстановитьПараметр("СтатусОР", Перечисления.торо_СтатусыОРВУчете.ПринятоКУчету);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
	       |	Данные.СтруктураИерархии,
	       |	Данные.РодительИерархии,
	       |	Данные.ОбъектИерархии КАК ОбъектИерархии,
	       |	Данные.ЭтоГруппа
	       |ИЗ
	       |	Данные КАК Данные";

	КонецЕсли;
	
	резЗапроса = Запрос.Выполнить();
	ТаблицаИерархииОР = резЗапроса.Выгрузить();
	
	Возврат ПолучитьЗависимыеОР(ТаблицаИерархииОР, ОбъектРемонта);
	
КонецФункции

&НаСервере
// Функция возвращает таблицу объектов ремонта из переданной в качестве параметра таблицы иерархии, 
// родителями которых является указаный ОР.
//
Функция ПолучитьЗависимыеОР(ТаблицаИерархииОР, ОбъектРемонта)
	
	ВспомогательнаяТаблица = ТаблицаИерархииОР.Скопировать(Новый Структура("РодительИерархии",ОбъектРемонта),);
	
	ТаблицаЗависимыхОР = ТаблицаИерархииОР.СкопироватьКолонки("ОбъектИерархии, ЭтоГруппа");
	
	Если Не ВспомогательнаяТаблица.Количество() = 0 Тогда
		
		Для Каждого СтрокаСвязанныхОР Из ВспомогательнаяТаблица Цикл
			
			ТаблицаПодчиненныхПотомку = ПолучитьЗависимыеОР(ТаблицаИерархииОР, СтрокаСвязанныхОР.ОбъектИерархии);
			Если ТаблицаЗависимыхОР = Неопределено Тогда
				
				ТаблицаЗависимыхОР = ТаблицаПодчиненныхПотомку.Скопировать(,"ОбъектИерархии,ЭтоГруппа");
				
			Иначе
				Для Каждого ПодчиненныйПотомкуОР Из ТаблицаПодчиненныхПотомку Цикл
					ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
					ДобавляемаяСтрока.ОбъектИерархии = ПодчиненныйПотомкуОР.ОбъектИерархии;
					ДобавляемаяСтрока.ЭтоГруппа      = ПодчиненныйПотомкуОР.ЭтоГруппа;
				КонецЦикла;	
			КонецЕсли;
			ДобавляемаяСтрока = ТаблицаЗависимыхОР.Добавить();
			ДобавляемаяСтрока.ОбъектИерархии = СтрокаСвязанныхОР.ОбъектИерархии;
			ДобавляемаяСтрока.ЭтоГруппа      = СтрокаСвязанныхОР.ЭтоГруппа;

		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаЗависимыхОР;
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхЗначений, ОбъектРР, СписокВидовПараметров, СписокВидовРемонтов, СписокВидовПоказателей, ЭтоГруппа)
	
	СтрокаОР = ДеревоВыбранныхЗначений.Строки.Добавить();
	СтрокаОР.Объект    = ОбъектРР;
	СтрокаОР.ЭтоГруппа = ЭтоГруппа;
	
	Если ВидПодбора = "ВидПараметровНаработки" Тогда 
		СтрокаОР.ДатаСнятия = ДатаСнятияПоказателей;
	КонецЕсли;
	
	Если (ЗапрашиватьВидПараметровНаработки И ВидПодбора="ВидПараметровНаработки") ИЛИ (ЗапрашиватьКонтролируемыеПоказатели И ВидПодбора="КонтролируемыеПоказатели") Тогда		
		Если ВидПодбора="ВидПараметровНаработки" Тогда 
			СтруктураОтбора = Новый Структура("ОбъектРемонта",ОбъектРР);
			СтрокаОР.ПроставлятьПлановуюНаработку = ПроставлятьПлановуюНаработку;
			СтрокаОР.УчитыватьПростоиОР = УчитыватьПростоиОР;
			
			ТаблицаПараметровНаработки = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(,СтруктураОтбора);
			Для Каждого СтрПараметрНаработки Из ТаблицаПараметровНаработки Цикл
				СтрокаВПР = СтрокаОР.Строки.Добавить();
				СтрокаВПР.Объект = ОбъектРР;
				СтрокаВПР.Показатель = СтрПараметрНаработки.Показатель;
				СтрокаВПР.ДатаСнятия = ДатаСнятияПоказателей;
				Если СписокВидовПараметров.НайтиПоЗначению(СтрПараметрНаработки.Показатель) = Неопределено Тогда
					
					СписокВидовПараметров.Добавить(СтрПараметрНаработки.Показатель, , Истина);
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ВидПодбора="КонтролируемыеПоказатели" Тогда
			
			МассивПоказателей = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.ПолучитьСтруктуруИзмеряемыхПоказателейОбъектовРемонта(ОбъектРР,,Ложь);
			Для Каждого СтруктураПоказателей Из МассивПоказателей Цикл
				СтрокаВПР = СтрокаОР.Строки.Добавить();
				СтрокаВПР.Объект = ОбъектРР;
				СтрокаВПР.ИзмеряемыйПоказатель = СтруктураПоказателей.Показатель;
				
				Если СписокВидовПоказателей.НайтиПоЗначению(СтруктураПоказателей.Показатель) = Неопределено Тогда
					СписокВидовПоказателей.Добавить(СтруктураПоказателей.Показатель, , Истина);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ВидПодбора = "ВводНачальныхДанных" Тогда
		СтрокаОР.ЗаполнитьПоНормативам = ЗаполнитьПоНормативам;
		Если ВводДанныхЗапрашиватьВидРемонтныхРабот И ЗаполнитьПоНормативам Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
			               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
			               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
			               |	торо_НормативныеРемонтыОборудования.Приоритет
			               |ПОМЕСТИТЬ НормативныеСПриоритетомИБез
			               |ИЗ
			               |	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			               |ГДЕ
			               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
			               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
			               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании
			               |ПОМЕСТИТЬ НормативныеСПриоритетом
			               |ИЗ
			               |	НормативныеСПриоритетомИБез КАК торо_НормативныеРемонтыОборудования
			               |ГДЕ
			               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			               |	И торо_НормативныеРемонтыОборудования.Приоритет
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта,
			               |	торо_НормативныеРемонтыОборудования.ВидРемонта,
			               |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании
			               |ПОМЕСТИТЬ НормативныеБезПриоритета
			               |ИЗ
			               |	НормативныеСПриоритетомИБез КАК торо_НормативныеРемонтыОборудования
			               |ГДЕ
			               |	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			               |	И НЕ торо_НормативныеРемонтыОборудования.Приоритет
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	ЕСТЬNULL(НормативныеРемонты.ОбъектРемонта, НормативныеБезПриоритета.ОбъектРемонта) КАК ОбъектРемонта,
			               |	ЕСТЬNULL(НормативныеРемонты.ВидРемонта, НормативныеБезПриоритета.ВидРемонта) КАК ВидРемонта,
			               |	ЕСТЬNULL(НормативныеРемонты.НеУчаствуетВПланировании, НормативныеБезПриоритета.НеУчаствуетВПланировании) КАК НеУчаствуетВПланировании
			               |ИЗ
			               |	НормативныеСПриоритетом КАК НормативныеРемонты
			               |		ПОЛНОЕ СОЕДИНЕНИЕ НормативныеБезПриоритета КАК НормативныеБезПриоритета
			               |		ПО НормативныеРемонты.ОбъектРемонта = НормативныеБезПриоритета.ОбъектРемонта
			               |			И НормативныеРемонты.ВидРемонта = НормативныеБезПриоритета.ВидРемонта";
			
			Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРР);
			
			Результат = Запрос.Выполнить();
			флВыборкаПустая = Результат.Пустой();
			Выборка = Результат.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.НеУчаствуетВПланировании Тогда
					Продолжить;
				КонецЕсли; 
				СтрокаОР.Строки.Добавить().Объект = Выборка.ВидРемонта;
				
				флВыборкаПустая = Ложь;
				
				Если СписокВидовРемонтов.НайтиПоЗначению(Выборка.ВидРемонта) = Неопределено Тогда
					
					СписокВидовРемонтов.Добавить(Выборка.ВидРемонта, , Истина);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если флВыборкаПустая Тогда
				СтрокаДерева = ДеревоВыбранныхЗначений.Строки.Найти(ОбъектРР);
				Если НЕ СтрокаДерева = Неопределено и СтрокаДерева<>СтрокаОР Тогда
					ДеревоВыбранныхЗначений.Строки.Удалить(СтрокаДерева);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;	 
		Если ВводДанныхЗапрашиватьВидПараметровНаработки И ЗаполнитьПоНормативам Тогда 
			СтруктураОтбора = Новый Структура("ОбъектРемонта",ОбъектРР);
			ТаблицаПараметровНаработки = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних(,СтруктураОтбора);
			Для Каждого СтрПараметрНаработки Из ТаблицаПараметровНаработки Цикл
				СтрокаВПР=СтрокаОР.Строки.Добавить();
				СтрокаВПР.Объект=ОбъектРР;
				СтрокаВПР.Показатель=СтрПараметрНаработки.Показатель;
				СтрокаВПР.ДатаСнятия = ДатаСнятияПоказателей;
				Если СписокВидовПараметров.НайтиПоЗначению(СтрПараметрНаработки.Показатель) = Неопределено Тогда
					
					СписокВидовПараметров.Добавить(СтрПараметрНаработки.Показатель, , Истина);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		Если ВводДанныхЗапрашиватьВидИзмеряемыхПоказателей И ЗаполнитьПоНормативам Тогда
			СтруктураОтбора = Новый Структура("ОбъектРемонта",ОбъектРР);
			Выборка = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.Выбрать(СтруктураОтбора);
			Пока Выборка.Следующий() Цикл
				СтрокаВПР=СтрокаОР.Строки.Добавить();
				СтрокаВПР.Объект=ОбъектРР;
				СтрокаВПР.ИзмеряемыйПоказатель=Выборка.Показатель;				 
				Если СписокВидовПоказателей.НайтиПоЗначению(Выборка.Показатель) = Неопределено Тогда
					
					СписокВидовПоказателей.Добавить(Выборка.Показатель, , Истина);
					
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		
	ИначеЕсли ВидПодбора="НастройкаПодбораВводНачальныхДанныхСоВременем" Тогда
		
		СтрокаОР.ДатаНачала = ДатаНачалаУмолчание;
		СтрокаОР.ДатаОкончания = ДатаОкончанияУмолчание;	
		
	ИначеЕсли ВидПодбора = "ВидРемонтныхРабот" Тогда
		
		Запрос = Новый Запрос;
		Если Параметры.КлючНазначенияИспользования = "торо_ПланГрафикРемонта" Тогда
			Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
			              |	торо_НормативныеРемонтыОборудования.ВидРемонта,
			              |	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
			              |	торо_ОбъектыРемонта.НеУчаствуетВПланировании КАК НеУчаствуетВПланированииОР
			              |ИЗ
			              |	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			              |		ПО торо_НормативныеРемонтыОборудования.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
			              |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ВидыРемонтов КАК торо_ВидыРемонтов
			              |		ПО торо_НормативныеРемонтыОборудования.ВидРемонта = торо_ВидыРемонтов.Ссылка
			              |ГДЕ
			              |	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			              |	И торо_НормативныеРемонтыОборудования.Приоритет
			              |	И (&НеИспользоватьОтбор
			              |			ИЛИ торо_ВидыРемонтов.ПланГрафикППР = &ПланГрафикППР)";
			
			Если ТолькоВидыРемонтовППР Тогда							  
				Запрос.УстановитьПараметр("ПланГрафикППР", Истина);
				Запрос.УстановитьПараметр("НеИспользоватьОтбор", Ложь);
			Иначе 
				Запрос.УстановитьПараметр("ПланГрафикППР", Истина);
				Запрос.УстановитьПараметр("НеИспользоватьОтбор", Истина); 
			КонецЕсли;
		Иначе
			
			Запрос.Текст ="ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	торо_НормативныеРемонтыОборудования.ВидРемонта,
			|	торо_НормативныеРемонтыОборудования.НеУчаствуетВПланировании,
			|	торо_ОбъектыРемонта.НеУчаствуетВПланировании КАК НеУчаствуетВПланированииОР
			|ИЗ
			|	РегистрСведений.торо_НормативныеРемонтыОборудования КАК торо_НормативныеРемонтыОборудования
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
			|		ПО торо_НормативныеРемонтыОборудования.ОбъектРемонта = торо_ОбъектыРемонта.Ссылка
			|ГДЕ
			|	торо_НормативныеРемонтыОборудования.ОбъектРемонта = &ОбъектРемонта
			|	И торо_НормативныеРемонтыОборудования.Приоритет";
			//|	И НЕ торо_ОбъектыРемонта.НеУчаствуетВПланировании";
		КонецЕсли;
		Запрос.УстановитьПараметр("ОбъектРемонта", ОбъектРР);
		
		ОРНеУчаствуетВПланировании = Ложь;
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.НеУчаствуетВПланированииОР Тогда
					ОРНеУчаствуетВПланировании = Истина;
				ИначеЕсли Выборка.НеУчаствуетВПланировании Тогда
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Для объекта ремонта ""%1"" вид ремонта ""%2"" не участвует в планировании!'"),ОбъектРР,Выборка.ВидРемонта));
				Иначе					
					СтрокаОР.Строки.Добавить().Объект = Выборка.ВидРемонта;
					Если СписокВидовРемонтов.НайтиПоЗначению(Выборка.ВидРемонта) = Неопределено Тогда
						СписокВидовРемонтов.Добавить(Выборка.ВидРемонта, , Истина);
					КонецЕсли;
				КонецЕсли;
					
			КонецЦикла;
			
			Если ОРНеУчаствуетВПланировании Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Объект ремонта ""%1"" не участвует в планировании!'"),ОбъектРР));
				СтрокаДерева = ДеревоВыбранныхЗначений.Строки.Найти(ОбъектРР);
				Если НЕ СтрокаДерева = Неопределено Тогда
					ДеревоВыбранныхЗначений.Строки.Удалить(СтрокаДерева);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Для объекта ремонта ""%1"" не заданы нормативы планирования!'"),ОбъектРР));
			СтрокаДерева = ДеревоВыбранныхЗначений.Строки.Найти(ОбъектРР);
			Если НЕ СтрокаДерева = Неопределено Тогда
				ДеревоВыбранныхЗначений.Строки.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура настраивает видимость элементов формы
//
Процедура УстановитьВидимость()
	Если ВидПодбора="ВидРемонтныхРабот" Тогда 
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораВидаРемонтов;
	ИначеЕсли ВидПодбора="ВидПараметровНаработки" Тогда 		
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораВидаПараметровНаработки;
	ИначеЕсли ВидПодбора="КонтролируемыеПоказатели" Тогда 		
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораКонтролируемыхПоказателей;
	ИначеЕсли ВидПодбора="ВводНачальныхДанных" Тогда 		
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораВводНачальныхДанных;
		ЗаполнитьПоНормативам = Ложь;
		ОбновитьДоступностьФлагов();
	ИначеЕсли ВидПодбора="НастройкаПодбораВводНачальныхДанныхСоВременем" Тогда
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораВводНачальныхДанныхСоВременем;	 
	ИначеЕсли ВидПодбора="Предписание" Тогда
		Элементы.ПанельНастроекПодбора.Видимость = Ложь;	
	ИначеЕсли ВидПодбора="Настройка подбора" Тогда 
		
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбора;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьФлагов()
	Элементы.ВводДанныхЗапрашиватьВидПараметровНаработки.Доступность = ЗаполнитьПоНормативам;
	Элементы.ВводДанныхЗапрашиватьВидИзмеряемыхПоказателей.Доступность = ЗаполнитьПоНормативам;
	Элементы.ВводДанныхЗапрашиватьВидРемонтныхРабот.Доступность = ЗаполнитьПоНормативам;
КонецПроцедуры


СостояниеДереваОР = Новый Структура("МассивОткрытыхОР",Новый Массив);

#КонецОбласти

