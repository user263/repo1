
#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнаяСтруктураИерархии",
	Истина);
	
	УчитыватьИерархиюЭлементов = "Не учитывать иерархию элементов";
	
	ЗапрашиватьВидРемонтныхРабот 		= Истина;
	ЗапрашиватьВидПараметровНаработки 	= Истина;
	Если Параметры.КлючНазначенияИспользования      = "торо_ГрафикРегламентныхМероприятийТОиР" 
		ИЛИ Параметры.КлючНазначенияИспользования   = "торо_КалькуляторРЦ" Тогда 
		
		ВидПодбора = "ВидРемонтныхРабот";
		
		Элементы.ТолькоГрафикиМероприятий.Видимость = Истина;
		ТолькоГрафикиМероприятий = Истина;
		
	
		
	ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_УчетКонтролируемыхПоказателей" Тогда 
		
		ВидПодбора="КонтролируемыеПоказатели";
		
	ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_УчетНаработкиОборудования"
		ИЛИ Параметры.КлючНазначенияИспользования   = "торо_УстановкаПроизвольногоЗначенияНаработки" Тогда 
		
		ВидПодбора="ВидПараметровНаработки"; 	
		
		ДатаСнятияПоказателей = ТекущаяДата();
	ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_ВводНачальныхДанных" Тогда 
		
		ВидПодбора="ВводНачальныхДанных";
		
	ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_СостоянияОбъектовРемонта" Тогда 
		
		ВидПодбора="НастройкаПодбораВводНачальныхДанныхСоВременем";
		
		Если Параметры.Свойство("ВидОперации") И Параметры.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации Тогда
			Элементы.ДатаНачалаУмолчание.Заголовок = НСтр("ru = 'Дата изменения состояния:'");
			Элементы.ДатаОкончанияУмолчание.Видимость = Ложь;
		КонецЕсли;	
	Иначе
		
		ВидПодбора="Настройка подбора";
		
	КонецЕсли;
	
	ЗаполнитьДеревоНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ТекСтруктураИерархииПриИзменении(Элемент)
	
	ЗаполнитьДеревоНаСервере();
	
	Для каждого СтрокаДерева Из Дерево.ПолучитьЭлементы() Цикл
		
		Элементы.Дерево.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоНормативамПриИзменении(Элемент)
	ОбновитьДоступностьФлагов();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево
&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ДеревоПриАктивизацииСтрокиОбработчикОжидания", 0.1, Истина);	
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборЗначения();	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокОбъектов
&НаКлиенте
Процедура СписокОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ВыборЗначения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
&НаКлиенте
Процедура Обновить(Команда)
		
	ЗаполнитьДеревоНаСервере();		
	
	Элементы.Дерево.Развернуть(Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	ВыделенныеСтроки = Элементы.СписокОбъектов.ВыделенныеСтроки;
	
	ЗначениеВозврата = ОтобратьОбъекты(ВыделенныеСтроки);
	
	Если ТипЗнч(ЗначениеВозврата) = Тип("ДанныеФормыДерево") Тогда
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ТолькоГрафикиМероприятий", ТолькоГрафикиМероприятий);
		СтруктураВозврата.Вставить("Дерево", ЗначениеВозврата);
		ОповеститьОВыборе(СтруктураВозврата); 		
		
	ИначеЕсли ТипЗнч(ЗначениеВозврата) = Тип("СписокЗначений") Тогда
		
		Если ВидПодбора="ВидРемонтныхРабот" Тогда
			ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды ремонтных работ'");
		ИначеЕсли ВидПодбора="КонтролируемыеПоказатели" Тогда
			ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды контролируемых показателей'");
		ИначеЕсли ВидПодбора = "ВидПараметровНаработки" Тогда
			ТекстЗаголовкаОкна = НСтр("ru = 'Выберите виды параметров наработки'");
		КонецЕсли;
		
		ЗначениеВозврата.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьЗавершение1",ЭтотОбъект),ТекстЗаголовкаОкна);
		
	ИначеЕсли ТипЗнч(ЗначениеВозврата) = Тип("Структура") Тогда
		
		ВыбраныЭлементыРемонтов = Ложь;
		ВыбраныЭлементыПоказателей = Ложь;
		ВыбраныЭлементыНаработки = Ложь;
		СтруктураДляПередачи = Новый Структура();
		Если ЗначениеВозврата.Свойство("СписокВидовРемонтов") Тогда
			
			ЗначениеВозврата.СписокВидовРемонтов.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьСписокВидовРемонтов",ЭтотОбъект, 
																					Новый Структура("СтруктураДляПередачи, ЗначениеВозврата", СтруктураДляПередачи, ЗначениеВозврата)),
																		  НСтр("ru = 'Выберите виды ремонтных работ'"));
			Возврат;
			
		КонецЕсли;
		
		ВыбратьФрагмент1(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ЗначениеВозврата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархическийПросмотр(Команда)
	
	Кнопка = Элементы.ФормаИерархическийПросмотр;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ТекДанные = Элементы.Дерево.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		СписокОбъектов.Очистить();
		УстановитьОтборВСписке(ТекДанные.Ссылка, Кнопка.Пометка, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура ЗаполнитьДеревоНаСервере()
	
	Дерево.ПолучитьЭлементы().Очистить();
	
	ДеревоСФормы = РеквизитФормыВЗначение("Дерево");
		НС = ДеревоСФормы.Строки.Добавить();
	НС.Ссылка = "Список объектов реламентных мероприятий";
	НС.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(НС.Ссылка, ТекСтруктураИерархии);
	ЗаполнитьОсновноеВДеревеСервере(НС,);
	
	ЗначениеВРеквизитФормы(ДеревоСФормы, "Дерево");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОсновноеВДеревеСервере(ДеревоСтрока,ЕстьКартинка = Истина)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_СписокОбъектовРегламентногоМероприятия.Ссылка КАК ОбъектИерархии,
	               |	торо_СписокОбъектовРегламентногоМероприятия.Родитель КАК РодительИерархии
	               |ИЗ
	               |	Справочник.торо_СписокОбъектовРегламентногоМероприятия КАК торо_СписокОбъектовРегламентногоМероприятия
	               |ГДЕ
	               |	торо_СписокОбъектовРегламентногоМероприятия.ПометкаУдаления = ЛОЖЬ
				   |УПОРЯДОЧИТЬ ПО
				   |	торо_СписокОбъектовРегламентногоМероприятия.Ссылка.ЭтоГруппа ИЕРАРХИЯ,
				   |	Ссылка ";
	
	
   РезультатЗапроса = Запрос.Выполнить();
   
   Если РезультатЗапроса.Пустой() Тогда
	   Возврат;
   КонецЕсли;
   
   ТаблицаИерархии = РезультатЗапроса.Выгрузить();	
   
   СтруктураПоиска = Новый Структура("РодительИерархии", Справочники.торо_СписокОбъектовРегламентногоМероприятия.ПустаяСсылка());
   МассивКорневыхСтрок = ТаблицаИерархии.НайтиСтроки(СтруктураПоиска);
	
	Для каждого Элем Из МассивКорневыхСтрок Цикл 
		
		НовСтрокаДерева =ДеревоСтрока.Строки.Добавить();
		НовСтрокаДерева.Ссылка = Элем.ОбъектИерархии;
		НовСтрокаДерева.РодительИерархии = Элем.РодительИерархии;
		НовСтрокаДерева.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(НовСтрокаДерева.Ссылка);
				
		СтруктураПоиска = Новый Структура("РодительИерархии", Элем.ОбъектИерархии);
		МассивСтрок = ТаблицаИерархии.НайтиСтроки(СтруктураПоиска);
		
		Для каждого ЭлементМассива ИЗ МассивСтрок Цикл
			НС = НовСтрокаДерева.Строки.Добавить();
			НС.Ссылка = ЭлементМассива.ОбъектИерархии;
			НС.РодительИерархии = ЭлементМассива.РодительИерархии;
			НС.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(НС.Ссылка);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(СсылкаСтроки, ПометкаУдаления = Неопределено)
	
	Если ТипЗнч(СсылкаСтроки) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") Тогда
		
		Если СсылкаСтроки.ЭтоГруппа Тогда
			ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 6, 5),?(ПометкаУдаления, 6, 5));
		Иначе
			ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 1, 0),?(ПометкаУдаления, 1, 0));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(СсылкаСтроки) = Тип("Строка") Тогда
		
		ИндексКартинки = 9;
		
	ИначеЕсли ТипЗнч(СсылкаСтроки) <> Тип("СправочникСсылка.торо_СтруктурыОР") И ТипЗнч(СсылкаСтроки) <> Тип("Строка") Тогда 
		
		ИндексКартинки = ?(ПометкаУдаления = Неопределено,?(СсылкаСтроки.ПометкаУдаления, 10, 9),?(ПометкаУдаления, 10, 9));
		
	Иначе
		
		ИндексКартинки = 4;
		
	КонецЕсли;
	
	Возврат ИндексКартинки;
	
КонецФункции // ОпределитьИндексКартинки()

&НаКлиенте
Процедура ДеревоПриАктивизацииСтрокиОбработчикОжидания()
	
	Если ТекущийЭлементДерева = Элементы.Дерево.ТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьОтборВСписке(Элементы.Дерево.ТекущиеДанные.Ссылка, Элементы.ФормаИерархическийПросмотр.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборВСписке(РодительИерархии, ИерархическийПросмотр,Перезаполнить = Истина)
	
	Если ИерархическийПросмотр Тогда
		
		СписокОбъектов.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
			               |	торо_СписокОбъектовРегламентногоМероприятия.Ссылка,
			               |	торо_СписокОбъектовРегламентногоМероприятия.Наименование,
			               |	торо_СписокОбъектовРегламентногоМероприятия.Код
			               |ИЗ
			               |	Справочник.торо_СписокОбъектовРегламентногоМероприятия КАК торо_СписокОбъектовРегламентногоМероприятия  
						   |ГДЕ ";
						   
		 Если ТипЗнч(РодительИерархии) <> Тип("Строка") Тогда
			Запрос.Текст = Запрос.Текст + "  торо_СписокОбъектовРегламентногоМероприятия.Ссылка В ИЕРАРХИИ(&Родитэл)";					   
			Запрос.УстановитьПараметр("Родитэл",РодительИерархии);
		Иначе
			Запрос.Текст = Запрос.Текст + "  торо_СписокОбъектовРегламентногоМероприятия.Родитель = &Родитэл ";
			Запрос.УстановитьПараметр("Родитэл",Справочники.торо_СписокОбъектовРегламентногоМероприятия.ПустаяСсылка());
		КонецЕсли;
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НС = СписокОбъектов.Добавить();
			НС.Ссылка = Выборка.Ссылка;
			НС.Наименование = Выборка.Наименование;
			НС.Код = Выборка.Код;
			НС.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(Выборка.Ссылка);
		КонецЦикла;
	ИначеЕсли НЕ ИерархическийПросмотр И Перезаполнить Тогда
		СписокОбъектов.Очистить();
		Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			               |	торо_СписокОбъектовРегламентногоМероприятия.Ссылка,
			               |	торо_СписокОбъектовРегламентногоМероприятия.Наименование,
			               |	торо_СписокОбъектовРегламентногоМероприятия.Код
			               |ИЗ
			               |	Справочник.торо_СписокОбъектовРегламентногоМероприятия КАК торо_СписокОбъектовРегламентногоМероприятия
						   |";
						   
		Если ТипЗнч(РодительИерархии) <> Тип("Строка") Тогда
			Запрос.Текст = Запрос.Текст + "ГДЕ торо_СписокОбъектовРегламентногоМероприятия.Ссылка В ИЕРАРХИИ(&Родитэл)";					   
			Запрос.УстановитьПараметр("Родитэл",РодительИерархии);
		КонецЕсли;    
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			НС = СписокОбъектов.Добавить();
			НС.Ссылка = Выборка.Ссылка;
			НС.Наименование = Выборка.Наименование;
			НС.Код = Выборка.Код;
			НС.Картинка = ОпределитьИндексКартинкиСтрокиДереваПроизвольнойИерархииНаСервере(Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;


	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоследнихРодителей(ИдентификаторТекСтроки, МассивРодителейОР)
	
	СтрокаДерева = Дерево.НайтиПоИдентификатору(ИдентификаторТекСтроки);
	
	КоллекцияСтрок = СтрокаДерева.ПолучитьЭлементы();
	Если НЕ СтрокаДерева.СвязиОбновлялись Тогда
		
		Для каждого Элем Из КоллекцияСтрок Цикл
			МассивРодителейОР.Добавить(Новый Структура("ОбъектИерархии, Идентификатор",Элем.Ссылка, Элем.ПолучитьИдентификатор()));
		КонецЦикла;
		
	Иначе
		
		Для каждого Элем Из КоллекцияСтрок Цикл
		
			НайтиПоследнихРодителей(Элем.ПолучитьИдентификатор() ,МассивРодителейОР);	
		
		КонецЦикла; 
		
	КонецЕсли;
	 	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЗавершение1(Список, ДополнительныеПараметры) Экспорт
	
	ВыбраныЭлементы = (Список <> Неопределено);
	
	Если ВыбраныЭлементы Тогда
		
		СтруктураВозврата = Новый Структура;
		СтруктураВозврата.Вставить("ТолькоГрафикиМероприятий", ТолькоГрафикиМероприятий);
		СтруктураВозврата.Вставить("Дерево", УдалитьНенужныеСтрокиДереваНаСервере(Список));

		ОповеститьОВыборе(СтруктураВозврата);
		
		ДеревоВыбрСтрок.ПолучитьЭлементы().Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСписокВидовРемонтов(Список, ДополнительныеПараметры) Экспорт
	
	ЗначениеВозврата = ДополнительныеПараметры.ЗначениеВозврата;
	СтруктураДляПередачи = ДополнительныеПараметры.СтруктураДляПередачи;
	
	ВыбраныЭлементыРемонтов = (Список <> Неопределено);
	СтруктураДляПередачи.Вставить("СписокВидовРемонтов", Список);
	
	ВыбратьФрагмент1(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ЗначениеВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФрагмент1(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ЗначениеВозврата)	
	ВыбраныЭлементыПоказателей = Ложь;
	
	Если ЗначениеВозврата.Свойство("СписокВидовПоказателей") Тогда
		
		ЗначениеВозврата.СписокВидовПоказателей.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьСписокВидовПоказателей",ЭтотОбъект,
																					Новый Структура("СтруктураДляПередачи, ЗначениеВозврата, ВыбраныЭлементыРемонтов", СтруктураДляПередачи, ЗначениеВозврата, ВыбраныЭлементыРемонтов)),
																		  НСтр("ru = 'Выберите виды контролируемых показателей'"));
		Возврат;
		
	КонецЕсли;
	ВыбратьФрагмент2(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ЗначениеВозврата);	

КонецПроцедуры // ВыбратьФрагмент1()

&НаКлиенте
Процедура ВыбратьСписокВидовПоказателей(Список, ДополнительныеПараметры) Экспорт
	
	ЗначениеВозврата = ДополнительныеПараметры.ЗначениеВозврата;
	СтруктураДляПередачи = ДополнительныеПараметры.СтруктураДляПередачи;
	ВыбраныЭлементыРемонтов = ДополнительныеПараметры.ВыбраныЭлементыРемонтов;
	
	ВыбраныЭлементыПоказателей = (Список <> Неопределено);
	
	СтруктураДляПередачи.Вставить("СписокВидовРемонтов", Список);
		
	ВыбратьФрагмент2(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ЗначениеВозврата);	

КонецПроцедуры // ВыбратьСписокВидовПоказателей()

&НаКлиенте
Процедура ВыбратьФрагмент2(СтруктураДляПередачи,ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ЗначениеВозврата)

	ВыбраныЭлементыНаработки = Ложь;
	
	Если ЗначениеВозврата.Свойство("СписокВидовПараметров") Тогда
		
		ЗначениеВозврата.СписокВидовПоказателей.ПоказатьОтметкуЭлементов(Новый ОписаниеОповещения("ВыбратьСписокВидовПараметров",ЭтотОбъект,
																					Новый Структура("СтруктураДляПередачи, ЗначениеВозврата, ВыбраныЭлементыРемонтов, ВыбраныЭлементыПоказателей",
																									СтруктураДляПередачи, ЗначениеВозврата, ВыбраныЭлементыРемонтов, ВыбраныЭлементыПоказателей)),
																		  НСтр("ru = 'Выберите виды параметров наработки'"));
		Возврат;
		
	КонецЕсли;
	ВыбратьЗавершение(ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ВыбраныЭлементыНаработки,СтруктураДляПередачи);

КонецПроцедуры // ВыбратьФрагмент2()

&НаКлиенте
Процедура ВыбратьСписокВидовПараметров(Список, ДополнительныеПараметры) Экспорт

	СтруктураДляПередачи = ДополнительныеПараметры.СтруктураДляПередачи;
	ЗначениеВозврата = ДополнительныеПараметры.ЗначениеВозврата;
	ВыбраныЭлементыРемонтов = ДополнительныеПараметры.ВыбраныЭлементыРемонтов;
	ВыбраныЭлементыПоказателей = ДополнительныеПараметры.ВыбраныЭлементыПоказателей;
	
	ВыбраныЭлементыНаработки = (Список <> Неопределено);
	
	СтруктураДляПередачи.Вставить("СписокВидовРемонтов", Список);
	
	ВыбратьЗавершение(ВыбраныЭлементыРемонтов,ВыбраныЭлементыПоказателей,ВыбраныЭлементыНаработки,СтруктураДляПередачи);

КонецПроцедуры // ВыбратьСписокВидовПараметров()

&НаКлиенте
Процедура ВыбратьЗавершение(ВыбраныЭлементыРемонтов, ВыбраныЭлементыПоказателей, ВыбраныЭлементыНаработки, СтруктураДляПередачи)
	
	Если ВыбраныЭлементыРемонтов ИЛИ ВыбраныЭлементыПоказателей ИЛИ ВыбраныЭлементыНаработки Тогда
		
		ОповеститьОВыборе(УдалитьНенужныеСтрокиДереваНаСервере(СтруктураДляПередачи));
		
		ДеревоВыбрСтрок.ПолучитьЭлементы().Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УдалитьНенужныеСтрокиДереваНаСервере(СписокВыбранныхЗначений)
	
	ДеревоВыбранныхСтрок = РеквизитФормыВЗначение("ДеревоВыбрСтрок");
	
	Если ТипЗнч(СписокВыбранныхЗначений) = Тип("СписокЗначений") Тогда
		
		Если ВидПодбора="ВидРемонтныхРабот" Тогда 
			Если ЗапрашиватьВидРемонтныхРабот Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений Цикл
					
					МассивСтрокДерева = ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("Объект", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
				
				ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
				Возврат ДеревоВыбрСтрок;
				
			КонецЕсли;
		ИначеЕсли  ВидПодбора="ВидПараметровНаработки" Тогда 
			
			Если ЗапрашиватьВидПараметровНаработки Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("Показатель", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
								
				ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
				
				Возврат ДеревоВыбрСтрок;
				
			КонецЕсли;
		ИначеЕсли ВидПодбора="КонтролируемыеПоказатели" Тогда
			
			Если ЗапрашиватьКонтролируемыеПоказатели Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("Показатель", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
				ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
				Возврат ДеревоВыбрСтрок;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если ВидПодбора = "ВводНачальныхДанных" Тогда 	 
			Если ВводДанныхЗапрашиватьВидРемонтныхРабот И ЗаполнитьПоНормативам И СписокВыбранныхЗначений.Свойство("СписокВидовРемонтов") Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений.СписокВидовРемонтов Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("Объект", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
				
				Если ДеревоВыбранныхСтрок.Строки[0].Строки.Количество() = 0 Тогда
					НовСтр = ДеревоВыбранныхСтрок.Строки[0].Строки.Добавить();
					НовСтр.Объект = Справочники.торо_ВидыРемонтов.ПустаяСсылка();
				КонецЕсли;
				
			КонецЕсли;
			Если ВводДанныхЗапрашиватьВидПараметровНаработки И ЗаполнитьПоНормативам И СписокВыбранныхЗначений.Свойство("СписокВидовПараметров") Тогда 
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений.СписокВидовПараметров Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("Показатель", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли;
			Если ВводДанныхЗапрашиватьВидИзмеряемыхПоказателей И ЗаполнитьПоНормативам И СписокВыбранныхЗначений.Свойство("СписокВидовПоказателей") Тогда
				
				Для Каждого ЭлементСписка Из СписокВыбранныхЗначений.СписокВидовПоказателей Цикл
					
					МассивСтрокДерева =  ДеревоВыбранныхСтрок.Строки.НайтиСтроки(Новый Структура("ИзмеряемыйПоказатель", ЭлементСписка.Значение), Истина);
					
					Если Не ЭлементСписка.Пометка Тогда
						
						Для Каждого ЭлементМассива Из МассивСтрокДерева Цикл
							
							ЭлементМассива.Родитель.Строки.Удалить(ЭлементМассива);
							
						КонецЦикла; 
						
					КонецЕсли; 
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
		Возврат ДеревоВыбрСтрок;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ВыборЗначения()
	
	ТекДанные = Неопределено;
	ТекЭлементФормы = ЭтаФорма.ТекущийЭлемент;
	
	Если ТекЭлементФормы.Имя = "Дерево" Тогда
		
		ТекДанные = Элементы.Дерево.ТекущиеДанные;
		
	ИначеЕсли ТекЭлементФормы.Имя = "СписокОбъектов" Тогда
		
		ТекДанные = Элементы.СписокОбъектов.ТекущиеДанные;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.КлючНазначенияИспользования) Тогда 
		Если Параметры.КлючНазначенияИспользования = "ДобавлениеВИерархию" Тогда
			Если ТекДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ВыбрЗнач = ВыбратьЗначениеНаСервере(ТекДанные.Ссылка);
			
			Если ВыбрЗнач = Неопределено Тогда
				ПоказатьВопрос(Новый ОписаниеОповещения("ВыборЗначенияЗавершение", ЭтотОбъект, Новый Структура("ТекДанные", ТекДанные)), НСтр("ru = 'Выбрать все подчиненные объекты ремонта вместе с текущим?'"), РежимДиалогаВопрос.ДаНет);		
			Иначе
				ОповеститьОВыборе(ВыбрЗнач);
			КонецЕсли;
			
		ИначеЕсли Параметры.КлючНазначенияИспользования = "торо_НастройкаРегистрацииНаработкиЗависимыхОР" Тогда
			
			ВыбранноеЗначениеОР = СписокОР.НайтиПоЗначению(ТекДанные.Ссылка);
			Если ВыбранноеЗначениеОР = Неопределено Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У выбранного объекта ремонта не ведется учет наработки по параметру ""%1"".'"),ПараметрНаработки));
				ЭтаФорма.ЗакрыватьПриВыборе = Ложь;
				Возврат;
			Иначе
				ЭтаФорма.ЗакрыватьПриВыборе = Истина;
				
				
				Если Не ТекДанные = Неопределено Тогда
					
					ОповеститьОВыборе(ТекДанные.Ссылка);
					
				КонецЕсли; 
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе 
		
		Если Не ТекДанные = Неопределено Тогда
			
			ЭтаФорма.ЗакрыватьПриВыборе = Истина;
			
			ОповеститьОВыборе(ТекДанные.Ссылка);
			
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекДанные = ДополнительныеПараметры.ТекДанные;
    
    
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ОповеститьОВыборе(ДеревоПодчиненных);
    Иначе
        ОповеститьОВыборе(ТекДанные.Ссылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыбратьЗначениеНаСервере(ОбъектРемонта)
	
	ДеревоПодчиненых = Справочники.торо_ОбъектыРемонта.ПолучитьДеревоЭлементов(ОбъектРемонта,ТекСтруктураИерархии);
	
	Если ДеревоПодчиненых.Строки[0].Строки.Количество() = 0 Тогда
		Возврат ОбъектРемонта;
	Иначе
		ЗначениеВРеквизитФормы(ДеревоПодчиненых, "ДеревоПодчиненных");
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура выполняет отбор и передачу объектов и видов ремонтных работ
//
// Параметры
//  <НаборСтрок>  - коллекция строк объектов ремонтов для отбора.
//
Функция ОтобратьОбъекты(НаборСтрок)
	
	ДеревоВыбранныхСтрок = РеквизитФормыВЗначение("ДеревоВыбрСтрок");
			
	МассивОбъектов = Новый Массив;
	
	СписокВидовПараметров = Новый СписокЗначений; // Параметры наработки
	
	СписокВидовРемонтов = Новый СписокЗначений; 
	
	Для Каждого Стр Из НаборСтрок Цикл
		
		ВыдСтрока = СписокОбъектов.НайтиПоИдентификатору(Стр);
		
		Если НЕ ВыдСтрока = Неопределено Тогда
			ОбъектРР = ВыдСтрока.Ссылка;
			
			Если НЕ УчитыватьИерархиюЭлементов Тогда
			
				Если ТипЗнч(ОбъектРР) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") и НЕ ОбъектРР.ЭтоГруппа Тогда
					ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхСтрок, ОбъектРР, СписокВидовРемонтов);
				   	МассивОбъектов.Добавить(ОбъектРР);
				КонецЕсли;
			
			Иначе
				
				Если ТипЗнч(ОбъектРР) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") И НЕ ОбъектРР.ЭтоГруппа Тогда
					ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхСтрок, ОбъектРР, СписокВидовРемонтов);
					МассивОбъектов.Добавить(ОбъектРР);
				КонецЕсли;
				
				ТаблицаЗависимыхОР = ВыбратьЗависимыеОРПоИерархии(ОбъектРР);
				
				Для Каждого ТекСтрока из ТаблицаЗависимыхОР Цикл						     				
					Если ТипЗнч(ТекСтрока.ОбъектИерархии) = Тип("СправочникСсылка.торо_СписокОбъектовРегламентногоМероприятия") И НЕ ТекСтрока.ОбъектИерархии.ЭтоГруппа Тогда
						ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхСтрок, ТекСтрока.ОбъектИерархии, СписокВидовРемонтов);
						МассивОбъектов.Добавить(ТекСтрока.ОбъектИерархии);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		КонецЕсли;			     		
	КонецЦикла;
	
	Если СписокВидовПараметров.Количество() = 0 И СписокВидовРемонтов.Количество() = 0  Тогда
		ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
		Возврат ДеревоВыбрСтрок;		
	КонецЕсли;
	
	Если ВидПодбора="ВидРемонтныхРабот" Тогда 
		Если ЗапрашиватьВидРемонтныхРабот Тогда  			
			ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
			Возврат СписокВидовРемонтов;  
		Иначе
			ЗначениеВРеквизитФормы(ДеревоВыбранныхСтрок, "ДеревоВыбрСтрок");
			Возврат ДеревоВыбрСтрок;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ДеревоВыбрСтрок;
	
КонецФункции // ОтобратьОбъекты()

&НаСервере
Функция ВыбратьЗависимыеОРПоИерархии(ОбъектРемонта)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СписокОбъектовРегламентногоМероприятия.Ссылка КАК ОбъектИерархии
	               |ИЗ
	               |	Справочник.торо_СписокОбъектовРегламентногоМероприятия КАК торо_СписокОбъектовРегламентногоМероприятия
	               |ГДЕ
	               |	торо_СписокОбъектовРегламентногоМероприятия.Родитель В ИЕРАРХИИ (&Родитель)
				   |	И НЕ торо_СписокОбъектовРегламентногоМероприятия.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("Родитель", ОбъектРемонта);
	ТаблицаИерархииОР = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаИерархииОР;
	
КонецФункции

&НаСервере
// Функция возвращает таблицу объектов ремонта из переданной в качестве параметра таблицы иерархии, 
// родителями которых является указаный ОР.
//
&НаСервере
Процедура ЗаполнитьСтрокуДереваВыбранныхОбъектов(ДеревоВыбранныхЗначений, МассивОбъектов,  СписокВидовРемонтов)
	
	СтрокаМаршрут = ДеревоВыбранныхЗначений.Строки.Добавить();
	СтрокаМаршрут.Объект = МассивОбъектов;
	
		СтруктураОтбора = Новый Структура("СписокОбъектов", МассивОбъектов);
		Выборка = РегистрыСведений.торо_РегламентныеМероприятияИСпискиОбъектов.Выбрать(СтруктураОтбора);
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.НеУчаствуетВПланировании Тогда
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для списка объектов регламентных мероприятий ""%1"" вид мероприятия ""%2"" не участвует в планировании!'"),
					Строка(Выборка.СписокОбъектов),Строка(Выборка.ВидМероприятия)));
				Продолжить;
			КонецЕсли; 
			
			Если ТолькоГрафикиМероприятий и Не Выборка.ВидМероприятия.ГрафикМероприятий Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаМаршрут.Строки.Добавить().Объект = Выборка.ВидМероприятия;
			
			Если СписокВидовРемонтов.НайтиПоЗначению(Выборка.ВидМероприятия) = Неопределено Тогда
				
				СписокВидовРемонтов.Добавить(Выборка.ВидМероприятия, , Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
КонецПроцедуры

&НаКлиенте
// Процедура настраивает видимость элементов формы
//
Процедура УстановитьВидимость()
	Если ВидПодбора="ВидРемонтныхРабот" Тогда 
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораВидаРемонтов;
	ИначеЕсли ВидПодбора="ВидПараметровНаработки" Тогда 		
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораВидаПараметровНаработки;
	ИначеЕсли ВидПодбора="КонтролируемыеПоказатели" Тогда 		
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораКонтролируемыхПоказателей;
	ИначеЕсли ВидПодбора="ВводНачальныхДанных" Тогда 		
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораВводНачальныхДанных;
		ЗаполнитьПоНормативам = Ложь;
		ОбновитьДоступностьФлагов();
	ИначеЕсли ВидПодбора="НастройкаПодбораВводНачальныхДанныхСоВременем" Тогда
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбораВводНачальныхДанныхСоВременем;	 
		
	ИначеЕсли ВидПодбора="Настройка подбора" Тогда 
		
		Элементы.ПанельНастроекПодбора.ТекущаяСтраница = Элементы.ПанельНастроекПодбора.ПодчиненныеЭлементы.НастройкаПодбора;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоступностьФлагов()
	Элементы.ВводДанныхЗапрашиватьВидПараметровНаработки.Доступность = ЗаполнитьПоНормативам;
	Элементы.ВводДанныхЗапрашиватьВидИзмеряемыхПоказателей.Доступность = ЗаполнитьПоНормативам;
	Элементы.ВводДанныхЗапрашиватьВидРемонтныхРабот.Доступность = ЗаполнитьПоНормативам;
КонецПроцедуры

#КонецОбласти
