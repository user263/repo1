

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НастройкиВосстановлены = ВосстановитьНастройки();
	
	Если НЕ НастройкиВосстановлены Тогда
		
		Объект.Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
																			"НастройкиТОиР",
																			"ОсновнаяОрганизация",
																			Истина);
		
		Объект.Завершенные              = Ложь;
		Объект.ДатаАктуальности         = ТекущаяДата();
		Объект.ПлановыйПериод           = 10;
		Объект.Периодичность            = Перечисления.Периодичность.День;
		Объект.ПериодОбновления         = 180;
		Объект.АвтоматическоеОбновление = Истина;
		
		ЗаполнитьТаблицуКритичности();
		ЗаполнитьТаблицуПриоритетностиОР();
		
	КонецЕсли;
	Если Объект.ВидДаты = 0 Тогда
		Объект.ДатаАктуальности = ТекущаяДата();
	КонецЕсли;
	ФОИспользоватьППР                     = ПолучитьФункциональнуюОпцию("торо_ИспользоватьППР");
	ФОИспользоватьРегламентныеМероприятия = ПолучитьФункциональнуюОпцию("торо_ИспользоватьРегламентныеМероприятия");
	ФОИспользоватьВнешниеОснования        = ПолучитьФункциональнуюОпцию("торо_ИспользоватьВнешниеОснованияДляРабот");
	ФОИспользоватьДефекты                 = ПолучитьФункциональнуюОпцию("торо_УчетВыявленныхДефектовОборудования");
	ФОИспользоватьСметы                   = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСметыРемонта");
	ФОИспользоватьНаряды                  = ПолучитьФункциональнуюОпцию("торо_ИспользоватьНарядыНаВыполнениеРабот");
	ФОИспользоватьСтатусыДокументов 		= ПолучитьФункциональнуюОпцию("торо_ИспользоватьСтатусыДокументовТОиР");
	
	Если Не ФОИспользоватьППР
		И Не ФОИспользоватьДефекты
		И Не ФОИспользоватьВнешниеОснования Тогда
		ИспользоватьУправлениеРемонтами = Ложь;
	Иначе
		ИспользоватьУправлениеРемонтами = Истина;
	КонецЕсли; 
	
	УстановитьПараметрыДинамическогоСписка();
	
	УстановитьУсловноеОформление();
			
	ЗаполнитьТаблицуВводаНаОсновании();
	
	торо_СобытияФорм.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка, Новый Структура("УстановитьСвойствоЭлементовФормыОтПрав", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(сзСтатусОР) Тогда
		сзСтатусОР.Добавить("Зарегистрирован (выявленный дефект)", "Зарегистрирован (выявленный дефект)");
		сзСтатусОР.Добавить("Запланировано устранение (выявленный дефект)", "Запланировано устранение (выявленный дефект)");
		сзСтатусОР.Добавить("Устраняется (выявленный дефект)", "Устраняется (выявленный дефект)");
		сзСтатусОР.Добавить("Устранен (выявленный дефект)", "Устранен (выявленный дефект)");
		
		сзСтатусОР.Добавить("Зарегистрирован (внешнее основание)", "Зарегистрирован (внешнее основание)");
		сзСтатусОР.Добавить("Запланировано устранение (внешнее основание)", "Запланировано устранение (внешнее основание)");
		сзСтатусОР.Добавить("Устраняется (внешнее основание)", "Устраняется (внешнее основание)");
		сзСтатусОР.Добавить("Устранен (внешнее основание)", "Устранен (внешнее основание)");
		
		сзСтатусОР.Добавить("Введен ППР (план-график ППР)", "Введен ППР (план-график ППР)");
		сзСтатусОР.Добавить("Запланировано выполнение (план-график ППР)", "Запланировано выполнение (план-график ППР)");
		сзСтатусОР.Добавить("Выполняется (план-график ППР)", "Выполняется (план-график ППР)");
		сзСтатусОР.Добавить("Выполнен (план-график ППР)", "Выполнен (план-график ППР)");
	КонецЕсли;
	
	ЗаполнитьСписокВыбораОтбораПоСтатусуДокумента();

	флОстановочныеПриИзменении(Элементы.флОстановочные);
	ИспользоватьОтборПоСтатусуПриИзменении(Элементы.ИспользоватьОтборПоСтатусу);
	ИспользоватьОтборПоСтатусуДокументаПриИзменении(Элементы.ИспользоватьОтборПоСтатусуДокумента);
	
	УстановитьОтборыПоКолонкеСтатусОР();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если Не ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданДокументЧерезРМТехСпец" Тогда
		
		Если Источник = Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот") Тогда
			УстановитьПараметрыДинамическогоСпискаКлиент(Истина, Истина, Истина, Ложь, Ложь);
		ИначеЕсли Источник = Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот") Тогда
			УстановитьПараметрыДинамическогоСпискаКлиент(Ложь, Истина, Ложь, Ложь, Ложь);
		ИначеЕсли Источник = Тип("ДокументСсылка.торо_ЗаявкаНаРемонт") Тогда
			УстановитьПараметрыДинамическогоСпискаКлиент(Истина, Ложь, Ложь, Ложь, Ложь);
		ИначеЕсли Источник = Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие") Тогда
			УстановитьПараметрыДинамическогоСпискаКлиент(Ложь,,Ложь, Истина, Ложь);
		ИначеЕсли Источник = Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия") Тогда
			УстановитьПараметрыДинамическогоСпискаКлиент(Ложь,,Ложь, Истина, Истина);
		КонецЕсли;
		
		УстановитьУсловноеОформление();
		
	ИначеЕсли ИмяСобытия = "ПерезаполнитьТаблицы" Тогда
		ЗаполнитьЗначенияСвойств(Объект, Параметр);
		
		УстановитьПараметрыДинамическогоСпискаКлиент();
				
		РежимВыделенияСтрок = Параметр.РежимВыделенияСтрок;
		УстановитьУсловноеОформление();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическогоСпискаКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	УстановитьПараметрыДинамическогоСпискаКлиент();

КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСтатусуПриИзменении(Элемент)
	
	Элементы.СтатусОР.Доступность = ИспользоватьОтборПоСтатусу;
	СтатусОР = "";
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Ремонты.Отбор, "СтатусОР", СтатусОР,,,ИспользоватьОтборПоСтатусу);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОРПриИзменении(Элемент)
	
	ИспользоватьОтборПоСтатусу = ЗначениеЗаполнено(СтатусОР);
	ЗначениеОтбора = Элемент.СписокВыбора.НайтиПоЗначению(СтатусОР).Представление;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Ремонты.Отбор, "СтатусОР", ЗначениеОтбора,,,ИспользоватьОтборПоСтатусу);
	
КонецПроцедуры

&НаКлиенте
Процедура флОстановочныеПриИзменении(Элемент)
	
	Если Ремонты.Отбор.Элементы.Количество() > ИндексОтбораПоОстановочным Тогда
		Ремонты.Отбор.Элементы.Удалить(ИндексОтбораПоОстановочным);
	КонецЕсли;

	Если Не флОстановочные Тогда
		ДокументОстановочного = Неопределено;
	КонецЕсли;
	
	Элементы.ДокументОстановочного.Доступность = флОстановочные;
	Если флОстановочные Тогда
		ЭлементОтбора = Ремонты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("IDОсновного");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементОтбора.Использование = Истина;
		ИндексОтбораПоОстановочным = Ремонты.Отбор.Элементы.Индекс(ЭлементОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьОтборПоСтатусуДокументаПриИзменении(Элемент)
	
	Если ФОИспользоватьСтатусыДокументов Тогда
		Элементы.ОтборПоСтатусуДокумента.Доступность = ИспользоватьОтборПоСтатусуДокумента;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Ремонты.Отбор, "СтатусДокумента", ОтборПоСтатусуДокумента,,,ИспользоватьОтборПоСтатусуДокумента);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСтатусуДокументаПриИзменении(Элемент)
	
	Если ФОИспользоватьСтатусыДокументов Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Ремонты.Отбор, "СтатусДокумента", ОтборПоСтатусуДокумента,,,ИспользоватьОтборПоСтатусуДокумента);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ВидимостьОтбораОстановочные = ТекущаяСтраница.Имя = "СтраницаРемонты";
	Элементы.флОстановочные.Видимость = ВидимостьОтбораОстановочные;
	Элементы.ДокументОстановочного.Видимость = ВидимостьОтбораОстановочные;
	
	Элементы.ИспользоватьОтборПоСтатусу.Видимость = ВидимостьОтбораОстановочные;
	Элементы.СтатусОР.Видимость = ВидимостьОтбораОстановочные;
	Элементы.ГруппаСтатусДокумента.Видимость = ВидимостьОтбораОстановочные И ФОИспользоватьСтатусыДокументов;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОстановочногоПриИзменении(Элемент)
	
	Ремонты.Отбор.Элементы.Удалить(ИндексОтбораПоОстановочным);
	Если ЗначениеЗаполнено(ДокументОстановочного) Тогда
		ЭлементОтбора = Ремонты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("IDОсновного");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ПолучитьIDОстановочного(ДокументОстановочного);
		ЭлементОтбора.Использование = Истина;
		ИндексОтбораПоОстановочным = Ремонты.Отбор.Элементы.Индекс(ЭлементОтбора);
	Иначе
		ЭлементОтбора = Ремонты.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("IDОсновного");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ЭлементОтбора.Использование = Истина;
		ИндексОтбораПоОстановочным = Ремонты.Отбор.Элементы.Индекс(ЭлементОтбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусОРОчистка(Элемент, СтандартнаяОбработка)
	Для каждого текСтрока из сзСтатусОР Цикл
		текСтрока.Пометка = Ложь;
	КонецЦикла;
		
	УстановитьОтборыПоКолонкеСтатусОР();
КонецПроцедуры

&НаКлиенте
Процедура СтатусОРНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОткрытьФорму("ОбщаяФорма.торо_ВыборСостоянияРемонта", Новый Структура("сзСтатусОР", сзСтатусОР),ЭтаФорма,,,,
		Новый ОписаниеОповещения("ВозвратСпискаСостояний", ЭтотОбъект));
	
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонты
&НаКлиенте
Процедура РемонтыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "РемонтыДокумент" Тогда
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.Документ);
		
	ИначеЕсли Поле.Имя = "РемонтыОбъектРемонта" Тогда 
		
		ПоказатьЗначение(Неопределено,Элемент.ТекущиеДанные.ОбъектРемонта);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РемонтыПриАктивизацииСтроки(Элемент)
	УстановитьФильтрПоРемонту();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаявкиНаРемонт
&НаКлиенте
Процедура ЗаявкиНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	 
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")));

		ОткрытьДокумент("Документ.торо_ЗаявкаНаРемонт.Форма.ФормаДокумента", Элемент.ТекущиеДанные.ДокументЗаявка, ОписаниеОповещения);
		
	КонецЕсли;  
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНарядыНаРемонт
&НаКлиенте
Процедура НарядыНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")));

		ОткрытьДокумент("Документ.торо_НарядНаВыполнениеРемонтныхРабот.Форма.ФормаДокумента", Элемент.ТекущиеДанные.ДокументНаряд, ОписаниеОповещения);
		
	КонецЕсли;  	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАктыНаРемонт
&НаКлиенте
Процедура АктыНаРемонтВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")));

		ОткрытьДокумент("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаДокумента", Элемент.ТекущиеДанные.ДокументАкт, ОписаниеОповещения);
		
	КонецЕсли;  	
	
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыМероприятия
&НаКлиенте
Процедура МероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Поле.Имя = "МероприятияДокумент" Тогда
		
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Документ);
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура МероприятияПриАктивизацииСтроки(Элемент)
	
	УстановитьФильтрПоРемонту();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНарядыНаМероприятия
&НаКлиенте
Процедура НарядыНаМероприятияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие")));

		ОткрытьДокумент("Документ.торо_НарядНаРегламентноеМероприятие.Форма.ФормаДокумента", Элемент.ТекущиеДанные.ДокументНаряд, ОписаниеОповещения);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАктыПоМероприятию
&НаКлиенте
Процедура АктыПоМероприятиюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если не Элемент.ТекущиеДанные = Неопределено Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения", ЭтаФорма, Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")));

		ОткрытьДокумент("Документ.торо_АктОВыполненииРегламентногоМероприятия.Форма.ФормаДокумента", Элемент.ТекущиеДанные.ДокументАкт, ОписаниеОповещения);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкиОтбора(Команда)
	
	ВыделенныеСтроки = Элементы.Ремонты.ВыделенныеСтроки;
	мТекущийРемонтID.Очистить();
	МассивID = Новый СписокЗначений;
	Для Каждого НомСтроки Из ВыделенныеСтроки Цикл
		Строка = Элементы.Ремонты.ДанныеСтроки(НомСтроки);
		Если Строка <> Неопределено Тогда
			МассивID.Добавить(Строка.ID_Ремонта);
			мТекущийРемонтID.Добавить(Строка.ID_Ремонта);
		КонецЕсли;
	КонецЦикла;
	
	ВыделенныеСтроки = Элементы.Мероприятия.ВыделенныеСтроки;
	мТекущееМероприятиеID.Очистить();
	МассивID = Новый СписокЗначений;
	Для Каждого НомСтроки Из ВыделенныеСтроки Цикл
		Строка = Элементы.Мероприятия.ДанныеСтроки(НомСтроки);
		Если НЕ Строка = Неопределено Тогда
			МассивID.Добавить(Строка.ID_Ремонта);
			мТекущееМероприятиеID.Добавить(Строка.ID_Ремонта);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура("ВидДаты, ДатаАктуальности, Завершенные, ДанныеПоНаработке, НеПроведенные, АвтоматическоеОбновление,ПериодОбновления, ПлановыйПериод, Периодичность",
	Объект.ВидДаты, Объект.ДатаАктуальности, Объект.Завершенные, Объект.ДанныеПоНаработке, Объект.НеПроведенные, Объект.АвтоматическоеОбновление, Объект.ПериодОбновления, Объект.ПлановыйПериод, Объект.Периодичность);
	
	ДобавитьНастройкиЦвета(СтруктураПараметров);
	
	ФормаНастройки = ПолучитьФорму("Обработка.торо_РабочееМестоТехническогоСпециалиста.Форма.ФормаНастройки", СтруктураПараметров, ЭтаФорма, ЭтаФорма);
	ФормаНастройки.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРемонты(Команда)
		
	УстановитьПараметрыДинамическогоСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаявку(Команда)
	
	ТекДанные = Элементы.Ремонты.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		МассивВыделенныхСтрок = ПолучитьМассивВыделенныхСтрокРемонтов(Элементы.Ремонты);
		
		КолВоСтрок = МассивВыделенныхСтрок.Количество();
		
		Для Сч = 1 По КолВоСтрок Цикл
			
			Доступно = ПроверитьВводНаОсновании(МассивВыделенныхСтрок[КолВоСтрок - Сч].ТипДокумента,"торо_ЗаявкаНаРемонт");
			
			Если НЕ Доступно Тогда				
				МассивВыделенныхСтрок.Удалить(КолВоСтрок - Сч);	
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивВыделенныхСтрок.Количество() = 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Настроки ввода на основании запрещают ввести заявку на основании выбранного документа.
			|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интрерфейс и ввод документов -> Настройка ввода на основании.'"));	
			Возврат;	
		КонецЕсли;
		
		МассивДанныхСтрок = Новый Массив;
		
		КолЗавершенных = 0;
		
		Для Каждого Строка Из МассивВыделенныхСтрок Цикл
			
			Если ЗначениеЗаполнено(Строка.Завершенные) Тогда
				Если ТипЗнч(Строка.Завершенные) = Тип("Строка")или Строка.Завершенные  Тогда
					КолЗавершенных = КолЗавершенных + 1;
				Иначе
					Структура = Новый Структура("ОбъектРемонта, ВидРемонта, ПланируемаяДатаНачалаРемонта, ID_Ремонта, Документ, ТипДокумента"
					, Строка.ОбъектРемонта
					, Строка.ВидРемонта
					, Строка.ПланируемаяДатаНачалаРемонта
					, Строка.ID_Ремонта
					, Строка.Документ
					, Строка.ТипДокумента);
					МассивДанныхСтрок.Добавить(Структура);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		
		Если КолЗавершенных > 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В списке выбранных ремонтов есть завершенные!'"));
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_ЗаявкаНаРемонт")));
			
			СоответствиеИДДокументам = Новый Соответствие;
			
			Для каждого Элемент Из МассивДанныхСтрок Цикл
				СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
			КонецЦикла; 
			
			СоздатьДокументИОткрытьФорму("Документ.торо_ЗаявкаНаРемонт.Форма.ФормаДокумента", СоответствиеИДДокументам, ОписаниеОповещения);
		КонецЕсли;	
		
	Иначе
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите ремонт!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНаряд(Команда)

	ТекДанные = Элементы.Ремонты.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		ТекДок = ТекДанные.Документ;
		
		МассивВыделенныхСтрок = ПолучитьМассивВыделенныхСтрокРемонтов(Элементы.Ремонты);
		МассивДанныхСтрок = Новый Массив;
		
		КолЗавершенных = 0;
		
		Для Каждого Строка Из МассивВыделенныхСтрок Цикл
			
			Если ЗначениеЗаполнено(Строка.Завершенные) Тогда
				Если ТипЗнч(Строка.Завершенные) = Тип("Строка")или Строка.Завершенные  Тогда
					КолЗавершенных = КолЗавершенных + 1;
				Иначе
					Структура = Новый Структура("ОбъектРемонта, ВидРемонта, ПланируемаяДатаНачалаРемонта, ID_Ремонта, Документ, ТипДокумента"
												, Строка.ОбъектРемонта
												, Строка.ВидРемонта
												, Строка.ПланируемаяДатаНачалаРемонта
												, Строка.ID_Ремонта
												, Строка.Документ
												, Строка.ТипДокумента);
					МассивДанныхСтрок.Добавить(Структура);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КолЗавершенных > 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В списке выбранных ремонтов есть завершенные!'"));
		Иначе
			
			ТаблицаЗаявок = Неопределено;
			
			Если ПроверитьВводНаОсновании("торо_ЗаявкаНаРемонт", "торо_НарядНаВыполнениеРемонтныхРабот")
				И ФОИспользоватьСметы Тогда
				ТаблицаЗаявок = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "ЗаявкиНаРемонт");
			КонецЕсли;
			
			Если ТаблицаЗаявок = Неопределено И МассивДанныхСтрок.Количество() = 1 Тогда
				
				Доступно = ПроверитьВводНаОсновании(ТекДанные.ТипДокумента,"торо_НарядНаВыполнениеРемонтныхРабот");
				
				Если НЕ Доступно Тогда
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Настроки ввода на основании запрещают ввести наряд на основании выбранного документа.
							|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интрерфейс и ввод документов -> Настройка ввода на основании.'"));
					Возврат;	
				КонецЕсли; 
				
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")));
				
				СоответствиеИДДокументам = Новый Соответствие;
				
				Для каждого Элемент Из МассивВыделенныхСтрок Цикл
					СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
				КонецЦикла; 
				
				
				СоздатьДокументИОткрытьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.Форма.ФормаДокумента", СоответствиеИДДокументам, ОписаниеОповещения);
				
			Иначе
				
				Оповещение = Новый ОписаниеОповещения("ВыборОснованийДляДокумента",ЭтаФорма,Новый Структура("СоздаваемыйДокумент", "торо_НарядНаВыполнениеРемонтныхРабот"));
				
				СтруктураДанныхДляВыбораОснований = Новый Структура;
				СтруктураДанныхДляВыбораОснований.Вставить("МассивВыделенныхСтрок" , МассивДанныхСтрок);
				СтруктураДанныхДляВыбораОснований.Вставить("ТаблицаЗаявок"         , ТаблицаЗаявок);
				
				СоответствиеДоступноПоРемонту = Новый Соответствие;
				
				Для каждого Строка Из МассивДанныхСтрок Цикл
					ДоступноПоРемонту = ПроверитьВводНаОсновании(Строка.ТипДокумента,"торо_НарядНаВыполнениеРемонтныхРабот");
					СоответствиеДоступноПоРемонту.Вставить(Строка.ID_Ремонта, ДоступноПоРемонту);
				КонецЦикла; 
				
				СтруктураДанныхДляВыбораОснований.Вставить("СоответствиеДоступноПоРемонту", СоответствиеДоступноПоРемонту);
				
				ОткрытьФорму("Обработка.торо_РабочееМестоТехническогоСпециалиста.Форма.ФормаВыбораОснования",СтруктураДанныхДляВыбораОснований,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите ремонт!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАкт(Команда)
	
	ТекДанные = Элементы.Ремонты.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		ТекДок = ТекДанные.Документ;
		
		МассивВыделенныхСтрок = ПолучитьМассивВыделенныхСтрокРемонтов(Элементы.Ремонты);
		
		МассивДанныхСтрок = Новый Массив;
		
		КолЗавершенных = 0;
		
		Для Каждого Строка Из МассивВыделенныхСтрок Цикл
			
			Если ЗначениеЗаполнено(Строка.Завершенные) Тогда
				Если ТипЗнч(Строка.Завершенные) = Тип("Строка")или Строка.Завершенные  Тогда
					КолЗавершенных = КолЗавершенных + 1;
				Иначе
					Структура = Новый Структура("ОбъектРемонта, ВидРемонта, ПланируемаяДатаНачалаРемонта, ID_Ремонта, Документ, ТипДокумента"
												, Строка.ОбъектРемонта
												, Строка.ВидРемонта
												, Строка.ПланируемаяДатаНачалаРемонта
												, Строка.ID_Ремонта
												, Строка.Документ
												, Строка.ТипДокумента);
					МассивДанныхСтрок.Добавить(Структура);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;

		
		Если КолЗавершенных > 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В списке выбранных ремонтов есть завершенные!'"));
		Иначе
			
			ТаблицаЗаявок  = Неопределено;
			ТаблицаНарядов = Неопределено;
			
			Если ПроверитьВводНаОсновании("торо_ЗаявкаНаРемонт", "торо_АктОВыполненииЭтапаРабот")
				И ФОИспользоватьСметы Тогда
				
				ТаблицаЗаявок  = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "ЗаявкиНаРемонт");
				
			КонецЕсли; 
			
			Если ПроверитьВводНаОсновании("торо_НарядНаВыполнениеРемонтныхРабот", "торо_АктОВыполненииЭтапаРабот")
				И ФОИспользоватьНаряды Тогда
				
				ТаблицаНарядов = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "НарядыНаРемонт");
				
			КонецЕсли; 
			
			Если ТаблицаЗаявок = Неопределено И ТаблицаНарядов = Неопределено И МассивДанныхСтрок.Количество() = 1 Тогда
				
				Доступно = ПроверитьВводНаОсновании(ТекДанные.ТипДокумента,"торо_АктОВыполненииЭтапаРабот");
				Если НЕ Доступно Тогда
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Настроки ввода на основании запрещают ввести акт на основании выбранного документа.
							|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интрерфейс и ввод документов -> Настройка ввода на основании.'"));
					Возврат;	
				КонецЕсли; 
								
				ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")));
				
				СоответствиеИДДокументам = Новый Соответствие;
				
				Для каждого Элемент Из МассивВыделенныхСтрок Цикл
					СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
				КонецЦикла; 
				
				СоздатьДокументИОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.ФормаОбъекта",СоответствиеИДДокументам, ОписаниеОповещения);
				
			Иначе
				
				Оповещение = Новый ОписаниеОповещения("ВыборОснованийДляДокумента",ЭтаФорма,Новый Структура("СоздаваемыйДокумент", "торо_АктОВыполненииЭтапаРабот"));
				
				СтруктураДанныхДляВыбораОснований = Новый Структура;
				СтруктураДанныхДляВыбораОснований.Вставить("МассивВыделенныхСтрок" , МассивДанныхСтрок);
				СтруктураДанныхДляВыбораОснований.Вставить("ТаблицаЗаявок"         , ТаблицаЗаявок);
				СтруктураДанныхДляВыбораОснований.Вставить("ТаблицаНарядов"        , ТаблицаНарядов); 
				
				СоответствиеДоступноПоРемонту = Новый Соответствие;
				
				Для каждого Строка Из МассивДанныхСтрок Цикл
					ДоступноПоРемонту = ПроверитьВводНаОсновании(Строка.ТипДокумента,"торо_АктОВыполненииЭтапаРабот");
					СоответствиеДоступноПоРемонту.Вставить(Строка.ID_Ремонта, ДоступноПоРемонту);
				КонецЦикла; 
				
				СтруктураДанныхДляВыбораОснований.Вставить("СоответствиеДоступноПоРемонту", СоответствиеДоступноПоРемонту);
				
				ОткрытьФорму("Обработка.торо_РабочееМестоТехническогоСпециалиста.Форма.ФормаВыбораОснования",СтруктураДанныхДляВыбораОснований,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите ремонт!'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНарядНаМероприятие(Команда)
	
	ТекДанные = Элементы.Мероприятия.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		ТекДок = ТекДанные.Документ;
		
		МассивВыделенныхСтрок = ПолучитьМассивВыделенныхСтрокРемонтов(Элементы.Мероприятия);
		
		КолВоСтрок = МассивВыделенныхСтрок.Количество();
		
		Для Сч = 1 По КолВоСтрок Цикл
			
			Доступно = ПроверитьВводНаОсновании(МассивВыделенныхСтрок[КолВоСтрок - Сч].ТипДокумента,"торо_НарядНаРегламентноеМероприятие");
			
			Если НЕ Доступно Тогда				
				МассивВыделенныхСтрок.Удалить(КолВоСтрок - Сч);	
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивВыделенныхСтрок.Количество() = 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Настроки ввода на основании запрещают ввести наряд на регламентное мероприятие на основании выбранного документа.
			|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интрерфейс и ввод документов -> Настройка ввода на основании.'"));	
			Возврат;	
		КонецЕсли;
		
		МассивДанныхСтрок = Новый Массив;
		
		КолЗавершенных = 0;
		
		Для Каждого Строка Из МассивВыделенныхСтрок Цикл
			
			Если ЗначениеЗаполнено(Строка.Завершенные) Тогда
				Если ТипЗнч(Строка.Завершенные) = Тип("Строка")или Строка.Завершенные  Тогда
					КолЗавершенных = КолЗавершенных + 1;
					Прервать;
				Иначе
					Структура = Новый Структура("ОбъектРемонта, ВидРемонта, ПланируемаяДатаНачалаРемонта, ID_Ремонта, Документ, ТипДокумента"
												, Строка.ОбъектРемонта
												, Строка.ВидРемонта
												, Строка.ПланируемаяДатаНачалаРемонта
												, Строка.ID_Ремонта
												, Строка.Документ
												, Строка.ТипДокумента);
					МассивДанныхСтрок.Добавить(Структура);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КолЗавершенных > 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В списке выбранных ремонтов есть завершенные!'"));
		Иначе
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_НарядНаРегламентноеМероприятие")));
			
			СоответствиеИДДокументам = Новый Соответствие;
			
			Для каждого Элемент Из МассивДанныхСтрок Цикл
				СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
			КонецЦикла; 
			
			СоздатьДокументИОткрытьФорму("Документ.торо_НарядНаРегламентноеМероприятие.Форма.ФормаДокумента", СоответствиеИДДокументам, ОписаниеОповещения);
		КонецЕсли;	
		
	Иначе
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите ремонт!'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьАктНаМероприятие(Команда)
	
	ТекДанные = Элементы.Мероприятия.ТекущиеДанные;
	
	Если НЕ ТекДанные = Неопределено Тогда
		
		ТекДок = ТекДанные.Документ;
		
		МассивВыделенныхСтрок = ПолучитьМассивВыделенныхСтрокРемонтов(Элементы.Мероприятия);
		
		КолВоСтрок = МассивВыделенныхСтрок.Количество();
		
		Для Сч = 1 По КолВоСтрок Цикл
			
			Доступно = ПроверитьВводНаОсновании(МассивВыделенныхСтрок[КолВоСтрок - Сч].ТипДокумента,"торо_НарядНаРегламентноеМероприятие");
			
			Если НЕ Доступно Тогда				
				МассивВыделенныхСтрок.Удалить(КолВоСтрок - Сч);	
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивВыделенныхСтрок.Количество() = 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Настроки ввода на основании запрещают ввести акт регламентного мероприятия на основании выбранного документа.
			|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интрерфейс и ввод документов -> Настройка ввода на основании.'"));	
			Возврат;	
		КонецЕсли;
		
		МассивДанныхСтрок = Новый Массив;
		
		КолЗавершенных = 0;
		
		Для Каждого Строка Из МассивВыделенныхСтрок Цикл
			
			Если ЗначениеЗаполнено(Строка.Завершенные) Тогда
				Если ТипЗнч(Строка.Завершенные) = Тип("Строка")или Строка.Завершенные  Тогда
					КолЗавершенных = КолЗавершенных + 1;
					Прервать;
				Иначе
					Структура = Новый Структура("ОбъектРемонта, ВидРемонта, ПланируемаяДатаНачалаРемонта, ID_Ремонта, Документ, ТипДокумента"
												, Строка.ОбъектРемонта
												, Строка.ВидРемонта
												, Строка.ПланируемаяДатаНачалаРемонта
												, Строка.ID_Ремонта
												, Строка.Документ
												, Строка.ТипДокумента);
					МассивДанныхСтрок.Добавить(Структура);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если КолЗавершенных > 0 Тогда
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В списке выбранных ремонтов есть завершенные!'"));
		Иначе
			
			ТаблицаНарядов = Неопределено;
			
			Если ПроверитьВводНаОсновании("торо_НарядНаРегламентноеМероприятие", "торо_АктОВыполненииРегламентногоМероприятия") Тогда
				ТаблицаНарядов = ПолучитьСвязанныеДокументыПОID(МассивДанныхСтрок, "НарядыНаМероприятия");
			КонецЕсли;
			
			Если ТаблицаНарядов = Неопределено И МассивДанныхСтрок.Количество() = 1 Тогда
				
				Доступно = ПроверитьВводНаОсновании(ТекДанные.ТипДокумента,"торо_АктОВыполненииРегламентногоМероприятия");
				Если НЕ Доступно Тогда
					торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Настроки ввода на основании запрещают ввести акт регламентного мероприятия на основании выбранного документа.
							|Настройка и администрирование -> Настройка параметров подсистемы ТОиР -> Интрерфейс и ввод документов -> Настройка ввода на основании.'"));
					Возврат;	
				КонецЕсли;
				
				ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")));
				
				СоответствиеИДДокументам = Новый Соответствие;
				
				Для каждого Элемент Из МассивВыделенныхСтрок Цикл
					СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
				КонецЦикла; 
				
				СоздатьДокументИОткрытьФорму("Документ.торо_АктОВыполненииРегламентногоМероприятия.ФормаОбъекта",СоответствиеИДДокументам, ОписаниеОповещения);
					
			Иначе
				
				Оповещение = Новый ОписаниеОповещения("ВыборОснованийДляДокумента",ЭтаФорма,Новый Структура("СоздаваемыйДокумент", "торо_АктОВыполненииРегламентногоМероприятия"));
				
				СтруктураДанныхДляВыбораОснований = Новый Структура;
				СтруктураДанныхДляВыбораОснований.Вставить("МассивВыделенныхСтрок" , МассивДанныхСтрок);
				СтруктураДанныхДляВыбораОснований.Вставить("ТаблицаНарядов"        , ТаблицаНарядов); 
				
				СоответствиеДоступноПоРемонту = Новый Соответствие;
				
				Для каждого Строка Из МассивДанныхСтрок Цикл
					ДоступноПоРемонту = ПроверитьВводНаОсновании(Строка.ТипДокумента,"торо_АктОВыполненииРегламентногоМероприятия");
					СоответствиеДоступноПоРемонту.Вставить(Строка.ID_Ремонта, ДоступноПоРемонту);
				КонецЦикла; 
				
				СтруктураДанныхДляВыбораОснований.Вставить("СоответствиеДоступноПоРемонту", СоответствиеДоступноПоРемонту);
				
				ОткрытьФорму("Обработка.торо_РабочееМестоТехническогоСпециалиста.Форма.ФормаВыбораОснования",СтруктураДанныхДляВыбораОснований,ЭтаФорма,,ВариантОткрытияОкна.ОтдельноеОкно,,Оповещение,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
								
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Выберите ремонт!'"));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьIDОстановочного(Остановочный)
	
	Возврат Остановочный.IDОсновногоРемонта;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыДинамическогоСпискаКлиент(ОбновитьЗаявки                 = Истина
														, ОбновитьНаряды              = Истина
														, ОбновитьАкты                = Истина
														, ОбновитьРегламентныеНаряды  = Истина
														, ОбновитьРегламентныеАкты    = Истина)
	// сохранение текущих строк											 
	СтруктураВыделенныхСтрок = Новый Структура;
	
	СписокЭлементов = Новый СписокЗначений;
	
	СписокЭлементов.Добавить("Ремонты");
	СписокЭлементов.Добавить("ЗаявкиНаРемонт");
	СписокЭлементов.Добавить("НарядыНаРемонт");
	СписокЭлементов.Добавить("АктыНаРемонт");
	СписокЭлементов.Добавить("Мероприятия");
	СписокЭлементов.Добавить("НарядыНаМероприятия");
	СписокЭлементов.Добавить("АктыПоМероприятию");
	
	Для каждого ЭлементСписка Из СписокЭлементов Цикл
		
		ТекущаяСтрока = Элементы[Строка(ЭлементСписка)].ТекущаяСтрока;

		Если Не ТекущаяСтрока = Неопределено Тогда
			СтруктураВыделенныхСтрок.Вставить(Строка(ЭлементСписка), ТекущаяСтрока);
		КонецЕсли;
		
	КонецЦикла; 
												 
	УстановитьПараметрыДинамическогоСписка(ОбновитьЗаявки, ОбновитьНаряды, ОбновитьАкты, ОбновитьРегламентныеНаряды, ОбновитьРегламентныеАкты);
	
	// Восстановление текущих строк
	
	УстановитьФильтрПоРемонту();
	
	Для каждого ЭлементСтруктуры Из СтруктураВыделенныхСтрок Цикл
		Элементы[ЭлементСтруктуры.Ключ].ТекущаяСтрока = ЭлементСтруктуры.Значение;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыДинамическогоСписка(ОбновитьЗаявки              = Истина
												, ОбновитьНаряды             = Истина
												, ОбновитьАкты               = Истина
												, ОбновитьРегламентныеНаряды = Истина
												, ОбновитьРегламентныеАкты   = Истина)
																								
	Если ЗначениеЗаполнено(Объект.Периодичность) Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	РАЗНОСТЬДАТ(&ДатаНачала, ДОБАВИТЬКДАТЕ(&ДатаНачала,"+ Строка(Объект.Периодичность)+","+СтрЗаменить(Строка(Объект.ПлановыйПериод)," ","")+"), ДЕНЬ) КАК ПлановыйПериод";
		
		Запрос.УстановитьПараметр("ДатаНачала", Объект.ДатаАктуальности);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ИтогоПлановыхДней = Выборка.ПлановыйПериод;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьЗаявки ИЛИ ОбновитьАкты или ОбновитьНаряды Тогда
		
		Ремонты.Параметры.УстановитьЗначениеПараметра("Организация"                   , Объект.Организация);
		Ремонты.Параметры.УстановитьЗначениеПараметра("Исполнитель"                   , Объект.Исполнитель);
		Ремонты.Параметры.УстановитьЗначениеПараметра("Завершенные"                   , Объект.Завершенные);
		Ремонты.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод"                , КонецДня(Объект.ДатаАктуальности + (ИтогоПлановыхДней*60*60*24)));
		Ремонты.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям"            , ?(Не ЗначениеЗаполнено(Объект.Организация), Истина, Ложь));
		Ремонты.Параметры.УстановитьЗначениеПараметра("ПоВсемПодразделениям"          , ?(Не ЗначениеЗаполнено(Объект.Исполнитель), Истина, Ложь));
		Ремонты.Параметры.УстановитьЗначениеПараметра("ТекДата"                       , ТекущаяДата());
		Ремонты.Параметры.УстановитьЗначениеПараметра("торо_ВидРемонта"               , Константы.торо_ВидРемонтаПриВводеНаОснованииВыявленныхДефектов.Получить());
		Ремонты.Параметры.УстановитьЗначениеПараметра("ФОИспользоватьВнешниеОснования", ФОИспользоватьВнешниеОснования);
		Ремонты.Параметры.УстановитьЗначениеПараметра("ФОИспользоватьДефекты"         , ФОИспользоватьДефекты);
		Ремонты.Параметры.УстановитьЗначениеПараметра("ФОИспользоватьППР"             , ФОИспользоватьППР);
		Ремонты.Параметры.УстановитьЗначениеПараметра("ИспользоватьСметы"			  , ФОИспользоватьСметы);
		Ремонты.Параметры.УстановитьЗначениеПараметра("ИспользоватьСтатусыДокументов" , ФОИспользоватьСтатусыДокументов);

		Элементы.Ремонты.АвтоОбновление = Объект.АвтоматическоеОбновление;
		Элементы.Ремонты.ПериодАвтоОбновления = Объект.ПериодОбновления;
		
	КонецЕсли; 
	
	Если ОбновитьРегламентныеАкты Тогда
		
		Мероприятия.Параметры.УстановитьЗначениеПараметра("Организация"         , Объект.Организация);
		Мероприятия.Параметры.УстановитьЗначениеПараметра("Исполнитель"         , Объект.Исполнитель);
		Мероприятия.Параметры.УстановитьЗначениеПараметра("Завершенные"         , Объект.Завершенные);
		Мероприятия.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод"      , КонецДня(Объект.ДатаАктуальности + (ИтогоПлановыхДней*60*60*24)));
		Мероприятия.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям"  , ?(Не ЗначениеЗаполнено(Объект.Организация), Истина, Ложь));
		Мероприятия.Параметры.УстановитьЗначениеПараметра("ПоВсемПодразделениям", ?(Не ЗначениеЗаполнено(Объект.Исполнитель), Истина, Ложь));
		Мероприятия.Параметры.УстановитьЗначениеПараметра("ФОИспользоватьРегламентныеМероприятия", ФОИспользоватьРегламентныеМероприятия);
		
		УстановитьЗапросИПараметрыДинСпискаРегламентныхАктов();
	КонецЕсли;
	
	Если ФОИспользоватьРегламентныеМероприятия Тогда
		Элементы.Мероприятия.АвтоОбновление = Объект.АвтоматическоеОбновление;
		Элементы.Мероприятия.ПериодАвтоОбновления = Объект.ПериодОбновления;	
	КонецЕсли; 
	
	Если ОбновитьЗаявки Тогда
		УстановитьЗапросИПараметрыДинСпискаЗаявок();	
	КонецЕсли; 	
	
	Если ОбновитьНаряды Тогда
		УстановитьЗапросИПараметрыДинСпискаНарядов();
	КонецЕсли;
	
	Если ОбновитьАкты Тогда
		УстановитьЗапросИПараметрыДинСпискаАктов();
	КонецЕсли; 
	
	Если ОбновитьРегламентныеНаряды Тогда
		УстановитьЗапросИПараметрыДинСпискаРегламентныхНарядов(); 
	КонецЕсли;
			
КонецПроцедуры

// Заполняет заявки по выбранным ремонтам
//
&НаСервере
Процедура УстановитьЗапросИПараметрыДинСпискаЗаявок()
	
	Если Не ИспользоватьУправлениеРемонтами
		ИЛИ Не ФОИспользоватьСметы Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.ID КАК ID_Ремонта,
	               |	торо_ЗаявкаНаРемонт.Ссылка КАК ДокументЗаявка,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПланГрафикППР
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО торо_ПланГрафикППР.ID = торо_Ремонты.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	               |		ПО (торо_Ремонты.Регистратор = торо_ЗаявкаНаРемонт.Ссылка)
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_ПланГрафикППР.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемПодразделениям
	               |				ТОГДА торо_ПланГрафикППР.Исполнитель В ИЕРАРХИИ (&Исполнитель)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И НЕ торо_ПланГрафикППР.Отменен
	               |	И НЕ торо_ПланГрафикППР.Замещен
	               |	И торо_ПланГрафикППР.ДатаНачалаРемонтныхРабот <= &ПлановыйПериод
	               |	И НЕ торо_ПланГрафикППР.Регистратор.Организация ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.ID,
	               |	торо_ЗаявкаНаРемонт.Ссылка,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО торо_ВыявленныеДефекты.ID = торо_Ремонты.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	               |		ПО торо_Ремонты.Регистратор = торо_ЗаявкаНаРемонт.Ссылка
	               |ГДЕ
	               |	торо_ВыявленныеДефекты.Период <= &ПлановыйПериод
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_ВыявленныеДефекты.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемПодразделениям
	               |				ТОГДА торо_ВыявленныеДефекты.ПодразделениеИсполнитель В ИЕРАРХИИ (&Исполнитель)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И НЕ торо_ВыявленныеДефекты.Регистратор.Организация ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.ID,
	               |	торо_ЗаявкаНаРемонт.Ссылка,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПредписанияСрезПоследних
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО торо_ПредписанияСрезПоследних.ID = торо_Ремонты.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ЗаявкаНаРемонт КАК торо_ЗаявкаНаРемонт
	               |		ПО торо_Ремонты.Регистратор = торо_ЗаявкаНаРемонт.Ссылка
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_ПредписанияСрезПоследних.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ТИПЗНАЧЕНИЯ(торо_ПредписанияСрезПоследних.Регистратор) <> ТИП(Документ.торо_ВыявленныеДефекты)
	               |	И торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта <= &ПлановыйПериод
	               |	И НЕ торо_ПредписанияСрезПоследних.Организация ЕСТЬ NULL ";
	
	// Выводим НеПроведенные	документы, если включена такая настройка									  
	Если Объект.НеПроведенные Тогда
		Запрос.Текст = Запрос.Текст +"ОБЪЕДИНИТЬ ВСЕ
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID КАК ID_Ремонта,
		  |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка КАК ДокументЗаявка,
		  |	0 КАК Картинка
		  |ИЗ
		  |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		  |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_Ремонты.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПланГрафикППР
		  |		ПО (торо_ПланГрафикППР.ID = торо_Ремонты.ID)
		  |ГДЕ
		  |	ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ПланГрафикППР.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемПодразделениям
		  |				ТОГДА торо_ПланГрафикППР.Исполнитель В ИЕРАРХИИ (&Исполнитель)
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И НЕ торо_ПланГрафикППР.Отменен
		  |	И НЕ торо_ПланГрафикППР.Замещен
		  |	И торо_ПланГрафикППР.ДатаНачалаРемонтныхРабот <= &ПлановыйПериод
		  |	И НЕ торо_ПланГрафикППР.Регистратор.Организация ЕСТЬ NULL 
		  |	И НЕ торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен
		  |	И НЕ торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.ПометкаУдаления
		  |
		  |ОБЪЕДИНИТЬ ВСЕ
		  |
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID,
		  |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка,
		  |	0 КАК Картинка
		  |ИЗ
		  |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		  |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_Ремонты.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		  |		ПО (торо_ВыявленныеДефекты.ID = торо_Ремонты.ID)
		  |ГДЕ
		  |	торо_ВыявленныеДефекты.Период <= &ПлановыйПериод
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ВыявленныеДефекты.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемПодразделениям
		  |				ТОГДА торо_ВыявленныеДефекты.ПодразделениеИсполнитель В ИЕРАРХИИ (&Исполнитель)
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И НЕ торо_ВыявленныеДефекты.Регистратор.Организация ЕСТЬ NULL 
		  |	И НЕ торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен
		  |	И НЕ торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.ПометкаУдаления
		  |
		  |ОБЪЕДИНИТЬ ВСЕ
		  |
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_ЗаявкаНаРемонтРемонтыОборудования.ID,
		  |	торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка,
		  |	0 КАК Картинка
		  |ИЗ
		  |	Документ.торо_ЗаявкаНаРемонт.РемонтыОборудования КАК торо_ЗаявкаНаРемонтРемонтыОборудования
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		  |		ПО торо_ЗаявкаНаРемонтРемонтыОборудования.ID = торо_Ремонты.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПредписанияСрезПоследних
		  |		ПО (торо_ПредписанияСрезПоследних.ID = торо_Ремонты.ID)
		  |ГДЕ
		  |	ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ПредписанияСрезПоследних.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И ТИПЗНАЧЕНИЯ(торо_ПредписанияСрезПоследних.Регистратор) <> ТИП(Документ.торо_ВыявленныеДефекты)
		  |	И торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта <= &ПлановыйПериод
		  |	И НЕ торо_ПредписанияСрезПоследних.Организация ЕСТЬ NULL 
		  |	И НЕ торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.Проведен
		  |	И НЕ торо_ЗаявкаНаРемонтРемонтыОборудования.Ссылка.ПометкаУдаления";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ ("+Запрос.Текст+") КАК Таблица";
	
	ЗаявкиНаРемонт.ТекстЗапроса = Запрос.Текст;
	ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("Исполнитель", Объект.Исполнитель);
	ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод", КонецДня(Объект.ДатаАктуальности + (ИтогоПлановыхДней*60*60*24)));
	ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям", ?(Не ЗначениеЗаполнено(Объект.Организация), Истина, Ложь));
	ЗаявкиНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоВсемПодразделениям", ?(Не ЗначениеЗаполнено(Объект.Исполнитель), Истина, Ложь));
	
	Элементы.ЗаявкиНаРемонт.АвтоОбновление = Объект.АвтоматическоеОбновление;
	Элементы.ЗаявкиНаРемонт.ПериодАвтоОбновления = Объект.ПериодОбновления;
	
КонецПроцедуры

&НаСервере
// Заполняет наряды по выбранным ремонтам
//
Процедура УстановитьЗапросИПараметрыДинСпискаНарядов()
		
	Если Не ИспользоватьУправлениеРемонтами
		ИЛИ Не ФОИспользоватьНаряды Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.ID КАК ID_Ремонта,
	               |	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка КАК ДокументНаряд,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПланГрафикППР
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО торо_ПланГрафикППР.ID = торо_Ремонты.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
	               |		ПО торо_Ремонты.Регистратор = торо_НарядНаВыполнениеРемонтныхРабот.Ссылка
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_ПланГрафикППР.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемПодразделениям
	               |				ТОГДА торо_ПланГрафикППР.Исполнитель В ИЕРАРХИИ (&Исполнитель)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И НЕ торо_ПланГрафикППР.Отменен
	               |	И НЕ торо_ПланГрафикППР.Замещен
	               |	И торо_ПланГрафикППР.ДатаНачалаРемонтныхРабот <= &ПлановыйПериод
	               |	И НЕ торо_ПланГрафикППР.Регистратор.Организация ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.ID,
	               |	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО торо_ВыявленныеДефекты.ID = торо_Ремонты.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
	               |		ПО торо_Ремонты.Регистратор = торо_НарядНаВыполнениеРемонтныхРабот.Ссылка
	               |ГДЕ
	               |	торо_ВыявленныеДефекты.Период <= &ПлановыйПериод
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_ВыявленныеДефекты.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемПодразделениям
	               |				ТОГДА торо_ВыявленныеДефекты.ПодразделениеИсполнитель В ИЕРАРХИИ (&Исполнитель)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И НЕ торо_ВыявленныеДефекты.Регистратор.Организация ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.ID,
	               |	торо_НарядНаВыполнениеРемонтныхРабот.Ссылка,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПредписанияСрезПоследних
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО торо_ПредписанияСрезПоследних.ID = торо_Ремонты.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_НарядНаВыполнениеРемонтныхРабот КАК торо_НарядНаВыполнениеРемонтныхРабот
	               |		ПО торо_Ремонты.Регистратор = торо_НарядНаВыполнениеРемонтныхРабот.Ссылка
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_ПредписанияСрезПоследних.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ТИПЗНАЧЕНИЯ(торо_ПредписанияСрезПоследних.Регистратор) <> ТИП(Документ.торо_ВыявленныеДефекты)
	               |	И торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта <= &ПлановыйПериод
	               |	И НЕ торо_ПредписанияСрезПоследних.Организация ЕСТЬ NULL 
				   |";
	
	// Выводим НеПроведенные документы, если включена такая настройка									  
	Если Объект.НеПроведенные Тогда
		Запрос.Текст = Запрос.Текст +"ОБЪЕДИНИТЬ ВСЕ
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID КАК ID_Ремонта,
		  |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка КАК ДокументНаряд,
		  | 0 КАК Картинка
		  |ИЗ
		  |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		  |		ПО торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID = торо_Ремонты.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПланГрафикППР
		  |		ПО (торо_ПланГрафикППР.ID = торо_Ремонты.ID)
		  |ГДЕ
		  |	ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ПланГрафикППР.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемПодразделениям
		  |				ТОГДА торо_ПланГрафикППР.Исполнитель В ИЕРАРХИИ (&Исполнитель)
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И НЕ торо_ПланГрафикППР.Отменен
		  |	И НЕ торо_ПланГрафикППР.Замещен
		  |	И торо_ПланГрафикППР.ДатаНачалаРемонтныхРабот <= &ПлановыйПериод
		  |	И НЕ торо_ПланГрафикППР.Регистратор.Организация ЕСТЬ NULL 
		  |	И НЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.Проведен
		  |	И НЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.ПометкаУдаления
		  |
		  |ОБЪЕДИНИТЬ ВСЕ
		  |
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID,
		  |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка,
		  | 0 КАК Картинка

		  |ИЗ
		  |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		  |		ПО торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID = торо_Ремонты.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		  |		ПО (торо_ВыявленныеДефекты.ID = торо_Ремонты.ID)
		  |ГДЕ
		  |	торо_ВыявленныеДефекты.Период <= &ПлановыйПериод
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ВыявленныеДефекты.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемПодразделениям
		  |				ТОГДА торо_ВыявленныеДефекты.ПодразделениеИсполнитель В ИЕРАРХИИ (&Исполнитель)
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И НЕ торо_ВыявленныеДефекты.Регистратор.Организация ЕСТЬ NULL 
		  |	И НЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.Проведен
		  |	И НЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.ПометкаУдаления
		  |
		  |ОБЪЕДИНИТЬ ВСЕ
		  |
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID,
		  |	торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка,
		  | 0 КАК Картинка
		  |ИЗ
		  |	Документ.торо_НарядНаВыполнениеРемонтныхРабот.РемонтыОборудования КАК торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		  |		ПО торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.ID = торо_Ремонты.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПредписанияСрезПоследних
		  |		ПО (торо_ПредписанияСрезПоследних.ID = торо_Ремонты.ID)
		  |ГДЕ
		  |	ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ПредписанияСрезПоследних.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И ТИПЗНАЧЕНИЯ(торо_ПредписанияСрезПоследних.Регистратор) <> ТИП(Документ.торо_ВыявленныеДефекты)
		  |	И торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта <= &ПлановыйПериод
		  |	И НЕ торо_ПредписанияСрезПоследних.Организация ЕСТЬ NULL 
		  |	И НЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.Проведен
		  |	И НЕ торо_НарядНаВыполнениеРемонтныхРаботРемонтыОборудования.Ссылка.ПометкаУдаления";
	КонецЕсли;
	  
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ ("+Запрос.Текст+") КАК Таблица";  
	
	НарядыНаРемонт.ТекстЗапроса = Запрос.Текст;
	НарядыНаРемонт.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	НарядыНаРемонт.Параметры.УстановитьЗначениеПараметра("Исполнитель", Объект.Исполнитель);
	НарядыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод", КонецДня(Объект.ДатаАктуальности + (ИтогоПлановыхДней*60*60*24)));
	НарядыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям", ?(Не ЗначениеЗаполнено(Объект.Организация), Истина, Ложь));
	НарядыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоВсемПодразделениям", ?(Не ЗначениеЗаполнено(Объект.Исполнитель), Истина, Ложь));
	
	Элементы.НарядыНаРемонт.АвтоОбновление = Объект.АвтоматическоеОбновление;
	Элементы.НарядыНаРемонт.ПериодАвтоОбновления = Объект.ПериодОбновления;	
	
КонецПроцедуры

&НаСервере
// Заполняет акты по выбранным ремонтам
//
Процедура УстановитьЗапросИПараметрыДинСпискаАктов()
	
	Если Не ИспользоватьУправлениеРемонтами Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.ID КАК ID_Ремонта,
	               |	торо_АктОВыполненииЭтапаРабот.Ссылка КАК ДокументАкт,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПланГрафикППР
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО торо_ПланГрафикППР.ID = торо_Ремонты.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	               |		ПО торо_Ремонты.Регистратор = торо_АктОВыполненииЭтапаРабот.Ссылка
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_ПланГрафикППР.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемПодразделениям
	               |				ТОГДА торо_ПланГрафикППР.Исполнитель В ИЕРАРХИИ (&Исполнитель)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И НЕ торо_ПланГрафикППР.Отменен
	               |	И НЕ торо_ПланГрафикППР.Замещен
	               |	И торо_ПланГрафикППР.ДатаНачалаРемонтныхРабот <= &ПлановыйПериод
	               |	И НЕ торо_ПланГрафикППР.Регистратор.Организация ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.ID,
	               |	торо_АктОВыполненииЭтапаРабот.Ссылка,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО торо_ВыявленныеДефекты.ID = торо_Ремонты.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	               |		ПО торо_Ремонты.Регистратор = торо_АктОВыполненииЭтапаРабот.Ссылка
	               |ГДЕ
	               |	торо_ВыявленныеДефекты.Период <= &ПлановыйПериод
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_ВыявленныеДефекты.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемПодразделениям
	               |				ТОГДА торо_ВыявленныеДефекты.ПодразделениеИсполнитель В ИЕРАРХИИ (&Исполнитель)
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И НЕ торо_ВыявленныеДефекты.Регистратор.Организация ЕСТЬ NULL 
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.ID,
	               |	торо_АктОВыполненииЭтапаРабот.Ссылка,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПредписанияСрезПоследних
				   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ПО торо_ПредписанияСрезПоследних.ID = торо_Ремонты.ID
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_АктОВыполненииЭтапаРабот КАК торо_АктОВыполненииЭтапаРабот
	               |		ПО торо_Ремонты.Регистратор = торо_АктОВыполненииЭтапаРабот.Ссылка
	               |ГДЕ
	               |	ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_ПредписанияСрезПоследних.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И ТИПЗНАЧЕНИЯ(торо_ПредписанияСрезПоследних.Регистратор) <> ТИП(Документ.торо_ВыявленныеДефекты)
	               |	И торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта <= &ПлановыйПериод
	               |	И НЕ торо_ПредписанияСрезПоследних.Организация ЕСТЬ NULL 
				   |";
	
	// Выводим НеПроведенные документы, если включена такая настройка									  
	Если Объект.НеПроведенные Тогда
		Запрос.Текст = Запрос.Текст +"ОБЪЕДИНИТЬ ВСЕ
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID КАК ID_Ремонта,
		  |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка КАК ДокументАкт,
		  |	0 КАК Картинка
		  |ИЗ
		  |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		  |		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID = торо_Ремонты.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПланГрафикППР
		  |		ПО (торо_ПланГрафикППР.ID = торо_Ремонты.ID)
		  |ГДЕ
		  |	ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ПланГрафикППР.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемПодразделениям
		  |				ТОГДА торо_ПланГрафикППР.Исполнитель В ИЕРАРХИИ (&Исполнитель)
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И НЕ торо_ПланГрафикППР.Отменен
		  |	И НЕ торо_ПланГрафикППР.Замещен
		  |	И торо_ПланГрафикППР.ДатаНачалаРемонтныхРабот <= &ПлановыйПериод
		  |	И НЕ торо_ПланГрафикППР.Регистратор.Организация ЕСТЬ NULL 
		  |	И НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.Проведен
		  |	И НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.ПометкаУдаления
		  |
		  |ОБЪЕДИНИТЬ ВСЕ
		  |
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID,
		  |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка,
		  |	0 КАК Картинка
		  |ИЗ
		  |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		  |		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID = торо_Ремонты.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
		  |		ПО (торо_ВыявленныеДефекты.ID = торо_Ремонты.ID)
		  |ГДЕ
		  |	торо_ВыявленныеДефекты.Период <= &ПлановыйПериод
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ВыявленныеДефекты.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемПодразделениям
		  |				ТОГДА торо_ВыявленныеДефекты.ПодразделениеИсполнитель В ИЕРАРХИИ (&Исполнитель)
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И НЕ торо_ВыявленныеДефекты.Регистратор.Организация ЕСТЬ NULL 
		  |	И НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.Проведен
		  |	И НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.ПометкаУдаления
		  |
		  |ОБЪЕДИНИТЬ ВСЕ
		  |
		  |ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID,
		  |	торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка,
		  |	0 КАК Картинка
		  |ИЗ
		  |	Документ.торо_АктОВыполненииЭтапаРабот.РемонтыОборудования КАК торо_АктОВыполненииЭтапаРаботРемонтыОборудования
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		  |		ПО торо_АктОВыполненииЭтапаРаботРемонтыОборудования.ID = торо_Ремонты.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ВнешниеОснованияДляРабот.СрезПоследних(&ПлановыйПериод, ) КАК торо_ПредписанияСрезПоследних
		  |		ПО (торо_ПредписанияСрезПоследних.ID = торо_Ремонты.ID)
		  |ГДЕ
		  |	ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ПредписанияСрезПоследних.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И ТИПЗНАЧЕНИЯ(торо_ПредписанияСрезПоследних.Регистратор) <> ТИП(Документ.торо_ВыявленныеДефекты)
		  |	И торо_ПредписанияСрезПоследних.ПлановаяДатаРемонта <= &ПлановыйПериод
		  |	И НЕ торо_ПредписанияСрезПоследних.Организация ЕСТЬ NULL 
		  |	И НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.Проведен
		  |	И НЕ торо_АктОВыполненииЭтапаРаботРемонтыОборудования.Ссылка.ПометкаУдаления";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ ("+Запрос.Текст+") КАК Таблица";
	
	АктыНаРемонт.ТекстЗапроса = Запрос.Текст;
	АктыНаРемонт.Параметры.УстановитьЗначениеПараметра("Организация", Объект.Организация);
	АктыНаРемонт.Параметры.УстановитьЗначениеПараметра("Исполнитель", Объект.Исполнитель);
	АктыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод", КонецДня(Объект.ДатаАктуальности + (ИтогоПлановыхДней*60*60*24)));
	АктыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям", ?(Не ЗначениеЗаполнено(Объект.Организация), Истина, Ложь));
	АктыНаРемонт.Параметры.УстановитьЗначениеПараметра("ПоВсемПодразделениям", ?(Не ЗначениеЗаполнено(Объект.Исполнитель), Истина, Ложь));
	
	Элементы.АктыНаРемонт.АвтоОбновление = Объект.АвтоматическоеОбновление;
	Элементы.АктыНаРемонт.ПериодАвтоОбновления = Объект.ПериодОбновления;
	
КонецПроцедуры

&НаСервере
// Заполняет Регламентные наряды по выбранным ремонтам
//
Процедура УстановитьЗапросИПараметрыДинСпискаРегламентныхНарядов()
	
	Если Не ФОИспользоватьРегламентныеМероприятия Тогда
		Возврат;	
	КонецЕсли; 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.Регистратор КАК ДокументНаряд,
	               |	торо_Ремонты.ID          КАК ID_Ремонта,
	               |	1                        КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
	               |		ПО торо_Ремонты.ID = торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеМероприятия.СрезПоследних(&ПлановыйПериод, ) КАК торо_ЗавершенныеМероприятияСрезПоследних
	               |		ПО торо_Ремонты.ID = торо_ЗавершенныеМероприятияСрезПоследних.ID
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_НарядНаРегламентноеМероприятие)
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_Ремонты.Регистратор.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Отменен
	               |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Замещен
	               |	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаНач <= &ПлановыйПериод
	               |	И НЕ торо_Ремонты.Регистратор.Организация.Наименование ЕСТЬ NULL 
	               |	И ВЫБОР
	               |			КОГДА НЕ &Завершенные
	               |				ТОГДА торо_ЗавершенныеМероприятияСрезПоследних.ID ЕСТЬ NULL 
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ";
	
	// Выводим НеПроведенные документы, если включена такая настройка									  
	Если Объект.НеПроведенные Тогда
		Запрос.Текст = Запрос.Текст  +
          "
          |ОБЪЕДИНИТЬ ВСЕ
		  |" + 

		  
		  "ВЫБРАТЬ РАЗЛИЧНЫЕ
		  |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка КАК ДокументНаряд,
		  |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID     КАК ID_Ремонта,
	      |	0                                                                 КАК Картинка
		  |ИЗ
		  |	Документ.торо_НарядНаРегламентноеМероприятие.РегламентныеМероприятия КАК торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия
		  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеМероприятия.СрезПоследних(&ПлановыйПериод, ) КАК торо_ЗавершенныеМероприятияСрезПоследних
		  |		ПО торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID = торо_ЗавершенныеМероприятияСрезПоследних.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
		  |		ПО торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.ID = торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID
		  |ГДЕ
		  |	торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.Проведен = ЛОЖЬ
		  |	И торо_НарядНаРегламентноеМероприятиеРегламентныеМероприятия.Ссылка.ПометкаУдаления = ЛОЖЬ
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Отменен
		  |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Замещен
		  |	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаНач <= &ПлановыйПериод
		  |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка.Организация.Наименование ЕСТЬ NULL 
		  |	И ВЫБОР
		  |			КОГДА НЕ &Завершенные
		  |				ТОГДА торо_ЗавершенныеМероприятияСрезПоследних.ID ЕСТЬ NULL 
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ ("+Запрос.Текст+") КАК Таблица";
	
	НарядыНаМероприятия.ТекстЗапроса = Запрос.Текст;
	НарядыНаМероприятия.Параметры.УстановитьЗначениеПараметра("Организация",          Объект.Организация);
	НарядыНаМероприятия.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод",       КонецДня(Объект.ДатаАктуальности + (ИтогоПлановыхДней*60*60*24)));
	НарядыНаМероприятия.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям",   ?(Не ЗначениеЗаполнено(Объект.Организация), Истина, Ложь));
	НарядыНаМероприятия.Параметры.УстановитьЗначениеПараметра("Завершенные",          Объект.Завершенные);
	
	Элементы.НарядыНаМероприятия.АвтоОбновление = Объект.АвтоматическоеОбновление;
	Элементы.НарядыНаМероприятия.ПериодАвтоОбновления = Объект.ПериодОбновления;

КонецПроцедуры

&НаСервере
// Заполняет Регламентные акты по выбранным ремонтам
//
Процедура УстановитьЗапросИПараметрыДинСпискаРегламентныхАктов()
	
	Если Не ФОИспользоватьРегламентныеМероприятия Тогда
		Возврат;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	торо_Ремонты.Регистратор КАК ДокументАкт,
	               |	торо_Ремонты.ID КАК ID_Ремонта,
				   |	1 КАК Картинка
	               |ИЗ
	               |	РегистрСведений.торо_Ремонты КАК торо_Ремонты
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
	               |		ПО торо_Ремонты.ID = торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеМероприятия.СрезПоследних(&ПлановыйПериод, ) КАК торо_ЗавершенныеМероприятияСрезПоследних
	               |		ПО торо_Ремонты.ID = торо_ЗавершенныеМероприятияСрезПоследних.ID
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_АктОВыполненииРегламентногоМероприятия)
	               |	И ВЫБОР
	               |			КОГДА НЕ &ПоВсемОрганизациям
	               |				ТОГДА торо_Ремонты.Регистратор.Организация = &Организация
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ
	               |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Отменен
	               |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Замещен
	               |	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаНач <= &ПлановыйПериод
	               |	И НЕ торо_Ремонты.Регистратор.Организация.Наименование ЕСТЬ NULL 
	               |	И ВЫБОР
	               |			КОГДА НЕ &Завершенные
	               |				ТОГДА торо_ЗавершенныеМероприятияСрезПоследних.ID ЕСТЬ NULL 
	               |			ИНАЧЕ ИСТИНА
	               |		КОНЕЦ";
	
	// Выводим НеПроведенные документы, если включена такая настройка									  
	Если Объект.НеПроведенные Тогда
		Запрос.Текст = Запрос.Текст  +
          "
          |ОБЪЕДИНИТЬ ВСЕ
		  |" + 

		  
		  "ВЫБРАТЬ РАЗЛИЧНЫЕ

		  |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка КАК ДокументНаряд,
		  |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID КАК ID_Ремонта,
	      |	0 КАК Картинка
		  |ИЗ
		  |	Документ.торо_АктОВыполненииРегламентногоМероприятия.Мероприятия КАК торо_АктОВыполненииРегламентногоМероприятияМероприятия
		  |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗавершенныеМероприятия.СрезПоследних(&ПлановыйПериод, ) КАК торо_ЗавершенныеМероприятияСрезПоследних
		  |		ПО торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID = торо_ЗавершенныеМероприятияСрезПоследних.ID
		  |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.торо_ГрафикРегламентныхМероприятийТОиР.ПланРемонтов КАК торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов
		  |		ПО торо_АктОВыполненииРегламентногоМероприятияМероприятия.ID = торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ID
		  |ГДЕ
		  |	торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка.Проведен = ЛОЖЬ
		  |	И торо_АктОВыполненииРегламентногоМероприятияМероприятия.Ссылка.ПометкаУдаления = ЛОЖЬ
		  |	И ВЫБОР
		  |			КОГДА НЕ &ПоВсемОрганизациям
		  |				ТОГДА торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка.Организация = &Организация
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ
		  |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Отменен
		  |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Замещен
		  |	И торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.ДатаНач <= &ПлановыйПериод
		  |	И НЕ торо_ГрафикРегламентныхМероприятийТОиРПланРемонтов.Ссылка.Организация.Наименование ЕСТЬ NULL 
		  |	И ВЫБОР
		  |			КОГДА НЕ &Завершенные
		  |				ТОГДА торо_ЗавершенныеМероприятияСрезПоследних.ID ЕСТЬ NULL 
		  |			ИНАЧЕ ИСТИНА
		  |		КОНЕЦ";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ ("+Запрос.Текст+") КАК Таблица";
	
	АктыПоМероприятию.ТекстЗапроса = Запрос.Текст;
	АктыПоМероприятию.Параметры.УстановитьЗначениеПараметра("Организация",          Объект.Организация);
	АктыПоМероприятию.Параметры.УстановитьЗначениеПараметра("ПлановыйПериод",       КонецДня(Объект.ДатаАктуальности + (ИтогоПлановыхДней*60*60*24)));
	АктыПоМероприятию.Параметры.УстановитьЗначениеПараметра("ПоВсемОрганизациям",   ?(Не ЗначениеЗаполнено(Объект.Организация), Истина, Ложь));
	АктыПоМероприятию.Параметры.УстановитьЗначениеПараметра("Завершенные",          Объект.Завершенные);

	Элементы.АктыПоМероприятию.АвтоОбновление = Объект.АвтоматическоеОбновление;
	Элементы.АктыПоМероприятию.ПериодАвтоОбновления = Объект.ПериодОбновления;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуВводаНаОсновании()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ВводНаОсновании.ДокументОснование,
	               |	торо_ВводНаОсновании.ДокументВводимый
	               |ИЗ
	               |	РегистрСведений.торо_ВводНаОсновании КАК торо_ВводНаОсновании
	               |ГДЕ
	               |	торо_ВводНаОсновании.Значение";
				   
	ВводНаОсновании.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	Если РежимВыделенияСтрок = "По критичности" Тогда
		Для каждого Стр Из ТаблицаКритичности Цикл
			
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.КритичностьДефекта");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Стр.Критичность;
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Стр.Цвет);
			
		КонецЦикла;
		
	ИначеЕсли РежимВыделенияСтрок = "По приоритету объекта ремонта" Тогда
		
		Для каждого Стр Из ТаблицаПриоритетностиОР Цикл
			
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.ПриоритетОР");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Стр.Приоритет;
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Стр.Цвет);
			
		КонецЦикла;
		
	ИначеЕсли РежимВыделенияСтрок = "По наработке объекта ремонта" Тогда
		
		Для каждого Стр Из ТаблицаНаработки Цикл
			
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.Отклонение");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = Стр.Наработка;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Стр.Цвет);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Ремонты");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Ремонты.Завершенные");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(201,226,255));
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ОформляемоеПоле  = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле         = Новый ПолеКомпоновкиДанных("Мероприятия");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Мероприятия.Завершенные");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(201,226,255));
	
	// функциональные опции
	Элементы.СтраницаРемонты.Видимость                 = ИспользоватьУправлениеРемонтами;
	Элементы.СтраницаРегламентныеМероприятия.Видимость = ФОИспользоватьРегламентныеМероприятия;
	Элементы.РемонтыВведенаЗаявка.Видимость            = ИспользоватьУправлениеРемонтами И ФОИспользоватьСметы;
	Элементы.ГруппаЗаявкиНаРемонт.Видимость            = ИспользоватьУправлениеРемонтами И ФОИспользоватьСметы;
	Элементы.ГруппаНарядыНаРемонт.Видимость            = ИспользоватьУправлениеРемонтами И ФОИспользоватьНаряды;
	Элементы.ГруппаСтатусДокумента.Видимость = ФОИспользоватьСтатусыДокументов;
	Элементы.РемонтыСтатусДокумента.Видимость = ФОИспользоватьСтатусыДокументов;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПриоритетностиОР()
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ПриоритетыОбъектовРемонта.Ссылка КАК Приоритет
	|ИЗ
	|	Справочник.торо_ПриоритетыОбъектовРемонта КАК торо_ПриоритетыОбъектовРемонта
	|
	|УПОРЯДОЧИТЬ ПО
	|	торо_ПриоритетыОбъектовРемонта.Код";
	
	ЦветПоУмолчанию = Новый Цвет(255,255,255);
	
	Если ТаблицаПриоритетностиОР.Количество() = 0 Тогда
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		Массив = Новый Массив;
		Массив.Добавить(Тип("Цвет"));
		РезультатЗапроса.Колонки.Добавить("Цвет",Новый ОписаниеТипов(Массив));
		
		РезультатЗапроса.ЗаполнитьЗначения(ЦветПоУмолчанию,"Цвет");
		
		ТаблицаКритичности.Загрузить(РезультатЗапроса);
		
	Иначе 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Если ТаблицаПриоритетностиОР.НайтиСтроки(Новый Структура("Приоритет", Выборка.Приоритет)).Количество() = 0 Тогда
				НС = ТаблицаПриоритетностиОР.Добавить();
				НС.Приоритет = Выборка.Приоритет;
				НС.Цвет = ЦветПоУмолчанию;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьНастройкиЦвета(СтруктураПараметров)
	
	Если РежимВыделенияСтрок = "По критичности" Тогда
		СтруктураПараметров.Вставить("ТаблицаКритичности", ПоместитьВоВременноеХранилище(ТаблицаКритичности.Выгрузить(), ЭтаФорма.УникальныйИдентификатор));
	ИначеЕсли РежимВыделенияСтрок = "По приоритету объекта ремонта" Тогда
		СтруктураПараметров.Вставить("ТаблицаПриоритетностиОР", ПоместитьВоВременноеХранилище(ТаблицаПриоритетностиОР.Выгрузить(), ЭтаФорма.УникальныйИдентификатор));
	ИначеЕсли РежимВыделенияСтрок = "По наработке объекта ремонта" Тогда
		СтруктураПараметров.Вставить("ТаблицаНаработки", ПоместитьВоВременноеХранилище(ТаблицаНаработки.Выгрузить(), ЭтаФорма.УникальныйИдентификатор));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВызватьОбработчикОповещения(Результат, ДопПараметры) Экспорт
	ОбработкаОповещения(ДопПараметры.ИмяСобытия, Неопределено, ДопПараметры.Источник);
КонецПроцедуры
      
&НаКлиенте
Процедура УстановитьФильтрПоРемонту()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.СтраницаРемонты Тогда
		
		ВыделенныеСтроки = Элементы.Ремонты.ВыделенныеСтроки;
		
		ВыделенаОднаСтрока = (ВыделенныеСтроки.Количество() = 1);
		
		Если ВыделенаОднаСтрока Тогда
			
			ТекID = Элементы.Ремонты.ТекущиеДанные.ID_Ремонта;				
			
		Иначе
			
			ТекID = Новый СписокЗначений;
			
			Для каждого НомСтр Из ВыделенныеСтроки Цикл
				Строка = Элементы.Ремонты.ДанныеСтроки(НомСтр);
				Если Строка <> Неопределено Тогда
					ТекID.Добавить(Строка.ID_Ремонта);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		УстановитьОтборВСписке(ЗаявкиНаРемонт, ТекID, ВыделенаОднаСтрока);
		УстановитьОтборВСписке(НарядыНаРемонт, ТекID, ВыделенаОднаСтрока);
		УстановитьОтборВСписке(АктыНаРемонт,   ТекID, ВыделенаОднаСтрока);    
		
		
	Иначе
		
		ВыделенныеСтроки = Элементы.Мероприятия.ВыделенныеСтроки;
		
		ВыделенаОднаСтрока = (ВыделенныеСтроки.Количество() = 1);
	
		Если ВыделенаОднаСтрока Тогда
			
			ТекID = Элементы.Мероприятия.ТекущиеДанные.ID_Ремонта;
			
		Иначе
			
			ТекID = Новый СписокЗначений;
			
			Для каждого НомСтр Из ВыделенныеСтроки Цикл
				Строка = Элементы.Мероприятия.ДанныеСтроки(НомСтр);
				Если Строка <> Неопределено Тогда
					ТекID.Добавить(Строка.ID_Ремонта);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		
		УстановитьОтборВСписке(НарядыНаМероприятия, ТекID, ВыделенаОднаСтрока);
		УстановитьОтборВСписке(АктыПоМероприятию,   ТекID, ВыделенаОднаСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает доступность кнопок в зависимости от настроек ввода на основании.
//
&НаКлиенте
Функция ПроверитьВводНаОсновании(ДокументОснование, ДокументВводимый)
	
	МассивСтрок = ВводНаОсновании.НайтиСтроки(Новый Структура("ДокументОснование, ДокументВводимый", ДокументОснование, ДокументВводимый));
	
	Если МассивСтрок.Количество() > 0 Тогда 
		Возврат Истина;
	Иначе
		Возврат Ложь;	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура УстановитьОтборВСписке(Список, ТекID, ВыделенаОднаСтрока = Истина)
	
	Если ВыделенаОднаСтрока Тогда
		
		Список.Отбор.Элементы.Очистить();
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ID_Ремонта");
		ЭлементОтбора.ПравоеЗначение = ТекID;
		ЭлементОтбора.Использование = Истина;
		
	Иначе
		
		Список.Отбор.Элементы.Очистить();
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ID_Ремонта");
		ЭлементОтбора.ПравоеЗначение = ТекID;
		ЭлементОтбора.Использование = Истина;
				
	КонецЕсли;	
	
КонецПроцедуры
 
&НаКлиенте
Функция ПолучитьМассивВыделенныхСтрокРемонтов(ЭлементыРемонты)
	
	МассивВыделенныхСтрок = Новый Массив;	
	
	Для Каждого НомСтроки Из ЭлементыРемонты.ВыделенныеСтроки Цикл
		Строка = ЭлементыРемонты.ДанныеСтроки(НомСтроки);
		Если НЕ Строка = Неопределено Тогда 
			МассивВыделенныхСтрок.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат МассивВыделенныхСтрок;
		
КонецФункции // ПолучитьМассивВыделенныхСтрокРемонтов()
 
&НаСервере
Функция ПолучитьСвязанныеДокументыПОID(МассивВыделенныхСтрок, ИмяТЧ)
	
	ТаблицаВыделенныхСтрок = Новый ТаблицаЗначений;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов,,Новый КвалификаторыСтроки(36));
	
	ТаблицаВыделенныхСтрок.Колонки.Добавить("ID_Ремонта",ОписаниеТипов);
	
	Для Каждого Строка Из МассивВыделенныхСтрок Цикл
		НС = ТаблицаВыделенныхСтрок.Добавить();
		ЗаполнитьЗначенияСвойств(НС, Строка);
	КонецЦикла;
	
	
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СписокID.ID_Ремонта
		|ПОМЕСТИТЬ ID_Ремонтов
		|ИЗ
		|	&СписокID КАК СписокID
		|;";

	Если ИмяТЧ = "ЗаявкиНаРемонт" Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_ЗаявкиПоРемонтам.Регистратор КАК Документ,
		|	торо_ЗаявкиПоРемонтам.IDРемонта   КАК ID,
		|	""торо_ЗаявкаНаРемонт""           КАК ТипДокумента
		|ИЗ
		|	ID_Ремонтов КАК ID_Ремонтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_ЗаявкиПоРемонтам КАК торо_ЗаявкиПоРемонтам
		|		ПО торо_ЗаявкиПоРемонтам.Регистратор ССЫЛКА Документ.торо_ЗаявкаНаРемонт
		|			И ID_Ремонтов.ID_Ремонта = торо_ЗаявкиПоРемонтам.IDРемонта";
		
	ИначеЕсли ИмяТЧ = "НарядыНаРемонт" Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_НарядыПоРемонтам.Регистратор        КАК Документ,
		|	торо_НарядыПоРемонтам.IDРемонта          КАК ID,
		|	""торо_НарядНаВыполнениеРемонтныхРабот"" КАК ТипДокумента
		|ИЗ
		|	ID_Ремонтов КАК ID_Ремонтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_НарядыПоРемонтам КАК торо_НарядыПоРемонтам
		|		ПО ID_Ремонтов.ID_Ремонта = торо_НарядыПоРемонтам.IDРемонта";
		
	ИначеЕсли ИмяТЧ = "НарядыНаМероприятия" Тогда
		
		Запрос.Текст = Запрос.Текст + 
		"////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	торо_Ремонты.Регистратор                КАК Документ,
		|	торо_Ремонты.ID                         КАК ID,
		|	""торо_НарядНаРегламентноеМероприятие"" КАК ТипДокумента
		|ИЗ
		|	ID_Ремонтов КАК ID_Ремонтов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.торо_Ремонты КАК торо_Ремонты
		|		ПО ID_Ремонтов.ID_Ремонта = торо_Ремонты.ID
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(торо_Ремонты.Регистратор) = ТИП(Документ.торо_НарядНаРегламентноеМероприятие)";
		
		
	КонецЕсли; 	
	
	Запрос.УстановитьПараметр("СписокID",ТаблицаВыделенныхСтрок);
	
	ТабРезультата = Запрос.Выполнить().Выгрузить();
	
	Если ТабРезультата.Количество() Тогда
		Возврат ПоместитьВоВременноеХранилище(ТабРезультата, ЭтаФорма.УникальныйИдентификатор);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуКритичности()
	Запрос = новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_КритичностьДефекта.Ссылка КАК Критичность
	|ИЗ
	|	Справочник.торо_КритичностьДефекта КАК торо_КритичностьДефекта
	|
	|УПОРЯДОЧИТЬ ПО
	|	торо_КритичностьДефекта.Код";
	
	ЦветПоУмолчанию = Новый Цвет(255,255,255);
	
	Если ТаблицаКритичности.Количество() = 0 Тогда
		
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
		ТаблицаКритичности.Загрузить(РезультатЗапроса);
		
	Иначе 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() цикл
			Если ТаблицаКритичности.НайтиСтроки(Новый Структура("Критичность", Выборка.Критичность)).Количество() = 0 Тогда
				Нс = ТаблицаКритичности.Добавить();
				Нс.Критичность = Выборка.Критичность;
				Нс.Цвет = ЦветПоУмолчанию;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	СохраненнаяНастройка = Новый Структура;
	СохраненнаяНастройка.Вставить("Организация", Объект.Организация);
	СохраненнаяНастройка.Вставить("Исполнитель", Объект.Исполнитель);
	СохраненнаяНастройка.Вставить("ТаблицаКритичности", ТаблицаКритичности.Выгрузить());
	СохраненнаяНастройка.Вставить("РежимВыделенияСтрок", РежимВыделенияСтрок);
	СохраненнаяНастройка.Вставить("ТаблицаПриоритетностиОР", ТаблицаПриоритетностиОР.Выгрузить());
	СохраненнаяНастройка.Вставить("ТаблицаНаработки", ТаблицаНаработки.Выгрузить());
	СохраненнаяНастройка.Вставить("АвтоматическоеОбновление", Объект.АвтоматическоеОбновление);
	СохраненнаяНастройка.Вставить("ПериодОбновления", Объект.ПериодОбновления);
	СохраненнаяНастройка.Вставить("Завершенные", Объект.Завершенные);
	СохраненнаяНастройка.Вставить("ДанныеПоНаработке", Объект.ДанныеПоНаработке);
	СохраненнаяНастройка.Вставить("НеПроведенные", Объект.НеПроведенные);
	СохраненнаяНастройка.Вставить("ВидДаты",Объект.ВидДаты);
	СохраненнаяНастройка.Вставить("ДатаАктуальности", Объект.ДатаАктуальности);
	СохраненнаяНастройка.Вставить("ПлановыйПериод", Объект.ПлановыйПериод);
	СохраненнаяНастройка.Вставить("Периодичность", Объект.Периодичность);
	
	СохраненнаяНастройка.Вставить("сзСтатусОР", сзСтатусОР);
	СохраненнаяНастройка.Вставить("ИспользоватьОтборПоСтатусуДокумента", ИспользоватьОтборПоСтатусуДокумента);
	СохраненнаяНастройка.Вставить("ОтборПоСтатусуДокумента", ОтборПоСтатусуДокумента);
	
	СохраненнаяНастройка.Вставить("ДатаКон", Объект.ДатаКон);
	СохраненнаяНастройка.Вставить("ДатаНач", Объект.ДатаНач);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.торо_РабочееМестоТехническогоСпециалиста", Пользователи.ТекущийПользователь().УникальныйИдентификатор(), СохраненнаяНастройка);
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНастройки()
	
	ЗначениеНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.торо_РабочееМестоТехническогоСпециалиста", Пользователи.ТекущийПользователь().УникальныйИдентификатор());
	
	Если ТипЗнч(ЗначениеНастроек) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ЗначениеНастроек);
		ТаблицаКритичности.Загрузить(ЗначениеНастроек.ТаблицаКритичности);
		ТаблицаНаработки.Загрузить(ЗначениеНастроек.ТаблицаНаработки);
		ТаблицаПриоритетностиОР.Загрузить(ЗначениеНастроек.ТаблицаПриоритетностиОР);
		РежимВыделенияСтрок = ЗначениеНастроек.РежимВыделенияСтрок;
		
		ЗначениеНастроек.Свойство("ИспользоватьОтборПоСтатусуДокумента", ИспользоватьОтборПоСтатусуДокумента);
		ЗначениеНастроек.Свойство("ОтборПоСтатусуДокумента", ОтборПоСтатусуДокумента);
		
		сзТмпСтатусОР = "";
		ЗначениеНастроек.Свойство("сзСтатусОР", сзТмпСтатусОР);
		Если ЗначениеЗаполнено(сзТмпСтатусОР) Тогда
			сзСтатусОР = сзТмпСтатусОР;
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДокументИОткрытьФорму(ИмяФормы, СоответствиеИДДокументам, ОписаниеОповещения = Неопределено)

	ОткрытьФорму(ИмяФормы, Новый Структура("РабочееМесто",СоответствиеИДДокументам),ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(ИмяФормы, Ссылка, ОписаниеОповещения = Неопределено)

	ОткрытьФорму(ИмяФормы, Новый Структура("Ключ",Ссылка),ЭтаФорма, ЭтаФорма.УникальныйИдентификатор,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборОснованийДляДокумента(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = Неопределено 
		И ДопПараметры.Свойство("СоздаваемыйДокумент") Тогда
		
		Если ДопПараметры.СоздаваемыйДокумент = "торо_АктОВыполненииЭтапаРабот" Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииЭтапаРабот")));
			
			СоответствиеИДДокументам = Новый Соответствие;
			
			Для каждого Элемент Из Результат Цикл
				СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
			КонецЦикла; 
			
			СоздатьДокументИОткрытьФорму("Документ.торо_АктОВыполненииЭтапаРабот.Форма.ФормаДокумента",СоответствиеИДДокументам, ОписаниеОповещения);

		ИначеЕсли ДопПараметры.СоздаваемыйДокумент = "торо_НарядНаВыполнениеРемонтныхРабот" Тогда 
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_НарядНаВыполнениеРемонтныхРабот")));
			
			СоответствиеИДДокументам = Новый Соответствие;
			
			Для каждого Элемент Из Результат Цикл
				СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
			КонецЦикла; 
			
			СоздатьДокументИОткрытьФорму("Документ.торо_НарядНаВыполнениеРемонтныхРабот.Форма.ФормаДокумента",СоответствиеИДДокументам, ОписаниеОповещения);
		
		ИначеЕсли ДопПараметры.СоздаваемыйДокумент = "торо_АктОВыполненииРегламентногоМероприятия" Тогда 
			
			ОписаниеОповещения = Новый ОписаниеОповещения("ВызватьОбработчикОповещения",ЭтаФорма,Новый Структура("ИмяСобытия, Источник", "СозданДокументЧерезРМТехСпец", Тип("ДокументСсылка.торо_АктОВыполненииРегламентногоМероприятия")));
			
			СоответствиеИДДокументам = Новый Соответствие;
			
			Для каждого Элемент Из Результат Цикл
				СоответствиеИДДокументам.Вставить(Элемент.ID_Ремонта, Элемент.Документ);
			КонецЦикла; 
			
			СоздатьДокументИОткрытьФорму("Документ.торо_АктОВыполненииРегламентногоМероприятия.Форма.ФормаДокумента",СоответствиеИДДокументам, ОписаниеОповещения);
	
			
		КонецЕсли; 
		

	КонецЕсли; 	
КонецПроцедуры

&НаСервере 
Процедура ВозвратСпискаСостояний(РезультатЗакрытия, ДополнительныеПараметры) Экспорт 
	Если РезультатЗакрытия <> Неопределено Тогда
		сзСтатусОР = РезультатЗакрытия;
		УстановитьОтборыПоКолонкеСтатусОР();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыПоКолонкеСтатусОР()
	
	СписокСтатусов = Новый СписокЗначений;
	стр = "";
	Для Каждого текСтат из сзСтатусОР Цикл
		Если текСтат.Пометка Тогда
			СписокСтатусов.Добавить(текСтат.Представление);
			стр = стр + текСтат.Представление + "; ";
		КонецЕсли;
	КонецЦикла;
	СтатусОР = стр;	
	
	ИспользоватьОтборПоСтатусу = СписокСтатусов.Количество() > 0;
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(Ремонты.Отбор, "СтатусОР", СписокСтатусов,ВидСравненияКомпоновкиДанных.ВСписке,,ИспользоватьОтборПоСтатусу);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВыбораОтбораПоСтатусуДокумента()
	
	СписокЗначений = Элементы.ОтборПоСтатусуДокумента.СписокВыбора;
	СписокЗначений.Добавить("Статус не определен");
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументов.Зарегистрирован"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументов.ЗапланированоУстранение"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументов.Устраняется"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументов.Устранен"));
	СписокЗначений.Добавить(ПредопределенноеЗначение("Перечисление.торо_СтатусыДокументов.Отклонен"));
		
КонецПроцедуры

#КонецОбласти