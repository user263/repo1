////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПЕРЕМЕННЫЕ
&НаКлиенте
Перем СостояниеДереваОР Экспорт; // Переменная хранит состояние дерева объектов ремонта.

#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	ЗаполнитьРеквизитыШапкиПоУмолчанию();
	
	КоличествоЭлементовВДереве = 0;
	ТипПоиска = "Наименование";
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнаяСтруктураИерархии",
	Истина);
	
	Инициатор = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"НастройкиТОиР",
	"ОсновнойИнициаторДефекта",
	Неопределено);
	
	ИерархияДляВводаНовыхОР = Константы.торо_ИерархияДляВводаНовыхОР.Получить();
	
	Если ТекСтруктураИерархии = Справочники.торо_СтруктурыОР.ПустаяСсылка() Тогда
		ТекСтруктураИерархии = ИерархияДляВводаНовыхОР;
	КонецЕсли;
	
	ЗаполнитьПараметрыИерархии();
	
	СтруктураПараметровИерархии = Новый Структура(
	"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник,РодительИерархии",
	ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
	
	СтруктураПараметровФормы = Новый Структура(
	"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
	ЭтаФорма.ИмяФормы, Неопределено, Неопределено);
	
	МассивСтруктурОР = Справочники.торо_ОбъектыРемонта.ПолучитьМассивСтрокДляЗаполненияДерева(СтруктураПараметровИерархии,СтруктураПараметровФормы);
	торо_РаботаСИерархией.ЗаполнитьДопПоляСпискаОбъектовСервере(МассивСтруктурОР);
	
	ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР);

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриАктивизацииСтроки(Элемент)
	
	Если Элементы.Дерево.ТекущиеДанные <> Неопределено Тогда
		
		стрВозврата = ЗаполнитьДанныеОРНаСервере(Элементы.Дерево.ТекущиеДанные.Ссылка);
		ТекущийОР = Элементы.Дерево.ТекущиеДанные.Ссылка;
		
		Если Элементы.Дерево.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			ВходитВСостав = Элементы.Дерево.ТекущиеДанные.ПолучитьРодителя().Ссылка;
		ИНаче
			ВходитВСостав = Неопределено;
		КонецЕсли;
		Подразделение = стрВозврата.Подразделение;
		Наименование = стрВозврата.Наименование;
		Местонахождение = стрВозврата.АдресМестонахождения;
		ИнвентарныйНомер = стрВозврата.ИнвентарныйНомер;
		ЗаводскойНомер = стрВозврата.ЗаводскойНомер;
		ТехнологичейскийНомер = стрВозврата.ТехНомер;
		ПодразделениеИсполнитель = стрВозврата.ПодразделениеИсполнитель;
		Направление = стрВозврата.Направление;
		
		Если Элементы.Дерево.ТекущиеДанные.ПолучитьЭлементы().Количество() = 0 Тогда
			ОтказавшийЭлемент = Элементы.Дерево.ТекущиеДанные.Ссылка;
		Иначе
			ОтказавшийЭлемент = Неопределено;
		КонецЕсли;
		
		Дата = ТекущаяДата();
		ДатаОбнаружениея = ТекущаяДата();
		
		КонтактноеЛицо = Неопределено;
		ТиповойДефект = Неопределено;
		КритичностьДефекта = Неопределено;
		ОписаниеДефекта = Неопределено;
		ВидДефекта = Неопределено;
		ПричинаДефекта = Неопределено;
		УсловияВыявленияДефекта = Неопределено;
		
		Статус = "";
		Номер = "";
		НовыйДок = Неопределено;
	иначе 
		Статус = "";
		Номер = "";
		НовыйДок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказавшийЭлементНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СтруктураОтбора", ТекущийОР);
	ПараметрыФормы.Вставить("СтруктураИерархии", ТекСтруктураИерархии);
	Форма = ПолучитьФорму("Справочник.торо_ОбъектыРемонта.ФормаВыбора",ПараметрыФормы,Элемент);
	ОткрытьФорму(Форма);
КонецПроцедуры

&НаКлиенте
Процедура ТиповойДефектПриИзменении(Элемент)
	
	ЗаполнитьПоТИповомуДефекту();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере 
Процедура ЗаполнитьПоТИповомуДефекту()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.Причина КАК Причина,
	|	торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.Ссылка.ВидДефекта КАК ВидДефекта,
	|	торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.Ссылка.КритичностьДефекта КАК КритичностьДефекта,
	|	торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.Ссылка.ОписаниеДефекта КАК ОписаниеДефекта
	|ИЗ
	|	Справочник.торо_ТиповыеДефектыОборудования.ПричиныВозникновенияДефекта КАК торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта
	|ГДЕ
	|	торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.Ссылка = &Ссылка
	|	И торо_ТиповыеДефектыОборудованияПричиныВозникновенияДефекта.НомерСтроки = 1";
				   
	Запрос.УстановитьПараметр("Ссылка", ТиповойДефект);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда возврат; КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ВидДефекта = Выборка.ВидДефекта;
	ПричинаДефекта = Выборка.Причина;
	КритичностьДефекта = Выборка.КритичностьДефекта;
	ОписаниеДефекта = Выборка.ОписаниеДефекта;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПриСозданииНаСервере(МассивСтруктурОР)
	
	НС = Дерево.ПолучитьЭлементы().Добавить();
	НС.Ссылка = ТекСтруктураИерархии;
	НС.Картинка = 4;
	НС.СвязиОбновлялись = Истина;
	
	Если СтроитсяАвтоматически Тогда
		РодительИерархии = Справочники[ИерархияТипРеквизитаОР].ПустаяСсылка();
	Иначе
		РодительИерархии = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
	КонецЕсли;
	
	Для Каждого ЭлементКорневой Из МассивСтруктурОР Цикл
		Если ЭлементКорневой.РодительИерархии = РодительИерархии Тогда
			НСКорневая = НС.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НСКорневая,ЭлементКорневой);
			НСКорневая.Ссылка = ЭлементКорневой.ОбъектИерархии;
			НСКорневая.Картинка = ЭлементКорневой.ИндексКартинки;
			НСКорневая.РеквизитДопУпорядочивания = ЭлементКорневой.РеквизитДопУпорядочиванияОР;
			Для Каждого ЭлементПодчиненный Из МассивСтруктурОР Цикл
				Если ЭлементПодчиненный.РодительИерархии = ЭлементКорневой.ОбъектИерархии Тогда
					НСПодчиненная = НСКорневая.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НСПодчиненная,ЭлементПодчиненный);
					НСПодчиненная.Ссылка = ЭлементПодчиненный.ОбъектИерархии;
					НСПодчиненная.Картинка = ЭлементПодчиненный.ИндексКартинки;
					НСПодчиненная.РеквизитДопУпорядочивания = ЭлементПодчиненный.РеквизитДопУпорядочиванияОР;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыИерархии()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_СтруктурыОР.РазрешенВводНовыхОР,
	               |	торо_СтруктурыОР.ИзменяетсяДокументами,
	               |	торо_СтруктурыОР.СтроитсяАвтоматически,
	               |	торо_СтруктурыОР.РеквизитОР,
	               |	торо_СтруктурыОР.ТипРеквизитаОР
	               |ИЗ
	               |	Справочник.торо_СтруктурыОР КАК торо_СтруктурыОР
	               |ГДЕ
	               |	торо_СтруктурыОР.Ссылка = &СтруктураИерархии";
	Запрос.УстановитьПараметр("СтруктураИерархии",ТекСтруктураИерархии);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	РазрешенВводНовыхОР    = Выборка.РазрешенВводНовыхОР;
	ИзменяетсяДокументами  = Выборка.ИзменяетсяДокументами;
	СтроитсяАвтоматически  = Выборка.СтроитсяАвтоматически;
	ИерархияРеквизитОР	   = Выборка.РеквизитОР;
	ИерархияТипРеквизитаОР = Выборка.ТипРеквизитаОР;
	Если СтроитсяАвтоматически И ИерархияТипРеквизитаОР <> "" Тогда
		ИерархическийСправочник= Метаданные.Справочники[ИерархияТипРеквизитаОР].Иерархический;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтруктуруНовыхСтрок(Ссылка, ПараметрыСтруктурыИерархии, МассивЭлементов, СтруктураПараметровФормы)
	
	СтруктураВозврата = Справочники.торо_ОбъектыРемонта.ПолучитьСтруктуруНовыхСтрокДляДереваПриРазворачивании(Ссылка, ПараметрыСтруктурыИерархии,МассивЭлементов,СтруктураПараметровФормы);
	торо_РаботаСИерархией.ЗаполнитьДопПоляСпискаОбъектовСервере(СтруктураВозврата);
	Возврат СтруктураВозврата;	
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыШапкиПоУмолчанию()
	
	Организация = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновнаяОрганизация",
		Справочники.Организации.ПустаяСсылка());
		
	ПодразделениеДляДок = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ОсновноеПодразделение",
		Справочники.СтруктураПредприятия.ПустаяСсылка());
		
	Дата = ТекущаяДата();
	ДатаОбнаружениея = ТекущаяДата();
		
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеОбязательныхРеквизитов()
	Ошибка = Ложь;
	
	масОшибок = Новый Массив;
	
	
	Если не ЗначениеЗаполнено(Организация) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Организация");
	КонецЕсли;
	Если не ЗначениеЗаполнено(ПодразделениеДляДок) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Подразделение");
	КонецЕсли;
	Если не ЗначениеЗаполнено(УсловияВыявленияДефекта) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Дефект выявлен в процессе");
	КонецЕсли;
	Если не ЗначениеЗаполнено(Дата) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Дата");
	КонецЕсли;
	Если не ЗначениеЗаполнено(ДатаОбнаружениея) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Дата обнаружения");
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(ОтказавшийЭлемент) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Отказавший элемент");
	КонецЕсли;
	Если не ЗначениеЗаполнено(ВидДефекта) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Вид дефекта");
	КонецЕсли;
	Если не ЗначениеЗаполнено(ПричинаДефекта) Тогда
		Ошибка = Истина;
		масОшибок.Добавить("Причина дефекта");
	КонецЕсли;
	
	Для каждого текСтрока из масОшибок цикл
		ШаблонСообщения = НСтр("ru = 'Поле <%1> не заполнено! Документ не будет создан.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ТекСтрока);
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЦикла;
	
	Возврат Ошибка;
	
КонецФункции

&НаСервере 
Функция СоздатьДокументВыявленныйДефект()
	
	Если ЗначениеЗаполнено(Номер) и Документы.торо_ВыявленныеДефекты.НайтиПоНомеру(Номер, Дата) <> Неопределено Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Документ с таким номером уже существует в этом периоде! Документ не был создан.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	СогласованиеИспользуется = СогласнованиеИСпользуетсяДляДок_ВыявленныеДефекты();
	ХранитьИсториюСогласованияВДокументах = Константы.торо_ХранитьИсториюСогласованияВДокументах.Получить();
	
	докОбъект = Документы.торо_ВыявленныеДефекты.СоздатьДокумент();
	докОбъект.Заполнить(Неопределено);
	
	ДокОбъект.Дата = Дата;
	ДокОбъект.ДатаОбнаружения = ДатаОбнаружениея;
	Если ЗначениеЗаполнено(Номер) Тогда 
		ДокОбъект.Номер = Номер;
	КонецЕсли;
	
	ДокОбъект.Инициатор = Инициатор;
	докОбъект.КонтактноеЛицоИнициатора = КонтактноеЛицо;
	докОбъект.ДефектВыявленВПроцессе = УсловияВыявленияДефекта;
	докОбъект.Организация = Организация;
	докОбъект.Подразделение = ПодразделениеДляДок;
	докОбъект.ОбъектРемонта = ОтказавшийЭлемент;
	докОбъект.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
	
	нс = докОбъект.СписокДефектов.Добавить();
	нс.ОтказавшийЭлемент = ОтказавшийЭлемент;
	нс.ОбъектРемонта = ОтказавшийЭлемент;
	нс.ТиповойДефект = ТиповойДефект;
	нс.ВидДефекта = ВидДефекта;
	нс.ДефектПричина = ПричинаДефекта;
	нс.КритичностьДефекта = КритичностьДефекта;
	нс.ДефектОписание = ОписаниеДефекта;
	
	нс.ПодразделениеИсполнитель = ПодразделениеИсполнитель;
	
	Попытка
		Если СогласованиеИспользуется Тогда
			ВидДокумента = Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВыявленныеДефекты;
			СпособСогласованияДокумента = торо_РаботаСоСтатусамиДокументовСервер.УстановитьСпособСогласования(ВидДокумента, докОбъект.Организация, докОбъект.Подразделение);
			СтатусДокументаРегистр = торо_Ремонты.ПолучитьНачальныйСтатус(СпособСогласованияДокумента);
			
			Если ХранитьИсториюСогласованияВДокументах Тогда
				докОбъект.СтатусДокумента = СтатусДокументаРегистр;
				
				НоваяЗаписьИС = докОбъект.ИсторияСтатусов.Добавить();
				НоваяЗаписьИС.Дата            = ТекущаяДата();
				НоваяЗаписьИС.Пользователь    = Пользователи.ТекущийПользователь();
				НоваяЗаписьИС.ЗаКого          = Неопределено;
				НоваяЗаписьИС.СтатусДокумента = СтатусДокументаРегистр;
			КонецЕсли;
			
			докОбъект.СпособСогласования = СпособСогласованияДокумента;
			докОбъект.Записать(РежимЗаписиДокумента.Запись);
			
			Запись = РегистрыСведений.торо_ТекущиеСтатусыДокументов.СоздатьМенеджерЗаписи();
			Запись.Документ = докОбъект.Ссылка;
			Запись.СтатусДокумента = СтатусДокументаРегистр;
			Запись.Записать(Истина);
			
			НоваяЗаписьИС = РегистрыСведений.торо_ИсторияСтатусовДокументов.СоздатьМенеджерЗаписи();
			НоваяЗаписьИС.Период          = Дата;
			НоваяЗаписьИС.Документ			= докОбъект.Ссылка;
			НоваяЗаписьИС.Пользователь    = Пользователи.ТекущийПользователь();
			НоваяЗаписьИС.ЗаКого          = Неопределено;
			НоваяЗаписьИС.СтатусДокумента = СтатусДокументаРегистр;
			НоваяЗаписьИС.Записать(Истина);
			
		Иначе 
			докОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Исключение
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При записи документа произошла ошибка: '") + ОписаниеОшибки());
		возврат Неопределено;
	КонецПопытки;
	
	НовыйДок = докОбъект.Ссылка;
	Возврат докОбъект.Номер;	
	
КонецФункции

&НаСервере
Функция СогласнованиеИСпользуетсяДляДок_ВыявленныеДефекты()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВЫБОР
	               |		КОГДА НЕ торо_ВидыДокументовСогласования.ВидДокумента ЕСТЬ NULL 
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ИспользоватьСогласование
	               |ИЗ
	               |	РегистрСведений.торо_ВидыДокументовСогласования КАК торо_ВидыДокументовСогласования
	               |ГДЕ
	               |	торо_ВидыДокументовСогласования.ВидДокумента = &ВидДокумента";
				   
	Запрос.УстановитьПараметр("ВидДокумента", Перечисления.торо_ВидыДокументовСогласованияРемонтов.торо_ВыявленныеДефекты);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		возврат Ложь;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ФО_ИспользоватьСогласование = ПолучитьФункциональнуюОпцию("торо_ИспользоватьСогласование");
	ФОТоро_ИспользоватьТиорСогласованиеДокументов = ПолучитьФункциональнуюОпцию("торо_ИспользоватьТОиРСогласованиеДокументов");
	
	Возврат (ФО_ИспользоватьСогласование И ФОТоро_ИспользоватьТиорСогласованиеДокументов и Выборка.ИспользоватьСогласование);
	
КонецФункции

&НаКлиенте
Процедура ОчиститьПоля()
	
	НовыйДок = Неопределено;	
	
	Дата = ТекущаяДата();
	ДатаОбнаружениея = ТекущаяДата();
	
	Инициатор = Неопределено;
	КонтактноеЛицо = Неопределено;
	ПодразделениеИсполнитель = Неопределено;
	ОтказавшийЭлемент = Неопределено;
	ТиповойДефект = Неопределено;
	КритичностьДефекта = Неопределено;
	ВидДефекта = Неопределено;
	ПричинаДефекта = Неопределено;
	УсловияВыявленияДефекта = Неопределено;
	ОписаниеДефекта = "";
	
	Статус = "";
	Номер = "";
	
	ЗаполнитьРеквизитыШапкиПоУмолчанию();
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровКоманды_АктДефектации(ДокДефект)
	
	ДефектыОборудования = Новый Массив;
	
	Для каждого Стр Из ДокДефект.СписокДефектов Цикл
		СтруктураТЧ = Новый Структура("ID, ОбъектРемонта");
		ЗаполнитьЗначенияСвойств(СтруктураТЧ, Стр);
		ДефектыОборудования.Добавить(СтруктураТЧ);
	КонецЦикла;
	
	Возврат ДефектыОборудования;	
	
КонецФункции

&НаКлиенте
Процедура НастройкаИерархииЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ВыбранноеЗначение = РезультатЗакрытия;
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		ЭтаФорма.ТекСтруктураИерархии   = ВыбранноеЗначение.СтруктураИерархии;
		ЭтаФорма.РазрешенВводНовыхОР    = ВыбранноеЗначение.РазрешенВводНовыхОР;
		ЭтаФорма.ИзменяетсяДокументами  = ВыбранноеЗначение.ИзменяетсяДокументами;
		ЭтаФорма.СтроитсяАвтоматически  = ВыбранноеЗначение.СтроитсяАвтоматически;
		ЭтаФорма.ИерархическийСправочник= ВыбранноеЗначение.ИерархическийСправочник;
		ЭтаФорма.ИерархияРеквизитОР	    = ВыбранноеЗначение.РеквизитОР;
		ЭтаФорма.ИерархияТипРеквизитаОР = ВыбранноеЗначение.ТипРеквизитаОР;
		
		торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
		
		ЭтаФорма.Элементы.Дерево.Развернуть(ЭтаФорма.Дерево.ПолучитьЭлементы()[0].ПолучитьИдентификатор());
		
		Если ЭтаФорма.Элементы.Найти("ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр") <> Неопределено
			И НЕ ЭтаФорма.Элементы.ФормаСправочникторо_ОбъектыРемонтаИерархическийПросмотр.Пометка Тогда
			торо_РаботаСИерархиейКлиент.УстановитьОтборВСписке(ЭтаФорма,Неопределено, Истина);
		КонецЕсли;
		
		торо_РаботаСИерархиейКлиент.УстановитьДоступностьСозданияНовыхОР(ЭтаФорма);
		
		СтрокиДерева = ЭтаФорма.Дерево.ПолучитьЭлементы();
		Если СтрокиДерева.Количество() > 0 Тогда
			ЭтаФорма.Элементы.Дерево.ТекущаяСтрока = СтрокиДерева[0].ПолучитьИдентификатор();
		КонецЕсли;
		
		Если ТекСтруктураИерархииВСписке <> ТекСтруктураИерархии Тогда
			ТекСтруктураИерархииВСписке = ТекСтруктураИерархии;
			ПерезаполнитьСписокОбъектов();
			ВыполнитьПоискВСпискеОР(ЗначениеПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДерево

&НаКлиенте
Процедура ДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ПредопределенноеЗначение("Справочник.КлючевыеОперации.торо_ОткрытиеФормыОбъектовРемонта"));
	
	СтандартнаяОбработка = Ложь;
	Если Не Элементы.Дерево.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(Неопределено, Элементы.Дерево.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередНачаломИзменения(Элемент, Отказ)
	торо_РаботаСИерархиейКлиент.ПередНачаломИзменения(Отказ, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередУдалением(Элемент, Отказ)
	торо_РаботаСИерархиейКлиент.ПередУдалением(Отказ, ЭтаФорма, РазрешенВводНовыхОР);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	торо_РаботаСИерархиейКлиент.ОбработатьВыборОРДляДерева(ЭтаФорма,ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПередРазворачиванием(Элемент, Строка, Отказ)
		ТекДанные = Дерево.НайтиПоИдентификатору(Строка);
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Ссылка) И НЕ ТекДанные.СвязиОбновлялись Тогда
		
		Если НЕ СтроитсяАвтоматически ИЛИ (СтроитсяАвтоматически И ИерархическийСправочник) Тогда
			
			СтрокиДерева = ТекДанные.ПолучитьЭлементы();
			Если СтрокиДерева.Количество() > 0 Тогда
				СтруктураПараметровИерархии = Новый Структура(
				"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник",
				ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
				
				СтруктураПараметровФормы = Новый Структура(
				"ИмяФормы, СостояниеДереваОР, ОтборОбъектРемонта",
				ЭтаФорма.ИмяФормы, СостояниеДереваОР, Неопределено);
				
				МассивЭлементов = Новый Массив;
				Для Каждого СтрокаДерева Из СтрокиДерева Цикл
					МассивЭлементов.Добавить(СтрокаДерева.Ссылка);
				КонецЦикла;
				СтруктураДобавления = ПолучитьСтруктуруНовыхСтрок(ТекДанные.Ссылка, СтруктураПараметровИерархии,МассивЭлементов,СтруктураПараметровФормы);
			КонецЕсли;
			ТекДанные.СвязиОбновлялись = Истина;
			
			Для каждого СтрокаДерева Из СтрокиДерева Цикл
				Для каждого ТекЭлем Из СтруктураДобавления Цикл
					
					Если ТекЭлем.Родитель <> СтрокаДерева.Ссылка Тогда
						Продолжить;
					КонецЕсли;
					
					НС = СтрокаДерева.ПолучитьЭлементы().Добавить();
					
					Если СтроитсяАвтоматически И ТипЗнч(ТекЭлем.РеквизитДопУпорядочиванияОР) <> Тип("Число") Тогда
						НС.Ссылка = ТекЭлем.РеквизитДопУпорядочивания;
					Иначе
						НС.Ссылка = ТекЭлем.ОбъектИерархии;
						НС.РеквизитДопУпорядочивания = ТекЭлем.РеквизитДопУпорядочиванияОР;
						
					КонецЕсли;		
					
					НС.РодительИерархии = ТекЭлем.Родитель;
					НС.ПометкаУдаления  = ТекЭлем.ПометкаУдаления;
					НС.Картинка 		= ТекЭлем.ИндексКартинки;
					НС.Код 				= ТекЭлем.Код;
					НС.ИнвентарныйНомер = ТекЭлем.ИнвентарныйНомер;
					НС.ЗаводскойНомер 	= ТекЭлем.ЗаводскойНомер;
					НС.ТехНомер 		= ТекЭлем.ТехНомер;
					НС.ЕстьФайлы		= ТекЭлем.ЕстьФайлы;
					
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	торо_РаботаСИерархиейКлиент.ОбработкаПеретаскиванияВДереве(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле, ЭтаФорма,ИзменяетсяДокументами, ТекСтруктураИерархии);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыСписокОбъектов

&НаКлиенте
Процедура СписокОбъектовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, ПредопределенноеЗначение("Справочник.КлючевыеОперации.торо_ОткрытиеФормыОбъектовРемонта"));
	
	СтандартнаяОбработка = Ложь;
	Если Не Элементы.СписокОбъектов.ТекущиеДанные = Неопределено Тогда
		ПоказатьЗначение(Неопределено, Элементы.СписокОбъектов.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбъектовПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		стрВозврата = ЗаполнитьДанныеОРНаСервере(ТекущиеДанные.Ссылка);
		ТекущийОР = ТекущиеДанные.Ссылка;
		
		СоответствиеРодителей = торо_РаботаСИерархией.ПолучитьТекущихРодителейВИерархии(ТекущийОР, ТекСтруктураИерархии);
		ВходитВСостав = СоответствиеРодителей[ТекущийОР];
		
		Подразделение = стрВозврата.Подразделение;
		Наименование = стрВозврата.Наименование;
		Местонахождение = стрВозврата.АдресМестонахождения;
		ИнвентарныйНомер = стрВозврата.ИнвентарныйНомер;
		ЗаводскойНомер = стрВозврата.ЗаводскойНомер;
		ТехнологичейскийНомер = стрВозврата.ТехНомер;
		ПодразделениеИсполнитель = стрВозврата.ПодразделениеИсполнитель;
		
		МассивПодчиненных = Новый Массив;
		торо_РаботаСИерархией.ПолучитьМассивПодчиненныхНаСервере(ТекущийОР,МассивПодчиненных,ТекСтруктураИерархии, ИзменяетсяДокументами);
		Если МассивПодчиненных.Количество() = 0 Тогда
			ОтказавшийЭлемент = Элементы.Дерево.ТекущиеДанные.Ссылка;
		Иначе
			ОтказавшийЭлемент = Неопределено;
		КонецЕсли;
		
		Дата = ТекущаяДата();
		ДатаОбнаружениея = ТекущаяДата();
		
		КонтактноеЛицо = Неопределено;
		ТиповойДефект = Неопределено;
		КритичностьДефекта = Неопределено;
		ОписаниеДефекта = Неопределено;
		ВидДефекта = Неопределено;
		ПричинаДефекта = Неопределено;
		УсловияВыявленияДефекта = Неопределено;
		
		Статус = "";
		Номер = "";
		НовыйДок = Неопределено;
	Иначе 
		Статус = "";
		Номер = "";
		НовыйДок = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	торо_РаботаСИерархиейКлиент.ЗаполнитьДеревоНаКлиенте(ЭтаФорма,"Дерево","Дерево");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	ВыделенныйОбъект = Неопределено;
	ТекущиеДанные = Элементы.СписокОбъектов.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ВыделенныйОбъект = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПерезаполнитьСписокОбъектов(ВыделенныйОбъект);
	ВыполнитьПоискВСпискеОР(ЗначениеПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПоложениеВИерархии(Команда)
	торо_РаботаСИерархиейКлиент.ИзменитьПоложениеВИерархии(ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьДанныеОРНаСервере(Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ОбъектыРемонта.ИнвентарныйНомер,
	               |	торо_ОбъектыРемонта.ЗаводскойНомер,
	               |	торо_ОбъектыРемонта.ТехНомер,
	               |	торо_ОбъектыРемонта.АдресМестонахождения,
	               |	торо_ОбъектыРемонта.Наименование,
	               |	торо_ОбъектыРемонта.Подразделение,
	               |	торо_ОбъектыРемонта.ПодразделениеИсполнитель,
	               |	торо_ОбъектыРемонта.Направление
	               |ИЗ
	               |	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	               |ГДЕ
	               |	торо_ОбъектыРемонта.Ссылка = &Ссылка";
				   
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	стрВозврата = Новый Структура("ИнвентарныйНомер,ЗаводскойНомер,ТехНомер,АдресМестонахождения,Наименование,Подразделение,ПодразделениеИсполнитель,Направление");
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат стрВозврата;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(стрВозврата, Выборка);
	возврат стрВозврата;
	
КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьДефект(Команда)
	
	Если ПроверитьЗаполнениеОбязательныхРеквизитов() Тогда
		Возврат;
	КонецЕсли;
	
	Результат = СоздатьДокументВыявленныйДефект();
	Если ЗначениеЗаполнено(Результат) тогда
		Номер = Результат;
		Статус = "Зарегистрирован";
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОбработку(Команда)
	
	ОчиститьПоля();
		
КонецПроцедуры

&НаКлиенте
Процедура ДефектнаяВедомость(Команда)
	Если ЗначениеЗаполнено(НовыйДок) Тогда
		МассивПараметровКоманды = Новый Массив;
		МассивПараметровКоманды.Добавить(НовыйДок);
		
		торо_Печать.НапечататьДокумент("Документ.торо_ВыявленныеДефекты",
		"ДефектнаяВедомость",
		МассивПараметровКоманды);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыявленныеДефекты(Команда)
	ОткрытьФорму("Документ.торо_ВыявленныеДефекты.ФормаСписка");
КонецПроцедуры

&НаКлиенте
Процедура отчВыявленныеДефекты(Команда)
	ОткрытьФорму("Отчет.торо_ВыявленныеДефекты.Форма");
КонецПроцедуры

&НаКлиенте
Процедура ЖурналДефектов(Команда)
	ПараметрыОтбора = Новый Структура();
	ПараметрыОтбора.Вставить("НачПериода", НачалоГода(Дата));
	ПараметрыОтбора.Вставить("КонПериода", КонецГода(Дата));
	ПараметрыОтбора.Вставить("ПодразделениеДляДок", ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка"));
	ПараметрыОтбора.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	ПараметрыОтбора.Вставить("ОР", ТекущийОР);
	
	допПараметры = Новый Структура();
	допПараметры.Вставить("ПараметрыОтбора", ПараметрыОтбора);

	ОткрытьФорму("Документ.торо_ВыявленныеДефекты.Форма.ФормаЖурналаДефектов", допПараметры);
КонецПроцедуры

&НаКлиенте
Процедура АктДефектации(Команда)
	
	Если не ЗначениеЗаполнено(НовыйДок) Тогда
		возврат;
	КонецЕсли;
	
	ДефектыОборудования = ПолучитьСтруктуруПараметровКоманды_АктДефектации(НовыйДок);
	
	Если ДефектыОборудования.Количество() = 1 Тогда
		СтруктураПараметровКоманды = Новый Структура("Док, ID", НовыйДок, ДефектыОборудования[0].ID);
		МассивПараметровКоманды = Новый Массив();
		МассивПараметровКоманды.Добавить(НовыйДок);
		
		торо_Печать.НапечататьДокумент("Документ.торо_ВыявленныеДефекты",
		"АктДефектации",
		МассивПараметровКоманды, СтруктураПараметровКоманды);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДефектнаяВедомостьЛиквидацияОР(Команда)
	Если не ЗначениеЗаполнено(НовыйДок) Тогда
		Возврат;
	КонецЕсли;
	
	МассивПараметровКоманды = Новый Массив;
	МассивПараметровКоманды.Добавить(НовыйДок);
	
	торо_Печать.НапечататьДокумент("Документ.торо_ВыявленныеДефекты",
	"ДефектнаяВедомостьЛиквидация",
	МассивПараметровКоманды);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИерархииДляСписка(Команда)
	
	ПараметрыОткрытия = Новый Структура("СписокИерархийОР,ТекСтруктураИерархии",торо_РаботаСИерархией.ПолучитьСписокИерархий(),ЭтаФорма.ТекСтруктураИерархии);
	ОткрытьФорму("Справочник.торо_ОбъектыРемонта.Форма.ФормаНастройкиВидаИерархии",ПараметрыОткрытия,ЭтаФорма,,,,
				Новый ОписаниеОповещения("НастройкаИерархииЗавершение",ЭтотОбъект),РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаКлиенте
Процедура ЗначениеПоискаПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(ЗначениеПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание > 0 Тогда
		ВыполнитьПоискВСпискеОР(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаОчистка(Элемент, СтандартнаяОбработка)
	ОтменитьПоискВПискеОР();	
КонецПроцедуры

&НаКлиенте
Процедура ТипПоискаПриИзменении(Элемент)
	ВыполнитьПоискВСпискеОР(ЗначениеПоиска);
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеПоискаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЗначениеПоиска = Текст;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПоискВСпискеОР(Текст)
	
	Если СтрДлина(Текст) = 0 Тогда
		ОтменитьПоискВПискеОР();
		Возврат;
	КонецЕсли;
	
	Если ТекСтруктураИерархииВСписке <> ТекСтруктураИерархии Тогда
		ТекСтруктураИерархииВСписке = ТекСтруктураИерархии;
		ПерезаполнитьСписокОбъектов();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипПоиска) Тогда
		СтруктураОтбора = Новый ФиксированнаяСтруктура(ТипПоиска, Текст);
		Элементы.СписокОбъектов.ОтборСтрок = СтруктураОтбора;
	КонецЕсли;
	
	Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаТаблицаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПоискВПискеОР()
	
	Элементы.СписокОбъектов.ОтборСтрок = Неопределено;
	Элементы.СтраницыГруппаЛевая.ТекущаяСтраница = Элементы.ГруппаДерево;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьСписокОбъектов(ВыделенныйОбъект = Неопределено)
			
	СписокОбъектов.Очистить();
	
	СтруктураПараметровИерархии = Новый Структура(
		"СтруктураИерархии,ИзменяетсяДокументами,СтроитсяАвтоматически,РеквизитОР,ТипРеквизитаОР,ИерархическийСправочник",
		ТекСтруктураИерархии, ИзменяетсяДокументами, СтроитсяАвтоматически, ИерархияРеквизитОР, ИерархияТипРеквизитаОР,ИерархическийСправочник);
	
	СтруктураПараметровФормы = Новый Структура(
		"ИмяФормы,Перезаполнить,ИерархическийПросмотр,СписокСтатусов",
		ИмяФормы,Истина,Ложь,Неопределено);
		
	МассивОбъектов = торо_РаботаСИерархией.ПолучитьСписокПодчиненныхОбъектов(СтруктураПараметровИерархии,,СтруктураПараметровФормы);
	
	ВыделитьСтроку = Неопределено;
	Для Каждого СтрокаОР Из МассивОбъектов Цикл
		НС = СписокОбъектов.Добавить();
		ЗаполнитьЗначенияСвойств(НС,СтрокаОР);
		НС.Наименование = Строка(СтрокаОР.ОбъектИерархии);
		НС.Ссылка = СтрокаОР.ОбъектИерархии;
		НС.СсылкаОР = СтрокаОР.ОбъектИерархии;
		Если НС.Свойство("ЭтоГруппа") Тогда
			НС.ЭтоГруппа = НС.Картинка = 5 Или НС.Картинка = 6;
		КонецЕсли;
		Если НС.Ссылка = ВыделенныйОбъект Тогда
			ВыделитьСтроку = НС;
		КонецЕсли;
	КонецЦикла;
	
	Если ВыделитьСтроку <> Неопределено Тогда
		Элементы.СписокОбъектов.ТекущаяСтрока = ВыделитьСтроку.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтказавшийЭлементОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		струк = ЗаполнитьДанныеОРНаСервере(ВыбранноеЗначение);
		Направление = струк.Направление;
	Иначе
		Направление = ПредопределенноеЗначение("Справочник.торо_НаправленияОбъектовРемонтныхРабот.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти