
#Область СлужебныеПроцедурыИФункции

Функция ВерсияОбмена()
	
	Возврат 209;
	
КонецФункции

Функция ПроверитьДобавитьРегистрациюУстройства(ИДУстройства)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СозданНовый = Ложь;
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Если НЕ ЗначениеЗаполнено(Узел) Тогда
		НовыйУзел = ПланыОбмена.mobile.СоздатьУзел();
		НовыйУзел.Наименование = ИДУстройства;
		НовыйУзел.ИДМобильногоУстройства = ИДУстройства;
		НовыйУзел.УстановитьНовыйКод();
		НовыйУзел.Записать();
		СозданНовый = Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат СозданНовый;
	
КонецФункции

Функция ПолучитьУзелПланаОбмена(ИДУстройства)
	
	//Узел = ПланыОбмена.mobile.НайтиПоКоду("1");
	Узел = ПланыОбмена.mobile.НайтиПоРеквизиту("ИДМобильногоУстройства", ИДУстройства);
	Возврат Узел;
	
КонецФункции

Функция ПолучитьОР(Всё, ИДУстройства)
	
	Если Всё Тогда
		Возврат ПолучитьВсеОР();
	КонецЕсли;
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокОР");
	ТипОР = ФабрикаXDTO.Тип("android", "ОР");
	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
	Выборка = ПланыОбмена.ВыбратьИзменения(Узел,1, Метаданные.Справочники.торо_ОбъектыРемонта);

	Пока Выборка.Следующий() Цикл
		ТекущийОР = Выборка.Получить();
		Если ТекущийОР = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекущийОР) = Тип("УдалениеОбъекта") Тогда
			// Удаление объекта не передаем в основную ИБ.
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОР);
			Продолжить;
		КонецЕсли;

		ОР = ФабрикаXDTO.Создать(ТипОР);		
		ОР.Код = ТекущийОР.Код;
		ОР.Наименование =ТекущийОР.Наименование;
		ОР.РодительКод = ?(ЗначениеЗаполнено(ТекущийОР.Родитель),ТекущийОР.Родитель.Код,0);
		ОР.Организация    = ?(ЗначениеЗаполнено(ТекущийОР.Организация),ТекущийОР.Организация.Код,0);
		ОР.ЭтоГруппа = ТекущийОР.ЭтоГруппа;
		ОР.ПометкаУдаления = ТекущийОР.ПометкаУдаления;
		Если НЕ ТекущийОР.ЭтоГруппа Тогда
			ОР.ДатаВыпуска = ТекущийОР.ДатаВыпуска;
			ОР.РемонтнаяГруппа =?(ЗначениеЗаполнено(ТекущийОР.ТиповойОР),ТекущийОР.ТиповойОР.Код,0);
			ОР.ИнвентарныйНомер = ТекущийОР.ИнвентарныйНомер;
			ОР.Комментарий    = ТекущийОР.Комментарий;
			ОР.Контрагент   = Строка(ТекущийОР.Контрагент);
			ОР.Подразделение    =?(ЗначениеЗаполнено(ТекущийОР.Подразделение),ТекущийОР.Подразделение.Код,0);
			ОР.ШтрихКод = ТекущийОР.ШтрихКод;
			ОР.ДатаВводаВЭксплуатацию = ТекущийОР.ДатаВводаВЭксплуатацию ;
			ОР.НомерПаспорта    = ТекущийОР.НомерПаспорта ;
			ОР.Направление    = ?(ЗначениеЗаполнено(ТекущийОР.Направление),ТекущийОР.Направление.Код,0);
			ОР.ЗаводскойНомер = ТекущийОР.ЗаводскойНомер;
			ОР.ТехНомер = ТекущийОР.ТехНомер;
		КонецЕсли;
		Список.ОР.Добавить(ОР);
		
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОР);
	КонецЦикла;
	
	//ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Метаданные.Справочники.торо_ОбъектыРемонта);
	
	Если Список.ОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВсеОР()
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокОР");
	ТипОР = ФабрикаXDTO.Тип("android", "ОР");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	торо_ОбъектыРемонта.Код,
		|	торо_ОбъектыРемонта.Ссылка,
		|	торо_ОбъектыРемонта.Наименование,
		|	торо_ОбъектыРемонта.Родитель,
		|	торо_ОбъектыРемонта.ДатаВыпуска,
		|	торо_ОбъектыРемонта.ИнвентарныйНомер,
		|	торо_ОбъектыРемонта.Комментарий,
		|	торо_ОбъектыРемонта.Контрагент,
		|	торо_ОбъектыРемонта.Организация,
		|	торо_ОбъектыРемонта.Подразделение КАК Подразделение,
		|	торо_ОбъектыРемонта.ТиповойОР КАК ТиповойОР,
		|	торо_ОбъектыРемонта.ШтрихКод,
		|	торо_ОбъектыРемонта.ДатаВводаВЭксплуатацию,
		|	торо_ОбъектыРемонта.НомерПаспорта,
		|	торо_ОбъектыРемонта.ЭтоГруппа КАК ЭтоГруппа,
		|	торо_ОбъектыРемонта.Направление,
		|	торо_ОбъектыРемонта.ЗаводскойНомер,
		|	торо_ОбъектыРемонта.ТехНомер,
		|	торо_ОбъектыРемонта.ПометкаУдаления
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|
		|УПОРЯДОЧИТЬ ПО
		|	торо_ОбъектыРемонта.ЭтоГруппа ИЕРАРХИЯ,
		|	торо_ОбъектыРемонта.Наименование";

	Результат = Запрос.Выполнить();

	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ОР = ФабрикаXDTO.Создать(ТипОР);		
		ОР.Код = Выборка.Код;
		ОР.Наименование =Выборка.Наименование;
		ОР.РодительКод = ?(ЗначениеЗаполнено(Выборка.Родитель),Выборка.Родитель.Код,0);
		ОР.Организация    = ?(ЗначениеЗаполнено(Выборка.Организация),Выборка.Организация.Код,0);
		ОР.ЭтоГруппа = Выборка.ЭтоГруппа;
		ОР.ПометкаУдаления = Выборка.ПометкаУдаления;
		Если НЕ Выборка.ЭтоГруппа Тогда
			ОР.ДатаВыпуска = Выборка.ДатаВыпуска;
			ОР.РемонтнаяГруппа = ?(ЗначениеЗаполнено(Выборка.ТиповойОР),Выборка.ТиповойОР.Код,0);
			ОР.ИнвентарныйНомер = Выборка.ИнвентарныйНомер;
			ОР.Комментарий    = Выборка.Комментарий;
			ОР.Контрагент   = Строка(Выборка.Контрагент);
			ОР.Подразделение    =?(ЗначениеЗаполнено(Выборка.Подразделение),Выборка.Подразделение.Код,0);
			ОР.ШтрихКод = Выборка.ШтрихКод;
			ОР.ДатаВводаВЭксплуатацию = Выборка.ДатаВводаВЭксплуатацию;
			ОР.НомерПаспорта    = Выборка.НомерПаспорта;
			ОР.Направление    = ?(ЗначениеЗаполнено(Выборка.Направление),Выборка.Направление.Код,0);
			ОР.ЗаводскойНомер = Выборка.ЗаводскойНомер;
			ОР.ТехНомер = Выборка.ТехНомер;
		КонецЕсли;
		Список.ОР.Добавить(ОР);		
	КонецЦикла;
	
	Если Список.ОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОрганизации(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокОрганизаций");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Организации");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.Организации, ТипФабрики, "Организации");
	
	Если Список.Организации.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьВидыДефектов(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокВидовДефектов");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ВидыДефектов");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.ВидыДефектов, ТипФабрики, "торо_ВидыДефектов",, Истина);
		
	Если Список.ВидыДефектов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЕдиницыИзмерения(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокЕдиницИзмерения");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ЕдиницыИзмерения");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.ЕдиницыИзмерения, ТипФабрики, "ЕдиницыИзмерения");
	
	Если Список.ЕдиницыИзмерения.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;

КонецФункции

Функция ПолучитьИзмеряемыеПоказатели(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокИзмеряемыхПоказателей");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ИзмеряемыеПоказателиОбъектовРемонта");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.ИзмеряемыеПоказателиОбъектовРемонта, ТипФабрики, "торо_ИзмеряемыеПоказателиОбъектовРемонта");
	
	Если Список.ИзмеряемыеПоказателиОбъектовРемонта.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНоменклатуру(Всё, ИДУстройства)
		
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокНоменклатуры");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Номенклатура");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.Номенклатура, ТипФабрики, "Номенклатура", Истина);
		
	Если Список.Номенклатура.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПричиныДефектов(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПричинДефектов");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ПричиныДефектов");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.ПричиныДефектов, ТипФабрики, "торо_ПричиныДефектов");
		
	Если Список.ПричиныДефектов.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПричиныПростоев(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПричинПростоев");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ПричиныПростояОборудования");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.ПричиныПростояОборудования, ТипФабрики, "торо_ПричиныПростояОборудования",,Истина);
	
	Если Список.ПричиныПростояОборудования.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРемонтныеГруппы(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокРемонтныхГрупп");
	ТипФабрики = ФабрикаXDTO.Тип("android", "РемонтныеГруппы");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.РемонтныеГруппы, ТипФабрики, "торо_ТиповыеОР",,Истина);
		
	Если Список.РемонтныеГруппы.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьПараметрыВыработки(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПараметровВыработкиОС");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ПараметрыВыработкиОС");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.ПараметрыВыработкиОС, ТипФабрики, "ПараметрыВыработкиОС");
				
	Если Список.ПараметрыВыработкиОС.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТиповыеДефекты(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокТиповыхДефектовОборудования");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ТиповыеДефектыОборудования");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.ТиповыеДефектыОборудования, ТипФабрики, "торо_ТиповыеДефектыОборудования",,Истина);
	
	Если Список.ТиповыеДефектыОборудования.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьКритичностиДефектов(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокКритичностейДефекта");
	ТипФабрики = ФабрикаXDTO.Тип("android", "КритичностиДефекта");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.КритичностиДефекта, ТипФабрики, "торо_КритичностьДефекта");
		
	Если Список.КритичностиДефекта.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУсловияВыявления(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокУсловийВыявленияДефекта");
	ТипФабрики = ФабрикаXDTO.Тип("android", "УсловияВыявленияДефекта");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.УсловияВыявленияДефекта, ТипФабрики, "торо_УсловияВыявленияДефекта");
			
	Если Список.УсловияВыявленияДефекта.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьПодразделения(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокПодразделений");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Подразделения");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.Подразделения, ТипФабрики, "СтруктураПредприятия",,Истина);
	
	Если Список.Подразделения.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьВидыЭксплуатации(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокВидовЭксплуатации");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ВидыЭксплуатации");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.ВидыЭксплуатации, ТипФабрики, "торо_ВидыЭксплуатации");
	
	Если Список.ВидыЭксплуатации.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНаправления(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокНаправления");
	ТипФабрики = ФабрикаXDTO.Тип("android", "Направления");	
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, Список.Направления, ТипФабрики, "торо_НаправленияОбъектовРемонтныхРабот");
		
	Если Список.Направления.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНаработкуОР(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "СписокНаработкаОР");
	ТипФабрики = ФабрикаXDTO.Тип("android", "НаработкаОР");	
	Список = ФабрикаXDTO.Создать(ТипСписок);	
	
	Выборка = ПолучитьАктуальнуюНаработкуДляОР();
		
	Пока Выборка.Следующий() Цикл
		ТекущийОбъект = Выборка;	
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
		ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта),ТекущийОбъект.ОбъектРемонта.Код, 0);
		ДобавляемыйОбъект.Показатель = ?(ЗначениеЗаполнено(ТекущийОбъект.Показатель),ТекущийОбъект.Показатель.Код, 0);
		ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект,ТекущийОбъект,"ДатаКон, Наработка");
		Список.НаработкаОР.Добавить(ДобавляемыйОбъект);			
	КонецЦикла;
		
	Если Список.НаработкаОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрыНаработкиОР_рс(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокПараметрыНаработки");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_ПараметрыНаработки");	
	Список = ФабрикаXDTO.Создать(ТипСписок);	
	
	Если Всё Тогда
		Выборка = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних();
		Если Выборка = Неопределено Тогда
			Возврат Неопределено;	
		КонецЕсли;
		Для каждого ТекущийОбъект из Выборка Цикл
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
			ДобавляемыйОбъект.ТиповойОбъект = ?(ТипЗнч(ТекущийОбъект.ОбъектРемонта) = Тип("СправочникСсылка.торо_ТиповыеОР") ,Истина, Ложь);
		
			ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта),ТекущийОбъект.ОбъектРемонта.Код, 0);
			ДобавляемыйОбъект.Показатель = ?(ЗначениеЗаполнено(ТекущийОбъект.Показатель),ТекущийОбъект.Показатель.Код, 0);
			ДобавляемыйОбъект.ПериодПлановойНаработки = Строка(ТекущийОбъект.ПериодПлановойНаработки);
			ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект,ТекущийОбъект,"Период, ПлановаяНаработка, ПродолжительностьПериодаПлановойНаработки,КоэффициентИспользованияОборудования");
			Список.рс_ПараметрыНаработки.Добавить(ДобавляемыйОбъект);							
		КонецЦикла;
		
	Иначе
		Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта);
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = Выборка.Получить();	
			
			Если ТипЗнч(НаборЗаписей) = Тип("УдалениеОбъекта") Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.торо_ПараметрыНаработкиОбъектовРемонта") Тогда
				Для каждого ТекущийОбъект из НаборЗаписей Цикл
					ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
					ДобавляемыйОбъект.ТиповойОбъект = ?(ТипЗнч(ТекущийОбъект.ОбъектРемонта) = Тип("СправочникСсылка.торо_ТиповыеОР") ,Истина, Ложь);
					
					ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта),ТекущийОбъект.ОбъектРемонта.Код, 0);
					ДобавляемыйОбъект.Показатель = ?(ЗначениеЗаполнено(ТекущийОбъект.Показатель),ТекущийОбъект.Показатель.Код, 0);
					ДобавляемыйОбъект.ПериодПлановойНаработки = Строка(ТекущийОбъект.ПериодПлановойНаработки);
					ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект,ТекущийОбъект,"Период, ПлановаяНаработка, ПродолжительностьПериодаПлановойНаработки,КоэффициентИспользованияОборудования");
					Список.рс_ПараметрыНаработки.Добавить(ДобавляемыйОбъект);
				КонецЦикла;
				
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
			КонецЕсли;
			
		КонецЦикла;	
		
		//ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Метаданные.РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта);
	КонецЕсли;	
	
	Если Список.рс_ПараметрыНаработки.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекущееСостояниеОР_рс(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокТекущееСостоянияОР");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_ТекущееСостоянияОР");	
	Список = ФабрикаXDTO.Создать(ТипСписок);	
	
	Если Всё Тогда
		Выборка = РегистрыСведений.торо_ТекущееСостояниеОР.СрезПоследних();
		Если Выборка = Неопределено Тогда
			Возврат Неопределено;	
		КонецЕсли;
		Для каждого ТекущийОбъект из Выборка Цикл
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
			ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта),ТекущийОбъект.ОбъектРемонта.Код, 0);
			ДобавляемыйОбъект.ВидЭксплуатации = ?(ЗначениеЗаполнено(ТекущийОбъект.ВидЭксплуатации),ТекущийОбъект.ВидЭксплуатации.Код, 0);
			ДобавляемыйОбъект.Примечание = ТекущийОбъект.Примечание;
			ДобавляемыйОбъект.Период = ТекущийОбъект.Период;
			Список.рс_ТекущееСостоянияОР.Добавить(ДобавляемыйОбъект);							
		КонецЦикла;		
	Иначе
		Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_ТекущееСостояниеОР);
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = Выборка.Получить();	
			
			Если ТипЗнч(НаборЗаписей) = Тип("УдалениеОбъекта") Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.торо_ТекущееСостояниеОР") Тогда
				Для каждого ТекущийОбъект из НаборЗаписей Цикл
					ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
					ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта),ТекущийОбъект.ОбъектРемонта.Код, 0);
					ДобавляемыйОбъект.ВидЭксплуатации = ?(ЗначениеЗаполнено(ТекущийОбъект.ВидЭксплуатации),ТекущийОбъект.ВидЭксплуатации.Код, 0);
					ДобавляемыйОбъект.Примечание = ТекущийОбъект.Примечание;
					ДобавляемыйОбъект.Период = ТекущийОбъект.Период;
					Список.рс_ТекущееСостоянияОР.Добавить(ДобавляемыйОбъект);
				КонецЦикла;
				
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
			КонецЕсли;
		КонецЦикла;
		
		//ПланыОбмена.УдалитьРегистрациюИзменений(Узел,Метаданные.РегистрыСведений.торо_ТекущееСостояниеОР);
	КонецЕсли;
	
	Если Список.рс_ТекущееСостоянияОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;		
	
КонецФункции

Функция ПолучитьИзмеряемыеПоказателиОР_рс(Всё, ИДУстройства)
	
	ТипСписок = ФабрикаXDTO.Тип("android", "рс_СписокИзмеряемыеПоказателиОР");
	ТипФабрики = ФабрикаXDTO.Тип("android", "рс_ИзмеряемыеПоказателиОР");	
	Список = ФабрикаXDTO.Создать(ТипСписок);	
	
	Если Всё Тогда
		Выборка = РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта.Выбрать();
		Если Выборка = Неопределено Тогда
			Возврат Неопределено;	
		КонецЕсли;
		Пока Выборка.Следующий() Цикл
			ТекущийОбъект = Выборка;				
			ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
			
			ДобавляемыйОбъект.ТиповойОбъект = ?(ТипЗнч(ТекущийОбъект.ОбъектРемонта) = Тип("СправочникСсылка.торо_ТиповыеОР") ,Истина, Ложь);
			
			ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта),ТекущийОбъект.ОбъектРемонта.Код, 0);
			ДобавляемыйОбъект.Показатель = ?(ЗначениеЗаполнено(ТекущийОбъект.Показатель),ТекущийОбъект.Показатель.Код, 0);
			ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект,ТекущийОбъект,"Период,ДопустимыйМинимум, ДопустимыйМаксимум,КритическийМинимум, КритическийМаксимум");
			Список.рс_ИзмеряемыеПоказателиОР.Добавить(ДобавляемыйОбъект);							
		КонецЦикла;
	Иначе
		Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
		Выборка = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта);
	
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = Выборка.Получить();
			
			Если ТипЗнч(НаборЗаписей) = Тип("УдалениеОбъекта") Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.торо_ИзмеряемыеПоказателиОбъектовРемонта") Тогда
				Для каждого ТекущийОбъект из НаборЗаписей Цикл
					ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики); 
					
					ДобавляемыйОбъект.ТиповойОбъект = ?(ТипЗнч(ТекущийОбъект.ОбъектРемонта) = Тип("СправочникСсылка.торо_ТиповыеОР") ,Истина, Ложь);
					ДобавляемыйОбъект.ОбъектРемонта = ?(ЗначениеЗаполнено(ТекущийОбъект.ОбъектРемонта),ТекущийОбъект.ОбъектРемонта.Код, 0);
					ДобавляемыйОбъект.Показатель = ?(ЗначениеЗаполнено(ТекущийОбъект.Показатель),ТекущийОбъект.Показатель.Код, 0);
					ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект,ТекущийОбъект,"Период,ДопустимыйМинимум, ДопустимыйМаксимум,КритическийМинимум, КритическийМаксимум");
					Список.рс_ИзмеряемыеПоказателиОР.Добавить(ДобавляемыйОбъект);	
				КонецЦикла;
				
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
			КонецЕсли;
		КонецЦикла;	
		
		//ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.РегистрыСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта);
	КонецЕсли;
	
	Если Список.рс_ИзмеряемыеПоказателиОР.Количество() = 0 Тогда
		Возврат Неопределено;
	Иначе
		Возврат Список;
	КонецЕсли;	
	
КонецФункции


Функция ПолучитьСтруктуруИерархии(ИмяПользователя)
	
	ТипСтруктура = ФабрикаXDTO.Тип("android", "СтруктураИерархии");
	СтруктураИерархии = ФабрикаXDTO.Создать(ТипСтруктура);
	
	ИерархияДляМобильногоПриложения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиТОиР",
		"ИерархияДляМобильногоПриложения",
		Справочники.торо_СтруктурыОР.ПустаяСсылка(),,
		ИмяПользователя);
		
	Если ЗначениеЗаполнено(ИерархияДляМобильногоПриложения) Тогда
		СтруктураИерархии.Ссылка = Строка(ИерархияДляМобильногоПриложения.УникальныйИдентификатор());
		СтруктураИерархии.Наименование = ИерархияДляМобильногоПриложения.Наименование;
	Иначе
		СтруктураИерархии.Ссылка = "";
		СтруктураИерархии.Наименование = "";
	КонецЕсли;	
	
	Возврат СтруктураИерархии;	
		
КонецФункции

Функция ПолучитьИерархиюОР(Всё, ИДУстройства, ИДСтруктуры)
	
	СтруктураИерархии = Справочники.торо_СтруктурыОР.ПолучитьСсылку(Новый УникальныйИдентификатор(ИДСтруктуры));
	Если НЕ ЗначениеЗаполнено(СтруктураИерархии) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИзменяетсяДокументами = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураИерархии, "ИзменяетсяДокументами");
	
	ТипСписок = ФабрикаXDTO.Тип("android", "ИерархияОРСписок");
	ТипФабрики = ФабрикаXDTO.Тип("android", "ЭлементИерархииОР");
	ТипОР = ФабрикаXDTO.Тип("android", "ОР");
	Список = ФабрикаXDTO.Создать(ТипСписок);
	
	Если Всё Тогда
		
		Выборка = ПолучитьВыборкуДанныхИерархииИзРегистра(СтруктураИерархии, ИзменяетсяДокументами);
		
	Иначе
		
		Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
		
		Если ИзменяетсяДокументами = Истина Тогда
			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_РасположениеОРВСтруктуреИерархии);
			// данные второго регистра не нужны, очищаем сразу
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.РегистрыСведений.торо_ИерархическиеСтруктурыОР);
		Иначе
			ВыборкаИзменений = ПланыОбмена.ВыбратьИзменения(Узел,1,Метаданные.РегистрыСведений.торо_ИерархическиеСтруктурыОР);
			// данные второго регистра не нужны, очищаем сразу
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, Метаданные.РегистрыСведений.торо_РасположениеОРВСтруктуреИерархии);
		КонецЕсли;
		
		СписокОРДляОбновления = Новый Массив;
		
		Пока ВыборкаИзменений.Следующий() Цикл
			НаборЗаписей = ВыборкаИзменений.Получить();
			
			Если ТипЗнч(НаборЗаписей) = Тип("УдалениеОбъекта") Тогда
				СписокОРДляОбновления.Добавить(НаборЗаписей.Ссылка);
			ИначеЕсли ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.торо_ИерархическиеСтруктурыОР") 
				ИЛИ ТипЗнч(НаборЗаписей) = Тип("РегистрСведенийНаборЗаписей.торо_РасположениеОРВСтруктуреИерархии") Тогда
				Для каждого Запись из НаборЗаписей Цикл
					СписокОРДляОбновления.Добавить(Запись.ОбъектИерархии);
				КонецЦикла;
			КонецЕсли;
			
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, НаборЗаписей);
		КонецЦикла;	

		Выборка = ПолучитьВыборкуДанныхИерархииИзРегистра(СтруктураИерархии, ИзменяетсяДокументами, СписокОРДляОбновления);
		
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
		
		ОбъектРемонта = ФабрикаXDTO.Создать(ТипОР);
		ОбъектРемонта.Код = Выборка.ОбъектРемонтаКод;
		ОбъектРемонта.Наименование = Выборка.ОбъектРемонтаНаименование;
		ОбъектРемонта.ЭтоГруппа = Выборка.ОбъектРемонтаЭтоГруппа;
		ДобавляемыйОбъект.ОбъектРемонта = ОбъектРемонта;
		
		Если Выборка.НеВИерархии = Истина Тогда
			ДобавляемыйОбъект.Родитель = Неопределено;
		Иначе
			Родитель = ФабрикаXDTO.Создать(ТипОР);
			Если ЗначениеЗаполнено(Выборка.Родитель) Тогда
				Родитель.Код = Выборка.РодительКод;
				Родитель.Наименование = Выборка.РодительНаименование;
				Родитель.ЭтоГруппа = Выборка.РодительЭтоГруппа;
			Иначе
				Родитель.Код = "";
				Родитель.Наименование = "";
				Родитель.ЭтоГруппа = Ложь;
			КонецЕсли;
			ДобавляемыйОбъект.Родитель = Родитель;
		КонецЕсли;
		
		Список.ИерархияОР.Добавить(ДобавляемыйОбъект);							
	КонецЦикла;
	
	Возврат Список;
	
КонецФункции



Функция ПередатьДефект(ВыявленныйДефект)

	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();

	ТаблицаДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка().СписокДефектов.Выгрузить();
	Для каждого Дефект ИЗ ВыявленныйДефект.ТЧВыявленныйДефект Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ID = Дефект.ID;
		НоваяСтрока.ВидДефекта = Справочники.торо_ВидыДефектов.НайтиПоКоду(Дефект.ВидДефекта);
		НоваяСтрока.ДефектВыявленВПроцессе = Справочники.торо_УсловияВыявленияДефекта.НайтиПоКоду(Дефект.ДефектВыявленВПроцессе);
		НоваяСтрока.ТиповойДефект = Справочники.торо_ТиповыеДефектыОборудования.НайтиПоКоду(Дефект.ТиповойДефект );
		НоваяСтрока.ДефектОписание = Дефект.ДефектОписание;
		НоваяСтрока.ДефектПричина = Справочники.торо_ПричиныДефектов.НайтиПоКоду(Дефект.ДефектПричина);
		НоваяСтрока.НаправлениеНаУстранение = Дефект.НаправлениеНаУстранение;
		НоваяСтрока.ОбъектРемонта = НайтиОРпоКоду(Дефект.ОбъектРемонта);
		НоваяСтрока.ОтказавшийЭлемент = НайтиОРпоКоду(Дефект.ОтказавшийЭлемент);
		НоваяСтрока.ПоследствияДефекта = Дефект.ПоследствияДефекта;
		НоваяСтрока.КритичностьДефекта = Справочники.торо_КритичностьДефекта.НайтиПоКоду(Дефект.КритичностьДефекта);
	КонецЦикла;	

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта,
	|	ТаблицаДокумента.ОтказавшийЭлемент,
	|	ТаблицаДокумента.ВидДефекта,
	|	ТаблицаДокумента.ID
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_ВыявленныеДефектыСписокДефектов.Ссылка
	|ИЗ
	|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
	|ГДЕ
	|	торо_ВыявленныеДефектыСписокДефектов.Ссылка.ИзМобильного
	|	И торо_ВыявленныеДефектыСписокДефектов.Ссылка.Организация = &Организация
	|	И торо_ВыявленныеДефектыСписокДефектов.Ссылка.ДатаОбнаружения = &ДатаОбнаружения
	|	И (торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта, торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент, торо_ВыявленныеДефектыСписокДефектов.ВидДефекта, торо_ВыявленныеДефектыСписокДефектов.ID) В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаДокумента.ОбъектРемонта,
	|				ВТ_ТаблицаДокумента.ОтказавшийЭлемент,
	|				ВТ_ТаблицаДокумента.ВидДефекта,
	|				ВТ_ТаблицаДокумента.ID
	|			ИЗ
	|				ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента)";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("ДатаОбнаружения", ВыявленныйДефект.ДатаОбнаружения);
	
	Организация = Справочники.Организации.НайтиПоКоду(ВыявленныйДефект.Организация);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НовыйДок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если НовыйДок.Проведен Тогда
			//Возврат "Doc_work";
			СтруктураОтвета.Успех = Ложь;
			СтруктураОтвета.ДокументПроведен = Истина;
			Возврат СтруктураОтвета;
		КонецЕсли;
		НовыйДок.СписокДефектов.Очистить();
	Иначе
		НовыйДок = Документы.торо_ВыявленныеДефекты.СоздатьДокумент();
	КонецЕсли;	
	
	НовыйДок.ИзМобильного = Истина;	
	НовыйДок.Дата = ВыявленныйДефект.Дата;
	НовыйДок.Комментарий = ВыявленныйДефект.Комментарий;
	НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(ВыявленныйДефект.Подразделение);
	НовыйДок.Организация = Организация;
	НовыйДок.ДатаОбнаружения = ВыявленныйДефект.ДатаОбнаружения;
	НовыйДок.ДефектВыявленВПроцессе = Справочники.торо_УсловияВыявленияДефекта.НайтиПоКоду(ВыявленныйДефект.ДефектВыявленВПроцессе);
	НовыйДок.Ответственный = НайтиПользователя(ВыявленныйДефект.Ответственный);
	
	НовыйДок.СписокДефектов.Загрузить(ТаблицаДокумента);
	
	ФОИспользоватьУпрощеннуюФормуДефекта = ПолучитьФункциональнуюОпцию("торо_ИспользоватьУпрощеннуюФормуДефекта");
	Если ФОИспользоватьУпрощеннуюФормуДефекта И ТаблицаДокумента.Количество() > 0 Тогда
		НовыйДок.ОбъектРемонта = ТаблицаДокумента[0].ОбъектРемонта;
	КонецЕсли;
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьВыявленныйДефект");
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПередатьСостояниеОР(СостояниеОР)
	
	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ИерархияДляМобильногоПриложения",
				Истина);
	
	ТаблицаДокумента = Документы.торо_СостоянияОбъектовРемонта.ПустаяСсылка().ОбъектыРемонта.Выгрузить();
	Для каждого Состояние ИЗ СостояниеОР.ТЧСостояниеОР Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ОбъектРемонта = НайтиОРпоКоду(Состояние.ОбъектРемонта);
		НоваяСтрока.ДатаОкончания = Состояние.ДатаОкончания;
		НоваяСтрока.ДатаНачала = Состояние.ДатаНачала;
		НоваяСтрока.ПричинаПростоя  = Справочники.торо_ПричиныПростояОборудования.НайтиПоКоду(Состояние.ПричинаПростоя );
		НоваяСтрока.ВидЭксплуатации = Справочники.торо_ВидыЭксплуатации.НайтиПоКоду(Состояние.ВидЭксплуатации);
		НоваяСтрока.ВидЭксплуатацииНаПериод = Справочники.торо_ВидыЭксплуатации.НайтиПоКоду(Состояние.ВидЭксплуатацииНаПериод);
		НоваяСтрока.ВидПуска = Состояние.ВидПуска;
		НоваяСтрока.ВидПускаНаПериод = Состояние.ВидПускаНаПериод;
		НоваяСтрока.ИзменятьСостояниеПодчиненныхОР = Состояние.РаспространятьНаПодчиненных;
		НоваяСтрока.Иерархия = ТекСтруктураИерархии;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта,
	|	ТаблицаДокумента.ВидЭксплуатации,
	|	ТаблицаДокумента.ВидЭксплуатацииНаПериод,
	|	ТаблицаДокумента.ДатаНачала,
	|	ТаблицаДокумента.ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_СостоянияОбъектовРемонтаОбъектыРемонта.Ссылка
	|ИЗ
	|	Документ.торо_СостоянияОбъектовРемонта.ОбъектыРемонта КАК торо_СостоянияОбъектовРемонтаОбъектыРемонта
	|ГДЕ
	|	торо_СостоянияОбъектовРемонтаОбъектыРемонта.Ссылка.ИзМобильного
	|	И торо_СостоянияОбъектовРемонтаОбъектыРемонта.Ссылка.Организация = &Организация
	|	И (торо_СостоянияОбъектовРемонтаОбъектыРемонта.ОбъектРемонта, торо_СостоянияОбъектовРемонтаОбъектыРемонта.ВидЭксплуатации, торо_СостоянияОбъектовРемонтаОбъектыРемонта.ВидЭксплуатацииНаПериод, торо_СостоянияОбъектовРемонтаОбъектыРемонта.ДатаНачала, торо_СостоянияОбъектовРемонтаОбъектыРемонта.ДатаОкончания) В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаДокумента.ОбъектРемонта,
	|				ВТ_ТаблицаДокумента.ВидЭксплуатации,
	|				ВТ_ТаблицаДокумента.ВидЭксплуатацииНаПериод,
	|				ВТ_ТаблицаДокумента.ДатаНачала,
	|				ВТ_ТаблицаДокумента.ДатаОкончания
	|			ИЗ
	|				ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента)";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	Организация = Справочники.Организации.НайтиПоКоду(СостояниеОР.Организация);
	Запрос.УстановитьПараметр("Организация", Организация);

	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НовыйДок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если НовыйДок.Проведен Тогда
			//Возврат "Doc_work";	
			СтруктураОтвета.Успех = Ложь;
			СтруктураОтвета.ДокументПроведен = Истина;
			Возврат СтруктураОтвета;
		КонецЕсли;
      НовыйДок.ОбъектыРемонта.Очистить();
	Иначе
		НовыйДок = Документы.торо_СостоянияОбъектовРемонта.СоздатьДокумент();
	КонецЕсли;	
	
	НовыйДок.ИзМобильного = Истина;
	НовыйДок.Дата = СостояниеОР.Дата;
	НовыйДок.Комментарий = СостояниеОР.Комментарий;
	НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(СостояниеОР.Подразделение);
	НовыйДок.Организация = Организация;
	НовыйДок.ВидЭксплуатации = Справочники.торо_ВидыЭксплуатации.НайтиПоКоду(СостояниеОР.ВидЭксплуатации);
	НовыйДок.Ответственный = НайтиПользователя(СостояниеОР.Ответственный);
	НовыйДок.ВидОперации = Перечисления.торо_ВидыОперацийОтклоненияВРаботеОборудования.ВидЭксплуатации;
	
	НовыйДок.ОбъектыРемонта.Загрузить(ТаблицаДокумента);
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьСостояниеОР");
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПередатьУчетНаработкиОборудования(УчетНаработкиОборудования)
	
	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();
	
	ТекСтруктураИерархии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
				"НастройкиТОиР",
				"ИерархияДляМобильногоПриложения",
				Истина);
	
	ТаблицаДокумента = Документы.торо_УчетНаработкиОборудования.ПустаяСсылка().НаработкаОбъектов.Выгрузить();
	Для каждого Наработка ИЗ УчетНаработкиОборудования.ТЧУчетНаработкиОборудования Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.Объект = НайтиОРпоКоду(Наработка.ОбъектРемонта);
		НоваяСтрока.ДатаРаботыС = Наработка.ДатаРаботыС;
		НоваяСтрока.ДатаРаботыПо = Наработка.ДатаРаботыПо;
		НоваяСтрока.Показатель  = Справочники.ПараметрыВыработкиОС.НайтиПоКоду(Наработка.Показатель);
		НоваяСтрока.СтароеЗначение = Наработка.СтароеЗначение;
		НоваяСтрока.НовоеЗначение = Наработка.НовоеЗначение;
		НоваяСтрока.Наработка = Наработка.Наработка;
		НоваяСтрока.РаспространятьНаПодчиненных = Наработка.РаспространятьНаПодчиненных;
		НоваяСтрока.Иерархия = ТекСтруктураИерархии;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.Объект,
	|	ТаблицаДокумента.Показатель,
	|	ТаблицаДокумента.ДатаРаботыПо
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка
	|ИЗ
	|	Документ.торо_УчетНаработкиОборудования.НаработкаОбъектов КАК торо_УчетНаработкиОборудованияНаработкаОбъектов
	|ГДЕ
	|	торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка.ИзМобильного
	|	И торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка.Организация = &Организация
	//|	И торо_УчетНаработкиОборудованияНаработкаОбъектов.Ссылка.Номер = &Номер
	|	И (торо_УчетНаработкиОборудованияНаработкаОбъектов.Объект, торо_УчетНаработкиОборудованияНаработкаОбъектов.Показатель, торо_УчетНаработкиОборудованияНаработкаОбъектов.ДатаРаботыПо) В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаДокумента.Объект,
	|				ВТ_ТаблицаДокумента.Показатель,
	|				ВТ_ТаблицаДокумента.ДатаРаботыПо
	|			ИЗ
	|				ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента)";
	
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("Номер", УчетНаработкиОборудования.Номер);
	
	Организация = Справочники.Организации.НайтиПоКоду(УчетНаработкиОборудования.Организация);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НовыйДок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если НовыйДок.Проведен Тогда
			//Возврат "Doc_work";
			СтруктураОтвета.Успех = Ложь;
			СтруктураОтвета.ДокументПроведен = Истина;
			Возврат СтруктураОтвета;
		КонецЕсли;		
		НовыйДок.НаработкаОбъектов.Очистить();
	Иначе
		НовыйДок = Документы.торо_УчетНаработкиОборудования.СоздатьДокумент();
	КонецЕсли;	
	
	НовыйДок.ИзМобильного = Истина;	
	НовыйДок.Дата = УчетНаработкиОборудования.Дата;
	НовыйДок.Комментарий = УчетНаработкиОборудования.Комментарий;
	НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(УчетНаработкиОборудования.Подразделение);
	НовыйДок.Организация = Организация;
	НовыйДок.Ответственный = НайтиПользователя(УчетНаработкиОборудования.Ответственный);
	
	НовыйДок.НаработкаОбъектов.Загрузить(ТаблицаДокумента);
	
	Если ЗначениеЗаполнено(ТекСтруктураИерархии) Тогда
		БылиОшибки = Ложь;
		ТаблицаИерархииОР = торо_РаботаСИерархией.ПолучитьТаблицуИерархии(ТекСтруктураИерархии,НовыйДок.Дата,Истина);
				
		Для каждого ТеСтрокаНаработки из НовыйДок.НаработкаОбъектов Цикл
			Если ТеСтрокаНаработки.РаспространятьНаПодчиненных Тогда
				ТекстОшибки = "";
				РаспространитьНаработкуНаПодчиненныхДляТекущейСтроки(НовыйДок, ТеСтрокаНаработки, ТаблицаИерархииОР, БылиОшибки, ТекстОшибки);
				Если ЗначениеЗаполнено(ТекстОшибки) Тогда
					ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстОшибки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьНаработки");
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПередатьУчетКонтролируемыхПоказателей(УчетКонтролируемыхПоказателей)
	
	СтруктураОтвета = ПодготовитьПустуюСтруктуруОтвета();
	
	ТаблицаДокумента = Документы.торо_УчетКонтролируемыхПоказателей.ПустаяСсылка().Показатели.Выгрузить();
	Для каждого Показатель ИЗ УчетКонтролируемыхПоказателей.ТЧУчетКонтролируемыхПоказателей Цикл
		НоваяСтрока = ТаблицаДокумента.Добавить();
		НоваяСтрока.ОбъектРемонта = НайтиОРпоКоду(Показатель.ОбъектРемонта);
		НоваяСтрока.ДатаКонтроля = Показатель.ДатаКонтроля;
		НоваяСтрока.Показатель  = ПланыВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта.НайтиПоКоду(Показатель.Показатель);
		НоваяСтрока.Значение = Показатель.Значение;
		НоваяСтрока.ДопустимыйМинимум =  Показатель.ДопустимыйМинимум;
		НоваяСтрока.ДопустимыйМаксимум=  Показатель.ДопустимыйМаксимум;
		НоваяСтрока.ПредыдущееЗначение =  Показатель.ПредыдущееЗначение;
    	НоваяСтрока.КритическийМинимум =  Показатель.КритическийМинимум;
		НоваяСтрока.КритическийМаксимум =  Показатель.КритическийМаксимум;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДокумента.ОбъектРемонта,
	|	ТаблицаДокумента.Показатель,
	|	ТаблицаДокумента.ДатаКонтроля
	|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	торо_УчетКонтролируемыхПоказателейПоказатели.Ссылка
	|ИЗ
	|	Документ.торо_УчетКонтролируемыхПоказателей.Показатели КАК торо_УчетКонтролируемыхПоказателейПоказатели
	|ГДЕ
	|	торо_УчетКонтролируемыхПоказателейПоказатели.Ссылка.ИзМобильного
	|	И торо_УчетКонтролируемыхПоказателейПоказатели.Ссылка.Организация = &Организация
	//|	И торо_УчетКонтролируемыхПоказателейПоказатели.Ссылка.Номер = &Номер
	|	И (торо_УчетКонтролируемыхПоказателейПоказатели.ОбъектРемонта, торо_УчетКонтролируемыхПоказателейПоказатели.Показатель, торо_УчетКонтролируемыхПоказателейПоказатели.ДатаКонтроля) В
	|			(ВЫБРАТЬ
	|				ВТ_ТаблицаДокумента.ОбъектРемонта,
	|				ВТ_ТаблицаДокумента.Показатель,
	|				ВТ_ТаблицаДокумента.ДатаКонтроля
	|			ИЗ
	|				ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента)";

	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("Номер", УчетКонтролируемыхПоказателей.Номер);
	
	Организация = Справочники.Организации.НайтиПоКоду(УчетКонтролируемыхПоказателей.Организация);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		НовыйДок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если НовыйДок.Проведен Тогда
			//Возврат "Doc_work";
			СтруктураОтвета.Успех = Ложь;
			СтруктураОтвета.ДокументПроведен = Истина;
			Возврат СтруктураОтвета;
		КонецЕсли;
      НовыйДок.Показатели.Очистить();
	Иначе
		НовыйДок = Документы.торо_УчетКонтролируемыхПоказателей.СоздатьДокумент();
	КонецЕсли;	
	
	НовыйДок.ИзМобильного = Истина;
	НовыйДок.Дата = УчетКонтролируемыхПоказателей.Дата;
	НовыйДок.Комментарий = УчетКонтролируемыхПоказателей.Комментарий;
	НовыйДок.Подразделение = Справочники.СтруктураПредприятия.НайтиПоКоду(УчетКонтролируемыхПоказателей.Подразделение);
	НовыйДок.Организация = Организация;
	НовыйДок.Ответственный = НайтиПользователя(УчетКонтролируемыхПоказателей.Ответственный);
	
	НовыйДок.Показатели.Загрузить(ТаблицаДокумента);
	
	ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, "ОбменМП.ЗаписьКонтролируемыхПоказателей");
	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ПопробоватьЗаписатьДокумент(НовыйДок, СтруктураОтвета, ИмяСобытияЖурналаРегистрации)
	
	Попытка	
		НовыйДок.Записать();		
		//Возврат НовыйДок.Номер;
		СтруктураОтвета.Успех = Истина;
		СтруктураОтвета.НомерДокумента = НовыйДок.Номер;
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации(ИмяСобытияЖурналаРегистрации,УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		//Возврат "Fail";
		СтруктураОтвета.Успех = Ложь;
		ТекстСообщения = НСтр("ru='Не удалось записать документ, подробнее см. в журнале регистрации в базе ТОиР.'");
		ДобавитьОшибкуВМассив(СтруктураОтвета.ТекстОшибки, ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

Функция WriteObjectPhoto(Code, Photo, Comment, Type)
	
	Попытка
		ВладелецФайла = Неопределено;
		НаименованиеФайла = "";
		
		Если Type = "ОР" Тогда //изображения Объекта ремонта
			
			ВладелецФайла = НайтиОРпоКоду(Code);
			Если ЗначениеЗаполнено(Comment) Тогда
				НаименованиеФайла = Comment;	
			Иначе					
				НаименованиеФайла = ВладелецФайла.Наименование;
			КонецЕсли;
			
		Иначе // изображение дефекта
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	торо_ВыявленныеДефекты.Ссылка
			|ИЗ
			|	Документ.торо_ВыявленныеДефекты КАК торо_ВыявленныеДефекты
			|ГДЕ
			|	торо_ВыявленныеДефекты.Номер = &Номер
			|
			|УПОРЯДОЧИТЬ ПО
			|	торо_ВыявленныеДефекты.Дата УБЫВ";
			
			Запрос.УстановитьПараметр("Номер", Code);
			Результат = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = Результат.Выбрать();
			
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				ВладелецФайла = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
			
			НаименованиеФайла = Строка(ВладелецФайла);
			Если ЗначениеЗаполнено(Comment) Тогда
				НаименованиеФайла = Comment;	
			КонецЕсли;
			
		КонецЕсли;
		
		ДвоичныеДанные = Base64Значение(Photo);
		Картинка = Новый Картинка(ДвоичныеДанные);
		Расширение = Строка(Картинка.Формат());
		ВрХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		НовыйФайл = ДобавитьПрисоединенныйФайл(ВладелецФайла, "",Расширение,,,ВрХранилище,,НаименованиеФайла);
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьТехническойДокументации",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";
	
КонецФункции

Функция ДобавитьПрисоединенныйФайл(Знач ВладелецФайлов,
                     Знач ИмяБезРасширения,
                     Знач РасширениеБезТочки = Неопределено,
                     Знач ВремяИзменения = Неопределено,
                     Знач ВремяИзмененияУниверсальное = Неопределено,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "",
                     Знач НоваяСсылкаНаФайл = Неопределено) 
	
	// Если расширение не задано явно, выделяем его из имени файла.
	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
		Или ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(ВладелецФайлов, "", ЗаголовокОшибки,
			НСтр("ru = 'В этом случае параметр ""НоваяСсылкаНаФайл"" должен быть указан.'"));
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		Если Не Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
			Или Не ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение НСтр("ru = 'Ошибка при добавлении присоединенного файла.
				|Ссылка на новый файл не заполнена.'");
		КонецЕсли;
		
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
	КонецЕсли;
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.ПодписанЭП                   = Ложь;
	//ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Наименование                 = Описание;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	
	СвояТранзакцияОткрыта = Ложь;
	
	Попытка
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			СвояТранзакцияОткрыта = Истина;
			ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
		Иначе
			//// Добавление в один из томов (где есть свободное место).
			//СведенияОФайле = ФайловыеФункцииСлужебный.ДобавитьФайлВТом(ДвоичныеДанные, ВремяИзмененияУниверсальное,
			//	ИмяБезРасширения, РасширениеБезТочки, , ПрисоединенныйФайл.Зашифрован);
			//ПрисоединенныйФайл.Том = СведенияОФайле.Том;
			//ПрисоединенныйФайл.ПутьКФайлу = СведенияОФайле.ПутьКФайлу;
		КонецЕсли;
		
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		ИзвлеченныйТекст = "";
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			ИзвлеченныйТекст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			
		ИначеЕсли НЕ ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
			// Тексты извлекаются сразу, а не в фоновом задании.
			СтатусИзвлеченияТекста = ПрисоединенныеФайлыСлужебный.ИзвлечьТекст(
				ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		КонецЕсли;
		
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
		
		ПрисоединенныйФайл.Записать();
		
		Если СвояТранзакцияОткрыта Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если СвояТранзакцияОткрыта Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
		                             |%2'");
		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			КомментарийЖурналаРегистрации);
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

Функция ПередатьФотоДефекта(ВыявленныйДефект, Фото)
	
	Попытка
	
		ТаблицаДокумента = Документы.торо_ВыявленныеДефекты.ПустаяСсылка().СписокДефектов.Выгрузить();
		Для каждого Дефект ИЗ ВыявленныйДефект.ТЧВыявленныйДефект Цикл
			НоваяСтрока = ТаблицаДокумента.Добавить();
			НоваяСтрока.ID = Дефект.ID;
			НоваяСтрока.ВидДефекта = Справочники.торо_ВидыДефектов.НайтиПоКоду(Дефект.ВидДефекта);
			НоваяСтрока.ДефектВыявленВПроцессе  = Справочники.торо_УсловияВыявленияДефекта.НайтиПоКоду(Дефект.ДефектВыявленВПроцессе );
			НоваяСтрока.ТиповойДефект = Справочники.торо_ТиповыеДефектыОборудования.НайтиПоКоду(Дефект.ТиповойДефект );
			НоваяСтрока.ДефектОписание = Дефект.ДефектОписание;
			НоваяСтрока.ДефектПричина = Справочники.торо_ПричиныДефектов.НайтиПоКоду(Дефект.ДефектПричина );
			НоваяСтрока.НаправлениеНаУстранение = Дефект.НаправлениеНаУстранение;
			НоваяСтрока.ОбъектРемонта = НайтиОРпоКоду(Дефект.ОбъектРемонта);
			НоваяСтрока.ОтказавшийЭлемент = НайтиОРпоКоду(Дефект.ОтказавшийЭлемент);
			НоваяСтрока.ПоследствияДефекта =Дефект.ПоследствияДефекта;
			НоваяСтрока.КритичностьДефекта = Справочники.торо_КритичностьДефекта.НайтиПоКоду(Дефект.КритичностьДефекта);
		КонецЦикла;	
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаДокумента.ОбъектРемонта,
		|	ТаблицаДокумента.ОтказавшийЭлемент,
		|	ТаблицаДокумента.ВидДефекта,
		|	ТаблицаДокумента.ID
		|ПОМЕСТИТЬ ВТ_ТаблицаДокумента
		|ИЗ
		|	&ТаблицаДокумента КАК ТаблицаДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка
		|ИЗ
		|	Документ.торо_ВыявленныеДефекты.СписокДефектов КАК торо_ВыявленныеДефектыСписокДефектов
		|ГДЕ
		|	торо_ВыявленныеДефектыСписокДефектов.Ссылка.ИзМобильного
		|	И торо_ВыявленныеДефектыСписокДефектов.Ссылка.Организация = &Организация
		|	И торо_ВыявленныеДефектыСписокДефектов.Ссылка.ДатаОбнаружения = &ДатаОбнаружения
		|	И (торо_ВыявленныеДефектыСписокДефектов.ОбъектРемонта, торо_ВыявленныеДефектыСписокДефектов.ОтказавшийЭлемент, торо_ВыявленныеДефектыСписокДефектов.ВидДефекта, торо_ВыявленныеДефектыСписокДефектов.ID) В
		|			(ВЫБРАТЬ
		|				ВТ_ТаблицаДокумента.ОбъектРемонта,
		|				ВТ_ТаблицаДокумента.ОтказавшийЭлемент,
		|				ВТ_ТаблицаДокумента.ВидДефекта,
		|				ВТ_ТаблицаДокумента.ID
		|			ИЗ
		|				ВТ_ТаблицаДокумента КАК ВТ_ТаблицаДокумента)";
		
		Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
		Запрос.УстановитьПараметр("ДатаОбнаружения", ВыявленныйДефект.ДатаОбнаружения);
		
		Организация = Справочники.Организации.НайтиПоКоду(ВыявленныйДефект.Организация);
		Запрос.УстановитьПараметр("Организация", Организация);

		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		ВладелецФайла = Неопределено;
		НаименованиеФайла = "";
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ВладелецФайла = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
		
		НаименованиеФайла = Строка(ВладелецФайла);
		Если ЗначениеЗаполнено(Фото.Комментарий) Тогда
			НаименованиеФайла =  Фото.Комментарий + "-"+ НаименованиеФайла;	
		КонецЕсли;
		
		ДвоичныеДанные = Base64Значение(Фото.ДанныеФото);
		Картинка = Новый Картинка(ДвоичныеДанные);
		Расширение = Строка(Картинка.Формат());
		ВрХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		НовыйФайл = ДобавитьПрисоединенныйФайл(ВладелецФайла, "",Расширение,,,ВрХранилище,,НаименованиеФайла);
		
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьФотоДефекта",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";
	
КонецФункции


Функция ПолучитьКоличества(Всё, ИДУстройства)
	
	ТипКоличество = ФабрикаXDTO.Тип("android", "Количество");
	Количество = ФабрикаXDTO.Создать(ТипКоличество);

	Если Всё Тогда
		Количество.ОР = ПолучитьКолвоСправочника("торо_ОбъектыРемонта",Истина);
		Количество.РемонтныеГруппы = ПолучитьКолвоСправочника("торо_ТиповыеОР",Истина);	
		Количество.Организации = ПолучитьКолвоСправочника("Организации",Истина);	
		Количество.Подразделения = ПолучитьКолвоСправочника("СтруктураПредприятия",Истина);	
		Количество.ВидыЭксплуатации = ПолучитьКолвоСправочника("торо_ВидыЭксплуатации",Истина);	
		Количество.УсловияВыявленияДефектов = ПолучитьКолвоСправочника("торо_УсловияВыявленияДефекта",Истина);	
		Количество.КритичностиДефектов = ПолучитьКолвоСправочника("торо_КритичностьДефекта",Истина);	
		Количество.ТиповыеДефекты = ПолучитьКолвоСправочника("торо_ТиповыеДефектыОборудования",Истина);	
		Количество.ПричиныДефектов = ПолучитьКолвоСправочника("торо_ПричиныДефектов",Истина);	
		Количество.ЕдиницыИзмерения = ПолучитьКолвоСправочника("ЕдиницыИзмерения",Истина);	
		Количество.ПричиныПРостоев = ПолучитьКолвоСправочника("торо_ПричиныПростояОборудования",Истина);	
		Количество.ВидыДефектов = ПолучитьКолвоСправочника("торо_ВидыДефектов",Истина);	
		Количество.ПараметрыВыработкиОС = ПолучитьКолвоСправочника("ПараметрыВыработкиОС",Истина);
		Количество.Направления = ПолучитьКолвоСправочника("торо_НаправленияОбъектовРемонтныхРабот",Истина);
		
		Запрос = Новый Запрос;		
		Запрос.Текст = "ВЫБРАТЬ
						|КОЛИЧЕСТВО(*) КАК КолВо
						|ИЗ ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();	 	
		Количество.ИзмеряемыеПоказатели = Выборка.КолВо;
		
		Количество.ПараметрыНаработкиОР = РегистрыСведений.торо_ПараметрыНаработкиОбъектовРемонта.СрезПоследних().Количество();	
		Количество.ТекущееСостояниеОР = РегистрыСведений.торо_ТекущееСостояниеОР.СрезПоследних().Количество();	
		
		Запрос = Новый Запрос;		
		Запрос.Текст = "ВЫБРАТЬ
						|КОЛИЧЕСТВО(*) КАК КолВо
						|ИЗ РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта КАК торо_ИзмеряемыеПоказателиОбъектовРемонта";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();	 	
		Количество.ИзмеряемыеПоказателиОР = Выборка.КолВо;
		
		ВыборкаНаработки = ПолучитьАктуальнуюНаработкуДляОР();
		Количество.НаработкаОР = ВыборкаНаработки.Количество();

    Иначе
		 Узел = ПолучитьУзелПланаОбмена(ИДУстройства);		
	    Количество.ОР =  ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_ОбъектыРемонта");
	    Количество.РемонтныеГруппы =  ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_ТиповыеОР");
	    Количество.Организации =   ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.Организации");
	    Количество.Подразделения = ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.СтруктураПредприятия");
	    Количество.ВидыЭксплуатации =  ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_ВидыЭксплуатации");
	    Количество.УсловияВыявленияДефектов =  ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_УсловияВыявленияДефекта");
	    Количество.КритичностиДефектов =   ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_КритичностьДефекта");
	    Количество.ТиповыеДефекты =     ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_ТиповыеДефектыОборудования");
	    Количество.ПричиныДефектов =    ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_ПричиныДефектов");
	    Количество.ЕдиницыИзмерения =   ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.ЕдиницыИзмерения");
	    Количество.ПричиныПРостоев =    ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_ПричиныПростояОборудования");
	    Количество.ВидыДефектов =       ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_ВидыДефектов");
	    Количество.ПараметрыВыработкиОС = ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.ПараметрыВыработкиОС");
	  
	    Количество.ИзмеряемыеПоказатели =  ВернутьКоличествоОбъектовДляВыгрузки(Узел,"ПланВидовХарактеристик.торо_ИзмеряемыеПоказателиОбъектовРемонта");
	    
	    Количество.ПараметрыНаработкиОР =  ВернутьКоличествоОбъектовДляВыгрузки(Узел,"РегистрСведений.торо_ПараметрыНаработкиОбъектовРемонта");
	    Количество.ТекущееСостояниеОР =    ВернутьКоличествоОбъектовДляВыгрузки(Узел,"РегистрСведений.торо_ТекущееСостояниеОР");
	    Количество.ИзмеряемыеПоказателиОР =ВернутьКоличествоОбъектовДляВыгрузки(Узел,"РегистрСведений.торо_ИзмеряемыеПоказателиОбъектовРемонта");
		 Количество.Направления =  ВернутьКоличествоОбъектовДляВыгрузки(Узел,"Справочник.торо_НаправленияОбъектовРемонтныхРабот");
		 
 		ВыборкаНаработки = ПолучитьАктуальнуюНаработкуДляОР();
		Количество.НаработкаОР = ВыборкаНаработки.Количество();
		 
	КонецЕсли;	

	Возврат Количество;	
	
КонецФункции

Функция ПолучитьКолвоСправочника(Справочник, ОтображатьГруппы)
	
	Запрос = Новый Запрос;		
	Запрос.Текст = "ВЫБРАТЬ
					|КОЛИЧЕСТВО(*) КАК КолВо
					|ИЗ Справочник."+Справочник + " КАК "+Справочник;
					
	Если НЕ ОтображатьГруппы Тогда
		Запрос.Текст = Запрос.Текст +" ГДЕ "+Справочник+".ЭтоГруппа = Ложь";					
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КолВо;	
	
КонецФункции

Функция ВернутьКоличествоОбъектовДляВыгрузки(УзелОбмена,ПолноеИмя)
   Если Не ЗначениеЗаполнено(УзелОбмена) Тогда
       Возврат 0;
   КонецЕсли;
   
   ТекстЗапроса="ВЫБРАТЬ 0 КАК Количество";
   ТекстЗапроса=ТекстЗапроса+Символы.ПС+"ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ 1 ИЗ "+ПолноеИмя+".Изменения ГДЕ Узел = &Узел";
   
   Запрос=Новый Запрос;
   Запрос.Текст="ВЫБРАТЬ СУММА(Результат.Количество) КАК Количество ИЗ ("+ТекстЗапроса+") КАК Результат";
   Запрос.УстановитьПараметр("Узел",УзелОбмена);
   
   Результат=Запрос.Выполнить();
   Выборка=Результат.Выбрать();
   Выборка.Следующий();
   
   Возврат Выборка.Количество;
КонецФункции


Функция WriteZipCode(Code, ZipCode)
	
	Попытка	
		Объект = НайтиОРпоКоду(Code).ПолучитьОбъект();
		Объект.ШтрихКод = ZipCode;
		Объект.Записать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("ОбменМП.ЗаписьШтрихкода",УровеньЖурналаРегистрации.Ошибка,,,ОписаниеОшибки);
		Возврат "Error";
	КонецПопытки;
	
	Возврат "Done";
	 
КонецФункции

Функция ВернутьНомер(Документ, Префикс)
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = 	"ВЫБРАТЬ МАКСИМУМ(ЭтотДокумент.Номер) КАК Номер ИЗ Документ."+Документ+"КАК ЭтотДокумент ГДЕ "+Документ+".Номер ПОДОБНО '"+Префикс+"'%";
	//
	//Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат "";
		
КонецФункции

Функция Hello()
	
	СисИнфо = Новый СистемнаяИнформация;
	СтрокаВерсии = СисИнфо.ВерсияПриложения;
	ИмяОбработки = ?(Лев(СтрокаВерсии, 3) = "8.2" ИЛИ Лев(СтрокаВерсии, 3) = "8.3", "торо_ЗащитаУправлениеРемонтами82", "торо_ЗащитаУправлениеРемонтами");
	
	//Если Не МенеджерЛицензийТОИРЗапущен() Тогда
		//торо_СЛКСервер.ПодключитьВнешнююКомпоненту_Session();	
	//КонецЕсли;
	//торо_ОбщийМодульСЛК.ПодключитьКомпонентуСЛК();
	//ИспользоватьМенеджерЛицензий = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьТОиР");
		УИД = Строка(Новый УникальныйИдентификатор());
	ГСЧ = Новый ГенераторСлучайныхЧисел();
	
	Ч0 = Строка(ГСЧ.СлучайноеЧисло(1,7));
	Ч0 = 3;
	КоличествоДней = Цел((ТекущаяДата() - Дата(2014,1,1,0,0,0))/86400);
		
	КоличествоДнейСтрока = Формат(КоличествоДней, "ЧГ=0");
	Пока СтрДлина(КоличествоДнейСтрока) <4 Цикл
		КоличествоДнейСтрока = "0"+КоличествоДнейСтрока;
	КонецЦикла;
	Ч1 =  Лев(КоличествоДнейСтрока,1);
	Ч2 =  Сред(КоличествоДнейСтрока,2,1);
	Ч3 =  Сред(КоличествоДнейСтрока,3,1);
	Ч4 =  Прав(КоличествоДнейСтрока,1);
	
	Уид = Строка(Ч0)+ Сред(УИД,2,Ч0)+Ч1+Сред(УИД,Ч0+2,Ч0)+Ч2+Сред(УИД,Ч0*2+2,Ч0)+Ч3+Сред(УИД,Ч0*3+2,Ч0)+Ч4+ Прав(УИД,31-Ч0*4);
	
	Возврат Уид;
	
	
	//Возврат торо_СЛКСервер.ЗаполнитьПриветствие_Session(ИмяОбработки);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции

Функция НайтиПользователя(ИмяПользователяИБ)
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ИмяПользователяИБ);
	Пользователь = Справочники.Пользователи.НайтиПоРеквизиту("ИдентификаторПользователяИБ", ПользовательИБ.УникальныйИдентификатор);
	Возврат Пользователь;
	
КонецФункции

Функция НайтиОРпоКоду(Код)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_ОбъектыРемонта.Ссылка
	|ИЗ
	|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
	|ГДЕ
	|	торо_ОбъектыРемонта.Код = &Код
	|	И торо_ОбъектыРемонта.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Код", Код);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.торо_ОбъектыРемонта.ПустаяСсылка();
	
КонецФункции

Процедура ЗаполнитьСписокДаннымиБазовогоСправочника(Всё, ИДУстройства, СписокXDTO, ТипФабрики, ИмяСправочника, ПропускатьГруппы = Ложь, СИерархией = Ложь)
	
	Если ИмяСправочника = "торо_ИзмеряемыеПоказателиОбъектовРемонта" Тогда
		ТипМетаданных = Метаданные.ПланыВидовХарактеристик[ИмяСправочника];
		Если Всё Тогда
			Выборка = ПланыВидовХарактеристик[ИмяСправочника].Выбрать();	
		Иначе
			Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
			Выборка = ПланыОбмена.ВыбратьИзменения(Узел,1,ТипМетаданных);	
		КонецЕсли;
		
	Иначе
		ТипМетаданных = Метаданные.Справочники[ИмяСправочника];
		Если Всё Тогда
			Выборка = Справочники[ИмяСправочника].Выбрать();	
		Иначе
			Узел = ПолучитьУзелПланаОбмена(ИДУстройства);
			Выборка = ПланыОбмена.ВыбратьИзменения(Узел,1,ТипМетаданных);	
		КонецЕсли;
	КонецЕсли;
	
	СтрокаИсключений = "";
	Если ИмяСправочника = "торо_ИзмеряемыеПоказателиОбъектовРемонта" 
		ИЛИ ИмяСправочника = "Номенклатура"	
		ИЛИ ИмяСправочника = "ПараметрыВыработкиОС" Тогда
		СтрокаИсключений = "ЕдиницаИзмерения";
		
	ИначеЕсли ИмяСправочника = "торо_ПричиныПростояОборудования" Тогда
		СтрокаИсключений = "ВидПростоя";
		
	ИначеЕсли ИмяСправочника = "торо_ТиповыеДефектыОборудования" Тогда
		СтрокаИсключений = "ВидДефекта, КритичностьДефекта";
	КонецЕсли;
	
	Если СИерархией Тогда
		СтрокаИсключений = ?(СтрокаИсключений = "", "", СтрокаИсключений+", ") + "Родитель";
	КонецЕсли;
	
	СтрокаИсключенийДляГрупп = СтрокаИсключений;
	Если ИмяСправочника = "торо_ТиповыеДефектыОборудования" Тогда
		СтрокаИсключенийДляГрупп = ?(СтрокаИсключенийДляГрупп = "", "", СтрокаИсключенийДляГрупп+", ") + "ОписаниеДефекта";
	ИначеЕсли ИмяСправочника = "торо_ВидыДефектов" 
		ИЛИ ИмяСправочника = "торо_ТиповыеОР" Тогда
		СтрокаИсключенийДляГрупп = ?(СтрокаИсключенийДляГрупп = "", "", СтрокаИсключенийДляГрупп+", ") + "Комментарий";
	КонецЕсли;

	ЗначенияПоУмолчанию = Новый Структура("ЭтоГруппа, ПометкаУдаления, Комментарий, ОписаниеДефекта", Истина, Ложь, "", "");
	ЗначенияПоУмолчанию.Вставить("ВидПростоя", "0");
	ЗначенияПоУмолчанию.Вставить("ЕдиницаИзмерения", "0");
	ЗначенияПоУмолчанию.Вставить("ВидДефекта", "0");
	ЗначенияПоУмолчанию.Вставить("КритичностьДефекта", "0");
	ЗначенияПоУмолчанию.Вставить("Направление", "0");
	
	Пока Выборка.Следующий() Цикл
		
		Если Всё Тогда
			ТекущийОбъект = Выборка;
		Иначе
			ТекущийОбъект = Выборка.Получить();
			Если ТипЗнч(ТекущийОбъект) = Тип("УдалениеОбъекта") Тогда
				ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущийОбъект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПропускатьГруппы И ТекущийОбъект.ЭтоГруппа Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыйОбъект = ФабрикаXDTO.Создать(ТипФабрики);
		ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект, ЗначенияПоУмолчанию);
		Если ТекущийОбъект.ЭтоГруппа Тогда
			ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект, ТекущийОбъект,,СтрокаИсключенийДляГрупп);
		Иначе
			ЗаполнитьЗначенияСвойств(ДобавляемыйОбъект, ТекущийОбъект,,СтрокаИсключений);
		КонецЕсли;
				
		Если ИмяСправочника = "торо_ИзмеряемыеПоказателиОбъектовРемонта"
			ИЛИ ИмяСправочника = "Номенклатура"
			ИЛИ ИмяСправочника = "ПараметрыВыработкиОС"	Тогда
			
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.ЕдиницаИзмерения = ?(ЗначениеЗаполнено(ТекущийОбъект.ЕдиницаИзмерения),ТекущийОбъект.ЕдиницаИзмерения.Код, 0);
			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "торо_ПричиныПростояОборудования" Тогда
			
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.ВидПростоя = Строка(ТекущийОбъект.ВидПростоя);
			КонецЕсли;
			
		ИначеЕсли ИмяСправочника = "торо_ТиповыеДефектыОборудования" Тогда
			
			ДобавляемыйОбъект.Направление = ?(ЗначениеЗаполнено(ТекущийОбъект.Владелец),ТекущийОбъект.Владелец.Код, 0);
			Если НЕ ТекущийОбъект.ЭтоГруппа Тогда
				ДобавляемыйОбъект.ВидДефекта =?(ЗначениеЗаполнено(ТекущийОбъект.ВидДефекта),ТекущийОбъект.ВидДефекта.Код, 0);
				ДобавляемыйОбъект.КритичностьДефекта = ?(ЗначениеЗаполнено(ТекущийОбъект.КритичностьДефекта),ТекущийОбъект.КритичностьДефекта.Код, 0);
				Если ТекущийОбъект.ПричиныВозникновенияДефекта.Количество()>0 Тогда
					ДобавляемыйОбъект.ПричинаДефекта = Строка(ТекущийОбъект.ПричиныВозникновенияДефекта[0].Причина.Код);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СИерархией Тогда
			Если НЕ ЗначениеЗаполнено(ТекущийОбъект.Родитель) Тогда
				ДобавляемыйОбъект.Родитель = Неопределено;
			Иначе
				ОбъектРодитель = ФабрикаXDTO.Создать(ТипФабрики);
				ЗаполнитьЗначенияСвойств(ОбъектРодитель, ЗначенияПоУмолчанию);
				ОбъектРодитель.Родитель = Неопределено;
				ОбъектРодитель.Код = ТекущийОбъект.Родитель.Код;
				ОбъектРодитель.Наименование = ТекущийОбъект.Родитель.Наименование;
				ДобавляемыйОбъект.Родитель = ОбъектРодитель;
			КонецЕсли;
		КонецЕсли;
		
		СписокXDTO.Добавить(ДобавляемыйОбъект);
		
		Если НЕ Всё Тогда
			ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТекущийОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	//Если НЕ Всё Тогда
	//	ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ТипМетаданных);
	//КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВыборкуДанныхИерархииИзРегистра(СтруктураИерархии, ИзменяетсяДокументами, СписокОР = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если ИзменяетсяДокументами = Истина Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабРег.ОбъектИерархии КАК ОбъектИерархии,
		|	ТабРег.РодительИерархии,
		|	ТабРег.Удален
		|ПОМЕСТИТЬ ВТ_СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних(
		|			,
		|			СтруктураИерархии = &СтруктураИерархии
		|				И ОбъектИерархии В (&СписокОР)) КАК ТабРег
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
		|	ЕСТЬNULL(ВТ_СтруктураИерархии.РодительИерархии, НЕОПРЕДЕЛЕНО) КАК Родитель,
		|	ЕСТЬNULL(ВТ_СтруктураИерархии.Удален, ИСТИНА) КАК НеВИерархии
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтруктураИерархии КАК ВТ_СтруктураИерархии
		|		ПО торо_ОбъектыРемонта.Ссылка = ВТ_СтруктураИерархии.ОбъектИерархии
		|ГДЕ
		|	торо_ОбъектыРемонта.Ссылка В(&СписокОР)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Список.ОбъектРемонта,
		|	ВТ_Список.ОбъектРемонта.Код,
		|	ВТ_Список.ОбъектРемонта.Наименование,
		|	ВТ_Список.ОбъектРемонта.ЭтоГруппа,
		|	ВТ_Список.Родитель,
		|	ВТ_Список.Родитель.Код,
		|	ВТ_Список.Родитель.Наименование,
		|	ВТ_Список.Родитель.ЭтоГруппа,
		|	ВТ_Список.НеВИерархии
		|ИЗ
		|	ВТ_Список КАК ВТ_Список";
		
		Если СписокОР = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ОбъектИерархии В (&СписокОР)", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Ссылка В(&СписокОР)", "ИСТИНА");
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабРег.ОбъектИерархии,
		|	ТабРег.РодительИерархии
		|ПОМЕСТИТЬ ВТ_СтруктураИерархии
		|ИЗ
		|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК ТабРег
		|ГДЕ
		|	ТабРег.СтруктураИерархии = &СтруктураИерархии
		|	И ТабРег.ОбъектИерархии В(&СписокОР)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ТабРег.ОбъектИерархии
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	торо_ОбъектыРемонта.Ссылка КАК ОбъектРемонта,
		|	ЕСТЬNULL(ВТ_СтруктураИерархии.РодительИерархии, НЕОПРЕДЕЛЕНО) КАК Родитель,
		|	ВЫБОР
		|		КОГДА ВТ_СтруктураИерархии.ОбъектИерархии ЕСТЬ NULL 
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НеВИерархии
		|ПОМЕСТИТЬ ВТ_Список
		|ИЗ
		|	Справочник.торо_ОбъектыРемонта КАК торо_ОбъектыРемонта
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтруктураИерархии КАК ВТ_СтруктураИерархии
		|		ПО торо_ОбъектыРемонта.Ссылка = ВТ_СтруктураИерархии.ОбъектИерархии
		|ГДЕ
		|	торо_ОбъектыРемонта.Ссылка В(&СписокОР)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Список.ОбъектРемонта,
		|	ВТ_Список.ОбъектРемонта.Код,
		|	ВТ_Список.ОбъектРемонта.Наименование,
		|	ВТ_Список.ОбъектРемонта.ЭтоГруппа,
		|	ВТ_Список.Родитель,
		|	ВТ_Список.Родитель.Код,
		|	ВТ_Список.Родитель.Наименование,
		|	ВТ_Список.Родитель.ЭтоГруппа,
		|	ВТ_Список.НеВИерархии
		|ИЗ
		|	ВТ_Список КАК ВТ_Список";
		
		Если СписокОР = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ТабРег.ОбъектИерархии В(&СписокОР)", "");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "торо_ОбъектыРемонта.Ссылка В(&СписокОР)", "ИСТИНА");
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("СтруктураИерархии", СтруктураИерархии);
	Если СписокОР <> Неопределено Тогда
		Запрос.УстановитьПараметр("СписокОР", СписокОР);
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка;
		
КонецФункции

Функция ПолучитьАктуальнуюНаработкуДляОР(СписокОР = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	торо_НаработкаОбъектовРемонтаОстатки.НаработкаОстаток КАК Наработка,
	|	торо_НаработкаОбъектовРемонтаОстатки.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_НаработкаОбъектовРемонтаОстатки.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_Остатки
	|ИЗ
	|	РегистрНакопления.торо_НаработкаОбъектовРемонта.Остатки(, ОбъектРемонта В (&СписокОР)) КАК торо_НаработкаОбъектовРемонтаОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	торо_ПериодыНаработкиОРСрезПоследних.Период КАК ДатаКон,
	|	торо_ПериодыНаработкиОРСрезПоследних.ОбъектРемонта КАК ОбъектРемонта,
	|	торо_ПериодыНаработкиОРСрезПоследних.Показатель КАК Показатель
	|ПОМЕСТИТЬ ВТ_Даты
	|ИЗ
	|	РегистрСведений.торо_ПериодыНаработкиОР.СрезПоследних(, ОбъектРемонта В (&СписокОР)) КАК торо_ПериодыНаработкиОРСрезПоследних
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектРемонта,
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Даты.ОбъектРемонта КАК ОбъектРемонта,
	|	ВТ_Даты.Показатель КАК Показатель,
	|	ВТ_Даты.ДатаКон КАК ДатаКон,
	|	ЕСТЬNULL(ВТ_Остатки.Наработка, 0) КАК Наработка
	|ИЗ
	|	ВТ_Даты КАК ВТ_Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Остатки КАК ВТ_Остатки
	|		ПО (ВТ_Остатки.ОбъектРемонта = ВТ_Даты.ОбъектРемонта)
	|			И (ВТ_Остатки.Показатель = ВТ_Даты.Показатель)";
	
	Если СписокОР = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, ", ОбъектРемонта В (&СписокОР)", "");
	Иначе
		Запрос.УстановитьПараметр("СписокОР",СписокОР);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Возврат Выборка;
	
КонецФункции

Функция ПодготовитьПустуюСтруктуруОтвета()
	
	ТипСтруктуры = ФабрикаXDTO.Тип("android", "СтруктураОтвета");
	СтруктураОтвета = ФабрикаXDTO.Создать(ТипСтруктуры);
	Возврат СтруктураОтвета;	
	
КонецФункции

Функция ДобавитьОшибкуВМассив(МассивОшибок, ТекстОшибки)
	
	МассивОшибок.Добавить(ТекстОшибки);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
// Заполнение наработки

Процедура РаспространитьНаработкуНаПодчиненныхДляТекущейСтроки(Объект, ТекСтрокаНаработкаОбъектов, ТаблицаИерархииОР, мОтказ = Ложь, ТекстОшибки = "")
			
	ТаблицаПодчиненныхОР = торо_РаботаСНаработкой.ПолучитьЗависимыеОР(ТаблицаИерархииОР, ТекСтрокаНаработкаОбъектов.Объект, Неопределено, ТекСтрокаНаработкаОбъектов.ДатаРаботыС, ТекСтрокаНаработкаОбъектов.ДатаРаботыПо, ТекСтрокаНаработкаОбъектов.Показатель);
	
	Для Каждого СтрокаСНаработкой Из Объект.НаработкаОбъектов Цикл
		Если ТаблицаПодчиненныхОР.НайтиСтроки(Новый Структура("ОбъектИерархии,Показатель", СтрокаСНаработкой.Объект,СтрокаСНаработкой.Показатель)).Количество() = 0 Тогда
			Продолжить;
		Иначе
			ШаблонСообщения = НСтр("ru = 'Невозможно распространить наработку на подчиненные объекты ремонта. Объект ремонта ""%1"" встречается повторно среди подчиненных объектов ремонта объекта ""%2"".'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаСНаработкой.Объект, ТекСтрокаНаработкаОбъектов.Объект);
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			мОтказ = Истина;
		КонецЕсли;
	КонецЦикла; 
	
	Если Не мОтказ Тогда
		ТабЗначенийНаработки = торо_РаботаСНаработкой.ТекущееЗначениеНаработкиТаблица(ТаблицаПодчиненныхОР, Объект.Ссылка);
	
		НеобходимаСинхронизация = Ложь;
		Для Каждого СтрПодчиненнаяНаработка Из ТабЗначенийНаработки Цикл
			Если СтрПодчиненнаяНаработка.НаработаноДата <> СтрПодчиненнаяНаработка.ДатаНачала Тогда
				НеобходимаСинхронизация = Истина;
				//ТекСтрокаНаработкаОбъектов.Синхронизировать = Истина;
				ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных = Ложь;
				мОтказ = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если НеобходимаСинхронизация Тогда
			ШаблонСообщения = НСтр("ru = 'Для распространения наработки на подчиненные ""%1"" ОР необходимо выполнить синхронизацию периодов регистрации наработки!'");
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, СтрокаСНаработкой.Объект);
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			СтруктураДляПередачи = Новый Структура("Объект, Показатель, ДатаРаботыС, ДатаРаботыПо, Наработка");
			ЗаполнитьЗначенияСвойств(СтруктураДляПередачи, ТекСтрокаНаработкаОбъектов);
			торо_РаботаСНаработкой.РаспространитьНаработкуНаПодчиненныхДляТекСтроки(СтруктураДляПередачи, ТабЗначенийНаработки, ТаблицаПодчиненныхОР, Объект);
		КонецЕсли;
	КонецЕсли;
	
	Если мОтказ Тогда
		ТекСтрокаНаработкаОбъектов.РаспространятьНаПодчиненных = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
