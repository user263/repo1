#Область ОбработчикиСобытийФормы
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбора(Элементы.ОтборПоВРВидСравнения.СписокВыбора);
	ЗаполнитьСписокВыбора(Элементы.ОтборПоОРВидСравнения.СписокВыбора);
	ОтборПоВРВидСравнения = ВидСравнения.Равно;
	ОтборПоОРВидСравнения = ВидСравнения.Равно;
	
	ОтборПоВРЗначение = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
	ОтборПоОРЗначение = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
	
	
	ДатаНач = НачалоГода(ТекущаяДата());
	ДатаКон = КонецГода(ТекущаяДата());
	
	ИерархияОР = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиТОиР","ОсновнаяСтруктураИерархии",Истина);
	
	ЗаполнитьРеквизитыШапки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы
&НаКлиенте
Процедура ОтборПоОРПриИзменении(Элемент)
	Элементы.ОтборПоОРВидСравнения.Доступность = ОтборПоОР;
	Элементы.ОтборПоОРЗначение.Доступность = ОтборПоОР;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВРПриИзменении(Элемент)
	Элементы.ОтборПоВРВидСравнения.Доступность = ОтборПоВР;
	Элементы.ОтборПоВРЗначение.Доступность = ОтборПоВР;
КонецПроцедуры

&НаКлиенте
Процедура ДиаграммаОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	Если ТипЗнч(Расшифровки) = Тип("Массив") Тогда
		
		СтандартнаяОбработка = Ложь;
		Расшифровка = Расшифровки[Расшифровки.Количество()-1];
		ПоказатьЗначение(Неопределено, Расшифровка[Расшифровка.Количество()-1]);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьИерархиюПриИзменении(Элемент)
	Элементы.ИерархияОР.Доступность = ОтображатьИерархию;
КонецПроцедуры

&НаКлиенте
Процедура ПолосаРегулированияДиаграммыГантаПриИзменении(Элемент)
	Если ПолосаРегулированияДиаграммыГанта < 1 Тогда
		Диаграмма.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.ВсеДанные;
	Иначе
		Диаграмма.ПоддержкаМасштаба 				= ПоддержкаМасштабаДиаграммыГанта.Период;
		Диаграмма.ЕдиницаПериодическогоВарианта 	= ТипЕдиницыШкалыВремени["День"];
		Диаграмма.КратностьПериодическогоВарианта 	= ПолосаРегулированияДиаграммыГанта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОРВидСравненияПриИзменении(Элемент)
	
	Если ОтборПоОРВидСравнения = ВидСравнения.Равно ИЛИ ОтборПоОРВидСравнения = ВидСравнения.НеРавно Тогда
		Если ОтборПоОРЗначение = Неопределено Тогда
			
			ОтборПоОРЗначение = ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка");
			
		ИначеЕсли ТипЗнч(ОтборПоОРЗначение) = Тип("СписокЗначений") Тогда
			
			ОтборПоОРЗначение = ?(ОтборПоОРЗначение.Количество(),ОтборПоОРЗначение[0].Значение, ПредопределенноеЗначение("Справочник.торо_ОбъектыРемонта.ПустаяСсылка"));
			
		КонецЕсли;
	Иначе
		Если ОтборПоОРЗначение <> Тип("СписокЗначений") Тогда
			
			ОтборПоОРЗначение = Новый СписокЗначений;
			ОтборПоОРЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.торо_ОбъектыРемонта");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВРВидСравненияПриИзменении(Элемент)
	
	Если ОтборПоВРВидСравнения = ВидСравнения.Равно ИЛИ ОтборПоВРВидСравнения = ВидСравнения.НеРавно Тогда
		Если ОтборПоВРЗначение = Неопределено Тогда
			
			ОтборПоВРЗначение = ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка");
			
		ИначеЕсли ТипЗнч(ОтборПоВРЗначение) = Тип("СписокЗначений") Тогда
			
			ОтборПоВРЗначение = ?(ОтборПоВРЗначение.Количество(),ОтборПоВРЗначение[0].Значение, ПредопределенноеЗначение("Справочник.торо_ВидыРемонтов.ПустаяСсылка"));
			
		КонецЕсли;
	Иначе
		Если ОтборПоВРЗначение <> Тип("СписокЗначений") Тогда
			
			ОтборПоВРЗначение = Новый СписокЗначений;
			ОтборПоВРЗначение.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.торо_ВидыРемонтов");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УправлениеВнешнимВидомФормы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СортироватьПоОР(Команда)
	СортироватьПоОР = НЕ СортироватьПоОР;
	Элементы.СортироватьПоОР.Пометка = СортироватьПоОР;
КонецПроцедуры

&НаКлиенте
Процедура Сформировать(Команда)
	
	Если НЕ ЗначениеЗаполнено(ДатаНач) ИЛИ НЕ ЗначениеЗаполнено(ДатаКон) Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заполнен период отчета!'"));
		Возврат;
		
	ИначеЕсли (ДатаНач > ДатаКон) или (ДатаНач <= Дата("10000101000000")) или (ДатаКон >= Дата("30000101000000")) Тогда
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Неправильно установлен период отчета, возможно дата окончания меньше даты начала, дата больше 3000 года или меньше 1000.'"));
		Возврат;
		
	ИначеЕсли ОтображатьИерархию И НЕ ЗначениеЗаполнено(ИерархияОР) Тогда 
		
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не выбрана иерархия для отображения.'"));
		Возврат;
		
	КонецЕсли;
	
	СформироватьНаСервере(Неопределено, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗамещенные(Команда)
	ОтображатьЗамещенные = НЕ ОтображатьЗамещенные;
	Элементы.ФормаОтображатьЗамещенные.Пометка = ОтображатьЗамещенные;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакИзображение(Команда)
	
	Если Диаграмма.Точки.Количество() = 0 ИЛИ Диаграмма.Серии.Количество() = 0 Тогда
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Для сохранения отчета его необходимо сформировать.'"));
		Возврат;
	Иначе
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Формат PNG (*.png)|*.png|'")
		+ НСтр("ru = 'Формат JPEG (*.jpg)|*.jpg|'")
		+ НСтр("ru = 'Формат TIFF (*.tif)|*.tif|'")
		+ НСтр("ru = 'Формат GIF (*.gif)|*.gif|'")
		+ НСтр("ru = 'Формат BMP (*.bmp)|*.bmp|'");
		Если ДиалогВыбораФайла.Выбрать() Тогда
			Попытка
				ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
				Картинка = Диаграмма.ПолучитьКартинку(Элементы.Диаграмма.Ширина*15,Элементы.Диаграмма.Высота*15,ФорматКартинки[Прав(ИмяФайла,3)]);
				Картинка.Записать(ИмяФайла);
			Исключение
				торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать файл!'"));
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДиаграммы(Команда)
	
	ТД = ПолучитьТабличныйДокумент();
	ТД.Показать(НСтр("ru = 'Сводная диаграмма графиков ППР'"));
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
&НаСервере
Процедура СформироватьНаСервере(ЭлементВыводаДиаграммы, ДиаграммаДляОтчета)
	
	Если ЭлементВыводаДиаграммы = Неопределено Тогда
		ЭлементВыводаДиаграммы = Диаграмма;
	КонецЕсли;
	ЭлементВыводаДиаграммы.Очистить();
	
	Если НЕ ОтображатьИерархию Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТаблОбъектовРем.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		               |	ТаблОбъектовРем.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	ТаблОбъектовРем.ОбъектРемонтныхРабот.Родитель КАК Родитель,
		               |	ТаблОбъектовРем.ДатаНачалаРемонтныхРабот КАК ДатаНач,
		               |	ТаблОбъектовРем.ДатаОкончанияРемонтныхРабот КАК ДатаКон,
		               |	ТаблОбъектовРем.Регистратор КАК ДокументППР,
		               |	ТаблОбъектовРем.ID КАК ID,
		               |	ТаблОбъектовРем.Замещен,
		               |	ТаблОбъектовРем.Отменен,
		               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаНачСт,
		               |	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаКонСт,
		               |	ЛОЖЬ КАК ЗамещенСт,
		               |	ЛОЖЬ КАК ЕстьВЗ,
		               |	ЛОЖЬ КАК ЕстьДвиженияПоВЗ,
		               |	ИСТИНА КАК ДоступенДляРедактирования,
					   |	0 КАК НомерОР
					   |ИЗ
		               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(, ДатаНачалаРемонтныхРабот МЕЖДУ &ПолеВводаДатаНачала И &ПолеВводаДатаКонца) КАК ТаблОбъектовРем
		               |ГДЕ
		               |	НЕ ТаблОбъектовРем.Отменен
		               |	И (&ПоказыватьЗамещенные
		               |			ИЛИ НЕ ТаблОбъектовРем.Замещен) &&БлокОтборов";
		
	Иначе
					   
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ТаблОбъектовРем.ОбъектРемонтныхРабот КАК ОбъектРемонтныхРабот,
		               |	ТаблОбъектовРем.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
		               |	ТаблОбъектовРем.ОбъектРемонтныхРабот.Родитель КАК Родитель,
		               |	ТаблОбъектовРем.ДатаНачалаРемонтныхРабот КАК ДатаНач,
		               |	ТаблОбъектовРем.ДатаОкончанияРемонтныхРабот КАК ДатаКон,
		               |	ТаблОбъектовРем.Регистратор КАК ДокументППР,
		               |	ТаблОбъектовРем.ID КАК ID,
		               |	ТаблОбъектовРем.Замещен,
		               |	ТаблОбъектовРем.Отменен,
		               |	ИСТИНА КАК ДоступенДляРедактирования
					   |ПОМЕСТИТЬ ТаблОбъектовРем
					   |ИЗ
		               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних(, ДатаНачалаРемонтныхРабот МЕЖДУ &ПолеВводаДатаНачала И &ПолеВводаДатаКонца) КАК ТаблОбъектовРем
		               |ГДЕ
		               |	НЕ ТаблОбъектовРем.Отменен
		               |	И (&ПоказыватьЗамещенные
		               |			ИЛИ НЕ ТаблОбъектовРем.Замещен) &&БлокОтборов";
					   
		Если Не ИерархияОР.ИзменяетсяДокументами Тогда  
			Запрос.Текст = Запрос.Текст +"; 	 
			|ВЫБРАТЬ
			|	торо_ИерархическиеСтруктурыОР.ОбъектИерархии,
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии,
			|	торо_ИерархическиеСтруктурыОР.РодительИерархии
			|ПОМЕСТИТЬ таблИерСтруктуры
			|ИЗ
			|	РегистрСведений.торо_ИерархическиеСтруктурыОР КАК торо_ИерархическиеСтруктурыОР
			|ГДЕ
			|	торо_ИерархическиеСтруктурыОР.СтруктураИерархии = &СтруктураИерархии
			|;
			| ";
		Иначе
			Запрос.Текст = Запрос.Текст +"; 	 
			|ВЫБРАТЬ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.ОбъектИерархии,
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии,
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.РодительИерархии
			|ПОМЕСТИТЬ таблИерСтруктуры
			|ИЗ
			|	РегистрСведений.торо_РасположениеОРВСтруктуреИерархии.СрезПоследних КАК торо_РасположениеОРВСтруктуреИерархииСрезПоследних
			|ГДЕ
			|	торо_РасположениеОРВСтруктуреИерархииСрезПоследних.СтруктураИерархии = &СтруктураИерархии
			|;
			| ";
			
		КонецЕсли;  
			
		Запрос.Текст = Запрос.Текст +"ВЫБРАТЬ
         |	таблИерСтруктуры.РодительИерархии,
         |	таблИерСтруктуры.ОбъектИерархии КАК ОбъектРемонтныхРабот,
         |	ТаблОбъектовРем.ВидРемонтныхРабот КАК ВидРемонтныхРабот,
         |	ТаблОбъектовРем.ДатаНач,
         |	ТаблОбъектовРем.ДатаКон,
         |	таблИерСтруктуры.СтруктураИерархии,
         |	ТаблОбъектовРем.ДокументППР,
         |	ТаблОбъектовРем.ID,
         |	ТаблОбъектовРем.Замещен,
         |	ТаблОбъектовРем.Отменен,
		 |	ЕСТЬNULL(ТаблОбъектовРем.ДоступенДляРедактирования, ЛОЖЬ) КАК ИскомыйОР
		 |ИЗ
         |	таблИерСтруктуры КАК таблИерСтруктуры
         |		ЛЕВОЕ СОЕДИНЕНИЕ ТаблОбъектовРем КАК ТаблОбъектовРем
         |		ПО таблИерСтруктуры.ОбъектИерархии = ТаблОбъектовРем.ОбъектРемонтныхРабот";
					   
	КонецЕсли;
	
	
	БлокОтборов = "";
	Если ОтборПоОР Тогда
		Если ОтборПоОРЗначение <> Неопределено Тогда
			
			Если ОтборПоОРВидСравнения = ВидСравнения.Равно Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ОбъектРемонтныхРабот = &ПолеВводаОбъектРемонта";			
			ИначеЕсли ОтборПоОРВидСравнения = ВидСравнения.НеРавно Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ОбъектРемонтныхРабот <> &ПолеВводаОбъектРемонта";
			ИначеЕсли ОтборПоОРВидСравнения = ВидСравнения.ВСписке Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ОбъектРемонтныхРабот В (&ПолеВводаОбъектРемонта)";
			ИначеЕсли ОтборПоОРВидСравнения = ВидСравнения.НеВСписке Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ОбъектРемонтныхРабот НЕ В (&ПолеВводаОбъектРемонта)";
			ИначеЕсли ОтборПоОРВидСравнения = ВидСравнения.ВИерархии Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ОбъектРемонтныхРабот В ИЕРАРХИИ (&ПолеВводаОбъектРемонта)";
			ИначеЕсли ОтборПоОРВидСравнения = ВидСравнения.НеВИерархии Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ОбъектРемонтныхРабот НЕ В ИЕРАРХИИ (&ПолеВводаОбъектРемонта)";
			ИначеЕсли ОтборПоОРВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ОбъектРемонтныхРабот В ИЕРАРХИИ (&ПолеВводаОбъектРемонта)";
			ИначеЕсли ОтборПоОРВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ОбъектРемонтныхРабот НЕ В Иерархии (&ПолеВводаОбъектРемонта)";
			КонецЕсли;  
		Иначе
			БлокОтборов = БлокОтборов + " И	 
			|  ТаблОбъектовРем.ОбъектРемонтныхРабот = Значение(Справочник.торо_ОбъектыРемонта.ПустаяСсылка)"; 
		КонецЕсли;
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////  	
	Если Не Подразделение.Пустая() Тогда
		БлокОтборов = БлокОтборов + " И	 
		|  ТаблОбъектовРем.ОбъектРемонтныхРабот.Подразделение = &ПолеВводаПодразделение";
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////  	
	Если ОтборПоВР Тогда
		Если ОтборПоВРЗначение <> Неопределено Тогда
			
			Если ОтборПоВРВидСравнения = ВидСравнения.Равно Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ВидРемонтныхРабот = &ПолеВводаВидРемонта";
			ИначеЕсли ОтборПоВРВидСравнения = ВидСравнения.НеРавно Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ВидРемонтныхРабот <> &ПолеВводаВидРемонта";
			ИначеЕсли ОтборПоВРВидСравнения = ВидСравнения.ВСписке Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ВидРемонтныхРабот В (&ПолеВводаВидРемонта)";
			ИначеЕсли ОтборПоВРВидСравнения = ВидСравнения.НеВСписке Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ВидРемонтныхРабот НЕ В (&ПолеВводаВидРемонта)";
			ИначеЕсли ОтборПоВРВидСравнения = ВидСравнения.ВИерархии Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ВидРемонтныхРабот В ИЕРАРХИИ (&ПолеВводаВидРемонта)";
			ИначеЕсли ОтборПоВРВидСравнения = ВидСравнения.НеВИерархии Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ВидРемонтныхРабот НЕ В ИЕРАРХИИ (&ПолеВводаВидРемонта)";
			ИначеЕсли ОтборПоВРВидСравнения = ВидСравнения.ВСпискеПоИерархии Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ВидРемонтныхРабот В ИЕРАРХИИ (&ПолеВводаВидРемонта)";
			ИначеЕсли ОтборПоВРВидСравнения = ВидСравнения.НеВСпискеПоИерархии Тогда
				БлокОтборов = БлокОтборов + " И	 
				|  ТаблОбъектовРем.ВидРемонтныхРабот НЕ В ИЕРАРХИИ (&ПолеВводаВидРемонта)";
			КонецЕсли; 		
		Иначе
			БлокОтборов = БлокОтборов + " И	 
			|  ТаблОбъектовРем.ВидРемонтныхРабот = Значение(Справочник.торо_ВидыРемонтов.ПустаяСсылка)";		
		КонецЕсли;	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПолеВводаОбъектРемонта", ОтборПоОРЗначение);
	Запрос.УстановитьПараметр("ПолеВводаПодразделение", Подразделение);
	Запрос.УстановитьПараметр("ПолеВводаВидРемонта",    ОтборПоВРЗначение);
	Запрос.УстановитьПараметр("СтруктураИерархии",      ИерархияОР); 
	Запрос.УстановитьПараметр("ПолеВводаДатаНачала",    ДатаНач);
	Запрос.УстановитьПараметр("ПолеВводаДатаКонца",     ДатаКон);
	Запрос.УстановитьПараметр("ПоказыватьЗамещенные",	ОтображатьЗамещенные);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"&&БлокОтборов",БлокОтборов);
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Если НЕ ОтображатьИерархию Тогда
			торо_Ремонты.ПостроитьДиаграммуГантаДляППР(ЭлементВыводаДиаграммы,РезультатЗапроса.Выгрузить(),?(ОтображатьИерархию,ИерархияОР,Справочники.торо_СтруктурыОР.ПустаяСсылка()),ОтображатьИерархию,,,,Ложь,,ДиаграммаДляОтчета,СортироватьПоОР);
		Иначе
			ТаблицаИерерахии = РезультатЗапроса.Выгрузить();
			ДеревоОР = Новый ДеревоЗначений;
			Для Каждого Колонка Из ТаблицаИерерахии.Колонки Цикл
				ДеревоОР.Колонки.Добавить(Колонка.Имя);
			КонецЦикла;
			ЗаполнитьДеревоОР(ТаблицаИерерахии,ДеревоОР);
			
			СерияРемонт = ЭлементВыводаДиаграммы.Серии.Добавить();
			СерияРемонт.Текст = "График ремонта";
			
			Для Каждого СтрокаВерхнегоУровня Из ДеревоОР.Строки Цикл
				ДобавитьТочкуВДиаграмму(СтрокаВерхнегоУровня, ЭлементВыводаДиаграммы, СерияРемонт, ЭлементВыводаДиаграммы);
			КонецЦикла;
				
		КонецЕсли;
	КонецЕсли;
	
	ЭлементВыводаДиаграммы.АвтоОпределениеПолногоИнтервала = Ложь;
 	ЭлементВыводаДиаграммы.УстановитьПолныйИнтервал(НачалоДня(ДатаНач), КонецДня(ДатаКон));  
 	ЭлементВыводаДиаграммы.ОтображатьЛегенду = Ложь;

КонецПроцедуры

&НаСервере
Процедура ДобавитьТочкуВДиаграмму(СтрокаДерева, ТочкаДиаграммы, Серия, ЭлементВыводаДиаграммы)
	
	Если СтрокаДерева.ИскомыйОР Тогда
		ТекДата = ТекущаяДата();
		
		Значение = ЭлементВыводаДиаграммы.ПолучитьЗначение(ТочкаДиаграммы, Серия);
		Интервал = Значение.Добавить();
		
		Интервал.Начало = СтрокаДерева.ДатаНач;
		Интервал.Конец  = КонецДня(?(СтрокаДерева.ДатаКон > СтрокаДерева.ДатаНач, СтрокаДерева.ДатаКон, СтрокаДерева.ДатаНач + 3600));
		Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Интервал.Цвет = ?(СтрокаДерева.ДатаНач < ТекДата, WebЦвета.Черный, WebЦвета.Васильковый);
		
		Для Каждого Точка1 Из ТочкаДиаграммы.Точки Цикл
			Если Точка1.Расшифровка = СтрокаДерева.ВидРемонтныхРабот Тогда
				ТочкаДиаграммы1 = Точка1;
				Прервать;
			КонецЕсли;
		КонецЦикла;		
		
		Если ТочкаДиаграммы1 = Неопределено Тогда
			ТочкаДиаграммы1 = ТочкаДиаграммы.Точки.Добавить();
			ТочкаДиаграммы1.Текст = СокрЛП(СтрокаДерева.ВидРемонтныхРабот);
			ТочкаДиаграммы1.Расшифровка = СтрокаДерева.ВидРемонтныхРабот;
		КонецЕсли;

		Значение = ЭлементВыводаДиаграммы.ПолучитьЗначение(ТочкаДиаграммы1, Серия);
		Интервал = Значение.Добавить();
		Интервал.Начало = СтрокаДерева.ДатаНач;
		Интервал.Конец  = КонецДня(?(СтрокаДерева.ДатаКон > СтрокаДерева.ДатаНач, СтрокаДерева.ДатаКон, СтрокаДерева.ДатаНач + 3600));
		Интервал.Текст  = Строка(Интервал.Начало) + " - " + Строка(Интервал.Конец);
		Интервал.Цвет = ?(СтрокаДерева.ДатаНач < ТекДата, WebЦвета.Черный, WebЦвета.Васильковый);
	Иначе
		ТочкаДиаграммы1 = ТочкаДиаграммы.Точки.Добавить();
					
		ТочкаДиаграммы1.Текст = СокрЛП(СтрокаДерева.ОбъектРемонтныхРабот);
		ТочкаДиаграммы1.Расшифровка = СтрокаДерева.ОбъектРемонтныхРабот;
		
		Для Каждого СтрокаДерева1 Из СтрокаДерева.Строки Цикл
			ДобавитьТочкуВДиаграмму(СтрокаДерева1, ТочкаДиаграммы1, Серия, ЭлементВыводаДиаграммы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьДеревоОР(ТаблицаИерархии,ДеревоОР)
	ИскомыеОР = ТаблицаИерархии.НайтиСтроки(Новый Структура("ИскомыйОР",Истина));

	Для Каждого ИскомыйОР Из ИскомыеОР Цикл
		ДобавитьСтрокуВДерево(ИскомыйОР,ТаблицаИерархии,ДеревоОР);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьСтрокуВДерево(СтрокаОР,ТаблицаИерархии,ДеревоОР,СтрокиДерева = Неопределено)
		
	СтрокаРодителяТЗ = ТаблицаИерархии.Найти(СтрокаОР.РодительИерархии,"ОбъектРемонтныхРабот");
	Если СтрокаРодителяТЗ <> Неопределено Тогда
		ДобавитьСтрокуВДерево(СтрокаРодителяТЗ,ТаблицаИерархии,ДеревоОР,СтрокиДерева);
	Конецесли;
	
	СуществующиеСтроки = ДеревоОР.Строки.НайтиСтроки(Новый Структура("ОбъектРемонтныхРабот,ИскомыйОР",СтрокаОР.ОбъектРемонтныхРабот,Ложь),Истина);
	
	Если СуществующиеСтроки.Количество() Тогда
		НоваяСтрока = СуществующиеСтроки[0];
		Если СтрокаОР.ИскомыйОР Тогда
			НоваяСтрока = НоваяСтрока.Строки.Добавить();
		КонецЕсли;
	Иначе
		СуществующиеСтрокиРодители = ДеревоОР.Строки.НайтиСтроки(Новый Структура("ОбъектРемонтныхРабот",СтрокаОР.РодительИерархии),Истина);	
		Если СуществующиеСтрокиРодители.Количество() Тогда
			Если СтрокаОР.ИскомыйОР Тогда
				НоваяСтрока = СуществующиеСтрокиРодители[0].Строки.Добавить();
				НоваяСтрока.ОбъектРемонтныхРабот = СтрокаОР.ОбъектРемонтныхРабот;
				НоваяСтрока.РодительИерархии = СтрокаОР.РодительИерархии;
				НоваяСтрока.ИскомыйОР = Ложь;
				НоваяСтрока = НоваяСтрока.Строки.Добавить();
			Иначе
				НоваяСтрока = СуществующиеСтрокиРодители[0].Строки.Добавить();
			КонецЕсли;
		Иначе	
			Если СтрокиДерева = Неопределено Тогда
				Если СтрокаОР.ИскомыйОР Тогда
					НоваяСтрока = ДеревоОР.Строки.Добавить();
					НоваяСтрока.ОбъектРемонтныхРабот = СтрокаОР.ОбъектРемонтныхРабот;
					НоваяСтрока.РодительИерархии = СтрокаОР.РодительИерархии;
					НоваяСтрока.ИскомыйОР = Ложь;
					НоваяСтрока = НоваяСтрока.Строки.Добавить();
				Иначе
					НоваяСтрока = ДеревоОР.Строки.Добавить();
				КонецЕсли;
			Иначе
				Если СтрокаОР.ИскомыйОР Тогда
					НоваяСтрока = СтрокиДерева.Добавить();
					НоваяСтрока.ОбъектРемонтныхРабот = СтрокаОР.ОбъектРемонтныхРабот;
					НоваяСтрока.РодительИерархии = СтрокаОР.РодительИерархии;
					НоваяСтрока.ИскомыйОР = Ложь;
					СтрокиДерева = НоваяСтрока.Строки;
				КонецЕсли;
				НоваяСтрока = СтрокиДерева.Добавить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаОР);
	СтрокиДерева = НоваяСтрока.Строки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбора(Список)
	
	Список.Добавить(ВидСравнения.Равно, "Равно");   
	Список.Добавить(ВидСравнения.НеРавно, "Не равно");
	Список.Добавить(ВидСравнения.ВСписке, "В списке");
	Список.Добавить(ВидСравнения.НеВСписке, "Не в списке"); 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабличныйДокумент()
	
	ТД = Новый ТабличныйДокумент;
	
	МакетОтчета = Отчеты.торо_СводнаяДиаграммаГрафиковППР.ПолучитьМакет("Макет");
	
	ОсновнаяЧасть = МакетОтчета.ПолучитьОбласть("ОсновнаяЧасть");
	
	СформироватьНаСервере(ОсновнаяЧасть.Рисунки.D1.Объект, Истина);
	
	ОсновнаяЧасть.Рисунки.D1.Объект.ВертикальнаяПрокрутка = Истина;
	ОсновнаяЧасть.Рисунки.D1.Объект.ПоддержкаМасштаба = ПоддержкаМасштабаДиаграммыГанта.Период;
	ОсновнаяЧасть.Рисунки.D1.Объект.ЕдиницаПериодическогоВарианта = ТипЕдиницыШкалыВремени.Месяц;
	ОсновнаяЧасть.Рисунки.D1.Объект.КратностьПериодическогоВарианта = Месяц(ДатаКон) - Месяц(ДатаНач) + 1;
	
	Для каждого ТочкаДиаграммыГанта из ОсновнаяЧасть.Рисунки.D1.Объект.Точки Цикл
		ОсновнаяЧасть.Рисунки.D1.Объект.РазвернутьТочку(ТочкаДиаграммыГанта, Истина);
	КонецЦикла;
	
	ТД.ПолеСверху = 5;
	ТД.ПолеСлева = 5;
	ТД.ПолеСправа = 5;
	ТД.ПолеСнизу = 5;
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ТД.Вывести(ОсновнаяЧасть);
	
	Возврат ТД;
	
КонецФункции

&НаСервере 
Процедура ЗаполнитьРеквизитыШапки()
	
	струкПараметров = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастрйокиТОиР", "ПараметрыОтчета_СводнаяДиаграммаГрафиковППР", Неопределено);
	Если струкПараметров <> Неопределено Тогда
		
		струкПараметров.Свойство("ОтборПоОР", ОтборПоОР);
		струкПараметров.Свойство("ОтборПоОРВидСравнения", ОтборПоОРВидСравнения);
		струкПараметров.Свойство("ОтборПоОРЗначение", ОтборПоОРЗначение);
		
		струкПараметров.Свойство("ОтборПоВР",ОтборПоВР);
		струкПараметров.Свойство("ОтборПоВРВидСравнения",ОтборПоВРВидСравнения);
		струкПараметров.Свойство("ОтборПоВРЗначение",ОтборПоВРЗначение);
		
		струкПараметров.Свойство("ОтображатьИерархию",ОтображатьИерархию);
		струкПараметров.Свойство("ИерархияОР", ИерархияОР);
		
		струкПараметров.Свойство("Подразделение", Подразделение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВнешнимВидомФормы()
	Элементы.ОтборПоОРВидСравнения.Доступность = ОтборПоОР;
	Элементы.ОтборПоОРЗначение.Доступность = ОтборПоОР;
	
	Элементы.ОтборПоВРВидСравнения.Доступность = ОтборПоВР;
	Элементы.ОтборПоВРЗначение.Доступность = ОтборПоВР;
	
	Элементы.ИерархияОР.Доступность = ОтображатьИерархию;
КонецПроцедуры

&НаСервере 
Процедура ПриЗакрытииНаСервере()
	струкПараметров = Новый Структура(
		"ОтборПоОР, ОтборПоОРВидСравнения, ОтборПоОРЗначение, ОтборПоВР, ОтборПоВРВидСравнения, 
			|ОтборПоВРЗначение, ОтображатьИерархию, ИерархияОР, Подразделение",
		ОтборПоОР, ОтборПоОРВидСравнения, ОтборПоОРЗначение, ОтборПоВР, ОтборПоВРВидСравнения, 
			ОтборПоВРЗначение, ОтображатьИерархию, ИерархияОР, Подразделение);

	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастрйокиТОиР", "ПараметрыОтчета_СводнаяДиаграммаГрафиковППР", струкПараметров)	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если НЕ ЗавершениеРаботы Тогда
		ПриЗакрытииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти