&НаСервере 
Перем УИДСхемы;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЭтаФорма.Период.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ЭтаФорма.Период.ДатаНачала = НачалоГода(ТекущаяДата());
	ЭтаФорма.Период.ДатаОкончания = КонецГода(ТекущаяДата());
	
	Элементы.ГруппаПравая.Видимость = Истина;
	
	отчОбъект = РеквизитФормыВЗначение("Отчет");
	
	Схема = отчОбъект.СхемаКомпоновкиДанных;
	Вариант = Схема.ВариантыНастроек.Основной.Настройки;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	УИДСхемы = Новый УникальныйИдентификатор();
	АдресСхемы = ПоместитьВоВременноеХранилище(Схема, УИДСхемы); 
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));	
	КомпоновщикНастроек.ЗагрузитьНастройки(Вариант);	
	
	ЭтаФорма.Отбор = КомпоновщикНастроек;
	
	ЗагрузитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сформировать(Команда)

	Если Отчет.СкрыватьНастройкиПриФормировании Тогда
		Элементы.ГруппаПравая.Видимость = Ложь;
	КонецЕсли;
	
	ОчиститьСообщения();
	СформироватьОтчет();
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПанельНастроек(Команда)
	Элементы.ГруппаПравая.Видимость = не Элементы.ГруппаПравая.Видимость;
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	Для каждого текПоказатель из ЭтаФорма.Показатели Цикл
		текПоказатель.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	Для каждого текПоказатель из ЭтаФорма.Показатели Цикл
		текПоказатель.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ТипПоказателяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ЭтаФорма.ТипПоказателя Тогда
		возврат;
	КонецЕсли;
	
	сз = ЗаполнитьПоказатели(ВыбранноеЗначение);
	ОбработкаВыбораПоказателей(Неопределено, сз);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьСортировкуПриИзменении(Элемент)
	Элементы.ВыбратьСтолько.Доступность = ?(ВыбратьСортировку = "-", Ложь, Истина);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьОтчет()
	
	ТабличныйДокумент.Очистить();
	
	тзПоказатели = ПолучитьДеталиПоказателей();
	Если тзПоказатели.Пустой() Тогда
		возврат;
	КонецЕсли;
	
	Выборка = тзПоказатели.Выбрать();
	МакетШапки = Отчет.РеквизитМакет;
	облШапка = МакетШапки.ПолучитьОбласть("ШапкаОтчета");
	
	Пока Выборка.следующий() цикл
		
		облШапка.параметры.ИмяОтчета = Выборка.Наименование;
		ТабличныйДокумент.Вывести(облШапка);
		
		текТД = РассчитатьОтчет(Выборка);
		ТабличныйДокумент.Вывести(текТД);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере 
Функция РассчитатьОтчет(ТекПоказатель)
	
	текТД = Новый ТабличныйДокумент;

	Попытка
		Если текПоказатель.УдалитьИспользоватьОтчет Тогда
			СКД = Отчеты[ТекПоказатель.Отчет].ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		ИначеЕсли ТекПоказатель.УдалитьИспользоватьЗапрос Тогда
			СКД = Отчеты.торо_УниверсальныйОтчетПоПоказателямKPI.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		Иначе 
			торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В показателе: %1 не указан ни отчет, ни запрос.'"),ТекПоказатель.Наименование));
			возврат текТД;
		КонецЕсли;
	Исключение
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отчёт с внутренним именем: %1 не найден.'"),ТекПоказатель.Отчет));
		возврат текТД;
	КонецПопытки;
	
	Попытка
		Если ТекПоказатель.УдалитьИспользоватьОтчет Тогда
			Вариант = СКД.ВариантыНастроек[ТекПоказатель.УдалитьВариант].Настройки;
		Иначе
			Вариант = СКД.ВариантыНастроек[ТекПоказатель.УдалитьВариант].Настройки;
		КонецЕсли;
	Исключение
		торо_ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'В отчёте %1 не найден вариант с внутренним именем: %2'"),ТекПоказатель.Отчет,ТекПоказатель.УдалитьВариант));
		возврат текТД;
	КонецПопытки;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	КомпоновщикНастроек.ЗагрузитьНастройки(Вариант);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ТекПоказатель.УдалитьИспользоватьЗапрос Тогда
		скд.НаборыДанных.НаборДанных1.Запрос = ТекПоказатель.УдалитьТекстЗапроса;
	КонецЕсли;
	
	ПериодОтчета = Настройки.ПараметрыДанных.Элементы.найти("ПериодОтчета");
	Если ПериодОтчета <> Неопределено Тогда
		ПериодОтчета.Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		ПериодОтчета.Значение.ДатаНачала = ЭтаФорма.Период.ДатаНачала;
		ПериодОтчета.Значение.ДатаОкончания = ЭтаФорма.Период.ДатаОкончания;
	КонецЕсли;
	
	пНаименование = СКД.Параметры.Найти("Наименование");
	Если пНаименование <> Неопределено Тогда
		пНаименование.Значение = ТекПоказатель.Наименование;
	КонецЕсли;
	
	Если ЭтаФорма.ВыбратьСортировку <> "-"
		Тогда 
		МассивЗапросов = РазобратьЗапросПоВТ(скд.НаборыДанных.НаборДанных1.Запрос);
		
		НаправлениеВозрастание = ?(ЭтаФорма.ВыбратьСортировку = "Лучшие", Ложь, Истина);
		ДобавитьВЗапросСортировку(НаправлениеВозрастание, МассивЗапросов);
		
		ДобавитьВЗапросОграничениеНаКоличествоЗаписей(ЭтаФорма.ВыбратьСтолько, МассивЗапросов);
		
		скд.НаборыДанных.НаборДанных1.Запрос = СобратьЗапросИзМассива(МассивЗапросов);
	КонецЕсли;
	
	Для каждого текОтбор из ЭтаФорма.Отбор.Настройки.Отбор.Элементы Цикл
		Для каждого текЭлем из Настройки.Отбор.ДоступныеПоляОтбора.Элементы цикл
			Если текОтбор.Использование И текЭлем.поле = текОтбор.ЛевоеЗначение Тогда
				нэо = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(нэо, текОтбор);
				нэо.Использование = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ПереименоватьПоле(СКД.НаборыДанных.НаборДанных1.Поля, "ФактическоеЗначение", ТекПоказатель.ЕдИзм);
	ПереименоватьПоле(СКД.НаборыДанных.НаборДанных1.Поля, "ЦелевоеЗначение", ТекПоказатель.ЕдИзм);
	ПереименоватьПоле(СКД.НаборыДанных.НаборДанных1.Поля, "Отклонение", "%");
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Настройки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,,Истина);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(текТД);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	возврат текТД;
	
КонецФункции

&НаСервере 
Процедура ПереименоватьПоле(ПоляСхемы, ИмяПоля, ЕдИзм)
	ТекПоле = ПоляСхемы.Найти(ИмяПоля);
	Если ТекПоле <> Неопределено Тогда
		ТекПоле.Заголовок = ТекПоле.Заголовок + ", " + ЕдИзм;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДеталиПоказателей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПоказателиKPI.Ссылка,
	               |	торо_ПоказателиKPI.Отчет,
	               |	торо_ПоказателиKPI.УдалитьВариант,
	               |	торо_ПоказателиKPI.Наименование,
	               |	торо_ПоказателиKPI.ЕдиницаИзмерения.Наименование КАК ЕдИзм,
	               |	торо_ПоказателиKPI.УдалитьТекстЗапроса,
	               |	торо_ПоказателиKPI.УдалитьИспользоватьЗапрос,
	               |	торо_ПоказателиKPI.УдалитьИспользоватьОтчет
	               |ИЗ
	               |	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	               |ГДЕ
	               |	торо_ПоказателиKPI.Ссылка В(&СписокПоказателей)";
				   
	мСписок = Новый Массив;
	Для каждого текСтрока из ЭтаФорма.Показатели цикл
		Если ТекСтрока.Пометка Тогда
			мСписок.Добавить(ТекСтрока.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СписокПоказателей", мСписок);
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

&НаСервере 
Функция РазобратьЗапросПоВТ(ТекстЗапросаИзначальный)
	
	ТекстЗапроса = Сред(ТекстЗапросаИзначальный, 0);
	
	Разделитель = "////////////////////////////////////////////////////////////////////////////////";
	
	МассивЗапросов = Новый Массив;
	Пока стрДлина(ТекстЗапроса) > 0 Цикл
		пос = Найти(ТекстЗапроса, Разделитель);
		Если пос = 0 Тогда
			МассивЗапросов.Добавить(ТекстЗапроса);
			ТекстЗапроса = "";
			прервать;
		КонецЕсли;	
		текЗапрос = Лев(ТекстЗапроса, пос - 1 + 80);
		ТекстЗапроса = Прав(ТекстЗапроса, СтрДлина(ТекстЗапроса) - (пос-1+80));
		МассивЗапросов.Добавить(текЗапрос);
	КонецЦикла;
	
	возврат МассивЗапросов;
	
КонецФункции

&НаСервере 
Процедура ДобавитьВЗапросСортировку(НаправлениеВозрастание, МассивЗапросов)
	
	ПредпоследнийЗапрос = МассивЗапросов[МассивЗапросов.Количество()-1];
	Направление = ?(НаправлениеВозрастание, " ВОЗР", " УБЫВ");
	
	пос = Найти(ПредпоследнийЗапрос, "УПОРЯДОЧИТЬ ПО");
	Если пос = 0 Тогда
		ПредпоследнийЗапрос = ПредпоследнийЗапрос + "
			|УПОРЯДОЧИТЬ ПО
			|	Отклонение" + Направление + Символы.ПС;
		
	Иначе
		перваяЧасть = Лев(ПредпоследнийЗапрос, пос-1+15);
		втораяЧасть = Сред(ПредпоследнийЗапрос, пос-1+15, стрДлина(ПредпоследнийЗапрос) - (пос-1+15));
		ПредпоследнийЗапрос = перваяЧасть +  "Отклонение" + Направление + "," + втораяЧасть;
	КонецЕсли;
	
	МассивЗапросов[МассивЗапросов.Количество()-1] = ПредпоследнийЗапрос;
	
КонецПроцедуры

&НаСервере  
Процедура ДобавитьВЗапросОграничениеНаКоличествоЗаписей(ВыбратьСтолько, МассивЗапросов)
	
	текЗапрос = МассивЗапросов[МассивЗапросов.количество()-1];
	
	пос = найти(текЗапрос, "ВЫБРАТЬ");
	Часть_1 = Лев(текЗапрос, пос-1+7);
	Часть_2 = Сред(текЗапрос, пос-1+7+1);
	текЗапрос = Часть_1 + " ПЕРВЫЕ " + ВыбратьСтолько + Часть_2;
	МассивЗапросов[МассивЗапросов.количество()-1] = текЗапрос;
	
КонецПроцедуры

&НаСервере  
Функция СобратьЗапросИзМассива(МассивЗапросов)
	
	ТекстЗапроса = "";
	Для каждого текЗапрос из МассивЗапросов цикл
		текстЗапроса = текстЗапроса + текЗапрос;
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ЗаполнитьПоказатели(пТипПоказателя)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	торо_ПоказателиKPI.Ссылка КАК Показатель
	               |ИЗ
	               |	Справочник.торо_ПоказателиKPI КАК торо_ПоказателиKPI
	               |ГДЕ
	               |	торо_ПоказателиKPI.ТипПоказателя = &ТипПоказателя";
	
	Запрос.УстановитьПараметр("ТипПоказателя", пТипПоказателя);
	Результат = Запрос.Выполнить();
	
	сз = Новый СписокЗначений;
	Если Результат.Пустой() Тогда
		возврат сз;
	КонецЕсли;
	
	Выборка = Результат.Выгрузить();
	
	Массив = Выборка.ВыгрузитьКолонку("Показатель");
	сз.ЗагрузитьЗначения(Массив);
	Возврат сз;
	
КонецФункции

&НаСервере
Процедура ОбработкаВыбораПоказателей(СписокПоказателей, Параметры, Пометка = Ложь)
	
	Показатели.Очистить();
	
	Если СписокПоказателей = Неопределено Тогда
		Для каждого текПоказатель из Параметры цикл
			нс = Показатели.Добавить();
			нс.Значение = текПоказатель.Значение;
			нс.Пометка = Пометка;
		КонецЦикла; 
	Иначе
		Для каждого текПоказатель из СписокПоказателей цикл
			нс = Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текПоказатель);
		КонецЦикла; 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура СохранитьНастройки()
	
	стрНастроек = Новый Структура;
	
	тзПоказатели = ЭтаФорма.Показатели.Выгрузить();
	
	тзОтбор = Новый ТаблицаЗначений;
	тзОтбор.Колонки.Добавить("ЛевоеЗначение");
	тзОтбор.Колонки.Добавить("Использование");
	тзОтбор.Колонки.Добавить("ПравоеЗначение");
	тзОтбор.Колонки.Добавить("ВидСравнения");
	
	Для каждого текСтрока из ЭтаФорма.Отбор.Настройки.Отбор.Элементы Цикл
		нс = тзОтбор.Добавить();
		ЗаполнитьЗначенияСвойств(нс, текСтрока);
	КонецЦикла;
	
	стрНастроек.Вставить("Период", ЭтаФорма.Период);
	стрНастроек.Вставить("ТипПоказателя", ЭтаФорма.ТипПоказателя);
	стрНастроек.Вставить("ВыбратьСортировку", ЭтаФорма.ВыбратьСортировку);
	стрНастроек.Вставить("ВыбратьСтолько", ЭтаФорма.ВыбратьСтолько);
	стрНастроек.Вставить("СкрыватьНастройкиПриФормировании", Отчет.СкрыватьНастройкиПриФормировании);
	стрНастроек.Вставить("ВидимостьПанелиНастроек", Элементы.ГруппаПравая.Видимость);
	стрНастроек.Вставить("Показатели", тзПоказатели);
	стрНастроек.Вставить("Отбор", тзОтбор);
	
	ИмяПользователя = ИмяПользователя();
	ХранилищеОбщихНастроек.Сохранить("ПанельОтчетов", ИмяПользователя,стрНастроек,,ИмяПользователя);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	ИмяПользователя = ИмяПользователя();
	стрНастроек = ХранилищеОбщихНастроек.Загрузить("ПанельОтчетов", ИмяПользователя,,ИмяПользователя);
	
	Если стрНастроек <> Неопределено Тогда
		Период = стрНастроек.Период;
		ТипПоказателя = стрНастроек.ТипПоказателя;
		ВыбратьСортировку  = стрНастроек.ВыбратьСортировку;
		ВыбратьСтолько = стрНастроек.ВыбратьСтолько;
		Отчет.СкрыватьНастройкиПриФормировании = стрНастроек.СкрыватьНастройкиПриФормировании;
		Элементы.ГруппаПравая.Видимость = стрНастроек.ВидимостьПанелиНастроек;

		Показатели.Очистить();
		Для каждого текСтрока из стрНастроек.Показатели цикл
			нс = Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока)
		КонецЦикла;
		
		Для каждого текСтрока из стрНастроек.Отбор цикл
			Отбор.Настройки.Отбор.Элементы.Очистить();
			нс = Отбор.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
		КонецЦикла;
		
	Иначе
		ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОрганизации;
		ВыбратьСортировку = "-";
		ВыбратьСтолько = 2;
		
		сз = ЗаполнитьПоказатели(ЭтаФорма.ТипПоказателя);
		ОбработкаВыбораПоказателей(Неопределено, сз, Истина);
	КонецЕсли;
	
	ОбновитьФорму(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьФорму(Объект)
	
	Элементы = Объект.Элементы;
	Форма = Объект.ЭтаФорма;
	
	Если Форма.ВыбратьСортировку <> "-" 
		или Форма.ВыбратьСортировку <> "Лучшие" 
		или Форма.ВыбратьСортировку <> "Худшие" 
		Тогда
		Форма.ВыбратьСортировку = "-";
	КонецЕсли;
		
	Элементы.ВыбратьСтолько.Доступность = ?(Форма.ВыбратьСортировку = "-", Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	стрНастроек = Настройки;
	
	Если стрНастроек <> Неопределено Тогда
		Период = стрНастроек["Период"];
		ТипПоказателя = стрНастроек["ТипПоказателя"];
		ВыбратьСортировку  = стрНастроек["ВыбратьСортировку"];
		ВыбратьСтолько = стрНастроек["ВыбратьСтолько"];
		Отчет.СкрыватьНастройкиПриФормировании = стрНастроек["Отчет.СкрыватьНастройкиПриФормировании"];
		Элементы.ГруппаПравая.Видимость = стрНастроек["ВидимостьПанелиНастроек"];

		Показатели.Очистить();
		Для каждого текСтрока из стрНастроек["Показатели"] цикл
			нс = Показатели.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока)
		КонецЦикла;
		
		Для каждого текСтрока из стрНастроек["Отбор"] цикл
			Отбор.Настройки.Отбор.Элементы.Очистить();
			нс = Отбор.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
		КонецЦикла;
		
	Иначе
		ТипПоказателя = Перечисления.торо_ТипыПоказателейKPI.ПоказательОрганизации;
		ВыбратьСортировку = "-";
		ВыбратьСтолько = 2;
		
		сз = ЗаполнитьПоказатели(ЭтаФорма.ТипПоказателя);
		ОбработкаВыбораПоказателей(Неопределено, сз, Истина);
	КонецЕсли;
	
	ОбновитьФорму(ЭтотОбъект);	
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если Настройки <> Неопределено Тогда
		тзОтбор = Новый ТаблицаЗначений;
		тзОтбор.Колонки.Добавить("ЛевоеЗначение");
		тзОтбор.Колонки.Добавить("Использование");
		тзОтбор.Колонки.Добавить("ПравоеЗначение");
		тзОтбор.Колонки.Добавить("ВидСравнения");
		
		Для каждого текСтрока из ЭтаФорма.Отбор.Настройки.Отбор.Элементы Цикл
			нс = тзОтбор.Добавить();
			ЗаполнитьЗначенияСвойств(нс, текСтрока);
		КонецЦикла;
		
		Настройки.Вставить("ВидимостьПанелиНастроек", Элементы.ГруппаПравая.Видимость);
		Настройки.Вставить("Отбор", тзОтбор);	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
