#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТабРезультата = ПолучитьТабЗначСРезультатомОтчета();
	
	// Сгенерируем макет компоновки данных при помощи компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКД = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	// В качестве схемы компоновки будет выступать схема самого отчета.
	// В качестве настроек отчета - текущие настройки отчета.
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКД, Настройки, ДанныеРасшифровки);
	
	// получаем внешние наборы данных
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("НаборДанных", ТабРезультата);
	
	// Создадим и инициализируем процессор компоновки.
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,ДанныеРасшифровки,Истина);
	

	// Создадим и инициализируем процессор вывода результата.
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;

	// выводим отчет
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция ПолучитьТабЗначСРезультатомОтчета()
	
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	
	Если Параметр = Неопределено Тогда
		
		ДатаНач = Дата(1,1,1);
		ДатаКон = Дата(3999,12,31);
		
	Иначе
		
		СтрокаПользовательскийПараметр = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(Параметр.ИдентификаторПользовательскойНастройки);
		
		Если СтрокаПользовательскийПараметр = Неопределено Тогда
			ДатаНач = Параметр.Значение.ДатаНачала;
			ДатаКон = Параметр.Значение.ДатаОкончания;
		Иначе
			ДатаНач = СтрокаПользовательскийПараметр.Значение.ДатаНачала;
			ДатаКон = СтрокаПользовательскийПараметр.Значение.ДатаОкончания;
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	НАЧАЛОПЕРИОДА(торо_ПланГрафикРемонтаПланРемонтов.ДатаОкончанияРемонтныхРабот, ДЕНЬ) КАК ПланируемаяДатаОкончанияРемонта,
	               |	НАЧАЛОПЕРИОДА(торо_ПланГрафикРемонтаПланРемонтов.ДатаНачалаРемонтныхРабот, ДЕНЬ) КАК ПланируемаяДатаНачалаРемонта,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ВидРемонтныхРабот КАК ВидРемонта,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ОбъектРемонтныхРабот КАК ОбъектРемонта,
	               |	торо_ПланГрафикРемонтаПланРемонтов.Регистратор,
	               |	торо_ПланГрафикРемонтаПланРемонтов.ID КАК ID_Ремонта
	               |ИЗ
	               |	РегистрСведений.торо_ПлановыеРемонтныеРаботы.СрезПоследних КАК торо_ПланГрафикРемонтаПланРемонтов
	               |ГДЕ
	               |	НЕ торо_ПланГрафикРемонтаПланРемонтов.Отменен
	               |	И НЕ торо_ПланГрафикРемонтаПланРемонтов.Замещен
	               |	И торо_ПланГрафикРемонтаПланРемонтов.ДатаНачалаРемонтныхРабот МЕЖДУ &ДатаНач И &ДатаКон";
						   
	Запрос.УстановитьПараметр("ДатаНач",ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",ДатаКон);
	ТабРемонтов = Запрос.Выполнить().Выгрузить();
	
	ТабНаработки = торо_РаботаСНаработкой.РассчитатьНаработку(ТабРемонтов,ДатаНач,ДатаКон);
		
	Возврат ТабНаработки;
	
КонецФункции
#КонецОбласти

#КонецЕсли