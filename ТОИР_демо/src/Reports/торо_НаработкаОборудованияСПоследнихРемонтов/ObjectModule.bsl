Перем ОбъектРемонта Экспорт;  // Ссылка на объект ремонта, параметр отчета.
Перем СтруктураИерархии Экспорт; // Структура иерархии, параметр отчета.
Перем ВместеСПодчиненными Экспорт; // Флаг, параметр отчета.

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ФункцииОтчетовКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриЗагрузкеПользовательскихНастроекНаСервере = Истина;
	Настройки.События.ПриЗагрузкеВариантаНаСервере = Истина;
КонецПроцедуры

Процедура ПриЗагрузкеВариантаНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	ПользовательскиеНастройкиЭлементы = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	ВыбратьЗначенияНастроек(ПользовательскиеНастройкиЭлементы, Форма);
КонецПроцедуры

Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(Форма, НовыеПользовательскиеНастройкиКД) Экспорт
	ПользовательскиеНастройкиЭлементы = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	ВыбратьЗначенияНастроек(ПользовательскиеНастройкиЭлементы, Форма);
КонецПроцедуры

Процедура ВыбратьЗначенияНастроек(ПользовательскиеНастройкиЭлементы, Форма)
	
	ПараметрыВыполнения = Форма.Параметры;
	
	Для каждого Элемент Из ПользовательскиеНастройкиЭлементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если Строка(Элемент.Параметр) = "ОбъектРемонта" Тогда
				Если ПараметрыВыполнения.Свойство("ОбъектРемонта") Тогда
					Элемент.Значение      = ПараметрыВыполнения.ОбъектРемонта;
					Элемент.Использование = Истина;			
					Продолжить;
				КонецЕсли;
			ИначеЕсли Строка(Элемент.Параметр) = "СтруктураИерархии" Тогда
				Если ПараметрыВыполнения.Свойство("СтруктураИерархии") Тогда
					Элемент.Значение      = ПараметрыВыполнения.СтруктураИерархии;
					Элемент.Использование = Истина;			
					Продолжить;
				КонецЕсли;
			ИначеЕсли Строка(Элемент.Параметр) = "ВместеСПодчиненными" Тогда
				Если ПараметрыВыполнения.Свойство("ВместеСПодчиненными") Тогда
					Элемент.Значение      = ПараметрыВыполнения.ВместеСПодчиненными;
					Элемент.Использование = Истина;			
					Продолжить;
				КонецЕсли;			
			ИначеЕсли Строка(Элемент.Параметр) = "Период" Тогда
				Если ПараметрыВыполнения.Свойство("ДатаКон") и ПараметрыВыполнения.Свойство("ДатаНач") Тогда
					Элемент.Значение      = Новый СтандартныйПериод(ПараметрыВыполнения.ДатаНач, ПараметрыВыполнения.ДатаКон);
					Элемент.Использование = Истина;			
					Продолжить;
				КонецЕсли;			
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Сгенерируем макет компоновки данных при помощи компоновщика макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	СхемаКД = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ТабРезультата = ПолучитьТабЗначСРезультатомОтчета();
	
	ФОВыделятьИнвестиционныеРемонты = ПолучитьФункциональнуюОпцию("торо_ВыделятьИнвестиционныеРемонты");
	Для Каждого ЭлементВыбора Из Настройки.Выбор.Элементы Цикл
		Если ЭлементВыбора.Заголовок = "Последний капитальный ремонт" Тогда
			ЭлементВыбора.Использование = ФОВыделятьИнвестиционныеРемонты;
		КонецЕсли;
	КонецЦикла;
		
	// В качестве схемы компоновки будет выступать схема самого отчета.
	// В качестве настроек отчета - текущие настройки отчета.
	// Данные расшифровки будем помещать в свойство расширения формы - ДанныеРасшифровки.
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКД, Настройки, ДанныеРасшифровки);
	
	// получаем внешние наборы данных
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("НаборДанных", ТабРезультата);
	
	// Создадим и инициализируем процессор компоновки
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,ДанныеРасшифровки,Истина);
	
	// Создадим и инициализируем процессор вывода результата
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.ОтображатьПроцентВывода = Истина;

	// выводим отчет
	ПроцессорВывода.Вывести(ПроцессорКомпоновки,Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТабЗначСРезультатомОтчета()
	
	ИдПериод = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту 
		(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра 
		(Новый ПараметрКомпоновкиДанных("Период")));
	ИдОбъектРемонта = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту 
		(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра 
		(Новый ПараметрКомпоновкиДанных("ОбъектРемонта")));
	ИдСтруктураИерархии = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту 
		(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра 
		(Новый ПараметрКомпоновкиДанных("СтруктураИерархии")));
	ИдВместеСПодчиненными = КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьИдентификаторПоОбъекту 
		(КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра 
		(Новый ПараметрКомпоновкиДанных("ВместеСПодчиненными")));
	
	Период = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдПериод);
	ДатаНач = Период.Значение.ДатаНачала;
	ДатаКон = Период.Значение.ДатаОкончания;

	ОбъектРемонта = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдОбъектРемонта).Значение;
	СтруктураИерархии = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдСтруктураИерархии).Значение;
	ВместеСПодчиненными = КомпоновщикНастроек.ПользовательскиеНастройки.Элементы.Найти(ИдВместеСПодчиненными).Значение;
	
	Если ВместеСПодчиненными Тогда
		МассивОР = Справочники.торо_ОбъектыРемонта.ПолучитьВсеПодчиненныеОР(ОбъектРемонта, СтруктураИерархии);
		МассивОР.Добавить(ОбъектРемонта);
	Иначе
		Если ОбъектРемонта <> Неопределено Тогда
			МассивОР = Новый Массив;
			МассивОР.Добавить(ОбъектРемонта);
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенВТ;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ОбъектРемонта,
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ВидРемонтныхРабот,
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ID,
	               |	торо_ЗавершенныеРемонтныеРаботыСрезПоследних.ДатаОкончания
	               |ПОМЕСТИТЬ ПоследниеРемонты
	               |ИЗ
	               |	РегистрСведений.торо_ЗавершенныеРемонтныеРаботы.СрезПоследних(&ДатаКон, " + ?(МассивОР = Неопределено, "", "ОбъектРемонта В (&МассивОР) ") + ") КАК торо_ЗавершенныеРемонтныеРаботыСрезПоследних
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследниеРемонты.ОбъектРемонта,
	               |	МАКСИМУМ(ПоследниеРемонты.ДатаОкончания) КАК ДатаОкончания
	               |ПОМЕСТИТЬ ТабМаксДат
	               |ИЗ
	               |	ПоследниеРемонты КАК ПоследниеРемонты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ПоследниеРемонты.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследниеРемонты.ОбъектРемонта,
	               |	ПоследниеРемонты.ВидРемонтныхРабот КАК ВидРемонта,
	               |	ПоследниеРемонты.ID КАК ID_Ремонта,
	               |	ПоследниеРемонты.ДатаОкончания КАК ДатаНачала
	               |ПОМЕСТИТЬ Капитальные
	               |ИЗ
	               |	ПоследниеРемонты КАК ПоследниеРемонты
	               |ГДЕ
	               |	ПоследниеРемонты.ВидРемонтныхРабот В
	               |			(ВЫБРАТЬ
	               |				торо_ВидыРемонтов.Ссылка
	               |			ИЗ
	               |				Справочник.торо_ВидыРемонтов КАК торо_ВидыРемонтов
	               |			ГДЕ
	               |				торо_ВидыРемонтов.КапитальныйРемонт)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоследниеРемонты.ОбъектРемонта,
	               |	ПоследниеРемонты.ВидРемонтныхРабот,
	               |	ПоследниеРемонты.ID,
	               |	ПоследниеРемонты.ДатаОкончания
	               |ПОМЕСТИТЬ НеКапитальные
	               |ИЗ
	               |	ТабМаксДат КАК ТабМаксДат
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследниеРемонты КАК ПоследниеРемонты
	               |		ПО ТабМаксДат.ОбъектРемонта = ПоследниеРемонты.ОбъектРемонта
	               |			И ТабМаксДат.ДатаОкончания = ПоследниеРемонты.ДатаОкончания
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЕСТЬNULL(Капитальные.ОбъектРемонта, НеКапитальные.ОбъектРемонта) КАК ОбъектРемонта,
	               |	Капитальные.ВидРемонта КАК ВидРемонтаКапитальный,
	               |	НеКапитальные.ВидРемонтныхРабот,
	               |	Капитальные.ДатаНачала КАК ДатаРемонтаКапитальный,
	               |	НеКапитальные.ДатаОкончания КАК ДатаРемонта,
	               |	Капитальные.ID_Ремонта КАК IDКапитального,
	               |	НеКапитальные.ID
	               |ПОМЕСТИТЬ Результат
	               |ИЗ
	               |	Капитальные КАК Капитальные
	               |		ПОЛНОЕ СОЕДИНЕНИЕ НеКапитальные КАК НеКапитальные
	               |		ПО Капитальные.ОбъектРемонта = НеКапитальные.ОбъектРемонта
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	Капитальные.ОбъектРемонта,
	               |	Капитальные.ВидРемонта,
	               |	Капитальные.ID_Ремонта,
	               |	Капитальные.ДатаНачала
	               |ИЗ
	               |	Капитальные КАК Капитальные
	               |
	               |ОБЪЕДИНИТЬ
	               |
	               |ВЫБРАТЬ
	               |	НеКапитальные.ОбъектРемонта,
	               |	НеКапитальные.ВидРемонтныхРабот,
	               |	НеКапитальные.ID,
	               |	НеКапитальные.ДатаОкончания
	               |ИЗ
	               |	НеКапитальные КАК НеКапитальные";
						   
	Запрос.УстановитьПараметр("ДатаНач",ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",ДатаКон);
	Если МассивОР <> Неопределено Тогда
		Запрос.УстановитьПараметр("МассивОР", МассивОР);
	КонецЕсли;
	
	ТабРемонтов = Запрос.Выполнить().Выгрузить();
	
	ТабНаработки = торо_РаботаСНаработкой.РассчитатьНаработкуСРемонта(ТабРемонтов, ДатаНач, ДатаКон);
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенВТ;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабНаработки.ДатаНач,
		|	ТабНаработки.ОбъектРемонтныхРабот,
		|	ТабНаработки.ВидРемонтныхРабот,
		|	ТабНаработки.ID,
		|	ТабНаработки.Наработка,
		|	ТабНаработки.Показатель
		|ПОМЕСТИТЬ ТабНаработки
		|ИЗ
		|	&ТабНаработки КАК ТабНаработки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Результат.ДатаРемонта КАК ДатаКон,
		|	Результат.ДатаРемонтаКапитальный КАК ДатаКонКапитальный,
		|	Результат.ОбъектРемонта КАК ОбъектРемонтныхРабот,
		|	Результат.ВидРемонтныхРабот,
		|	Результат.ВидРемонтаКапитальный,
		|	Результат.IDКапитального,
		|
		|	ТабНаработки.Наработка КАК Наработка,
		|	ТабНаработки.Показатель КАК Показатель
		|ПОМЕСТИТЬ ТабСНаработкой
		|ИЗ
		|	Результат КАК Результат
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабНаработки КАК ТабНаработки
		|		ПО Результат.ID = ТабНаработки.ID
		|
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабСНаработкой.ДатаКон,
		|	ТабСНаработкой.ДатаКонКапитальный,
		|	ТабСНаработкой.ОбъектРемонтныхРабот,
		|	ТабСНаработкой.ВидРемонтныхРабот,
		|	ТабСНаработкой.ВидРемонтаКапитальный,
		|	ТабСНаработкой.Наработка,
		|	ТабСНаработкой.Показатель,
		|	ТабНаработки.Наработка КАК НаработкаКапитальный,
		|	ТабНаработки.Показатель КАК ПоказательКапитальный
		|ИЗ
		|	ТабСНаработкой КАК ТабСНаработкой
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТабНаработки КАК ТабНаработки
		|		ПО ТабСНаработкой.IDКапитального = ТабНаработки.ID
		|		И ТабСНаработкой.Показатель = ТабНаработки.Показатель";
		
	Запрос.УстановитьПараметр("ТабНаработки", ТабНаработки);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНач);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаКон);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция НайтиДанные(ИмяПоиска, МестоПоиска)
	
	Для каждого Элемент Из МестоПоиска Цикл
		Если Элемент.Имя = ИмяПоиска Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Результат = НайтиДанные(ИмяПоиска, Элемент.Структура);
			Если Результат <> Неопределено Тогда
				Возврат Результат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#КонецЕсли